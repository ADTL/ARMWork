<<<<<<< HEAD

stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000188:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 800018c:	4b02      	ldr	r3, [pc, #8]	; (8000198 <NVIC_PriorityGroupConfig+0x10>)
 800018e:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8000192:	60d8      	str	r0, [r3, #12]
}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00

0800019c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800019c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800019e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a0:	b303      	cbz	r3, 80001e4 <NVIC_Init+0x48>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a2:	4b16      	ldr	r3, [pc, #88]	; (80001fc <NVIC_Init+0x60>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001a4:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a6:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001a8:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001aa:	43db      	mvns	r3, r3
 80001ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80001b0:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80001ba:	220f      	movs	r2, #15
 80001bc:	fa42 f203 	asr.w	r2, r2, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001c0:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c2:	4022      	ands	r2, r4
 80001c4:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <NVIC_Init+0x64>)
 80001c8:	7801      	ldrb	r1, [r0, #0]
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80001ca:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001cc:	18cb      	adds	r3, r1, r3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80001ce:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d4:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001d6:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001da:	f003 031f 	and.w	r3, r3, #31
 80001de:	fa02 f303 	lsl.w	r3, r2, r3
 80001e2:	e007      	b.n	80001f4 <NVIC_Init+0x58>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e4:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001e6:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e8:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	f003 031f 	and.w	r3, r3, #31
 80001ee:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f2:	3120      	adds	r1, #32
 80001f4:	4a02      	ldr	r2, [pc, #8]	; (8000200 <NVIC_Init+0x64>)
 80001f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	e000ed00 	.word	0xe000ed00
 8000200:	e000e100 	.word	0xe000e100

08000204 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000204:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000208:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800020c:	4b01      	ldr	r3, [pc, #4]	; (8000214 <NVIC_SetVectorTable+0x10>)
 800020e:	4308      	orrs	r0, r1
 8000210:	6098      	str	r0, [r3, #8]
}
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800021a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800021c:	b109      	cbz	r1, 8000222 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 800021e:	4310      	orrs	r0, r2
 8000220:	e001      	b.n	8000226 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000222:	ea22 0000 	bic.w	r0, r2, r0
 8000226:	6118      	str	r0, [r3, #16]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000232:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000234:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000236:	bf0c      	ite	eq
 8000238:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800023c:	f022 0204 	bicne.w	r2, r2, #4
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	4770      	bx	lr
 8000244:	e000e010 	.word	0xe000e010

08000248 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000248:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800024a:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <GPIO_DeInit+0xb4>)
 800024c:	4298      	cmp	r0, r3
 800024e:	d105      	bne.n	800025c <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000250:	2001      	movs	r0, #1
 8000252:	4601      	mov	r1, r0
 8000254:	f000 fc4c 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000258:	2001      	movs	r0, #1
 800025a:	e048      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 800025c:	4b28      	ldr	r3, [pc, #160]	; (8000300 <GPIO_DeInit+0xb8>)
 800025e:	4298      	cmp	r0, r3
 8000260:	d105      	bne.n	800026e <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000262:	2002      	movs	r0, #2
 8000264:	2101      	movs	r1, #1
 8000266:	f000 fc43 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800026a:	2002      	movs	r0, #2
 800026c:	e03f      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <GPIO_DeInit+0xbc>)
 8000270:	4298      	cmp	r0, r3
 8000272:	d105      	bne.n	8000280 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000274:	2004      	movs	r0, #4
 8000276:	2101      	movs	r1, #1
 8000278:	f000 fc3a 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800027c:	2004      	movs	r0, #4
 800027e:	e036      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <GPIO_DeInit+0xc0>)
 8000282:	4298      	cmp	r0, r3
 8000284:	d105      	bne.n	8000292 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000286:	2008      	movs	r0, #8
 8000288:	2101      	movs	r1, #1
 800028a:	f000 fc31 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800028e:	2008      	movs	r0, #8
 8000290:	e02d      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <GPIO_DeInit+0xc4>)
 8000294:	4298      	cmp	r0, r3
 8000296:	d105      	bne.n	80002a4 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000298:	2010      	movs	r0, #16
 800029a:	2101      	movs	r1, #1
 800029c:	f000 fc28 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80002a0:	2010      	movs	r0, #16
 80002a2:	e024      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <GPIO_DeInit+0xc8>)
 80002a6:	4298      	cmp	r0, r3
 80002a8:	d105      	bne.n	80002b6 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80002aa:	2020      	movs	r0, #32
 80002ac:	2101      	movs	r1, #1
 80002ae:	f000 fc1f 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80002b2:	2020      	movs	r0, #32
 80002b4:	e01b      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <GPIO_DeInit+0xcc>)
 80002b8:	4298      	cmp	r0, r3
 80002ba:	d105      	bne.n	80002c8 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80002bc:	2040      	movs	r0, #64	; 0x40
 80002be:	2101      	movs	r1, #1
 80002c0:	f000 fc16 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80002c4:	2040      	movs	r0, #64	; 0x40
 80002c6:	e012      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <GPIO_DeInit+0xd0>)
 80002ca:	4298      	cmp	r0, r3
 80002cc:	d105      	bne.n	80002da <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80002ce:	2080      	movs	r0, #128	; 0x80
 80002d0:	2101      	movs	r1, #1
 80002d2:	f000 fc0d 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80002d6:	2080      	movs	r0, #128	; 0x80
 80002d8:	e009      	b.n	80002ee <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <GPIO_DeInit+0xd4>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d10b      	bne.n	80002f8 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80002e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002e4:	2101      	movs	r1, #1
 80002e6:	f000 fc03 	bl	8000af0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80002ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002ee:	2100      	movs	r1, #0
    }
  }
}
 80002f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80002f4:	f000 bbfc 	b.w	8000af0 <RCC_AHB1PeriphResetCmd>
 80002f8:	bd08      	pop	{r3, pc}
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000
 8000300:	40020400 	.word	0x40020400
 8000304:	40020800 	.word	0x40020800
 8000308:	40020c00 	.word	0x40020c00
 800030c:	40021000 	.word	0x40021000
 8000310:	40021400 	.word	0x40021400
 8000314:	40021800 	.word	0x40021800
 8000318:	40021c00 	.word	0x40021c00
 800031c:	40022000 	.word	0x40022000

08000320 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000324:	2300      	movs	r3, #0
 8000326:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800032a:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 800032c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000330:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000332:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000336:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 800033a:	42a5      	cmp	r5, r4
 800033c:	d131      	bne.n	80003a2 <GPIO_Init+0x82>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800033e:	6806      	ldr	r6, [r0, #0]
 8000340:	fa07 f403 	lsl.w	r4, r7, r3
 8000344:	43e4      	mvns	r4, r4
 8000346:	4026      	ands	r6, r4
 8000348:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800034a:	790e      	ldrb	r6, [r1, #4]
 800034c:	f8d0 9000 	ldr.w	r9, [r0]
 8000350:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000354:	3e01      	subs	r6, #1
 8000356:	b2f6      	uxtb	r6, r6
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000358:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800035c:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800035e:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000362:	d815      	bhi.n	8000390 <GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000364:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000366:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800036a:	4026      	ands	r6, r4
 800036c:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800036e:	6886      	ldr	r6, [r0, #8]
 8000370:	fa09 f903 	lsl.w	r9, r9, r3
 8000374:	ea49 0606 	orr.w	r6, r9, r6
 8000378:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800037a:	6846      	ldr	r6, [r0, #4]
 800037c:	ea26 0505 	bic.w	r5, r6, r5
 8000380:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000382:	798d      	ldrb	r5, [r1, #6]
 8000384:	6846      	ldr	r6, [r0, #4]
 8000386:	fa05 f502 	lsl.w	r5, r5, r2
 800038a:	b2ad      	uxth	r5, r5
 800038c:	4335      	orrs	r5, r6
 800038e:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000390:	68c5      	ldr	r5, [r0, #12]
 8000392:	402c      	ands	r4, r5
 8000394:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000396:	79cc      	ldrb	r4, [r1, #7]
 8000398:	68c5      	ldr	r5, [r0, #12]
 800039a:	fa04 f403 	lsl.w	r4, r4, r3
 800039e:	432c      	orrs	r4, r5
 80003a0:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003a2:	3201      	adds	r2, #1
 80003a4:	3302      	adds	r3, #2
 80003a6:	2a10      	cmp	r2, #16
 80003a8:	d1c3      	bne.n	8000332 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080003ae <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b2:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003b4:	2300      	movs	r3, #0
 80003b6:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003b8:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003ba:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003bc:	71c3      	strb	r3, [r0, #7]
}
 80003be:	4770      	bx	lr

080003c0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003c0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80003c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c6:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80003c8:	9b01      	ldr	r3, [sp, #4]
 80003ca:	430b      	orrs	r3, r1
 80003cc:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003ce:	9b01      	ldr	r3, [sp, #4]
 80003d0:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80003d2:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003d4:	9b01      	ldr	r3, [sp, #4]
 80003d6:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80003d8:	69c3      	ldr	r3, [r0, #28]
 80003da:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80003dc:	69c3      	ldr	r3, [r0, #28]
 80003de:	9301      	str	r3, [sp, #4]
}
 80003e0:	b002      	add	sp, #8
 80003e2:	4770      	bx	lr

080003e4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e4:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80003e6:	4219      	tst	r1, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80003e8:	bf0c      	ite	eq
 80003ea:	2000      	moveq	r0, #0
 80003ec:	2001      	movne	r0, #1
}
 80003ee:	4770      	bx	lr

080003f0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80003f0:	6900      	ldr	r0, [r0, #16]
 80003f2:	b280      	uxth	r0, r0
}
 80003f4:	4770      	bx	lr

080003f6 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003f6:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f8:	4219      	tst	r1, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80003fa:	bf0c      	ite	eq
 80003fc:	2000      	moveq	r0, #0
 80003fe:	2001      	movne	r0, #1
}
 8000400:	4770      	bx	lr

08000402 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000402:	6940      	ldr	r0, [r0, #20]
 8000404:	b280      	uxth	r0, r0
}
 8000406:	4770      	bx	lr

08000408 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000408:	8301      	strh	r1, [r0, #24]
}
 800040a:	4770      	bx	lr

0800040c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800040c:	8341      	strh	r1, [r0, #26]
}
 800040e:	4770      	bx	lr

08000410 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000410:	b10a      	cbz	r2, 8000416 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000412:	8301      	strh	r1, [r0, #24]
 8000414:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000416:	8341      	strh	r1, [r0, #26]
 8000418:	4770      	bx	lr

0800041a <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800041a:	6141      	str	r1, [r0, #20]
}
 800041c:	4770      	bx	lr

0800041e <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041e:	6943      	ldr	r3, [r0, #20]
 8000420:	4059      	eors	r1, r3
 8000422:	6141      	str	r1, [r0, #20]
}
 8000424:	4770      	bx	lr

08000426 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000426:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800042a:	08c9      	lsrs	r1, r1, #3
 800042c:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800042e:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000430:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000432:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8000436:	240f      	movs	r4, #15
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	ea25 0404 	bic.w	r4, r5, r4
 8000440:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000444:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800044c:	4323      	orrs	r3, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800044e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8000452:	bd30      	pop	{r4, r5, pc}

08000454 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000454:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <I2C_DeInit+0x50>)
 8000458:	4298      	cmp	r0, r3
 800045a:	d107      	bne.n	800046c <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800045c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000460:	2101      	movs	r1, #1
 8000462:	f000 fb69 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000466:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800046a:	e014      	b.n	8000496 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <I2C_DeInit+0x54>)
 800046e:	4298      	cmp	r0, r3
 8000470:	d107      	bne.n	8000482 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000472:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000476:	2101      	movs	r1, #1
 8000478:	f000 fb5e 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800047c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000480:	e009      	b.n	8000496 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <I2C_DeInit+0x58>)
 8000484:	4298      	cmp	r0, r3
 8000486:	d10b      	bne.n	80004a0 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000488:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800048c:	2101      	movs	r1, #1
 800048e:	f000 fb53 	bl	8000b38 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000492:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000496:	2100      	movs	r1, #0
    }
  }
}
 8000498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800049c:	f000 bb4c 	b.w	8000b38 <RCC_APB1PeriphResetCmd>
 80004a0:	bd08      	pop	{r3, pc}
 80004a2:	bf00      	nop
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40005800 	.word	0x40005800
 80004ac:	40005c00 	.word	0x40005c00

080004b0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80004b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80004b2:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80004b4:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80004b6:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80004b8:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80004ba:	f000 fa6d 	bl	8000998 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80004be:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004c0:	482c      	ldr	r0, [pc, #176]	; (8000574 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004c2:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80004c4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80004c8:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004ca:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80004ce:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80004d0:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 80004d2:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80004d4:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80004d6:	8822      	ldrh	r2, [r4, #0]
 80004d8:	f022 0201 	bic.w	r2, r2, #1
 80004dc:	0412      	lsls	r2, r2, #16
 80004de:	0c12      	lsrs	r2, r2, #16
 80004e0:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004e2:	4a25      	ldr	r2, [pc, #148]	; (8000578 <I2C_Init+0xc8>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d80a      	bhi.n	80004fe <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004ee:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004f0:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004f2:	b280      	uxth	r0, r0
 80004f4:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	bf98      	it	ls
 80004fa:	2304      	movls	r3, #4
 80004fc:	e021      	b.n	8000542 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80004fe:	88ee      	ldrh	r6, [r5, #6]
 8000500:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000504:	4296      	cmp	r6, r2
 8000506:	d105      	bne.n	8000514 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000508:	2203      	movs	r2, #3
 800050a:	4353      	muls	r3, r2
 800050c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000510:	b29b      	uxth	r3, r3
 8000512:	e006      	b.n	8000522 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000514:	2219      	movs	r2, #25
 8000516:	4353      	muls	r3, r2
 8000518:	fbb1 f3f3 	udiv	r3, r1, r3
 800051c:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800051e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000522:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000524:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000528:	bf08      	it	eq
 800052a:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800052e:	4350      	muls	r0, r2
 8000530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000534:	fb90 f0f2 	sdiv	r0, r0, r2
 8000538:	3001      	adds	r0, #1
 800053a:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000540:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000542:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000544:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000546:	8969      	ldrh	r1, [r5, #10]
 8000548:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800054a:	b29b      	uxth	r3, r3
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000552:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000558:	f023 030a 	bic.w	r3, r3, #10
 800055c:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800055e:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000560:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000562:	4313      	orrs	r3, r2
 8000564:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000566:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000568:	892a      	ldrh	r2, [r5, #8]
 800056a:	89ab      	ldrh	r3, [r5, #12]
 800056c:	4313      	orrs	r3, r2
 800056e:	b29b      	uxth	r3, r3
 8000570:	8123      	strh	r3, [r4, #8]
}
 8000572:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000574:	000f4240 	.word	0x000f4240
 8000578:	000186a0 	.word	0x000186a0

0800057c <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800057c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000580:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8000582:	2300      	movs	r3, #0
 8000584:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8000586:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800058a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800058c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800058e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8000592:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000594:	8183      	strh	r3, [r0, #12]
}
 8000596:	4770      	bx	lr

08000598 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000598:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800059a:	b119      	cbz	r1, 80005a4 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800059c:	b29b      	uxth	r3, r3
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	e003      	b.n	80005ac <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80005a4:	f023 0301 	bic.w	r3, r3, #1
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	8003      	strh	r3, [r0, #0]
 80005ae:	4770      	bx	lr

080005b0 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80005b0:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005b2:	b119      	cbz	r1, 80005bc <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	e003      	b.n	80005c4 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80005bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	8003      	strh	r3, [r0, #0]
 80005c6:	4770      	bx	lr

080005c8 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80005c8:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005ca:	b119      	cbz	r1, 80005d4 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	e003      	b.n	80005dc <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80005d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005d8:	041b      	lsls	r3, r3, #16
 80005da:	0c1b      	lsrs	r3, r3, #16
 80005dc:	8003      	strh	r3, [r0, #0]
 80005de:	4770      	bx	lr

080005e0 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80005e0:	b112      	cbz	r2, 80005e8 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80005e2:	f041 0101 	orr.w	r1, r1, #1
 80005e6:	e001      	b.n	80005ec <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80005e8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80005ec:	8201      	strh	r1, [r0, #16]
}
 80005ee:	4770      	bx	lr

080005f0 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80005f0:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f2:	b119      	cbz	r1, 80005fc <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fa:	e003      	b.n	8000604 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80005fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	8003      	strh	r3, [r0, #0]
 8000606:	4770      	bx	lr

08000608 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8000608:	8983      	ldrh	r3, [r0, #12]
 800060a:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800060c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8000610:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8000614:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8000616:	8181      	strh	r1, [r0, #12]
}
 8000618:	4770      	bx	lr

0800061a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800061a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061c:	b119      	cbz	r1, 8000626 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800061e:	b29b      	uxth	r3, r3
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	e003      	b.n	800062e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	041b      	lsls	r3, r3, #16
 800062c:	0c1b      	lsrs	r3, r3, #16
 800062e:	8183      	strh	r3, [r0, #12]
 8000630:	4770      	bx	lr

08000632 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8000632:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000634:	b119      	cbz	r1, 800063e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8000636:	b29b      	uxth	r3, r3
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	e003      	b.n	8000646 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800063e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000642:	041b      	lsls	r3, r3, #16
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	8003      	strh	r3, [r0, #0]
 8000648:	4770      	bx	lr

0800064a <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800064a:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800064c:	b129      	cbz	r1, 800065a <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800064e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000656:	b29b      	uxth	r3, r3
 8000658:	e001      	b.n	800065e <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800065a:	045b      	lsls	r3, r3, #17
 800065c:	0c5b      	lsrs	r3, r3, #17
 800065e:	8003      	strh	r3, [r0, #0]
 8000660:	4770      	bx	lr

08000662 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8000662:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8000664:	b919      	cbnz	r1, 800066e <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8000666:	b29b      	uxth	r3, r3
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	e003      	b.n	8000676 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800066e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000672:	041b      	lsls	r3, r3, #16
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	8003      	strh	r3, [r0, #0]
 8000678:	4770      	bx	lr

0800067a <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800067a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800067e:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8000680:	d004      	beq.n	800068c <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8000682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	0c1b      	lsrs	r3, r3, #16
 800068a:	e002      	b.n	8000692 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800068c:	b29b      	uxth	r3, r3
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	8383      	strh	r3, [r0, #28]
 8000694:	4770      	bx	lr

08000696 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000696:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800069a:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800069c:	d103      	bne.n	80006a6 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800069e:	b29b      	uxth	r3, r3
 80006a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a4:	e003      	b.n	80006ae <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80006a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006aa:	041b      	lsls	r3, r3, #16
 80006ac:	0c1b      	lsrs	r3, r3, #16
 80006ae:	8003      	strh	r3, [r0, #0]
 80006b0:	4770      	bx	lr

080006b2 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80006b2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80006b6:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80006b8:	d103      	bne.n	80006c2 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c0:	e003      	b.n	80006ca <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80006c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	8003      	strh	r3, [r0, #0]
 80006cc:	4770      	bx	lr

080006ce <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80006ce:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d0:	b119      	cbz	r1, 80006da <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	e003      	b.n	80006e2 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80006da:	f023 0310 	bic.w	r3, r3, #16
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	8003      	strh	r3, [r0, #0]
 80006e4:	4770      	bx	lr

080006e6 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80006e6:	8201      	strh	r1, [r0, #16]
}
 80006e8:	4770      	bx	lr

080006ea <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80006ea:	8a00      	ldrh	r0, [r0, #16]
 80006ec:	b2c0      	uxtb	r0, r0
}
 80006ee:	4770      	bx	lr

080006f0 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80006f0:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006f2:	b119      	cbz	r1, 80006fc <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fa:	e003      	b.n	8000704 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80006fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000700:	041b      	lsls	r3, r3, #16
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	8003      	strh	r3, [r0, #0]
 8000706:	4770      	bx	lr

08000708 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8000708:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800070c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800070e:	d103      	bne.n	8000718 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8000710:	b29b      	uxth	r3, r3
 8000712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000716:	e003      	b.n	8000720 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8000718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800071c:	041b      	lsls	r3, r3, #16
 800071e:	0c1b      	lsrs	r3, r3, #16
 8000720:	8003      	strh	r3, [r0, #0]
 8000722:	4770      	bx	lr

08000724 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000724:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000726:	b119      	cbz	r1, 8000730 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8000728:	b29b      	uxth	r3, r3
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	e003      	b.n	8000738 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8000730:	f023 0320 	bic.w	r3, r3, #32
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	8003      	strh	r3, [r0, #0]
 800073a:	4770      	bx	lr

0800073c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800073c:	8b00      	ldrh	r0, [r0, #24]
 800073e:	f3c0 2007 	ubfx	r0, r0, #8, #8
}
 8000742:	4770      	bx	lr

08000744 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8000744:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000746:	b119      	cbz	r1, 8000750 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8000748:	b29b      	uxth	r3, r3
 800074a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074e:	e003      	b.n	8000758 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8000750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000754:	041b      	lsls	r3, r3, #16
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	8083      	strh	r3, [r0, #4]
 800075a:	4770      	bx	lr

0800075c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800075c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800075e:	b119      	cbz	r1, 8000768 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8000760:	b29b      	uxth	r3, r3
 8000762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000766:	e003      	b.n	8000770 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8000768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	8083      	strh	r3, [r0, #4]
 8000772:	4770      	bx	lr

08000774 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8000774:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800077a:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 800077c:	9b01      	ldr	r3, [sp, #4]
 800077e:	18c9      	adds	r1, r1, r3
 8000780:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8000782:	9b01      	ldr	r3, [sp, #4]
 8000784:	8818      	ldrh	r0, [r3, #0]
 8000786:	b280      	uxth	r0, r0
}
 8000788:	b002      	add	sp, #8
 800078a:	4770      	bx	lr

0800078c <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800078c:	8883      	ldrh	r3, [r0, #4]
 800078e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8000790:	b10a      	cbz	r2, 8000796 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000792:	4319      	orrs	r1, r3
 8000794:	e001      	b.n	800079a <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8000796:	ea23 0101 	bic.w	r1, r3, r1
 800079a:	8081      	strh	r1, [r0, #4]
 800079c:	4770      	bx	lr

0800079e <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800079e:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80007a0:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007a2:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80007a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007a8:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80007aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
 80007ae:	1a43      	subs	r3, r0, r1
 80007b0:	4258      	negs	r0, r3
 80007b2:	eb40 0003 	adc.w	r0, r0, r3
}
 80007b6:	4770      	bx	lr

080007b8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007b8:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80007ba:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80007bc:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80007be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

  /* Return status */
  return lastevent;
}
 80007c6:	4770      	bx	lr

080007c8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80007c8:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007d0:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80007d2:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007d4:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80007d6:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80007d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80007dc:	b113      	cbz	r3, 80007e4 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80007de:	9b01      	ldr	r3, [sp, #4]
 80007e0:	3314      	adds	r3, #20
 80007e2:	e002      	b.n	80007ea <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007e4:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80007e6:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007e8:	3318      	adds	r3, #24
 80007ea:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80007ec:	9b01      	ldr	r3, [sp, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80007f0:	4219      	tst	r1, r3
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80007f2:	bf0c      	ite	eq
 80007f4:	2000      	moveq	r0, #0
 80007f6:	2001      	movne	r0, #1
}
 80007f8:	b002      	add	sp, #8
 80007fa:	4770      	bx	lr

080007fc <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80007fc:	43c9      	mvns	r1, r1
 80007fe:	b289      	uxth	r1, r1
 8000800:	8281      	strh	r1, [r0, #20]
}
 8000802:	4770      	bx	lr

08000804 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000804:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000806:	8a80      	ldrh	r0, [r0, #20]
 8000808:	b280      	uxth	r0, r0
 800080a:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800080c:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800080e:	d006      	beq.n	800081e <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000810:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8000814:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8000818:	bf0c      	ite	eq
 800081a:	2000      	moveq	r0, #0
 800081c:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800081e:	4770      	bx	lr

08000820 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000820:	43c9      	mvns	r1, r1
 8000822:	b289      	uxth	r1, r1
 8000824:	8281      	strh	r1, [r0, #20]
}
 8000826:	4770      	bx	lr

08000828 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <RCC_DeInit+0x2c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	f042 0201 	orr.w	r2, r2, #1
 8000830:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000836:	6819      	ldr	r1, [r3, #0]
 8000838:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800083c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000840:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000842:	4905      	ldr	r1, [pc, #20]	; (8000858 <RCC_DeInit+0x30>)
 8000844:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800084c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800084e:	60da      	str	r2, [r3, #12]
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	24003010 	.word	0x24003010

0800085c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <RCC_HSEConfig+0xc>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000862:	7018      	strb	r0, [r3, #0]
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023802 	.word	0x40023802

0800086c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <RCC_AdjustHSICalibrationValue+0x10>)
 800086e:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000870:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000874:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000878:	6018      	str	r0, [r3, #0]
}
 800087a:	4770      	bx	lr
 800087c:	40023800 	.word	0x40023800

08000880 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <RCC_HSICmd+0x8>)
 8000882:	6018      	str	r0, [r3, #0]
}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	42470000 	.word	0x42470000

0800088c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <RCC_LSEConfig+0x1c>)
 800088e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000890:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000892:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000894:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000896:	d002      	beq.n	800089e <RCC_LSEConfig+0x12>
 8000898:	2804      	cmp	r0, #4
 800089a:	d104      	bne.n	80008a6 <RCC_LSEConfig+0x1a>
 800089c:	e001      	b.n	80008a2 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800089e:	7018      	strb	r0, [r3, #0]
      break;
 80008a0:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80008a2:	2205      	movs	r2, #5
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	4770      	bx	lr
 80008a8:	40023870 	.word	0x40023870

080008ac <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80008ac:	4b01      	ldr	r3, [pc, #4]	; (80008b4 <RCC_LSICmd+0x8>)
 80008ae:	6018      	str	r0, [r3, #0]
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	42470e80 	.word	0x42470e80

080008b8 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80008b8:	4301      	orrs	r1, r0
 80008ba:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80008be:	9900      	ldr	r1, [sp, #0]
 80008c0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80008c4:	085a      	lsrs	r2, r3, #1
 80008c6:	3a01      	subs	r2, #1
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <RCC_PLLConfig+0x1c>)
 80008ca:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80008ce:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <RCC_PLLCmd+0x8>)
 80008da:	6018      	str	r0, [r3, #0]
}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	42470060 	.word	0x42470060

080008e4 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80008e4:	0180      	lsls	r0, r0, #6
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <RCC_PLLI2SConfig+0x10>)
 80008e8:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80008ec:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80008f8:	4b01      	ldr	r3, [pc, #4]	; (8000900 <RCC_PLLI2SCmd+0x8>)
 80008fa:	6018      	str	r0, [r3, #0]
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	42470068 	.word	0x42470068

08000904 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <RCC_ClockSecuritySystemCmd+0x8>)
 8000906:	6018      	str	r0, [r3, #0]
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	4247004c 	.word	0x4247004c

08000910 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <RCC_MCO1Config+0x10>)
 8000912:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000914:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000918:	4310      	orrs	r0, r2
 800091a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800091c:	6098      	str	r0, [r3, #8]
}
 800091e:	4770      	bx	lr
 8000920:	40023800 	.word	0x40023800

08000924 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <RCC_MCO2Config+0x10>)
 8000926:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000928:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800092c:	4310      	orrs	r0, r2
 800092e:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000930:	6098      	str	r0, [r3, #8]
}
 8000932:	4770      	bx	lr
 8000934:	40023800 	.word	0x40023800

08000938 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <RCC_SYSCLKConfig+0x10>)
 800093a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800093c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000940:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000942:	6098      	str	r0, [r3, #8]
}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <RCC_GetSYSCLKSource+0xc>)
 800094e:	6898      	ldr	r0, [r3, #8]
 8000950:	f000 000c 	and.w	r0, r0, #12
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <RCC_HCLKConfig+0x10>)
 800095e:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000960:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000964:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000966:	6098      	str	r0, [r3, #8]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <RCC_PCLK1Config+0x10>)
 8000972:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000974:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000978:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800097a:	6098      	str	r0, [r3, #8]
}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <RCC_PCLK2Config+0x10>)
 8000986:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000988:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800098c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000990:	6098      	str	r0, [r3, #8]
}
 8000992:	4770      	bx	lr
 8000994:	40023800 	.word	0x40023800

08000998 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000998:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <RCC_GetClocksFreq+0x7c>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80009a2:	2a04      	cmp	r2, #4
 80009a4:	d003      	beq.n	80009ae <RCC_GetClocksFreq+0x16>
 80009a6:	2a08      	cmp	r2, #8
 80009a8:	d003      	beq.n	80009b2 <RCC_GetClocksFreq+0x1a>
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <RCC_GetClocksFreq+0x80>)
 80009ac:	e018      	b.n	80009e0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <RCC_GetClocksFreq+0x84>)
 80009b0:	e016      	b.n	80009e0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009b2:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009b4:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80009b6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009ba:	6859      	ldr	r1, [r3, #4]
 80009bc:	bf14      	ite	ne
 80009be:	4b17      	ldrne	r3, [pc, #92]	; (8000a1c <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009c0:	4b15      	ldreq	r3, [pc, #84]	; (8000a18 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009c6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <RCC_GetClocksFreq+0x7c>)
 80009cc:	6852      	ldr	r2, [r2, #4]
 80009ce:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009d6:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009d8:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009da:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009dc:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009e2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009e4:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009e8:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80009ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009f0:	fa24 f303 	lsr.w	r3, r4, r3
 80009f4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009f6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80009f8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80009fc:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009fe:	fa23 f404 	lsr.w	r4, r3, r4
 8000a02:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a04:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8000a06:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000a0a:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	60c3      	str	r3, [r0, #12]
}
 8000a12:	bd10      	pop	{r4, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	00f42400 	.word	0x00f42400
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	20000000 	.word	0x20000000

08000a24 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000a24:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <RCC_RTCCLKConfig+0x2c>)
 8000a2e:	d108      	bne.n	8000a42 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000a30:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a32:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000a36:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a3e:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000a40:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a44:	0500      	lsls	r0, r0, #20
 8000a46:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 8000a4a:	6718      	str	r0, [r3, #112]	; 0x70
}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a54:	4b01      	ldr	r3, [pc, #4]	; (8000a5c <RCC_RTCCLKCmd+0x8>)
 8000a56:	6018      	str	r0, [r3, #0]
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	42470e3c 	.word	0x42470e3c

08000a60 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <RCC_BackupResetCmd+0x8>)
 8000a62:	6018      	str	r0, [r3, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	42470e40 	.word	0x42470e40

08000a6c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000a6c:	4b01      	ldr	r3, [pc, #4]	; (8000a74 <RCC_I2SCLKConfig+0x8>)
 8000a6e:	6018      	str	r0, [r3, #0]
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	4247015c 	.word	0x4247015c

08000a78 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a7c:	b109      	cbz	r1, 8000a82 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a7e:	4310      	orrs	r0, r2
 8000a80:	e001      	b.n	8000a86 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a82:	ea22 0000 	bic.w	r0, r2, r0
 8000a86:	6318      	str	r0, [r3, #48]	; 0x30
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a94:	b109      	cbz	r1, 8000a9a <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000a96:	4310      	orrs	r0, r2
 8000a98:	e001      	b.n	8000a9e <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000a9a:	ea22 0000 	bic.w	r0, r2, r0
 8000a9e:	6358      	str	r0, [r3, #52]	; 0x34
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aac:	b109      	cbz	r1, 8000ab2 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000aae:	4310      	orrs	r0, r2
 8000ab0:	e001      	b.n	8000ab6 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000ab2:	ea22 0000 	bic.w	r0, r2, r0
 8000ab6:	6398      	str	r0, [r3, #56]	; 0x38
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ac4:	b109      	cbz	r1, 8000aca <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	e001      	b.n	8000ace <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000aca:	ea22 0000 	bic.w	r0, r2, r0
 8000ace:	6418      	str	r0, [r3, #64]	; 0x40
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000adc:	b109      	cbz	r1, 8000ae2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ade:	4310      	orrs	r0, r2
 8000ae0:	e001      	b.n	8000ae6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ae2:	ea22 0000 	bic.w	r0, r2, r0
 8000ae6:	6458      	str	r0, [r3, #68]	; 0x44
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000af2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af4:	b109      	cbz	r1, 8000afa <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000af6:	4310      	orrs	r0, r2
 8000af8:	e001      	b.n	8000afe <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000afa:	ea22 0000 	bic.w	r0, r2, r0
 8000afe:	6118      	str	r0, [r3, #16]
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000b0a:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b0c:	b109      	cbz	r1, 8000b12 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000b0e:	4310      	orrs	r0, r2
 8000b10:	e001      	b.n	8000b16 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000b12:	ea22 0000 	bic.w	r0, r2, r0
 8000b16:	6158      	str	r0, [r3, #20]
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000b22:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b24:	b109      	cbz	r1, 8000b2a <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000b26:	4310      	orrs	r0, r2
 8000b28:	e001      	b.n	8000b2e <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000b2a:	ea22 0000 	bic.w	r0, r2, r0
 8000b2e:	6198      	str	r0, [r3, #24]
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b3a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b3c:	b109      	cbz	r1, 8000b42 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b3e:	4310      	orrs	r0, r2
 8000b40:	e001      	b.n	8000b46 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b42:	ea22 0000 	bic.w	r0, r2, r0
 8000b46:	6218      	str	r0, [r3, #32]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b54:	b109      	cbz	r1, 8000b5a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b56:	4310      	orrs	r0, r2
 8000b58:	e001      	b.n	8000b5e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b5a:	ea22 0000 	bic.w	r0, r2, r0
 8000b5e:	6258      	str	r0, [r3, #36]	; 0x24
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b6c:	b109      	cbz	r1, 8000b72 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000b6e:	4310      	orrs	r0, r2
 8000b70:	e001      	b.n	8000b76 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000b72:	ea22 0000 	bic.w	r0, r2, r0
 8000b76:	6518      	str	r0, [r3, #80]	; 0x50
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000b82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b84:	b109      	cbz	r1, 8000b8a <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000b86:	4310      	orrs	r0, r2
 8000b88:	e001      	b.n	8000b8e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000b8a:	ea22 0000 	bic.w	r0, r2, r0
 8000b8e:	6558      	str	r0, [r3, #84]	; 0x54
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000b9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b9c:	b109      	cbz	r1, 8000ba2 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000b9e:	4310      	orrs	r0, r2
 8000ba0:	e001      	b.n	8000ba6 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000ba2:	ea22 0000 	bic.w	r0, r2, r0
 8000ba6:	6598      	str	r0, [r3, #88]	; 0x58
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bb4:	b109      	cbz	r1, 8000bba <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000bb6:	4310      	orrs	r0, r2
 8000bb8:	e001      	b.n	8000bbe <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000bba:	ea22 0000 	bic.w	r0, r2, r0
 8000bbe:	6618      	str	r0, [r3, #96]	; 0x60
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000bca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bcc:	b109      	cbz	r1, 8000bd2 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	e001      	b.n	8000bd6 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000bd2:	ea22 0000 	bic.w	r0, r2, r0
 8000bd6:	6658      	str	r0, [r3, #100]	; 0x64
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000be2:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000be4:	b109      	cbz	r1, 8000bea <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000be6:	4310      	orrs	r0, r2
 8000be8:	e001      	b.n	8000bee <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000bea:	ea22 0000 	bic.w	r0, r2, r0
 8000bee:	7018      	strb	r0, [r3, #0]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	4002380d 	.word	0x4002380d

08000bf8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000bf8:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <RCC_GetFlagStatus+0x24>)
 8000bfe:	d101      	bne.n	8000c04 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	e003      	b.n	8000c0c <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000c04:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000c06:	bf0c      	ite	eq
 8000c08:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000c0a:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000c0c:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c10:	fa23 f000 	lsr.w	r0, r3, r0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000c14:	f000 0001 	and.w	r0, r0, #1
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c20:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000c26:	2031      	movs	r0, #49	; 0x31
 8000c28:	f7ff ffe6 	bl	8000bf8 <RCC_GetFlagStatus>
    startupcounter++;
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c38:	d001      	beq.n	8000c3e <RCC_WaitForHSEStartUp+0x1e>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d0f3      	beq.n	8000c26 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000c3e:	2031      	movs	r0, #49	; 0x31
 8000c40:	f7ff ffda 	bl	8000bf8 <RCC_GetFlagStatus>
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000c44:	3000      	adds	r0, #0
 8000c46:	bf18      	it	ne
 8000c48:	2001      	movne	r0, #1
}
 8000c4a:	bd0e      	pop	{r1, r2, r3, pc}

08000c4c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <RCC_ClearFlag+0xc>)
 8000c4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000c50:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000c56:	4770      	bx	lr
 8000c58:	40023800 	.word	0x40023800

08000c5c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <RCC_GetITStatus+0x10>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000c60:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000c62:	bf0c      	ite	eq
 8000c64:	2000      	moveq	r0, #0
 8000c66:	2001      	movne	r0, #1
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <RCC_ClearITPendingBit+0x8>)
 8000c72:	7018      	strb	r0, [r3, #0]
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	4002380e 	.word	0x4002380e

08000c7c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000c7c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <SPI_I2S_DeInit+0x58>)
 8000c80:	4298      	cmp	r0, r3
 8000c82:	d10b      	bne.n	8000c9c <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000c84:	2101      	movs	r1, #1
 8000c86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c8a:	f7ff ff61 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000c8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c92:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000c98:	f7ff bf5a 	b.w	8000b50 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <SPI_I2S_DeInit+0x5c>)
 8000c9e:	4298      	cmp	r0, r3
 8000ca0:	d107      	bne.n	8000cb2 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000ca2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	f7ff ff46 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000cac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cb0:	e009      	b.n	8000cc6 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SPI_I2S_DeInit+0x60>)
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	d10b      	bne.n	8000cd0 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000cb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f7ff ff3b 	bl	8000b38 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000cc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cc6:	2100      	movs	r1, #0
    }
  }
}
 8000cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000ccc:	f7ff bf34 	b.w	8000b38 <RCC_APB1PeriphResetCmd>
 8000cd0:	bd08      	pop	{r3, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40003800 	.word	0x40003800
 8000cdc:	40003c00 	.word	0x40003c00

08000ce0 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ce0:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000ce2:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000ce4:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ce6:	884c      	ldrh	r4, [r1, #2]
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	888c      	ldrh	r4, [r1, #4]
 8000cec:	4323      	orrs	r3, r4
 8000cee:	88cc      	ldrh	r4, [r1, #6]
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	890c      	ldrh	r4, [r1, #8]
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	894c      	ldrh	r4, [r1, #10]
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	898c      	ldrh	r4, [r1, #12]
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000d00:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d04:	4323      	orrs	r3, r4
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000d0a:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000d0c:	8b83      	ldrh	r3, [r0, #28]
 8000d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d12:	041b      	lsls	r3, r3, #16
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000d18:	8a0b      	ldrh	r3, [r1, #16]
 8000d1a:	8203      	strh	r3, [r0, #16]
}
 8000d1c:	bd10      	pop	{r4, pc}

08000d1e <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8000d1e:	8b83      	ldrh	r3, [r0, #28]
 8000d20:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 8000d24:	f023 031f 	bic.w	r3, r3, #31
 8000d28:	041b      	lsls	r3, r3, #16
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d32:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d36:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d38:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d3a:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d3c:	d038      	beq.n	8000db0 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8000d40:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d42:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2602      	movne	r6, #2
 8000d4a:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000d4c:	0224      	lsls	r4, r4, #8
 8000d4e:	d503      	bpl.n	8000d58 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8000d50:	6894      	ldr	r4, [r2, #8]
 8000d52:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8000d56:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8000d58:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8000d5c:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8000d60:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d62:	f8df c084 	ldr.w	ip, [pc, #132]	; 8000de8 <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8000d66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d6a:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8000d6e:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d72:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8000d74:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000d78:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8000d7c:	88ca      	ldrh	r2, [r1, #6]
 8000d7e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000d82:	f04f 020a 	mov.w	r2, #10
 8000d86:	d101      	bne.n	8000d8c <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d88:	0a24      	lsrs	r4, r4, #8
 8000d8a:	e002      	b.n	8000d92 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d8c:	0176      	lsls	r6, r6, #5
 8000d8e:	fbb4 f4f6 	udiv	r4, r4, r6
 8000d92:	4362      	muls	r2, r4
 8000d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d98:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8000d9a:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000d9c:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8000d9e:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000da2:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8000da6:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000da8:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8000dac:	b292      	uxth	r2, r2
 8000dae:	e000      	b.n	8000db2 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8000db0:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8000db2:	1e9c      	subs	r4, r3, #2
 8000db4:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8000db6:	2cfe      	cmp	r4, #254	; 0xfe
 8000db8:	bf28      	it	cs
 8000dba:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000dbc:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8000dbe:	bf28      	it	cs
 8000dc0:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000dca:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dcc:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000dce:	432b      	orrs	r3, r5
 8000dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	888a      	ldrh	r2, [r1, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	898a      	ldrh	r2, [r1, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8000de0:	8383      	strh	r3, [r0, #28]
}
 8000de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	007a1200 	.word	0x007a1200

08000dec <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000dec:	2300      	movs	r3, #0
 8000dee:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000df0:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000df2:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000df4:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000df6:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000df8:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000dfa:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000dfc:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	8203      	strh	r3, [r0, #16]
}
 8000e02:	4770      	bx	lr

08000e04 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000e04:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000e06:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000e08:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8000e0a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8000e0c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8000e0e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000e10:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8000e12:	8183      	strh	r3, [r0, #12]
}
 8000e14:	4770      	bx	lr

08000e16 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e16:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e18:	b119      	cbz	r1, 8000e22 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	e003      	b.n	8000e2a <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c1b      	lsrs	r3, r3, #16
 8000e2a:	8003      	strh	r3, [r0, #0]
 8000e2c:	4770      	bx	lr

08000e2e <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e2e:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e30:	b119      	cbz	r1, 8000e3a <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e38:	e003      	b.n	8000e42 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8000e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	8383      	strh	r3, [r0, #28]
 8000e44:	4770      	bx	lr

08000e46 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8000e46:	8803      	ldrh	r3, [r0, #0]
 8000e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e4c:	041b      	lsls	r3, r3, #16
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8000e52:	8803      	ldrh	r3, [r0, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4319      	orrs	r1, r3
 8000e58:	8001      	strh	r1, [r0, #0]
}
 8000e5a:	4770      	bx	lr

08000e5c <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e5c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000e60:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e62:	d103      	bne.n	8000e6c <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	e003      	b.n	8000e74 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8000e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e70:	041b      	lsls	r3, r3, #16
 8000e72:	0c1b      	lsrs	r3, r3, #16
 8000e74:	8003      	strh	r3, [r0, #0]
 8000e76:	4770      	bx	lr

08000e78 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000e78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000e7c:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000e7e:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000e80:	d003      	beq.n	8000e8a <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	e003      	b.n	8000e92 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	0c1b      	lsrs	r3, r3, #16
 8000e92:	8003      	strh	r3, [r0, #0]
 8000e94:	4770      	bx	lr

08000e96 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8000e96:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e98:	b119      	cbz	r1, 8000ea2 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	e003      	b.n	8000eaa <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8000ea2:	f023 0304 	bic.w	r3, r3, #4
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	8083      	strh	r3, [r0, #4]
 8000eac:	4770      	bx	lr

08000eae <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000eae:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000eb0:	b119      	cbz	r1, 8000eba <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	e003      	b.n	8000ec2 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8000eba:	f023 0310 	bic.w	r3, r3, #16
 8000ebe:	041b      	lsls	r3, r3, #16
 8000ec0:	0c1b      	lsrs	r3, r3, #16
 8000ec2:	8083      	strh	r3, [r0, #4]
 8000ec4:	4770      	bx	lr

08000ec6 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8000ec6:	8b83      	ldrh	r3, [r0, #28]
 8000ec8:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 8000ecc:	f023 031f 	bic.w	r3, r3, #31
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c1b      	lsrs	r3, r3, #16
 8000ed4:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000eda:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8000edc:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8000ee2:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8000ee4:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8000ee6:	d005      	beq.n	8000ef4 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf0c      	ite	eq
 8000eec:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8000ef0:	2300      	movne	r3, #0
 8000ef2:	e001      	b.n	8000ef8 <I2S_FullDuplexConfig+0x32>
 8000ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000ef8:	884c      	ldrh	r4, [r1, #2]
 8000efa:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000efc:	888c      	ldrh	r4, [r1, #4]
 8000efe:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000f04:	4322      	orrs	r2, r4
 8000f06:	430a      	orrs	r2, r1
 8000f08:	b292      	uxth	r2, r2
 8000f0a:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8000f0c:	8383      	strh	r3, [r0, #28]
}
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000f10:	8980      	ldrh	r0, [r0, #12]
 8000f12:	b280      	uxth	r0, r0
}
 8000f14:	4770      	bx	lr

08000f16 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000f16:	8181      	strh	r1, [r0, #12]
}
 8000f18:	4770      	bx	lr

08000f1a <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f1a:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f1c:	b119      	cbz	r1, 8000f26 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f24:	e003      	b.n	8000f2e <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8000f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	8003      	strh	r3, [r0, #0]
 8000f30:	4770      	bx	lr

08000f32 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8000f32:	8803      	ldrh	r3, [r0, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3a:	8003      	strh	r3, [r0, #0]
}
 8000f3c:	4770      	bx	lr

08000f3e <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8000f3e:	2901      	cmp	r1, #1
 8000f40:	d002      	beq.n	8000f48 <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8000f42:	8b00      	ldrh	r0, [r0, #24]
 8000f44:	b280      	uxth	r0, r0
 8000f46:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8000f48:	8a80      	ldrh	r0, [r0, #20]
 8000f4a:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8000f4c:	4770      	bx	lr

08000f4e <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8000f4e:	8a00      	ldrh	r0, [r0, #16]
 8000f50:	b280      	uxth	r0, r0
}
 8000f52:	4770      	bx	lr

08000f54 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f54:	8883      	ldrh	r3, [r0, #4]
 8000f56:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8000f58:	b10a      	cbz	r2, 8000f5e <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f5a:	4319      	orrs	r1, r3
 8000f5c:	e001      	b.n	8000f62 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8000f5e:	ea23 0101 	bic.w	r1, r3, r1
 8000f62:	8081      	strh	r1, [r0, #4]
 8000f64:	4770      	bx	lr

08000f66 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000f66:	2301      	movs	r3, #1
 8000f68:	0909      	lsrs	r1, r1, #4
 8000f6a:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000f6e:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000f70:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000f72:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8000f74:	b10a      	cbz	r2, 8000f7a <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000f76:	4319      	orrs	r1, r3
 8000f78:	e001      	b.n	8000f7e <SPI_I2S_ITConfig+0x18>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8000f7a:	ea23 0101 	bic.w	r1, r3, r1
 8000f7e:	8081      	strh	r1, [r0, #4]
 8000f80:	4770      	bx	lr

08000f82 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f82:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f84:	4219      	tst	r1, r3
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f86:	bf0c      	ite	eq
 8000f88:	2000      	moveq	r0, #0
 8000f8a:	2001      	movne	r0, #1
}
 8000f8c:	4770      	bx	lr

08000f8e <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8000f8e:	43c9      	mvns	r1, r1
 8000f90:	b289      	uxth	r1, r1
 8000f92:	8101      	strh	r1, [r0, #8]
}
 8000f94:	4770      	bx	lr

08000f96 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000f96:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000f98:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000f9a:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fa2:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fa4:	fa03 f202 	lsl.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fa8:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000faa:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fac:	d006      	beq.n	8000fbc <SPI_I2S_GetITStatus+0x26>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000fae:	0909      	lsrs	r1, r1, #4
 8000fb0:	fa03 f301 	lsl.w	r3, r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8000fb4:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000fb6:	bf0c      	ite	eq
 8000fb8:	2000      	moveq	r0, #0
 8000fba:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8000fbc:	bd10      	pop	{r4, pc}

08000fbe <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fbe:	f001 010f 	and.w	r1, r1, #15
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	fa03 f301 	lsl.w	r3, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	8103      	strh	r3, [r0, #8]
}
 8000fce:	4770      	bx	lr

08000fd0 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000fd0:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000fd2:	8c04      	ldrh	r4, [r0, #32]
 8000fd4:	f024 0401 	bic.w	r4, r4, #1
 8000fd8:	0424      	lsls	r4, r4, #16
 8000fda:	0c24      	lsrs	r4, r4, #16
 8000fdc:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fde:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8000fe0:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8000fe2:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8000fe4:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000fe8:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000fea:	432a      	orrs	r2, r5
 8000fec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ff0:	f024 030a 	bic.w	r3, r4, #10
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ff8:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000ffa:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000ffc:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ffe:	8401      	strh	r1, [r0, #32]
}
 8001000:	bd30      	pop	{r4, r5, pc}

08001002 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001002:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001004:	8c05      	ldrh	r5, [r0, #32]
 8001006:	f025 0510 	bic.w	r5, r5, #16
 800100a:	042d      	lsls	r5, r5, #16
 800100c:	0c2d      	lsrs	r5, r5, #16
 800100e:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001010:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001012:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001014:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001018:	0524      	lsls	r4, r4, #20
 800101a:	0d24      	lsrs	r4, r4, #20
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800101c:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800101e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001022:	ea42 3203 	orr.w	r2, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001026:	f025 03a0 	bic.w	r3, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001032:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001034:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001036:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001038:	8401      	strh	r1, [r0, #32]
}
 800103a:	bd30      	pop	{r4, r5, pc}

0800103c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800103c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <TIM_DeInit+0x120>)
 8001040:	4298      	cmp	r0, r3
 8001042:	d105      	bne.n	8001050 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001044:	2001      	movs	r0, #1
 8001046:	4601      	mov	r1, r0
 8001048:	f7ff fd82 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800104c:	2001      	movs	r0, #1
 800104e:	e03d      	b.n	80010cc <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8001050:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001054:	d105      	bne.n	8001062 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001056:	2001      	movs	r0, #1
 8001058:	4601      	mov	r1, r0
 800105a:	f7ff fd6d 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800105e:	2001      	movs	r0, #1
 8001060:	e076      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <TIM_DeInit+0x124>)
 8001064:	4298      	cmp	r0, r3
 8001066:	d105      	bne.n	8001074 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001068:	2002      	movs	r0, #2
 800106a:	2101      	movs	r1, #1
 800106c:	f7ff fd64 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001070:	2002      	movs	r0, #2
 8001072:	e06d      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <TIM_DeInit+0x128>)
 8001076:	4298      	cmp	r0, r3
 8001078:	d105      	bne.n	8001086 <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800107a:	2004      	movs	r0, #4
 800107c:	2101      	movs	r1, #1
 800107e:	f7ff fd5b 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001082:	2004      	movs	r0, #4
 8001084:	e064      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <TIM_DeInit+0x12c>)
 8001088:	4298      	cmp	r0, r3
 800108a:	d105      	bne.n	8001098 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800108c:	2008      	movs	r0, #8
 800108e:	2101      	movs	r1, #1
 8001090:	f7ff fd52 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001094:	2008      	movs	r0, #8
 8001096:	e05b      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8001098:	4b34      	ldr	r3, [pc, #208]	; (800116c <TIM_DeInit+0x130>)
 800109a:	4298      	cmp	r0, r3
 800109c:	d105      	bne.n	80010aa <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800109e:	2010      	movs	r0, #16
 80010a0:	2101      	movs	r1, #1
 80010a2:	f7ff fd49 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80010a6:	2010      	movs	r0, #16
 80010a8:	e052      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <TIM_DeInit+0x134>)
 80010ac:	4298      	cmp	r0, r3
 80010ae:	d105      	bne.n	80010bc <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80010b0:	2020      	movs	r0, #32
 80010b2:	2101      	movs	r1, #1
 80010b4:	f7ff fd40 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80010b8:	2020      	movs	r0, #32
 80010ba:	e049      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <TIM_DeInit+0x138>)
 80010be:	4298      	cmp	r0, r3
 80010c0:	d109      	bne.n	80010d6 <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80010c2:	2002      	movs	r0, #2
 80010c4:	2101      	movs	r1, #1
 80010c6:	f7ff fd43 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80010ca:	2002      	movs	r0, #2
 80010cc:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80010ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80010d2:	f7ff bd3d 	b.w	8000b50 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <TIM_DeInit+0x13c>)
 80010d8:	4298      	cmp	r0, r3
 80010da:	d107      	bne.n	80010ec <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80010dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80010e0:	2101      	movs	r1, #1
 80010e2:	f7ff fd35 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80010e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80010ea:	e7ef      	b.n	80010cc <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <TIM_DeInit+0x140>)
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d107      	bne.n	8001102 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80010f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010f6:	2101      	movs	r1, #1
 80010f8:	f7ff fd2a 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80010fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001100:	e7e4      	b.n	80010cc <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <TIM_DeInit+0x144>)
 8001104:	4298      	cmp	r0, r3
 8001106:	d107      	bne.n	8001118 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001108:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800110c:	2101      	movs	r1, #1
 800110e:	f7ff fd1f 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001112:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001116:	e7d9      	b.n	80010cc <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <TIM_DeInit+0x148>)
 800111a:	4298      	cmp	r0, r3
 800111c:	d105      	bne.n	800112a <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800111e:	2040      	movs	r0, #64	; 0x40
 8001120:	2101      	movs	r1, #1
 8001122:	f7ff fd09 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001126:	2040      	movs	r0, #64	; 0x40
 8001128:	e012      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <TIM_DeInit+0x14c>)
 800112c:	4298      	cmp	r0, r3
 800112e:	d105      	bne.n	800113c <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	2101      	movs	r1, #1
 8001134:	f7ff fd00 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001138:	2080      	movs	r0, #128	; 0x80
 800113a:	e009      	b.n	8001150 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <TIM_DeInit+0x150>)
 800113e:	4298      	cmp	r0, r3
 8001140:	d10b      	bne.n	800115a <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fcf6 	bl	8000b38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800114c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001150:	2100      	movs	r1, #0
    }   
  }
}
 8001152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001156:	f7ff bcef 	b.w	8000b38 <RCC_APB1PeriphResetCmd>
 800115a:	bd08      	pop	{r3, pc}
 800115c:	40010000 	.word	0x40010000
 8001160:	40000400 	.word	0x40000400
 8001164:	40000800 	.word	0x40000800
 8001168:	40000c00 	.word	0x40000c00
 800116c:	40001000 	.word	0x40001000
 8001170:	40001400 	.word	0x40001400
 8001174:	40010400 	.word	0x40010400
 8001178:	40014000 	.word	0x40014000
 800117c:	40014400 	.word	0x40014400
 8001180:	40014800 	.word	0x40014800
 8001184:	40001800 	.word	0x40001800
 8001188:	40001c00 	.word	0x40001c00
 800118c:	40002000 	.word	0x40002000

08001190 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001192:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001194:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001196:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001198:	d012      	beq.n	80011c0 <TIM_TimeBaseInit+0x30>
 800119a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119e:	4290      	cmp	r0, r2
 80011a0:	d00e      	beq.n	80011c0 <TIM_TimeBaseInit+0x30>
 80011a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011a6:	d00b      	beq.n	80011c0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80011a8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d007      	beq.n	80011c0 <TIM_TimeBaseInit+0x30>
 80011b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b4:	4290      	cmp	r0, r2
 80011b6:	d003      	beq.n	80011c0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80011b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011bc:	4290      	cmp	r0, r2
 80011be:	d103      	bne.n	80011c8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011c0:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80011c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80011c6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <TIM_TimeBaseInit+0x78>)
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d008      	beq.n	80011e0 <TIM_TimeBaseInit+0x50>
 80011ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d004      	beq.n	80011e0 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011da:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80011dc:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80011de:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80011e0:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80011e2:	684b      	ldr	r3, [r1, #4]
 80011e4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80011e6:	880b      	ldrh	r3, [r1, #0]
 80011e8:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <TIM_TimeBaseInit+0x74>)
 80011ec:	4298      	cmp	r0, r3
 80011ee:	d003      	beq.n	80011f8 <TIM_TimeBaseInit+0x68>
 80011f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d101      	bne.n	80011fc <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80011f8:	7a8b      	ldrb	r3, [r1, #10]
 80011fa:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80011fc:	2301      	movs	r3, #1
 80011fe:	8283      	strh	r3, [r0, #20]
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40010000 	.word	0x40010000
 8001208:	40001000 	.word	0x40001000

0800120c <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001212:	2300      	movs	r3, #0
 8001214:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001216:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001218:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800121a:	7283      	strb	r3, [r0, #10]
}
 800121c:	4770      	bx	lr

0800121e <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800121e:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001220:	8282      	strh	r2, [r0, #20]
}
 8001222:	4770      	bx	lr

08001224 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001224:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800122e:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001230:	8003      	strh	r3, [r0, #0]
}
 8001232:	4770      	bx	lr

08001234 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001234:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001236:	4770      	bx	lr

08001238 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001238:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800123a:	4770      	bx	lr

0800123c <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800123c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800123e:	4770      	bx	lr

08001240 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001240:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8001242:	b280      	uxth	r0, r0
}
 8001244:	4770      	bx	lr

08001246 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001246:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001248:	b119      	cbz	r1, 8001252 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800124a:	b29b      	uxth	r3, r3
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	e003      	b.n	800125a <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	0c1b      	lsrs	r3, r3, #16
 800125a:	8003      	strh	r3, [r0, #0]
 800125c:	4770      	bx	lr

0800125e <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800125e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001260:	b119      	cbz	r1, 800126a <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001262:	b29b      	uxth	r3, r3
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	e003      	b.n	8001272 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	8003      	strh	r3, [r0, #0]
 8001274:	4770      	bx	lr

08001276 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001276:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001278:	b119      	cbz	r1, 8001282 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800127a:	b29b      	uxth	r3, r3
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	e003      	b.n	800128a <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	8003      	strh	r3, [r0, #0]
 800128c:	4770      	bx	lr

0800128e <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800128e:	8803      	ldrh	r3, [r0, #0]
 8001290:	f023 0308 	bic.w	r3, r3, #8
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	0c1b      	lsrs	r3, r3, #16
 8001298:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800129a:	8803      	ldrh	r3, [r0, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4319      	orrs	r1, r3
 80012a0:	8001      	strh	r1, [r0, #0]
}
 80012a2:	4770      	bx	lr

080012a4 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80012a4:	8803      	ldrh	r3, [r0, #0]
 80012a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012aa:	041b      	lsls	r3, r3, #16
 80012ac:	0c1b      	lsrs	r3, r3, #16
 80012ae:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80012b0:	8803      	ldrh	r3, [r0, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4319      	orrs	r1, r3
 80012b6:	8001      	strh	r1, [r0, #0]
}
 80012b8:	4770      	bx	lr

080012ba <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012ba:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012bc:	b119      	cbz	r1, 80012c6 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	e003      	b.n	80012ce <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	8003      	strh	r3, [r0, #0]
 80012d0:	4770      	bx	lr

080012d2 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80012d2:	8c03      	ldrh	r3, [r0, #32]
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80012de:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012e0:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012e2:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012e4:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012e6:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012e8:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80012ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80012ee:	0412      	lsls	r2, r2, #16
 80012f0:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012f2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012f4:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012fc:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012fe:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001300:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001302:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001304:	4d0e      	ldr	r5, [pc, #56]	; (8001340 <TIM_OC1Init+0x6e>)
 8001306:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001308:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800130a:	d003      	beq.n	8001314 <TIM_OC1Init+0x42>
 800130c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001310:	42a8      	cmp	r0, r5
 8001312:	d10e      	bne.n	8001332 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001314:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001316:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001318:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800131c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800131e:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001320:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001324:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001326:	8a0d      	ldrh	r5, [r1, #16]
 8001328:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800132a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800132e:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001330:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001332:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001334:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001336:	688a      	ldr	r2, [r1, #8]
 8001338:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800133a:	8403      	strh	r3, [r0, #32]
}
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000

08001344 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001344:	8c03      	ldrh	r3, [r0, #32]
 8001346:	f023 0310 	bic.w	r3, r3, #16
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001350:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001352:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001354:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001356:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001358:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800135a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800135e:	0424      	lsls	r4, r4, #16
 8001360:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001362:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001366:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800136a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800136c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800136e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001370:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001374:	884d      	ldrh	r5, [r1, #2]
 8001376:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800137a:	4d13      	ldr	r5, [pc, #76]	; (80013c8 <TIM_OC2Init+0x84>)
 800137c:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800137e:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001380:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001382:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001384:	d003      	beq.n	800138e <TIM_OC2Init+0x4a>
 8001386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138a:	42a8      	cmp	r0, r5
 800138c:	d115      	bne.n	80013ba <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800138e:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001394:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001396:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800139a:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 800139e:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80013a0:	888b      	ldrh	r3, [r1, #4]
 80013a2:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80013a6:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80013a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80013ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80013b0:	8a4d      	ldrh	r5, [r1, #18]
 80013b2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80013b6:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80013b8:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013ba:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80013bc:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013be:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80013c0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013c2:	8403      	strh	r3, [r0, #32]
}
 80013c4:	bd30      	pop	{r4, r5, pc}
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000

080013cc <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80013cc:	8c03      	ldrh	r3, [r0, #32]
 80013ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d8:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013da:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013dc:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013de:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013e0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80013e2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80013e6:	0424      	lsls	r4, r4, #16
 80013e8:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80013ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013ee:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013f0:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80013f2:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80013f4:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80013f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80013fa:	884d      	ldrh	r5, [r1, #2]
 80013fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001400:	4d12      	ldr	r5, [pc, #72]	; (800144c <TIM_OC3Init+0x80>)
 8001402:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001404:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001406:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001408:	d003      	beq.n	8001412 <TIM_OC3Init+0x46>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d115      	bne.n	800143e <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001412:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001418:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800141a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800141e:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8001422:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001424:	888b      	ldrh	r3, [r1, #4]
 8001426:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800142a:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800142c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001430:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001434:	8a4d      	ldrh	r5, [r1, #18]
 8001436:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800143a:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800143c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800143e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001440:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001442:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001444:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001446:	8403      	strh	r3, [r0, #32]
}
 8001448:	bd30      	pop	{r4, r5, pc}
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000

08001450 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001450:	8c03      	ldrh	r3, [r0, #32]
 8001452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800145c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800145e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001460:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001462:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001464:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001466:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800146a:	0412      	lsls	r2, r2, #16
 800146c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800146e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001472:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001476:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001478:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800147a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800147c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001480:	884d      	ldrh	r5, [r1, #2]
 8001482:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001486:	4d0b      	ldr	r5, [pc, #44]	; (80014b4 <TIM_OC4Init+0x64>)
 8001488:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800148a:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800148c:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800148e:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001490:	d003      	beq.n	800149a <TIM_OC4Init+0x4a>
 8001492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001496:	42a8      	cmp	r0, r5
 8001498:	d105      	bne.n	80014a6 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800149a:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800149c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80014a0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80014a4:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014a6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80014a8:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80014aa:	688a      	ldr	r2, [r1, #8]
 80014ac:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014ae:	8403      	strh	r3, [r0, #32]
}
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	40010000 	.word	0x40010000

080014b8 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80014b8:	2300      	movs	r3, #0
 80014ba:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80014bc:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80014be:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80014c0:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80014c2:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80014c4:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80014c6:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80014c8:	8243      	strh	r3, [r0, #18]
}
 80014ca:	4770      	bx	lr

080014cc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80014cc:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014ce:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80014d0:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014d2:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80014d4:	fa04 f401 	lsl.w	r4, r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014d8:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 80014dc:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80014e0:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80014e2:	b109      	cbz	r1, 80014e8 <TIM_SelectOCxM+0x1c>
 80014e4:	2908      	cmp	r1, #8
 80014e6:	d107      	bne.n	80014f8 <TIM_SelectOCxM+0x2c>
  {
    tmp += (TIM_Channel>>1);
 80014e8:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80014ea:	f64f 708f 	movw	r0, #65423	; 0xff8f
 80014ee:	58cc      	ldr	r4, [r1, r3]
 80014f0:	4020      	ands	r0, r4
 80014f2:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80014f4:	58c8      	ldr	r0, [r1, r3]
 80014f6:	e00a      	b.n	800150e <TIM_SelectOCxM+0x42>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80014f8:	3904      	subs	r1, #4
 80014fa:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80014fe:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8001502:	58cc      	ldr	r4, [r1, r3]
 8001504:	4020      	ands	r0, r4
 8001506:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001508:	0212      	lsls	r2, r2, #8
 800150a:	58c8      	ldr	r0, [r1, r3]
 800150c:	b292      	uxth	r2, r2
 800150e:	4302      	orrs	r2, r0
 8001510:	50ca      	str	r2, [r1, r3]
 8001512:	bd30      	pop	{r4, r5, pc}

08001514 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001514:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001516:	4770      	bx	lr

08001518 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001518:	6381      	str	r1, [r0, #56]	; 0x38
}
 800151a:	4770      	bx	lr

0800151c <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800151c:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800151e:	4770      	bx	lr

08001520 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001520:	6401      	str	r1, [r0, #64]	; 0x40
}
 8001522:	4770      	bx	lr

08001524 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001524:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800152e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001530:	8303      	strh	r3, [r0, #24]
}
 8001532:	4770      	bx	lr

08001534 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001534:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800153e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001542:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001544:	8303      	strh	r3, [r0, #24]
}
 8001546:	4770      	bx	lr

08001548 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001548:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800154a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001552:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001554:	8383      	strh	r3, [r0, #28]
}
 8001556:	4770      	bx	lr

08001558 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001558:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800155a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001562:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001566:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001568:	8383      	strh	r3, [r0, #28]
}
 800156a:	4770      	bx	lr

0800156c <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800156c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800156e:	f023 0308 	bic.w	r3, r3, #8
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001576:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001578:	8303      	strh	r3, [r0, #24]
}
 800157a:	4770      	bx	lr

0800157c <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800157c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800157e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001586:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800158a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800158c:	8303      	strh	r3, [r0, #24]
}
 800158e:	4770      	bx	lr

08001590 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001590:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001592:	f023 0308 	bic.w	r3, r3, #8
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800159a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800159c:	8383      	strh	r3, [r0, #28]
}
 800159e:	4770      	bx	lr

080015a0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80015a0:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80015a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80015aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015ae:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80015b0:	8383      	strh	r3, [r0, #28]
}
 80015b2:	4770      	bx	lr

080015b4 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80015b4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80015be:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80015c0:	8303      	strh	r3, [r0, #24]
}
 80015c2:	4770      	bx	lr

080015c4 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80015c4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80015c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80015ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015d2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80015d4:	8303      	strh	r3, [r0, #24]
}
 80015d6:	4770      	bx	lr

080015d8 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80015d8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80015e2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80015e4:	8383      	strh	r3, [r0, #28]
}
 80015e6:	4770      	bx	lr

080015e8 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80015e8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80015ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80015f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015f6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80015f8:	8383      	strh	r3, [r0, #28]
}
 80015fa:	4770      	bx	lr

080015fc <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80015fc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80015fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8001606:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001608:	8303      	strh	r3, [r0, #24]
}
 800160a:	4770      	bx	lr

0800160c <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800160c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800160e:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8001610:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001612:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8001616:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001618:	8301      	strh	r1, [r0, #24]
}
 800161a:	4770      	bx	lr

0800161c <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800161c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800161e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001626:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001628:	8383      	strh	r3, [r0, #28]
}
 800162a:	4770      	bx	lr

0800162c <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800162c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800162e:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8001630:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001632:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8001636:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001638:	8381      	strh	r1, [r0, #28]
}
 800163a:	4770      	bx	lr

0800163c <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800163c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800163e:	f023 0302 	bic.w	r3, r3, #2
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001646:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001648:	8403      	strh	r3, [r0, #32]
}
 800164a:	4770      	bx	lr

0800164c <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800164c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800164e:	f023 0308 	bic.w	r3, r3, #8
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001656:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001658:	8403      	strh	r3, [r0, #32]
}
 800165a:	4770      	bx	lr

0800165c <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800165c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800165e:	f023 0320 	bic.w	r3, r3, #32
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001666:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800166a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800166c:	8403      	strh	r3, [r0, #32]
}
 800166e:	4770      	bx	lr

08001670 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8001670:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800167a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800167e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001680:	8403      	strh	r3, [r0, #32]
}
 8001682:	4770      	bx	lr

08001684 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001684:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001686:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800168e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001692:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001694:	8403      	strh	r3, [r0, #32]
}
 8001696:	4770      	bx	lr

08001698 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001698:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800169a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80016a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016a6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80016a8:	8403      	strh	r3, [r0, #32]
}
 80016aa:	4770      	bx	lr

080016ac <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80016ac:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80016ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80016b6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80016ba:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80016bc:	8403      	strh	r3, [r0, #32]
}
 80016be:	4770      	bx	lr

080016c0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80016c0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80016c2:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80016c4:	2301      	movs	r3, #1
 80016c6:	fa03 f301 	lsl.w	r3, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80016ca:	b2a4      	uxth	r4, r4
 80016cc:	ea24 0303 	bic.w	r3, r4, r3
 80016d0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80016d2:	8c03      	ldrh	r3, [r0, #32]
 80016d4:	fa02 f101 	lsl.w	r1, r2, r1
 80016d8:	4319      	orrs	r1, r3
 80016da:	b289      	uxth	r1, r1
 80016dc:	8401      	strh	r1, [r0, #32]
}
 80016de:	bd10      	pop	{r4, pc}

080016e0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80016e0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80016e2:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80016e4:	2304      	movs	r3, #4
 80016e6:	fa03 f301 	lsl.w	r3, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80016ea:	b2a4      	uxth	r4, r4
 80016ec:	ea24 0303 	bic.w	r3, r4, r3
 80016f0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80016f2:	8c03      	ldrh	r3, [r0, #32]
 80016f4:	fa02 f101 	lsl.w	r1, r2, r1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	b289      	uxth	r1, r1
 80016fc:	8401      	strh	r1, [r0, #32]
}
 80016fe:	bd10      	pop	{r4, pc}

08001700 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001700:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001702:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001704:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001706:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001708:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800170a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800170c:	8103      	strh	r3, [r0, #8]
}
 800170e:	4770      	bx	lr

08001710 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001710:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8001712:	4770      	bx	lr

08001714 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001714:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8001716:	4770      	bx	lr

08001718 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001718:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800171a:	4770      	bx	lr

0800171c <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800171c:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800171e:	4770      	bx	lr

08001720 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001720:	8b03      	ldrh	r3, [r0, #24]
 8001722:	f023 030c 	bic.w	r3, r3, #12
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800172c:	8b03      	ldrh	r3, [r0, #24]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4319      	orrs	r1, r3
 8001732:	8301      	strh	r1, [r0, #24]
}
 8001734:	4770      	bx	lr

08001736 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001736:	8b03      	ldrh	r3, [r0, #24]
 8001738:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001742:	8b03      	ldrh	r3, [r0, #24]
 8001744:	b29b      	uxth	r3, r3
 8001746:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800174a:	b289      	uxth	r1, r1
 800174c:	8301      	strh	r1, [r0, #24]
}
 800174e:	4770      	bx	lr

08001750 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	460c      	mov	r4, r1
 8001754:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001756:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001758:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800175a:	8820      	ldrh	r0, [r4, #0]
 800175c:	8923      	ldrh	r3, [r4, #8]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800175e:	2900      	cmp	r1, #0
 8001760:	bf0c      	ite	eq
 8001762:	2702      	moveq	r7, #2
 8001764:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001766:	2a01      	cmp	r2, #1
 8001768:	bf14      	ite	ne
 800176a:	2601      	movne	r6, #1
 800176c:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800176e:	b988      	cbnz	r0, 8001794 <TIM_PWMIConfig+0x44>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001770:	4628      	mov	r0, r5
 8001772:	f7ff fc2d 	bl	8000fd0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001776:	88e1      	ldrh	r1, [r4, #6]
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff ffd1 	bl	8001720 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800177e:	4628      	mov	r0, r5
 8001780:	4639      	mov	r1, r7
 8001782:	8923      	ldrh	r3, [r4, #8]
 8001784:	4632      	mov	r2, r6
 8001786:	f7ff fc3c 	bl	8001002 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800178a:	88e1      	ldrh	r1, [r4, #6]
 800178c:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800178e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001792:	e7d0      	b.n	8001736 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001794:	4628      	mov	r0, r5
 8001796:	f7ff fc34 	bl	8001002 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800179a:	88e1      	ldrh	r1, [r4, #6]
 800179c:	4628      	mov	r0, r5
 800179e:	f7ff ffca 	bl	8001736 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80017a2:	4628      	mov	r0, r5
 80017a4:	4639      	mov	r1, r7
 80017a6:	8923      	ldrh	r3, [r4, #8]
 80017a8:	4632      	mov	r2, r6
 80017aa:	f7ff fc11 	bl	8000fd0 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017ae:	88e1      	ldrh	r1, [r4, #6]
 80017b0:	4628      	mov	r0, r5
  }
}
 80017b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017b6:	e7b3      	b.n	8001720 <TIM_SetIC1Prescaler>

080017b8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80017b8:	8b83      	ldrh	r3, [r0, #28]
 80017ba:	f023 030c 	bic.w	r3, r3, #12
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80017c4:	8b83      	ldrh	r3, [r0, #28]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4319      	orrs	r1, r3
 80017ca:	8381      	strh	r1, [r0, #28]
}
 80017cc:	4770      	bx	lr

080017ce <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80017ce:	8b83      	ldrh	r3, [r0, #28]
 80017d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80017da:	8b83      	ldrh	r3, [r0, #28]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80017e2:	b289      	uxth	r1, r1
 80017e4:	8381      	strh	r1, [r0, #28]
}
 80017e6:	4770      	bx	lr

080017e8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80017ea:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80017ec:	460d      	mov	r5, r1
 80017ee:	4604      	mov	r4, r0
 80017f0:	8849      	ldrh	r1, [r1, #2]
 80017f2:	88aa      	ldrh	r2, [r5, #4]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80017f4:	b93b      	cbnz	r3, 8001806 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80017f6:	892b      	ldrh	r3, [r5, #8]
 80017f8:	f7ff fbea 	bl	8000fd0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017fc:	88e9      	ldrh	r1, [r5, #6]
 80017fe:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001804:	e78c      	b.n	8001720 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800180a:	892b      	ldrh	r3, [r5, #8]
 800180c:	f7ff fbf9 	bl	8001002 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001810:	88e9      	ldrh	r1, [r5, #6]
 8001812:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001818:	e78d      	b.n	8001736 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800181a:	2b08      	cmp	r3, #8
 800181c:	892e      	ldrh	r6, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800181e:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001820:	d11c      	bne.n	800185c <TIM_ICInit+0x74>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800182c:	8b80      	ldrh	r0, [r0, #28]
  tmpccer = TIMx->CCER;
 800182e:	8c23      	ldrh	r3, [r4, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8001830:	b280      	uxth	r0, r0
  tmpccer = TIMx->CCER;
 8001832:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001834:	f020 00f3 	bic.w	r0, r0, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001838:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800183c:	ea40 1606 	orr.w	r6, r0, r6, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001840:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001844:	b2b6      	uxth	r6, r6

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001846:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001848:	4332      	orrs	r2, r6

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800184a:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800184e:	83a2      	strh	r2, [r4, #28]
  TIMx->CCER = tmpccer;
 8001850:	8421      	strh	r1, [r4, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001852:	88e9      	ldrh	r1, [r5, #6]
 8001854:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800185a:	e7ad      	b.n	80017b8 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800185c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	0c1b      	lsrs	r3, r3, #16
 8001864:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001866:	8b80      	ldrh	r0, [r0, #28]
  tmpccer = TIMx->CCER;
 8001868:	8c23      	ldrh	r3, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800186a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800186e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001872:	0500      	lsls	r0, r0, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001874:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001876:	0d00      	lsrs	r0, r0, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001878:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800187a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800187e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001882:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001886:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001888:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800188a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001890:	4620      	mov	r0, r4
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001892:	83a2      	strh	r2, [r4, #28]
  TIMx->CCER = tmpccer ;
 8001894:	8423      	strh	r3, [r4, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800189a:	e798      	b.n	80017ce <TIM_SetIC4Prescaler>

0800189c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800189c:	884a      	ldrh	r2, [r1, #2]
 800189e:	880b      	ldrh	r3, [r1, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	888a      	ldrh	r2, [r1, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	88ca      	ldrh	r2, [r1, #6]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	890a      	ldrh	r2, [r1, #8]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	894a      	ldrh	r2, [r1, #10]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	898a      	ldrh	r2, [r1, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80018bc:	4770      	bx	lr

080018be <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80018be:	2300      	movs	r3, #0
 80018c0:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80018c2:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80018c4:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80018c6:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80018c8:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80018ca:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80018cc:	8183      	strh	r3, [r0, #12]
}
 80018ce:	4770      	bx	lr

080018d0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80018d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018d4:	b129      	cbz	r1, 80018e2 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80018d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018de:	b29b      	uxth	r3, r3
 80018e0:	e001      	b.n	80018e6 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80018e2:	045b      	lsls	r3, r3, #17
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80018ea:	4770      	bx	lr

080018ec <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80018ec:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018ee:	b119      	cbz	r1, 80018f8 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	e003      	b.n	8001900 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	0c1b      	lsrs	r3, r3, #16
 8001900:	8083      	strh	r3, [r0, #4]
 8001902:	4770      	bx	lr

08001904 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001904:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001906:	b119      	cbz	r1, 8001910 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001908:	b29b      	uxth	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	e003      	b.n	8001918 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	8083      	strh	r3, [r0, #4]
 800191a:	4770      	bx	lr

0800191c <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800191c:	8983      	ldrh	r3, [r0, #12]
 800191e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001920:	b10a      	cbz	r2, 8001926 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001922:	4319      	orrs	r1, r3
 8001924:	e001      	b.n	800192a <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001926:	ea23 0101 	bic.w	r1, r3, r1
 800192a:	8181      	strh	r1, [r0, #12]
 800192c:	4770      	bx	lr

0800192e <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800192e:	8281      	strh	r1, [r0, #20]
}
 8001930:	4770      	bx	lr

08001932 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001932:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8001934:	4219      	tst	r1, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001936:	bf0c      	ite	eq
 8001938:	2000      	moveq	r0, #0
 800193a:	2001      	movne	r0, #1
}
 800193c:	4770      	bx	lr

0800193e <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800193e:	43c9      	mvns	r1, r1
 8001940:	b289      	uxth	r1, r1
 8001942:	8201      	strh	r1, [r0, #16]
}
 8001944:	4770      	bx	lr

08001946 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001946:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001948:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800194a:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 800194e:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001950:	d003      	beq.n	800195a <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8001952:	4211      	tst	r1, r2
 8001954:	bf0c      	ite	eq
 8001956:	2000      	moveq	r0, #0
 8001958:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800195a:	4770      	bx	lr

0800195c <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800195c:	43c9      	mvns	r1, r1
 800195e:	b289      	uxth	r1, r1
 8001960:	8201      	strh	r1, [r0, #16]
}
 8001962:	4770      	bx	lr

08001964 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001964:	4311      	orrs	r1, r2
 8001966:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
}
 800196a:	4770      	bx	lr

0800196c <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800196c:	8983      	ldrh	r3, [r0, #12]
 800196e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001970:	b10a      	cbz	r2, 8001976 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001972:	4319      	orrs	r1, r3
 8001974:	e001      	b.n	800197a <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001976:	ea23 0101 	bic.w	r1, r3, r1
 800197a:	8181      	strh	r1, [r0, #12]
 800197c:	4770      	bx	lr

0800197e <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800197e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001980:	b119      	cbz	r1, 800198a <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001982:	b29b      	uxth	r3, r3
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	e003      	b.n	8001992 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800198a:	f023 0308 	bic.w	r3, r3, #8
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	8083      	strh	r3, [r0, #4]
 8001994:	4770      	bx	lr

08001996 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8001996:	8903      	ldrh	r3, [r0, #8]
 8001998:	f023 0307 	bic.w	r3, r3, #7
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	8103      	strh	r3, [r0, #8]
}
 80019a2:	4770      	bx	lr

080019a4 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019a4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019ae:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019b0:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80019b2:	8903      	ldrh	r3, [r0, #8]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f043 0307 	orr.w	r3, r3, #7
 80019ba:	8103      	strh	r3, [r0, #8]
}
 80019bc:	4770      	bx	lr

080019be <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80019be:	b538      	push	{r3, r4, r5, lr}
 80019c0:	460d      	mov	r5, r1
 80019c2:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019c4:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80019c6:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80019c8:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80019ca:	d102      	bne.n	80019d2 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019cc:	f7ff fb19 	bl	8001002 <TI2_Config>
 80019d0:	e001      	b.n	80019d6 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80019d2:	f7ff fafd 	bl	8000fd0 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019d6:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019e0:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019e2:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80019e4:	8923      	ldrh	r3, [r4, #8]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f043 0307 	orr.w	r3, r3, #7
 80019ec:	8123      	strh	r3, [r4, #8]
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}

080019f0 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019f0:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80019f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80019fa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019fc:	8103      	strh	r3, [r0, #8]
}
 80019fe:	4770      	bx	lr

08001a00 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001a00:	8883      	ldrh	r3, [r0, #4]
 8001a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001a0c:	8883      	ldrh	r3, [r0, #4]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4319      	orrs	r1, r3
 8001a12:	8081      	strh	r1, [r0, #4]
}
 8001a14:	4770      	bx	lr

08001a16 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8001a16:	8903      	ldrh	r3, [r0, #8]
 8001a18:	f023 0307 	bic.w	r3, r3, #7
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8001a22:	8903      	ldrh	r3, [r0, #8]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4319      	orrs	r1, r3
 8001a28:	8101      	strh	r1, [r0, #8]
}
 8001a2a:	4770      	bx	lr

08001a2c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8001a2c:	8903      	ldrh	r3, [r0, #8]
 8001a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001a38:	8903      	ldrh	r3, [r0, #8]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4319      	orrs	r1, r3
 8001a3e:	8101      	strh	r1, [r0, #8]
}
 8001a40:	4770      	bx	lr

08001a42 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a42:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8001a44:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001a46:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001a48:	4321      	orrs	r1, r4
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001a50:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a52:	8102      	strh	r2, [r0, #8]
}
 8001a54:	bd10      	pop	{r4, pc}

08001a56 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a56:	b510      	push	{r4, lr}
 8001a58:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001a5a:	f7ff fff2 	bl	8001a42 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001a5e:	8923      	ldrh	r3, [r4, #8]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a66:	8123      	strh	r3, [r4, #8]
}
 8001a68:	bd10      	pop	{r4, pc}

08001a6a <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001a6a:	b510      	push	{r4, lr}
 8001a6c:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001a6e:	f7ff ffe8 	bl	8001a42 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a72:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8001a74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8001a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a80:	8123      	strh	r3, [r4, #8]
}
 8001a82:	bd10      	pop	{r4, pc}

08001a84 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a86:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001a88:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a8a:	8c06      	ldrh	r6, [r0, #32]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001a8c:	f025 0507 	bic.w	r5, r5, #7
 8001a90:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a92:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001a96:	0c2d      	lsrs	r5, r5, #16

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a98:	b2b6      	uxth	r6, r6
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001a9a:	f024 0403 	bic.w	r4, r4, #3
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8001a9e:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001aa0:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001aa2:	f026 0522 	bic.w	r5, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001aa6:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001aa8:	432a      	orrs	r2, r5
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001aaa:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001aae:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001ab2:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001ab6:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ab8:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001aba:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001abc:	8402      	strh	r2, [r0, #32]
}
 8001abe:	bd70      	pop	{r4, r5, r6, pc}

08001ac0 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001ac0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ac2:	b119      	cbz	r1, 8001acc <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aca:	e003      	b.n	8001ad4 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8001acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	8083      	strh	r3, [r0, #4]
 8001ad6:	4770      	bx	lr

08001ad8 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8001ad8:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001ae0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <USART_DeInit+0x90>)
 8001ae4:	4298      	cmp	r0, r3
 8001ae6:	d105      	bne.n	8001af4 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001ae8:	2010      	movs	r0, #16
 8001aea:	2101      	movs	r1, #1
 8001aec:	f7ff f830 	bl	8000b50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001af0:	2010      	movs	r0, #16
 8001af2:	e037      	b.n	8001b64 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <USART_DeInit+0x94>)
 8001af6:	4298      	cmp	r0, r3
 8001af8:	d107      	bne.n	8001b0a <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001afa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001afe:	2101      	movs	r1, #1
 8001b00:	f7ff f81a 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001b04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b08:	e009      	b.n	8001b1e <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <USART_DeInit+0x98>)
 8001b0c:	4298      	cmp	r0, r3
 8001b0e:	d10b      	bne.n	8001b28 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001b10:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b14:	2101      	movs	r1, #1
 8001b16:	f7ff f80f 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001b1a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b1e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8001b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001b24:	f7ff b808 	b.w	8000b38 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <USART_DeInit+0x9c>)
 8001b2a:	4298      	cmp	r0, r3
 8001b2c:	d107      	bne.n	8001b3e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001b2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b32:	2101      	movs	r1, #1
 8001b34:	f7ff f800 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001b38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b3c:	e7ef      	b.n	8001b1e <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <USART_DeInit+0xa0>)
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d107      	bne.n	8001b54 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001b44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b48:	2101      	movs	r1, #1
 8001b4a:	f7fe fff5 	bl	8000b38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001b4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b52:	e7e4      	b.n	8001b1e <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <USART_DeInit+0xa4>)
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d109      	bne.n	8001b6e <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8001b5a:	2020      	movs	r0, #32
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	f7fe fff7 	bl	8000b50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001b62:	2020      	movs	r0, #32
 8001b64:	2100      	movs	r1, #0
    }
  }
}
 8001b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8001b6a:	f7fe bff1 	b.w	8000b50 <RCC_APB2PeriphResetCmd>
 8001b6e:	bd08      	pop	{r3, pc}
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40004800 	.word	0x40004800
 8001b7c:	40004c00 	.word	0x40004c00
 8001b80:	40005000 	.word	0x40005000
 8001b84:	40011400 	.word	0x40011400

08001b88 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001b88:	b530      	push	{r4, r5, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b8a:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001b8c:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b8e:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001b90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001b94:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001b96:	4313      	orrs	r3, r2
 8001b98:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001b9a:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001b9c:	8909      	ldrh	r1, [r1, #8]
 8001b9e:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001ba0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001ba8:	f023 030c 	bic.w	r3, r3, #12
 8001bac:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001bae:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001bb0:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001bb2:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001bb8:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001bba:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001bbc:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001bc2:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001bc4:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001bc6:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001bc8:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001bca:	4668      	mov	r0, sp
 8001bcc:	f7fe fee4 	bl	8000998 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <USART_Init+0xb4>)
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	d003      	beq.n	8001bde <USART_Init+0x56>
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	d101      	bne.n	8001be2 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001bde:	9b03      	ldr	r3, [sp, #12]
 8001be0:	e000      	b.n	8001be4 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001be2:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001be4:	89a2      	ldrh	r2, [r4, #12]
 8001be6:	b212      	sxth	r2, r2
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	f04f 0119 	mov.w	r1, #25
 8001bee:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001bf0:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001bf4:	da01      	bge.n	8001bfa <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	e000      	b.n	8001bfc <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001bfa:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001bfc:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001bfe:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001c02:	fbb1 f2f3 	udiv	r2, r1, r3
 8001c06:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001c08:	0910      	lsrs	r0, r2, #4
 8001c0a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001c0e:	89a0      	ldrh	r0, [r4, #12]
 8001c10:	b200      	sxth	r0, r0
 8001c12:	2800      	cmp	r0, #0
 8001c14:	da06      	bge.n	8001c24 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001c16:	00c9      	lsls	r1, r1, #3
 8001c18:	3132      	adds	r1, #50	; 0x32
 8001c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	e005      	b.n	8001c30 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001c24:	0109      	lsls	r1, r1, #4
 8001c26:	3132      	adds	r1, #50	; 0x32
 8001c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001c32:	b292      	uxth	r2, r2
 8001c34:	8122      	strh	r2, [r4, #8]
}
 8001c36:	b005      	add	sp, #20
 8001c38:	bd30      	pop	{r4, r5, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40011000 	.word	0x40011000

08001c40 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001c40:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001c44:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c46:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001c4c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001c4e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c50:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001c52:	8183      	strh	r3, [r0, #12]
}
 8001c54:	4770      	bx	lr

08001c56 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c56:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c58:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001c5a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c5c:	884c      	ldrh	r4, [r1, #2]
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	888c      	ldrh	r4, [r1, #4]
 8001c62:	88c9      	ldrh	r1, [r1, #6]
 8001c64:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c66:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c68:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001c6a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001c6e:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001c70:	4313      	orrs	r3, r2
 8001c72:	8203      	strh	r3, [r0, #16]
}
 8001c74:	bd10      	pop	{r4, pc}

08001c76 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001c76:	2300      	movs	r3, #0
 8001c78:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001c7a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001c7c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001c7e:	80c3      	strh	r3, [r0, #6]
}
 8001c80:	4770      	bx	lr

08001c82 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001c82:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c84:	b119      	cbz	r1, 8001c8e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8c:	e003      	b.n	8001c96 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	8183      	strh	r3, [r0, #12]
 8001c98:	4770      	bx	lr

08001c9a <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001c9a:	8b03      	ldrh	r3, [r0, #24]
 8001c9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001ca0:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001ca2:	8b03      	ldrh	r3, [r0, #24]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4319      	orrs	r1, r3
 8001ca8:	8301      	strh	r1, [r0, #24]
}
 8001caa:	4770      	bx	lr

08001cac <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001cac:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cae:	b129      	cbz	r1, 8001cbc <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	e001      	b.n	8001cc0 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001cbc:	045b      	lsls	r3, r3, #17
 8001cbe:	0c5b      	lsrs	r3, r3, #17
 8001cc0:	8183      	strh	r3, [r0, #12]
 8001cc2:	4770      	bx	lr

08001cc4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001cc4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cc6:	b119      	cbz	r1, 8001cd0 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cce:	e003      	b.n	8001cd8 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	8283      	strh	r3, [r0, #20]
 8001cda:	4770      	bx	lr

08001cdc <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001cdc:	05c9      	lsls	r1, r1, #23
 8001cde:	0dc9      	lsrs	r1, r1, #23
 8001ce0:	8081      	strh	r1, [r0, #4]
}
 8001ce2:	4770      	bx	lr

08001ce4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001ce4:	8880      	ldrh	r0, [r0, #4]
 8001ce6:	05c0      	lsls	r0, r0, #23
 8001ce8:	0dc0      	lsrs	r0, r0, #23
}
 8001cea:	4770      	bx	lr

08001cec <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001cec:	8a03      	ldrh	r3, [r0, #16]
 8001cee:	f023 030f 	bic.w	r3, r3, #15
 8001cf2:	041b      	lsls	r3, r3, #16
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001cf8:	8a03      	ldrh	r3, [r0, #16]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	8201      	strh	r1, [r0, #16]
}
 8001d00:	4770      	bx	lr

08001d02 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001d02:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001d04:	b119      	cbz	r1, 8001d0e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	e003      	b.n	8001d16 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	8183      	strh	r3, [r0, #12]
 8001d18:	4770      	bx	lr

08001d1a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001d1a:	8983      	ldrh	r3, [r0, #12]
 8001d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001d26:	8983      	ldrh	r3, [r0, #12]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	8181      	strh	r1, [r0, #12]
}
 8001d2e:	4770      	bx	lr

08001d30 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001d30:	8a03      	ldrh	r3, [r0, #16]
 8001d32:	f023 0320 	bic.w	r3, r3, #32
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001d3c:	8a03      	ldrh	r3, [r0, #16]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4319      	orrs	r1, r3
 8001d42:	8201      	strh	r1, [r0, #16]
}
 8001d44:	4770      	bx	lr

08001d46 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001d46:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d48:	b119      	cbz	r1, 8001d52 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	e003      	b.n	8001d5a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	8203      	strh	r3, [r0, #16]
 8001d5c:	4770      	bx	lr

08001d5e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001d5e:	8983      	ldrh	r3, [r0, #12]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	8183      	strh	r3, [r0, #12]
}
 8001d68:	4770      	bx	lr

08001d6a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001d6a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d6c:	b119      	cbz	r1, 8001d76 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	e003      	b.n	8001d7e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001d76:	f023 0308 	bic.w	r3, r3, #8
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	8283      	strh	r3, [r0, #20]
 8001d80:	4770      	bx	lr

08001d82 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001d82:	8b03      	ldrh	r3, [r0, #24]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001d88:	8b03      	ldrh	r3, [r0, #24]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001d90:	8301      	strh	r1, [r0, #24]
}
 8001d92:	4770      	bx	lr

08001d94 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d94:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d96:	b119      	cbz	r1, 8001da0 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	e003      	b.n	8001da8 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001da0:	f023 0320 	bic.w	r3, r3, #32
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	8283      	strh	r3, [r0, #20]
 8001daa:	4770      	bx	lr

08001dac <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001dac:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001dae:	b119      	cbz	r1, 8001db8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	e003      	b.n	8001dc0 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001db8:	f023 0310 	bic.w	r3, r3, #16
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	0c1b      	lsrs	r3, r3, #16
 8001dc0:	8283      	strh	r3, [r0, #20]
 8001dc2:	4770      	bx	lr

08001dc4 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001dc4:	8a83      	ldrh	r3, [r0, #20]
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001dd0:	8a83      	ldrh	r3, [r0, #20]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	8281      	strh	r1, [r0, #20]
}
 8001dd8:	4770      	bx	lr

08001dda <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001dda:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001ddc:	b119      	cbz	r1, 8001de6 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	e003      	b.n	8001dee <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001de6:	f023 0302 	bic.w	r3, r3, #2
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	8283      	strh	r3, [r0, #20]
 8001df0:	4770      	bx	lr

08001df2 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001df2:	8a83      	ldrh	r3, [r0, #20]
 8001df4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001df6:	b10a      	cbz	r2, 8001dfc <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	e001      	b.n	8001e00 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001dfc:	ea23 0101 	bic.w	r1, r3, r1
 8001e00:	8281      	strh	r1, [r0, #20]
 8001e02:	4770      	bx	lr

08001e04 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e04:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001e08:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001e0a:	2401      	movs	r4, #1

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001e0c:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001e10:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001e12:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001e16:	d101      	bne.n	8001e1c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8001e18:	300c      	adds	r0, #12
 8001e1a:	e004      	b.n	8001e26 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d101      	bne.n	8001e24 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8001e20:	3010      	adds	r0, #16
 8001e22:	e000      	b.n	8001e26 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001e24:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e26:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8001e28:	b10a      	cbz	r2, 8001e2e <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	e001      	b.n	8001e32 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001e2e:	ea23 0101 	bic.w	r1, r3, r1
 8001e32:	6001      	str	r1, [r0, #0]
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001e36:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8001e38:	4219      	tst	r1, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2000      	moveq	r0, #0
 8001e3e:	2001      	movne	r0, #1
}
 8001e40:	4770      	bx	lr

08001e42 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001e42:	43c9      	mvns	r1, r1
 8001e44:	b289      	uxth	r1, r1
 8001e46:	8001      	strh	r1, [r0, #0]
}
 8001e48:	4770      	bx	lr

08001e4a <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001e4a:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e4c:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001e50:	2201      	movs	r2, #1
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001e52:	f001 031f 	and.w	r3, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001e56:	2c01      	cmp	r4, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001e58:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001e5c:	d101      	bne.n	8001e62 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8001e5e:	8983      	ldrh	r3, [r0, #12]
 8001e60:	e003      	b.n	8001e6a <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001e62:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8001e64:	bf0c      	ite	eq
 8001e66:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001e68:	8a83      	ldrhne	r3, [r0, #20]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001e6e:	8802      	ldrh	r2, [r0, #0]
 8001e70:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001e72:	b143      	cbz	r3, 8001e86 <USART_GetITStatus+0x3c>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8001e74:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8001e76:	2301      	movs	r3, #1
 8001e78:	fa03 f101 	lsl.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8001e7c:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8001e7e:	bf0c      	ite	eq
 8001e80:	2000      	moveq	r0, #0
 8001e82:	2001      	movne	r0, #1
 8001e84:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8001e86:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8001e88:	bd10      	pop	{r4, pc}

08001e8a <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001e8a:	0a09      	lsrs	r1, r1, #8
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	fa03 f301 	lsl.w	r3, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8001e92:	43db      	mvns	r3, r3
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	8003      	strh	r3, [r0, #0]
}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8001ea8:	233e      	movs	r3, #62	; 0x3e
 8001eaa:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8001eac:	232a      	movs	r3, #42	; 0x2a
 8001eae:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 8001eb0:	23ff      	movs	r3, #255	; 0xff
 8001eb2:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 8001eb4:	6081      	str	r1, [r0, #8]
	 }
	 */
	if (lcd->pin_bklight != PIN_NOT_DEFINED) {
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
 8001eb6:	4770      	bx	lr

08001eb8 <ST7032i_command>:
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 8001eb8:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = value;
 8001ec0:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 8001ec4:	aa01      	add	r2, sp, #4
 8001ec6:	7b41      	ldrb	r1, [r0, #13]
 8001ec8:	6880      	ldr	r0, [r0, #8]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f000 fc24 	bl	8002718 <i2c_transmit>
	delay_us(CMDDELAY);
 8001ed0:	2032      	movs	r0, #50	; 0x32
 8001ed2:	f000 f9a7 	bl	8002224 <delay_us>
}
 8001ed6:	bd0e      	pop	{r1, r2, r3, pc}

08001ed8 <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 8001ed8:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2];
	buf[0] = 0b01000000;
 8001eda:	2340      	movs	r3, #64	; 0x40
 8001edc:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = value & 0xff;
 8001ee0:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 8001ee4:	aa01      	add	r2, sp, #4
 8001ee6:	7b41      	ldrb	r1, [r0, #13]
 8001ee8:	6880      	ldr	r0, [r0, #8]
 8001eea:	2302      	movs	r3, #2
 8001eec:	f000 fc14 	bl	8002718 <i2c_transmit>
	delay_us(CMDDELAY);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f000 f997 	bl	8002224 <delay_us>
	return 1; // assume success
}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	bd0e      	pop	{r1, r2, r3, pc}

08001efa <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 8001efa:	b570      	push	{r4, r5, r6, lr}
 8001efc:	4606      	mov	r6, r0
 8001efe:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 8001f00:	2400      	movs	r4, #0
 8001f02:	e004      	b.n	8001f0e <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 8001f04:	4630      	mov	r0, r6
 8001f06:	f7ff ffe7 	bl	8001ed8 <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 8001f0a:	3401      	adds	r4, #1
 8001f0c:	b2a4      	uxth	r4, r4
 8001f0e:	5d29      	ldrb	r1, [r5, r4]
 8001f10:	2900      	cmp	r1, #0
 8001f12:	d1f7      	bne.n	8001f04 <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8001f14:	4620      	mov	r0, r4
 8001f16:	bd70      	pop	{r4, r5, r6, pc}

08001f18 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8001f18:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8001f20:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8001f22:	2138      	movs	r1, #56	; 0x38
 8001f24:	f7ff ffc8 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8001f28:	2139      	movs	r1, #57	; 0x39
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7ff ffc4 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8001f30:	2002      	movs	r0, #2
 8001f32:	f000 f967 	bl	8002204 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8001f36:	7b21      	ldrb	r1, [r4, #12]
 8001f38:	f001 010f 	and.w	r1, r1, #15
 8001f3c:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ffb9 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f000 f95c 	bl	8002204 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 8001f4c:	7b21      	ldrb	r1, [r4, #12]
 8001f4e:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8001f52:	4620      	mov	r0, r4
 8001f54:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8001f58:	f7ff ffae 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	2138      	movs	r1, #56	; 0x38
 8001f60:	f7ff ffaa 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8001f64:	2002      	movs	r0, #2
}
 8001f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 8001f6a:	f000 b94b 	b.w	8002204 <delay_ms>

08001f6e <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 8001f6e:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8001f70:	2101      	movs	r1, #1
 8001f72:	f7ff ffa1 	bl	8001eb8 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8001f76:	20c8      	movs	r0, #200	; 0xc8
}
 8001f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8001f7c:	f000 b942 	b.w	8002204 <delay_ms>

08001f80 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8001f80:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8001f82:	2102      	movs	r1, #2
 8001f84:	f7ff ff98 	bl	8001eb8 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8001f88:	20c8      	movs	r0, #200	; 0xc8
}
 8001f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 8001f8e:	f000 b939 	b.w	8002204 <delay_ms>

08001f92 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f92:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <ST7032i_setCursor+0x42>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f96:	4605      	mov	r5, r0
 8001f98:	4614      	mov	r4, r2
 8001f9a:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8001f9e:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001fa0:	af04      	add	r7, sp, #16
 8001fa2:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8001fa6:	792b      	ldrb	r3, [r5, #4]
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	d304      	bcc.n	8001fb6 <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 8001fac:	fbb4 f2f3 	udiv	r2, r4, r3
 8001fb0:	fb03 4412 	mls	r4, r3, r2, r4
 8001fb4:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 8001fb6:	ab04      	add	r3, sp, #16
 8001fb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fbc:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 8001fbe:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8001fc2:	1871      	adds	r1, r6, r1
 8001fc4:	b2c9      	uxtb	r1, r1
 8001fc6:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fc8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8001fcc:	b005      	add	sp, #20
 8001fce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 8001fd2:	e771      	b.n	8001eb8 <ST7032i_command>
 8001fd4:	0800a12c 	.word	0x0800a12c

08001fd8 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 8001fd8:	7841      	ldrb	r1, [r0, #1]
 8001fda:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8001fde:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8001fe0:	f041 0108 	orr.w	r1, r1, #8
 8001fe4:	e768      	b.n	8001eb8 <ST7032i_command>

08001fe6 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 8001fe6:	7841      	ldrb	r1, [r0, #1]
 8001fe8:	f041 0104 	orr.w	r1, r1, #4
 8001fec:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 8001fee:	f041 0108 	orr.w	r1, r1, #8
 8001ff2:	e761      	b.n	8001eb8 <ST7032i_command>

08001ff4 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8001ff4:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8001ff6:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 8001ff8:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 8001ffa:	f7ff ff5d 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8001ffe:	2139      	movs	r1, #57	; 0x39
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ff59 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8002006:	2002      	movs	r0, #2
 8002008:	f000 f8fc 	bl	8002204 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 800200c:	4620      	mov	r0, r4
 800200e:	2114      	movs	r1, #20
 8002010:	f7ff ff52 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8002014:	7b21      	ldrb	r1, [r4, #12]
 8002016:	f001 010f 	and.w	r1, r1, #15
 800201a:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff ff4a 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8002024:	2002      	movs	r0, #2
 8002026:	f000 f8ed 	bl	8002204 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800202a:	7b21      	ldrb	r1, [r4, #12]
 800202c:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8002030:	4620      	mov	r0, r4
 8002032:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8002036:	f7ff ff3f 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800203a:	216c      	movs	r1, #108	; 0x6c
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff ff3b 	bl	8001eb8 <ST7032i_command>
	delay_ms(300);
 8002042:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002046:	f000 f8dd 	bl	8002204 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800204a:	4620      	mov	r0, r4
 800204c:	2138      	movs	r1, #56	; 0x38
 800204e:	f7ff ff33 	bl	8001eb8 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8002052:	210c      	movs	r1, #12
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ff2f 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 800205a:	2002      	movs	r0, #2
 800205c:	f000 f8d2 	bl	8002204 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8002060:	2101      	movs	r1, #1
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff ff28 	bl	8001eb8 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8002068:	2002      	movs	r0, #2
 800206a:	f000 f8cb 	bl	8002204 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 800206e:	2102      	movs	r1, #2
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff ff21 	bl	8001eb8 <ST7032i_command>
	delay_ms(2);
 8002076:	2002      	movs	r0, #2
 8002078:	f000 f8c4 	bl	8002204 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 800207c:	7821      	ldrb	r1, [r4, #0]
 800207e:	4620      	mov	r0, r4
 8002080:	f041 0120 	orr.w	r1, r1, #32
 8002084:	f7ff ff18 	bl	8001eb8 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002088:	2304      	movs	r3, #4
 800208a:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff ffaa 	bl	8001fe6 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 8002092:	4620      	mov	r0, r4
 8002094:	f7ff ff6b 	bl	8001f6e <ST7032i_clear>
	ST7032i_home(lcd);
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff ff71 	bl	8001f80 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800209e:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80020a0:	4620      	mov	r0, r4
 80020a2:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80020a4:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 80020a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 80020aa:	e705      	b.n	8001eb8 <ST7032i_command>

080020ac <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 80020ac:	7841      	ldrb	r1, [r0, #1]
 80020ae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80020b2:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020b4:	f041 0108 	orr.w	r1, r1, #8
 80020b8:	e6fe      	b.n	8001eb8 <ST7032i_command>

080020ba <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80020ba:	7841      	ldrb	r1, [r0, #1]
 80020bc:	f041 0101 	orr.w	r1, r1, #1
 80020c0:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020c2:	f041 0108 	orr.w	r1, r1, #8
 80020c6:	e6f7      	b.n	8001eb8 <ST7032i_command>

080020c8 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80020c8:	7841      	ldrb	r1, [r0, #1]
 80020ca:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80020ce:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020d0:	f041 0108 	orr.w	r1, r1, #8
 80020d4:	e6f0      	b.n	8001eb8 <ST7032i_command>

080020d6 <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80020d6:	7841      	ldrb	r1, [r0, #1]
 80020d8:	f041 0102 	orr.w	r1, r1, #2
 80020dc:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80020de:	f041 0108 	orr.w	r1, r1, #8
 80020e2:	e6e9      	b.n	8001eb8 <ST7032i_command>

080020e4 <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80020e4:	2118      	movs	r1, #24
 80020e6:	e6e7      	b.n	8001eb8 <ST7032i_command>

080020e8 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80020e8:	211c      	movs	r1, #28
 80020ea:	e6e5      	b.n	8001eb8 <ST7032i_command>

080020ec <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80020ec:	7881      	ldrb	r1, [r0, #2]
 80020ee:	f041 0102 	orr.w	r1, r1, #2
 80020f2:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80020f4:	f041 0104 	orr.w	r1, r1, #4
 80020f8:	e6de      	b.n	8001eb8 <ST7032i_command>

080020fa <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 80020fa:	7881      	ldrb	r1, [r0, #2]
 80020fc:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8002100:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002102:	f041 0104 	orr.w	r1, r1, #4
 8002106:	e6d7      	b.n	8001eb8 <ST7032i_command>

08002108 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8002108:	7881      	ldrb	r1, [r0, #2]
 800210a:	f041 0101 	orr.w	r1, r1, #1
 800210e:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8002110:	f041 0104 	orr.w	r1, r1, #4
 8002114:	e6d0      	b.n	8001eb8 <ST7032i_command>

08002116 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8002116:	7881      	ldrb	r1, [r0, #2]
 8002118:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800211c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 800211e:	f041 0104 	orr.w	r1, r1, #4
 8002122:	e6c9      	b.n	8001eb8 <ST7032i_command>

08002124 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002124:	f001 0107 	and.w	r1, r1, #7
 8002128:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 800212a:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800212c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8002130:	4604      	mov	r4, r0
 8002132:	4616      	mov	r6, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8002134:	f7ff fec0 	bl	8001eb8 <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8002138:	2500      	movs	r5, #0
		ST7032i_write(this, charmap[i]);
 800213a:	5d71      	ldrb	r1, [r6, r5]
 800213c:	4620      	mov	r0, r4

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 800213e:	3501      	adds	r5, #1
		ST7032i_write(this, charmap[i]);
 8002140:	f7ff feca 	bl	8001ed8 <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8002144:	2d08      	cmp	r5, #8
 8002146:	d1f8      	bne.n	800213a <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	bf00      	nop

0800214c <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 800214c:	b530      	push	{r4, r5, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8002150:	4668      	mov	r0, sp
 8002152:	f7fe fc21 	bl	8000998 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8002156:	9b00      	ldr	r3, [sp, #0]
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <TIM2_timer_start+0x88>)
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002160:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002162:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002164:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8002166:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 800216a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800216e:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002170:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002174:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002178:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800217c:	f7fe fca0 	bl	8000ac0 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8002180:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002184:	a904      	add	r1, sp, #16
 8002186:	f7ff f803 	bl	8001190 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 800218a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800218e:	4621      	mov	r1, r4
 8002190:	f7ff f850 	bl	8001234 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002194:	2101      	movs	r1, #1
 8002196:	460a      	mov	r2, r1
 8002198:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800219c:	f7ff fbbe 	bl	800191c <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80021a0:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80021a2:	eb0d 0003 	add.w	r0, sp, r3

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80021a6:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80021a8:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80021ac:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80021b0:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80021b4:	f88d 501f 	strb.w	r5, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80021b8:	f7fd fff0 	bl	800019c <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80021bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7ff f87a 	bl	80012ba <TIM_Cmd>

	__counter_micros = 0;
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <TIM2_timer_start+0x8c>)
 80021c8:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <TIM2_timer_start+0x90>)
 80021cc:	601c      	str	r4, [r3, #0]
}
 80021ce:	b009      	add	sp, #36	; 0x24
 80021d0:	bd30      	pop	{r4, r5, pc}
 80021d2:	bf00      	nop
 80021d4:	000f4240 	.word	0x000f4240
 80021d8:	200009a0 	.word	0x200009a0
 80021dc:	200009a4 	.word	0x200009a4

080021e0 <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 80021e2:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 80021e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021e8:	681c      	ldr	r4, [r3, #0]
 80021ea:	f7ff f827 	bl	800123c <TIM_GetCounter>
 80021ee:	1900      	adds	r0, r0, r4
}
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	200009a0 	.word	0x200009a0

080021f8 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <millis+0x8>)
 80021fa:	6818      	ldr	r0, [r3, #0]
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200009a4 	.word	0x200009a4

08002204 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <delay_ms+0x1c>)
 8002206:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8002208:	1880      	adds	r0, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800220a:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
 800220c:	4290      	cmp	r0, r2
 800220e:	d202      	bcs.n	8002216 <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8002210:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 8002212:	4282      	cmp	r2, r0
 8002214:	d2fc      	bcs.n	8002210 <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8002216:	4b02      	ldr	r3, [pc, #8]	; (8002220 <delay_ms+0x1c>)
 8002218:	681a      	ldr	r2, [r3, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 800221a:	4282      	cmp	r2, r0
 800221c:	d3fc      	bcc.n	8002218 <delay_ms+0x14>
		;
}
 800221e:	4770      	bx	lr
 8002220:	200009a4 	.word	0x200009a4

08002224 <delay_us>:

void delay_us(uint32_t w) {
 8002224:	b510      	push	{r4, lr}
 8002226:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8002228:	f7ff ffda 	bl	80021e0 <micros>
 800222c:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 800222e:	f7ff ffd7 	bl	80021e0 <micros>
 8002232:	4284      	cmp	r4, r0
 8002234:	d203      	bcs.n	800223e <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 8002236:	f7ff ffd3 	bl	80021e0 <micros>
 800223a:	42a0      	cmp	r0, r4
 800223c:	d2fb      	bcs.n	8002236 <delay_us+0x12>
	}
	while (micros() < wtill)
 800223e:	f7ff ffcf 	bl	80021e0 <micros>
 8002242:	42a0      	cmp	r0, r4
 8002244:	d3fb      	bcc.n	800223e <delay_us+0x1a>
		;
}
 8002246:	bd10      	pop	{r4, pc}

08002248 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002248:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800224a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800224e:	2101      	movs	r1, #1
 8002250:	f7ff fb79 	bl	8001946 <TIM_GetITStatus>
 8002254:	b168      	cbz	r0, 8002272 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8002256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800225a:	2101      	movs	r1, #1
 800225c:	f7ff fb7e 	bl	800195c <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <TIM2_IRQHandler+0x2c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002268:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 800226a:	4b03      	ldr	r3, [pc, #12]	; (8002278 <TIM2_IRQHandler+0x30>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	3201      	adds	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	bd08      	pop	{r3, pc}
 8002274:	200009a0 	.word	0x200009a0
 8002278:	200009a4 	.word	0x200009a4

0800227c <PinPort>:
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <PinPort+0xc>)
 800227e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8002282:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8002286:	4770      	bx	lr
 8002288:	20000010 	.word	0x20000010

0800228c <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800228c:	2301      	movs	r3, #1
 800228e:	f000 000f 	and.w	r0, r0, #15
 8002292:	fa03 f000 	lsl.w	r0, r3, r0
 8002296:	b280      	uxth	r0, r0
}
 8002298:	4770      	bx	lr

0800229a <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
 800229a:	f000 000f 	and.w	r0, r0, #15
}
 800229e:	4770      	bx	lr

080022a0 <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80022a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80022a2:	4c11      	ldr	r4, [pc, #68]	; (80022e8 <pinMode+0x48>)
 80022a4:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80022a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80022ac:	460f      	mov	r7, r1
 80022ae:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80022b0:	2101      	movs	r1, #1
 80022b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022b4:	f7fe fbe0 	bl	8000a78 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022b8:	f006 060f 	and.w	r6, r6, #15
 80022bc:	2301      	movs	r3, #1
 80022be:	fa03 f606 	lsl.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022c2:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80022c4:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022c6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80022ca:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022ce:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80022d2:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022d4:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022d6:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80022d8:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022dc:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80022e0:	f7fe f81e 	bl	8000320 <GPIO_Init>
}
 80022e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000010 	.word	0x20000010

080022ec <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80022ec:	0a02      	lsrs	r2, r0, #8
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <digitalWrite+0x30>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80022f0:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022f4:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80022f8:	b139      	cbz	r1, 800230a <digitalWrite+0x1e>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f100 	lsl.w	r1, r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8002300:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002304:	b289      	uxth	r1, r1
 8002306:	f7fe b87f 	b.w	8000408 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f100 	lsl.w	r1, r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8002310:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002314:	b289      	uxth	r1, r1
 8002316:	f7fe b879 	b.w	800040c <GPIO_ResetBits>
 800231a:	bf00      	nop
 800231c:	20000010 	.word	0x20000010

08002320 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8002320:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8002322:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <digitalRead+0x44>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8002328:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800232a:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800232e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8002332:	2301      	movs	r3, #1
 8002334:	fa03 f101 	lsl.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8002338:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800233a:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 800234a:	f7fe f854 	bl	80003f6 <GPIO_ReadOutputDataBit>
 800234e:	3000      	adds	r0, #0
 8002350:	bf18      	it	ne
 8002352:	2001      	movne	r0, #1
 8002354:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8002356:	f7fe f845 	bl	80003e4 <GPIO_ReadInputDataBit>
 800235a:	3000      	adds	r0, #0
 800235c:	bf18      	it	ne
 800235e:	2001      	movne	r0, #1
}
 8002360:	bd08      	pop	{r3, pc}
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010

08002368 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8002368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800236a:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <GPIOMode+0x90>)
 800236e:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8002370:	4604      	mov	r4, r0
 8002372:	460d      	mov	r5, r1
 8002374:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 8002376:	d101      	bne.n	800237c <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002378:	2002      	movs	r0, #2
 800237a:	e022      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <GPIOMode+0x94>)
 800237e:	4298      	cmp	r0, r3
 8002380:	d101      	bne.n	8002386 <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002382:	2004      	movs	r0, #4
 8002384:	e01d      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <GPIOMode+0x98>)
 8002388:	4298      	cmp	r0, r3
 800238a:	d101      	bne.n	8002390 <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800238c:	2008      	movs	r0, #8
 800238e:	e018      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <GPIOMode+0x9c>)
 8002392:	4298      	cmp	r0, r3
 8002394:	d101      	bne.n	800239a <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002396:	2010      	movs	r0, #16
 8002398:	e013      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <GPIOMode+0xa0>)
 800239c:	4298      	cmp	r0, r3
 800239e:	d101      	bne.n	80023a4 <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80023a0:	2020      	movs	r0, #32
 80023a2:	e00e      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <GPIOMode+0xa4>)
 80023a6:	4298      	cmp	r0, r3
 80023a8:	d101      	bne.n	80023ae <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80023aa:	2040      	movs	r0, #64	; 0x40
 80023ac:	e009      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <GPIOMode+0xa8>)
 80023b0:	4298      	cmp	r0, r3
 80023b2:	d101      	bne.n	80023b8 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80023b4:	2080      	movs	r0, #128	; 0x80
 80023b6:	e004      	b.n	80023c2 <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <GPIOMode+0xac>)
 80023ba:	4298      	cmp	r0, r3
 80023bc:	d103      	bne.n	80023c6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80023be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023c2:	2101      	movs	r1, #1
 80023c4:	e004      	b.n	80023d0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <GPIOMode+0xb0>)
 80023c8:	4298      	cmp	r0, r3
 80023ca:	d103      	bne.n	80023d4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80023cc:	2001      	movs	r0, #1
 80023ce:	4601      	mov	r1, r0
 80023d0:	f7fe fb52 	bl	8000a78 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80023d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80023d8:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80023da:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80023de:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80023e2:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80023e6:	4620      	mov	r0, r4
 80023e8:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80023ea:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80023ee:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80023f2:	f7fd ff95 	bl	8000320 <GPIO_Init>
}
 80023f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00
 8002414:	40022000 	.word	0x40022000
 8002418:	40020000 	.word	0x40020000

0800241c <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 800241c:	f7fd bffd 	b.w	800041a <GPIO_Write>

08002420 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <i2c_begin+0xe0>)
 8002424:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 8002426:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800242a:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 800242c:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 800242e:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8002432:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8002434:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8002436:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002438:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800243c:	2101      	movs	r1, #1
 800243e:	f7fe fb3f 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002442:	88e0      	ldrh	r0, [r4, #6]
 8002444:	f7ff ff1a 	bl	800227c <PinPort>
 8002448:	4607      	mov	r7, r0
 800244a:	88e0      	ldrh	r0, [r4, #6]
 800244c:	f7ff ff1e 	bl	800228c <PinBit>
 8002450:	2202      	movs	r2, #2
 8002452:	2601      	movs	r6, #1
 8002454:	4601      	mov	r1, r0
 8002456:	4613      	mov	r3, r2
 8002458:	4638      	mov	r0, r7
 800245a:	9600      	str	r6, [sp, #0]
 800245c:	9601      	str	r6, [sp, #4]
 800245e:	f7ff ff83 	bl	8002368 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002462:	88a0      	ldrh	r0, [r4, #4]
 8002464:	f7ff ff0a 	bl	800227c <PinPort>
 8002468:	4607      	mov	r7, r0
 800246a:	88a0      	ldrh	r0, [r4, #4]
 800246c:	f7ff ff0e 	bl	800228c <PinBit>
 8002470:	2202      	movs	r2, #2
 8002472:	4613      	mov	r3, r2
 8002474:	4601      	mov	r1, r0
 8002476:	4638      	mov	r0, r7
 8002478:	9600      	str	r6, [sp, #0]
 800247a:	9601      	str	r6, [sp, #4]
 800247c:	f7ff ff74 	bl	8002368 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8002480:	88e0      	ldrh	r0, [r4, #6]
 8002482:	f7ff fefb 	bl	800227c <PinPort>
 8002486:	4606      	mov	r6, r0
 8002488:	88e0      	ldrh	r0, [r4, #6]
 800248a:	f7ff ff06 	bl	800229a <PinSource>
 800248e:	2204      	movs	r2, #4
 8002490:	4601      	mov	r1, r0
 8002492:	4630      	mov	r0, r6
 8002494:	f7fd ffc7 	bl	8000426 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 8002498:	88a0      	ldrh	r0, [r4, #4]
 800249a:	f7ff feef 	bl	800227c <PinPort>
 800249e:	4606      	mov	r6, r0
 80024a0:	88a0      	ldrh	r0, [r4, #4]
 80024a2:	f7ff fefa 	bl	800229a <PinSource>
 80024a6:	2204      	movs	r2, #4
 80024a8:	4601      	mov	r1, r0
 80024aa:	4630      	mov	r0, r6
 80024ac:	f7fd ffbb 	bl	8000426 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <i2c_begin+0xe4>)
 80024b2:	429d      	cmp	r5, r3
 80024b4:	d004      	beq.n	80024c0 <i2c_begin+0xa0>
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <i2c_begin+0xe8>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 80024b8:	4295      	cmp	r5, r2
 80024ba:	bf0c      	ite	eq
 80024bc:	4615      	moveq	r5, r2
 80024be:	461d      	movne	r5, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80024c0:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80024c2:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80024c4:	461e      	mov	r6, r3
 80024c6:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80024ca:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80024ce:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80024d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d6:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80024da:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80024de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80024e2:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80024e4:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80024e8:	f7fd ffe2 	bl	80004b0 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	2101      	movs	r1, #1
 80024f0:	f7fe f852 	bl	8000598 <I2C_Cmd>

	wirex->status = NOT_READY;
 80024f4:	20ff      	movs	r0, #255	; 0xff
 80024f6:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80024f8:	72a6      	strb	r6, [r4, #10]

	return true;
}
 80024fa:	b007      	add	sp, #28
 80024fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fe:	bf00      	nop
 8002500:	40005400 	.word	0x40005400
 8002504:	000186a0 	.word	0x000186a0
 8002508:	00061a80 	.word	0x00061a80

0800250c <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 800250c:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 800250e:	b570      	push	{r4, r5, r6, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 8002514:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 8002516:	2506      	movs	r5, #6
 8002518:	e007      	b.n	800252a <i2c_start+0x1e>
 800251a:	3d01      	subs	r5, #1
 800251c:	b2ad      	uxth	r5, r5
		if (wc == 0)
 800251e:	2d00      	cmp	r5, #0
 8002520:	d039      	beq.n	8002596 <i2c_start+0x8a>
			return false;
		delay_us(667);
 8002522:	f240 209b 	movw	r0, #667	; 0x29b
 8002526:	f7ff fe7d 	bl	8002224 <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002530:	f7fe f94a 	bl	80007c8 <I2C_GetFlagStatus>
 8002534:	2800      	cmp	r0, #0
 8002536:	d1f0      	bne.n	800251a <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 8002538:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 800253a:	2101      	movs	r1, #1
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	f7fe f837 	bl	80005b0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002542:	2506      	movs	r5, #6
 8002544:	e006      	b.n	8002554 <i2c_start+0x48>
 8002546:	3d01      	subs	r5, #1
 8002548:	b2ad      	uxth	r5, r5
		if (wc == 0)
 800254a:	b325      	cbz	r5, 8002596 <i2c_start+0x8a>
			return false;
		delay_us(667);
 800254c:	f240 209b 	movw	r0, #667	; 0x29b
 8002550:	f7ff fe68 	bl	8002224 <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	4911      	ldr	r1, [pc, #68]	; (800259c <i2c_start+0x90>)
 8002558:	f7fe f921 	bl	800079e <I2C_CheckEvent>
 800255c:	2800      	cmp	r0, #0
 800255e:	d0f2      	beq.n	8002546 <i2c_start+0x3a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8002560:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8002562:	fa06 f603 	lsl.w	r6, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8002566:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8002568:	b2f1      	uxtb	r1, r6
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	f7fe f837 	bl	80005e0 <I2C_Send7bitAddress>
 8002572:	2506      	movs	r5, #6
 8002574:	e006      	b.n	8002584 <i2c_start+0x78>
 8002576:	3d01      	subs	r5, #1
 8002578:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 800257a:	b165      	cbz	r5, 8002596 <i2c_start+0x8a>
			return false;
		delay_us(667);
 800257c:	f240 209b 	movw	r0, #667	; 0x29b
 8002580:	f7ff fe50 	bl	8002224 <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	4906      	ldr	r1, [pc, #24]	; (80025a0 <i2c_start+0x94>)
 8002588:	f7fe f909 	bl	800079e <I2C_CheckEvent>
 800258c:	2800      	cmp	r0, #0
 800258e:	d0f2      	beq.n	8002576 <i2c_start+0x6a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 8002590:	2302      	movs	r3, #2
 8002592:	7263      	strb	r3, [r4, #9]
	return true;
 8002594:	25ff      	movs	r5, #255	; 0xff

}
 8002596:	4628      	mov	r0, r5
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	bf00      	nop
 800259c:	00030001 	.word	0x00030001
 80025a0:	00070082 	.word	0x00070082

080025a4 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80025a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025a8:	461e      	mov	r6, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 80025aa:	2302      	movs	r3, #2
 80025ac:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	4690      	mov	r8, r2
 80025b4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 80025b8:	f7ff ffa8 	bl	800250c <i2c_start>
 80025bc:	2800      	cmp	r0, #0
 80025be:	f000 809d 	beq.w	80026fc <i2c_receive+0x158>
		return false;

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80025c2:	4641      	mov	r1, r8
 80025c4:	6820      	ldr	r0, [r4, #0]
 80025c6:	f7fe f88e 	bl	80006e6 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80025ca:	2304      	movs	r3, #4
 80025cc:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80025ce:	f04f 0806 	mov.w	r8, #6
 80025d2:	e00b      	b.n	80025ec <i2c_receive+0x48>
 80025d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80025d8:	fa1f f888 	uxth.w	r8, r8
		if (wc == 0)
 80025dc:	f1b8 0f00 	cmp.w	r8, #0
 80025e0:	f000 808e 	beq.w	8002700 <i2c_receive+0x15c>
			return false;
		delay_us(667);
 80025e4:	f240 209b 	movw	r0, #667	; 0x29b
 80025e8:	f7ff fe1c 	bl	8002224 <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	4946      	ldr	r1, [pc, #280]	; (8002708 <i2c_receive+0x164>)
 80025f0:	f7fe f8d5 	bl	800079e <I2C_CheckEvent>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d0ed      	beq.n	80025d4 <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 80025f8:	f04f 0806 	mov.w	r8, #6
 80025fc:	f884 8009 	strb.w	r8, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	f7fd ffd4 	bl	80005b0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002608:	e00a      	b.n	8002620 <i2c_receive+0x7c>
 800260a:	f108 38ff 	add.w	r8, r8, #4294967295
 800260e:	fa1f f888 	uxth.w	r8, r8
		if (wc == 0)
 8002612:	f1b8 0f00 	cmp.w	r8, #0
 8002616:	d073      	beq.n	8002700 <i2c_receive+0x15c>
			return false;
		delay_us(667);
 8002618:	f240 209b 	movw	r0, #667	; 0x29b
 800261c:	f7ff fe02 	bl	8002224 <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	493a      	ldr	r1, [pc, #232]	; (800270c <i2c_receive+0x168>)
 8002624:	f7fe f8bb 	bl	800079e <I2C_CheckEvent>
 8002628:	2800      	cmp	r0, #0
 800262a:	d0ee      	beq.n	800260a <i2c_receive+0x66>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 800262c:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 800262e:	006d      	lsls	r5, r5, #1
 8002630:	b2e9      	uxtb	r1, r5
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8002632:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	f7fd ffd2 	bl	80005e0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 800263c:	2506      	movs	r5, #6
 800263e:	e007      	b.n	8002650 <i2c_receive+0xac>
 8002640:	3d01      	subs	r5, #1
 8002642:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8002644:	2d00      	cmp	r5, #0
 8002646:	d05c      	beq.n	8002702 <i2c_receive+0x15e>
			return false;
		delay_us(667);
 8002648:	f240 209b 	movw	r0, #667	; 0x29b
 800264c:	f7ff fdea 	bl	8002224 <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	492f      	ldr	r1, [pc, #188]	; (8002710 <i2c_receive+0x16c>)
 8002654:	f7fe f8a3 	bl	800079e <I2C_CheckEvent>
 8002658:	2800      	cmp	r0, #0
 800265a:	d0f1      	beq.n	8002640 <i2c_receive+0x9c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 800265c:	2303      	movs	r3, #3
 800265e:	7263      	strb	r3, [r4, #9]
	for (i = 1; i < lim; i++) {
 8002660:	f04f 0801 	mov.w	r8, #1
		wirex->status = RECEIVE_BYTE_READY;
 8002664:	f04f 0908 	mov.w	r9, #8
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8002668:	e01c      	b.n	80026a4 <i2c_receive+0x100>
		wirex->status = RECEIVE_BYTE_READY;
 800266a:	f884 9009 	strb.w	r9, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800266e:	2506      	movs	r5, #6
 8002670:	e007      	b.n	8002682 <i2c_receive+0xde>
 8002672:	3d01      	subs	r5, #1
 8002674:	b2ad      	uxth	r5, r5
			if (wc == 0)
 8002676:	2d00      	cmp	r5, #0
 8002678:	d043      	beq.n	8002702 <i2c_receive+0x15e>
				return false;
			delay_us(667);
 800267a:	f240 209b 	movw	r0, #667	; 0x29b
 800267e:	f7ff fdd1 	bl	8002224 <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8002682:	6820      	ldr	r0, [r4, #0]
 8002684:	4923      	ldr	r1, [pc, #140]	; (8002714 <i2c_receive+0x170>)
 8002686:	f7fe f88a 	bl	800079e <I2C_CheckEvent>
 800268a:	2800      	cmp	r0, #0
 800268c:	d0f1      	beq.n	8002672 <i2c_receive+0xce>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	f7fe f82b 	bl	80006ea <I2C_ReceiveData>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8002694:	f108 0801 	add.w	r8, r8, #1
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 8002698:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 800269a:	f806 0b01 	strb.w	r0, [r6], #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800269e:	fa1f f888 	uxth.w	r8, r8
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
 80026a2:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 80026a4:	45b8      	cmp	r8, r7
 80026a6:	d3e0      	bcc.n	800266a <i2c_receive+0xc6>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 80026a8:	230a      	movs	r3, #10
 80026aa:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	f7fd ff9e 	bl	80005f0 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	f7fd ff86 	bl	80005c8 <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 80026bc:	230b      	movs	r3, #11
 80026be:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80026c0:	2506      	movs	r5, #6
 80026c2:	e006      	b.n	80026d2 <i2c_receive+0x12e>
 80026c4:	3d01      	subs	r5, #1
 80026c6:	b2ad      	uxth	r5, r5
		if (wc == 0)
 80026c8:	b1dd      	cbz	r5, 8002702 <i2c_receive+0x15e>
			return false;
		delay_us(667);
 80026ca:	f240 209b 	movw	r0, #667	; 0x29b
 80026ce:	f7ff fda9 	bl	8002224 <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	490f      	ldr	r1, [pc, #60]	; (8002714 <i2c_receive+0x170>)
 80026d6:	f7fe f862 	bl	800079e <I2C_CheckEvent>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d0f2      	beq.n	80026c4 <i2c_receive+0x120>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f7fe f803 	bl	80006ea <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80026e4:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80026e6:	7030      	strb	r0, [r6, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80026e8:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80026ea:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80026ec:	2101      	movs	r1, #1
 80026ee:	f7fd ff7f 	bl	80005f0 <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 80026f2:	25ff      	movs	r5, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 80026f4:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 80026f6:	7265      	strb	r5, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80026f8:	72a3      	strb	r3, [r4, #10]

	return true;
 80026fa:	e002      	b.n	8002702 <i2c_receive+0x15e>
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;
 80026fc:	4605      	mov	r5, r0
 80026fe:	e000      	b.n	8002702 <i2c_receive+0x15e>
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
 8002700:	4645      	mov	r5, r8
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 8002702:	4628      	mov	r0, r5
 8002704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002708:	00070084 	.word	0x00070084
 800270c:	00030001 	.word	0x00030001
 8002710:	00030002 	.word	0x00030002
 8002714:	00030040 	.word	0x00030040

08002718 <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 8002718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800271c:	4699      	mov	r9, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 800271e:	2301      	movs	r3, #1
 8002720:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 8002722:	4604      	mov	r4, r0
 8002724:	4615      	mov	r5, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8002726:	f7ff fef1 	bl	800250c <i2c_start>
 800272a:	b358      	cbz	r0, 8002784 <i2c_transmit+0x6c>
 800272c:	2700      	movs	r7, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 800272e:	f04f 0804 	mov.w	r8, #4
 8002732:	e017      	b.n	8002764 <i2c_transmit+0x4c>
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 8002734:	5de9      	ldrb	r1, [r5, r7]
 8002736:	6820      	ldr	r0, [r4, #0]
 8002738:	f7fd ffd5 	bl	80006e6 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 800273c:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 800273e:	f884 8009 	strb.w	r8, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8002742:	e006      	b.n	8002752 <i2c_transmit+0x3a>
 8002744:	3e01      	subs	r6, #1
 8002746:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8002748:	b1de      	cbz	r6, 8002782 <i2c_transmit+0x6a>
				return false;
			delay_us(667);
 800274a:	f240 209b 	movw	r0, #667	; 0x29b
 800274e:	f7ff fd69 	bl	8002224 <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <i2c_transmit+0x70>)
 8002756:	f7fe f822 	bl	800079e <I2C_CheckEvent>
 800275a:	2800      	cmp	r0, #0
 800275c:	d0f2      	beq.n	8002744 <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 800275e:	2305      	movs	r3, #5
 8002760:	7263      	strb	r3, [r4, #9]
 8002762:	3701      	adds	r7, #1
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8002764:	b2bb      	uxth	r3, r7
 8002766:	454b      	cmp	r3, r9
 8002768:	d3e4      	bcc.n	8002734 <i2c_transmit+0x1c>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 800276a:	2306      	movs	r3, #6
 800276c:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 800276e:	6820      	ldr	r0, [r4, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	f7fd ff29 	bl	80005c8 <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 8002776:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8002778:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 800277a:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 800277c:	72a3      	strb	r3, [r4, #10]

	return true;
 800277e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
			if (wc == 0)
				return false;
 8002782:	4630      	mov	r0, r6
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}
 8002784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002788:	00070084 	.word	0x00070084

0800278c <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8002794:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8002796:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8002798:	4682      	mov	sl, r0
 800279a:	460f      	mov	r7, r1
 800279c:	4690      	mov	r8, r2
 800279e:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 80027a2:	d105      	bne.n	80027b0 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80027a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027a8:	2101      	movs	r1, #1
 80027aa:	f7fe f995 	bl	8000ad8 <RCC_APB2PeriphClockCmd>
 80027ae:	e007      	b.n	80027c0 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <spi_begin+0x168>)
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d106      	bne.n	80027c4 <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80027b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027ba:	2101      	movs	r1, #1
 80027bc:	f7fe f980 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 80027c0:	2605      	movs	r6, #5
 80027c2:	e005      	b.n	80027d0 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80027c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027c8:	2101      	movs	r1, #1
 80027ca:	f7fe f9b5 	bl	8000b38 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 80027ce:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80027d0:	4638      	mov	r0, r7
 80027d2:	f7ff fd53 	bl	800227c <PinPort>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4638      	mov	r0, r7
 80027da:	9303      	str	r3, [sp, #12]
 80027dc:	f7ff fd56 	bl	800228c <PinBit>
 80027e0:	9b03      	ldr	r3, [sp, #12]
 80027e2:	2401      	movs	r4, #1
 80027e4:	2500      	movs	r5, #0
 80027e6:	4601      	mov	r1, r0
 80027e8:	2202      	movs	r2, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	9500      	str	r5, [sp, #0]
 80027f0:	9401      	str	r4, [sp, #4]
 80027f2:	f7ff fdb9 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80027f6:	4640      	mov	r0, r8
 80027f8:	f7ff fd40 	bl	800227c <PinPort>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4640      	mov	r0, r8
 8002800:	9303      	str	r3, [sp, #12]
 8002802:	f7ff fd43 	bl	800228c <PinBit>
 8002806:	9b03      	ldr	r3, [sp, #12]
 8002808:	9500      	str	r5, [sp, #0]
 800280a:	4601      	mov	r1, r0
 800280c:	2202      	movs	r2, #2
 800280e:	4618      	mov	r0, r3
 8002810:	4623      	mov	r3, r4
 8002812:	9401      	str	r4, [sp, #4]
 8002814:	f7ff fda8 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8002818:	4648      	mov	r0, r9
 800281a:	f7ff fd2f 	bl	800227c <PinPort>
 800281e:	4603      	mov	r3, r0
 8002820:	4648      	mov	r0, r9
 8002822:	9303      	str	r3, [sp, #12]
 8002824:	f7ff fd32 	bl	800228c <PinBit>
 8002828:	9b03      	ldr	r3, [sp, #12]
 800282a:	9500      	str	r5, [sp, #0]
 800282c:	4601      	mov	r1, r0
 800282e:	2202      	movs	r2, #2
 8002830:	4618      	mov	r0, r3
 8002832:	4623      	mov	r3, r4
 8002834:	9401      	str	r4, [sp, #4]
 8002836:	f7ff fd97 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 800283a:	4638      	mov	r0, r7
 800283c:	f7ff fd1e 	bl	800227c <PinPort>
 8002840:	4603      	mov	r3, r0
 8002842:	4638      	mov	r0, r7
 8002844:	9303      	str	r3, [sp, #12]
 8002846:	f7ff fd28 	bl	800229a <PinSource>
 800284a:	9b03      	ldr	r3, [sp, #12]
 800284c:	4601      	mov	r1, r0
 800284e:	4632      	mov	r2, r6
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fde8 	bl	8000426 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8002856:	4640      	mov	r0, r8
 8002858:	f7ff fd10 	bl	800227c <PinPort>
 800285c:	4607      	mov	r7, r0
 800285e:	4640      	mov	r0, r8
 8002860:	f7ff fd1b 	bl	800229a <PinSource>
 8002864:	4632      	mov	r2, r6
 8002866:	4601      	mov	r1, r0
 8002868:	4638      	mov	r0, r7
 800286a:	f7fd fddc 	bl	8000426 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 800286e:	4648      	mov	r0, r9
 8002870:	f7ff fd04 	bl	800227c <PinPort>
 8002874:	4607      	mov	r7, r0
 8002876:	4648      	mov	r0, r9
 8002878:	f7ff fd0f 	bl	800229a <PinSource>
 800287c:	4632      	mov	r2, r6
 800287e:	4601      	mov	r1, r0
 8002880:	4638      	mov	r0, r7
 8002882:	f7fd fdd0 	bl	8000426 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8002886:	4658      	mov	r0, fp
 8002888:	f7ff fcf8 	bl	800227c <PinPort>
 800288c:	4606      	mov	r6, r0
 800288e:	4658      	mov	r0, fp
 8002890:	f7ff fcfc 	bl	800228c <PinBit>
 8002894:	4622      	mov	r2, r4
 8002896:	4623      	mov	r3, r4
 8002898:	4601      	mov	r1, r0
 800289a:	4630      	mov	r0, r6
 800289c:	9500      	str	r5, [sp, #0]
 800289e:	9401      	str	r4, [sp, #4]
 80028a0:	f7ff fd62 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 80028a4:	4658      	mov	r0, fp
 80028a6:	4621      	mov	r1, r4
 80028a8:	f7ff fd20 	bl	80022ec <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80028ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028b0:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80028bc:	4650      	mov	r0, sl
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80028be:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 80028c0:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80028c2:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80028c6:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80028ca:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80028ce:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80028d2:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80028d6:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 80028da:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 80028de:	f7fe f9ff 	bl	8000ce0 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 80028e2:	4650      	mov	r0, sl
 80028e4:	4621      	mov	r1, r4
 80028e6:	f7fe fa96 	bl	8000e16 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 80028ea:	b00b      	add	sp, #44	; 0x2c
 80028ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f0:	40013000 	.word	0x40013000
 80028f4:	40003800 	.word	0x40003800

080028f8 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	4616      	mov	r6, r2
 80028fe:	460d      	mov	r5, r1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8002900:	e017      	b.n	8002932 <spi_transfer+0x3a>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8002902:	4620      	mov	r0, r4
 8002904:	2102      	movs	r1, #2
 8002906:	f7fe fb3c 	bl	8000f82 <SPI_I2S_GetFlagStatus>
 800290a:	2800      	cmp	r0, #0
 800290c:	d0f9      	beq.n	8002902 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 800290e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002912:	4620      	mov	r0, r4
 8002914:	f7fe faff 	bl	8000f16 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8002918:	4620      	mov	r0, r4
 800291a:	2101      	movs	r1, #1
 800291c:	f7fe fb31 	bl	8000f82 <SPI_I2S_GetFlagStatus>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0f9      	beq.n	8002918 <spi_transfer+0x20>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8002924:	4620      	mov	r0, r4
 8002926:	f7fe faf3 	bl	8000f10 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 800292a:	3e01      	subs	r6, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800292c:	f805 0c01 	strb.w	r0, [r5, #-1]

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8002930:	b2b6      	uxth	r6, r6
 8002932:	2e00      	cmp	r6, #0
 8002934:	d1e5      	bne.n	8002902 <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 8002936:	bd70      	pop	{r4, r5, r6, pc}

08002938 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8002938:	4b02      	ldr	r3, [pc, #8]	; (8002944 <SysTick_Handler+0xc>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	3201      	adds	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	200009cc 	.word	0x200009cc

08002948 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <SysTick_delay+0x10>)
 800294a:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	1a89      	subs	r1, r1, r2
 8002950:	4281      	cmp	r1, r0
 8002952:	d3fb      	bcc.n	800294c <SysTick_delay+0x4>
		;
}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200009cc 	.word	0x200009cc

0800295c <SysTick_Start>:

void SysTick_Start(void) {
 800295c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 800295e:	4668      	mov	r0, sp
 8002960:	f7fe f81a 	bl	8000998 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8002964:	9a01      	ldr	r2, [sp, #4]
 8002966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296a:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <SysTick_Start+0x2c>)
 8002970:	3a01      	subs	r2, #1
 8002972:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <SysTick_Start+0x30>)
 8002976:	21f0      	movs	r1, #240	; 0xf0
 8002978:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8002984:	b005      	add	sp, #20
 8002986:	bd00      	pop	{pc}
 8002988:	e000e010 	.word	0xe000e010
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8002990:	4b01      	ldr	r3, [pc, #4]	; (8002998 <SysTick_count+0x8>)
 8002992:	6818      	ldr	r0, [r3, #0]
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200009cc 	.word	0x200009cc

0800299c <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 80029a2:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 80029a6:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 80029aa:	4770      	bx	lr

080029ac <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 80029ac:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
}
 80029b0:	4770      	bx	lr

080029b2 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 80029b2:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 80029b6:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d105      	bne.n	80029ca <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 80029be:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ((r->head == r->tail) && (r->count > 0)) {
		return 1;
 80029c2:	3000      	adds	r0, #0
 80029c4:	bf18      	it	ne
 80029c6:	2001      	movne	r0, #1
 80029c8:	4770      	bx	lr
	}
	return 0;
 80029ca:	2000      	movs	r0, #0
}
 80029cc:	4770      	bx	lr

080029ce <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 80029ce:	b538      	push	{r3, r4, r5, lr}
 80029d0:	4604      	mov	r4, r0
 80029d2:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 80029d4:	f7ff ffed 	bl	80029b2 <buffer_is_full>
 80029d8:	b9b0      	cbnz	r0, 8002a08 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 80029da:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 80029de:	b21a      	sxth	r2, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 80029e6:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 80029ea:	3201      	adds	r2, #1
 80029ec:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <buffer_enque+0x42>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da03      	bge.n	8002a02 <buffer_enque+0x34>
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a00:	3301      	adds	r3, #1
 8002a02:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8002a06:	e001      	b.n	8002a0c <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8002a08:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	8000007f 	.word	0x8000007f

08002a14 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002a14:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8002a18:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8002a1a:	b1a1      	cbz	r1, 8002a46 <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8002a1c:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8002a20:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8002a22:	b218      	sxth	r0, r3
 8002a24:	3301      	adds	r3, #1
	r->count--;
 8002a26:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8002a2a:	b219      	sxth	r1, r3
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8002a2e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8002a32:	400b      	ands	r3, r1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da03      	bge.n	8002a40 <buffer_deque+0x2c>
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 8002a44:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8002a46:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8002a4a:	4770      	bx	lr
 8002a4c:	8000007f 	.word	0x8000007f

08002a50 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8002a50:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8002a54:	b123      	cbz	r3, 8002a60 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8002a56:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8002a5a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8002a5e:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8002a60:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8002a64:	4770      	bx	lr

08002a66 <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8002a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6a:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <usart_begin+0x1ca>)
 8002a6e:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8002a70:	b089      	sub	sp, #36	; 0x24
 8002a72:	4604      	mov	r4, r0
 8002a74:	4688      	mov	r8, r1
 8002a76:	4691      	mov	r9, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8002a78:	d10d      	bne.n	8002a96 <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002a7a:	2010      	movs	r0, #16
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	f7fe f82b 	bl	8000ad8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8002a82:	2300      	movs	r3, #0
 8002a84:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8002a86:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <usart_begin+0x1ce>)
 8002a88:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8002a8a:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <usart_begin+0x1d2>)
 8002a8c:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8002a90:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8002a92:	60e3      	str	r3, [r4, #12]
 8002a94:	e010      	b.n	8002ab8 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8002a96:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <usart_begin+0x1da>)
 8002a98:	4298      	cmp	r0, r3
 8002a9a:	d10f      	bne.n	8002abc <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002a9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	f7fe f80d 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <usart_begin+0x1de>)
 8002aac:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <usart_begin+0x1e2>)
 8002ab0:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8002ab2:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8002ab4:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8002ab6:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8002ab8:	2607      	movs	r6, #7
 8002aba:	e043      	b.n	8002b44 <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <usart_begin+0x1ea>)
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	d10e      	bne.n	8002ae0 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8002ac2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f7fd fffa 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8002acc:	2302      	movs	r3, #2
 8002ace:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8002ad0:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <usart_begin+0x1ee>)
 8002ad2:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8002ad4:	4b60      	ldr	r3, [pc, #384]	; (8002c58 <usart_begin+0x1f2>)
 8002ad6:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8002ad8:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8002ada:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8002adc:	60e3      	str	r3, [r4, #12]
 8002ade:	e7eb      	b.n	8002ab8 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8002ae0:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <usart_begin+0x1fa>)
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d10e      	bne.n	8002b04 <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8002ae6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002aea:	2101      	movs	r1, #1
 8002aec:	f7fd ffe8 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8002af0:	2303      	movs	r3, #3
 8002af2:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8002af4:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <usart_begin+0x1fe>)
 8002af6:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <usart_begin+0x202>)
 8002afa:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8002afc:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8002afe:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8002b00:	60e3      	str	r3, [r4, #12]
 8002b02:	e01e      	b.n	8002b42 <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <usart_begin+0x20a>)
 8002b06:	4298      	cmp	r0, r3
 8002b08:	d10e      	bne.n	8002b28 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f7fd ffd6 	bl	8000ac0 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8002b14:	2304      	movs	r3, #4
 8002b16:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <usart_begin+0x20e>)
 8002b1a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <usart_begin+0x212>)
 8002b1e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8002b22:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8002b24:	60e3      	str	r3, [r4, #12]
 8002b26:	e00c      	b.n	8002b42 <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b28:	2020      	movs	r0, #32
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	f7fd ffd4 	bl	8000ad8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8002b30:	2305      	movs	r3, #5
 8002b32:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8002b34:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <usart_begin+0x21a>)
 8002b36:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8002b38:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <usart_begin+0x21e>)
 8002b3a:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8002b3c:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8002b3e:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8002b40:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8002b42:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002b44:	4640      	mov	r0, r8
 8002b46:	f7ff fb99 	bl	800227c <PinPort>
 8002b4a:	4683      	mov	fp, r0
 8002b4c:	4640      	mov	r0, r8
 8002b4e:	f7ff fb9d 	bl	800228c <PinBit>
 8002b52:	2202      	movs	r2, #2
 8002b54:	2500      	movs	r5, #0
 8002b56:	4601      	mov	r1, r0
 8002b58:	4613      	mov	r3, r2
 8002b5a:	4658      	mov	r0, fp
 8002b5c:	9500      	str	r5, [sp, #0]
 8002b5e:	9501      	str	r5, [sp, #4]
 8002b60:	f7ff fc02 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8002b64:	4648      	mov	r0, r9
 8002b66:	f7ff fb89 	bl	800227c <PinPort>
 8002b6a:	4683      	mov	fp, r0
 8002b6c:	4648      	mov	r0, r9
 8002b6e:	f7ff fb8d 	bl	800228c <PinBit>
 8002b72:	2202      	movs	r2, #2
 8002b74:	4613      	mov	r3, r2
 8002b76:	4601      	mov	r1, r0
 8002b78:	4658      	mov	r0, fp
 8002b7a:	9500      	str	r5, [sp, #0]
 8002b7c:	9501      	str	r5, [sp, #4]
 8002b7e:	f7ff fbf3 	bl	8002368 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8002b82:	4640      	mov	r0, r8
 8002b84:	f7ff fb7a 	bl	800227c <PinPort>
 8002b88:	4683      	mov	fp, r0
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	f7ff fb85 	bl	800229a <PinSource>
 8002b90:	4632      	mov	r2, r6
 8002b92:	4601      	mov	r1, r0
 8002b94:	4658      	mov	r0, fp
 8002b96:	f7fd fc46 	bl	8000426 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8002b9a:	4648      	mov	r0, r9
 8002b9c:	f7ff fb6e 	bl	800227c <PinPort>
 8002ba0:	4680      	mov	r8, r0
 8002ba2:	4648      	mov	r0, r9
 8002ba4:	f7ff fb79 	bl	800229a <PinSource>
 8002ba8:	4632      	mov	r2, r6
 8002baa:	4601      	mov	r1, r0
 8002bac:	4640      	mov	r0, r8
 8002bae:	f7fd fc3a 	bl	8000426 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8002bb2:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8002bb4:	eb0d 0103 	add.w	r1, sp, r3
 8002bb8:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8002bba:	f8ad 3016 	strh.w	r3, [sp, #22]
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8002bbe:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8002bc2:	f8ad 5010 	strh.w	r5, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8002bc6:	f8ad 5012 	strh.w	r5, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8002bca:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8002bce:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8002bd2:	f7fe ffd9 	bl	8001b88 <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8002bd6:	6860      	ldr	r0, [r4, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f240 5125 	movw	r1, #1317	; 0x525
 8002bde:	f7ff f911 	bl	8001e04 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8002be2:	6860      	ldr	r0, [r4, #4]
 8002be4:	f240 7127 	movw	r1, #1831	; 0x727
 8002be8:	462a      	mov	r2, r5
 8002bea:	f7ff f90b 	bl	8001e04 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8002bee:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8002bf0:	a807      	add	r0, sp, #28
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8002bf2:	f88d 701c 	strb.w	r7, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8002bf6:	f88d 501d 	strb.w	r5, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8002bfa:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8002bfe:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8002c02:	f7fd facb 	bl	800019c <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8002c06:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c08:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002c0a:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8002c0e:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8002c12:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8002c16:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c18:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002c1a:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8002c1e:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8002c22:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8002c26:	f7ff f82c 	bl	8001c82 <USART_Cmd>
}
 8002c2a:	b009      	add	sp, #36	; 0x24
 8002c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c30:	20001004 	.word	0x20001004
 8002c34:	40011000 	.word	0x40011000
 8002c38:	20001034 	.word	0x20001034
 8002c3c:	200009e0 	.word	0x200009e0
 8002c40:	20001668 	.word	0x20001668
 8002c44:	40004400 	.word	0x40004400
 8002c48:	2000113a 	.word	0x2000113a
 8002c4c:	20000ae6 	.word	0x20000ae6
 8002c50:	20001014 	.word	0x20001014
 8002c54:	40004800 	.word	0x40004800
 8002c58:	20001240 	.word	0x20001240
 8002c5c:	20000bec 	.word	0x20000bec
 8002c60:	20001658 	.word	0x20001658
 8002c64:	40004c00 	.word	0x40004c00
 8002c68:	20001346 	.word	0x20001346
 8002c6c:	20000cf2 	.word	0x20000cf2
 8002c70:	200009d0 	.word	0x200009d0
 8002c74:	40005000 	.word	0x40005000
 8002c78:	2000144c 	.word	0x2000144c
 8002c7c:	20000df8 	.word	0x20000df8
 8002c80:	40011400 	.word	0x40011400
 8002c84:	20001552 	.word	0x20001552
 8002c88:	20000efe 	.word	0x20000efe

08002c8c <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8002c92:	6860      	ldr	r0, [r4, #4]
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	f7ff f8ce 	bl	8001e36 <USART_GetFlagStatus>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0f9      	beq.n	8002c92 <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8002c9e:	6860      	ldr	r0, [r4, #4]
 8002ca0:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8002ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8002ca6:	f7ff b819 	b.w	8001cdc <USART_SendData>

08002caa <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8002caa:	b570      	push	{r4, r5, r6, lr}
 8002cac:	4604      	mov	r4, r0
 8002cae:	460d      	mov	r5, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8002cb0:	2604      	movs	r6, #4
 8002cb2:	e003      	b.n	8002cbc <usart_write+0x12>
		delay_us(667);
 8002cb4:	f240 209b 	movw	r0, #667	; 0x29b
 8002cb8:	f7ff fab4 	bl	8002224 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8002cbc:	68e0      	ldr	r0, [r4, #12]
 8002cbe:	f7ff fe78 	bl	80029b2 <buffer_is_full>
 8002cc2:	b118      	cbz	r0, 8002ccc <usart_write+0x22>
 8002cc4:	3e01      	subs	r6, #1
 8002cc6:	b2b6      	uxth	r6, r6
 8002cc8:	2e00      	cmp	r6, #0
 8002cca:	d1f3      	bne.n	8002cb4 <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	6860      	ldr	r0, [r4, #4]
 8002cd0:	f240 7127 	movw	r1, #1831	; 0x727
 8002cd4:	f7ff f896 	bl	8001e04 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8002cd8:	4629      	mov	r1, r5
 8002cda:	68e0      	ldr	r0, [r4, #12]
 8002cdc:	f7ff fe77 	bl	80029ce <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8002ce0:	6860      	ldr	r0, [r4, #4]
 8002ce2:	f240 7127 	movw	r1, #1831	; 0x727
 8002ce6:	2201      	movs	r2, #1
}
 8002ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8002cec:	f7ff b88a 	b.w	8001e04 <USART_ITConfig>

08002cf0 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4605      	mov	r5, r0
 8002cf4:	460c      	mov	r4, r1
	while (*s)
 8002cf6:	e002      	b.n	8002cfe <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7ff ffd6 	bl	8002caa <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8002cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d1f8      	bne.n	8002cf8 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8002d06:	bd38      	pop	{r3, r4, r5, pc}

08002d08 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8002d08:	f7fe bfec 	b.w	8001ce4 <USART_ReceiveData>

08002d0c <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8002d0c:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8002d0e:	6880      	ldr	r0, [r0, #8]
 8002d10:	f7ff fe80 	bl	8002a14 <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
 8002d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d18:	4298      	cmp	r0, r3
 8002d1a:	bf08      	it	eq
 8002d1c:	2000      	moveq	r0, #0
	return w;
}
 8002d1e:	bd08      	pop	{r3, pc}

08002d20 <usart_flush>:

void usart_flush(Serial * usx) {
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8002d24:	f7ff fa68 	bl	80021f8 <millis>
 8002d28:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8002d2c:	e003      	b.n	8002d36 <usart_flush+0x16>
		if (millis() > wtill)
 8002d2e:	f7ff fa63 	bl	80021f8 <millis>
 8002d32:	42a8      	cmp	r0, r5
 8002d34:	d804      	bhi.n	8002d40 <usart_flush+0x20>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002d36:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8002d38:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f6      	bne.n	8002d2e <usart_flush+0xe>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8002d40:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8002d48:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 8002d4c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
}
 8002d50:	bd38      	pop	{r3, r4, r5, pc}

08002d52 <usart_peek>:

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 8002d52:	6883      	ldr	r3, [r0, #8]
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8002d54:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002d58:	b122      	cbz	r2, 8002d64 <usart_peek+0x12>
		return 0xffff;
	return r->buf[r->tail];
 8002d5a:	f9b3 2102 	ldrsh.w	r2, [r3, #258]	; 0x102
 8002d5e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002d62:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8002d64:	f64f 70ff 	movw	r0, #65535	; 0xffff

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}
 8002d68:	4770      	bx	lr

08002d6a <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8002d6a:	6883      	ldr	r3, [r0, #8]
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
 8002d6c:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
	//return buffer_count(&rxring[usx->usid]);
}
 8002d70:	4770      	bx	lr

08002d72 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8002d72:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8002d74:	4818      	ldr	r0, [pc, #96]	; (8002dd8 <USART1_IRQHandler+0x66>)
 8002d76:	f240 5125 	movw	r1, #1317	; 0x525
 8002d7a:	f7ff f866 	bl	8001e4a <USART_GetITStatus>
 8002d7e:	b140      	cbz	r0, 8002d92 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <USART1_IRQHandler+0x6a>)
 8002d82:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <USART1_IRQHandler+0x66>)
 8002d84:	689c      	ldr	r4, [r3, #8]
 8002d86:	f7fe ffad 	bl	8001ce4 <USART_ReceiveData>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fe1e 	bl	80029ce <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <USART1_IRQHandler+0x66>)
 8002d94:	f240 7127 	movw	r1, #1831	; 0x727
 8002d98:	f7ff f857 	bl	8001e4a <USART_GetITStatus>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d019      	beq.n	8002dd4 <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <USART1_IRQHandler+0x6a>)
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8002da8:	b95a      	cbnz	r2, 8002dc2 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8002daa:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <USART1_IRQHandler+0x66>)
 8002dac:	f240 7127 	movw	r1, #1831	; 0x727
 8002db0:	f7ff f828 	bl	8001e04 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <USART1_IRQHandler+0x66>)
 8002db6:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8002dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8002dbe:	f7ff b864 	b.w	8001e8a <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8002dc2:	68d8      	ldr	r0, [r3, #12]
 8002dc4:	f7ff fe26 	bl	8002a14 <buffer_deque>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <USART1_IRQHandler+0x66>)
		}
	}
}
 8002dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8002dd0:	f7fe bf84 	b.w	8001cdc <USART_SendData>
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	20001004 	.word	0x20001004

08002de0 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8002de0:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8002de2:	4818      	ldr	r0, [pc, #96]	; (8002e44 <USART2_IRQHandler+0x64>)
 8002de4:	f240 5125 	movw	r1, #1317	; 0x525
 8002de8:	f7ff f82f 	bl	8001e4a <USART_GetITStatus>
 8002dec:	b140      	cbz	r0, 8002e00 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <USART2_IRQHandler+0x68>)
 8002df0:	4814      	ldr	r0, [pc, #80]	; (8002e44 <USART2_IRQHandler+0x64>)
 8002df2:	689c      	ldr	r4, [r3, #8]
 8002df4:	f7fe ff76 	bl	8001ce4 <USART_ReceiveData>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7ff fde7 	bl	80029ce <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8002e00:	4810      	ldr	r0, [pc, #64]	; (8002e44 <USART2_IRQHandler+0x64>)
 8002e02:	f240 7127 	movw	r1, #1831	; 0x727
 8002e06:	f7ff f820 	bl	8001e4a <USART_GetITStatus>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d018      	beq.n	8002e40 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <USART2_IRQHandler+0x68>)
 8002e10:	68d8      	ldr	r0, [r3, #12]
 8002e12:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002e16:	b95a      	cbnz	r2, 8002e30 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <USART2_IRQHandler+0x64>)
 8002e1a:	f240 7127 	movw	r1, #1831	; 0x727
 8002e1e:	f7fe fff1 	bl	8001e04 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8002e22:	4808      	ldr	r0, [pc, #32]	; (8002e44 <USART2_IRQHandler+0x64>)
 8002e24:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 8002e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8002e2c:	f7ff b82d 	b.w	8001e8a <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8002e30:	f7ff fdf0 	bl	8002a14 <buffer_deque>
 8002e34:	4601      	mov	r1, r0
 8002e36:	4803      	ldr	r0, [pc, #12]	; (8002e44 <USART2_IRQHandler+0x64>)
		}
	}
}
 8002e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 8002e3c:	f7fe bf4e 	b.w	8001cdc <USART_SendData>
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	bf00      	nop
 8002e44:	40004400 	.word	0x40004400
 8002e48:	20001668 	.word	0x20001668

08002e4c <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8002e4c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8002e4e:	4818      	ldr	r0, [pc, #96]	; (8002eb0 <USART3_IRQHandler+0x64>)
 8002e50:	f240 5125 	movw	r1, #1317	; 0x525
 8002e54:	f7fe fff9 	bl	8001e4a <USART_GetITStatus>
 8002e58:	b140      	cbz	r0, 8002e6c <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <USART3_IRQHandler+0x68>)
 8002e5c:	4814      	ldr	r0, [pc, #80]	; (8002eb0 <USART3_IRQHandler+0x64>)
 8002e5e:	689c      	ldr	r4, [r3, #8]
 8002e60:	f7fe ff40 	bl	8001ce4 <USART_ReceiveData>
 8002e64:	4601      	mov	r1, r0
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff fdb1 	bl	80029ce <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8002e6c:	4810      	ldr	r0, [pc, #64]	; (8002eb0 <USART3_IRQHandler+0x64>)
 8002e6e:	f240 7127 	movw	r1, #1831	; 0x727
 8002e72:	f7fe ffea 	bl	8001e4a <USART_GetITStatus>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d018      	beq.n	8002eac <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <USART3_IRQHandler+0x68>)
 8002e7c:	68d8      	ldr	r0, [r3, #12]
 8002e7e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002e82:	b95a      	cbnz	r2, 8002e9c <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8002e84:	480a      	ldr	r0, [pc, #40]	; (8002eb0 <USART3_IRQHandler+0x64>)
 8002e86:	f240 7127 	movw	r1, #1831	; 0x727
 8002e8a:	f7fe ffbb 	bl	8001e04 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8002e8e:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <USART3_IRQHandler+0x64>)
 8002e90:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8002e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8002e98:	f7fe bff7 	b.w	8001e8a <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8002e9c:	f7ff fdba 	bl	8002a14 <buffer_deque>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4803      	ldr	r0, [pc, #12]	; (8002eb0 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8002ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 8002ea8:	f7fe bf18 	b.w	8001cdc <USART_SendData>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	bf00      	nop
 8002eb0:	40004800 	.word	0x40004800
 8002eb4:	20001014 	.word	0x20001014

08002eb8 <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 8002eb8:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8002eba:	4818      	ldr	r0, [pc, #96]	; (8002f1c <UART4_IRQHandler+0x64>)
 8002ebc:	f240 5125 	movw	r1, #1317	; 0x525
 8002ec0:	f7fe ffc3 	bl	8001e4a <USART_GetITStatus>
 8002ec4:	b140      	cbz	r0, 8002ed8 <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <UART4_IRQHandler+0x68>)
 8002ec8:	4814      	ldr	r0, [pc, #80]	; (8002f1c <UART4_IRQHandler+0x64>)
 8002eca:	689c      	ldr	r4, [r3, #8]
 8002ecc:	f7fe ff0a 	bl	8001ce4 <USART_ReceiveData>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7ff fd7b 	bl	80029ce <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8002ed8:	4810      	ldr	r0, [pc, #64]	; (8002f1c <UART4_IRQHandler+0x64>)
 8002eda:	f240 7127 	movw	r1, #1831	; 0x727
 8002ede:	f7fe ffb4 	bl	8001e4a <USART_GetITStatus>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d018      	beq.n	8002f18 <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <UART4_IRQHandler+0x68>)
 8002ee8:	68d8      	ldr	r0, [r3, #12]
 8002eea:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8002eee:	b95a      	cbnz	r2, 8002f08 <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <UART4_IRQHandler+0x64>)
 8002ef2:	f240 7127 	movw	r1, #1831	; 0x727
 8002ef6:	f7fe ff85 	bl	8001e04 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8002efa:	4808      	ldr	r0, [pc, #32]	; (8002f1c <UART4_IRQHandler+0x64>)
 8002efc:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8002f04:	f7fe bfc1 	b.w	8001e8a <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8002f08:	f7ff fd84 	bl	8002a14 <buffer_deque>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4803      	ldr	r0, [pc, #12]	; (8002f1c <UART4_IRQHandler+0x64>)
		}
	}
}
 8002f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 8002f14:	f7fe bee2 	b.w	8001cdc <USART_SendData>
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40004c00 	.word	0x40004c00
 8002f20:	20001658 	.word	0x20001658

08002f24 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	4770      	bx	lr

08002f2a <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002f2a:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <_execve+0xe>)
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20001688 	.word	0x20001688

08002f3c <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002f3c:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <_fork+0xc>)
 8002f3e:	220b      	movs	r2, #11
 8002f40:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	4770      	bx	lr
 8002f48:	20001688 	.word	0x20001688

08002f4c <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f50:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f52:	2000      	movs	r0, #0
 8002f54:	4770      	bx	lr

08002f56 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f56:	2001      	movs	r0, #1
 8002f58:	4770      	bx	lr

08002f5a <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d904      	bls.n	8002f68 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <_isatty+0x12>)
 8002f60:	2209      	movs	r2, #9
 8002f62:	601a      	str	r2, [r3, #0]
		return 0;
 8002f64:	2000      	movs	r0, #0
 8002f66:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f68:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f6a:	4770      	bx	lr
 8002f6c:	20001688 	.word	0x20001688

08002f70 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <_kill+0xc>)
 8002f72:	2216      	movs	r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f76:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7a:	4770      	bx	lr
 8002f7c:	20001688 	.word	0x20001688

08002f80 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <_link+0xc>)
 8002f82:	221f      	movs	r2, #31
 8002f84:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	4770      	bx	lr
 8002f8c:	20001688 	.word	0x20001688

08002f90 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f90:	2000      	movs	r0, #0
 8002f92:	4770      	bx	lr

08002f94 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f94:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f96:	b138      	cbz	r0, 8002fa8 <_read+0x14>
 8002f98:	e00d      	b.n	8002fb6 <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f9a:	881d      	ldrh	r5, [r3, #0]
 8002f9c:	06ad      	lsls	r5, r5, #26
 8002f9e:	d5fc      	bpl.n	8002f9a <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002fa0:	88a5      	ldrh	r5, [r4, #4]
 8002fa2:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	e001      	b.n	8002fac <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <_read+0x30>)
 8002faa:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002fac:	4290      	cmp	r0, r2
 8002fae:	dbf4      	blt.n	8002f9a <_read+0x6>
 8002fb0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002fb4:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <_read+0x34>)
 8002fb8:	2209      	movs	r2, #9
 8002fba:	601a      	str	r2, [r3, #0]
				return -1;
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
			}
	return num;
}
 8002fc0:	bd30      	pop	{r4, r5, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40011000 	.word	0x40011000
 8002fc8:	20001688 	.word	0x20001688

08002fcc <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	4770      	bx	lr

08002fd6 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	4770      	bx	lr

08002fdc <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <_unlink+0xc>)
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe6:	4770      	bx	lr
 8002fe8:	20001688 	.word	0x20001688

08002fec <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <_wait+0xc>)
 8002fee:	220a      	movs	r2, #10
 8002ff0:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	4770      	bx	lr
 8002ff8:	20001688 	.word	0x20001688

08002ffc <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002ffc:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002ffe:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8003000:	d009      	beq.n	8003016 <_write+0x1a>
 8003002:	2802      	cmp	r0, #2
 8003004:	d11a      	bne.n	800303c <_write+0x40>
 8003006:	e013      	b.n	8003030 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003008:	8805      	ldrh	r5, [r0, #0]
 800300a:	066d      	lsls	r5, r5, #25
 800300c:	d5fc      	bpl.n	8003008 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800300e:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003010:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003012:	80a5      	strh	r5, [r4, #4]
 8003014:	e002      	b.n	800301c <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003018:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800301a:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800301c:	4293      	cmp	r3, r2
 800301e:	dbf3      	blt.n	8003008 <_write+0xc>
 8003020:	e011      	b.n	8003046 <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003022:	8805      	ldrh	r5, [r0, #0]
 8003024:	066d      	lsls	r5, r5, #25
 8003026:	d5fc      	bpl.n	8003022 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003028:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800302a:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800302c:	80a5      	strh	r5, [r4, #4]
 800302e:	e002      	b.n	8003036 <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003032:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003034:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003036:	4293      	cmp	r3, r2
 8003038:	dbf3      	blt.n	8003022 <_write+0x26>
 800303a:	e004      	b.n	8003046 <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <_write+0x54>)
 800303e:	2209      	movs	r2, #9
 8003040:	601a      	str	r2, [r3, #0]
				return -1;
 8003042:	f04f 32ff 	mov.w	r2, #4294967295
			}
	return len;
}
 8003046:	4610      	mov	r0, r2
 8003048:	bd30      	pop	{r4, r5, pc}
 800304a:	bf00      	nop
 800304c:	40011000 	.word	0x40011000
 8003050:	20001688 	.word	0x20001688

08003054 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8003054:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <_sbrk+0x38>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	b90a      	cbnz	r2, 8003060 <_sbrk+0xc>
		heap_end = &_ebss;
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <_sbrk+0x3c>)
 800305e:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003060:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003062:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8003066:	1818      	adds	r0, r3, r0
 8003068:	4290      	cmp	r0, r2
 800306a:	d90a      	bls.n	8003082 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 800306c:	2219      	movs	r2, #25
 800306e:	2002      	movs	r0, #2
 8003070:	4908      	ldr	r1, [pc, #32]	; (8003094 <_sbrk+0x40>)
 8003072:	f7ff ffc3 	bl	8002ffc <_write>
		errno = ENOMEM;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x44>)
 8003078:	220c      	movs	r2, #12
 800307a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	e001      	b.n	8003086 <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8003082:	4a02      	ldr	r2, [pc, #8]	; (800308c <_sbrk+0x38>)
 8003084:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8003086:	4618      	mov	r0, r3
 8003088:	bd08      	pop	{r3, pc}
 800308a:	bf00      	nop
 800308c:	20000958 	.word	0x20000958
 8003090:	2000168c 	.word	0x2000168c
 8003094:	0800a23b 	.word	0x0800a23b
 8003098:	20001688 	.word	0x20001688

0800309c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 800309c:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800309e:	2001      	movs	r0, #1
 80030a0:	4902      	ldr	r1, [pc, #8]	; (80030ac <_exit+0x10>)
 80030a2:	2204      	movs	r2, #4
 80030a4:	f7ff ffaa 	bl	8002ffc <_write>
 80030a8:	e7fe      	b.n	80030a8 <_exit+0xc>
 80030aa:	bf00      	nop
 80030ac:	0800a255 	.word	0x0800a255
 80030b0:	0800a544 	.word	0x0800a544
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000958 	.word	0x20000958
 80030bc:	20000958 	.word	0x20000958
 80030c0:	2000168c 	.word	0x2000168c

080030c4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80030c4:	4770      	bx	lr

080030c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030c6:	e7fe      	b.n	80030c6 <HardFault_Handler>

080030c8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler>

080030ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030ca:	e7fe      	b.n	80030ca <BusFault_Handler>

080030cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030cc:	e7fe      	b.n	80030cc <UsageFault_Handler>

080030ce <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80030d0:	4770      	bx	lr

080030d2 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80030d2:	4770      	bx	lr

080030d4 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <SystemInit+0xd0>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80030e8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80030ec:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030ee:	492e      	ldr	r1, [pc, #184]	; (80031a8 <SystemInit+0xd4>)
 80030f0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030f2:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030f6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030fa:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030fc:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030fe:	9200      	str	r2, [sp, #0]
 8003100:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003108:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003110:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8003112:	9a00      	ldr	r2, [sp, #0]
 8003114:	3201      	adds	r2, #1
 8003116:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003118:	9a01      	ldr	r2, [sp, #4]
 800311a:	b91a      	cbnz	r2, 8003124 <SystemInit+0x50>
 800311c:	9a00      	ldr	r2, [sp, #0]
 800311e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003122:	d1f2      	bne.n	800310a <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <SystemInit+0xd0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003130:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d12e      	bne.n	8003196 <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <SystemInit+0xd0>)
 800313a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <SystemInit+0xd8>)
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800314a:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003156:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800315e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <SystemInit+0xdc>)
 8003162:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800316a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <SystemInit+0xd0>)
 8003170:	0189      	lsls	r1, r1, #6
 8003172:	d5fb      	bpl.n	800316c <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <SystemInit+0xe0>)
 8003176:	f240 6105 	movw	r1, #1541	; 0x605
 800317a:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800317c:	6893      	ldr	r3, [r2, #8]
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800318c:	6893      	ldr	r3, [r2, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d1fa      	bne.n	800318c <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SystemInit+0xe4>)
 8003198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800319c:	609a      	str	r2, [r3, #8]
#endif
}
 800319e:	b002      	add	sp, #8
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	24003010 	.word	0x24003010
 80031ac:	40007000 	.word	0x40007000
 80031b0:	07405419 	.word	0x07405419
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <SystemCoreClockUpdate+0x64>)
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <SystemCoreClockUpdate+0x68>)
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 80031c6:	2904      	cmp	r1, #4
 80031c8:	d003      	beq.n	80031d2 <SystemCoreClockUpdate+0x16>
 80031ca:	2908      	cmp	r1, #8
 80031cc:	d003      	beq.n	80031d6 <SystemCoreClockUpdate+0x1a>
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <SystemCoreClockUpdate+0x6c>)
 80031d0:	e019      	b.n	8003206 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <SystemCoreClockUpdate+0x70>)
 80031d4:	e017      	b.n	8003206 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031d6:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80031da:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	bf14      	ite	ne
 80031e2:	4b12      	ldrne	r3, [pc, #72]	; (800322c <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031e4:	4b10      	ldreq	r3, [pc, #64]	; (8003228 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031ea:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <SystemCoreClockUpdate+0x64>)
 80031f0:	6852      	ldr	r2, [r2, #4]
 80031f2:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031fa:	3201      	adds	r2, #1
 80031fc:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031fe:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 8003200:	fbb3 f3f2 	udiv	r3, r3, r2
 8003204:	4a07      	ldr	r2, [pc, #28]	; (8003224 <SystemCoreClockUpdate+0x68>)
 8003206:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <SystemCoreClockUpdate+0x64>)
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <SystemCoreClockUpdate+0x68>)
 800320e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003212:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003214:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003216:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003218:	fa21 f202 	lsr.w	r2, r1, r2
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	4770      	bx	lr
 8003220:	40023800 	.word	0x40023800
 8003224:	20000088 	.word	0x20000088
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <__aeabi_drsub>:
 8003230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003234:	e002      	b.n	800323c <__adddf3>
 8003236:	bf00      	nop

08003238 <__aeabi_dsub>:
 8003238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800323c <__adddf3>:
 800323c:	b530      	push	{r4, r5, lr}
 800323e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003246:	ea94 0f05 	teq	r4, r5
 800324a:	bf08      	it	eq
 800324c:	ea90 0f02 	teqeq	r0, r2
 8003250:	bf1f      	itttt	ne
 8003252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800325a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800325e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003262:	f000 80e2 	beq.w	800342a <__adddf3+0x1ee>
 8003266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800326a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800326e:	bfb8      	it	lt
 8003270:	426d      	neglt	r5, r5
 8003272:	dd0c      	ble.n	800328e <__adddf3+0x52>
 8003274:	442c      	add	r4, r5
 8003276:	ea80 0202 	eor.w	r2, r0, r2
 800327a:	ea81 0303 	eor.w	r3, r1, r3
 800327e:	ea82 0000 	eor.w	r0, r2, r0
 8003282:	ea83 0101 	eor.w	r1, r3, r1
 8003286:	ea80 0202 	eor.w	r2, r0, r2
 800328a:	ea81 0303 	eor.w	r3, r1, r3
 800328e:	2d36      	cmp	r5, #54	; 0x36
 8003290:	bf88      	it	hi
 8003292:	bd30      	pophi	{r4, r5, pc}
 8003294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800329c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80032a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80032a4:	d002      	beq.n	80032ac <__adddf3+0x70>
 80032a6:	4240      	negs	r0, r0
 80032a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80032ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80032b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80032b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80032b8:	d002      	beq.n	80032c0 <__adddf3+0x84>
 80032ba:	4252      	negs	r2, r2
 80032bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80032c0:	ea94 0f05 	teq	r4, r5
 80032c4:	f000 80a7 	beq.w	8003416 <__adddf3+0x1da>
 80032c8:	f1a4 0401 	sub.w	r4, r4, #1
 80032cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80032d0:	db0d      	blt.n	80032ee <__adddf3+0xb2>
 80032d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80032d6:	fa22 f205 	lsr.w	r2, r2, r5
 80032da:	1880      	adds	r0, r0, r2
 80032dc:	f141 0100 	adc.w	r1, r1, #0
 80032e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80032e4:	1880      	adds	r0, r0, r2
 80032e6:	fa43 f305 	asr.w	r3, r3, r5
 80032ea:	4159      	adcs	r1, r3
 80032ec:	e00e      	b.n	800330c <__adddf3+0xd0>
 80032ee:	f1a5 0520 	sub.w	r5, r5, #32
 80032f2:	f10e 0e20 	add.w	lr, lr, #32
 80032f6:	2a01      	cmp	r2, #1
 80032f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80032fc:	bf28      	it	cs
 80032fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003302:	fa43 f305 	asr.w	r3, r3, r5
 8003306:	18c0      	adds	r0, r0, r3
 8003308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800330c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003310:	d507      	bpl.n	8003322 <__adddf3+0xe6>
 8003312:	f04f 0e00 	mov.w	lr, #0
 8003316:	f1dc 0c00 	rsbs	ip, ip, #0
 800331a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800331e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003326:	d31b      	bcc.n	8003360 <__adddf3+0x124>
 8003328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800332c:	d30c      	bcc.n	8003348 <__adddf3+0x10c>
 800332e:	0849      	lsrs	r1, r1, #1
 8003330:	ea5f 0030 	movs.w	r0, r0, rrx
 8003334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003338:	f104 0401 	add.w	r4, r4, #1
 800333c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003344:	f080 809a 	bcs.w	800347c <__adddf3+0x240>
 8003348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800334c:	bf08      	it	eq
 800334e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003352:	f150 0000 	adcs.w	r0, r0, #0
 8003356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800335a:	ea41 0105 	orr.w	r1, r1, r5
 800335e:	bd30      	pop	{r4, r5, pc}
 8003360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003364:	4140      	adcs	r0, r0
 8003366:	eb41 0101 	adc.w	r1, r1, r1
 800336a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800336e:	f1a4 0401 	sub.w	r4, r4, #1
 8003372:	d1e9      	bne.n	8003348 <__adddf3+0x10c>
 8003374:	f091 0f00 	teq	r1, #0
 8003378:	bf04      	itt	eq
 800337a:	4601      	moveq	r1, r0
 800337c:	2000      	moveq	r0, #0
 800337e:	fab1 f381 	clz	r3, r1
 8003382:	bf08      	it	eq
 8003384:	3320      	addeq	r3, #32
 8003386:	f1a3 030b 	sub.w	r3, r3, #11
 800338a:	f1b3 0220 	subs.w	r2, r3, #32
 800338e:	da0c      	bge.n	80033aa <__adddf3+0x16e>
 8003390:	320c      	adds	r2, #12
 8003392:	dd08      	ble.n	80033a6 <__adddf3+0x16a>
 8003394:	f102 0c14 	add.w	ip, r2, #20
 8003398:	f1c2 020c 	rsb	r2, r2, #12
 800339c:	fa01 f00c 	lsl.w	r0, r1, ip
 80033a0:	fa21 f102 	lsr.w	r1, r1, r2
 80033a4:	e00c      	b.n	80033c0 <__adddf3+0x184>
 80033a6:	f102 0214 	add.w	r2, r2, #20
 80033aa:	bfd8      	it	le
 80033ac:	f1c2 0c20 	rsble	ip, r2, #32
 80033b0:	fa01 f102 	lsl.w	r1, r1, r2
 80033b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80033b8:	bfdc      	itt	le
 80033ba:	ea41 010c 	orrle.w	r1, r1, ip
 80033be:	4090      	lslle	r0, r2
 80033c0:	1ae4      	subs	r4, r4, r3
 80033c2:	bfa2      	ittt	ge
 80033c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80033c8:	4329      	orrge	r1, r5
 80033ca:	bd30      	popge	{r4, r5, pc}
 80033cc:	ea6f 0404 	mvn.w	r4, r4
 80033d0:	3c1f      	subs	r4, #31
 80033d2:	da1c      	bge.n	800340e <__adddf3+0x1d2>
 80033d4:	340c      	adds	r4, #12
 80033d6:	dc0e      	bgt.n	80033f6 <__adddf3+0x1ba>
 80033d8:	f104 0414 	add.w	r4, r4, #20
 80033dc:	f1c4 0220 	rsb	r2, r4, #32
 80033e0:	fa20 f004 	lsr.w	r0, r0, r4
 80033e4:	fa01 f302 	lsl.w	r3, r1, r2
 80033e8:	ea40 0003 	orr.w	r0, r0, r3
 80033ec:	fa21 f304 	lsr.w	r3, r1, r4
 80033f0:	ea45 0103 	orr.w	r1, r5, r3
 80033f4:	bd30      	pop	{r4, r5, pc}
 80033f6:	f1c4 040c 	rsb	r4, r4, #12
 80033fa:	f1c4 0220 	rsb	r2, r4, #32
 80033fe:	fa20 f002 	lsr.w	r0, r0, r2
 8003402:	fa01 f304 	lsl.w	r3, r1, r4
 8003406:	ea40 0003 	orr.w	r0, r0, r3
 800340a:	4629      	mov	r1, r5
 800340c:	bd30      	pop	{r4, r5, pc}
 800340e:	fa21 f004 	lsr.w	r0, r1, r4
 8003412:	4629      	mov	r1, r5
 8003414:	bd30      	pop	{r4, r5, pc}
 8003416:	f094 0f00 	teq	r4, #0
 800341a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800341e:	bf06      	itte	eq
 8003420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003424:	3401      	addeq	r4, #1
 8003426:	3d01      	subne	r5, #1
 8003428:	e74e      	b.n	80032c8 <__adddf3+0x8c>
 800342a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800342e:	bf18      	it	ne
 8003430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003434:	d029      	beq.n	800348a <__adddf3+0x24e>
 8003436:	ea94 0f05 	teq	r4, r5
 800343a:	bf08      	it	eq
 800343c:	ea90 0f02 	teqeq	r0, r2
 8003440:	d005      	beq.n	800344e <__adddf3+0x212>
 8003442:	ea54 0c00 	orrs.w	ip, r4, r0
 8003446:	bf04      	itt	eq
 8003448:	4619      	moveq	r1, r3
 800344a:	4610      	moveq	r0, r2
 800344c:	bd30      	pop	{r4, r5, pc}
 800344e:	ea91 0f03 	teq	r1, r3
 8003452:	bf1e      	ittt	ne
 8003454:	2100      	movne	r1, #0
 8003456:	2000      	movne	r0, #0
 8003458:	bd30      	popne	{r4, r5, pc}
 800345a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800345e:	d105      	bne.n	800346c <__adddf3+0x230>
 8003460:	0040      	lsls	r0, r0, #1
 8003462:	4149      	adcs	r1, r1
 8003464:	bf28      	it	cs
 8003466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800346a:	bd30      	pop	{r4, r5, pc}
 800346c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003470:	bf3c      	itt	cc
 8003472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003476:	bd30      	popcc	{r4, r5, pc}
 8003478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800347c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	bd30      	pop	{r4, r5, pc}
 800348a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800348e:	bf1a      	itte	ne
 8003490:	4619      	movne	r1, r3
 8003492:	4610      	movne	r0, r2
 8003494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003498:	bf1c      	itt	ne
 800349a:	460b      	movne	r3, r1
 800349c:	4602      	movne	r2, r0
 800349e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80034a2:	bf06      	itte	eq
 80034a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80034a8:	ea91 0f03 	teqeq	r1, r3
 80034ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80034b0:	bd30      	pop	{r4, r5, pc}
 80034b2:	bf00      	nop

080034b4 <__aeabi_ui2d>:
 80034b4:	f090 0f00 	teq	r0, #0
 80034b8:	bf04      	itt	eq
 80034ba:	2100      	moveq	r1, #0
 80034bc:	4770      	bxeq	lr
 80034be:	b530      	push	{r4, r5, lr}
 80034c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80034c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80034c8:	f04f 0500 	mov.w	r5, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	e750      	b.n	8003374 <__adddf3+0x138>
 80034d2:	bf00      	nop

080034d4 <__aeabi_i2d>:
 80034d4:	f090 0f00 	teq	r0, #0
 80034d8:	bf04      	itt	eq
 80034da:	2100      	moveq	r1, #0
 80034dc:	4770      	bxeq	lr
 80034de:	b530      	push	{r4, r5, lr}
 80034e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80034e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80034e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80034ec:	bf48      	it	mi
 80034ee:	4240      	negmi	r0, r0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	e73e      	b.n	8003374 <__adddf3+0x138>
 80034f6:	bf00      	nop

080034f8 <__aeabi_f2d>:
 80034f8:	0042      	lsls	r2, r0, #1
 80034fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80034fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8003502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003506:	bf1f      	itttt	ne
 8003508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800350c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003514:	4770      	bxne	lr
 8003516:	f092 0f00 	teq	r2, #0
 800351a:	bf14      	ite	ne
 800351c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003520:	4770      	bxeq	lr
 8003522:	b530      	push	{r4, r5, lr}
 8003524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800352c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003530:	e720      	b.n	8003374 <__adddf3+0x138>
 8003532:	bf00      	nop

08003534 <__aeabi_ul2d>:
 8003534:	ea50 0201 	orrs.w	r2, r0, r1
 8003538:	bf08      	it	eq
 800353a:	4770      	bxeq	lr
 800353c:	b530      	push	{r4, r5, lr}
 800353e:	f04f 0500 	mov.w	r5, #0
 8003542:	e00a      	b.n	800355a <__aeabi_l2d+0x16>

08003544 <__aeabi_l2d>:
 8003544:	ea50 0201 	orrs.w	r2, r0, r1
 8003548:	bf08      	it	eq
 800354a:	4770      	bxeq	lr
 800354c:	b530      	push	{r4, r5, lr}
 800354e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003552:	d502      	bpl.n	800355a <__aeabi_l2d+0x16>
 8003554:	4240      	negs	r0, r0
 8003556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800355a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800355e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003566:	f43f aedc 	beq.w	8003322 <__adddf3+0xe6>
 800356a:	f04f 0203 	mov.w	r2, #3
 800356e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003572:	bf18      	it	ne
 8003574:	3203      	addne	r2, #3
 8003576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800357a:	bf18      	it	ne
 800357c:	3203      	addne	r2, #3
 800357e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003582:	f1c2 0320 	rsb	r3, r2, #32
 8003586:	fa00 fc03 	lsl.w	ip, r0, r3
 800358a:	fa20 f002 	lsr.w	r0, r0, r2
 800358e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003592:	ea40 000e 	orr.w	r0, r0, lr
 8003596:	fa21 f102 	lsr.w	r1, r1, r2
 800359a:	4414      	add	r4, r2
 800359c:	e6c1      	b.n	8003322 <__adddf3+0xe6>
 800359e:	bf00      	nop

080035a0 <__aeabi_dmul>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80035a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80035aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80035ae:	bf1d      	ittte	ne
 80035b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80035b4:	ea94 0f0c 	teqne	r4, ip
 80035b8:	ea95 0f0c 	teqne	r5, ip
 80035bc:	f000 f8de 	bleq	800377c <__aeabi_dmul+0x1dc>
 80035c0:	442c      	add	r4, r5
 80035c2:	ea81 0603 	eor.w	r6, r1, r3
 80035c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80035ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80035ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80035d2:	bf18      	it	ne
 80035d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80035d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80035dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e0:	d038      	beq.n	8003654 <__aeabi_dmul+0xb4>
 80035e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80035e6:	f04f 0500 	mov.w	r5, #0
 80035ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80035ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80035f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80035f6:	f04f 0600 	mov.w	r6, #0
 80035fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80035fe:	f09c 0f00 	teq	ip, #0
 8003602:	bf18      	it	ne
 8003604:	f04e 0e01 	orrne.w	lr, lr, #1
 8003608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800360c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003614:	d204      	bcs.n	8003620 <__aeabi_dmul+0x80>
 8003616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800361a:	416d      	adcs	r5, r5
 800361c:	eb46 0606 	adc.w	r6, r6, r6
 8003620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800362c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003638:	bf88      	it	hi
 800363a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800363e:	d81e      	bhi.n	800367e <__aeabi_dmul+0xde>
 8003640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003644:	bf08      	it	eq
 8003646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800364a:	f150 0000 	adcs.w	r0, r0, #0
 800364e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003658:	ea46 0101 	orr.w	r1, r6, r1
 800365c:	ea40 0002 	orr.w	r0, r0, r2
 8003660:	ea81 0103 	eor.w	r1, r1, r3
 8003664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003668:	bfc2      	ittt	gt
 800366a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800366e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003672:	bd70      	popgt	{r4, r5, r6, pc}
 8003674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003678:	f04f 0e00 	mov.w	lr, #0
 800367c:	3c01      	subs	r4, #1
 800367e:	f300 80ab 	bgt.w	80037d8 <__aeabi_dmul+0x238>
 8003682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003686:	bfde      	ittt	le
 8003688:	2000      	movle	r0, #0
 800368a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800368e:	bd70      	pople	{r4, r5, r6, pc}
 8003690:	f1c4 0400 	rsb	r4, r4, #0
 8003694:	3c20      	subs	r4, #32
 8003696:	da35      	bge.n	8003704 <__aeabi_dmul+0x164>
 8003698:	340c      	adds	r4, #12
 800369a:	dc1b      	bgt.n	80036d4 <__aeabi_dmul+0x134>
 800369c:	f104 0414 	add.w	r4, r4, #20
 80036a0:	f1c4 0520 	rsb	r5, r4, #32
 80036a4:	fa00 f305 	lsl.w	r3, r0, r5
 80036a8:	fa20 f004 	lsr.w	r0, r0, r4
 80036ac:	fa01 f205 	lsl.w	r2, r1, r5
 80036b0:	ea40 0002 	orr.w	r0, r0, r2
 80036b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80036b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80036c0:	fa21 f604 	lsr.w	r6, r1, r4
 80036c4:	eb42 0106 	adc.w	r1, r2, r6
 80036c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80036cc:	bf08      	it	eq
 80036ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f1c4 040c 	rsb	r4, r4, #12
 80036d8:	f1c4 0520 	rsb	r5, r4, #32
 80036dc:	fa00 f304 	lsl.w	r3, r0, r4
 80036e0:	fa20 f005 	lsr.w	r0, r0, r5
 80036e4:	fa01 f204 	lsl.w	r2, r1, r4
 80036e8:	ea40 0002 	orr.w	r0, r0, r2
 80036ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80036f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80036f4:	f141 0100 	adc.w	r1, r1, #0
 80036f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80036fc:	bf08      	it	eq
 80036fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	f1c4 0520 	rsb	r5, r4, #32
 8003708:	fa00 f205 	lsl.w	r2, r0, r5
 800370c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003710:	fa20 f304 	lsr.w	r3, r0, r4
 8003714:	fa01 f205 	lsl.w	r2, r1, r5
 8003718:	ea43 0302 	orr.w	r3, r3, r2
 800371c:	fa21 f004 	lsr.w	r0, r1, r4
 8003720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003724:	fa21 f204 	lsr.w	r2, r1, r4
 8003728:	ea20 0002 	bic.w	r0, r0, r2
 800372c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003734:	bf08      	it	eq
 8003736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f094 0f00 	teq	r4, #0
 8003740:	d10f      	bne.n	8003762 <__aeabi_dmul+0x1c2>
 8003742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003746:	0040      	lsls	r0, r0, #1
 8003748:	eb41 0101 	adc.w	r1, r1, r1
 800374c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003750:	bf08      	it	eq
 8003752:	3c01      	subeq	r4, #1
 8003754:	d0f7      	beq.n	8003746 <__aeabi_dmul+0x1a6>
 8003756:	ea41 0106 	orr.w	r1, r1, r6
 800375a:	f095 0f00 	teq	r5, #0
 800375e:	bf18      	it	ne
 8003760:	4770      	bxne	lr
 8003762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003766:	0052      	lsls	r2, r2, #1
 8003768:	eb43 0303 	adc.w	r3, r3, r3
 800376c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003770:	bf08      	it	eq
 8003772:	3d01      	subeq	r5, #1
 8003774:	d0f7      	beq.n	8003766 <__aeabi_dmul+0x1c6>
 8003776:	ea43 0306 	orr.w	r3, r3, r6
 800377a:	4770      	bx	lr
 800377c:	ea94 0f0c 	teq	r4, ip
 8003780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003784:	bf18      	it	ne
 8003786:	ea95 0f0c 	teqne	r5, ip
 800378a:	d00c      	beq.n	80037a6 <__aeabi_dmul+0x206>
 800378c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003790:	bf18      	it	ne
 8003792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003796:	d1d1      	bne.n	800373c <__aeabi_dmul+0x19c>
 8003798:	ea81 0103 	eor.w	r1, r1, r3
 800379c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80037aa:	bf06      	itte	eq
 80037ac:	4610      	moveq	r0, r2
 80037ae:	4619      	moveq	r1, r3
 80037b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80037b4:	d019      	beq.n	80037ea <__aeabi_dmul+0x24a>
 80037b6:	ea94 0f0c 	teq	r4, ip
 80037ba:	d102      	bne.n	80037c2 <__aeabi_dmul+0x222>
 80037bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80037c0:	d113      	bne.n	80037ea <__aeabi_dmul+0x24a>
 80037c2:	ea95 0f0c 	teq	r5, ip
 80037c6:	d105      	bne.n	80037d4 <__aeabi_dmul+0x234>
 80037c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80037cc:	bf1c      	itt	ne
 80037ce:	4610      	movne	r0, r2
 80037d0:	4619      	movne	r1, r3
 80037d2:	d10a      	bne.n	80037ea <__aeabi_dmul+0x24a>
 80037d4:	ea81 0103 	eor.w	r1, r1, r3
 80037d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80037dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80037e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80037ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80037f2:	bd70      	pop	{r4, r5, r6, pc}

080037f4 <__aeabi_ddiv>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80037fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80037fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003802:	bf1d      	ittte	ne
 8003804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003808:	ea94 0f0c 	teqne	r4, ip
 800380c:	ea95 0f0c 	teqne	r5, ip
 8003810:	f000 f8a7 	bleq	8003962 <__aeabi_ddiv+0x16e>
 8003814:	eba4 0405 	sub.w	r4, r4, r5
 8003818:	ea81 0e03 	eor.w	lr, r1, r3
 800381c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003824:	f000 8088 	beq.w	8003938 <__aeabi_ddiv+0x144>
 8003828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800382c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800383c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800384c:	429d      	cmp	r5, r3
 800384e:	bf08      	it	eq
 8003850:	4296      	cmpeq	r6, r2
 8003852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800385a:	d202      	bcs.n	8003862 <__aeabi_ddiv+0x6e>
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003862:	1ab6      	subs	r6, r6, r2
 8003864:	eb65 0503 	sbc.w	r5, r5, r3
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	ea4f 0232 	mov.w	r2, r2, rrx
 800386e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003876:	ebb6 0e02 	subs.w	lr, r6, r2
 800387a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800387e:	bf22      	ittt	cs
 8003880:	1ab6      	subcs	r6, r6, r2
 8003882:	4675      	movcs	r5, lr
 8003884:	ea40 000c 	orrcs.w	r0, r0, ip
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	ea4f 0232 	mov.w	r2, r2, rrx
 800388e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003896:	bf22      	ittt	cs
 8003898:	1ab6      	subcs	r6, r6, r2
 800389a:	4675      	movcs	r5, lr
 800389c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80038a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80038aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80038ae:	bf22      	ittt	cs
 80038b0:	1ab6      	subcs	r6, r6, r2
 80038b2:	4675      	movcs	r5, lr
 80038b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80038be:	ebb6 0e02 	subs.w	lr, r6, r2
 80038c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80038c6:	bf22      	ittt	cs
 80038c8:	1ab6      	subcs	r6, r6, r2
 80038ca:	4675      	movcs	r5, lr
 80038cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80038d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80038d4:	d018      	beq.n	8003908 <__aeabi_ddiv+0x114>
 80038d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80038da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80038de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80038e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80038e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80038ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80038ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80038f2:	d1c0      	bne.n	8003876 <__aeabi_ddiv+0x82>
 80038f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80038f8:	d10b      	bne.n	8003912 <__aeabi_ddiv+0x11e>
 80038fa:	ea41 0100 	orr.w	r1, r1, r0
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003906:	e7b6      	b.n	8003876 <__aeabi_ddiv+0x82>
 8003908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800390c:	bf04      	itt	eq
 800390e:	4301      	orreq	r1, r0
 8003910:	2000      	moveq	r0, #0
 8003912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003916:	bf88      	it	hi
 8003918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800391c:	f63f aeaf 	bhi.w	800367e <__aeabi_dmul+0xde>
 8003920:	ebb5 0c03 	subs.w	ip, r5, r3
 8003924:	bf04      	itt	eq
 8003926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800392a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800392e:	f150 0000 	adcs.w	r0, r0, #0
 8003932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800393c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003944:	bfc2      	ittt	gt
 8003946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800394a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800394e:	bd70      	popgt	{r4, r5, r6, pc}
 8003950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003954:	f04f 0e00 	mov.w	lr, #0
 8003958:	3c01      	subs	r4, #1
 800395a:	e690      	b.n	800367e <__aeabi_dmul+0xde>
 800395c:	ea45 0e06 	orr.w	lr, r5, r6
 8003960:	e68d      	b.n	800367e <__aeabi_dmul+0xde>
 8003962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003966:	ea94 0f0c 	teq	r4, ip
 800396a:	bf08      	it	eq
 800396c:	ea95 0f0c 	teqeq	r5, ip
 8003970:	f43f af3b 	beq.w	80037ea <__aeabi_dmul+0x24a>
 8003974:	ea94 0f0c 	teq	r4, ip
 8003978:	d10a      	bne.n	8003990 <__aeabi_ddiv+0x19c>
 800397a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800397e:	f47f af34 	bne.w	80037ea <__aeabi_dmul+0x24a>
 8003982:	ea95 0f0c 	teq	r5, ip
 8003986:	f47f af25 	bne.w	80037d4 <__aeabi_dmul+0x234>
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	e72c      	b.n	80037ea <__aeabi_dmul+0x24a>
 8003990:	ea95 0f0c 	teq	r5, ip
 8003994:	d106      	bne.n	80039a4 <__aeabi_ddiv+0x1b0>
 8003996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800399a:	f43f aefd 	beq.w	8003798 <__aeabi_dmul+0x1f8>
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	e722      	b.n	80037ea <__aeabi_dmul+0x24a>
 80039a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80039a8:	bf18      	it	ne
 80039aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80039ae:	f47f aec5 	bne.w	800373c <__aeabi_dmul+0x19c>
 80039b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80039b6:	f47f af0d 	bne.w	80037d4 <__aeabi_dmul+0x234>
 80039ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80039be:	f47f aeeb 	bne.w	8003798 <__aeabi_dmul+0x1f8>
 80039c2:	e712      	b.n	80037ea <__aeabi_dmul+0x24a>

080039c4 <__gedf2>:
 80039c4:	f04f 3cff 	mov.w	ip, #4294967295
 80039c8:	e006      	b.n	80039d8 <__cmpdf2+0x4>
 80039ca:	bf00      	nop

080039cc <__ledf2>:
 80039cc:	f04f 0c01 	mov.w	ip, #1
 80039d0:	e002      	b.n	80039d8 <__cmpdf2+0x4>
 80039d2:	bf00      	nop

080039d4 <__cmpdf2>:
 80039d4:	f04f 0c01 	mov.w	ip, #1
 80039d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80039dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80039e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80039e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80039e8:	bf18      	it	ne
 80039ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80039ee:	d01b      	beq.n	8003a28 <__cmpdf2+0x54>
 80039f0:	b001      	add	sp, #4
 80039f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80039f6:	bf0c      	ite	eq
 80039f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80039fc:	ea91 0f03 	teqne	r1, r3
 8003a00:	bf02      	ittt	eq
 8003a02:	ea90 0f02 	teqeq	r0, r2
 8003a06:	2000      	moveq	r0, #0
 8003a08:	4770      	bxeq	lr
 8003a0a:	f110 0f00 	cmn.w	r0, #0
 8003a0e:	ea91 0f03 	teq	r1, r3
 8003a12:	bf58      	it	pl
 8003a14:	4299      	cmppl	r1, r3
 8003a16:	bf08      	it	eq
 8003a18:	4290      	cmpeq	r0, r2
 8003a1a:	bf2c      	ite	cs
 8003a1c:	17d8      	asrcs	r0, r3, #31
 8003a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003a22:	f040 0001 	orr.w	r0, r0, #1
 8003a26:	4770      	bx	lr
 8003a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003a30:	d102      	bne.n	8003a38 <__cmpdf2+0x64>
 8003a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003a36:	d107      	bne.n	8003a48 <__cmpdf2+0x74>
 8003a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003a40:	d1d6      	bne.n	80039f0 <__cmpdf2+0x1c>
 8003a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003a46:	d0d3      	beq.n	80039f0 <__cmpdf2+0x1c>
 8003a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop

08003a50 <__aeabi_cdrcmple>:
 8003a50:	4684      	mov	ip, r0
 8003a52:	4610      	mov	r0, r2
 8003a54:	4662      	mov	r2, ip
 8003a56:	468c      	mov	ip, r1
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4663      	mov	r3, ip
 8003a5c:	e000      	b.n	8003a60 <__aeabi_cdcmpeq>
 8003a5e:	bf00      	nop

08003a60 <__aeabi_cdcmpeq>:
 8003a60:	b501      	push	{r0, lr}
 8003a62:	f7ff ffb7 	bl	80039d4 <__cmpdf2>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	bf48      	it	mi
 8003a6a:	f110 0f00 	cmnmi.w	r0, #0
 8003a6e:	bd01      	pop	{r0, pc}

08003a70 <__aeabi_dcmpeq>:
 8003a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003a74:	f7ff fff4 	bl	8003a60 <__aeabi_cdcmpeq>
 8003a78:	bf0c      	ite	eq
 8003a7a:	2001      	moveq	r0, #1
 8003a7c:	2000      	movne	r0, #0
 8003a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003a82:	bf00      	nop

08003a84 <__aeabi_dcmplt>:
 8003a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003a88:	f7ff ffea 	bl	8003a60 <__aeabi_cdcmpeq>
 8003a8c:	bf34      	ite	cc
 8003a8e:	2001      	movcc	r0, #1
 8003a90:	2000      	movcs	r0, #0
 8003a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8003a96:	bf00      	nop

08003a98 <__aeabi_dcmple>:
 8003a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003a9c:	f7ff ffe0 	bl	8003a60 <__aeabi_cdcmpeq>
 8003aa0:	bf94      	ite	ls
 8003aa2:	2001      	movls	r0, #1
 8003aa4:	2000      	movhi	r0, #0
 8003aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003aaa:	bf00      	nop

08003aac <__aeabi_dcmpge>:
 8003aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ab0:	f7ff ffce 	bl	8003a50 <__aeabi_cdrcmple>
 8003ab4:	bf94      	ite	ls
 8003ab6:	2001      	movls	r0, #1
 8003ab8:	2000      	movhi	r0, #0
 8003aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8003abe:	bf00      	nop

08003ac0 <__aeabi_dcmpgt>:
 8003ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ac4:	f7ff ffc4 	bl	8003a50 <__aeabi_cdrcmple>
 8003ac8:	bf34      	ite	cc
 8003aca:	2001      	movcc	r0, #1
 8003acc:	2000      	movcs	r0, #0
 8003ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8003ad2:	bf00      	nop

08003ad4 <__aeabi_d2iz>:
 8003ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003adc:	d215      	bcs.n	8003b0a <__aeabi_d2iz+0x36>
 8003ade:	d511      	bpl.n	8003b04 <__aeabi_d2iz+0x30>
 8003ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003ae8:	d912      	bls.n	8003b10 <__aeabi_d2iz+0x3c>
 8003aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003afa:	fa23 f002 	lsr.w	r0, r3, r2
 8003afe:	bf18      	it	ne
 8003b00:	4240      	negne	r0, r0
 8003b02:	4770      	bx	lr
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	4770      	bx	lr
 8003b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003b0e:	d105      	bne.n	8003b1c <__aeabi_d2iz+0x48>
 8003b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003b14:	bf08      	it	eq
 8003b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003b1a:	4770      	bx	lr
 8003b1c:	f04f 0000 	mov.w	r0, #0
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <__aeabi_uldivmod>:
 8003b24:	b94b      	cbnz	r3, 8003b3a <__aeabi_uldivmod+0x16>
 8003b26:	b942      	cbnz	r2, 8003b3a <__aeabi_uldivmod+0x16>
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	bf08      	it	eq
 8003b2c:	2800      	cmpeq	r0, #0
 8003b2e:	d002      	beq.n	8003b36 <__aeabi_uldivmod+0x12>
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	4608      	mov	r0, r1
 8003b36:	f001 b871 	b.w	8004c1c <__aeabi_idiv0>
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	46ec      	mov	ip, sp
 8003b3e:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003b42:	f000 f81d 	bl	8003b80 <__gnu_uldivmod_helper>
 8003b46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bc0c      	pop	{r2, r3}
 8003b4e:	4770      	bx	lr

08003b50 <__gnu_ldivmod_helper>:
 8003b50:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003b54:	4615      	mov	r5, r2
 8003b56:	4680      	mov	r8, r0
 8003b58:	4689      	mov	r9, r1
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	f001 f860 	bl	8004c20 <__divdi3>
 8003b60:	fb05 f601 	mul.w	r6, r5, r1
 8003b64:	fba5 2300 	umull	r2, r3, r5, r0
 8003b68:	fb00 6404 	mla	r4, r0, r4, r6
 8003b6c:	18e3      	adds	r3, r4, r3
 8003b6e:	9c06      	ldr	r4, [sp, #24]
 8003b70:	ebb8 0202 	subs.w	r2, r8, r2
 8003b74:	eb69 0303 	sbc.w	r3, r9, r3
 8003b78:	e9c4 2300 	strd	r2, r3, [r4]
 8003b7c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08003b80 <__gnu_uldivmod_helper>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	4614      	mov	r4, r2
 8003b84:	4606      	mov	r6, r0
 8003b86:	460f      	mov	r7, r1
 8003b88:	461d      	mov	r5, r3
 8003b8a:	f001 f9ad 	bl	8004ee8 <__udivdi3>
 8003b8e:	fb00 f505 	mul.w	r5, r0, r5
 8003b92:	fba0 2304 	umull	r2, r3, r0, r4
 8003b96:	fb04 5401 	mla	r4, r4, r1, r5
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	9c06      	ldr	r4, [sp, #24]
 8003b9e:	1ab2      	subs	r2, r6, r2
 8003ba0:	eb67 0303 	sbc.w	r3, r7, r3
 8003ba4:	e9c4 2300 	strd	r2, r3, [r4]
 8003ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003baa:	bf00      	nop

08003bac <_Unwind_decode_target2>:
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_Unwind_decode_target2+0x6>
 8003bb0:	181b      	adds	r3, r3, r0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <selfrel_offset31>:
 8003bb8:	6803      	ldr	r3, [r0, #0]
 8003bba:	005a      	lsls	r2, r3, #1
 8003bbc:	bf4c      	ite	mi
 8003bbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	18c0      	adds	r0, r0, r3
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop

08003bcc <search_EIT_table>:
 8003bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	4691      	mov	r9, r2
 8003bd4:	b341      	cbz	r1, 8003c28 <search_EIT_table+0x5c>
 8003bd6:	f101 3bff 	add.w	fp, r1, #4294967295
 8003bda:	46da      	mov	sl, fp
 8003bdc:	2700      	movs	r7, #0
 8003bde:	eb07 000a 	add.w	r0, r7, sl
 8003be2:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 8003be6:	106d      	asrs	r5, r5, #1
 8003be8:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7ff ffe3 	bl	8003bb8 <selfrel_offset31>
 8003bf2:	45ab      	cmp	fp, r5
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	d010      	beq.n	8003c1a <search_EIT_table+0x4e>
 8003bf8:	1c69      	adds	r1, r5, #1
 8003bfa:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8003bfe:	f7ff ffdb 	bl	8003bb8 <selfrel_offset31>
 8003c02:	3801      	subs	r0, #1
 8003c04:	45c8      	cmp	r8, r9
 8003c06:	d904      	bls.n	8003c12 <search_EIT_table+0x46>
 8003c08:	42bd      	cmp	r5, r7
 8003c0a:	d009      	beq.n	8003c20 <search_EIT_table+0x54>
 8003c0c:	f105 3aff 	add.w	sl, r5, #4294967295
 8003c10:	e7e5      	b.n	8003bde <search_EIT_table+0x12>
 8003c12:	4548      	cmp	r0, r9
 8003c14:	d205      	bcs.n	8003c22 <search_EIT_table+0x56>
 8003c16:	1c6f      	adds	r7, r5, #1
 8003c18:	e7e1      	b.n	8003bde <search_EIT_table+0x12>
 8003c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1e:	e7f1      	b.n	8003c04 <search_EIT_table+0x38>
 8003c20:	2600      	movs	r6, #0
 8003c22:	4630      	mov	r0, r6
 8003c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c28:	460e      	mov	r6, r1
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c30 <get_eit_entry>:
 8003c30:	b530      	push	{r4, r5, lr}
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <get_eit_entry+0xb0>)
 8003c34:	b083      	sub	sp, #12
 8003c36:	4604      	mov	r4, r0
 8003c38:	1e8d      	subs	r5, r1, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d049      	beq.n	8003cd2 <get_eit_entry+0xa2>
 8003c3e:	4628      	mov	r0, r5
 8003c40:	a901      	add	r1, sp, #4
 8003c42:	f3af 8000 	nop.w
 8003c46:	4603      	mov	r3, r0
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d022      	beq.n	8003c92 <get_eit_entry+0x62>
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4618      	mov	r0, r3
 8003c50:	9901      	ldr	r1, [sp, #4]
 8003c52:	f7ff ffbb 	bl	8003bcc <search_EIT_table>
 8003c56:	4605      	mov	r5, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d01d      	beq.n	8003c98 <get_eit_entry+0x68>
 8003c5c:	f7ff ffac 	bl	8003bb8 <selfrel_offset31>
 8003c60:	686b      	ldr	r3, [r5, #4]
 8003c62:	64a0      	str	r0, [r4, #72]	; 0x48
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d010      	beq.n	8003c8a <get_eit_entry+0x5a>
 8003c68:	1d28      	adds	r0, r5, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	db22      	blt.n	8003cb4 <get_eit_entry+0x84>
 8003c6e:	f7ff ffa3 	bl	8003bb8 <selfrel_offset31>
 8003c72:	2100      	movs	r1, #0
 8003c74:	64e0      	str	r0, [r4, #76]	; 0x4c
 8003c76:	6521      	str	r1, [r4, #80]	; 0x50
 8003c78:	6803      	ldr	r3, [r0, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0f      	blt.n	8003c9e <get_eit_entry+0x6e>
 8003c7e:	f7ff ff9b 	bl	8003bb8 <selfrel_offset31>
 8003c82:	6120      	str	r0, [r4, #16]
 8003c84:	2000      	movs	r0, #0
 8003c86:	b003      	add	sp, #12
 8003c88:	bd30      	pop	{r4, r5, pc}
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6123      	str	r3, [r4, #16]
 8003c8e:	2005      	movs	r0, #5
 8003c90:	e7f9      	b.n	8003c86 <get_eit_entry+0x56>
 8003c92:	6120      	str	r0, [r4, #16]
 8003c94:	2009      	movs	r0, #9
 8003c96:	e7f6      	b.n	8003c86 <get_eit_entry+0x56>
 8003c98:	6120      	str	r0, [r4, #16]
 8003c9a:	2009      	movs	r0, #9
 8003c9c:	e7f3      	b.n	8003c86 <get_eit_entry+0x56>
 8003c9e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8003ca2:	b158      	cbz	r0, 8003cbc <get_eit_entry+0x8c>
 8003ca4:	2801      	cmp	r0, #1
 8003ca6:	d00c      	beq.n	8003cc2 <get_eit_entry+0x92>
 8003ca8:	2802      	cmp	r0, #2
 8003caa:	d00e      	beq.n	8003cca <get_eit_entry+0x9a>
 8003cac:	2000      	movs	r0, #0
 8003cae:	6120      	str	r0, [r4, #16]
 8003cb0:	2009      	movs	r0, #9
 8003cb2:	e7e8      	b.n	8003c86 <get_eit_entry+0x56>
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8003cb8:	6522      	str	r2, [r4, #80]	; 0x50
 8003cba:	e7dd      	b.n	8003c78 <get_eit_entry+0x48>
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <get_eit_entry+0xb4>)
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	e7e1      	b.n	8003c86 <get_eit_entry+0x56>
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <get_eit_entry+0xb8>)
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	6122      	str	r2, [r4, #16]
 8003cc8:	e7dd      	b.n	8003c86 <get_eit_entry+0x56>
 8003cca:	4908      	ldr	r1, [pc, #32]	; (8003cec <get_eit_entry+0xbc>)
 8003ccc:	2000      	movs	r0, #0
 8003cce:	6121      	str	r1, [r4, #16]
 8003cd0:	e7d9      	b.n	8003c86 <get_eit_entry+0x56>
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <get_eit_entry+0xc0>)
 8003cd4:	4907      	ldr	r1, [pc, #28]	; (8003cf4 <get_eit_entry+0xc4>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	1a88      	subs	r0, r1, r2
 8003cda:	10c2      	asrs	r2, r0, #3
 8003cdc:	9201      	str	r2, [sp, #4]
 8003cde:	e7b5      	b.n	8003c4c <get_eit_entry+0x1c>
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	080041f5 	.word	0x080041f5
 8003ce8:	080041f1 	.word	0x080041f1
 8003cec:	080041ed 	.word	0x080041ed
 8003cf0:	0800a45c 	.word	0x0800a45c
 8003cf4:	0800a544 	.word	0x0800a544

08003cf8 <restore_non_core_regs>:
 8003cf8:	6803      	ldr	r3, [r0, #0]
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	07d8      	lsls	r0, r3, #31
 8003d00:	d406      	bmi.n	8003d10 <restore_non_core_regs+0x18>
 8003d02:	0799      	lsls	r1, r3, #30
 8003d04:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003d08:	d509      	bpl.n	8003d1e <restore_non_core_regs+0x26>
 8003d0a:	f000 fd09 	bl	8004720 <__gnu_Unwind_Restore_VFP_D>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	075a      	lsls	r2, r3, #29
 8003d12:	d509      	bpl.n	8003d28 <restore_non_core_regs+0x30>
 8003d14:	0718      	lsls	r0, r3, #28
 8003d16:	d50e      	bpl.n	8003d36 <restore_non_core_regs+0x3e>
 8003d18:	06d9      	lsls	r1, r3, #27
 8003d1a:	d513      	bpl.n	8003d44 <restore_non_core_regs+0x4c>
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	f000 fcf7 	bl	8004710 <__gnu_Unwind_Restore_VFP>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	075a      	lsls	r2, r3, #29
 8003d26:	d4f5      	bmi.n	8003d14 <restore_non_core_regs+0x1c>
 8003d28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d2c:	f000 fd00 	bl	8004730 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	0718      	lsls	r0, r3, #28
 8003d34:	d4f0      	bmi.n	8003d18 <restore_non_core_regs+0x20>
 8003d36:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8003d3a:	f000 fd01 	bl	8004740 <__gnu_Unwind_Restore_WMMXD>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	06d9      	lsls	r1, r3, #27
 8003d42:	d4eb      	bmi.n	8003d1c <restore_non_core_regs+0x24>
 8003d44:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f000 bd3c 	b.w	80047c8 <__gnu_Unwind_Restore_WMMXC>

08003d50 <unwind_phase2_forced>:
 8003d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8003d58:	ac02      	add	r4, sp, #8
 8003d5a:	1d0f      	adds	r7, r1, #4
 8003d5c:	1d26      	adds	r6, r4, #4
 8003d5e:	4605      	mov	r5, r0
 8003d60:	4691      	mov	r9, r2
 8003d62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d6e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003d72:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003d76:	2700      	movs	r7, #0
 8003d78:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8003d7c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003d80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d82:	4628      	mov	r0, r5
 8003d84:	6027      	str	r7, [r4, #0]
 8003d86:	f7ff ff53 	bl	8003c30 <get_eit_entry>
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	45b9      	cmp	r9, r7
 8003d8e:	bf14      	ite	ne
 8003d90:	f04f 090a 	movne.w	r9, #10
 8003d94:	f04f 0909 	moveq.w	r9, #9
 8003d98:	b1fe      	cbz	r6, 8003dda <unwind_phase2_forced+0x8a>
 8003d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d9c:	f049 0910 	orr.w	r9, r9, #16
 8003da0:	6461      	str	r1, [r4, #68]	; 0x44
 8003da2:	2001      	movs	r0, #1
 8003da4:	e88d 0410 	stmia.w	sp, {r4, sl}
 8003da8:	4649      	mov	r1, r9
 8003daa:	462a      	mov	r2, r5
 8003dac:	462b      	mov	r3, r5
 8003dae:	47c0      	blx	r8
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d12b      	bne.n	8003e0c <unwind_phase2_forced+0xbc>
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	d12a      	bne.n	8003e0e <unwind_phase2_forced+0xbe>
 8003db8:	4620      	mov	r0, r4
 8003dba:	a992      	add	r1, sp, #584	; 0x248
 8003dbc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8003dc0:	f004 fa70 	bl	80082a4 <memcpy>
 8003dc4:	2f08      	cmp	r7, #8
 8003dc6:	d128      	bne.n	8003e1a <unwind_phase2_forced+0xca>
 8003dc8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7ff ff30 	bl	8003c30 <get_eit_entry>
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	f04f 0909 	mov.w	r9, #9
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d1df      	bne.n	8003d9a <unwind_phase2_forced+0x4a>
 8003dda:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f44f 7210 	mov.w	r2, #576	; 0x240
 8003de2:	6168      	str	r0, [r5, #20]
 8003de4:	a892      	add	r0, sp, #584	; 0x248
 8003de6:	f004 fa5d 	bl	80082a4 <memcpy>
 8003dea:	692f      	ldr	r7, [r5, #16]
 8003dec:	4629      	mov	r1, r5
 8003dee:	aa92      	add	r2, sp, #584	; 0x248
 8003df0:	4648      	mov	r0, r9
 8003df2:	47b8      	blx	r7
 8003df4:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8003df6:	4607      	mov	r7, r0
 8003df8:	6463      	str	r3, [r4, #68]	; 0x44
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	e88d 0410 	stmia.w	sp, {r4, sl}
 8003e00:	4649      	mov	r1, r9
 8003e02:	462a      	mov	r2, r5
 8003e04:	462b      	mov	r3, r5
 8003e06:	47c0      	blx	r8
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d0d3      	beq.n	8003db4 <unwind_phase2_forced+0x64>
 8003e0c:	2609      	movs	r6, #9
 8003e0e:	4630      	mov	r0, r6
 8003e10:	b022      	add	sp, #136	; 0x88
 8003e12:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8003e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1a:	2f07      	cmp	r7, #7
 8003e1c:	d1f6      	bne.n	8003e0c <unwind_phase2_forced+0xbc>
 8003e1e:	1d20      	adds	r0, r4, #4
 8003e20:	f000 fc6a 	bl	80046f8 <__restore_core_regs>

08003e24 <unwind_phase2>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4604      	mov	r4, r0
 8003e28:	460d      	mov	r5, r1
 8003e2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff feff 	bl	8003c30 <get_eit_entry>
 8003e32:	b950      	cbnz	r0, 8003e4a <unwind_phase2+0x26>
 8003e34:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003e36:	2001      	movs	r0, #1
 8003e38:	6162      	str	r2, [r4, #20]
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	462a      	mov	r2, r5
 8003e40:	4798      	blx	r3
 8003e42:	2808      	cmp	r0, #8
 8003e44:	d0f1      	beq.n	8003e2a <unwind_phase2+0x6>
 8003e46:	2807      	cmp	r0, #7
 8003e48:	d001      	beq.n	8003e4e <unwind_phase2+0x2a>
 8003e4a:	f006 f89b 	bl	8009f84 <abort>
 8003e4e:	1d28      	adds	r0, r5, #4
 8003e50:	f000 fc52 	bl	80046f8 <__restore_core_regs>

08003e54 <_Unwind_VRS_Get>:
 8003e54:	b911      	cbnz	r1, 8003e5c <_Unwind_VRS_Get+0x8>
 8003e56:	b133      	cbz	r3, 8003e66 <_Unwind_VRS_Get+0x12>
 8003e58:	2002      	movs	r0, #2
 8003e5a:	4770      	bx	lr
 8003e5c:	2904      	cmp	r1, #4
 8003e5e:	bf8c      	ite	hi
 8003e60:	2002      	movhi	r0, #2
 8003e62:	2001      	movls	r0, #1
 8003e64:	4770      	bx	lr
 8003e66:	2a0f      	cmp	r2, #15
 8003e68:	d901      	bls.n	8003e6e <_Unwind_VRS_Get+0x1a>
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	4770      	bx	lr
 8003e6e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003e72:	6842      	ldr	r2, [r0, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	9b00      	ldr	r3, [sp, #0]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	4770      	bx	lr

08003e7c <_Unwind_GetGR>:
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	460a      	mov	r2, r1
 8003e80:	b084      	sub	sp, #16
 8003e82:	2100      	movs	r1, #0
 8003e84:	460b      	mov	r3, r1
 8003e86:	ac03      	add	r4, sp, #12
 8003e88:	9400      	str	r4, [sp, #0]
 8003e8a:	f7ff ffe3 	bl	8003e54 <_Unwind_VRS_Get>
 8003e8e:	9803      	ldr	r0, [sp, #12]
 8003e90:	b004      	add	sp, #16
 8003e92:	bd10      	pop	{r4, pc}

08003e94 <_Unwind_VRS_Set>:
 8003e94:	b911      	cbnz	r1, 8003e9c <_Unwind_VRS_Set+0x8>
 8003e96:	b133      	cbz	r3, 8003ea6 <_Unwind_VRS_Set+0x12>
 8003e98:	2002      	movs	r0, #2
 8003e9a:	4770      	bx	lr
 8003e9c:	2904      	cmp	r1, #4
 8003e9e:	bf8c      	ite	hi
 8003ea0:	2002      	movhi	r0, #2
 8003ea2:	2001      	movls	r0, #1
 8003ea4:	4770      	bx	lr
 8003ea6:	2a0f      	cmp	r2, #15
 8003ea8:	d901      	bls.n	8003eae <_Unwind_VRS_Set+0x1a>
 8003eaa:	2002      	movs	r0, #2
 8003eac:	4770      	bx	lr
 8003eae:	9900      	ldr	r1, [sp, #0]
 8003eb0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003eb4:	6809      	ldr	r1, [r1, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	6051      	str	r1, [r2, #4]
 8003eba:	4770      	bx	lr

08003ebc <_Unwind_SetGR>:
 8003ebc:	b500      	push	{lr}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	ab04      	add	r3, sp, #16
 8003ec2:	f843 2d04 	str.w	r2, [r3, #-4]!
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	2100      	movs	r1, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	f7ff ffe1 	bl	8003e94 <_Unwind_VRS_Set>
 8003ed2:	b005      	add	sp, #20
 8003ed4:	bd00      	pop	{pc}
 8003ed6:	bf00      	nop

08003ed8 <__gnu_unwind_pr_common>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f855 1b04 	ldr.w	r1, [r5], #4
 8003ee4:	b08b      	sub	sp, #44	; 0x2c
 8003ee6:	4617      	mov	r7, r2
 8003ee8:	f000 0208 	and.w	r2, r0, #8
 8003eec:	461e      	mov	r6, r3
 8003eee:	9203      	str	r2, [sp, #12]
 8003ef0:	f000 0803 	and.w	r8, r0, #3
 8003ef4:	9507      	str	r5, [sp, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 80e0 	bne.w	80040bc <__gnu_unwind_pr_common+0x1e4>
 8003efc:	0209      	lsls	r1, r1, #8
 8003efe:	9106      	str	r1, [sp, #24]
 8003f00:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003f02:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8003f06:	2303      	movs	r3, #3
 8003f08:	f1b8 0f02 	cmp.w	r8, #2
 8003f0c:	f88d 3020 	strb.w	r3, [sp, #32]
 8003f10:	bf08      	it	eq
 8003f12:	6ba5      	ldreq	r5, [r4, #56]	; 0x38
 8003f14:	f011 0301 	ands.w	r3, r1, #1
 8003f18:	f040 80e4 	bne.w	80040e4 <__gnu_unwind_pr_common+0x20c>
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	f8d5 9000 	ldr.w	r9, [r5]
 8003f28:	f1b9 0f00 	cmp.w	r9, #0
 8003f2c:	f000 80dc 	beq.w	80040e8 <__gnu_unwind_pr_common+0x210>
 8003f30:	2e02      	cmp	r6, #2
 8003f32:	f000 80bf 	beq.w	80040b4 <__gnu_unwind_pr_common+0x1dc>
 8003f36:	f8b5 9000 	ldrh.w	r9, [r5]
 8003f3a:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 8003f3e:	3504      	adds	r5, #4
 8003f40:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003f42:	210f      	movs	r1, #15
 8003f44:	f02a 0b01 	bic.w	fp, sl, #1
 8003f48:	4638      	mov	r0, r7
 8003f4a:	4493      	add	fp, r2
 8003f4c:	f7ff ff96 	bl	8003e7c <_Unwind_GetGR>
 8003f50:	4583      	cmp	fp, r0
 8003f52:	d818      	bhi.n	8003f86 <__gnu_unwind_pr_common+0xae>
 8003f54:	f029 0c01 	bic.w	ip, r9, #1
 8003f58:	44e3      	add	fp, ip
 8003f5a:	f00a 0a01 	and.w	sl, sl, #1
 8003f5e:	f009 0301 	and.w	r3, r9, #1
 8003f62:	4558      	cmp	r0, fp
 8003f64:	ea43 094a 	orr.w	r9, r3, sl, lsl #1
 8003f68:	bf2c      	ite	cs
 8003f6a:	2000      	movcs	r0, #0
 8003f6c:	2001      	movcc	r0, #1
 8003f6e:	f1b9 0f01 	cmp.w	r9, #1
 8003f72:	d012      	beq.n	8003f9a <__gnu_unwind_pr_common+0xc2>
 8003f74:	d232      	bcs.n	8003fdc <__gnu_unwind_pr_common+0x104>
 8003f76:	f1b8 0f00 	cmp.w	r8, #0
 8003f7a:	d002      	beq.n	8003f82 <__gnu_unwind_pr_common+0xaa>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	f040 8117 	bne.w	80041b0 <__gnu_unwind_pr_common+0x2d8>
 8003f82:	3504      	adds	r5, #4
 8003f84:	e7ce      	b.n	8003f24 <__gnu_unwind_pr_common+0x4c>
 8003f86:	f00a 0a01 	and.w	sl, sl, #1
 8003f8a:	f009 0301 	and.w	r3, r9, #1
 8003f8e:	ea43 094a 	orr.w	r9, r3, sl, lsl #1
 8003f92:	2000      	movs	r0, #0
 8003f94:	f1b9 0f01 	cmp.w	r9, #1
 8003f98:	d1ec      	bne.n	8003f74 <__gnu_unwind_pr_common+0x9c>
 8003f9a:	f1b8 0f00 	cmp.w	r8, #0
 8003f9e:	f040 80c8 	bne.w	8004132 <__gnu_unwind_pr_common+0x25a>
 8003fa2:	b1c8      	cbz	r0, 8003fd8 <__gnu_unwind_pr_common+0x100>
 8003fa4:	686b      	ldr	r3, [r5, #4]
 8003fa6:	f8d5 9000 	ldr.w	r9, [r5]
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	d019      	beq.n	8003fe2 <__gnu_unwind_pr_common+0x10a>
 8003fae:	9a02      	ldr	r2, [sp, #8]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fb4:	d00d      	beq.n	8003fd2 <__gnu_unwind_pr_common+0xfa>
 8003fb6:	1d28      	adds	r0, r5, #4
 8003fb8:	f7ff fdf8 	bl	8003bac <_Unwind_decode_target2>
 8003fbc:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	ab09      	add	r3, sp, #36	; 0x24
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f3af 8000 	nop.w
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f000 80ec 	beq.w	80041a8 <__gnu_unwind_pr_common+0x2d0>
 8003fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	f040 80cc 	bne.w	8004170 <__gnu_unwind_pr_common+0x298>
 8003fd8:	3508      	adds	r5, #8
 8003fda:	e7a3      	b.n	8003f24 <__gnu_unwind_pr_common+0x4c>
 8003fdc:	f1b9 0f02 	cmp.w	r9, #2
 8003fe0:	d003      	beq.n	8003fea <__gnu_unwind_pr_common+0x112>
 8003fe2:	2009      	movs	r0, #9
 8003fe4:	b00b      	add	sp, #44	; 0x2c
 8003fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ff0:	9200      	str	r2, [sp, #0]
 8003ff2:	f1b8 0f00 	cmp.w	r8, #0
 8003ff6:	f040 8083 	bne.w	8004100 <__gnu_unwind_pr_common+0x228>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d053      	beq.n	80040a6 <__gnu_unwind_pr_common+0x1ce>
 8003ffe:	9803      	ldr	r0, [sp, #12]
 8004000:	2800      	cmp	r0, #0
 8004002:	f040 80b2 	bne.w	800416a <__gnu_unwind_pr_common+0x292>
 8004006:	9800      	ldr	r0, [sp, #0]
 8004008:	2800      	cmp	r0, #0
 800400a:	f000 80b1 	beq.w	8004170 <__gnu_unwind_pr_common+0x298>
 800400e:	9b00      	ldr	r3, [sp, #0]
 8004010:	f105 0a04 	add.w	sl, r5, #4
 8004014:	07db      	lsls	r3, r3, #31
 8004016:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800401a:	d410      	bmi.n	800403e <__gnu_unwind_pr_common+0x166>
 800401c:	9902      	ldr	r1, [sp, #8]
 800401e:	4650      	mov	r0, sl
 8004020:	9109      	str	r1, [sp, #36]	; 0x24
 8004022:	f7ff fdc3 	bl	8003bac <_Unwind_decode_target2>
 8004026:	9a03      	ldr	r2, [sp, #12]
 8004028:	4601      	mov	r1, r0
 800402a:	ab09      	add	r3, sp, #36	; 0x24
 800402c:	4620      	mov	r0, r4
 800402e:	f3af 8000 	nop.w
 8004032:	2800      	cmp	r0, #0
 8004034:	d133      	bne.n	800409e <__gnu_unwind_pr_common+0x1c6>
 8004036:	f10a 0a04 	add.w	sl, sl, #4
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004042:	46ab      	mov	fp, r5
 8004044:	46b8      	mov	r8, r7
 8004046:	4650      	mov	r0, sl
 8004048:	9605      	str	r6, [sp, #20]
 800404a:	9f02      	ldr	r7, [sp, #8]
 800404c:	e011      	b.n	8004072 <__gnu_unwind_pr_common+0x19a>
 800404e:	9900      	ldr	r1, [sp, #0]
 8004050:	428e      	cmp	r6, r1
 8004052:	f000 80c0 	beq.w	80041d6 <__gnu_unwind_pr_common+0x2fe>
 8004056:	9709      	str	r7, [sp, #36]	; 0x24
 8004058:	f7ff fda8 	bl	8003bac <_Unwind_decode_target2>
 800405c:	4652      	mov	r2, sl
 800405e:	4601      	mov	r1, r0
 8004060:	ab09      	add	r3, sp, #36	; 0x24
 8004062:	4620      	mov	r0, r4
 8004064:	f3af 8000 	nop.w
 8004068:	46b1      	mov	r9, r6
 800406a:	b998      	cbnz	r0, 8004094 <__gnu_unwind_pr_common+0x1bc>
 800406c:	1d28      	adds	r0, r5, #4
 800406e:	f106 0901 	add.w	r9, r6, #1
 8004072:	1d05      	adds	r5, r0, #4
 8004074:	9709      	str	r7, [sp, #36]	; 0x24
 8004076:	f7ff fd99 	bl	8003bac <_Unwind_decode_target2>
 800407a:	ab09      	add	r3, sp, #36	; 0x24
 800407c:	4601      	mov	r1, r0
 800407e:	2200      	movs	r2, #0
 8004080:	4620      	mov	r0, r4
 8004082:	f3af 8000 	nop.w
 8004086:	4682      	mov	sl, r0
 8004088:	f109 0601 	add.w	r6, r9, #1
 800408c:	4628      	mov	r0, r5
 800408e:	f1ba 0f00 	cmp.w	sl, #0
 8004092:	d0dc      	beq.n	800404e <__gnu_unwind_pr_common+0x176>
 8004094:	4647      	mov	r7, r8
 8004096:	9e05      	ldr	r6, [sp, #20]
 8004098:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800409c:	465d      	mov	r5, fp
 800409e:	9a00      	ldr	r2, [sp, #0]
 80040a0:	454a      	cmp	r2, r9
 80040a2:	d065      	beq.n	8004170 <__gnu_unwind_pr_common+0x298>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db7c      	blt.n	80041a4 <__gnu_unwind_pr_common+0x2cc>
 80040aa:	9900      	ldr	r1, [sp, #0]
 80040ac:	1c48      	adds	r0, r1, #1
 80040ae:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80040b2:	e737      	b.n	8003f24 <__gnu_unwind_pr_common+0x4c>
 80040b4:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80040b8:	3508      	adds	r5, #8
 80040ba:	e741      	b.n	8003f40 <__gnu_unwind_pr_common+0x68>
 80040bc:	040b      	lsls	r3, r1, #16
 80040be:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80040c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80040c4:	2202      	movs	r2, #2
 80040c6:	f1b8 0f02 	cmp.w	r8, #2
 80040ca:	9306      	str	r3, [sp, #24]
 80040cc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80040d0:	bf08      	it	eq
 80040d2:	6ba5      	ldreq	r5, [r4, #56]	; 0x38
 80040d4:	f011 0301 	ands.w	r3, r1, #1
 80040d8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80040dc:	f88d 2020 	strb.w	r2, [sp, #32]
 80040e0:	f43f af1c 	beq.w	8003f1c <__gnu_unwind_pr_common+0x44>
 80040e4:	2000      	movs	r0, #0
 80040e6:	9001      	str	r0, [sp, #4]
 80040e8:	4638      	mov	r0, r7
 80040ea:	a906      	add	r1, sp, #24
 80040ec:	f000 fc04 	bl	80048f8 <__gnu_unwind_execute>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f47f af76 	bne.w	8003fe2 <__gnu_unwind_pr_common+0x10a>
 80040f6:	9a01      	ldr	r2, [sp, #4]
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	d143      	bne.n	8004184 <__gnu_unwind_pr_common+0x2ac>
 80040fc:	2008      	movs	r0, #8
 80040fe:	e771      	b.n	8003fe4 <__gnu_unwind_pr_common+0x10c>
 8004100:	210d      	movs	r1, #13
 8004102:	4638      	mov	r0, r7
 8004104:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8004108:	f7ff feb8 	bl	8003e7c <_Unwind_GetGR>
 800410c:	4581      	cmp	r9, r0
 800410e:	d1c9      	bne.n	80040a4 <__gnu_unwind_pr_common+0x1cc>
 8004110:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004112:	4295      	cmp	r5, r2
 8004114:	d1c6      	bne.n	80040a4 <__gnu_unwind_pr_common+0x1cc>
 8004116:	9800      	ldr	r0, [sp, #0]
 8004118:	1d29      	adds	r1, r5, #4
 800411a:	2200      	movs	r2, #0
 800411c:	2304      	movs	r3, #4
 800411e:	62a0      	str	r0, [r4, #40]	; 0x28
 8004120:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004122:	6323      	str	r3, [r4, #48]	; 0x30
 8004124:	6361      	str	r1, [r4, #52]	; 0x34
 8004126:	6828      	ldr	r0, [r5, #0]
 8004128:	2800      	cmp	r0, #0
 800412a:	db57      	blt.n	80041dc <__gnu_unwind_pr_common+0x304>
 800412c:	2201      	movs	r2, #1
 800412e:	9201      	str	r2, [sp, #4]
 8004130:	e7bb      	b.n	80040aa <__gnu_unwind_pr_common+0x1d2>
 8004132:	210d      	movs	r1, #13
 8004134:	4638      	mov	r0, r7
 8004136:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800413a:	f7ff fe9f 	bl	8003e7c <_Unwind_GetGR>
 800413e:	4581      	cmp	r9, r0
 8004140:	f47f af4a 	bne.w	8003fd8 <__gnu_unwind_pr_common+0x100>
 8004144:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004146:	428d      	cmp	r5, r1
 8004148:	f47f af46 	bne.w	8003fd8 <__gnu_unwind_pr_common+0x100>
 800414c:	4628      	mov	r0, r5
 800414e:	f7ff fd33 	bl	8003bb8 <selfrel_offset31>
 8004152:	210f      	movs	r1, #15
 8004154:	4602      	mov	r2, r0
 8004156:	4638      	mov	r0, r7
 8004158:	f7ff feb0 	bl	8003ebc <_Unwind_SetGR>
 800415c:	4638      	mov	r0, r7
 800415e:	2100      	movs	r1, #0
 8004160:	4622      	mov	r2, r4
 8004162:	f7ff feab 	bl	8003ebc <_Unwind_SetGR>
 8004166:	2007      	movs	r0, #7
 8004168:	e73c      	b.n	8003fe4 <__gnu_unwind_pr_common+0x10c>
 800416a:	9900      	ldr	r1, [sp, #0]
 800416c:	2900      	cmp	r1, #0
 800416e:	d19a      	bne.n	80040a6 <__gnu_unwind_pr_common+0x1ce>
 8004170:	4638      	mov	r0, r7
 8004172:	210d      	movs	r1, #13
 8004174:	f7ff fe82 	bl	8003e7c <_Unwind_GetGR>
 8004178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417a:	6220      	str	r0, [r4, #32]
 800417c:	6263      	str	r3, [r4, #36]	; 0x24
 800417e:	62a5      	str	r5, [r4, #40]	; 0x28
 8004180:	2006      	movs	r0, #6
 8004182:	e72f      	b.n	8003fe4 <__gnu_unwind_pr_common+0x10c>
 8004184:	210f      	movs	r1, #15
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff fe78 	bl	8003e7c <_Unwind_GetGR>
 800418c:	210e      	movs	r1, #14
 800418e:	4602      	mov	r2, r0
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff fe93 	bl	8003ebc <_Unwind_SetGR>
 8004196:	4638      	mov	r0, r7
 8004198:	210f      	movs	r1, #15
 800419a:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <__gnu_unwind_pr_common+0x310>)
 800419c:	f7ff fe8e 	bl	8003ebc <_Unwind_SetGR>
 80041a0:	2007      	movs	r0, #7
 80041a2:	e71f      	b.n	8003fe4 <__gnu_unwind_pr_common+0x10c>
 80041a4:	3504      	adds	r5, #4
 80041a6:	e780      	b.n	80040aa <__gnu_unwind_pr_common+0x1d2>
 80041a8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80041ac:	3508      	adds	r5, #8
 80041ae:	e6b9      	b.n	8003f24 <__gnu_unwind_pr_common+0x4c>
 80041b0:	4628      	mov	r0, r5
 80041b2:	f7ff fd01 	bl	8003bb8 <selfrel_offset31>
 80041b6:	3504      	adds	r5, #4
 80041b8:	4606      	mov	r6, r0
 80041ba:	63a5      	str	r5, [r4, #56]	; 0x38
 80041bc:	4620      	mov	r0, r4
 80041be:	f3af 8000 	nop.w
 80041c2:	2800      	cmp	r0, #0
 80041c4:	f43f af0d 	beq.w	8003fe2 <__gnu_unwind_pr_common+0x10a>
 80041c8:	4638      	mov	r0, r7
 80041ca:	210f      	movs	r1, #15
 80041cc:	4632      	mov	r2, r6
 80041ce:	f7ff fe75 	bl	8003ebc <_Unwind_SetGR>
 80041d2:	2007      	movs	r0, #7
 80041d4:	e706      	b.n	8003fe4 <__gnu_unwind_pr_common+0x10c>
 80041d6:	465d      	mov	r5, fp
 80041d8:	4647      	mov	r7, r8
 80041da:	e7c9      	b.n	8004170 <__gnu_unwind_pr_common+0x298>
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80041e4:	e7b3      	b.n	800414e <__gnu_unwind_pr_common+0x276>
 80041e6:	bf00      	nop
 80041e8:	00000000 	.word	0x00000000

080041ec <__aeabi_unwind_cpp_pr2>:
 80041ec:	2302      	movs	r3, #2
 80041ee:	e673      	b.n	8003ed8 <__gnu_unwind_pr_common>

080041f0 <__aeabi_unwind_cpp_pr1>:
 80041f0:	2301      	movs	r3, #1
 80041f2:	e671      	b.n	8003ed8 <__gnu_unwind_pr_common>

080041f4 <__aeabi_unwind_cpp_pr0>:
 80041f4:	2300      	movs	r3, #0
 80041f6:	e66f      	b.n	8003ed8 <__gnu_unwind_pr_common>

080041f8 <_Unwind_VRS_Pop>:
 80041f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041fc:	4604      	mov	r4, r0
 80041fe:	b0e8      	sub	sp, #416	; 0x1a0
 8004200:	2904      	cmp	r1, #4
 8004202:	d80c      	bhi.n	800421e <_Unwind_VRS_Pop+0x26>
 8004204:	e8df f001 	tbb	[pc, r1]
 8004208:	94920339 	.word	0x94920339
 800420c:	0f          	.byte	0x0f
 800420d:	00          	.byte	0x00
 800420e:	0c15      	lsrs	r5, r2, #16
 8004210:	2b01      	cmp	r3, #1
 8004212:	b296      	uxth	r6, r2
 8004214:	f000 8178 	beq.w	8004508 <_Unwind_VRS_Pop+0x310>
 8004218:	2b05      	cmp	r3, #5
 800421a:	f000 80c8 	beq.w	80043ae <_Unwind_VRS_Pop+0x1b6>
 800421e:	2002      	movs	r0, #2
 8004220:	b068      	add	sp, #416	; 0x1a0
 8004222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f9      	bne.n	800421e <_Unwind_VRS_Pop+0x26>
 800422a:	2a10      	cmp	r2, #16
 800422c:	d8f7      	bhi.n	800421e <_Unwind_VRS_Pop+0x26>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	06d9      	lsls	r1, r3, #27
 8004232:	f100 8173 	bmi.w	800451c <_Unwind_VRS_Pop+0x324>
 8004236:	a864      	add	r0, sp, #400	; 0x190
 8004238:	9201      	str	r2, [sp, #4]
 800423a:	f000 facf 	bl	80047dc <__gnu_Unwind_Save_WMMXC>
 800423e:	9a01      	ldr	r2, [sp, #4]
 8004240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004242:	07d0      	lsls	r0, r2, #31
 8004244:	bf44      	itt	mi
 8004246:	f853 0b04 	ldrmi.w	r0, [r3], #4
 800424a:	9064      	strmi	r0, [sp, #400]	; 0x190
 800424c:	0791      	lsls	r1, r2, #30
 800424e:	bf44      	itt	mi
 8004250:	f853 1b04 	ldrmi.w	r1, [r3], #4
 8004254:	9165      	strmi	r1, [sp, #404]	; 0x194
 8004256:	0750      	lsls	r0, r2, #29
 8004258:	bf48      	it	mi
 800425a:	f853 1b04 	ldrmi.w	r1, [r3], #4
 800425e:	a864      	add	r0, sp, #400	; 0x190
 8004260:	bf48      	it	mi
 8004262:	9166      	strmi	r1, [sp, #408]	; 0x198
 8004264:	0711      	lsls	r1, r2, #28
 8004266:	bf48      	it	mi
 8004268:	f853 2b04 	ldrmi.w	r2, [r3], #4
 800426c:	63a3      	str	r3, [r4, #56]	; 0x38
 800426e:	bf48      	it	mi
 8004270:	9267      	strmi	r2, [sp, #412]	; 0x19c
 8004272:	f000 faa9 	bl	80047c8 <__gnu_Unwind_Restore_WMMXC>
 8004276:	2000      	movs	r0, #0
 8004278:	e7d2      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1cf      	bne.n	800421e <_Unwind_VRS_Pop+0x26>
 800427e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004280:	07d0      	lsls	r0, r2, #31
 8004282:	b291      	uxth	r1, r2
 8004284:	bf44      	itt	mi
 8004286:	f853 2b04 	ldrmi.w	r2, [r3], #4
 800428a:	6062      	strmi	r2, [r4, #4]
 800428c:	078a      	lsls	r2, r1, #30
 800428e:	bf44      	itt	mi
 8004290:	f853 2b04 	ldrmi.w	r2, [r3], #4
 8004294:	60a2      	strmi	r2, [r4, #8]
 8004296:	0748      	lsls	r0, r1, #29
 8004298:	bf44      	itt	mi
 800429a:	f853 2b04 	ldrmi.w	r2, [r3], #4
 800429e:	60e2      	strmi	r2, [r4, #12]
 80042a0:	070a      	lsls	r2, r1, #28
 80042a2:	bf44      	itt	mi
 80042a4:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042a8:	6122      	strmi	r2, [r4, #16]
 80042aa:	06c8      	lsls	r0, r1, #27
 80042ac:	bf44      	itt	mi
 80042ae:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042b2:	6162      	strmi	r2, [r4, #20]
 80042b4:	068a      	lsls	r2, r1, #26
 80042b6:	bf44      	itt	mi
 80042b8:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042bc:	61a2      	strmi	r2, [r4, #24]
 80042be:	0648      	lsls	r0, r1, #25
 80042c0:	bf44      	itt	mi
 80042c2:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042c6:	61e2      	strmi	r2, [r4, #28]
 80042c8:	060a      	lsls	r2, r1, #24
 80042ca:	bf44      	itt	mi
 80042cc:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042d0:	6222      	strmi	r2, [r4, #32]
 80042d2:	05c8      	lsls	r0, r1, #23
 80042d4:	bf44      	itt	mi
 80042d6:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042da:	6262      	strmi	r2, [r4, #36]	; 0x24
 80042dc:	058a      	lsls	r2, r1, #22
 80042de:	bf44      	itt	mi
 80042e0:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042e4:	62a2      	strmi	r2, [r4, #40]	; 0x28
 80042e6:	0548      	lsls	r0, r1, #21
 80042e8:	bf44      	itt	mi
 80042ea:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042ee:	62e2      	strmi	r2, [r4, #44]	; 0x2c
 80042f0:	050a      	lsls	r2, r1, #20
 80042f2:	bf44      	itt	mi
 80042f4:	f853 2b04 	ldrmi.w	r2, [r3], #4
 80042f8:	6322      	strmi	r2, [r4, #48]	; 0x30
 80042fa:	04c8      	lsls	r0, r1, #19
 80042fc:	bf44      	itt	mi
 80042fe:	f853 2b04 	ldrmi.w	r2, [r3], #4
 8004302:	6362      	strmi	r2, [r4, #52]	; 0x34
 8004304:	f411 5000 	ands.w	r0, r1, #8192	; 0x2000
 8004308:	bf1c      	itt	ne
 800430a:	f853 2b04 	ldrne.w	r2, [r3], #4
 800430e:	63a2      	strne	r2, [r4, #56]	; 0x38
 8004310:	044a      	lsls	r2, r1, #17
 8004312:	bf44      	itt	mi
 8004314:	f853 2b04 	ldrmi.w	r2, [r3], #4
 8004318:	63e2      	strmi	r2, [r4, #60]	; 0x3c
 800431a:	040a      	lsls	r2, r1, #16
 800431c:	bf44      	itt	mi
 800431e:	f853 2b04 	ldrmi.w	r2, [r3], #4
 8004322:	6422      	strmi	r2, [r4, #64]	; 0x40
 8004324:	2800      	cmp	r0, #0
 8004326:	d140      	bne.n	80043aa <_Unwind_VRS_Pop+0x1b2>
 8004328:	63a3      	str	r3, [r4, #56]	; 0x38
 800432a:	e779      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 800432c:	2001      	movs	r0, #1
 800432e:	e777      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 8004330:	2b03      	cmp	r3, #3
 8004332:	f47f af74 	bne.w	800421e <_Unwind_VRS_Pop+0x26>
 8004336:	0c16      	lsrs	r6, r2, #16
 8004338:	b295      	uxth	r5, r2
 800433a:	19aa      	adds	r2, r5, r6
 800433c:	2a10      	cmp	r2, #16
 800433e:	f63f af6e 	bhi.w	800421e <_Unwind_VRS_Pop+0x26>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	0718      	lsls	r0, r3, #28
 8004346:	f100 810a 	bmi.w	800455e <_Unwind_VRS_Pop+0x366>
 800434a:	a844      	add	r0, sp, #272	; 0x110
 800434c:	f000 fa1a 	bl	8004784 <__gnu_Unwind_Save_WMMXD>
 8004350:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004352:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8004356:	463b      	mov	r3, r7
 8004358:	b30d      	cbz	r5, 800439e <_Unwind_VRS_Pop+0x1a6>
 800435a:	f10e 3cff 	add.w	ip, lr, #4294967295
 800435e:	a944      	add	r1, sp, #272	; 0x110
 8004360:	f853 0b04 	ldr.w	r0, [r3], #4
 8004364:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8004368:	4662      	mov	r2, ip
 800436a:	f00c 0101 	and.w	r1, ip, #1
 800436e:	f846 0b04 	str.w	r0, [r6], #4
 8004372:	b192      	cbz	r2, 800439a <_Unwind_VRS_Pop+0x1a2>
 8004374:	b129      	cbz	r1, 8004382 <_Unwind_VRS_Pop+0x18a>
 8004376:	f853 1b04 	ldr.w	r1, [r3], #4
 800437a:	3a01      	subs	r2, #1
 800437c:	f846 1b04 	str.w	r1, [r6], #4
 8004380:	d00b      	beq.n	800439a <_Unwind_VRS_Pop+0x1a2>
 8004382:	4618      	mov	r0, r3
 8004384:	f850 5b04 	ldr.w	r5, [r0], #4
 8004388:	4631      	mov	r1, r6
 800438a:	f841 5b04 	str.w	r5, [r1], #4
 800438e:	685d      	ldr	r5, [r3, #4]
 8004390:	1d03      	adds	r3, r0, #4
 8004392:	6075      	str	r5, [r6, #4]
 8004394:	1d0e      	adds	r6, r1, #4
 8004396:	3a02      	subs	r2, #2
 8004398:	d1f3      	bne.n	8004382 <_Unwind_VRS_Pop+0x18a>
 800439a:	eb07 038e 	add.w	r3, r7, lr, lsl #2
 800439e:	a844      	add	r0, sp, #272	; 0x110
 80043a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80043a2:	f000 f9cd 	bl	8004740 <__gnu_Unwind_Restore_WMMXD>
 80043a6:	2000      	movs	r0, #0
 80043a8:	e73a      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 80043aa:	2000      	movs	r0, #0
 80043ac:	e738      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 80043ae:	1977      	adds	r7, r6, r5
 80043b0:	2220      	movs	r2, #32
 80043b2:	42ba      	cmp	r2, r7
 80043b4:	f4ff af33 	bcc.w	800421e <_Unwind_VRS_Pop+0x26>
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f000 80a8 	beq.w	800450e <_Unwind_VRS_Pop+0x316>
 80043be:	2d0f      	cmp	r5, #15
 80043c0:	f240 80a8 	bls.w	8004514 <_Unwind_VRS_Pop+0x31c>
 80043c4:	4637      	mov	r7, r6
 80043c6:	b1f6      	cbz	r6, 8004406 <_Unwind_VRS_Pop+0x20e>
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	f47f af28 	bne.w	800421e <_Unwind_VRS_Pop+0x26>
 80043ce:	2d0f      	cmp	r5, #15
 80043d0:	d811      	bhi.n	80043f6 <_Unwind_VRS_Pop+0x1fe>
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	07d0      	lsls	r0, r2, #31
 80043d6:	d50e      	bpl.n	80043f6 <_Unwind_VRS_Pop+0x1fe>
 80043d8:	f022 0101 	bic.w	r1, r2, #1
 80043dc:	2b05      	cmp	r3, #5
 80043de:	6021      	str	r1, [r4, #0]
 80043e0:	f000 80da 	beq.w	8004598 <_Unwind_VRS_Pop+0x3a0>
 80043e4:	f022 0203 	bic.w	r2, r2, #3
 80043e8:	4620      	mov	r0, r4
 80043ea:	f840 2b48 	str.w	r2, [r0], #72
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	f000 f992 	bl	8004718 <__gnu_Unwind_Save_VFP>
 80043f4:	9b01      	ldr	r3, [sp, #4]
 80043f6:	b11f      	cbz	r7, 8004400 <_Unwind_VRS_Pop+0x208>
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	0751      	lsls	r1, r2, #29
 80043fc:	f100 80b7 	bmi.w	800456e <_Unwind_VRS_Pop+0x376>
 8004400:	2b01      	cmp	r3, #1
 8004402:	f000 80be 	beq.w	8004582 <_Unwind_VRS_Pop+0x38a>
 8004406:	2d0f      	cmp	r5, #15
 8004408:	d974      	bls.n	80044f4 <_Unwind_VRS_Pop+0x2fc>
 800440a:	2f00      	cmp	r7, #0
 800440c:	f040 809f 	bne.w	800454e <_Unwind_VRS_Pop+0x356>
 8004410:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8004414:	2e00      	cmp	r6, #0
 8004416:	46c8      	mov	r8, r9
 8004418:	dd2e      	ble.n	8004478 <_Unwind_VRS_Pop+0x280>
 800441a:	4649      	mov	r1, r9
 800441c:	ea4f 0846 	mov.w	r8, r6, lsl #1
 8004420:	f10d 0c08 	add.w	ip, sp, #8
 8004424:	f851 6b04 	ldr.w	r6, [r1], #4
 8004428:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 800442c:	f108 30ff 	add.w	r0, r8, #4294967295
 8004430:	f000 0a01 	and.w	sl, r0, #1
 8004434:	f842 6b04 	str.w	r6, [r2], #4
 8004438:	f1a8 0c02 	sub.w	ip, r8, #2
 800443c:	b1d0      	cbz	r0, 8004474 <_Unwind_VRS_Pop+0x27c>
 800443e:	f1ba 0f00 	cmp.w	sl, #0
 8004442:	d008      	beq.n	8004456 <_Unwind_VRS_Pop+0x25e>
 8004444:	f851 0b04 	ldr.w	r0, [r1], #4
 8004448:	f10c 3cff 	add.w	ip, ip, #4294967295
 800444c:	f1bc 3fff 	cmp.w	ip, #4294967295
 8004450:	f842 0b04 	str.w	r0, [r2], #4
 8004454:	d00e      	beq.n	8004474 <_Unwind_VRS_Pop+0x27c>
 8004456:	460e      	mov	r6, r1
 8004458:	f856 ab04 	ldr.w	sl, [r6], #4
 800445c:	4610      	mov	r0, r2
 800445e:	f840 ab04 	str.w	sl, [r0], #4
 8004462:	6849      	ldr	r1, [r1, #4]
 8004464:	f1ac 0c02 	sub.w	ip, ip, #2
 8004468:	6051      	str	r1, [r2, #4]
 800446a:	1d31      	adds	r1, r6, #4
 800446c:	1d02      	adds	r2, r0, #4
 800446e:	f1bc 3fff 	cmp.w	ip, #4294967295
 8004472:	d1f0      	bne.n	8004456 <_Unwind_VRS_Pop+0x25e>
 8004474:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8004478:	b39f      	cbz	r7, 80044e2 <_Unwind_VRS_Pop+0x2ea>
 800447a:	2d10      	cmp	r5, #16
 800447c:	bf2c      	ite	cs
 800447e:	462e      	movcs	r6, r5
 8004480:	2610      	movcc	r6, #16
 8004482:	aa68      	add	r2, sp, #416	; 0x1a0
 8004484:	4641      	mov	r1, r8
 8004486:	eb02 0ac6 	add.w	sl, r2, r6, lsl #3
 800448a:	ea4f 0947 	mov.w	r9, r7, lsl #1
 800448e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004492:	f5aa 72c8 	sub.w	r2, sl, #400	; 0x190
 8004496:	f109 30ff 	add.w	r0, r9, #4294967295
 800449a:	f000 0a01 	and.w	sl, r0, #1
 800449e:	f842 6b04 	str.w	r6, [r2], #4
 80044a2:	f1a9 0c02 	sub.w	ip, r9, #2
 80044a6:	b1d0      	cbz	r0, 80044de <_Unwind_VRS_Pop+0x2e6>
 80044a8:	f1ba 0f00 	cmp.w	sl, #0
 80044ac:	d008      	beq.n	80044c0 <_Unwind_VRS_Pop+0x2c8>
 80044ae:	f851 0b04 	ldr.w	r0, [r1], #4
 80044b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80044b6:	f1bc 3fff 	cmp.w	ip, #4294967295
 80044ba:	f842 0b04 	str.w	r0, [r2], #4
 80044be:	d00e      	beq.n	80044de <_Unwind_VRS_Pop+0x2e6>
 80044c0:	460e      	mov	r6, r1
 80044c2:	f856 ab04 	ldr.w	sl, [r6], #4
 80044c6:	4610      	mov	r0, r2
 80044c8:	f840 ab04 	str.w	sl, [r0], #4
 80044cc:	6849      	ldr	r1, [r1, #4]
 80044ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80044d2:	6051      	str	r1, [r2, #4]
 80044d4:	1d31      	adds	r1, r6, #4
 80044d6:	1d02      	adds	r2, r0, #4
 80044d8:	f1bc 3fff 	cmp.w	ip, #4294967295
 80044dc:	d1f0      	bne.n	80044c0 <_Unwind_VRS_Pop+0x2c8>
 80044de:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d02b      	beq.n	800453e <_Unwind_VRS_Pop+0x346>
 80044e6:	2d0f      	cmp	r5, #15
 80044e8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80044ec:	d908      	bls.n	8004500 <_Unwind_VRS_Pop+0x308>
 80044ee:	b9ff      	cbnz	r7, 8004530 <_Unwind_VRS_Pop+0x338>
 80044f0:	4638      	mov	r0, r7
 80044f2:	e695      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 80044f4:	a802      	add	r0, sp, #8
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	f000 f916 	bl	8004728 <__gnu_Unwind_Save_VFP_D>
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	e784      	b.n	800440a <_Unwind_VRS_Pop+0x212>
 8004500:	a802      	add	r0, sp, #8
 8004502:	f000 f90d 	bl	8004720 <__gnu_Unwind_Restore_VFP_D>
 8004506:	e7f2      	b.n	80044ee <_Unwind_VRS_Pop+0x2f6>
 8004508:	1977      	adds	r7, r6, r5
 800450a:	2210      	movs	r2, #16
 800450c:	e751      	b.n	80043b2 <_Unwind_VRS_Pop+0x1ba>
 800450e:	2d0f      	cmp	r5, #15
 8004510:	f63f ae85 	bhi.w	800421e <_Unwind_VRS_Pop+0x26>
 8004514:	2f10      	cmp	r7, #16
 8004516:	d910      	bls.n	800453a <_Unwind_VRS_Pop+0x342>
 8004518:	3f10      	subs	r7, #16
 800451a:	e755      	b.n	80043c8 <_Unwind_VRS_Pop+0x1d0>
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8004526:	9201      	str	r2, [sp, #4]
 8004528:	f000 f958 	bl	80047dc <__gnu_Unwind_Save_WMMXC>
 800452c:	9a01      	ldr	r2, [sp, #4]
 800452e:	e682      	b.n	8004236 <_Unwind_VRS_Pop+0x3e>
 8004530:	a824      	add	r0, sp, #144	; 0x90
 8004532:	f000 f8fd 	bl	8004730 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8004536:	2000      	movs	r0, #0
 8004538:	e672      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 800453a:	2700      	movs	r7, #0
 800453c:	e747      	b.n	80043ce <_Unwind_VRS_Pop+0x1d6>
 800453e:	f108 0304 	add.w	r3, r8, #4
 8004542:	a802      	add	r0, sp, #8
 8004544:	63a3      	str	r3, [r4, #56]	; 0x38
 8004546:	f000 f8e3 	bl	8004710 <__gnu_Unwind_Restore_VFP>
 800454a:	2000      	movs	r0, #0
 800454c:	e668      	b.n	8004220 <_Unwind_VRS_Pop+0x28>
 800454e:	a824      	add	r0, sp, #144	; 0x90
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	f1c5 0610 	rsb	r6, r5, #16
 8004556:	f000 f8ef 	bl	8004738 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	e758      	b.n	8004410 <_Unwind_VRS_Pop+0x218>
 800455e:	f023 0708 	bic.w	r7, r3, #8
 8004562:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8004566:	6027      	str	r7, [r4, #0]
 8004568:	f000 f90c 	bl	8004784 <__gnu_Unwind_Save_WMMXD>
 800456c:	e6ed      	b.n	800434a <_Unwind_VRS_Pop+0x152>
 800456e:	f022 0104 	bic.w	r1, r2, #4
 8004572:	4620      	mov	r0, r4
 8004574:	f840 1bd0 	str.w	r1, [r0], #208
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	f000 f8dd 	bl	8004738 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800457e:	9b01      	ldr	r3, [sp, #4]
 8004580:	e73e      	b.n	8004400 <_Unwind_VRS_Pop+0x208>
 8004582:	a802      	add	r0, sp, #8
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	f000 f8c7 	bl	8004718 <__gnu_Unwind_Save_VFP>
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	2f00      	cmp	r7, #0
 800458e:	f43f af3f 	beq.w	8004410 <_Unwind_VRS_Pop+0x218>
 8004592:	f1c5 0610 	rsb	r6, r5, #16
 8004596:	e73b      	b.n	8004410 <_Unwind_VRS_Pop+0x218>
 8004598:	f041 0102 	orr.w	r1, r1, #2
 800459c:	4620      	mov	r0, r4
 800459e:	f840 1b48 	str.w	r1, [r0], #72
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	f000 f8c0 	bl	8004728 <__gnu_Unwind_Save_VFP_D>
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	e724      	b.n	80043f6 <_Unwind_VRS_Pop+0x1fe>

080045ac <_Unwind_GetCFA>:
 80045ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80045ae:	4770      	bx	lr

080045b0 <__gnu_Unwind_RaiseException>:
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b2:	460d      	mov	r5, r1
 80045b4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80045b6:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80045ba:	6429      	str	r1, [r5, #64]	; 0x40
 80045bc:	ae01      	add	r6, sp, #4
 80045be:	1d2f      	adds	r7, r5, #4
 80045c0:	4604      	mov	r4, r0
 80045c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80045c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80045c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80045c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80045ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80045cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80045ce:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80045d2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80045de:	4620      	mov	r0, r4
 80045e0:	f7ff fb26 	bl	8003c30 <get_eit_entry>
 80045e4:	b958      	cbnz	r0, 80045fe <__gnu_Unwind_RaiseException+0x4e>
 80045e6:	6926      	ldr	r6, [r4, #16]
 80045e8:	4621      	mov	r1, r4
 80045ea:	466a      	mov	r2, sp
 80045ec:	47b0      	blx	r6
 80045ee:	2808      	cmp	r0, #8
 80045f0:	4606      	mov	r6, r0
 80045f2:	d0f3      	beq.n	80045dc <__gnu_Unwind_RaiseException+0x2c>
 80045f4:	4668      	mov	r0, sp
 80045f6:	f7ff fb7f 	bl	8003cf8 <restore_non_core_regs>
 80045fa:	2e06      	cmp	r6, #6
 80045fc:	d003      	beq.n	8004606 <__gnu_Unwind_RaiseException+0x56>
 80045fe:	2009      	movs	r0, #9
 8004600:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004606:	4620      	mov	r0, r4
 8004608:	4629      	mov	r1, r5
 800460a:	f7ff fc0b 	bl	8003e24 <unwind_phase2>
 800460e:	bf00      	nop

08004610 <__gnu_Unwind_ForcedUnwind>:
 8004610:	b410      	push	{r4}
 8004612:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8004614:	60c1      	str	r1, [r0, #12]
 8004616:	6182      	str	r2, [r0, #24]
 8004618:	4619      	mov	r1, r3
 800461a:	2200      	movs	r2, #0
 800461c:	641c      	str	r4, [r3, #64]	; 0x40
 800461e:	bc10      	pop	{r4}
 8004620:	f7ff bb96 	b.w	8003d50 <unwind_phase2_forced>

08004624 <__gnu_Unwind_Resume>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	6942      	ldr	r2, [r0, #20]
 8004628:	68c3      	ldr	r3, [r0, #12]
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
 800462e:	640a      	str	r2, [r1, #64]	; 0x40
 8004630:	b123      	cbz	r3, 800463c <__gnu_Unwind_Resume+0x18>
 8004632:	2201      	movs	r2, #1
 8004634:	f7ff fb8c 	bl	8003d50 <unwind_phase2_forced>
 8004638:	f005 fca4 	bl	8009f84 <abort>
 800463c:	6903      	ldr	r3, [r0, #16]
 800463e:	4621      	mov	r1, r4
 8004640:	2002      	movs	r0, #2
 8004642:	462a      	mov	r2, r5
 8004644:	4798      	blx	r3
 8004646:	2807      	cmp	r0, #7
 8004648:	d003      	beq.n	8004652 <__gnu_Unwind_Resume+0x2e>
 800464a:	2808      	cmp	r0, #8
 800464c:	d004      	beq.n	8004658 <__gnu_Unwind_Resume+0x34>
 800464e:	f005 fc99 	bl	8009f84 <abort>
 8004652:	1d28      	adds	r0, r5, #4
 8004654:	f000 f850 	bl	80046f8 <__restore_core_regs>
 8004658:	4620      	mov	r0, r4
 800465a:	4629      	mov	r1, r5
 800465c:	f7ff fbe2 	bl	8003e24 <unwind_phase2>

08004660 <__gnu_Unwind_Resume_or_Rethrow>:
 8004660:	68c3      	ldr	r3, [r0, #12]
 8004662:	b123      	cbz	r3, 800466e <__gnu_Unwind_Resume_or_Rethrow+0xe>
 8004664:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8004666:	640a      	str	r2, [r1, #64]	; 0x40
 8004668:	2200      	movs	r2, #0
 800466a:	f7ff bb71 	b.w	8003d50 <unwind_phase2_forced>
 800466e:	e79f      	b.n	80045b0 <__gnu_Unwind_RaiseException>

08004670 <_Unwind_Complete>:
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <_Unwind_DeleteException>:
 8004674:	b508      	push	{r3, lr}
 8004676:	6883      	ldr	r3, [r0, #8]
 8004678:	4601      	mov	r1, r0
 800467a:	b10b      	cbz	r3, 8004680 <_Unwind_DeleteException+0xc>
 800467c:	2001      	movs	r0, #1
 800467e:	4798      	blx	r3
 8004680:	bd08      	pop	{r3, pc}
 8004682:	bf00      	nop

08004684 <__gnu_Unwind_Backtrace>:
 8004684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004686:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8004688:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800468c:	6414      	str	r4, [r2, #64]	; 0x40
 800468e:	ae01      	add	r6, sp, #4
 8004690:	1d17      	adds	r7, r2, #4
 8004692:	4605      	mov	r5, r0
 8004694:	460c      	mov	r4, r1
 8004696:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004698:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800469a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800469c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800469e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80046a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80046a2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80046a6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80046b2:	a890      	add	r0, sp, #576	; 0x240
 80046b4:	f7ff fabc 	bl	8003c30 <get_eit_entry>
 80046b8:	4603      	mov	r3, r0
 80046ba:	aa90      	add	r2, sp, #576	; 0x240
 80046bc:	4668      	mov	r0, sp
 80046be:	210c      	movs	r1, #12
 80046c0:	b9bb      	cbnz	r3, 80046f2 <__gnu_Unwind_Backtrace+0x6e>
 80046c2:	f7ff fbfb 	bl	8003ebc <_Unwind_SetGR>
 80046c6:	4621      	mov	r1, r4
 80046c8:	4668      	mov	r0, sp
 80046ca:	47a8      	blx	r5
 80046cc:	4606      	mov	r6, r0
 80046ce:	a990      	add	r1, sp, #576	; 0x240
 80046d0:	2008      	movs	r0, #8
 80046d2:	466a      	mov	r2, sp
 80046d4:	b96e      	cbnz	r6, 80046f2 <__gnu_Unwind_Backtrace+0x6e>
 80046d6:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80046d8:	4798      	blx	r3
 80046da:	2805      	cmp	r0, #5
 80046dc:	4606      	mov	r6, r0
 80046de:	d001      	beq.n	80046e4 <__gnu_Unwind_Backtrace+0x60>
 80046e0:	2809      	cmp	r0, #9
 80046e2:	d1e5      	bne.n	80046b0 <__gnu_Unwind_Backtrace+0x2c>
 80046e4:	4668      	mov	r0, sp
 80046e6:	f7ff fb07 	bl	8003cf8 <restore_non_core_regs>
 80046ea:	4630      	mov	r0, r6
 80046ec:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 80046f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f2:	2609      	movs	r6, #9
 80046f4:	e7f6      	b.n	80046e4 <__gnu_Unwind_Backtrace+0x60>
 80046f6:	bf00      	nop

080046f8 <__restore_core_regs>:
 80046f8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80046fc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8004700:	469c      	mov	ip, r3
 8004702:	46a6      	mov	lr, r4
 8004704:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8004708:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800470c:	46e5      	mov	sp, ip
 800470e:	bd00      	pop	{pc}

08004710 <__gnu_Unwind_Restore_VFP>:
 8004710:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <__gnu_Unwind_Save_VFP>:
 8004718:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop

08004720 <__gnu_Unwind_Restore_VFP_D>:
 8004720:	ec90 0b20 	vldmia	r0, {d0-d15}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <__gnu_Unwind_Save_VFP_D>:
 8004728:	ec80 0b20 	vstmia	r0, {d0-d15}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8004730:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8004738:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <__gnu_Unwind_Restore_WMMXD>:
 8004740:	ecf0 0102 	ldfe	f0, [r0], #8
 8004744:	ecf0 1102 	ldfe	f1, [r0], #8
 8004748:	ecf0 2102 	ldfe	f2, [r0], #8
 800474c:	ecf0 3102 	ldfe	f3, [r0], #8
 8004750:	ecf0 4102 	ldfe	f4, [r0], #8
 8004754:	ecf0 5102 	ldfe	f5, [r0], #8
 8004758:	ecf0 6102 	ldfe	f6, [r0], #8
 800475c:	ecf0 7102 	ldfe	f7, [r0], #8
 8004760:	ecf0 8102 	ldfp	f0, [r0], #8
 8004764:	ecf0 9102 	ldfp	f1, [r0], #8
 8004768:	ecf0 a102 	ldfp	f2, [r0], #8
 800476c:	ecf0 b102 	ldfp	f3, [r0], #8
 8004770:	ecf0 c102 	ldfp	f4, [r0], #8
 8004774:	ecf0 d102 	ldfp	f5, [r0], #8
 8004778:	ecf0 e102 	ldfp	f6, [r0], #8
 800477c:	ecf0 f102 	ldfp	f7, [r0], #8
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <__gnu_Unwind_Save_WMMXD>:
 8004784:	ece0 0102 	stfe	f0, [r0], #8
 8004788:	ece0 1102 	stfe	f1, [r0], #8
 800478c:	ece0 2102 	stfe	f2, [r0], #8
 8004790:	ece0 3102 	stfe	f3, [r0], #8
 8004794:	ece0 4102 	stfe	f4, [r0], #8
 8004798:	ece0 5102 	stfe	f5, [r0], #8
 800479c:	ece0 6102 	stfe	f6, [r0], #8
 80047a0:	ece0 7102 	stfe	f7, [r0], #8
 80047a4:	ece0 8102 	stfp	f0, [r0], #8
 80047a8:	ece0 9102 	stfp	f1, [r0], #8
 80047ac:	ece0 a102 	stfp	f2, [r0], #8
 80047b0:	ece0 b102 	stfp	f3, [r0], #8
 80047b4:	ece0 c102 	stfp	f4, [r0], #8
 80047b8:	ece0 d102 	stfp	f5, [r0], #8
 80047bc:	ece0 e102 	stfp	f6, [r0], #8
 80047c0:	ece0 f102 	stfp	f7, [r0], #8
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <__gnu_Unwind_Restore_WMMXC>:
 80047c8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80047cc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80047d0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80047d4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop

080047dc <__gnu_Unwind_Save_WMMXC>:
 80047dc:	fca0 8101 	stc2	1, cr8, [r0], #4
 80047e0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80047e4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80047e8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop

080047f0 <_Unwind_RaiseException>:
 80047f0:	46ec      	mov	ip, sp
 80047f2:	b500      	push	{lr}
 80047f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80047f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004804:	a901      	add	r1, sp, #4
 8004806:	f7ff fed3 	bl	80045b0 <__gnu_Unwind_RaiseException>
 800480a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800480e:	b012      	add	sp, #72	; 0x48
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <_Unwind_Resume>:
 8004814:	46ec      	mov	ip, sp
 8004816:	b500      	push	{lr}
 8004818:	e92d 5000 	stmdb	sp!, {ip, lr}
 800481c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004828:	a901      	add	r1, sp, #4
 800482a:	f7ff fefb 	bl	8004624 <__gnu_Unwind_Resume>
 800482e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8004832:	b012      	add	sp, #72	; 0x48
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <_Unwind_Resume_or_Rethrow>:
 8004838:	46ec      	mov	ip, sp
 800483a:	b500      	push	{lr}
 800483c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004840:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e92d 000c 	stmdb	sp!, {r2, r3}
 800484c:	a901      	add	r1, sp, #4
 800484e:	f7ff ff07 	bl	8004660 <__gnu_Unwind_Resume_or_Rethrow>
 8004852:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8004856:	b012      	add	sp, #72	; 0x48
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <_Unwind_ForcedUnwind>:
 800485c:	46ec      	mov	ip, sp
 800485e:	b500      	push	{lr}
 8004860:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004864:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004870:	ab01      	add	r3, sp, #4
 8004872:	f7ff fecd 	bl	8004610 <__gnu_Unwind_ForcedUnwind>
 8004876:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800487a:	b012      	add	sp, #72	; 0x48
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <_Unwind_Backtrace>:
 8004880:	46ec      	mov	ip, sp
 8004882:	b500      	push	{lr}
 8004884:	e92d 5000 	stmdb	sp!, {ip, lr}
 8004888:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e92d 000c 	stmdb	sp!, {r2, r3}
 8004894:	aa01      	add	r2, sp, #4
 8004896:	f7ff fef5 	bl	8004684 <__gnu_Unwind_Backtrace>
 800489a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800489e:	b012      	add	sp, #72	; 0x48
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop

080048a4 <next_unwind_byte>:
 80048a4:	7a02      	ldrb	r2, [r0, #8]
 80048a6:	4603      	mov	r3, r0
 80048a8:	b91a      	cbnz	r2, 80048b2 <next_unwind_byte+0xe>
 80048aa:	7a42      	ldrb	r2, [r0, #9]
 80048ac:	b942      	cbnz	r2, 80048c0 <next_unwind_byte+0x1c>
 80048ae:	20b0      	movs	r0, #176	; 0xb0
 80048b0:	4770      	bx	lr
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0201      	lsls	r1, r0, #8
 80048b8:	721a      	strb	r2, [r3, #8]
 80048ba:	0e00      	lsrs	r0, r0, #24
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	4770      	bx	lr
 80048c0:	6841      	ldr	r1, [r0, #4]
 80048c2:	1e50      	subs	r0, r2, #1
 80048c4:	7258      	strb	r0, [r3, #9]
 80048c6:	f851 0b04 	ldr.w	r0, [r1], #4
 80048ca:	2203      	movs	r2, #3
 80048cc:	6059      	str	r1, [r3, #4]
 80048ce:	0201      	lsls	r1, r0, #8
 80048d0:	721a      	strb	r2, [r3, #8]
 80048d2:	0e00      	lsrs	r0, r0, #24
 80048d4:	6019      	str	r1, [r3, #0]
 80048d6:	4770      	bx	lr

080048d8 <_Unwind_GetGR.constprop.0>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	2100      	movs	r1, #0
 80048dc:	b084      	sub	sp, #16
 80048de:	220c      	movs	r2, #12
 80048e0:	eb0d 0402 	add.w	r4, sp, r2
 80048e4:	460b      	mov	r3, r1
 80048e6:	9400      	str	r4, [sp, #0]
 80048e8:	f7ff fab4 	bl	8003e54 <_Unwind_VRS_Get>
 80048ec:	9803      	ldr	r0, [sp, #12]
 80048ee:	b004      	add	sp, #16
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop

080048f4 <unwind_UCB_from_context>:
 80048f4:	e7f0      	b.n	80048d8 <_Unwind_GetGR.constprop.0>
 80048f6:	bf00      	nop

080048f8 <__gnu_unwind_execute>:
 80048f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048fc:	4606      	mov	r6, r0
 80048fe:	b085      	sub	sp, #20
 8004900:	460d      	mov	r5, r1
 8004902:	f04f 0900 	mov.w	r9, #0
 8004906:	f44f 677f 	mov.w	r7, #4080	; 0xff0
 800490a:	4628      	mov	r0, r5
 800490c:	f7ff ffca 	bl	80048a4 <next_unwind_byte>
 8004910:	28b0      	cmp	r0, #176	; 0xb0
 8004912:	4604      	mov	r4, r0
 8004914:	f000 80b1 	beq.w	8004a7a <__gnu_unwind_execute+0x182>
 8004918:	f010 0180 	ands.w	r1, r0, #128	; 0x80
 800491c:	d020      	beq.n	8004960 <__gnu_unwind_execute+0x68>
 800491e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d075      	beq.n	8004a12 <__gnu_unwind_execute+0x11a>
 8004926:	2b90      	cmp	r3, #144	; 0x90
 8004928:	d037      	beq.n	800499a <__gnu_unwind_execute+0xa2>
 800492a:	2ba0      	cmp	r3, #160	; 0xa0
 800492c:	d045      	beq.n	80049ba <__gnu_unwind_execute+0xc2>
 800492e:	2bb0      	cmp	r3, #176	; 0xb0
 8004930:	d056      	beq.n	80049e0 <__gnu_unwind_execute+0xe8>
 8004932:	2bc0      	cmp	r3, #192	; 0xc0
 8004934:	f000 8086 	beq.w	8004a44 <__gnu_unwind_execute+0x14c>
 8004938:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800493c:	28d0      	cmp	r0, #208	; 0xd0
 800493e:	d10b      	bne.n	8004958 <__gnu_unwind_execute+0x60>
 8004940:	f004 0307 	and.w	r3, r4, #7
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800494a:	4630      	mov	r0, r6
 800494c:	2101      	movs	r1, #1
 800494e:	2305      	movs	r3, #5
 8004950:	f7ff fc52 	bl	80041f8 <_Unwind_VRS_Pop>
 8004954:	2800      	cmp	r0, #0
 8004956:	d0d8      	beq.n	800490a <__gnu_unwind_execute+0x12>
 8004958:	2009      	movs	r0, #9
 800495a:	b005      	add	sp, #20
 800495c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004960:	ea4f 0280 	mov.w	r2, r0, lsl #2
 8004964:	a803      	add	r0, sp, #12
 8004966:	fa5f f882 	uxtb.w	r8, r2
 800496a:	9000      	str	r0, [sp, #0]
 800496c:	220d      	movs	r2, #13
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff fa6f 	bl	8003e54 <_Unwind_VRS_Get>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	0660      	lsls	r0, r4, #25
 800497a:	f108 0804 	add.w	r8, r8, #4
 800497e:	bf4c      	ite	mi
 8004980:	ebc8 0303 	rsbmi	r3, r8, r3
 8004984:	4443      	addpl	r3, r8
 8004986:	ac03      	add	r4, sp, #12
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	9400      	str	r4, [sp, #0]
 800498c:	2100      	movs	r1, #0
 800498e:	4630      	mov	r0, r6
 8004990:	220d      	movs	r2, #13
 8004992:	460b      	mov	r3, r1
 8004994:	f7ff fa7e 	bl	8003e94 <_Unwind_VRS_Set>
 8004998:	e7b7      	b.n	800490a <__gnu_unwind_execute+0x12>
 800499a:	f000 020f 	and.w	r2, r0, #15
 800499e:	2a0d      	cmp	r2, #13
 80049a0:	d0da      	beq.n	8004958 <__gnu_unwind_execute+0x60>
 80049a2:	2a0f      	cmp	r2, #15
 80049a4:	d0d8      	beq.n	8004958 <__gnu_unwind_execute+0x60>
 80049a6:	2100      	movs	r1, #0
 80049a8:	ac03      	add	r4, sp, #12
 80049aa:	9400      	str	r4, [sp, #0]
 80049ac:	4630      	mov	r0, r6
 80049ae:	460b      	mov	r3, r1
 80049b0:	ac03      	add	r4, sp, #12
 80049b2:	f7ff fa4f 	bl	8003e54 <_Unwind_VRS_Get>
 80049b6:	9400      	str	r4, [sp, #0]
 80049b8:	e7e8      	b.n	800498c <__gnu_unwind_execute+0x94>
 80049ba:	43c2      	mvns	r2, r0
 80049bc:	f002 0c07 	and.w	ip, r2, #7
 80049c0:	fa47 f00c 	asr.w	r0, r7, ip
 80049c4:	0721      	lsls	r1, r4, #28
 80049c6:	f400 627f 	and.w	r2, r0, #4080	; 0xff0
 80049ca:	bf48      	it	mi
 80049cc:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80049d0:	2100      	movs	r1, #0
 80049d2:	4630      	mov	r0, r6
 80049d4:	460b      	mov	r3, r1
 80049d6:	f7ff fc0f 	bl	80041f8 <_Unwind_VRS_Pop>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1bc      	bne.n	8004958 <__gnu_unwind_execute+0x60>
 80049de:	e794      	b.n	800490a <__gnu_unwind_execute+0x12>
 80049e0:	28b1      	cmp	r0, #177	; 0xb1
 80049e2:	d05e      	beq.n	8004aa2 <__gnu_unwind_execute+0x1aa>
 80049e4:	28b2      	cmp	r0, #178	; 0xb2
 80049e6:	d06f      	beq.n	8004ac8 <__gnu_unwind_execute+0x1d0>
 80049e8:	28b3      	cmp	r0, #179	; 0xb3
 80049ea:	f000 8096 	beq.w	8004b1a <__gnu_unwind_execute+0x222>
 80049ee:	f000 0cfc 	and.w	ip, r0, #252	; 0xfc
 80049f2:	f1bc 0fb4 	cmp.w	ip, #180	; 0xb4
 80049f6:	d046      	beq.n	8004a86 <__gnu_unwind_execute+0x18e>
 80049f8:	f000 0107 	and.w	r1, r0, #7
 80049fc:	1c4a      	adds	r2, r1, #1
 80049fe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004a02:	2101      	movs	r1, #1
 8004a04:	4630      	mov	r0, r6
 8004a06:	460b      	mov	r3, r1
 8004a08:	f7ff fbf6 	bl	80041f8 <_Unwind_VRS_Pop>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d1a3      	bne.n	8004958 <__gnu_unwind_execute+0x60>
 8004a10:	e77b      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7ff ff46 	bl	80048a4 <next_unwind_byte>
 8004a18:	0221      	lsls	r1, r4, #8
 8004a1a:	ea40 0401 	orr.w	r4, r0, r1
 8004a1e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8004a22:	d099      	beq.n	8004958 <__gnu_unwind_execute+0x60>
 8004a24:	0523      	lsls	r3, r4, #20
 8004a26:	2100      	movs	r1, #0
 8004a28:	0c1a      	lsrs	r2, r3, #16
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	0124      	lsls	r4, r4, #4
 8004a30:	f7ff fbe2 	bl	80041f8 <_Unwind_VRS_Pop>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d18f      	bne.n	8004958 <__gnu_unwind_execute+0x60>
 8004a38:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004a3c:	bf18      	it	ne
 8004a3e:	f04f 0901 	movne.w	r9, #1
 8004a42:	e762      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004a44:	28c6      	cmp	r0, #198	; 0xc6
 8004a46:	d073      	beq.n	8004b30 <__gnu_unwind_execute+0x238>
 8004a48:	28c7      	cmp	r0, #199	; 0xc7
 8004a4a:	f000 8084 	beq.w	8004b56 <__gnu_unwind_execute+0x25e>
 8004a4e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8004a52:	29c0      	cmp	r1, #192	; 0xc0
 8004a54:	f000 8092 	beq.w	8004b7c <__gnu_unwind_execute+0x284>
 8004a58:	28c8      	cmp	r0, #200	; 0xc8
 8004a5a:	f000 80a6 	beq.w	8004baa <__gnu_unwind_execute+0x2b2>
 8004a5e:	28c9      	cmp	r0, #201	; 0xc9
 8004a60:	f47f af7a 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004a64:	4628      	mov	r0, r5
 8004a66:	f7ff ff1d 	bl	80048a4 <next_unwind_byte>
 8004a6a:	f000 010f 	and.w	r1, r0, #15
 8004a6e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004a72:	1c4b      	adds	r3, r1, #1
 8004a74:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8004a78:	e767      	b.n	800494a <__gnu_unwind_execute+0x52>
 8004a7a:	f1b9 0f00 	cmp.w	r9, #0
 8004a7e:	f000 8083 	beq.w	8004b88 <__gnu_unwind_execute+0x290>
 8004a82:	2000      	movs	r0, #0
 8004a84:	e769      	b.n	800495a <__gnu_unwind_execute+0x62>
 8004a86:	f000 0003 	and.w	r0, r0, #3
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a92:	4630      	mov	r0, r6
 8004a94:	460b      	mov	r3, r1
 8004a96:	f7ff fbaf 	bl	80041f8 <_Unwind_VRS_Pop>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	f47f af5c 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004aa0:	e733      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff fefe 	bl	80048a4 <next_unwind_byte>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	f43f af54 	beq.w	8004958 <__gnu_unwind_execute+0x60>
 8004ab0:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 8004ab4:	f47f af50 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004ab8:	4630      	mov	r0, r6
 8004aba:	460b      	mov	r3, r1
 8004abc:	f7ff fb9c 	bl	80041f8 <_Unwind_VRS_Pop>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f47f af49 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004ac6:	e720      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004ac8:	2100      	movs	r1, #0
 8004aca:	220d      	movs	r2, #13
 8004acc:	460b      	mov	r3, r1
 8004ace:	ac03      	add	r4, sp, #12
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	9400      	str	r4, [sp, #0]
 8004ad4:	f7ff f9be 	bl	8003e54 <_Unwind_VRS_Get>
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7ff fee3 	bl	80048a4 <next_unwind_byte>
 8004ade:	2402      	movs	r4, #2
 8004ae0:	0602      	lsls	r2, r0, #24
 8004ae2:	d50d      	bpl.n	8004b00 <__gnu_unwind_execute+0x208>
 8004ae4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004ae8:	fa00 fe04 	lsl.w	lr, r0, r4
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	4628      	mov	r0, r5
 8004af0:	eb03 010e 	add.w	r1, r3, lr
 8004af4:	9103      	str	r1, [sp, #12]
 8004af6:	f7ff fed5 	bl	80048a4 <next_unwind_byte>
 8004afa:	3407      	adds	r4, #7
 8004afc:	0603      	lsls	r3, r0, #24
 8004afe:	d4f1      	bmi.n	8004ae4 <__gnu_unwind_execute+0x1ec>
 8004b00:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
 8004b04:	fa0e f404 	lsl.w	r4, lr, r4
 8004b08:	9903      	ldr	r1, [sp, #12]
 8004b0a:	ab03      	add	r3, sp, #12
 8004b0c:	f501 7c01 	add.w	ip, r1, #516	; 0x204
 8004b10:	eb0c 0204 	add.w	r2, ip, r4
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	e738      	b.n	800498c <__gnu_unwind_execute+0x94>
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7ff fec2 	bl	80048a4 <next_unwind_byte>
 8004b20:	f000 010f 	and.w	r1, r0, #15
 8004b24:	1c4a      	adds	r2, r1, #1
 8004b26:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004b2a:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8004b2e:	e768      	b.n	8004a02 <__gnu_unwind_execute+0x10a>
 8004b30:	4628      	mov	r0, r5
 8004b32:	f7ff feb7 	bl	80048a4 <next_unwind_byte>
 8004b36:	f000 020f 	and.w	r2, r0, #15
 8004b3a:	1c53      	adds	r3, r2, #1
 8004b3c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004b40:	ea43 3200 	orr.w	r2, r3, r0, lsl #12
 8004b44:	2103      	movs	r1, #3
 8004b46:	4630      	mov	r0, r6
 8004b48:	460b      	mov	r3, r1
 8004b4a:	f7ff fb55 	bl	80041f8 <_Unwind_VRS_Pop>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f47f af02 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004b54:	e6d9      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004b56:	4628      	mov	r0, r5
 8004b58:	f7ff fea4 	bl	80048a4 <next_unwind_byte>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	f43f aefa 	beq.w	8004958 <__gnu_unwind_execute+0x60>
 8004b64:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8004b68:	f47f aef6 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	2104      	movs	r1, #4
 8004b70:	f7ff fb42 	bl	80041f8 <_Unwind_VRS_Pop>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f47f aeef 	bne.w	8004958 <__gnu_unwind_execute+0x60>
 8004b7a:	e6c6      	b.n	800490a <__gnu_unwind_execute+0x12>
 8004b7c:	f000 030f 	and.w	r3, r0, #15
 8004b80:	1c58      	adds	r0, r3, #1
 8004b82:	f440 2220 	orr.w	r2, r0, #655360	; 0xa0000
 8004b86:	e7dd      	b.n	8004b44 <__gnu_unwind_execute+0x24c>
 8004b88:	ac03      	add	r4, sp, #12
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	220e      	movs	r2, #14
 8004b8e:	464b      	mov	r3, r9
 8004b90:	4630      	mov	r0, r6
 8004b92:	9400      	str	r4, [sp, #0]
 8004b94:	f7ff f95e 	bl	8003e54 <_Unwind_VRS_Get>
 8004b98:	4630      	mov	r0, r6
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	9400      	str	r4, [sp, #0]
 8004ba2:	f7ff f977 	bl	8003e94 <_Unwind_VRS_Set>
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	e6d7      	b.n	800495a <__gnu_unwind_execute+0x62>
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7ff fe7a 	bl	80048a4 <next_unwind_byte>
 8004bb0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004bb4:	f000 000f 	and.w	r0, r0, #15
 8004bb8:	3210      	adds	r2, #16
 8004bba:	1c41      	adds	r1, r0, #1
 8004bbc:	ea41 3202 	orr.w	r2, r1, r2, lsl #12
 8004bc0:	e6c3      	b.n	800494a <__gnu_unwind_execute+0x52>
 8004bc2:	bf00      	nop

08004bc4 <__gnu_unwind_frame>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004bc8:	b084      	sub	sp, #16
 8004bca:	2003      	movs	r0, #3
 8004bcc:	6854      	ldr	r4, [r2, #4]
 8004bce:	f88d 000c 	strb.w	r0, [sp, #12]
 8004bd2:	79d3      	ldrb	r3, [r2, #7]
 8004bd4:	0224      	lsls	r4, r4, #8
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	4608      	mov	r0, r1
 8004bda:	a901      	add	r1, sp, #4
 8004bdc:	9401      	str	r4, [sp, #4]
 8004bde:	9202      	str	r2, [sp, #8]
 8004be0:	f88d 300d 	strb.w	r3, [sp, #13]
 8004be4:	f7ff fe88 	bl	80048f8 <__gnu_unwind_execute>
 8004be8:	b004      	add	sp, #16
 8004bea:	bd10      	pop	{r4, pc}

08004bec <_Unwind_GetRegionStart>:
 8004bec:	b508      	push	{r3, lr}
 8004bee:	f7ff fe81 	bl	80048f4 <unwind_UCB_from_context>
 8004bf2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004bf4:	bd08      	pop	{r3, pc}
 8004bf6:	bf00      	nop

08004bf8 <_Unwind_GetLanguageSpecificData>:
 8004bf8:	b508      	push	{r3, lr}
 8004bfa:	f7ff fe7b 	bl	80048f4 <unwind_UCB_from_context>
 8004bfe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004c00:	79c8      	ldrb	r0, [r1, #7]
 8004c02:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8004c06:	f103 0008 	add.w	r0, r3, #8
 8004c0a:	bd08      	pop	{r3, pc}

08004c0c <_Unwind_GetDataRelBase>:
 8004c0c:	b508      	push	{r3, lr}
 8004c0e:	f005 f9b9 	bl	8009f84 <abort>
 8004c12:	bf00      	nop

08004c14 <_Unwind_GetTextRelBase>:
 8004c14:	b508      	push	{r3, lr}
 8004c16:	f005 f9b5 	bl	8009f84 <abort>
 8004c1a:	bf00      	nop

08004c1c <__aeabi_idiv0>:
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <__divdi3>:
 8004c20:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c24:	2900      	cmp	r1, #0
 8004c26:	461d      	mov	r5, r3
 8004c28:	f2c0 809d 	blt.w	8004d66 <__divdi3+0x146>
 8004c2c:	2400      	movs	r4, #0
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	f2c0 8094 	blt.w	8004d5c <__divdi3+0x13c>
 8004c34:	4607      	mov	r7, r0
 8004c36:	460d      	mov	r5, r1
 8004c38:	4616      	mov	r6, r2
 8004c3a:	469c      	mov	ip, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d13d      	bne.n	8004cbc <__divdi3+0x9c>
 8004c40:	428a      	cmp	r2, r1
 8004c42:	d953      	bls.n	8004cec <__divdi3+0xcc>
 8004c44:	fab2 f382 	clz	r3, r2
 8004c48:	b143      	cbz	r3, 8004c5c <__divdi3+0x3c>
 8004c4a:	f1c3 0620 	rsb	r6, r3, #32
 8004c4e:	fa20 f506 	lsr.w	r5, r0, r6
 8004c52:	fa01 f103 	lsl.w	r1, r1, r3
 8004c56:	409a      	lsls	r2, r3
 8004c58:	4098      	lsls	r0, r3
 8004c5a:	4329      	orrs	r1, r5
 8004c5c:	0c13      	lsrs	r3, r2, #16
 8004c5e:	fbb1 f6f3 	udiv	r6, r1, r3
 8004c62:	b297      	uxth	r7, r2
 8004c64:	fb03 1116 	mls	r1, r3, r6, r1
 8004c68:	fb07 f506 	mul.w	r5, r7, r6
 8004c6c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8004c70:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
 8004c74:	428d      	cmp	r5, r1
 8004c76:	d909      	bls.n	8004c8c <__divdi3+0x6c>
 8004c78:	1889      	adds	r1, r1, r2
 8004c7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8004c7e:	f080 8114 	bcs.w	8004eaa <__divdi3+0x28a>
 8004c82:	428d      	cmp	r5, r1
 8004c84:	f240 8111 	bls.w	8004eaa <__divdi3+0x28a>
 8004c88:	3e02      	subs	r6, #2
 8004c8a:	1889      	adds	r1, r1, r2
 8004c8c:	1b49      	subs	r1, r1, r5
 8004c8e:	fbb1 f5f3 	udiv	r5, r1, r3
 8004c92:	fb03 1315 	mls	r3, r3, r5, r1
 8004c96:	fb07 f705 	mul.w	r7, r7, r5
 8004c9a:	b280      	uxth	r0, r0
 8004c9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8004ca0:	429f      	cmp	r7, r3
 8004ca2:	d907      	bls.n	8004cb4 <__divdi3+0x94>
 8004ca4:	1e69      	subs	r1, r5, #1
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	f080 8105 	bcs.w	8004eb6 <__divdi3+0x296>
 8004cac:	429f      	cmp	r7, r3
 8004cae:	f240 8102 	bls.w	8004eb6 <__divdi3+0x296>
 8004cb2:	3d02      	subs	r5, #2
 8004cb4:	ea45 4206 	orr.w	r2, r5, r6, lsl #16
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e003      	b.n	8004cc4 <__divdi3+0xa4>
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d90a      	bls.n	8004cd6 <__divdi3+0xb6>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	b114      	cbz	r4, 8004cd0 <__divdi3+0xb0>
 8004cca:	4240      	negs	r0, r0
 8004ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004cd0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cd4:	4770      	bx	lr
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 8087 	bne.w	8004dee <__divdi3+0x1ce>
 8004ce0:	458c      	cmp	ip, r1
 8004ce2:	d301      	bcc.n	8004ce8 <__divdi3+0xc8>
 8004ce4:	4282      	cmp	r2, r0
 8004ce6:	d8ec      	bhi.n	8004cc2 <__divdi3+0xa2>
 8004ce8:	2201      	movs	r2, #1
 8004cea:	e7eb      	b.n	8004cc4 <__divdi3+0xa4>
 8004cec:	b912      	cbnz	r2, 8004cf4 <__divdi3+0xd4>
 8004cee:	2701      	movs	r7, #1
 8004cf0:	fbb7 f2f2 	udiv	r2, r7, r2
 8004cf4:	fab2 f682 	clz	r6, r2
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	d13a      	bne.n	8004d72 <__divdi3+0x152>
 8004cfc:	1a89      	subs	r1, r1, r2
 8004cfe:	0c15      	lsrs	r5, r2, #16
 8004d00:	fa1f fc82 	uxth.w	ip, r2
 8004d04:	2301      	movs	r3, #1
 8004d06:	fbb1 f7f5 	udiv	r7, r1, r5
 8004d0a:	fb05 1117 	mls	r1, r5, r7, r1
 8004d0e:	fb0c f607 	mul.w	r6, ip, r7
 8004d12:	ea4f 4810 	mov.w	r8, r0, lsr #16
 8004d16:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8004d1a:	428e      	cmp	r6, r1
 8004d1c:	d907      	bls.n	8004d2e <__divdi3+0x10e>
 8004d1e:	1889      	adds	r1, r1, r2
 8004d20:	f107 38ff 	add.w	r8, r7, #4294967295
 8004d24:	d202      	bcs.n	8004d2c <__divdi3+0x10c>
 8004d26:	428e      	cmp	r6, r1
 8004d28:	f200 80da 	bhi.w	8004ee0 <__divdi3+0x2c0>
 8004d2c:	4647      	mov	r7, r8
 8004d2e:	1b89      	subs	r1, r1, r6
 8004d30:	fbb1 f6f5 	udiv	r6, r1, r5
 8004d34:	fb05 1116 	mls	r1, r5, r6, r1
 8004d38:	fb0c fc06 	mul.w	ip, ip, r6
 8004d3c:	b280      	uxth	r0, r0
 8004d3e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004d42:	4584      	cmp	ip, r0
 8004d44:	d907      	bls.n	8004d56 <__divdi3+0x136>
 8004d46:	1e71      	subs	r1, r6, #1
 8004d48:	1882      	adds	r2, r0, r2
 8004d4a:	f080 80b0 	bcs.w	8004eae <__divdi3+0x28e>
 8004d4e:	4594      	cmp	ip, r2
 8004d50:	f240 80ad 	bls.w	8004eae <__divdi3+0x28e>
 8004d54:	3e02      	subs	r6, #2
 8004d56:	ea46 4207 	orr.w	r2, r6, r7, lsl #16
 8004d5a:	e7b3      	b.n	8004cc4 <__divdi3+0xa4>
 8004d5c:	43e4      	mvns	r4, r4
 8004d5e:	4252      	negs	r2, r2
 8004d60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004d64:	e766      	b.n	8004c34 <__divdi3+0x14>
 8004d66:	4240      	negs	r0, r0
 8004d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d70:	e75d      	b.n	8004c2e <__divdi3+0xe>
 8004d72:	40b2      	lsls	r2, r6
 8004d74:	f1c6 0520 	rsb	r5, r6, #32
 8004d78:	fa21 f305 	lsr.w	r3, r1, r5
 8004d7c:	fa20 f905 	lsr.w	r9, r0, r5
 8004d80:	fa01 f106 	lsl.w	r1, r1, r6
 8004d84:	0c15      	lsrs	r5, r2, #16
 8004d86:	fbb3 f8f5 	udiv	r8, r3, r5
 8004d8a:	fb05 3718 	mls	r7, r5, r8, r3
 8004d8e:	fa1f fc82 	uxth.w	ip, r2
 8004d92:	fb0c f308 	mul.w	r3, ip, r8
 8004d96:	ea49 0901 	orr.w	r9, r9, r1
 8004d9a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8004d9e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8004da2:	40b0      	lsls	r0, r6
 8004da4:	42bb      	cmp	r3, r7
 8004da6:	d90a      	bls.n	8004dbe <__divdi3+0x19e>
 8004da8:	18bf      	adds	r7, r7, r2
 8004daa:	f108 31ff 	add.w	r1, r8, #4294967295
 8004dae:	f080 8095 	bcs.w	8004edc <__divdi3+0x2bc>
 8004db2:	42bb      	cmp	r3, r7
 8004db4:	f240 8092 	bls.w	8004edc <__divdi3+0x2bc>
 8004db8:	f1a8 0802 	sub.w	r8, r8, #2
 8004dbc:	18bf      	adds	r7, r7, r2
 8004dbe:	1afe      	subs	r6, r7, r3
 8004dc0:	fbb6 f3f5 	udiv	r3, r6, r5
 8004dc4:	fb05 6713 	mls	r7, r5, r3, r6
 8004dc8:	fb0c f603 	mul.w	r6, ip, r3
 8004dcc:	fa1f f989 	uxth.w	r9, r9
 8004dd0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 8004dd4:	428e      	cmp	r6, r1
 8004dd6:	d906      	bls.n	8004de6 <__divdi3+0x1c6>
 8004dd8:	1e5f      	subs	r7, r3, #1
 8004dda:	1889      	adds	r1, r1, r2
 8004ddc:	d278      	bcs.n	8004ed0 <__divdi3+0x2b0>
 8004dde:	428e      	cmp	r6, r1
 8004de0:	d976      	bls.n	8004ed0 <__divdi3+0x2b0>
 8004de2:	3b02      	subs	r3, #2
 8004de4:	1889      	adds	r1, r1, r2
 8004de6:	1b89      	subs	r1, r1, r6
 8004de8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dec:	e78b      	b.n	8004d06 <__divdi3+0xe6>
 8004dee:	f1c3 0120 	rsb	r1, r3, #32
 8004df2:	fa22 f801 	lsr.w	r8, r2, r1
 8004df6:	fa0c f703 	lsl.w	r7, ip, r3
 8004dfa:	fa25 fb01 	lsr.w	fp, r5, r1
 8004dfe:	fa20 f201 	lsr.w	r2, r0, r1
 8004e02:	fa05 f503 	lsl.w	r5, r5, r3
 8004e06:	ea48 0c07 	orr.w	ip, r8, r7
 8004e0a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004e0e:	fbbb f9f8 	udiv	r9, fp, r8
 8004e12:	fb08 b719 	mls	r7, r8, r9, fp
 8004e16:	fa1f fa8c 	uxth.w	sl, ip
 8004e1a:	fb0a fb09 	mul.w	fp, sl, r9
 8004e1e:	4315      	orrs	r5, r2
 8004e20:	0c2a      	lsrs	r2, r5, #16
 8004e22:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8004e26:	45bb      	cmp	fp, r7
 8004e28:	fa06 f603 	lsl.w	r6, r6, r3
 8004e2c:	d909      	bls.n	8004e42 <__divdi3+0x222>
 8004e2e:	eb17 070c 	adds.w	r7, r7, ip
 8004e32:	f109 32ff 	add.w	r2, r9, #4294967295
 8004e36:	d24f      	bcs.n	8004ed8 <__divdi3+0x2b8>
 8004e38:	45bb      	cmp	fp, r7
 8004e3a:	d94d      	bls.n	8004ed8 <__divdi3+0x2b8>
 8004e3c:	f1a9 0902 	sub.w	r9, r9, #2
 8004e40:	4467      	add	r7, ip
 8004e42:	ebcb 0107 	rsb	r1, fp, r7
 8004e46:	fbb1 f2f8 	udiv	r2, r1, r8
 8004e4a:	fb08 1712 	mls	r7, r8, r2, r1
 8004e4e:	fb0a fa02 	mul.w	sl, sl, r2
 8004e52:	b2ad      	uxth	r5, r5
 8004e54:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
 8004e58:	458a      	cmp	sl, r1
 8004e5a:	d907      	bls.n	8004e6c <__divdi3+0x24c>
 8004e5c:	1e55      	subs	r5, r2, #1
 8004e5e:	eb11 010c 	adds.w	r1, r1, ip
 8004e62:	d237      	bcs.n	8004ed4 <__divdi3+0x2b4>
 8004e64:	458a      	cmp	sl, r1
 8004e66:	d935      	bls.n	8004ed4 <__divdi3+0x2b4>
 8004e68:	3a02      	subs	r2, #2
 8004e6a:	4461      	add	r1, ip
 8004e6c:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8004e70:	fa1f f886 	uxth.w	r8, r6
 8004e74:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e78:	fb08 f70c 	mul.w	r7, r8, ip
 8004e7c:	0c36      	lsrs	r6, r6, #16
 8004e7e:	b295      	uxth	r5, r2
 8004e80:	fb08 f805 	mul.w	r8, r8, r5
 8004e84:	fb06 7505 	mla	r5, r6, r5, r7
 8004e88:	fb06 fc0c 	mul.w	ip, r6, ip
 8004e8c:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8004e90:	42af      	cmp	r7, r5
 8004e92:	bf88      	it	hi
 8004e94:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 8004e98:	ebca 0101 	rsb	r1, sl, r1
 8004e9c:	eb0c 4615 	add.w	r6, ip, r5, lsr #16
 8004ea0:	42b1      	cmp	r1, r6
 8004ea2:	d312      	bcc.n	8004eca <__divdi3+0x2aa>
 8004ea4:	d009      	beq.n	8004eba <__divdi3+0x29a>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e70c      	b.n	8004cc4 <__divdi3+0xa4>
 8004eaa:	4666      	mov	r6, ip
 8004eac:	e6ee      	b.n	8004c8c <__divdi3+0x6c>
 8004eae:	460e      	mov	r6, r1
 8004eb0:	ea46 4207 	orr.w	r2, r6, r7, lsl #16
 8004eb4:	e706      	b.n	8004cc4 <__divdi3+0xa4>
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	e6fc      	b.n	8004cb4 <__divdi3+0x94>
 8004eba:	fa00 f303 	lsl.w	r3, r0, r3
 8004ebe:	fa1f f888 	uxth.w	r8, r8
 8004ec2:	eb08 4505 	add.w	r5, r8, r5, lsl #16
 8004ec6:	42ab      	cmp	r3, r5
 8004ec8:	d2ed      	bcs.n	8004ea6 <__divdi3+0x286>
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e6f9      	b.n	8004cc4 <__divdi3+0xa4>
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	e788      	b.n	8004de6 <__divdi3+0x1c6>
 8004ed4:	462a      	mov	r2, r5
 8004ed6:	e7c9      	b.n	8004e6c <__divdi3+0x24c>
 8004ed8:	4691      	mov	r9, r2
 8004eda:	e7b2      	b.n	8004e42 <__divdi3+0x222>
 8004edc:	4688      	mov	r8, r1
 8004ede:	e76e      	b.n	8004dbe <__divdi3+0x19e>
 8004ee0:	3f02      	subs	r7, #2
 8004ee2:	1889      	adds	r1, r1, r2
 8004ee4:	e723      	b.n	8004d2e <__divdi3+0x10e>
 8004ee6:	bf00      	nop

08004ee8 <__udivdi3>:
 8004ee8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8004eec:	4614      	mov	r4, r2
 8004eee:	4605      	mov	r5, r0
 8004ef0:	460e      	mov	r6, r1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d13f      	bne.n	8004f76 <__udivdi3+0x8e>
 8004ef6:	428a      	cmp	r2, r1
 8004ef8:	d94a      	bls.n	8004f90 <__udivdi3+0xa8>
 8004efa:	fab2 f382 	clz	r3, r2
 8004efe:	b143      	cbz	r3, 8004f12 <__udivdi3+0x2a>
 8004f00:	f1c3 0020 	rsb	r0, r3, #32
 8004f04:	fa25 f200 	lsr.w	r2, r5, r0
 8004f08:	fa01 f603 	lsl.w	r6, r1, r3
 8004f0c:	409c      	lsls	r4, r3
 8004f0e:	409d      	lsls	r5, r3
 8004f10:	4316      	orrs	r6, r2
 8004f12:	0c23      	lsrs	r3, r4, #16
 8004f14:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f18:	b2a0      	uxth	r0, r4
 8004f1a:	fb03 6c11 	mls	ip, r3, r1, r6
 8004f1e:	fb00 f201 	mul.w	r2, r0, r1
 8004f22:	0c2f      	lsrs	r7, r5, #16
 8004f24:	ea47 460c 	orr.w	r6, r7, ip, lsl #16
 8004f28:	42b2      	cmp	r2, r6
 8004f2a:	d908      	bls.n	8004f3e <__udivdi3+0x56>
 8004f2c:	1e4f      	subs	r7, r1, #1
 8004f2e:	1936      	adds	r6, r6, r4
 8004f30:	f080 80ff 	bcs.w	8005132 <__udivdi3+0x24a>
 8004f34:	42b2      	cmp	r2, r6
 8004f36:	f240 80fc 	bls.w	8005132 <__udivdi3+0x24a>
 8004f3a:	3902      	subs	r1, #2
 8004f3c:	1936      	adds	r6, r6, r4
 8004f3e:	1ab6      	subs	r6, r6, r2
 8004f40:	fbb6 f2f3 	udiv	r2, r6, r3
 8004f44:	fb03 6312 	mls	r3, r3, r2, r6
 8004f48:	fb00 f002 	mul.w	r0, r0, r2
 8004f4c:	b2ad      	uxth	r5, r5
 8004f4e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004f52:	4298      	cmp	r0, r3
 8004f54:	d907      	bls.n	8004f66 <__udivdi3+0x7e>
 8004f56:	1e56      	subs	r6, r2, #1
 8004f58:	191b      	adds	r3, r3, r4
 8004f5a:	f080 80ec 	bcs.w	8005136 <__udivdi3+0x24e>
 8004f5e:	4298      	cmp	r0, r3
 8004f60:	f240 80e9 	bls.w	8005136 <__udivdi3+0x24e>
 8004f64:	3a02      	subs	r2, #2
 8004f66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8004f74:	4770      	bx	lr
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d843      	bhi.n	8005002 <__udivdi3+0x11a>
 8004f7a:	fab3 f483 	clz	r4, r3
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d142      	bne.n	8005008 <__udivdi3+0x120>
 8004f82:	428b      	cmp	r3, r1
 8004f84:	4623      	mov	r3, r4
 8004f86:	d301      	bcc.n	8004f8c <__udivdi3+0xa4>
 8004f88:	4282      	cmp	r2, r0
 8004f8a:	d83b      	bhi.n	8005004 <__udivdi3+0x11c>
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	e7ed      	b.n	8004f6c <__udivdi3+0x84>
 8004f90:	b912      	cbnz	r2, 8004f98 <__udivdi3+0xb0>
 8004f92:	2701      	movs	r7, #1
 8004f94:	fbb7 f4f2 	udiv	r4, r7, r2
 8004f98:	fab4 f284 	clz	r2, r4
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	f040 808a 	bne.w	80050b6 <__udivdi3+0x1ce>
 8004fa2:	1b09      	subs	r1, r1, r4
 8004fa4:	0c26      	lsrs	r6, r4, #16
 8004fa6:	b2a7      	uxth	r7, r4
 8004fa8:	2301      	movs	r3, #1
 8004faa:	fbb1 f0f6 	udiv	r0, r1, r6
 8004fae:	fb06 1110 	mls	r1, r6, r0, r1
 8004fb2:	fb07 f200 	mul.w	r2, r7, r0
 8004fb6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8004fba:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
 8004fbe:	428a      	cmp	r2, r1
 8004fc0:	d907      	bls.n	8004fd2 <__udivdi3+0xea>
 8004fc2:	1909      	adds	r1, r1, r4
 8004fc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8004fc8:	d202      	bcs.n	8004fd0 <__udivdi3+0xe8>
 8004fca:	428a      	cmp	r2, r1
 8004fcc:	f200 80d4 	bhi.w	8005178 <__udivdi3+0x290>
 8004fd0:	4660      	mov	r0, ip
 8004fd2:	ebc2 0c01 	rsb	ip, r2, r1
 8004fd6:	fbbc f2f6 	udiv	r2, ip, r6
 8004fda:	fb06 c112 	mls	r1, r6, r2, ip
 8004fde:	fb07 f702 	mul.w	r7, r7, r2
 8004fe2:	b2ad      	uxth	r5, r5
 8004fe4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8004fe8:	42af      	cmp	r7, r5
 8004fea:	d907      	bls.n	8004ffc <__udivdi3+0x114>
 8004fec:	1e51      	subs	r1, r2, #1
 8004fee:	192c      	adds	r4, r5, r4
 8004ff0:	f080 80a3 	bcs.w	800513a <__udivdi3+0x252>
 8004ff4:	42a7      	cmp	r7, r4
 8004ff6:	f240 80a0 	bls.w	800513a <__udivdi3+0x252>
 8004ffa:	3a02      	subs	r2, #2
 8004ffc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005000:	e7b4      	b.n	8004f6c <__udivdi3+0x84>
 8005002:	2300      	movs	r3, #0
 8005004:	461a      	mov	r2, r3
 8005006:	e7b1      	b.n	8004f6c <__udivdi3+0x84>
 8005008:	f1c4 0720 	rsb	r7, r4, #32
 800500c:	fa03 f804 	lsl.w	r8, r3, r4
 8005010:	fa22 f307 	lsr.w	r3, r2, r7
 8005014:	fa21 f907 	lsr.w	r9, r1, r7
 8005018:	fa20 fa07 	lsr.w	sl, r0, r7
 800501c:	fa01 f104 	lsl.w	r1, r1, r4
 8005020:	ea43 0308 	orr.w	r3, r3, r8
 8005024:	0c1e      	lsrs	r6, r3, #16
 8005026:	fbb9 fcf6 	udiv	ip, r9, r6
 800502a:	fb06 991c 	mls	r9, r6, ip, r9
 800502e:	fa1f f883 	uxth.w	r8, r3
 8005032:	fb08 f70c 	mul.w	r7, r8, ip
 8005036:	ea4a 0a01 	orr.w	sl, sl, r1
 800503a:	ea4f 451a 	mov.w	r5, sl, lsr #16
 800503e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8005042:	42af      	cmp	r7, r5
 8005044:	fa02 f904 	lsl.w	r9, r2, r4
 8005048:	d905      	bls.n	8005056 <__udivdi3+0x16e>
 800504a:	18ed      	adds	r5, r5, r3
 800504c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8005050:	f0c0 8087 	bcc.w	8005162 <__udivdi3+0x27a>
 8005054:	4694      	mov	ip, r2
 8005056:	1bea      	subs	r2, r5, r7
 8005058:	fbb2 f7f6 	udiv	r7, r2, r6
 800505c:	fb06 2617 	mls	r6, r6, r7, r2
 8005060:	fb08 f807 	mul.w	r8, r8, r7
 8005064:	fa1f fa8a 	uxth.w	sl, sl
 8005068:	ea4a 4106 	orr.w	r1, sl, r6, lsl #16
 800506c:	4588      	cmp	r8, r1
 800506e:	d903      	bls.n	8005078 <__udivdi3+0x190>
 8005070:	1e7a      	subs	r2, r7, #1
 8005072:	18c9      	adds	r1, r1, r3
 8005074:	d370      	bcc.n	8005158 <__udivdi3+0x270>
 8005076:	4617      	mov	r7, r2
 8005078:	ea47 420c 	orr.w	r2, r7, ip, lsl #16
 800507c:	0c17      	lsrs	r7, r2, #16
 800507e:	fa1f fc89 	uxth.w	ip, r9
 8005082:	fb0c f607 	mul.w	r6, ip, r7
 8005086:	b295      	uxth	r5, r2
 8005088:	ea4f 4319 	mov.w	r3, r9, lsr #16
 800508c:	fb0c fc05 	mul.w	ip, ip, r5
 8005090:	fb03 6505 	mla	r5, r3, r5, r6
 8005094:	fb03 f307 	mul.w	r3, r3, r7
 8005098:	eb05 451c 	add.w	r5, r5, ip, lsr #16
 800509c:	42ae      	cmp	r6, r5
 800509e:	bf88      	it	hi
 80050a0:	f503 3380 	addhi.w	r3, r3, #65536	; 0x10000
 80050a4:	ebc8 0101 	rsb	r1, r8, r1
 80050a8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80050ac:	4299      	cmp	r1, r3
 80050ae:	d350      	bcc.n	8005152 <__udivdi3+0x26a>
 80050b0:	d047      	beq.n	8005142 <__udivdi3+0x25a>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e75a      	b.n	8004f6c <__udivdi3+0x84>
 80050b6:	4094      	lsls	r4, r2
 80050b8:	f1c2 0620 	rsb	r6, r2, #32
 80050bc:	fa21 f506 	lsr.w	r5, r1, r6
 80050c0:	fa20 f906 	lsr.w	r9, r0, r6
 80050c4:	fa01 f102 	lsl.w	r1, r1, r2
 80050c8:	0c26      	lsrs	r6, r4, #16
 80050ca:	fbb5 f8f6 	udiv	r8, r5, r6
 80050ce:	fb06 5518 	mls	r5, r6, r8, r5
 80050d2:	b2a7      	uxth	r7, r4
 80050d4:	fb07 f308 	mul.w	r3, r7, r8
 80050d8:	ea49 0901 	orr.w	r9, r9, r1
 80050dc:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80050e0:	ea41 4c05 	orr.w	ip, r1, r5, lsl #16
 80050e4:	4563      	cmp	r3, ip
 80050e6:	fa00 f502 	lsl.w	r5, r0, r2
 80050ea:	d909      	bls.n	8005100 <__udivdi3+0x218>
 80050ec:	eb1c 0c04 	adds.w	ip, ip, r4
 80050f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80050f4:	d23e      	bcs.n	8005174 <__udivdi3+0x28c>
 80050f6:	4563      	cmp	r3, ip
 80050f8:	d93c      	bls.n	8005174 <__udivdi3+0x28c>
 80050fa:	f1a8 0802 	sub.w	r8, r8, #2
 80050fe:	44a4      	add	ip, r4
 8005100:	ebc3 020c 	rsb	r2, r3, ip
 8005104:	fbb2 f3f6 	udiv	r3, r2, r6
 8005108:	fb06 2013 	mls	r0, r6, r3, r2
 800510c:	fb07 f203 	mul.w	r2, r7, r3
 8005110:	fa1f f989 	uxth.w	r9, r9
 8005114:	ea49 4100 	orr.w	r1, r9, r0, lsl #16
 8005118:	428a      	cmp	r2, r1
 800511a:	d906      	bls.n	800512a <__udivdi3+0x242>
 800511c:	1e58      	subs	r0, r3, #1
 800511e:	1909      	adds	r1, r1, r4
 8005120:	d226      	bcs.n	8005170 <__udivdi3+0x288>
 8005122:	428a      	cmp	r2, r1
 8005124:	d924      	bls.n	8005170 <__udivdi3+0x288>
 8005126:	3b02      	subs	r3, #2
 8005128:	1909      	adds	r1, r1, r4
 800512a:	1a89      	subs	r1, r1, r2
 800512c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005130:	e73b      	b.n	8004faa <__udivdi3+0xc2>
 8005132:	4639      	mov	r1, r7
 8005134:	e703      	b.n	8004f3e <__udivdi3+0x56>
 8005136:	4632      	mov	r2, r6
 8005138:	e715      	b.n	8004f66 <__udivdi3+0x7e>
 800513a:	460a      	mov	r2, r1
 800513c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005140:	e714      	b.n	8004f6c <__udivdi3+0x84>
 8005142:	fa00 f004 	lsl.w	r0, r0, r4
 8005146:	fa1f f18c 	uxth.w	r1, ip
 800514a:	eb01 4505 	add.w	r5, r1, r5, lsl #16
 800514e:	42a8      	cmp	r0, r5
 8005150:	d2af      	bcs.n	80050b2 <__udivdi3+0x1ca>
 8005152:	3a01      	subs	r2, #1
 8005154:	2300      	movs	r3, #0
 8005156:	e709      	b.n	8004f6c <__udivdi3+0x84>
 8005158:	4588      	cmp	r8, r1
 800515a:	d98c      	bls.n	8005076 <__udivdi3+0x18e>
 800515c:	3f02      	subs	r7, #2
 800515e:	18c9      	adds	r1, r1, r3
 8005160:	e78a      	b.n	8005078 <__udivdi3+0x190>
 8005162:	42af      	cmp	r7, r5
 8005164:	f67f af76 	bls.w	8005054 <__udivdi3+0x16c>
 8005168:	f1ac 0c02 	sub.w	ip, ip, #2
 800516c:	18ed      	adds	r5, r5, r3
 800516e:	e772      	b.n	8005056 <__udivdi3+0x16e>
 8005170:	4603      	mov	r3, r0
 8005172:	e7da      	b.n	800512a <__udivdi3+0x242>
 8005174:	4690      	mov	r8, r2
 8005176:	e7c3      	b.n	8005100 <__udivdi3+0x218>
 8005178:	3802      	subs	r0, #2
 800517a:	1909      	adds	r1, r1, r4
 800517c:	e729      	b.n	8004fd2 <__udivdi3+0xea>
 800517e:	bf00      	nop

08005180 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	b09e      	sub	sp, #120	; 0x78
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8005186:	f7fc ffe1 	bl	800214c <TIM2_timer_start>

	usart_begin(&Serial3, PB11, PB10, 19200);
 800518a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800518e:	f240 220a 	movw	r2, #522	; 0x20a
 8005192:	48b4      	ldr	r0, [pc, #720]	; (8005464 <main+0x2e4>)
 8005194:	f240 210b 	movw	r1, #523	; 0x20b
 8005198:	f7fd fc65 	bl	8002a66 <usart_begin>
	usart_print(&Serial3,
 800519c:	48b1      	ldr	r0, [pc, #708]	; (8005464 <main+0x2e4>)
 800519e:	49b2      	ldr	r1, [pc, #712]	; (8005468 <main+0x2e8>)
 80051a0:	f7fd fda6 	bl	8002cf0 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial3, "The kingdom of heaven belongs to them!\n");
 80051a4:	48af      	ldr	r0, [pc, #700]	; (8005464 <main+0x2e4>)
 80051a6:	49b1      	ldr	r1, [pc, #708]	; (800546c <main+0x2ec>)
 80051a8:	f7fd fda2 	bl	8002cf0 <usart_print>
	usart_print(&Serial3, "How many eyes does Mississipi river have?\n");
 80051ac:	48ad      	ldr	r0, [pc, #692]	; (8005464 <main+0x2e4>)
 80051ae:	49b0      	ldr	r1, [pc, #704]	; (8005470 <main+0x2f0>)
 80051b0:	f7fd fd9e 	bl	8002cf0 <usart_print>
	usart_print(&Serial3, "Quick brown fox jumped over the lazy dog!\n");
 80051b4:	49af      	ldr	r1, [pc, #700]	; (8005474 <main+0x2f4>)
 80051b6:	48ab      	ldr	r0, [pc, #684]	; (8005464 <main+0x2e4>)
 80051b8:	f7fd fd9a 	bl	8002cf0 <usart_print>
	usart_flush(&Serial3);
 80051bc:	48a9      	ldr	r0, [pc, #676]	; (8005464 <main+0x2e4>)
 80051be:	f7fd fdaf 	bl	8002d20 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 80051c2:	a81a      	add	r0, sp, #104	; 0x68
 80051c4:	f7fb fbe8 	bl	8000998 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 80051c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80051ca:	49ab      	ldr	r1, [pc, #684]	; (8005478 <main+0x2f8>)
 80051cc:	a803      	add	r0, sp, #12
 80051ce:	f000 fa29 	bl	8005624 <sprintf>
	usart_print(&Serial3, tmp);
 80051d2:	48a4      	ldr	r0, [pc, #656]	; (8005464 <main+0x2e4>)
 80051d4:	a903      	add	r1, sp, #12
 80051d6:	f7fd fd8b 	bl	8002cf0 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 80051da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80051dc:	49a7      	ldr	r1, [pc, #668]	; (800547c <main+0x2fc>)
 80051de:	a803      	add	r0, sp, #12
 80051e0:	f000 fa20 	bl	8005624 <sprintf>
	usart_print(&Serial3, tmp);
 80051e4:	489f      	ldr	r0, [pc, #636]	; (8005464 <main+0x2e4>)
 80051e6:	a903      	add	r1, sp, #12
 80051e8:	f7fd fd82 	bl	8002cf0 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 80051ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051ee:	49a4      	ldr	r1, [pc, #656]	; (8005480 <main+0x300>)
 80051f0:	a803      	add	r0, sp, #12
 80051f2:	f000 fa17 	bl	8005624 <sprintf>
	usart_print(&Serial3, tmp);
 80051f6:	489b      	ldr	r0, [pc, #620]	; (8005464 <main+0x2e4>)
 80051f8:	a903      	add	r1, sp, #12
 80051fa:	f7fd fd79 	bl	8002cf0 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 80051fe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005200:	49a0      	ldr	r1, [pc, #640]	; (8005484 <main+0x304>)
 8005202:	a803      	add	r0, sp, #12
 8005204:	f000 fa0e 	bl	8005624 <sprintf>
	usart_print(&Serial3, tmp);
 8005208:	a903      	add	r1, sp, #12
 800520a:	4896      	ldr	r0, [pc, #600]	; (8005464 <main+0x2e4>)
 800520c:	f7fd fd70 	bl	8002cf0 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8005210:	f240 400c 	movw	r0, #1036	; 0x40c
 8005214:	f7fd f832 	bl	800227c <PinPort>
 8005218:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800521a:	f240 400c 	movw	r0, #1036	; 0x40c
 800521e:	f7fd f835 	bl	800228c <PinBit>
 8005222:	4605      	mov	r5, r0
 8005224:	f240 400d 	movw	r0, #1037	; 0x40d
 8005228:	f7fd f830 	bl	800228c <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 800522c:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800522e:	f240 400e 	movw	r0, #1038	; 0x40e
 8005232:	f7fd f82b 	bl	800228c <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8005236:	b2ad      	uxth	r5, r5
 8005238:	4305      	orrs	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800523a:	f240 400f 	movw	r0, #1039	; 0x40f
 800523e:	f7fd f825 	bl	800228c <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12),
 8005242:	b2ad      	uxth	r5, r5
 8005244:	2300      	movs	r3, #0
 8005246:	4305      	orrs	r5, r0
 8005248:	2201      	movs	r2, #1
 800524a:	4620      	mov	r0, r4
 800524c:	b2a9      	uxth	r1, r5
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	2302      	movs	r3, #2
 8005254:	f7fd f888 	bl	8002368 <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8005258:	f44f 7403 	mov.w	r4, #524	; 0x20c
 800525c:	f240 220e 	movw	r2, #526	; 0x20e
 8005260:	f240 230f 	movw	r3, #527	; 0x20f
 8005264:	4888      	ldr	r0, [pc, #544]	; (8005488 <main+0x308>)
 8005266:	9400      	str	r4, [sp, #0]
 8005268:	f240 210d 	movw	r1, #525	; 0x20d
 800526c:	f7fd fa8e 	bl	800278c <spi_begin>
	digitalWrite(PB12, HIGH);
 8005270:	4620      	mov	r0, r4
 8005272:	2101      	movs	r1, #1
 8005274:	f7fd f83a 	bl	80022ec <digitalWrite>

	i2c_begin(&Wire1, 100000);
 8005278:	4984      	ldr	r1, [pc, #528]	; (800548c <main+0x30c>)
 800527a:	4885      	ldr	r0, [pc, #532]	; (8005490 <main+0x310>)
 800527c:	f7fd f8d0 	bl	8002420 <i2c_begin>
	ST7032i_init(&lcd, &Wire1);
 8005280:	4983      	ldr	r1, [pc, #524]	; (8005490 <main+0x310>)
 8005282:	4884      	ldr	r0, [pc, #528]	; (8005494 <main+0x314>)
 8005284:	f7fc fe0a 	bl	8001e9c <ST7032i_init>
	ST7032i_begin(&lcd);
 8005288:	4882      	ldr	r0, [pc, #520]	; (8005494 <main+0x314>)
 800528a:	f7fc feb3 	bl	8001ff4 <ST7032i_begin>
	ST7032i_setContrast(&lcd, 46);
 800528e:	212e      	movs	r1, #46	; 0x2e
 8005290:	4880      	ldr	r0, [pc, #512]	; (8005494 <main+0x314>)
 8005292:	f7fc fe41 	bl	8001f18 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 8005296:	4980      	ldr	r1, [pc, #512]	; (8005498 <main+0x318>)
 8005298:	487e      	ldr	r0, [pc, #504]	; (8005494 <main+0x314>)
 800529a:	f7fc fe2e 	bl	8001efa <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 800529e:	487f      	ldr	r0, [pc, #508]	; (800549c <main+0x31c>)
 80052a0:	f7fb f8af 	bl	8000402 <GPIO_ReadOutputData>
 80052a4:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80052a6:	f240 400d 	movw	r0, #1037	; 0x40d
 80052aa:	f7fc ffef 	bl	800228c <PinBit>
 80052ae:	0521      	lsls	r1, r4, #20
 80052b0:	ea40 5111 	orr.w	r1, r0, r1, lsr #20
 80052b4:	b289      	uxth	r1, r1
 80052b6:	4879      	ldr	r0, [pc, #484]	; (800549c <main+0x31c>)
 80052b8:	f7fd f8b0 	bl	800241c <GPIOWrite>
	delay_ms(intval);
 80052bc:	2028      	movs	r0, #40	; 0x28
 80052be:	f7fc ffa1 	bl	8002204 <delay_ms>
	tnow = millis() / 1000;
 80052c2:	f7fc ff99 	bl	80021f8 <millis>
 80052c6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052ca:	fbb0 f6f4 	udiv	r6, r0, r4
	while (tnow == millis() / 1000)
 80052ce:	f7fc ff93 	bl	80021f8 <millis>
 80052d2:	fbb0 f0f4 	udiv	r0, r0, r4
 80052d6:	4286      	cmp	r6, r0
 80052d8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80052dc:	d0f7      	beq.n	80052ce <main+0x14e>
		;
	tnow = millis() / 1000;
 80052de:	f7fc ff8b 	bl	80021f8 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 80052e2:	462e      	mov	r6, r5
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 80052e4:	fbb0 f4f5 	udiv	r4, r0, r5

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 80052e8:	486c      	ldr	r0, [pc, #432]	; (800549c <main+0x31c>)
 80052ea:	f7fb f88a 	bl	8000402 <GPIO_ReadOutputData>
 80052ee:	4607      	mov	r7, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80052f0:	f240 400d 	movw	r0, #1037	; 0x40d
 80052f4:	f7fc ffca 	bl	800228c <PinBit>
 80052f8:	053f      	lsls	r7, r7, #20
 80052fa:	0d3f      	lsrs	r7, r7, #20
 80052fc:	ea47 0100 	orr.w	r1, r7, r0
 8005300:	b289      	uxth	r1, r1
 8005302:	4866      	ldr	r0, [pc, #408]	; (800549c <main+0x31c>)
 8005304:	f7fd f88a 	bl	800241c <GPIOWrite>
		delay_ms(intval);
 8005308:	2028      	movs	r0, #40	; 0x28
 800530a:	f7fc ff7b 	bl	8002204 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 800530e:	f240 400e 	movw	r0, #1038	; 0x40e
 8005312:	f7fc ffbb 	bl	800228c <PinBit>
 8005316:	ea47 0100 	orr.w	r1, r7, r0
 800531a:	b289      	uxth	r1, r1
 800531c:	485f      	ldr	r0, [pc, #380]	; (800549c <main+0x31c>)
 800531e:	f7fd f87d 	bl	800241c <GPIOWrite>
		delay_ms(intval);
 8005322:	2028      	movs	r0, #40	; 0x28
 8005324:	f7fc ff6e 	bl	8002204 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8005328:	f240 400f 	movw	r0, #1039	; 0x40f
 800532c:	f7fc ffae 	bl	800228c <PinBit>
 8005330:	ea47 0100 	orr.w	r1, r7, r0
 8005334:	b289      	uxth	r1, r1
 8005336:	4859      	ldr	r0, [pc, #356]	; (800549c <main+0x31c>)
 8005338:	f7fd f870 	bl	800241c <GPIOWrite>
		delay_ms(intval);
 800533c:	2028      	movs	r0, #40	; 0x28
 800533e:	f7fc ff61 	bl	8002204 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8005342:	f240 400c 	movw	r0, #1036	; 0x40c
 8005346:	f7fc ffa1 	bl	800228c <PinBit>
 800534a:	ea47 0100 	orr.w	r1, r7, r0
 800534e:	b289      	uxth	r1, r1
 8005350:	4852      	ldr	r0, [pc, #328]	; (800549c <main+0x31c>)
 8005352:	f7fd f863 	bl	800241c <GPIOWrite>
		delay_ms(intval);
 8005356:	2028      	movs	r0, #40	; 0x28
 8005358:	f7fc ff54 	bl	8002204 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 800535c:	233c      	movs	r3, #60	; 0x3c
 800535e:	fbb4 f2f3 	udiv	r2, r4, r3
 8005362:	fb03 4312 	mls	r3, r3, r2, r4
 8005366:	220f      	movs	r2, #15
 8005368:	fbb3 f3f2 	udiv	r3, r3, r2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d00a      	beq.n	8005386 <main+0x206>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d002      	beq.n	800537a <main+0x1fa>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d112      	bne.n	800539e <main+0x21e>
 8005378:	e00b      	b.n	8005392 <main+0x212>
		case 3:
			bits |= PinBit(PD12);
 800537a:	f240 400c 	movw	r0, #1036	; 0x40c
 800537e:	f7fc ff85 	bl	800228c <PinBit>
 8005382:	4307      	orrs	r7, r0
 8005384:	b2bf      	uxth	r7, r7
		case 2:
			bits |= PinBit(PD15);
 8005386:	f240 400f 	movw	r0, #1039	; 0x40f
 800538a:	f7fc ff7f 	bl	800228c <PinBit>
 800538e:	4307      	orrs	r7, r0
 8005390:	b2bf      	uxth	r7, r7
		case 1:
			bits |= PinBit(PD14);
 8005392:	f240 400e 	movw	r0, #1038	; 0x40e
 8005396:	f7fc ff79 	bl	800228c <PinBit>
 800539a:	4307      	orrs	r7, r0
 800539c:	b2bf      	uxth	r7, r7
		case 0:
		default:
			bits |= PinBit(PD13);
 800539e:	f240 400d 	movw	r0, #1037	; 0x40d
 80053a2:	f7fc ff73 	bl	800228c <PinBit>
 80053a6:	4307      	orrs	r7, r0
			break;
		}
		GPIOWrite(GPIOD, bits);
 80053a8:	b2b9      	uxth	r1, r7
 80053aa:	483c      	ldr	r0, [pc, #240]	; (800549c <main+0x31c>)
 80053ac:	f7fd f836 	bl	800241c <GPIOWrite>

		while (tnow == millis() / 1000);
 80053b0:	f7fc ff22 	bl	80021f8 <millis>
 80053b4:	fbb0 f0f5 	udiv	r0, r0, r5
 80053b8:	4284      	cmp	r4, r0
 80053ba:	d0f9      	beq.n	80053b0 <main+0x230>
		tnow = millis() / 1000;
 80053bc:	f7fc ff1c 	bl	80021f8 <millis>
 80053c0:	fbb0 f4f6 	udiv	r4, r0, r6

		sprintf(tmp, "%04ld", millis());
 80053c4:	f7fc ff18 	bl	80021f8 <millis>
 80053c8:	4935      	ldr	r1, [pc, #212]	; (80054a0 <main+0x320>)
 80053ca:	4602      	mov	r2, r0
 80053cc:	a803      	add	r0, sp, #12
 80053ce:	f000 f929 	bl	8005624 <sprintf>
		usart_print(&Serial3, tmp);
 80053d2:	4824      	ldr	r0, [pc, #144]	; (8005464 <main+0x2e4>)
 80053d4:	a903      	add	r1, sp, #12
 80053d6:	f7fd fc8b 	bl	8002cf0 <usart_print>
		usart_print(&Serial3, "\n");
 80053da:	4822      	ldr	r0, [pc, #136]	; (8005464 <main+0x2e4>)
 80053dc:	4931      	ldr	r1, [pc, #196]	; (80054a4 <main+0x324>)
 80053de:	f7fd fc87 	bl	8002cf0 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 80053e2:	2201      	movs	r2, #1
 80053e4:	482b      	ldr	r0, [pc, #172]	; (8005494 <main+0x314>)
 80053e6:	2100      	movs	r1, #0
 80053e8:	f7fc fdd3 	bl	8001f92 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 80053ec:	a903      	add	r1, sp, #12
 80053ee:	4829      	ldr	r0, [pc, #164]	; (8005494 <main+0x314>)
 80053f0:	f7fc fd83 	bl	8001efa <ST7032i_print>

		digitalWrite(PB12, LOW);
 80053f4:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80053f8:	2100      	movs	r1, #0
 80053fa:	f7fc ff77 	bl	80022ec <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 80053fe:	4822      	ldr	r0, [pc, #136]	; (8005488 <main+0x308>)
 8005400:	a903      	add	r1, sp, #12
 8005402:	2208      	movs	r2, #8
 8005404:	f7fd fa78 	bl	80028f8 <spi_transfer>
		digitalWrite(PB12, HIGH);
 8005408:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800540c:	2101      	movs	r1, #1
 800540e:	f7fc ff6d 	bl	80022ec <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 8005412:	4814      	ldr	r0, [pc, #80]	; (8005464 <main+0x2e4>)
 8005414:	f7fd fca9 	bl	8002d6a <usart_available>
 8005418:	b938      	cbnz	r0, 800542a <main+0x2aa>
 800541a:	e765      	b.n	80052e8 <main+0x168>
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
 800541c:	4811      	ldr	r0, [pc, #68]	; (8005464 <main+0x2e4>)
 800541e:	f7fd fc75 	bl	8002d0c <usart_read>
 8005422:	ab03      	add	r3, sp, #12
 8005424:	54f8      	strb	r0, [r7, r3]
 8005426:	3701      	adds	r7, #1
 8005428:	e000      	b.n	800542c <main+0x2ac>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 800542a:	2700      	movs	r7, #0
			while (usart_available(&Serial3) > 0 && i < 92) {
 800542c:	480d      	ldr	r0, [pc, #52]	; (8005464 <main+0x2e4>)
				tmp[i++] = (char) usart_read(&Serial3);
 800542e:	fa1f f887 	uxth.w	r8, r7
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
			while (usart_available(&Serial3) > 0 && i < 92) {
 8005432:	f7fd fc9a 	bl	8002d6a <usart_available>
 8005436:	b110      	cbz	r0, 800543e <main+0x2be>
 8005438:	2f5c      	cmp	r7, #92	; 0x5c
 800543a:	d1ef      	bne.n	800541c <main+0x29c>
 800543c:	46b8      	mov	r8, r7
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 800543e:	ab1e      	add	r3, sp, #120	; 0x78
 8005440:	4498      	add	r8, r3
 8005442:	2300      	movs	r3, #0
 8005444:	f808 3c6c 	strb.w	r3, [r8, #-108]
			usart_print(&Serial3, "> ");
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <main+0x2e4>)
 800544a:	4917      	ldr	r1, [pc, #92]	; (80054a8 <main+0x328>)
 800544c:	f7fd fc50 	bl	8002cf0 <usart_print>
			usart_print(&Serial3, tmp);
 8005450:	a903      	add	r1, sp, #12
 8005452:	4804      	ldr	r0, [pc, #16]	; (8005464 <main+0x2e4>)
 8005454:	f7fd fc4c 	bl	8002cf0 <usart_print>
			usart_print(&Serial3, "\n");
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <main+0x2e4>)
 800545a:	4912      	ldr	r1, [pc, #72]	; (80054a4 <main+0x324>)
 800545c:	f7fd fc48 	bl	8002cf0 <usart_print>
 8005460:	e742      	b.n	80052e8 <main+0x168>
 8005462:	bf00      	nop
 8005464:	20001014 	.word	0x20001014
 8005468:	0800a13c 	.word	0x0800a13c
 800546c:	0800a172 	.word	0x0800a172
 8005470:	0800a19a 	.word	0x0800a19a
 8005474:	0800a1c5 	.word	0x0800a1c5
 8005478:	0800a1f0 	.word	0x0800a1f0
 800547c:	0800a1ff 	.word	0x0800a1ff
 8005480:	0800a20c 	.word	0x0800a20c
 8005484:	0800a21a 	.word	0x0800a21a
 8005488:	40003800 	.word	0x40003800
 800548c:	000186a0 	.word	0x000186a0
 8005490:	200009a8 	.word	0x200009a8
 8005494:	20001678 	.word	0x20001678
 8005498:	0800a228 	.word	0x0800a228
 800549c:	40020c00 	.word	0x40020c00
 80054a0:	0800a232 	.word	0x0800a232
 80054a4:	0800a226 	.word	0x0800a226
 80054a8:	0800a238 	.word	0x0800a238

080054ac <Reset_Handler>:
 80054ac:	2100      	movs	r1, #0
 80054ae:	e003      	b.n	80054b8 <LoopCopyDataInit>

080054b0 <CopyDataInit>:
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <LoopFillZerobss+0x10>)
 80054b2:	585b      	ldr	r3, [r3, r1]
 80054b4:	5043      	str	r3, [r0, r1]
 80054b6:	3104      	adds	r1, #4

080054b8 <LoopCopyDataInit>:
 80054b8:	4809      	ldr	r0, [pc, #36]	; (80054e0 <LoopFillZerobss+0x14>)
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <LoopFillZerobss+0x18>)
 80054bc:	1842      	adds	r2, r0, r1
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3f6      	bcc.n	80054b0 <CopyDataInit>
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <LoopFillZerobss+0x1c>)
 80054c4:	e002      	b.n	80054cc <LoopFillZerobss>

080054c6 <FillZerobss>:
 80054c6:	2300      	movs	r3, #0
 80054c8:	f842 3b04 	str.w	r3, [r2], #4

080054cc <LoopFillZerobss>:
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <LoopFillZerobss+0x20>)
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d3f9      	bcc.n	80054c6 <FillZerobss>
 80054d2:	f7fd fdff 	bl	80030d4 <SystemInit>
 80054d6:	f7ff fe53 	bl	8005180 <main>
 80054da:	4770      	bx	lr
 80054dc:	0800a544 	.word	0x0800a544
 80054e0:	20000000 	.word	0x20000000
 80054e4:	20000958 	.word	0x20000958
 80054e8:	20000958 	.word	0x20000958
 80054ec:	2000168c 	.word	0x2000168c

080054f0 <ADC_IRQHandler>:
 80054f0:	e7fe      	b.n	80054f0 <ADC_IRQHandler>
	...

080054f4 <cleanup_glue>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	6809      	ldr	r1, [r1, #0]
 80054fa:	4605      	mov	r5, r0
 80054fc:	b109      	cbz	r1, 8005502 <cleanup_glue+0xe>
 80054fe:	f7ff fff9 	bl	80054f4 <cleanup_glue>
 8005502:	4628      	mov	r0, r5
 8005504:	4621      	mov	r1, r4
 8005506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800550a:	f002 bae1 	b.w	8007ad0 <_free_r>
 800550e:	bf00      	nop

08005510 <_reclaim_reent>:
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <_reclaim_reent+0x8c>)
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4605      	mov	r5, r0
 8005518:	4298      	cmp	r0, r3
 800551a:	d032      	beq.n	8005582 <_reclaim_reent+0x72>
 800551c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800551e:	b1ab      	cbz	r3, 800554c <_reclaim_reent+0x3c>
 8005520:	2200      	movs	r2, #0
 8005522:	4616      	mov	r6, r2
 8005524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005528:	b909      	cbnz	r1, 800552e <_reclaim_reent+0x1e>
 800552a:	e007      	b.n	800553c <_reclaim_reent+0x2c>
 800552c:	4621      	mov	r1, r4
 800552e:	680c      	ldr	r4, [r1, #0]
 8005530:	4628      	mov	r0, r5
 8005532:	f002 facd 	bl	8007ad0 <_free_r>
 8005536:	2c00      	cmp	r4, #0
 8005538:	d1f8      	bne.n	800552c <_reclaim_reent+0x1c>
 800553a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800553c:	3601      	adds	r6, #1
 800553e:	2e20      	cmp	r6, #32
 8005540:	4632      	mov	r2, r6
 8005542:	d1ef      	bne.n	8005524 <_reclaim_reent+0x14>
 8005544:	4628      	mov	r0, r5
 8005546:	4619      	mov	r1, r3
 8005548:	f002 fac2 	bl	8007ad0 <_free_r>
 800554c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800554e:	b111      	cbz	r1, 8005556 <_reclaim_reent+0x46>
 8005550:	4628      	mov	r0, r5
 8005552:	f002 fabd 	bl	8007ad0 <_free_r>
 8005556:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800555a:	b159      	cbz	r1, 8005574 <_reclaim_reent+0x64>
 800555c:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8005560:	42b1      	cmp	r1, r6
 8005562:	d101      	bne.n	8005568 <_reclaim_reent+0x58>
 8005564:	e006      	b.n	8005574 <_reclaim_reent+0x64>
 8005566:	4621      	mov	r1, r4
 8005568:	680c      	ldr	r4, [r1, #0]
 800556a:	4628      	mov	r0, r5
 800556c:	f002 fab0 	bl	8007ad0 <_free_r>
 8005570:	42a6      	cmp	r6, r4
 8005572:	d1f8      	bne.n	8005566 <_reclaim_reent+0x56>
 8005574:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005576:	b111      	cbz	r1, 800557e <_reclaim_reent+0x6e>
 8005578:	4628      	mov	r0, r5
 800557a:	f002 faa9 	bl	8007ad0 <_free_r>
 800557e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005580:	b903      	cbnz	r3, 8005584 <_reclaim_reent+0x74>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005586:	4628      	mov	r0, r5
 8005588:	4798      	blx	r3
 800558a:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800558e:	2900      	cmp	r1, #0
 8005590:	d0f7      	beq.n	8005582 <_reclaim_reent+0x72>
 8005592:	4628      	mov	r0, r5
 8005594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005598:	f7ff bfac 	b.w	80054f4 <cleanup_glue>
 800559c:	200004c8 	.word	0x200004c8

080055a0 <_wrapup_reent>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	4607      	mov	r7, r0
 80055a4:	b1b0      	cbz	r0, 80055d4 <_wrapup_reent+0x34>
 80055a6:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80055aa:	b176      	cbz	r6, 80055ca <_wrapup_reent+0x2a>
 80055ac:	6875      	ldr	r5, [r6, #4]
 80055ae:	1e6c      	subs	r4, r5, #1
 80055b0:	d408      	bmi.n	80055c4 <_wrapup_reent+0x24>
 80055b2:	3502      	adds	r5, #2
 80055b4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80055b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80055bc:	3c01      	subs	r4, #1
 80055be:	4798      	blx	r3
 80055c0:	1c63      	adds	r3, r4, #1
 80055c2:	d1f9      	bne.n	80055b8 <_wrapup_reent+0x18>
 80055c4:	6836      	ldr	r6, [r6, #0]
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	d1f0      	bne.n	80055ac <_wrapup_reent+0xc>
 80055ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055cc:	b10b      	cbz	r3, 80055d2 <_wrapup_reent+0x32>
 80055ce:	4638      	mov	r0, r7
 80055d0:	4798      	blx	r3
 80055d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d4:	4b01      	ldr	r3, [pc, #4]	; (80055dc <_wrapup_reent+0x3c>)
 80055d6:	681f      	ldr	r7, [r3, #0]
 80055d8:	e7e5      	b.n	80055a6 <_wrapup_reent+0x6>
 80055da:	bf00      	nop
 80055dc:	200004c8 	.word	0x200004c8

080055e0 <_sprintf_r>:
 80055e0:	b40c      	push	{r2, r3}
 80055e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e4:	b09d      	sub	sp, #116	; 0x74
 80055e6:	ac22      	add	r4, sp, #136	; 0x88
 80055e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80055ec:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80055f0:	460e      	mov	r6, r1
 80055f2:	4623      	mov	r3, r4
 80055f4:	9503      	str	r5, [sp, #12]
 80055f6:	9506      	str	r5, [sp, #24]
 80055f8:	a901      	add	r1, sp, #4
 80055fa:	f44f 7702 	mov.w	r7, #520	; 0x208
 80055fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005602:	f8ad 7010 	strh.w	r7, [sp, #16]
 8005606:	9601      	str	r6, [sp, #4]
 8005608:	9605      	str	r6, [sp, #20]
 800560a:	f8ad 5012 	strh.w	r5, [sp, #18]
 800560e:	941b      	str	r4, [sp, #108]	; 0x6c
 8005610:	f000 f830 	bl	8005674 <_svfprintf_r>
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	b01d      	add	sp, #116	; 0x74
 800561c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005620:	b002      	add	sp, #8
 8005622:	4770      	bx	lr

08005624 <sprintf>:
 8005624:	b40e      	push	{r1, r2, r3}
 8005626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005628:	f240 43c8 	movw	r3, #1224	; 0x4c8
 800562c:	b09c      	sub	sp, #112	; 0x70
 800562e:	ac21      	add	r4, sp, #132	; 0x84
 8005630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005634:	f854 2b04 	ldr.w	r2, [r4], #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800563e:	4606      	mov	r6, r0
 8005640:	9503      	str	r5, [sp, #12]
 8005642:	9506      	str	r5, [sp, #24]
 8005644:	4618      	mov	r0, r3
 8005646:	a901      	add	r1, sp, #4
 8005648:	4623      	mov	r3, r4
 800564a:	f44f 7702 	mov.w	r7, #520	; 0x208
 800564e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005652:	f8ad 7010 	strh.w	r7, [sp, #16]
 8005656:	9601      	str	r6, [sp, #4]
 8005658:	9605      	str	r6, [sp, #20]
 800565a:	f8ad 5012 	strh.w	r5, [sp, #18]
 800565e:	941b      	str	r4, [sp, #108]	; 0x6c
 8005660:	f000 f808 	bl	8005674 <_svfprintf_r>
 8005664:	9b01      	ldr	r3, [sp, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	b01c      	add	sp, #112	; 0x70
 800566c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005670:	b003      	add	sp, #12
 8005672:	4770      	bx	lr

08005674 <_svfprintf_r>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	b0c3      	sub	sp, #268	; 0x10c
 800567a:	930f      	str	r3, [sp, #60]	; 0x3c
 800567c:	9109      	str	r1, [sp, #36]	; 0x24
 800567e:	4693      	mov	fp, r2
 8005680:	900c      	str	r0, [sp, #48]	; 0x30
 8005682:	f002 fb23 	bl	8007ccc <_localeconv_r>
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	2100      	movs	r1, #0
 800568a:	9014      	str	r0, [sp, #80]	; 0x50
 800568c:	2000      	movs	r0, #0
 800568e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005692:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005694:	f003 fbe8 	bl	8008e68 <strlen>
 8005698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800569a:	9016      	str	r0, [sp, #88]	; 0x58
 800569c:	898b      	ldrh	r3, [r1, #12]
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	d503      	bpl.n	80056aa <_svfprintf_r+0x36>
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f001 802e 	beq.w	8006706 <_svfprintf_r+0x1092>
 80056aa:	f246 6067 	movw	r0, #26215	; 0x6667
 80056ae:	2300      	movs	r3, #0
 80056b0:	a91d      	add	r1, sp, #116	; 0x74
 80056b2:	f2c6 6066 	movt	r0, #26214	; 0x6666
 80056b6:	930e      	str	r3, [sp, #56]	; 0x38
 80056b8:	9137      	str	r1, [sp, #220]	; 0xdc
 80056ba:	9339      	str	r3, [sp, #228]	; 0xe4
 80056bc:	9338      	str	r3, [sp, #224]	; 0xe0
 80056be:	931a      	str	r3, [sp, #104]	; 0x68
 80056c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80056c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056c4:	460e      	mov	r6, r1
 80056c6:	9017      	str	r0, [sp, #92]	; 0x5c
 80056c8:	f89b 3000 	ldrb.w	r3, [fp]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80bc 	beq.w	800584a <_svfprintf_r+0x1d6>
 80056d2:	2b25      	cmp	r3, #37	; 0x25
 80056d4:	f000 80b9 	beq.w	800584a <_svfprintf_r+0x1d6>
 80056d8:	465a      	mov	r2, fp
 80056da:	465f      	mov	r7, fp
 80056dc:	e001      	b.n	80056e2 <_svfprintf_r+0x6e>
 80056de:	2b25      	cmp	r3, #37	; 0x25
 80056e0:	d004      	beq.n	80056ec <_svfprintf_r+0x78>
 80056e2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80056e6:	3701      	adds	r7, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f8      	bne.n	80056de <_svfprintf_r+0x6a>
 80056ec:	ebcb 0307 	rsb	r3, fp, r7
 80056f0:	b17b      	cbz	r3, 8005712 <_svfprintf_r+0x9e>
 80056f2:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80056f4:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 80056f6:	3401      	adds	r4, #1
 80056f8:	18ed      	adds	r5, r5, r3
 80056fa:	2c07      	cmp	r4, #7
 80056fc:	f8c6 b000 	str.w	fp, [r6]
 8005700:	6073      	str	r3, [r6, #4]
 8005702:	9539      	str	r5, [sp, #228]	; 0xe4
 8005704:	9438      	str	r4, [sp, #224]	; 0xe0
 8005706:	f300 8082 	bgt.w	800580e <_svfprintf_r+0x19a>
 800570a:	3608      	adds	r6, #8
 800570c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800570e:	18c0      	adds	r0, r0, r3
 8005710:	900b      	str	r0, [sp, #44]	; 0x2c
 8005712:	783b      	ldrb	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8084 	beq.w	8005822 <_svfprintf_r+0x1ae>
 800571a:	2100      	movs	r1, #0
 800571c:	2200      	movs	r2, #0
 800571e:	f107 0b01 	add.w	fp, r7, #1
 8005722:	787b      	ldrb	r3, [r7, #1]
 8005724:	910a      	str	r1, [sp, #40]	; 0x28
 8005726:	f88d 2107 	strb.w	r2, [sp, #263]	; 0x107
 800572a:	f04f 37ff 	mov.w	r7, #4294967295
 800572e:	9107      	str	r1, [sp, #28]
 8005730:	2420      	movs	r4, #32
 8005732:	202b      	movs	r0, #43	; 0x2b
 8005734:	f10b 0b01 	add.w	fp, fp, #1
 8005738:	f1a3 0220 	sub.w	r2, r3, #32
 800573c:	2a58      	cmp	r2, #88	; 0x58
 800573e:	f200 8210 	bhi.w	8005b62 <_svfprintf_r+0x4ee>
 8005742:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005746:	02b0      	.short	0x02b0
 8005748:	020e020e 	.word	0x020e020e
 800574c:	020e029d 	.word	0x020e029d
 8005750:	020e020e 	.word	0x020e020e
 8005754:	020e020e 	.word	0x020e020e
 8005758:	02a4020e 	.word	0x02a4020e
 800575c:	020e0084 	.word	0x020e0084
 8005760:	0089005d 	.word	0x0089005d
 8005764:	00a3020e 	.word	0x00a3020e
 8005768:	00aa00aa 	.word	0x00aa00aa
 800576c:	00aa00aa 	.word	0x00aa00aa
 8005770:	00aa00aa 	.word	0x00aa00aa
 8005774:	00aa00aa 	.word	0x00aa00aa
 8005778:	020e00aa 	.word	0x020e00aa
 800577c:	020e020e 	.word	0x020e020e
 8005780:	020e020e 	.word	0x020e020e
 8005784:	020e020e 	.word	0x020e020e
 8005788:	020e020e 	.word	0x020e020e
 800578c:	00bb020e 	.word	0x00bb020e
 8005790:	020e0149 	.word	0x020e0149
 8005794:	020e0149 	.word	0x020e0149
 8005798:	020e020e 	.word	0x020e020e
 800579c:	017d020e 	.word	0x017d020e
 80057a0:	020e020e 	.word	0x020e020e
 80057a4:	020e0184 	.word	0x020e0184
 80057a8:	020e020e 	.word	0x020e020e
 80057ac:	020e020e 	.word	0x020e020e
 80057b0:	020e019c 	.word	0x020e019c
 80057b4:	01b0020e 	.word	0x01b0020e
 80057b8:	020e020e 	.word	0x020e020e
 80057bc:	020e020e 	.word	0x020e020e
 80057c0:	020e020e 	.word	0x020e020e
 80057c4:	020e020e 	.word	0x020e020e
 80057c8:	020e020e 	.word	0x020e020e
 80057cc:	0220023e 	.word	0x0220023e
 80057d0:	01490149 	.word	0x01490149
 80057d4:	02370149 	.word	0x02370149
 80057d8:	020e0220 	.word	0x020e0220
 80057dc:	0203020e 	.word	0x0203020e
 80057e0:	0279020e 	.word	0x0279020e
 80057e4:	0262024f 	.word	0x0262024f
 80057e8:	020e01d3 	.word	0x020e01d3
 80057ec:	020e01da 	.word	0x020e01da
 80057f0:	020e0287 	.word	0x020e0287
 80057f4:	02c5020e 	.word	0x02c5020e
 80057f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fa:	910f      	str	r1, [sp, #60]	; 0x3c
 80057fc:	425b      	negs	r3, r3
 80057fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005800:	9907      	ldr	r1, [sp, #28]
 8005802:	f041 0104 	orr.w	r1, r1, #4
 8005806:	9107      	str	r1, [sp, #28]
 8005808:	f89b 3000 	ldrb.w	r3, [fp]
 800580c:	e792      	b.n	8005734 <_svfprintf_r+0xc0>
 800580e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005812:	aa37      	add	r2, sp, #220	; 0xdc
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	f003 fb57 	bl	8008ec8 <__ssprint_r>
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	b940      	cbnz	r0, 8005830 <_svfprintf_r+0x1bc>
 800581e:	ae1d      	add	r6, sp, #116	; 0x74
 8005820:	e774      	b.n	800570c <_svfprintf_r+0x98>
 8005822:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8005824:	b123      	cbz	r3, 8005830 <_svfprintf_r+0x1bc>
 8005826:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800582a:	aa37      	add	r2, sp, #220	; 0xdc
 800582c:	f003 fb4c 	bl	8008ec8 <__ssprint_r>
 8005830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005834:	898b      	ldrh	r3, [r1, #12]
 8005836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800583a:	bf18      	it	ne
 800583c:	f04f 32ff 	movne.w	r2, #4294967295
 8005840:	920b      	str	r2, [sp, #44]	; 0x2c
 8005842:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005844:	b043      	add	sp, #268	; 0x10c
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	465f      	mov	r7, fp
 800584c:	e761      	b.n	8005712 <_svfprintf_r+0x9e>
 800584e:	f88d 0107 	strb.w	r0, [sp, #263]	; 0x107
 8005852:	f89b 3000 	ldrb.w	r3, [fp]
 8005856:	e76d      	b.n	8005734 <_svfprintf_r+0xc0>
 8005858:	465a      	mov	r2, fp
 800585a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800585e:	2b2a      	cmp	r3, #42	; 0x2a
 8005860:	f001 80ea 	beq.w	8006a38 <_svfprintf_r+0x13c4>
 8005864:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005868:	2909      	cmp	r1, #9
 800586a:	f201 8099 	bhi.w	80069a0 <_svfprintf_r+0x132c>
 800586e:	2700      	movs	r7, #0
 8005870:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005874:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005878:	eb01 0747 	add.w	r7, r1, r7, lsl #1
 800587c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005880:	2909      	cmp	r1, #9
 8005882:	4693      	mov	fp, r2
 8005884:	d9f4      	bls.n	8005870 <_svfprintf_r+0x1fc>
 8005886:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 800588a:	e755      	b.n	8005738 <_svfprintf_r+0xc4>
 800588c:	9907      	ldr	r1, [sp, #28]
 800588e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005892:	9107      	str	r1, [sp, #28]
 8005894:	f89b 3000 	ldrb.w	r3, [fp]
 8005898:	e74c      	b.n	8005734 <_svfprintf_r+0xc0>
 800589a:	4659      	mov	r1, fp
 800589c:	2200      	movs	r2, #0
 800589e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80058a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80058aa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80058ae:	2d09      	cmp	r5, #9
 80058b0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80058b4:	468b      	mov	fp, r1
 80058b6:	d9f2      	bls.n	800589e <_svfprintf_r+0x22a>
 80058b8:	920a      	str	r2, [sp, #40]	; 0x28
 80058ba:	e73d      	b.n	8005738 <_svfprintf_r+0xc4>
 80058bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80058be:	9b07      	ldr	r3, [sp, #28]
 80058c0:	f043 0310 	orr.w	r3, r3, #16
 80058c4:	9307      	str	r3, [sp, #28]
 80058c6:	9807      	ldr	r0, [sp, #28]
 80058c8:	0680      	lsls	r0, r0, #26
 80058ca:	f140 8161 	bpl.w	8005b90 <_svfprintf_r+0x51c>
 80058ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058d0:	1dcb      	adds	r3, r1, #7
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058da:	3308      	adds	r3, #8
 80058dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058de:	4680      	mov	r8, r0
 80058e0:	4689      	mov	r9, r1
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f171 0200 	sbcs.w	r2, r1, #0
 80058e8:	f2c0 8523 	blt.w	8006332 <_svfprintf_r+0xcbe>
 80058ec:	2301      	movs	r3, #1
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	db03      	blt.n	80058fa <_svfprintf_r+0x286>
 80058f2:	9907      	ldr	r1, [sp, #28]
 80058f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80058f8:	9107      	str	r1, [sp, #28]
 80058fa:	ea58 0209 	orrs.w	r2, r8, r9
 80058fe:	f040 82d7 	bne.w	8005eb0 <_svfprintf_r+0x83c>
 8005902:	2f00      	cmp	r7, #0
 8005904:	f040 82d4 	bne.w	8005eb0 <_svfprintf_r+0x83c>
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 8451 	bne.w	80061b0 <_svfprintf_r+0xb3c>
 800590e:	9a07      	ldr	r2, [sp, #28]
 8005910:	07d1      	lsls	r1, r2, #31
 8005912:	f140 844d 	bpl.w	80061b0 <_svfprintf_r+0xb3c>
 8005916:	2330      	movs	r3, #48	; 0x30
 8005918:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
 800591c:	2301      	movs	r3, #1
 800591e:	930d      	str	r3, [sp, #52]	; 0x34
 8005920:	f10d 0adb 	add.w	sl, sp, #219	; 0xdb
 8005924:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005926:	2100      	movs	r1, #0
 8005928:	42b8      	cmp	r0, r7
 800592a:	bfb8      	it	lt
 800592c:	4638      	movlt	r0, r7
 800592e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8005932:	9008      	str	r0, [sp, #32]
 8005934:	9710      	str	r7, [sp, #64]	; 0x40
 8005936:	9115      	str	r1, [sp, #84]	; 0x54
 8005938:	b113      	cbz	r3, 8005940 <_svfprintf_r+0x2cc>
 800593a:	9808      	ldr	r0, [sp, #32]
 800593c:	3001      	adds	r0, #1
 800593e:	9008      	str	r0, [sp, #32]
 8005940:	9b07      	ldr	r3, [sp, #28]
 8005942:	f013 0302 	ands.w	r3, r3, #2
 8005946:	9311      	str	r3, [sp, #68]	; 0x44
 8005948:	d002      	beq.n	8005950 <_svfprintf_r+0x2dc>
 800594a:	9808      	ldr	r0, [sp, #32]
 800594c:	3002      	adds	r0, #2
 800594e:	9008      	str	r0, [sp, #32]
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005956:	9312      	str	r3, [sp, #72]	; 0x48
 8005958:	f040 81d1 	bne.w	8005cfe <_svfprintf_r+0x68a>
 800595c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800595e:	9908      	ldr	r1, [sp, #32]
 8005960:	1a47      	subs	r7, r0, r1
 8005962:	2f00      	cmp	r7, #0
 8005964:	f340 81cb 	ble.w	8005cfe <_svfprintf_r+0x68a>
 8005968:	2f10      	cmp	r7, #16
 800596a:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800596c:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800596e:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8005ccc <_svfprintf_r+0x658>
 8005972:	dd25      	ble.n	80059c0 <_svfprintf_r+0x34c>
 8005974:	4623      	mov	r3, r4
 8005976:	462a      	mov	r2, r5
 8005978:	4644      	mov	r4, r8
 800597a:	f04f 0910 	mov.w	r9, #16
 800597e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005980:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005984:	e003      	b.n	800598e <_svfprintf_r+0x31a>
 8005986:	3f10      	subs	r7, #16
 8005988:	3608      	adds	r6, #8
 800598a:	2f10      	cmp	r7, #16
 800598c:	dd15      	ble.n	80059ba <_svfprintf_r+0x346>
 800598e:	3301      	adds	r3, #1
 8005990:	3210      	adds	r2, #16
 8005992:	2b07      	cmp	r3, #7
 8005994:	e886 0210 	stmia.w	r6, {r4, r9}
 8005998:	9239      	str	r2, [sp, #228]	; 0xe4
 800599a:	9338      	str	r3, [sp, #224]	; 0xe0
 800599c:	ddf3      	ble.n	8005986 <_svfprintf_r+0x312>
 800599e:	4640      	mov	r0, r8
 80059a0:	4629      	mov	r1, r5
 80059a2:	aa37      	add	r2, sp, #220	; 0xdc
 80059a4:	f003 fa90 	bl	8008ec8 <__ssprint_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	f47f af41 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80059ae:	3f10      	subs	r7, #16
 80059b0:	2f10      	cmp	r7, #16
 80059b2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80059b4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80059b6:	ae1d      	add	r6, sp, #116	; 0x74
 80059b8:	dce9      	bgt.n	800598e <_svfprintf_r+0x31a>
 80059ba:	46a0      	mov	r8, r4
 80059bc:	4615      	mov	r5, r2
 80059be:	461c      	mov	r4, r3
 80059c0:	3401      	adds	r4, #1
 80059c2:	19ed      	adds	r5, r5, r7
 80059c4:	2c07      	cmp	r4, #7
 80059c6:	f8c6 8000 	str.w	r8, [r6]
 80059ca:	6077      	str	r7, [r6, #4]
 80059cc:	9539      	str	r5, [sp, #228]	; 0xe4
 80059ce:	9438      	str	r4, [sp, #224]	; 0xe0
 80059d0:	f300 8443 	bgt.w	800625a <_svfprintf_r+0xbe6>
 80059d4:	3608      	adds	r6, #8
 80059d6:	e193      	b.n	8005d00 <_svfprintf_r+0x68c>
 80059d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80059da:	9313      	str	r3, [sp, #76]	; 0x4c
 80059dc:	1dc3      	adds	r3, r0, #7
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	f8d3 8000 	ldr.w	r8, [r3]
 80059e6:	685d      	ldr	r5, [r3, #4]
 80059e8:	3308      	adds	r3, #8
 80059ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ec:	4642      	mov	r2, r8
 80059ee:	462b      	mov	r3, r5
 80059f0:	4629      	mov	r1, r5
 80059f2:	4640      	mov	r0, r8
 80059f4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80059f8:	f003 f902 	bl	8008c00 <__fpclassifyd>
 80059fc:	2801      	cmp	r0, #1
 80059fe:	4629      	mov	r1, r5
 8005a00:	4640      	mov	r0, r8
 8005a02:	f040 854a 	bne.w	800649a <_svfprintf_r+0xe26>
 8005a06:	2200      	movs	r2, #0
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f7fe f83b 	bl	8003a84 <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f040 8674 	bne.w	80066fc <_svfprintf_r+0x1088>
 8005a14:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8005a18:	2003      	movs	r0, #3
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4aa7      	ldr	r2, [pc, #668]	; (8005cbc <_svfprintf_r+0x648>)
 8005a1e:	9008      	str	r0, [sp, #32]
 8005a20:	9110      	str	r1, [sp, #64]	; 0x40
 8005a22:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005a24:	49a6      	ldr	r1, [pc, #664]	; (8005cc0 <_svfprintf_r+0x64c>)
 8005a26:	2847      	cmp	r0, #71	; 0x47
 8005a28:	bfcc      	ite	gt
 8005a2a:	468a      	movgt	sl, r1
 8005a2c:	4692      	movle	sl, r2
 8005a2e:	9907      	ldr	r1, [sp, #28]
 8005a30:	2203      	movs	r2, #3
 8005a32:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a36:	2000      	movs	r0, #0
 8005a38:	9107      	str	r1, [sp, #28]
 8005a3a:	920d      	str	r2, [sp, #52]	; 0x34
 8005a3c:	9015      	str	r0, [sp, #84]	; 0x54
 8005a3e:	e77b      	b.n	8005938 <_svfprintf_r+0x2c4>
 8005a40:	9a07      	ldr	r2, [sp, #28]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	9207      	str	r2, [sp, #28]
 8005a48:	f89b 3000 	ldrb.w	r3, [fp]
 8005a4c:	e672      	b.n	8005734 <_svfprintf_r+0xc0>
 8005a4e:	9907      	ldr	r1, [sp, #28]
 8005a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a52:	f041 0110 	orr.w	r1, r1, #16
 8005a56:	9107      	str	r1, [sp, #28]
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	f012 0320 	ands.w	r3, r2, #32
 8005a5e:	f000 80c7 	beq.w	8005bf0 <_svfprintf_r+0x57c>
 8005a62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005a64:	1dc3      	adds	r3, r0, #7
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	f103 0108 	add.w	r1, r3, #8
 8005a6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a72:	910f      	str	r1, [sp, #60]	; 0x3c
 8005a74:	2300      	movs	r3, #0
 8005a76:	2000      	movs	r0, #0
 8005a78:	f88d 0107 	strb.w	r0, [sp, #263]	; 0x107
 8005a7c:	e737      	b.n	80058ee <_svfprintf_r+0x27a>
 8005a7e:	9a07      	ldr	r2, [sp, #28]
 8005a80:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a82:	f042 0210 	orr.w	r2, r2, #16
 8005a86:	9207      	str	r2, [sp, #28]
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	069b      	lsls	r3, r3, #26
 8005a8c:	f140 80e7 	bpl.w	8005c5e <_svfprintf_r+0x5ea>
 8005a90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005a92:	1dc3      	adds	r3, r0, #7
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	f103 0108 	add.w	r1, r3, #8
 8005a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aa0:	910f      	str	r1, [sp, #60]	; 0x3c
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7e7      	b.n	8005a76 <_svfprintf_r+0x402>
 8005aa6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005aa8:	9b07      	ldr	r3, [sp, #28]
 8005aaa:	4a86      	ldr	r2, [pc, #536]	; (8005cc4 <_svfprintf_r+0x650>)
 8005aac:	0699      	lsls	r1, r3, #26
 8005aae:	921a      	str	r2, [sp, #104]	; 0x68
 8005ab0:	f140 8115 	bpl.w	8005cde <_svfprintf_r+0x66a>
 8005ab4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005ab6:	1dc3      	adds	r3, r0, #7
 8005ab8:	f023 0307 	bic.w	r3, r3, #7
 8005abc:	f103 0108 	add.w	r1, r3, #8
 8005ac0:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ac2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ac6:	9907      	ldr	r1, [sp, #28]
 8005ac8:	07cd      	lsls	r5, r1, #31
 8005aca:	f140 8376 	bpl.w	80061ba <_svfprintf_r+0xb46>
 8005ace:	ea58 0209 	orrs.w	r2, r8, r9
 8005ad2:	f000 8372 	beq.w	80061ba <_svfprintf_r+0xb46>
 8005ad6:	2330      	movs	r3, #48	; 0x30
 8005ad8:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
 8005adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ade:	f041 0102 	orr.w	r1, r1, #2
 8005ae2:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
 8005ae6:	9107      	str	r1, [sp, #28]
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e7c4      	b.n	8005a76 <_svfprintf_r+0x402>
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	f043 0320 	orr.w	r3, r3, #32
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	f89b 3000 	ldrb.w	r3, [fp]
 8005af8:	e61c      	b.n	8005734 <_svfprintf_r+0xc0>
 8005afa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005afc:	2100      	movs	r1, #0
 8005afe:	f88d 1107 	strb.w	r1, [sp, #263]	; 0x107
 8005b02:	f8d2 a000 	ldr.w	sl, [r2]
 8005b06:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b08:	1d14      	adds	r4, r2, #4
 8005b0a:	f1ba 0f00 	cmp.w	sl, #0
 8005b0e:	f000 8684 	beq.w	800681a <_svfprintf_r+0x11a6>
 8005b12:	2f00      	cmp	r7, #0
 8005b14:	4650      	mov	r0, sl
 8005b16:	f2c0 862f 	blt.w	8006778 <_svfprintf_r+0x1104>
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	f002 fb7f 	bl	8008220 <memchr>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f000 871f 	beq.w	8006966 <_svfprintf_r+0x12f2>
 8005b28:	ebca 0000 	rsb	r0, sl, r0
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	42b8      	cmp	r0, r7
 8005b30:	900d      	str	r0, [sp, #52]	; 0x34
 8005b32:	9310      	str	r3, [sp, #64]	; 0x40
 8005b34:	f340 855a 	ble.w	80065ec <_svfprintf_r+0xf78>
 8005b38:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	9008      	str	r0, [sp, #32]
 8005b40:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8005b44:	940f      	str	r4, [sp, #60]	; 0x3c
 8005b46:	970d      	str	r7, [sp, #52]	; 0x34
 8005b48:	9115      	str	r1, [sp, #84]	; 0x54
 8005b4a:	e6f5      	b.n	8005938 <_svfprintf_r+0x2c4>
 8005b4c:	f89b 3000 	ldrb.w	r3, [fp]
 8005b50:	465a      	mov	r2, fp
 8005b52:	2b6c      	cmp	r3, #108	; 0x6c
 8005b54:	f000 8541 	beq.w	80065da <_svfprintf_r+0xf66>
 8005b58:	9a07      	ldr	r2, [sp, #28]
 8005b5a:	f042 0210 	orr.w	r2, r2, #16
 8005b5e:	9207      	str	r2, [sp, #28]
 8005b60:	e5e8      	b.n	8005734 <_svfprintf_r+0xc0>
 8005b62:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f ae5c 	beq.w	8005822 <_svfprintf_r+0x1ae>
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8005b70:	2300      	movs	r3, #0
 8005b72:	9208      	str	r2, [sp, #32]
 8005b74:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
 8005b78:	920d      	str	r2, [sp, #52]	; 0x34
 8005b7a:	f10d 0ab4 	add.w	sl, sp, #180	; 0xb4
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9310      	str	r3, [sp, #64]	; 0x40
 8005b82:	9315      	str	r3, [sp, #84]	; 0x54
 8005b84:	e6dc      	b.n	8005940 <_svfprintf_r+0x2cc>
 8005b86:	9807      	ldr	r0, [sp, #28]
 8005b88:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b8a:	0680      	lsls	r0, r0, #26
 8005b8c:	f53f ae9f 	bmi.w	80058ce <_svfprintf_r+0x25a>
 8005b90:	9a07      	ldr	r2, [sp, #28]
 8005b92:	06d1      	lsls	r1, r2, #27
 8005b94:	f100 83bf 	bmi.w	8006316 <_svfprintf_r+0xca2>
 8005b98:	9907      	ldr	r1, [sp, #28]
 8005b9a:	064a      	lsls	r2, r1, #25
 8005b9c:	f140 83bb 	bpl.w	8006316 <_svfprintf_r+0xca2>
 8005ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba2:	f9b2 8000 	ldrsh.w	r8, [r2]
 8005ba6:	3204      	adds	r2, #4
 8005ba8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8005bac:	920f      	str	r2, [sp, #60]	; 0x3c
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	e696      	b.n	80058e2 <_svfprintf_r+0x26e>
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bba:	9307      	str	r3, [sp, #28]
 8005bbc:	f89b 3000 	ldrb.w	r3, [fp]
 8005bc0:	e5b8      	b.n	8005734 <_svfprintf_r+0xc0>
 8005bc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2001      	movs	r0, #1
 8005bcc:	3104      	adds	r1, #4
 8005bce:	2200      	movs	r2, #0
 8005bd0:	9008      	str	r0, [sp, #32]
 8005bd2:	910f      	str	r1, [sp, #60]	; 0x3c
 8005bd4:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8005bd8:	f88d 2107 	strb.w	r2, [sp, #263]	; 0x107
 8005bdc:	900d      	str	r0, [sp, #52]	; 0x34
 8005bde:	f10d 0ab4 	add.w	sl, sp, #180	; 0xb4
 8005be2:	e7cc      	b.n	8005b7e <_svfprintf_r+0x50a>
 8005be4:	9a07      	ldr	r2, [sp, #28]
 8005be6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005be8:	f012 0320 	ands.w	r3, r2, #32
 8005bec:	f47f af39 	bne.w	8005a62 <_svfprintf_r+0x3ee>
 8005bf0:	9807      	ldr	r0, [sp, #28]
 8005bf2:	f010 0210 	ands.w	r2, r0, #16
 8005bf6:	f000 846b 	beq.w	80064d0 <_svfprintf_r+0xe5c>
 8005bfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bfc:	f04f 0900 	mov.w	r9, #0
 8005c00:	680a      	ldr	r2, [r1, #0]
 8005c02:	3104      	adds	r1, #4
 8005c04:	910f      	str	r1, [sp, #60]	; 0x3c
 8005c06:	4690      	mov	r8, r2
 8005c08:	e735      	b.n	8005a76 <_svfprintf_r+0x402>
 8005c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	482d      	ldr	r0, [pc, #180]	; (8005cc8 <_svfprintf_r+0x654>)
 8005c12:	4698      	mov	r8, r3
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	2278      	movs	r2, #120	; 0x78
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	3104      	adds	r1, #4
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
 8005c26:	910f      	str	r1, [sp, #60]	; 0x3c
 8005c28:	f04f 0900 	mov.w	r9, #0
 8005c2c:	f88d 2105 	strb.w	r2, [sp, #261]	; 0x105
 8005c30:	901a      	str	r0, [sp, #104]	; 0x68
 8005c32:	2302      	movs	r3, #2
 8005c34:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c36:	e71e      	b.n	8005a76 <_svfprintf_r+0x402>
 8005c38:	9807      	ldr	r0, [sp, #28]
 8005c3a:	0680      	lsls	r0, r0, #26
 8005c3c:	f140 8457 	bpl.w	80064ee <_svfprintf_r+0xe7a>
 8005c40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c44:	680b      	ldr	r3, [r1, #0]
 8005c46:	17d1      	asrs	r1, r2, #31
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c4c:	6059      	str	r1, [r3, #4]
 8005c4e:	3204      	adds	r2, #4
 8005c50:	920f      	str	r2, [sp, #60]	; 0x3c
 8005c52:	e539      	b.n	80056c8 <_svfprintf_r+0x54>
 8005c54:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c56:	9b07      	ldr	r3, [sp, #28]
 8005c58:	069b      	lsls	r3, r3, #26
 8005c5a:	f53f af19 	bmi.w	8005a90 <_svfprintf_r+0x41c>
 8005c5e:	9a07      	ldr	r2, [sp, #28]
 8005c60:	06d5      	lsls	r5, r2, #27
 8005c62:	f100 8370 	bmi.w	8006346 <_svfprintf_r+0xcd2>
 8005c66:	9907      	ldr	r1, [sp, #28]
 8005c68:	0648      	lsls	r0, r1, #25
 8005c6a:	f140 836c 	bpl.w	8006346 <_svfprintf_r+0xcd2>
 8005c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c70:	2301      	movs	r3, #1
 8005c72:	f8b2 8000 	ldrh.w	r8, [r2]
 8005c76:	3204      	adds	r2, #4
 8005c78:	f04f 0900 	mov.w	r9, #0
 8005c7c:	920f      	str	r2, [sp, #60]	; 0x3c
 8005c7e:	e6fa      	b.n	8005a76 <_svfprintf_r+0x402>
 8005c80:	9a07      	ldr	r2, [sp, #28]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	9207      	str	r2, [sp, #28]
 8005c88:	f89b 3000 	ldrb.w	r3, [fp]
 8005c8c:	e552      	b.n	8005734 <_svfprintf_r+0xc0>
 8005c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	1d11      	adds	r1, r2, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	930a      	str	r3, [sp, #40]	; 0x28
 8005c9a:	f6ff adad 	blt.w	80057f8 <_svfprintf_r+0x184>
 8005c9e:	f89b 3000 	ldrb.w	r3, [fp]
 8005ca2:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ca4:	e546      	b.n	8005734 <_svfprintf_r+0xc0>
 8005ca6:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 842b 	bne.w	8006506 <_svfprintf_r+0xe92>
 8005cb0:	f88d 4107 	strb.w	r4, [sp, #263]	; 0x107
 8005cb4:	f89b 3000 	ldrb.w	r3, [fp]
 8005cb8:	e53c      	b.n	8005734 <_svfprintf_r+0xc0>
 8005cba:	bf00      	nop
 8005cbc:	0800a26c 	.word	0x0800a26c
 8005cc0:	0800a270 	.word	0x0800a270
 8005cc4:	0800a27c 	.word	0x0800a27c
 8005cc8:	0800a290 	.word	0x0800a290
 8005ccc:	0800a2b0 	.word	0x0800a2b0
 8005cd0:	498d      	ldr	r1, [pc, #564]	; (8005f08 <_svfprintf_r+0x894>)
 8005cd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	911a      	str	r1, [sp, #104]	; 0x68
 8005cd8:	0699      	lsls	r1, r3, #26
 8005cda:	f53f aeeb 	bmi.w	8005ab4 <_svfprintf_r+0x440>
 8005cde:	9a07      	ldr	r2, [sp, #28]
 8005ce0:	06d2      	lsls	r2, r2, #27
 8005ce2:	f100 830f 	bmi.w	8006304 <_svfprintf_r+0xc90>
 8005ce6:	9907      	ldr	r1, [sp, #28]
 8005ce8:	064b      	lsls	r3, r1, #25
 8005cea:	f140 830b 	bpl.w	8006304 <_svfprintf_r+0xc90>
 8005cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cf0:	f04f 0900 	mov.w	r9, #0
 8005cf4:	f8b2 8000 	ldrh.w	r8, [r2]
 8005cf8:	3204      	adds	r2, #4
 8005cfa:	920f      	str	r2, [sp, #60]	; 0x3c
 8005cfc:	e6e3      	b.n	8005ac6 <_svfprintf_r+0x452>
 8005cfe:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8005d00:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8005d04:	b16b      	cbz	r3, 8005d22 <_svfprintf_r+0x6ae>
 8005d06:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005d08:	ab41      	add	r3, sp, #260	; 0x104
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	6033      	str	r3, [r6, #0]
 8005d10:	3501      	adds	r5, #1
 8005d12:	2301      	movs	r3, #1
 8005d14:	2c07      	cmp	r4, #7
 8005d16:	6073      	str	r3, [r6, #4]
 8005d18:	9539      	str	r5, [sp, #228]	; 0xe4
 8005d1a:	9438      	str	r4, [sp, #224]	; 0xe0
 8005d1c:	f300 8207 	bgt.w	800612e <_svfprintf_r+0xaba>
 8005d20:	3608      	adds	r6, #8
 8005d22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d24:	b163      	cbz	r3, 8005d40 <_svfprintf_r+0x6cc>
 8005d26:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005d28:	ab41      	add	r3, sp, #260	; 0x104
 8005d2a:	3401      	adds	r4, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	3502      	adds	r5, #2
 8005d30:	2302      	movs	r3, #2
 8005d32:	2c07      	cmp	r4, #7
 8005d34:	6073      	str	r3, [r6, #4]
 8005d36:	9539      	str	r5, [sp, #228]	; 0xe4
 8005d38:	9438      	str	r4, [sp, #224]	; 0xe0
 8005d3a:	f300 8203 	bgt.w	8006144 <_svfprintf_r+0xad0>
 8005d3e:	3608      	adds	r6, #8
 8005d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	f000 8141 	beq.w	8005fca <_svfprintf_r+0x956>
 8005d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005d4c:	1a1f      	subs	r7, r3, r0
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	dd35      	ble.n	8005dbe <_svfprintf_r+0x74a>
 8005d52:	2f10      	cmp	r7, #16
 8005d54:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005d56:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8005f0c <_svfprintf_r+0x898>
 8005d5a:	dd25      	ble.n	8005da8 <_svfprintf_r+0x734>
 8005d5c:	4623      	mov	r3, r4
 8005d5e:	462a      	mov	r2, r5
 8005d60:	4644      	mov	r4, r8
 8005d62:	f04f 0910 	mov.w	r9, #16
 8005d66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d68:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005d6c:	e003      	b.n	8005d76 <_svfprintf_r+0x702>
 8005d6e:	3f10      	subs	r7, #16
 8005d70:	3608      	adds	r6, #8
 8005d72:	2f10      	cmp	r7, #16
 8005d74:	dd15      	ble.n	8005da2 <_svfprintf_r+0x72e>
 8005d76:	3301      	adds	r3, #1
 8005d78:	3210      	adds	r2, #16
 8005d7a:	2b07      	cmp	r3, #7
 8005d7c:	e886 0210 	stmia.w	r6, {r4, r9}
 8005d80:	9239      	str	r2, [sp, #228]	; 0xe4
 8005d82:	9338      	str	r3, [sp, #224]	; 0xe0
 8005d84:	ddf3      	ble.n	8005d6e <_svfprintf_r+0x6fa>
 8005d86:	4640      	mov	r0, r8
 8005d88:	4629      	mov	r1, r5
 8005d8a:	aa37      	add	r2, sp, #220	; 0xdc
 8005d8c:	f003 f89c 	bl	8008ec8 <__ssprint_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f47f ad4d 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8005d96:	3f10      	subs	r7, #16
 8005d98:	2f10      	cmp	r7, #16
 8005d9a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8005d9c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8005d9e:	ae1d      	add	r6, sp, #116	; 0x74
 8005da0:	dce9      	bgt.n	8005d76 <_svfprintf_r+0x702>
 8005da2:	46a0      	mov	r8, r4
 8005da4:	4615      	mov	r5, r2
 8005da6:	461c      	mov	r4, r3
 8005da8:	3401      	adds	r4, #1
 8005daa:	19ed      	adds	r5, r5, r7
 8005dac:	2c07      	cmp	r4, #7
 8005dae:	f8c6 8000 	str.w	r8, [r6]
 8005db2:	6077      	str	r7, [r6, #4]
 8005db4:	9539      	str	r5, [sp, #228]	; 0xe4
 8005db6:	9438      	str	r4, [sp, #224]	; 0xe0
 8005db8:	f300 81ae 	bgt.w	8006118 <_svfprintf_r+0xaa4>
 8005dbc:	3608      	adds	r6, #8
 8005dbe:	9907      	ldr	r1, [sp, #28]
 8005dc0:	05ca      	lsls	r2, r1, #23
 8005dc2:	f100 80a7 	bmi.w	8005f14 <_svfprintf_r+0x8a0>
 8005dc6:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dca:	3401      	adds	r4, #1
 8005dcc:	18ed      	adds	r5, r5, r3
 8005dce:	2c07      	cmp	r4, #7
 8005dd0:	f8c6 a000 	str.w	sl, [r6]
 8005dd4:	6073      	str	r3, [r6, #4]
 8005dd6:	9539      	str	r5, [sp, #228]	; 0xe4
 8005dd8:	9438      	str	r4, [sp, #224]	; 0xe0
 8005dda:	dc5e      	bgt.n	8005e9a <_svfprintf_r+0x826>
 8005ddc:	3608      	adds	r6, #8
 8005dde:	9a07      	ldr	r2, [sp, #28]
 8005de0:	0753      	lsls	r3, r2, #29
 8005de2:	d540      	bpl.n	8005e66 <_svfprintf_r+0x7f2>
 8005de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de6:	9808      	ldr	r0, [sp, #32]
 8005de8:	1a1f      	subs	r7, r3, r0
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	dd3b      	ble.n	8005e66 <_svfprintf_r+0x7f2>
 8005dee:	2f10      	cmp	r7, #16
 8005df0:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005df2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8005f10 <_svfprintf_r+0x89c>
 8005df6:	dd24      	ble.n	8005e42 <_svfprintf_r+0x7ce>
 8005df8:	4623      	mov	r3, r4
 8005dfa:	f04f 0910 	mov.w	r9, #16
 8005dfe:	4644      	mov	r4, r8
 8005e00:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005e04:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005e08:	e003      	b.n	8005e12 <_svfprintf_r+0x79e>
 8005e0a:	3f10      	subs	r7, #16
 8005e0c:	3608      	adds	r6, #8
 8005e0e:	2f10      	cmp	r7, #16
 8005e10:	dd15      	ble.n	8005e3e <_svfprintf_r+0x7ca>
 8005e12:	3301      	adds	r3, #1
 8005e14:	3510      	adds	r5, #16
 8005e16:	2b07      	cmp	r3, #7
 8005e18:	e886 0210 	stmia.w	r6, {r4, r9}
 8005e1c:	9539      	str	r5, [sp, #228]	; 0xe4
 8005e1e:	9338      	str	r3, [sp, #224]	; 0xe0
 8005e20:	ddf3      	ble.n	8005e0a <_svfprintf_r+0x796>
 8005e22:	4640      	mov	r0, r8
 8005e24:	4651      	mov	r1, sl
 8005e26:	aa37      	add	r2, sp, #220	; 0xdc
 8005e28:	f003 f84e 	bl	8008ec8 <__ssprint_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f47f acff 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8005e32:	3f10      	subs	r7, #16
 8005e34:	2f10      	cmp	r7, #16
 8005e36:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8005e38:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8005e3a:	ae1d      	add	r6, sp, #116	; 0x74
 8005e3c:	dce9      	bgt.n	8005e12 <_svfprintf_r+0x79e>
 8005e3e:	46a0      	mov	r8, r4
 8005e40:	461c      	mov	r4, r3
 8005e42:	3401      	adds	r4, #1
 8005e44:	197d      	adds	r5, r7, r5
 8005e46:	2c07      	cmp	r4, #7
 8005e48:	f8c6 8000 	str.w	r8, [r6]
 8005e4c:	6077      	str	r7, [r6, #4]
 8005e4e:	9539      	str	r5, [sp, #228]	; 0xe4
 8005e50:	9438      	str	r4, [sp, #224]	; 0xe0
 8005e52:	dd08      	ble.n	8005e66 <_svfprintf_r+0x7f2>
 8005e54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e58:	aa37      	add	r2, sp, #220	; 0xdc
 8005e5a:	f003 f835 	bl	8008ec8 <__ssprint_r>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f47f ace6 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8005e64:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8005e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e68:	9a08      	ldr	r2, [sp, #32]
 8005e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	bfac      	ite	ge
 8005e70:	1889      	addge	r1, r1, r2
 8005e72:	18c9      	addlt	r1, r1, r3
 8005e74:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	f040 8144 	bne.w	8006104 <_svfprintf_r+0xa90>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	9038      	str	r0, [sp, #224]	; 0xe0
 8005e80:	ae1d      	add	r6, sp, #116	; 0x74
 8005e82:	e421      	b.n	80056c8 <_svfprintf_r+0x54>
 8005e84:	46a0      	mov	r8, r4
 8005e86:	461c      	mov	r4, r3
 8005e88:	3401      	adds	r4, #1
 8005e8a:	19ed      	adds	r5, r5, r7
 8005e8c:	2c07      	cmp	r4, #7
 8005e8e:	f8c6 8000 	str.w	r8, [r6]
 8005e92:	6077      	str	r7, [r6, #4]
 8005e94:	9539      	str	r5, [sp, #228]	; 0xe4
 8005e96:	9438      	str	r4, [sp, #224]	; 0xe0
 8005e98:	dda0      	ble.n	8005ddc <_svfprintf_r+0x768>
 8005e9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e9e:	aa37      	add	r2, sp, #220	; 0xdc
 8005ea0:	f003 f812 	bl	8008ec8 <__ssprint_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f47f acc3 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8005eaa:	ae1d      	add	r6, sp, #116	; 0x74
 8005eac:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8005eae:	e796      	b.n	8005dde <_svfprintf_r+0x76a>
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f000 816d 	beq.w	8006190 <_svfprintf_r+0xb1c>
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	f000 814f 	beq.w	800615a <_svfprintf_r+0xae6>
 8005ebc:	ac37      	add	r4, sp, #220	; 0xdc
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	e000      	b.n	8005ec4 <_svfprintf_r+0x850>
 8005ec2:	4653      	mov	r3, sl
 8005ec4:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8005ec8:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8005ecc:	ea4f 01d9 	mov.w	r1, r9, lsr #3
 8005ed0:	f008 0007 	and.w	r0, r8, #7
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8005edc:	ea58 0009 	orrs.w	r0, r8, r9
 8005ee0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005ee4:	f103 3aff 	add.w	sl, r3, #4294967295
 8005ee8:	d1eb      	bne.n	8005ec2 <_svfprintf_r+0x84e>
 8005eea:	9907      	ldr	r1, [sp, #28]
 8005eec:	07c8      	lsls	r0, r1, #31
 8005eee:	d506      	bpl.n	8005efe <_svfprintf_r+0x88a>
 8005ef0:	2a30      	cmp	r2, #48	; 0x30
 8005ef2:	d004      	beq.n	8005efe <_svfprintf_r+0x88a>
 8005ef4:	2230      	movs	r2, #48	; 0x30
 8005ef6:	f1a3 0a02 	sub.w	sl, r3, #2
 8005efa:	f803 2c02 	strb.w	r2, [r3, #-2]
 8005efe:	ebca 0404 	rsb	r4, sl, r4
 8005f02:	940d      	str	r4, [sp, #52]	; 0x34
 8005f04:	e50e      	b.n	8005924 <_svfprintf_r+0x2b0>
 8005f06:	bf00      	nop
 8005f08:	0800a290 	.word	0x0800a290
 8005f0c:	0800a25c 	.word	0x0800a25c
 8005f10:	0800a2b0 	.word	0x0800a2b0
 8005f14:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005f16:	2865      	cmp	r0, #101	; 0x65
 8005f18:	f340 8094 	ble.w	8006044 <_svfprintf_r+0x9d0>
 8005f1c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005f20:	2200      	movs	r2, #0
 8005f22:	2300      	movs	r3, #0
 8005f24:	f7fd fda4 	bl	8003a70 <__aeabi_dcmpeq>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f000 814d 	beq.w	80061c8 <_svfprintf_r+0xb54>
 8005f2e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005f30:	4ba3      	ldr	r3, [pc, #652]	; (80061c0 <_svfprintf_r+0xb4c>)
 8005f32:	3401      	adds	r4, #1
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	3501      	adds	r5, #1
 8005f38:	2301      	movs	r3, #1
 8005f3a:	2c07      	cmp	r4, #7
 8005f3c:	6073      	str	r3, [r6, #4]
 8005f3e:	9539      	str	r5, [sp, #228]	; 0xe4
 8005f40:	9438      	str	r4, [sp, #224]	; 0xe0
 8005f42:	f300 82f3 	bgt.w	800652c <_svfprintf_r+0xeb8>
 8005f46:	3608      	adds	r6, #8
 8005f48:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8005f4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	db03      	blt.n	8005f58 <_svfprintf_r+0x8e4>
 8005f50:	9a07      	ldr	r2, [sp, #28]
 8005f52:	07d3      	lsls	r3, r2, #31
 8005f54:	f57f af43 	bpl.w	8005dde <_svfprintf_r+0x76a>
 8005f58:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005f5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f5c:	3401      	adds	r4, #1
 8005f5e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005f60:	18ed      	adds	r5, r5, r3
 8005f62:	2c07      	cmp	r4, #7
 8005f64:	e886 0009 	stmia.w	r6, {r0, r3}
 8005f68:	9539      	str	r5, [sp, #228]	; 0xe4
 8005f6a:	9438      	str	r4, [sp, #224]	; 0xe0
 8005f6c:	f300 8349 	bgt.w	8006602 <_svfprintf_r+0xf8e>
 8005f70:	3608      	adds	r6, #8
 8005f72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f74:	1e4f      	subs	r7, r1, #1
 8005f76:	2f00      	cmp	r7, #0
 8005f78:	f77f af31 	ble.w	8005dde <_svfprintf_r+0x76a>
 8005f7c:	2f10      	cmp	r7, #16
 8005f7e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005f80:	f8df 8240 	ldr.w	r8, [pc, #576]	; 80061c4 <_svfprintf_r+0xb50>
 8005f84:	dd80      	ble.n	8005e88 <_svfprintf_r+0x814>
 8005f86:	4623      	mov	r3, r4
 8005f88:	f04f 0910 	mov.w	r9, #16
 8005f8c:	4644      	mov	r4, r8
 8005f8e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005f92:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005f96:	e004      	b.n	8005fa2 <_svfprintf_r+0x92e>
 8005f98:	3608      	adds	r6, #8
 8005f9a:	3f10      	subs	r7, #16
 8005f9c:	2f10      	cmp	r7, #16
 8005f9e:	f77f af71 	ble.w	8005e84 <_svfprintf_r+0x810>
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	3510      	adds	r5, #16
 8005fa6:	2b07      	cmp	r3, #7
 8005fa8:	e886 0210 	stmia.w	r6, {r4, r9}
 8005fac:	9539      	str	r5, [sp, #228]	; 0xe4
 8005fae:	9338      	str	r3, [sp, #224]	; 0xe0
 8005fb0:	ddf2      	ble.n	8005f98 <_svfprintf_r+0x924>
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	aa37      	add	r2, sp, #220	; 0xdc
 8005fb8:	f002 ff86 	bl	8008ec8 <__ssprint_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f47f ac37 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8005fc2:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8005fc4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8005fc6:	ae1d      	add	r6, sp, #116	; 0x74
 8005fc8:	e7e7      	b.n	8005f9a <_svfprintf_r+0x926>
 8005fca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fcc:	9908      	ldr	r1, [sp, #32]
 8005fce:	1a47      	subs	r7, r0, r1
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	f77f aeb9 	ble.w	8005d48 <_svfprintf_r+0x6d4>
 8005fd6:	2f10      	cmp	r7, #16
 8005fd8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8005fda:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80061c4 <_svfprintf_r+0xb50>
 8005fde:	dd25      	ble.n	800602c <_svfprintf_r+0x9b8>
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4644      	mov	r4, r8
 8005fe6:	f04f 0910 	mov.w	r9, #16
 8005fea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005fec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005ff0:	e003      	b.n	8005ffa <_svfprintf_r+0x986>
 8005ff2:	3f10      	subs	r7, #16
 8005ff4:	3608      	adds	r6, #8
 8005ff6:	2f10      	cmp	r7, #16
 8005ff8:	dd15      	ble.n	8006026 <_svfprintf_r+0x9b2>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	3210      	adds	r2, #16
 8005ffe:	2b07      	cmp	r3, #7
 8006000:	e886 0210 	stmia.w	r6, {r4, r9}
 8006004:	9239      	str	r2, [sp, #228]	; 0xe4
 8006006:	9338      	str	r3, [sp, #224]	; 0xe0
 8006008:	ddf3      	ble.n	8005ff2 <_svfprintf_r+0x97e>
 800600a:	4640      	mov	r0, r8
 800600c:	4629      	mov	r1, r5
 800600e:	aa37      	add	r2, sp, #220	; 0xdc
 8006010:	f002 ff5a 	bl	8008ec8 <__ssprint_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	f47f ac0b 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800601a:	3f10      	subs	r7, #16
 800601c:	2f10      	cmp	r7, #16
 800601e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8006020:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8006022:	ae1d      	add	r6, sp, #116	; 0x74
 8006024:	dce9      	bgt.n	8005ffa <_svfprintf_r+0x986>
 8006026:	46a0      	mov	r8, r4
 8006028:	4615      	mov	r5, r2
 800602a:	461c      	mov	r4, r3
 800602c:	3401      	adds	r4, #1
 800602e:	19ed      	adds	r5, r5, r7
 8006030:	2c07      	cmp	r4, #7
 8006032:	f8c6 8000 	str.w	r8, [r6]
 8006036:	6077      	str	r7, [r6, #4]
 8006038:	9539      	str	r5, [sp, #228]	; 0xe4
 800603a:	9438      	str	r4, [sp, #224]	; 0xe0
 800603c:	f300 8222 	bgt.w	8006484 <_svfprintf_r+0xe10>
 8006040:	3608      	adds	r6, #8
 8006042:	e681      	b.n	8005d48 <_svfprintf_r+0x6d4>
 8006044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006046:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006048:	3501      	adds	r5, #1
 800604a:	3401      	adds	r4, #1
 800604c:	2a01      	cmp	r2, #1
 800604e:	f340 81e8 	ble.w	8006422 <_svfprintf_r+0xdae>
 8006052:	2301      	movs	r3, #1
 8006054:	2c07      	cmp	r4, #7
 8006056:	f8c6 a000 	str.w	sl, [r6]
 800605a:	6073      	str	r3, [r6, #4]
 800605c:	9539      	str	r5, [sp, #228]	; 0xe4
 800605e:	9438      	str	r4, [sp, #224]	; 0xe0
 8006060:	f300 81f8 	bgt.w	8006454 <_svfprintf_r+0xde0>
 8006064:	3608      	adds	r6, #8
 8006066:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006068:	3401      	adds	r4, #1
 800606a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800606c:	182d      	adds	r5, r5, r0
 800606e:	2c07      	cmp	r4, #7
 8006070:	6031      	str	r1, [r6, #0]
 8006072:	6070      	str	r0, [r6, #4]
 8006074:	9539      	str	r5, [sp, #228]	; 0xe4
 8006076:	9438      	str	r4, [sp, #224]	; 0xe0
 8006078:	f300 81f8 	bgt.w	800646c <_svfprintf_r+0xdf8>
 800607c:	3608      	adds	r6, #8
 800607e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8006082:	2200      	movs	r2, #0
 8006084:	2300      	movs	r3, #0
 8006086:	f7fd fcf3 	bl	8003a70 <__aeabi_dcmpeq>
 800608a:	2800      	cmp	r0, #0
 800608c:	f040 80f0 	bne.w	8006270 <_svfprintf_r+0xbfc>
 8006090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006092:	3401      	adds	r4, #1
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	18ad      	adds	r5, r5, r2
 8006098:	f10a 0301 	add.w	r3, sl, #1
 800609c:	2c07      	cmp	r4, #7
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	6072      	str	r2, [r6, #4]
 80060a2:	9539      	str	r5, [sp, #228]	; 0xe4
 80060a4:	9438      	str	r4, [sp, #224]	; 0xe0
 80060a6:	dc21      	bgt.n	80060ec <_svfprintf_r+0xa78>
 80060a8:	3608      	adds	r6, #8
 80060aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80060ac:	3401      	adds	r4, #1
 80060ae:	186d      	adds	r5, r5, r1
 80060b0:	ab3a      	add	r3, sp, #232	; 0xe8
 80060b2:	2c07      	cmp	r4, #7
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6071      	str	r1, [r6, #4]
 80060b8:	9539      	str	r5, [sp, #228]	; 0xe4
 80060ba:	9438      	str	r4, [sp, #224]	; 0xe0
 80060bc:	f77f ae8e 	ble.w	8005ddc <_svfprintf_r+0x768>
 80060c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c4:	aa37      	add	r2, sp, #220	; 0xdc
 80060c6:	f002 feff 	bl	8008ec8 <__ssprint_r>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f47f abb0 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80060d0:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 80060d2:	ae1d      	add	r6, sp, #116	; 0x74
 80060d4:	e683      	b.n	8005dde <_svfprintf_r+0x76a>
 80060d6:	46a0      	mov	r8, r4
 80060d8:	461c      	mov	r4, r3
 80060da:	3401      	adds	r4, #1
 80060dc:	19ed      	adds	r5, r5, r7
 80060de:	2c07      	cmp	r4, #7
 80060e0:	f8c6 8000 	str.w	r8, [r6]
 80060e4:	6077      	str	r7, [r6, #4]
 80060e6:	9539      	str	r5, [sp, #228]	; 0xe4
 80060e8:	9438      	str	r4, [sp, #224]	; 0xe0
 80060ea:	dddd      	ble.n	80060a8 <_svfprintf_r+0xa34>
 80060ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060f0:	aa37      	add	r2, sp, #220	; 0xdc
 80060f2:	f002 fee9 	bl	8008ec8 <__ssprint_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f47f ab9a 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80060fc:	ae1d      	add	r6, sp, #116	; 0x74
 80060fe:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006100:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006102:	e7d2      	b.n	80060aa <_svfprintf_r+0xa36>
 8006104:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006108:	aa37      	add	r2, sp, #220	; 0xdc
 800610a:	f002 fedd 	bl	8008ec8 <__ssprint_r>
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f aeb4 	beq.w	8005e7c <_svfprintf_r+0x808>
 8006114:	f7ff bb8c 	b.w	8005830 <_svfprintf_r+0x1bc>
 8006118:	980c      	ldr	r0, [sp, #48]	; 0x30
 800611a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800611c:	aa37      	add	r2, sp, #220	; 0xdc
 800611e:	f002 fed3 	bl	8008ec8 <__ssprint_r>
 8006122:	2800      	cmp	r0, #0
 8006124:	f47f ab84 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006128:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800612a:	ae1d      	add	r6, sp, #116	; 0x74
 800612c:	e647      	b.n	8005dbe <_svfprintf_r+0x74a>
 800612e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006132:	aa37      	add	r2, sp, #220	; 0xdc
 8006134:	f002 fec8 	bl	8008ec8 <__ssprint_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	f47f ab79 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800613e:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006140:	ae1d      	add	r6, sp, #116	; 0x74
 8006142:	e5ee      	b.n	8005d22 <_svfprintf_r+0x6ae>
 8006144:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006148:	aa37      	add	r2, sp, #220	; 0xdc
 800614a:	f002 febd 	bl	8008ec8 <__ssprint_r>
 800614e:	2800      	cmp	r0, #0
 8006150:	f47f ab6e 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006154:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006156:	ae1d      	add	r6, sp, #116	; 0x74
 8006158:	e5f2      	b.n	8005d40 <_svfprintf_r+0x6cc>
 800615a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800615c:	f10d 03db 	add.w	r3, sp, #219	; 0xdb
 8006160:	ea4f 1218 	mov.w	r2, r8, lsr #4
 8006164:	f008 010f 	and.w	r1, r8, #15
 8006168:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
 800616c:	5c61      	ldrb	r1, [r4, r1]
 800616e:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8006172:	4690      	mov	r8, r2
 8006174:	4681      	mov	r9, r0
 8006176:	7019      	strb	r1, [r3, #0]
 8006178:	ea58 0109 	orrs.w	r1, r8, r9
 800617c:	469a      	mov	sl, r3
 800617e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006182:	d1ed      	bne.n	8006160 <_svfprintf_r+0xaec>
 8006184:	ab37      	add	r3, sp, #220	; 0xdc
 8006186:	ebca 0303 	rsb	r3, sl, r3
 800618a:	930d      	str	r3, [sp, #52]	; 0x34
 800618c:	f7ff bbca 	b.w	8005924 <_svfprintf_r+0x2b0>
 8006190:	f1b8 0f0a 	cmp.w	r8, #10
 8006194:	f179 0200 	sbcs.w	r2, r9, #0
 8006198:	f080 8096 	bcs.w	80062c8 <_svfprintf_r+0xc54>
 800619c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80061a0:	2301      	movs	r3, #1
 80061a2:	f88d 80db 	strb.w	r8, [sp, #219]	; 0xdb
 80061a6:	930d      	str	r3, [sp, #52]	; 0x34
 80061a8:	f10d 0adb 	add.w	sl, sp, #219	; 0xdb
 80061ac:	f7ff bbba 	b.w	8005924 <_svfprintf_r+0x2b0>
 80061b0:	970d      	str	r7, [sp, #52]	; 0x34
 80061b2:	f10d 0adc 	add.w	sl, sp, #220	; 0xdc
 80061b6:	f7ff bbb5 	b.w	8005924 <_svfprintf_r+0x2b0>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e45b      	b.n	8005a76 <_svfprintf_r+0x402>
 80061be:	bf00      	nop
 80061c0:	0800a2ac 	.word	0x0800a2ac
 80061c4:	0800a25c 	.word	0x0800a25c
 80061c8:	9f3e      	ldr	r7, [sp, #248]	; 0xf8
 80061ca:	2f00      	cmp	r7, #0
 80061cc:	f340 81b9 	ble.w	8006542 <_svfprintf_r+0xece>
 80061d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80061d4:	429f      	cmp	r7, r3
 80061d6:	bfa8      	it	ge
 80061d8:	461f      	movge	r7, r3
 80061da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061dc:	2f00      	cmp	r7, #0
 80061de:	4453      	add	r3, sl
 80061e0:	930d      	str	r3, [sp, #52]	; 0x34
 80061e2:	dd0b      	ble.n	80061fc <_svfprintf_r+0xb88>
 80061e4:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80061e6:	19ed      	adds	r5, r5, r7
 80061e8:	3401      	adds	r4, #1
 80061ea:	2c07      	cmp	r4, #7
 80061ec:	f8c6 a000 	str.w	sl, [r6]
 80061f0:	6077      	str	r7, [r6, #4]
 80061f2:	9539      	str	r5, [sp, #228]	; 0xe4
 80061f4:	9438      	str	r4, [sp, #224]	; 0xe0
 80061f6:	f300 82dd 	bgt.w	80067b4 <_svfprintf_r+0x1140>
 80061fa:	3608      	adds	r6, #8
 80061fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80061fe:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8006202:	1bc7      	subs	r7, r0, r7
 8006204:	2f00      	cmp	r7, #0
 8006206:	f340 80b2 	ble.w	800636e <_svfprintf_r+0xcfa>
 800620a:	2f10      	cmp	r7, #16
 800620c:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800620e:	f8df 853c 	ldr.w	r8, [pc, #1340]	; 800674c <_svfprintf_r+0x10d8>
 8006212:	f340 817f 	ble.w	8006514 <_svfprintf_r+0xea0>
 8006216:	4623      	mov	r3, r4
 8006218:	462a      	mov	r2, r5
 800621a:	4644      	mov	r4, r8
 800621c:	f04f 0910 	mov.w	r9, #16
 8006220:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006222:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006226:	e004      	b.n	8006232 <_svfprintf_r+0xbbe>
 8006228:	3608      	adds	r6, #8
 800622a:	3f10      	subs	r7, #16
 800622c:	2f10      	cmp	r7, #16
 800622e:	f340 816e 	ble.w	800650e <_svfprintf_r+0xe9a>
 8006232:	3301      	adds	r3, #1
 8006234:	3210      	adds	r2, #16
 8006236:	2b07      	cmp	r3, #7
 8006238:	e886 0210 	stmia.w	r6, {r4, r9}
 800623c:	9239      	str	r2, [sp, #228]	; 0xe4
 800623e:	9338      	str	r3, [sp, #224]	; 0xe0
 8006240:	ddf2      	ble.n	8006228 <_svfprintf_r+0xbb4>
 8006242:	4640      	mov	r0, r8
 8006244:	4629      	mov	r1, r5
 8006246:	aa37      	add	r2, sp, #220	; 0xdc
 8006248:	f002 fe3e 	bl	8008ec8 <__ssprint_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	f47f aaef 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006252:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8006254:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8006256:	ae1d      	add	r6, sp, #116	; 0x74
 8006258:	e7e7      	b.n	800622a <_svfprintf_r+0xbb6>
 800625a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800625c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800625e:	aa37      	add	r2, sp, #220	; 0xdc
 8006260:	f002 fe32 	bl	8008ec8 <__ssprint_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	f47f aae3 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800626a:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800626c:	ae1d      	add	r6, sp, #116	; 0x74
 800626e:	e547      	b.n	8005d00 <_svfprintf_r+0x68c>
 8006270:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006272:	1e47      	subs	r7, r0, #1
 8006274:	2f00      	cmp	r7, #0
 8006276:	f77f af18 	ble.w	80060aa <_svfprintf_r+0xa36>
 800627a:	2f10      	cmp	r7, #16
 800627c:	f8df 84cc 	ldr.w	r8, [pc, #1228]	; 800674c <_svfprintf_r+0x10d8>
 8006280:	f77f af2b 	ble.w	80060da <_svfprintf_r+0xa66>
 8006284:	4623      	mov	r3, r4
 8006286:	f04f 0910 	mov.w	r9, #16
 800628a:	4644      	mov	r4, r8
 800628c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006290:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006294:	e004      	b.n	80062a0 <_svfprintf_r+0xc2c>
 8006296:	3608      	adds	r6, #8
 8006298:	3f10      	subs	r7, #16
 800629a:	2f10      	cmp	r7, #16
 800629c:	f77f af1b 	ble.w	80060d6 <_svfprintf_r+0xa62>
 80062a0:	3301      	adds	r3, #1
 80062a2:	3510      	adds	r5, #16
 80062a4:	2b07      	cmp	r3, #7
 80062a6:	e886 0210 	stmia.w	r6, {r4, r9}
 80062aa:	9539      	str	r5, [sp, #228]	; 0xe4
 80062ac:	9338      	str	r3, [sp, #224]	; 0xe0
 80062ae:	ddf2      	ble.n	8006296 <_svfprintf_r+0xc22>
 80062b0:	4640      	mov	r0, r8
 80062b2:	4651      	mov	r1, sl
 80062b4:	aa37      	add	r2, sp, #220	; 0xdc
 80062b6:	f002 fe07 	bl	8008ec8 <__ssprint_r>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f47f aab8 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80062c0:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 80062c2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80062c4:	ae1d      	add	r6, sp, #116	; 0x74
 80062c6:	e7e7      	b.n	8006298 <_svfprintf_r+0xc24>
 80062c8:	f10d 04db 	add.w	r4, sp, #219	; 0xdb
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	220a      	movs	r2, #10
 80062d2:	2300      	movs	r3, #0
 80062d4:	f7fd fc26 	bl	8003b24 <__aeabi_uldivmod>
 80062d8:	3230      	adds	r2, #48	; 0x30
 80062da:	7022      	strb	r2, [r4, #0]
 80062dc:	4640      	mov	r0, r8
 80062de:	4649      	mov	r1, r9
 80062e0:	220a      	movs	r2, #10
 80062e2:	2300      	movs	r3, #0
 80062e4:	f7fd fc1e 	bl	8003b24 <__aeabi_uldivmod>
 80062e8:	4680      	mov	r8, r0
 80062ea:	4689      	mov	r9, r1
 80062ec:	ea58 0009 	orrs.w	r0, r8, r9
 80062f0:	46a2      	mov	sl, r4
 80062f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80062f6:	d1e9      	bne.n	80062cc <_svfprintf_r+0xc58>
 80062f8:	ab37      	add	r3, sp, #220	; 0xdc
 80062fa:	ebca 0303 	rsb	r3, sl, r3
 80062fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006300:	f7ff bb10 	b.w	8005924 <_svfprintf_r+0x2b0>
 8006304:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006306:	f04f 0900 	mov.w	r9, #0
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	3004      	adds	r0, #4
 800630e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006310:	4698      	mov	r8, r3
 8006312:	f7ff bbd8 	b.w	8005ac6 <_svfprintf_r+0x452>
 8006316:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006318:	6803      	ldr	r3, [r0, #0]
 800631a:	3004      	adds	r0, #4
 800631c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006320:	900f      	str	r0, [sp, #60]	; 0x3c
 8006322:	4649      	mov	r1, r9
 8006324:	4618      	mov	r0, r3
 8006326:	2800      	cmp	r0, #0
 8006328:	f171 0200 	sbcs.w	r2, r1, #0
 800632c:	4698      	mov	r8, r3
 800632e:	f6bf aadd 	bge.w	80058ec <_svfprintf_r+0x278>
 8006332:	232d      	movs	r3, #45	; 0x2d
 8006334:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
 8006338:	f1d8 0800 	rsbs	r8, r8, #0
 800633c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8006340:	2301      	movs	r3, #1
 8006342:	f7ff bad4 	b.w	80058ee <_svfprintf_r+0x27a>
 8006346:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006348:	f04f 0900 	mov.w	r9, #0
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	3004      	adds	r0, #4
 8006350:	4698      	mov	r8, r3
 8006352:	900f      	str	r0, [sp, #60]	; 0x3c
 8006354:	2301      	movs	r3, #1
 8006356:	f7ff bb8e 	b.w	8005a76 <_svfprintf_r+0x402>
 800635a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800635c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800635e:	aa37      	add	r2, sp, #220	; 0xdc
 8006360:	f002 fdb2 	bl	8008ec8 <__ssprint_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	f47f aa63 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800636a:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800636c:	ae1d      	add	r6, sp, #116	; 0x74
 800636e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8006370:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006372:	428b      	cmp	r3, r1
 8006374:	db47      	blt.n	8006406 <_svfprintf_r+0xd92>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	07d1      	lsls	r1, r2, #31
 800637a:	d444      	bmi.n	8006406 <_svfprintf_r+0xd92>
 800637c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800637e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006380:	eb0a 0200 	add.w	r2, sl, r0
 8006384:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006386:	1a8f      	subs	r7, r1, r2
 8006388:	1ac3      	subs	r3, r0, r3
 800638a:	42bb      	cmp	r3, r7
 800638c:	bfb8      	it	lt
 800638e:	461f      	movlt	r7, r3
 8006390:	2f00      	cmp	r7, #0
 8006392:	dd0a      	ble.n	80063aa <_svfprintf_r+0xd36>
 8006394:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006396:	19ed      	adds	r5, r5, r7
 8006398:	3401      	adds	r4, #1
 800639a:	2c07      	cmp	r4, #7
 800639c:	e886 0084 	stmia.w	r6, {r2, r7}
 80063a0:	9539      	str	r5, [sp, #228]	; 0xe4
 80063a2:	9438      	str	r4, [sp, #224]	; 0xe0
 80063a4:	f300 822b 	bgt.w	80067fe <_svfprintf_r+0x118a>
 80063a8:	3608      	adds	r6, #8
 80063aa:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80063ae:	1bdf      	subs	r7, r3, r7
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	f77f ad14 	ble.w	8005dde <_svfprintf_r+0x76a>
 80063b6:	2f10      	cmp	r7, #16
 80063b8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80063ba:	f8df 8390 	ldr.w	r8, [pc, #912]	; 800674c <_svfprintf_r+0x10d8>
 80063be:	f77f ad63 	ble.w	8005e88 <_svfprintf_r+0x814>
 80063c2:	4623      	mov	r3, r4
 80063c4:	f04f 0910 	mov.w	r9, #16
 80063c8:	4644      	mov	r4, r8
 80063ca:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80063ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80063d2:	e004      	b.n	80063de <_svfprintf_r+0xd6a>
 80063d4:	3608      	adds	r6, #8
 80063d6:	3f10      	subs	r7, #16
 80063d8:	2f10      	cmp	r7, #16
 80063da:	f77f ad53 	ble.w	8005e84 <_svfprintf_r+0x810>
 80063de:	3301      	adds	r3, #1
 80063e0:	3510      	adds	r5, #16
 80063e2:	2b07      	cmp	r3, #7
 80063e4:	e886 0210 	stmia.w	r6, {r4, r9}
 80063e8:	9539      	str	r5, [sp, #228]	; 0xe4
 80063ea:	9338      	str	r3, [sp, #224]	; 0xe0
 80063ec:	ddf2      	ble.n	80063d4 <_svfprintf_r+0xd60>
 80063ee:	4640      	mov	r0, r8
 80063f0:	4651      	mov	r1, sl
 80063f2:	aa37      	add	r2, sp, #220	; 0xdc
 80063f4:	f002 fd68 	bl	8008ec8 <__ssprint_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f47f aa19 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80063fe:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006400:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8006402:	ae1d      	add	r6, sp, #116	; 0x74
 8006404:	e7e7      	b.n	80063d6 <_svfprintf_r+0xd62>
 8006406:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006408:	9816      	ldr	r0, [sp, #88]	; 0x58
 800640a:	3401      	adds	r4, #1
 800640c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800640e:	182d      	adds	r5, r5, r0
 8006410:	2c07      	cmp	r4, #7
 8006412:	6031      	str	r1, [r6, #0]
 8006414:	6070      	str	r0, [r6, #4]
 8006416:	9539      	str	r5, [sp, #228]	; 0xe4
 8006418:	9438      	str	r4, [sp, #224]	; 0xe0
 800641a:	f300 81d6 	bgt.w	80067ca <_svfprintf_r+0x1156>
 800641e:	3608      	adds	r6, #8
 8006420:	e7ac      	b.n	800637c <_svfprintf_r+0xd08>
 8006422:	9b07      	ldr	r3, [sp, #28]
 8006424:	07da      	lsls	r2, r3, #31
 8006426:	f53f ae14 	bmi.w	8006052 <_svfprintf_r+0x9de>
 800642a:	2301      	movs	r3, #1
 800642c:	2c07      	cmp	r4, #7
 800642e:	f8c6 a000 	str.w	sl, [r6]
 8006432:	6073      	str	r3, [r6, #4]
 8006434:	9539      	str	r5, [sp, #228]	; 0xe4
 8006436:	9438      	str	r4, [sp, #224]	; 0xe0
 8006438:	f77f ae36 	ble.w	80060a8 <_svfprintf_r+0xa34>
 800643c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800643e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006440:	aa37      	add	r2, sp, #220	; 0xdc
 8006442:	f002 fd41 	bl	8008ec8 <__ssprint_r>
 8006446:	2800      	cmp	r0, #0
 8006448:	f47f a9f2 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800644c:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800644e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006450:	ae1d      	add	r6, sp, #116	; 0x74
 8006452:	e62a      	b.n	80060aa <_svfprintf_r+0xa36>
 8006454:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006458:	aa37      	add	r2, sp, #220	; 0xdc
 800645a:	f002 fd35 	bl	8008ec8 <__ssprint_r>
 800645e:	2800      	cmp	r0, #0
 8006460:	f47f a9e6 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006464:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006466:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006468:	ae1d      	add	r6, sp, #116	; 0x74
 800646a:	e5fc      	b.n	8006066 <_svfprintf_r+0x9f2>
 800646c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800646e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006470:	aa37      	add	r2, sp, #220	; 0xdc
 8006472:	f002 fd29 	bl	8008ec8 <__ssprint_r>
 8006476:	2800      	cmp	r0, #0
 8006478:	f47f a9da 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800647c:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800647e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006480:	ae1d      	add	r6, sp, #116	; 0x74
 8006482:	e5fc      	b.n	800607e <_svfprintf_r+0xa0a>
 8006484:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006488:	aa37      	add	r2, sp, #220	; 0xdc
 800648a:	f002 fd1d 	bl	8008ec8 <__ssprint_r>
 800648e:	2800      	cmp	r0, #0
 8006490:	f47f a9ce 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006494:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006496:	ae1d      	add	r6, sp, #116	; 0x74
 8006498:	e456      	b.n	8005d48 <_svfprintf_r+0x6d4>
 800649a:	f002 fbb1 	bl	8008c00 <__fpclassifyd>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f040 80ba 	bne.w	8006618 <_svfprintf_r+0xfa4>
 80064a4:	2103      	movs	r1, #3
 80064a6:	9010      	str	r0, [sp, #64]	; 0x40
 80064a8:	4ba5      	ldr	r3, [pc, #660]	; (8006740 <_svfprintf_r+0x10cc>)
 80064aa:	4aa6      	ldr	r2, [pc, #664]	; (8006744 <_svfprintf_r+0x10d0>)
 80064ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80064ae:	9108      	str	r1, [sp, #32]
 80064b0:	9907      	ldr	r1, [sp, #28]
 80064b2:	2847      	cmp	r0, #71	; 0x47
 80064b4:	bfcc      	ite	gt
 80064b6:	4692      	movgt	sl, r2
 80064b8:	469a      	movle	sl, r3
 80064ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80064bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064c0:	2203      	movs	r2, #3
 80064c2:	9107      	str	r1, [sp, #28]
 80064c4:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 80064c8:	920d      	str	r2, [sp, #52]	; 0x34
 80064ca:	9015      	str	r0, [sp, #84]	; 0x54
 80064cc:	f7ff ba34 	b.w	8005938 <_svfprintf_r+0x2c4>
 80064d0:	9807      	ldr	r0, [sp, #28]
 80064d2:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 80064d6:	f000 8146 	beq.w	8006766 <_svfprintf_r+0x10f2>
 80064da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064dc:	4613      	mov	r3, r2
 80064de:	f8b1 8000 	ldrh.w	r8, [r1]
 80064e2:	3104      	adds	r1, #4
 80064e4:	f04f 0900 	mov.w	r9, #0
 80064e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80064ea:	f7ff bac4 	b.w	8005a76 <_svfprintf_r+0x402>
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	06d9      	lsls	r1, r3, #27
 80064f2:	f140 812d 	bpl.w	8006750 <_svfprintf_r+0x10dc>
 80064f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80064f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064fa:	6803      	ldr	r3, [r0, #0]
 80064fc:	3004      	adds	r0, #4
 80064fe:	900f      	str	r0, [sp, #60]	; 0x3c
 8006500:	6019      	str	r1, [r3, #0]
 8006502:	f7ff b8e1 	b.w	80056c8 <_svfprintf_r+0x54>
 8006506:	f89b 3000 	ldrb.w	r3, [fp]
 800650a:	f7ff b913 	b.w	8005734 <_svfprintf_r+0xc0>
 800650e:	46a0      	mov	r8, r4
 8006510:	4615      	mov	r5, r2
 8006512:	461c      	mov	r4, r3
 8006514:	3401      	adds	r4, #1
 8006516:	19ed      	adds	r5, r5, r7
 8006518:	2c07      	cmp	r4, #7
 800651a:	f8c6 8000 	str.w	r8, [r6]
 800651e:	6077      	str	r7, [r6, #4]
 8006520:	9539      	str	r5, [sp, #228]	; 0xe4
 8006522:	9438      	str	r4, [sp, #224]	; 0xe0
 8006524:	f73f af19 	bgt.w	800635a <_svfprintf_r+0xce6>
 8006528:	3608      	adds	r6, #8
 800652a:	e720      	b.n	800636e <_svfprintf_r+0xcfa>
 800652c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800652e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006530:	aa37      	add	r2, sp, #220	; 0xdc
 8006532:	f002 fcc9 	bl	8008ec8 <__ssprint_r>
 8006536:	2800      	cmp	r0, #0
 8006538:	f47f a97a 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800653c:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 800653e:	ae1d      	add	r6, sp, #116	; 0x74
 8006540:	e502      	b.n	8005f48 <_svfprintf_r+0x8d4>
 8006542:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006544:	4b80      	ldr	r3, [pc, #512]	; (8006748 <_svfprintf_r+0x10d4>)
 8006546:	3401      	adds	r4, #1
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	3501      	adds	r5, #1
 800654c:	2301      	movs	r3, #1
 800654e:	2c07      	cmp	r4, #7
 8006550:	6073      	str	r3, [r6, #4]
 8006552:	9539      	str	r5, [sp, #228]	; 0xe4
 8006554:	9438      	str	r4, [sp, #224]	; 0xe0
 8006556:	f300 80e5 	bgt.w	8006724 <_svfprintf_r+0x10b0>
 800655a:	3608      	adds	r6, #8
 800655c:	b92f      	cbnz	r7, 800656a <_svfprintf_r+0xef6>
 800655e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006560:	b91a      	cbnz	r2, 800656a <_svfprintf_r+0xef6>
 8006562:	9b07      	ldr	r3, [sp, #28]
 8006564:	07d8      	lsls	r0, r3, #31
 8006566:	f57f ac3a 	bpl.w	8005dde <_svfprintf_r+0x76a>
 800656a:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800656c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800656e:	3401      	adds	r4, #1
 8006570:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006572:	182d      	adds	r5, r5, r0
 8006574:	2c07      	cmp	r4, #7
 8006576:	6031      	str	r1, [r6, #0]
 8006578:	6070      	str	r0, [r6, #4]
 800657a:	9539      	str	r5, [sp, #228]	; 0xe4
 800657c:	9438      	str	r4, [sp, #224]	; 0xe0
 800657e:	f300 81fe 	bgt.w	800697e <_svfprintf_r+0x130a>
 8006582:	3608      	adds	r6, #8
 8006584:	427f      	negs	r7, r7
 8006586:	2f00      	cmp	r7, #0
 8006588:	f340 8107 	ble.w	800679a <_svfprintf_r+0x1126>
 800658c:	2f10      	cmp	r7, #16
 800658e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800674c <_svfprintf_r+0x10d8>
 8006592:	f340 8129 	ble.w	80067e8 <_svfprintf_r+0x1174>
 8006596:	4623      	mov	r3, r4
 8006598:	462a      	mov	r2, r5
 800659a:	4644      	mov	r4, r8
 800659c:	f04f 0910 	mov.w	r9, #16
 80065a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80065a6:	e004      	b.n	80065b2 <_svfprintf_r+0xf3e>
 80065a8:	3608      	adds	r6, #8
 80065aa:	3f10      	subs	r7, #16
 80065ac:	2f10      	cmp	r7, #16
 80065ae:	f340 8118 	ble.w	80067e2 <_svfprintf_r+0x116e>
 80065b2:	3301      	adds	r3, #1
 80065b4:	3210      	adds	r2, #16
 80065b6:	2b07      	cmp	r3, #7
 80065b8:	e886 0210 	stmia.w	r6, {r4, r9}
 80065bc:	9239      	str	r2, [sp, #228]	; 0xe4
 80065be:	9338      	str	r3, [sp, #224]	; 0xe0
 80065c0:	ddf2      	ble.n	80065a8 <_svfprintf_r+0xf34>
 80065c2:	4628      	mov	r0, r5
 80065c4:	4641      	mov	r1, r8
 80065c6:	aa37      	add	r2, sp, #220	; 0xdc
 80065c8:	f002 fc7e 	bl	8008ec8 <__ssprint_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f47f a92f 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80065d2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80065d4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80065d6:	ae1d      	add	r6, sp, #116	; 0x74
 80065d8:	e7e7      	b.n	80065aa <_svfprintf_r+0xf36>
 80065da:	9907      	ldr	r1, [sp, #28]
 80065dc:	f10b 0b01 	add.w	fp, fp, #1
 80065e0:	f041 0120 	orr.w	r1, r1, #32
 80065e4:	9107      	str	r1, [sp, #28]
 80065e6:	7853      	ldrb	r3, [r2, #1]
 80065e8:	f7ff b8a4 	b.w	8005734 <_svfprintf_r+0xc0>
 80065ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80065f2:	2100      	movs	r1, #0
 80065f4:	9008      	str	r0, [sp, #32]
 80065f6:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 80065fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80065fc:	9115      	str	r1, [sp, #84]	; 0x54
 80065fe:	f7ff b99b 	b.w	8005938 <_svfprintf_r+0x2c4>
 8006602:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006606:	aa37      	add	r2, sp, #220	; 0xdc
 8006608:	f002 fc5e 	bl	8008ec8 <__ssprint_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	f47f a90f 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006612:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006614:	ae1d      	add	r6, sp, #116	; 0x74
 8006616:	e4ac      	b.n	8005f72 <_svfprintf_r+0x8fe>
 8006618:	1c7b      	adds	r3, r7, #1
 800661a:	f000 808f 	beq.w	800673c <_svfprintf_r+0x10c8>
 800661e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006620:	2967      	cmp	r1, #103	; 0x67
 8006622:	f000 81b9 	beq.w	8006998 <_svfprintf_r+0x1324>
 8006626:	2947      	cmp	r1, #71	; 0x47
 8006628:	f000 81b6 	beq.w	8006998 <_svfprintf_r+0x1324>
 800662c:	9a07      	ldr	r2, [sp, #28]
 800662e:	2d00      	cmp	r5, #0
 8006630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006634:	9207      	str	r2, [sp, #28]
 8006636:	f2c0 81ba 	blt.w	80069ae <_svfprintf_r+0x133a>
 800663a:	2000      	movs	r0, #0
 800663c:	9010      	str	r0, [sp, #64]	; 0x40
 800663e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006640:	2966      	cmp	r1, #102	; 0x66
 8006642:	f000 8152 	beq.w	80068ea <_svfprintf_r+0x1276>
 8006646:	2946      	cmp	r1, #70	; 0x46
 8006648:	f000 814f 	beq.w	80068ea <_svfprintf_r+0x1276>
 800664c:	2965      	cmp	r1, #101	; 0x65
 800664e:	f000 81ab 	beq.w	80069a8 <_svfprintf_r+0x1334>
 8006652:	2945      	cmp	r1, #69	; 0x45
 8006654:	f000 81a8 	beq.w	80069a8 <_svfprintf_r+0x1334>
 8006658:	46b9      	mov	r9, r7
 800665a:	2102      	movs	r1, #2
 800665c:	e88d 0202 	stmia.w	sp, {r1, r9}
 8006660:	a93e      	add	r1, sp, #248	; 0xf8
 8006662:	9102      	str	r1, [sp, #8]
 8006664:	a93f      	add	r1, sp, #252	; 0xfc
 8006666:	4642      	mov	r2, r8
 8006668:	9103      	str	r1, [sp, #12]
 800666a:	462b      	mov	r3, r5
 800666c:	a940      	add	r1, sp, #256	; 0x100
 800666e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006670:	9104      	str	r1, [sp, #16]
 8006672:	f000 faad 	bl	8006bd0 <_dtoa_r>
 8006676:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006678:	4682      	mov	sl, r0
 800667a:	2a67      	cmp	r2, #103	; 0x67
 800667c:	d001      	beq.n	8006682 <_svfprintf_r+0x100e>
 800667e:	2a47      	cmp	r2, #71	; 0x47
 8006680:	d103      	bne.n	800668a <_svfprintf_r+0x1016>
 8006682:	9b07      	ldr	r3, [sp, #28]
 8006684:	07dc      	lsls	r4, r3, #31
 8006686:	f140 81ad 	bpl.w	80069e4 <_svfprintf_r+0x1370>
 800668a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800668c:	eb0a 0409 	add.w	r4, sl, r9
 8006690:	2846      	cmp	r0, #70	; 0x46
 8006692:	f000 813b 	beq.w	800690c <_svfprintf_r+0x1298>
 8006696:	4640      	mov	r0, r8
 8006698:	4629      	mov	r1, r5
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	f7fd f9e7 	bl	8003a70 <__aeabi_dcmpeq>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	f000 8146 	beq.w	8006934 <_svfprintf_r+0x12c0>
 80066a8:	9440      	str	r4, [sp, #256]	; 0x100
 80066aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066ac:	ebca 0404 	rsb	r4, sl, r4
 80066b0:	2967      	cmp	r1, #103	; 0x67
 80066b2:	940e      	str	r4, [sp, #56]	; 0x38
 80066b4:	f000 80c9 	beq.w	800684a <_svfprintf_r+0x11d6>
 80066b8:	2947      	cmp	r1, #71	; 0x47
 80066ba:	f000 80c6 	beq.w	800684a <_svfprintf_r+0x11d6>
 80066be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066c0:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80066c2:	2b66      	cmp	r3, #102	; 0x66
 80066c4:	f040 80c9 	bne.w	800685a <_svfprintf_r+0x11e6>
 80066c8:	2900      	cmp	r1, #0
 80066ca:	f340 81ab 	ble.w	8006a24 <_svfprintf_r+0x13b0>
 80066ce:	2f00      	cmp	r7, #0
 80066d0:	f040 81a1 	bne.w	8006a16 <_svfprintf_r+0x13a2>
 80066d4:	9a07      	ldr	r2, [sp, #28]
 80066d6:	07d2      	lsls	r2, r2, #31
 80066d8:	f100 819d 	bmi.w	8006a16 <_svfprintf_r+0x13a2>
 80066dc:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	910d      	str	r1, [sp, #52]	; 0x34
 80066e4:	9115      	str	r1, [sp, #84]	; 0x54
 80066e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80066e8:	2900      	cmp	r1, #0
 80066ea:	f000 80a2 	beq.w	8006832 <_svfprintf_r+0x11be>
 80066ee:	232d      	movs	r3, #45	; 0x2d
 80066f0:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
 80066f4:	2300      	movs	r3, #0
 80066f6:	9310      	str	r3, [sp, #64]	; 0x40
 80066f8:	f7ff b91f 	b.w	800593a <_svfprintf_r+0x2c6>
 80066fc:	232d      	movs	r3, #45	; 0x2d
 80066fe:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
 8006702:	f7ff b989 	b.w	8005a18 <_svfprintf_r+0x3a4>
 8006706:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006708:	2140      	movs	r1, #64	; 0x40
 800670a:	f001 faf5 	bl	8007cf8 <_malloc_r>
 800670e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	6110      	str	r0, [r2, #16]
 8006714:	2800      	cmp	r0, #0
 8006716:	f000 81a1 	beq.w	8006a5c <_svfprintf_r+0x13e8>
 800671a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	6153      	str	r3, [r2, #20]
 8006720:	f7fe bfc3 	b.w	80056aa <_svfprintf_r+0x36>
 8006724:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006728:	aa37      	add	r2, sp, #220	; 0xdc
 800672a:	f002 fbcd 	bl	8008ec8 <__ssprint_r>
 800672e:	2800      	cmp	r0, #0
 8006730:	f47f a87e 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006734:	9f3e      	ldr	r7, [sp, #248]	; 0xf8
 8006736:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006738:	ae1d      	add	r6, sp, #116	; 0x74
 800673a:	e70f      	b.n	800655c <_svfprintf_r+0xee8>
 800673c:	2706      	movs	r7, #6
 800673e:	e775      	b.n	800662c <_svfprintf_r+0xfb8>
 8006740:	0800a274 	.word	0x0800a274
 8006744:	0800a278 	.word	0x0800a278
 8006748:	0800a2ac 	.word	0x0800a2ac
 800674c:	0800a25c 	.word	0x0800a25c
 8006750:	9a07      	ldr	r2, [sp, #28]
 8006752:	0652      	lsls	r2, r2, #25
 8006754:	d571      	bpl.n	800683a <_svfprintf_r+0x11c6>
 8006756:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800675a:	6803      	ldr	r3, [r0, #0]
 800675c:	3004      	adds	r0, #4
 800675e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006760:	8019      	strh	r1, [r3, #0]
 8006762:	f7fe bfb1 	b.w	80056c8 <_svfprintf_r+0x54>
 8006766:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006768:	f04f 0900 	mov.w	r9, #0
 800676c:	6802      	ldr	r2, [r0, #0]
 800676e:	3004      	adds	r0, #4
 8006770:	900f      	str	r0, [sp, #60]	; 0x3c
 8006772:	4690      	mov	r8, r2
 8006774:	f7ff b97f 	b.w	8005a76 <_svfprintf_r+0x402>
 8006778:	f002 fb76 	bl	8008e68 <strlen>
 800677c:	2300      	movs	r3, #0
 800677e:	900d      	str	r0, [sp, #52]	; 0x34
 8006780:	9310      	str	r3, [sp, #64]	; 0x40
 8006782:	e734      	b.n	80065ee <_svfprintf_r+0xf7a>
 8006784:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006786:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006788:	aa37      	add	r2, sp, #220	; 0xdc
 800678a:	f002 fb9d 	bl	8008ec8 <__ssprint_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	f47f a84e 	bne.w	8005830 <_svfprintf_r+0x1bc>
 8006794:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006796:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006798:	ae1d      	add	r6, sp, #116	; 0x74
 800679a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800679c:	3401      	adds	r4, #1
 800679e:	18ad      	adds	r5, r5, r2
 80067a0:	2c07      	cmp	r4, #7
 80067a2:	f8c6 a000 	str.w	sl, [r6]
 80067a6:	6072      	str	r2, [r6, #4]
 80067a8:	9539      	str	r5, [sp, #228]	; 0xe4
 80067aa:	9438      	str	r4, [sp, #224]	; 0xe0
 80067ac:	f77f ab16 	ble.w	8005ddc <_svfprintf_r+0x768>
 80067b0:	f7ff bb73 	b.w	8005e9a <_svfprintf_r+0x826>
 80067b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b8:	aa37      	add	r2, sp, #220	; 0xdc
 80067ba:	f002 fb85 	bl	8008ec8 <__ssprint_r>
 80067be:	2800      	cmp	r0, #0
 80067c0:	f47f a836 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80067c4:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 80067c6:	ae1d      	add	r6, sp, #116	; 0x74
 80067c8:	e518      	b.n	80061fc <_svfprintf_r+0xb88>
 80067ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ce:	aa37      	add	r2, sp, #220	; 0xdc
 80067d0:	f002 fb7a 	bl	8008ec8 <__ssprint_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f47f a82b 	bne.w	8005830 <_svfprintf_r+0x1bc>
 80067da:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80067dc:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 80067de:	ae1d      	add	r6, sp, #116	; 0x74
 80067e0:	e5cc      	b.n	800637c <_svfprintf_r+0xd08>
 80067e2:	46a0      	mov	r8, r4
 80067e4:	4615      	mov	r5, r2
 80067e6:	461c      	mov	r4, r3
 80067e8:	3401      	adds	r4, #1
 80067ea:	19ed      	adds	r5, r5, r7
 80067ec:	2c07      	cmp	r4, #7
 80067ee:	f8c6 8000 	str.w	r8, [r6]
 80067f2:	6077      	str	r7, [r6, #4]
 80067f4:	9539      	str	r5, [sp, #228]	; 0xe4
 80067f6:	9438      	str	r4, [sp, #224]	; 0xe0
 80067f8:	dcc4      	bgt.n	8006784 <_svfprintf_r+0x1110>
 80067fa:	3608      	adds	r6, #8
 80067fc:	e7cd      	b.n	800679a <_svfprintf_r+0x1126>
 80067fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006802:	aa37      	add	r2, sp, #220	; 0xdc
 8006804:	f002 fb60 	bl	8008ec8 <__ssprint_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	f47f a811 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800680e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8006810:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006812:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006814:	1acb      	subs	r3, r1, r3
 8006816:	ae1d      	add	r6, sp, #116	; 0x74
 8006818:	e5c7      	b.n	80063aa <_svfprintf_r+0xd36>
 800681a:	2f06      	cmp	r7, #6
 800681c:	bf28      	it	cs
 800681e:	2706      	movcs	r7, #6
 8006820:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8006824:	970d      	str	r7, [sp, #52]	; 0x34
 8006826:	9308      	str	r3, [sp, #32]
 8006828:	940f      	str	r4, [sp, #60]	; 0x3c
 800682a:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8006a78 <_svfprintf_r+0x1404>
 800682e:	f7ff b9a6 	b.w	8005b7e <_svfprintf_r+0x50a>
 8006832:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8006836:	f7ff b87f 	b.w	8005938 <_svfprintf_r+0x2c4>
 800683a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800683c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800683e:	6813      	ldr	r3, [r2, #0]
 8006840:	3204      	adds	r2, #4
 8006842:	920f      	str	r2, [sp, #60]	; 0x3c
 8006844:	6018      	str	r0, [r3, #0]
 8006846:	f7fe bf3f 	b.w	80056c8 <_svfprintf_r+0x54>
 800684a:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800684c:	1cc8      	adds	r0, r1, #3
 800684e:	db01      	blt.n	8006854 <_svfprintf_r+0x11e0>
 8006850:	428f      	cmp	r7, r1
 8006852:	da7a      	bge.n	800694a <_svfprintf_r+0x12d6>
 8006854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006856:	3a02      	subs	r2, #2
 8006858:	9213      	str	r2, [sp, #76]	; 0x4c
 800685a:	3901      	subs	r1, #1
 800685c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800685e:	2900      	cmp	r1, #0
 8006860:	913e      	str	r1, [sp, #248]	; 0xf8
 8006862:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
 8006866:	f2c0 80d1 	blt.w	8006a0c <_svfprintf_r+0x1398>
 800686a:	232b      	movs	r3, #43	; 0x2b
 800686c:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8006870:	2909      	cmp	r1, #9
 8006872:	f340 80a1 	ble.w	80069b8 <_svfprintf_r+0x1344>
 8006876:	f10d 04f7 	add.w	r4, sp, #247	; 0xf7
 800687a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800687c:	4620      	mov	r0, r4
 800687e:	fb87 3201 	smull	r3, r2, r7, r1
 8006882:	17cb      	asrs	r3, r1, #31
 8006884:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006888:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800688c:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8006890:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8006894:	2b09      	cmp	r3, #9
 8006896:	4602      	mov	r2, r0
 8006898:	4619      	mov	r1, r3
 800689a:	f800 5d01 	strb.w	r5, [r0, #-1]!
 800689e:	dcee      	bgt.n	800687e <_svfprintf_r+0x120a>
 80068a0:	3130      	adds	r1, #48	; 0x30
 80068a2:	b2c9      	uxtb	r1, r1
 80068a4:	f802 1d02 	strb.w	r1, [r2, #-2]!
 80068a8:	4294      	cmp	r4, r2
 80068aa:	f240 80df 	bls.w	8006a6c <_svfprintf_r+0x13f8>
 80068ae:	f10d 03ea 	add.w	r3, sp, #234	; 0xea
 80068b2:	f10d 00f6 	add.w	r0, sp, #246	; 0xf6
 80068b6:	e001      	b.n	80068bc <_svfprintf_r+0x1248>
 80068b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80068bc:	f803 1b01 	strb.w	r1, [r3], #1
 80068c0:	4282      	cmp	r2, r0
 80068c2:	4619      	mov	r1, r3
 80068c4:	d1f8      	bne.n	80068b8 <_svfprintf_r+0x1244>
 80068c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068c8:	ab3a      	add	r3, sp, #232	; 0xe8
 80068ca:	1acb      	subs	r3, r1, r3
 80068cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80068ce:	2801      	cmp	r0, #1
 80068d0:	4403      	add	r3, r0
 80068d2:	930d      	str	r3, [sp, #52]	; 0x34
 80068d4:	f340 8088 	ble.w	80069e8 <_svfprintf_r+0x1374>
 80068d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068da:	2100      	movs	r1, #0
 80068dc:	3301      	adds	r3, #1
 80068de:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80068e2:	930d      	str	r3, [sp, #52]	; 0x34
 80068e4:	9008      	str	r0, [sp, #32]
 80068e6:	9115      	str	r1, [sp, #84]	; 0x54
 80068e8:	e6fd      	b.n	80066e6 <_svfprintf_r+0x1072>
 80068ea:	2103      	movs	r1, #3
 80068ec:	e88d 0082 	stmia.w	sp, {r1, r7}
 80068f0:	a93e      	add	r1, sp, #248	; 0xf8
 80068f2:	9102      	str	r1, [sp, #8]
 80068f4:	a93f      	add	r1, sp, #252	; 0xfc
 80068f6:	9103      	str	r1, [sp, #12]
 80068f8:	4642      	mov	r2, r8
 80068fa:	a940      	add	r1, sp, #256	; 0x100
 80068fc:	462b      	mov	r3, r5
 80068fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006900:	9104      	str	r1, [sp, #16]
 8006902:	f000 f965 	bl	8006bd0 <_dtoa_r>
 8006906:	46b9      	mov	r9, r7
 8006908:	4682      	mov	sl, r0
 800690a:	19c4      	adds	r4, r0, r7
 800690c:	f89a 3000 	ldrb.w	r3, [sl]
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d002      	beq.n	800691a <_svfprintf_r+0x12a6>
 8006914:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8006916:	18e4      	adds	r4, r4, r3
 8006918:	e6bd      	b.n	8006696 <_svfprintf_r+0x1022>
 800691a:	4640      	mov	r0, r8
 800691c:	4629      	mov	r1, r5
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	f7fd f8a5 	bl	8003a70 <__aeabi_dcmpeq>
 8006926:	2800      	cmp	r0, #0
 8006928:	d1f4      	bne.n	8006914 <_svfprintf_r+0x12a0>
 800692a:	f1c9 0301 	rsb	r3, r9, #1
 800692e:	933e      	str	r3, [sp, #248]	; 0xf8
 8006930:	18e4      	adds	r4, r4, r3
 8006932:	e6b0      	b.n	8006696 <_svfprintf_r+0x1022>
 8006934:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8006936:	429c      	cmp	r4, r3
 8006938:	f240 809b 	bls.w	8006a72 <_svfprintf_r+0x13fe>
 800693c:	2230      	movs	r2, #48	; 0x30
 800693e:	f803 2b01 	strb.w	r2, [r3], #1
 8006942:	42a3      	cmp	r3, r4
 8006944:	9340      	str	r3, [sp, #256]	; 0x100
 8006946:	d1fa      	bne.n	800693e <_svfprintf_r+0x12ca>
 8006948:	e6af      	b.n	80066aa <_svfprintf_r+0x1036>
 800694a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800694c:	4281      	cmp	r1, r0
 800694e:	db3b      	blt.n	80069c8 <_svfprintf_r+0x1354>
 8006950:	9a07      	ldr	r2, [sp, #28]
 8006952:	07d5      	lsls	r5, r2, #31
 8006954:	d553      	bpl.n	80069fe <_svfprintf_r+0x138a>
 8006956:	1c4b      	adds	r3, r1, #1
 8006958:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 800695c:	2267      	movs	r2, #103	; 0x67
 800695e:	930d      	str	r3, [sp, #52]	; 0x34
 8006960:	9008      	str	r0, [sp, #32]
 8006962:	9213      	str	r2, [sp, #76]	; 0x4c
 8006964:	e6be      	b.n	80066e4 <_svfprintf_r+0x1070>
 8006966:	9010      	str	r0, [sp, #64]	; 0x40
 8006968:	9910      	ldr	r1, [sp, #64]	; 0x40
 800696a:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 800696e:	9008      	str	r0, [sp, #32]
 8006970:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
 8006974:	940f      	str	r4, [sp, #60]	; 0x3c
 8006976:	970d      	str	r7, [sp, #52]	; 0x34
 8006978:	9115      	str	r1, [sp, #84]	; 0x54
 800697a:	f7fe bfdd 	b.w	8005938 <_svfprintf_r+0x2c4>
 800697e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006982:	aa37      	add	r2, sp, #220	; 0xdc
 8006984:	f002 faa0 	bl	8008ec8 <__ssprint_r>
 8006988:	2800      	cmp	r0, #0
 800698a:	f47e af51 	bne.w	8005830 <_svfprintf_r+0x1bc>
 800698e:	9f3e      	ldr	r7, [sp, #248]	; 0xf8
 8006990:	9d39      	ldr	r5, [sp, #228]	; 0xe4
 8006992:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8006994:	ae1d      	add	r6, sp, #116	; 0x74
 8006996:	e5f5      	b.n	8006584 <_svfprintf_r+0xf10>
 8006998:	2f00      	cmp	r7, #0
 800699a:	bf08      	it	eq
 800699c:	2701      	moveq	r7, #1
 800699e:	e645      	b.n	800662c <_svfprintf_r+0xfb8>
 80069a0:	4693      	mov	fp, r2
 80069a2:	2700      	movs	r7, #0
 80069a4:	f7fe bec8 	b.w	8005738 <_svfprintf_r+0xc4>
 80069a8:	f107 0901 	add.w	r9, r7, #1
 80069ac:	e655      	b.n	800665a <_svfprintf_r+0xfe6>
 80069ae:	232d      	movs	r3, #45	; 0x2d
 80069b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80069b4:	9310      	str	r3, [sp, #64]	; 0x40
 80069b6:	e642      	b.n	800663e <_svfprintf_r+0xfca>
 80069b8:	3130      	adds	r1, #48	; 0x30
 80069ba:	2330      	movs	r3, #48	; 0x30
 80069bc:	f88d 10eb 	strb.w	r1, [sp, #235]	; 0xeb
 80069c0:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80069c4:	a93b      	add	r1, sp, #236	; 0xec
 80069c6:	e77e      	b.n	80068c6 <_svfprintf_r+0x1252>
 80069c8:	2900      	cmp	r1, #0
 80069ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80069cc:	bfd4      	ite	le
 80069ce:	f1c1 0302 	rsble	r3, r1, #2
 80069d2:	2301      	movgt	r3, #1
 80069d4:	181b      	adds	r3, r3, r0
 80069d6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80069da:	930d      	str	r3, [sp, #52]	; 0x34
 80069dc:	2367      	movs	r3, #103	; 0x67
 80069de:	9208      	str	r2, [sp, #32]
 80069e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80069e2:	e67f      	b.n	80066e4 <_svfprintf_r+0x1070>
 80069e4:	9c40      	ldr	r4, [sp, #256]	; 0x100
 80069e6:	e660      	b.n	80066aa <_svfprintf_r+0x1036>
 80069e8:	9907      	ldr	r1, [sp, #28]
 80069ea:	f011 0301 	ands.w	r3, r1, #1
 80069ee:	f47f af73 	bne.w	80068d8 <_svfprintf_r+0x1264>
 80069f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f4:	9315      	str	r3, [sp, #84]	; 0x54
 80069f6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80069fa:	9208      	str	r2, [sp, #32]
 80069fc:	e673      	b.n	80066e6 <_svfprintf_r+0x1072>
 80069fe:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8006a02:	2067      	movs	r0, #103	; 0x67
 8006a04:	9308      	str	r3, [sp, #32]
 8006a06:	910d      	str	r1, [sp, #52]	; 0x34
 8006a08:	9013      	str	r0, [sp, #76]	; 0x4c
 8006a0a:	e66b      	b.n	80066e4 <_svfprintf_r+0x1070>
 8006a0c:	232d      	movs	r3, #45	; 0x2d
 8006a0e:	4249      	negs	r1, r1
 8006a10:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8006a14:	e72c      	b.n	8006870 <_svfprintf_r+0x11fc>
 8006a16:	3701      	adds	r7, #1
 8006a18:	19cf      	adds	r7, r1, r7
 8006a1a:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
 8006a1e:	970d      	str	r7, [sp, #52]	; 0x34
 8006a20:	9008      	str	r0, [sp, #32]
 8006a22:	e65f      	b.n	80066e4 <_svfprintf_r+0x1070>
 8006a24:	b917      	cbnz	r7, 8006a2c <_svfprintf_r+0x13b8>
 8006a26:	9a07      	ldr	r2, [sp, #28]
 8006a28:	07d3      	lsls	r3, r2, #31
 8006a2a:	d513      	bpl.n	8006a54 <_svfprintf_r+0x13e0>
 8006a2c:	3702      	adds	r7, #2
 8006a2e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8006a32:	970d      	str	r7, [sp, #52]	; 0x34
 8006a34:	9308      	str	r3, [sp, #32]
 8006a36:	e655      	b.n	80066e4 <_svfprintf_r+0x1070>
 8006a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3a:	681f      	ldr	r7, [r3, #0]
 8006a3c:	1d19      	adds	r1, r3, #4
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8006a44:	910f      	str	r1, [sp, #60]	; 0x3c
 8006a46:	4693      	mov	fp, r2
 8006a48:	f6be ae74 	bge.w	8005734 <_svfprintf_r+0xc0>
 8006a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a50:	f7fe be70 	b.w	8005734 <_svfprintf_r+0xc0>
 8006a54:	2001      	movs	r0, #1
 8006a56:	9008      	str	r0, [sp, #32]
 8006a58:	900d      	str	r0, [sp, #52]	; 0x34
 8006a5a:	e643      	b.n	80066e4 <_svfprintf_r+0x1070>
 8006a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a5e:	230c      	movs	r3, #12
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	6003      	str	r3, [r0, #0]
 8006a66:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a68:	f7fe beeb 	b.w	8005842 <_svfprintf_r+0x1ce>
 8006a6c:	f10d 01ea 	add.w	r1, sp, #234	; 0xea
 8006a70:	e729      	b.n	80068c6 <_svfprintf_r+0x1252>
 8006a72:	461c      	mov	r4, r3
 8006a74:	e619      	b.n	80066aa <_svfprintf_r+0x1036>
 8006a76:	bf00      	nop
 8006a78:	0800a2a4 	.word	0x0800a2a4

08006a7c <quorem>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	690b      	ldr	r3, [r1, #16]
 8006a82:	6902      	ldr	r2, [r0, #16]
 8006a84:	b083      	sub	sp, #12
 8006a86:	4293      	cmp	r3, r2
 8006a88:	4680      	mov	r8, r0
 8006a8a:	f300 809c 	bgt.w	8006bc6 <quorem+0x14a>
 8006a8e:	1cda      	adds	r2, r3, #3
 8006a90:	0092      	lsls	r2, r2, #2
 8006a92:	188f      	adds	r7, r1, r2
 8006a94:	687e      	ldr	r6, [r7, #4]
 8006a96:	1882      	adds	r2, r0, r2
 8006a98:	6852      	ldr	r2, [r2, #4]
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	fbb2 f6f6 	udiv	r6, r2, r6
 8006aa0:	f100 0214 	add.w	r2, r0, #20
 8006aa4:	f101 0514 	add.w	r5, r1, #20
 8006aa8:	1e5c      	subs	r4, r3, #1
 8006aaa:	3704      	adds	r7, #4
 8006aac:	9201      	str	r2, [sp, #4]
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	d04a      	beq.n	8006b48 <quorem+0xcc>
 8006ab2:	f04f 0e00 	mov.w	lr, #0
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	46f2      	mov	sl, lr
 8006aba:	462a      	mov	r2, r5
 8006abc:	4699      	mov	r9, r3
 8006abe:	f852 bb04 	ldr.w	fp, [r2], #4
 8006ac2:	6803      	ldr	r3, [r0, #0]
 8006ac4:	fa1f fc8b 	uxth.w	ip, fp
 8006ac8:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8006acc:	fb06 ec0c 	mla	ip, r6, ip, lr
 8006ad0:	fb06 fe0b 	mul.w	lr, r6, fp
 8006ad4:	fa1f fb83 	uxth.w	fp, r3
 8006ad8:	eb0e 4e1c 	add.w	lr, lr, ip, lsr #16
 8006adc:	44da      	add	sl, fp
 8006ade:	fa1f fc8c 	uxth.w	ip, ip
 8006ae2:	fa1f fb8e 	uxth.w	fp, lr
 8006ae6:	ebcc 0c0a 	rsb	ip, ip, sl
 8006aea:	ebcb 4a13 	rsb	sl, fp, r3, lsr #16
 8006aee:	eb0a 4a2c 	add.w	sl, sl, ip, asr #16
 8006af2:	fa1f fc8c 	uxth.w	ip, ip
 8006af6:	ea4c 430a 	orr.w	r3, ip, sl, lsl #16
 8006afa:	4297      	cmp	r7, r2
 8006afc:	f840 3b04 	str.w	r3, [r0], #4
 8006b00:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8006b04:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8006b08:	d2d9      	bcs.n	8006abe <quorem+0x42>
 8006b0a:	1d20      	adds	r0, r4, #4
 8006b0c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
 8006b10:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8006b14:	464b      	mov	r3, r9
 8006b16:	f1be 0f00 	cmp.w	lr, #0
 8006b1a:	d115      	bne.n	8006b48 <quorem+0xcc>
 8006b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006b20:	4596      	cmp	lr, r2
 8006b22:	d20f      	bcs.n	8006b44 <quorem+0xc8>
 8006b24:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8006b28:	b960      	cbnz	r0, 8006b44 <quorem+0xc8>
 8006b2a:	ea6f 000e 	mvn.w	r0, lr
 8006b2e:	3b02      	subs	r3, #2
 8006b30:	1880      	adds	r0, r0, r2
 8006b32:	eba3 0390 	sub.w	r3, r3, r0, lsr #2
 8006b36:	e002      	b.n	8006b3e <quorem+0xc2>
 8006b38:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8006b3c:	b910      	cbnz	r0, 8006b44 <quorem+0xc8>
 8006b3e:	3c01      	subs	r4, #1
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d1f9      	bne.n	8006b38 <quorem+0xbc>
 8006b44:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f001 fe53 	bl	80087f4 <__mcmp>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	db35      	blt.n	8006bbe <quorem+0x142>
 8006b52:	f04f 0c00 	mov.w	ip, #0
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	3601      	adds	r6, #1
 8006b5a:	4662      	mov	r2, ip
 8006b5c:	f855 0b04 	ldr.w	r0, [r5], #4
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	fa1f fc80 	uxth.w	ip, r0
 8006b66:	fa1f f981 	uxth.w	r9, r1
 8006b6a:	0c00      	lsrs	r0, r0, #16
 8006b6c:	ebcc 0c09 	rsb	ip, ip, r9
 8006b70:	4494      	add	ip, r2
 8006b72:	ebc0 4211 	rsb	r2, r0, r1, lsr #16
 8006b76:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8006b7a:	fa1f fc8c 	uxth.w	ip, ip
 8006b7e:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 8006b82:	1412      	asrs	r2, r2, #16
 8006b84:	42af      	cmp	r7, r5
 8006b86:	f843 1b04 	str.w	r1, [r3], #4
 8006b8a:	d2e7      	bcs.n	8006b5c <quorem+0xe0>
 8006b8c:	1d22      	adds	r2, r4, #4
 8006b8e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	b999      	cbnz	r1, 8006bbe <quorem+0x142>
 8006b96:	9901      	ldr	r1, [sp, #4]
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	d20e      	bcs.n	8006bba <quorem+0x13e>
 8006b9c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8006ba0:	b95a      	cbnz	r2, 8006bba <quorem+0x13e>
 8006ba2:	43c9      	mvns	r1, r1
 8006ba4:	18c9      	adds	r1, r1, r3
 8006ba6:	f021 0103 	bic.w	r1, r1, #3
 8006baa:	1a59      	subs	r1, r3, r1
 8006bac:	e002      	b.n	8006bb4 <quorem+0x138>
 8006bae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006bb2:	b912      	cbnz	r2, 8006bba <quorem+0x13e>
 8006bb4:	3c01      	subs	r4, #1
 8006bb6:	428b      	cmp	r3, r1
 8006bb8:	d1f9      	bne.n	8006bae <quorem+0x132>
 8006bba:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	b003      	add	sp, #12
 8006bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e7fa      	b.n	8006bc0 <quorem+0x144>
 8006bca:	bf00      	nop
 8006bcc:	0000      	movs	r0, r0
	...

08006bd0 <_dtoa_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006bd6:	b09f      	sub	sp, #124	; 0x7c
 8006bd8:	9003      	str	r0, [sp, #12]
 8006bda:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8006bdc:	4692      	mov	sl, r2
 8006bde:	469b      	mov	fp, r3
 8006be0:	b151      	cbz	r1, 8006bf8 <_dtoa_r+0x28>
 8006be2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006be4:	2201      	movs	r2, #1
 8006be6:	fa02 f203 	lsl.w	r2, r2, r3
 8006bea:	604b      	str	r3, [r1, #4]
 8006bec:	608a      	str	r2, [r1, #8]
 8006bee:	f001 fbc5 	bl	800837c <_Bfree>
 8006bf2:	9c03      	ldr	r4, [sp, #12]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6423      	str	r3, [r4, #64]	; 0x40
 8006bf8:	f1bb 0400 	subs.w	r4, fp, #0
 8006bfc:	f2c0 80e7 	blt.w	8006dce <_dtoa_r+0x1fe>
 8006c00:	2300      	movs	r3, #0
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	461a      	mov	r2, r3
 8006c08:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006c0c:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006c10:	4023      	ands	r3, r4
 8006c12:	4293      	cmp	r3, r2
 8006c14:	f000 80c4 	beq.w	8006da0 <_dtoa_r+0x1d0>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f7fc ff26 	bl	8003a70 <__aeabi_dcmpeq>
 8006c24:	4656      	mov	r6, sl
 8006c26:	465f      	mov	r7, fp
 8006c28:	2301      	movs	r3, #1
 8006c2a:	b990      	cbnz	r0, 8006c52 <_dtoa_r+0x82>
 8006c2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c30:	d113      	bne.n	8006c5a <_dtoa_r+0x8a>
 8006c32:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006c34:	2301      	movs	r3, #1
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006c3a:	2c00      	cmp	r4, #0
 8006c3c:	f000 80ec 	beq.w	8006e18 <_dtoa_r+0x248>
 8006c40:	4c7d      	ldr	r4, [pc, #500]	; (8006e38 <_dtoa_r+0x268>)
 8006c42:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8006c44:	6004      	str	r4, [r0, #0]
 8006c46:	3c01      	subs	r4, #1
 8006c48:	9404      	str	r4, [sp, #16]
 8006c4a:	9804      	ldr	r0, [sp, #16]
 8006c4c:	b01f      	add	sp, #124	; 0x7c
 8006c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c52:	2300      	movs	r3, #0
 8006c54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c58:	d0eb      	beq.n	8006c32 <_dtoa_r+0x62>
 8006c5a:	a91d      	add	r1, sp, #116	; 0x74
 8006c5c:	9100      	str	r1, [sp, #0]
 8006c5e:	9803      	ldr	r0, [sp, #12]
 8006c60:	a91c      	add	r1, sp, #112	; 0x70
 8006c62:	4632      	mov	r2, r6
 8006c64:	463b      	mov	r3, r7
 8006c66:	9101      	str	r1, [sp, #4]
 8006c68:	f001 fecc 	bl	8008a04 <__d2b>
 8006c6c:	f3c4 550a 	ubfx	r5, r4, #20, #11
 8006c70:	900d      	str	r0, [sp, #52]	; 0x34
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	f040 80ba 	bne.w	8006dec <_dtoa_r+0x21c>
 8006c78:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006c7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006c7e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006c82:	4445      	add	r5, r8
 8006c84:	429d      	cmp	r5, r3
 8006c86:	f2c0 82b2 	blt.w	80071ee <_dtoa_r+0x61e>
 8006c8a:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8006c8e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8006c92:	f505 6282 	add.w	r2, r5, #1040	; 0x410
 8006c96:	1b5b      	subs	r3, r3, r5
 8006c98:	3202      	adds	r2, #2
 8006c9a:	fa04 f303 	lsl.w	r3, r4, r3
 8006c9e:	fa2a f002 	lsr.w	r0, sl, r2
 8006ca2:	4318      	orrs	r0, r3
 8006ca4:	f7fc fc06 	bl	80034b4 <__aeabi_ui2d>
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4602      	mov	r2, r0
 8006cac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb2:	2401      	movs	r4, #1
 8006cb4:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	3d01      	subs	r5, #1
 8006cbc:	9415      	str	r4, [sp, #84]	; 0x54
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006cc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cca:	f7fc fab5 	bl	8003238 <__aeabi_dsub>
 8006cce:	a354      	add	r3, pc, #336	; (adr r3, 8006e20 <_dtoa_r+0x250>)
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f7fc fc64 	bl	80035a0 <__aeabi_dmul>
 8006cd8:	a353      	add	r3, pc, #332	; (adr r3, 8006e28 <_dtoa_r+0x258>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	f7fc faad 	bl	800323c <__adddf3>
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	f7fc fbf4 	bl	80034d4 <__aeabi_i2d>
 8006cec:	a350      	add	r3, pc, #320	; (adr r3, 8006e30 <_dtoa_r+0x260>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7fc fc55 	bl	80035a0 <__aeabi_dmul>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7fc fa9d 	bl	800323c <__adddf3>
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	f7fc fee5 	bl	8003ad4 <__aeabi_d2iz>
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4630      	mov	r0, r6
 8006d12:	2300      	movs	r3, #0
 8006d14:	f7fc feb6 	bl	8003a84 <__aeabi_dcmplt>
 8006d18:	b150      	cbz	r0, 8006d30 <_dtoa_r+0x160>
 8006d1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d1c:	f7fc fbda 	bl	80034d4 <__aeabi_i2d>
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	f7fc fea4 	bl	8003a70 <__aeabi_dcmpeq>
 8006d28:	b910      	cbnz	r0, 8006d30 <_dtoa_r+0x160>
 8006d2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d2c:	3c01      	subs	r4, #1
 8006d2e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d32:	2c16      	cmp	r4, #22
 8006d34:	f200 8239 	bhi.w	80071aa <_dtoa_r+0x5da>
 8006d38:	4940      	ldr	r1, [pc, #256]	; (8006e3c <_dtoa_r+0x26c>)
 8006d3a:	4652      	mov	r2, sl
 8006d3c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006d40:	465b      	mov	r3, fp
 8006d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d46:	f7fc febb 	bl	8003ac0 <__aeabi_dcmpgt>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f000 824c 	beq.w	80071e8 <_dtoa_r+0x618>
 8006d50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d52:	3c01      	subs	r4, #1
 8006d54:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d56:	2400      	movs	r4, #0
 8006d58:	9414      	str	r4, [sp, #80]	; 0x50
 8006d5a:	ebc5 0508 	rsb	r5, r5, r8
 8006d5e:	f1b5 0901 	subs.w	r9, r5, #1
 8006d62:	f100 822e 	bmi.w	80071c2 <_dtoa_r+0x5f2>
 8006d66:	2400      	movs	r4, #0
 8006d68:	940a      	str	r4, [sp, #40]	; 0x28
 8006d6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d6c:	2c00      	cmp	r4, #0
 8006d6e:	f2c0 821f 	blt.w	80071b0 <_dtoa_r+0x5e0>
 8006d72:	44a1      	add	r9, r4
 8006d74:	9412      	str	r4, [sp, #72]	; 0x48
 8006d76:	2400      	movs	r4, #0
 8006d78:	940e      	str	r4, [sp, #56]	; 0x38
 8006d7a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8006d7c:	2c09      	cmp	r4, #9
 8006d7e:	d865      	bhi.n	8006e4c <_dtoa_r+0x27c>
 8006d80:	2c05      	cmp	r4, #5
 8006d82:	f340 864e 	ble.w	8007a22 <_dtoa_r+0xe52>
 8006d86:	3c04      	subs	r4, #4
 8006d88:	9428      	str	r4, [sp, #160]	; 0xa0
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8006d8e:	1ea3      	subs	r3, r4, #2
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d85d      	bhi.n	8006e50 <_dtoa_r+0x280>
 8006d94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d98:	02b403e6 	.word	0x02b403e6
 8006d9c:	03f003f3 	.word	0x03f003f3
 8006da0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8006da2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006da6:	6003      	str	r3, [r0, #0]
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	d015      	beq.n	8006dda <_dtoa_r+0x20a>
 8006dae:	4c24      	ldr	r4, [pc, #144]	; (8006e40 <_dtoa_r+0x270>)
 8006db0:	9404      	str	r4, [sp, #16]
 8006db2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	f43f af48 	beq.w	8006c4a <_dtoa_r+0x7a>
 8006dba:	9c04      	ldr	r4, [sp, #16]
 8006dbc:	78e3      	ldrb	r3, [r4, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8102 	beq.w	8006fc8 <_dtoa_r+0x3f8>
 8006dc4:	f104 0308 	add.w	r3, r4, #8
 8006dc8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	e73d      	b.n	8006c4a <_dtoa_r+0x7a>
 8006dce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	46a3      	mov	fp, r4
 8006dd8:	e714      	b.n	8006c04 <_dtoa_r+0x34>
 8006dda:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <_dtoa_r+0x270>)
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <_dtoa_r+0x274>)
 8006dde:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	bf18      	it	ne
 8006de6:	461a      	movne	r2, r3
 8006de8:	9204      	str	r2, [sp, #16]
 8006dea:	e7e2      	b.n	8006db2 <_dtoa_r+0x1e2>
 8006dec:	463b      	mov	r3, r7
 8006dee:	4632      	mov	r2, r6
 8006df0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006df4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006df6:	f5a5 757e 	sub.w	r5, r5, #1016	; 0x3f8
 8006dfa:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8006dfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e02:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006e06:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0e:	3d07      	subs	r5, #7
 8006e10:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006e14:	9415      	str	r4, [sp, #84]	; 0x54
 8006e16:	e752      	b.n	8006cbe <_dtoa_r+0xee>
 8006e18:	4c0b      	ldr	r4, [pc, #44]	; (8006e48 <_dtoa_r+0x278>)
 8006e1a:	9404      	str	r4, [sp, #16]
 8006e1c:	e715      	b.n	8006c4a <_dtoa_r+0x7a>
 8006e1e:	bf00      	nop
 8006e20:	636f4361 	.word	0x636f4361
 8006e24:	3fd287a7 	.word	0x3fd287a7
 8006e28:	8b60c8b3 	.word	0x8b60c8b3
 8006e2c:	3fc68a28 	.word	0x3fc68a28
 8006e30:	509f79fb 	.word	0x509f79fb
 8006e34:	3fd34413 	.word	0x3fd34413
 8006e38:	0800a2ad 	.word	0x0800a2ad
 8006e3c:	0800a2e8 	.word	0x0800a2e8
 8006e40:	0800a2cc 	.word	0x0800a2cc
 8006e44:	0800a2c0 	.word	0x0800a2c0
 8006e48:	0800a2ac 	.word	0x0800a2ac
 8006e4c:	2400      	movs	r4, #0
 8006e4e:	9428      	str	r4, [sp, #160]	; 0xa0
 8006e50:	9803      	ldr	r0, [sp, #12]
 8006e52:	2400      	movs	r4, #0
 8006e54:	4621      	mov	r1, r4
 8006e56:	6444      	str	r4, [r0, #68]	; 0x44
 8006e58:	f001 fa6a 	bl	8008330 <_Balloc>
 8006e5c:	9a03      	ldr	r2, [sp, #12]
 8006e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e62:	2301      	movs	r3, #1
 8006e64:	9004      	str	r0, [sp, #16]
 8006e66:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e68:	6410      	str	r0, [r2, #64]	; 0x40
 8006e6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e6c:	910c      	str	r1, [sp, #48]	; 0x30
 8006e6e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f2c0 80ab 	blt.w	8006fce <_dtoa_r+0x3fe>
 8006e78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006e7a:	2c0e      	cmp	r4, #14
 8006e7c:	f300 80a7 	bgt.w	8006fce <_dtoa_r+0x3fe>
 8006e80:	4b9f      	ldr	r3, [pc, #636]	; (8007100 <_dtoa_r+0x530>)
 8006e82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e86:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e92:	f2c0 8377 	blt.w	8007584 <_dtoa_r+0x9b4>
 8006e96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7fc fca9 	bl	80037f4 <__aeabi_ddiv>
 8006ea2:	f7fc fe17 	bl	8003ad4 <__aeabi_d2iz>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	f7fc fb14 	bl	80034d4 <__aeabi_i2d>
 8006eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb0:	f7fc fb76 	bl	80035a0 <__aeabi_dmul>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	f7fc f9bc 	bl	8003238 <__aeabi_dsub>
 8006ec0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006ec4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006ec6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006eca:	f80a 3b01 	strb.w	r3, [sl], #1
 8006ece:	2c01      	cmp	r4, #1
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4657      	mov	r7, sl
 8006ed6:	d04e      	beq.n	8006f76 <_dtoa_r+0x3a6>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2200      	movs	r2, #0
 8006edc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006ee0:	f7fc fb5e 	bl	80035a0 <__aeabi_dmul>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4680      	mov	r8, r0
 8006eea:	4689      	mov	r9, r1
 8006eec:	f7fc fdc0 	bl	8003a70 <__aeabi_dcmpeq>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	f040 8202 	bne.w	80072fc <_dtoa_r+0x72c>
 8006ef8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006efc:	d054      	beq.n	8006fa8 <_dtoa_r+0x3d8>
 8006efe:	9804      	ldr	r0, [sp, #16]
 8006f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f02:	f8cd a014 	str.w	sl, [sp, #20]
 8006f06:	1c84      	adds	r4, r0, #2
 8006f08:	1846      	adds	r6, r0, r1
 8006f0a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8006f0e:	e012      	b.n	8006f36 <_dtoa_r+0x366>
 8006f10:	2300      	movs	r3, #0
 8006f12:	2200      	movs	r2, #0
 8006f14:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006f18:	f7fc fb42 	bl	80035a0 <__aeabi_dmul>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	f7fc fda4 	bl	8003a70 <__aeabi_dcmpeq>
 8006f28:	3401      	adds	r4, #1
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	b100      	cbz	r0, 8006f30 <_dtoa_r+0x360>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f34:	d038      	beq.n	8006fa8 <_dtoa_r+0x3d8>
 8006f36:	4652      	mov	r2, sl
 8006f38:	465b      	mov	r3, fp
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7fc fc59 	bl	80037f4 <__aeabi_ddiv>
 8006f42:	f7fc fdc7 	bl	8003ad4 <__aeabi_d2iz>
 8006f46:	4605      	mov	r5, r0
 8006f48:	f7fc fac4 	bl	80034d4 <__aeabi_i2d>
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	465b      	mov	r3, fp
 8006f50:	f7fc fb26 	bl	80035a0 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7fc f96c 	bl	8003238 <__aeabi_dsub>
 8006f60:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006f64:	42b4      	cmp	r4, r6
 8006f66:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4627      	mov	r7, r4
 8006f70:	d1ce      	bne.n	8006f10 <_dtoa_r+0x340>
 8006f72:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7fc f95f 	bl	800323c <__adddf3>
 8006f7e:	4680      	mov	r8, r0
 8006f80:	4689      	mov	r9, r1
 8006f82:	4642      	mov	r2, r8
 8006f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f88:	464b      	mov	r3, r9
 8006f8a:	f7fc fd7b 	bl	8003a84 <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f040 8330 	bne.w	80075f4 <_dtoa_r+0xa24>
 8006f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	f7fc fd68 	bl	8003a70 <__aeabi_dcmpeq>
 8006fa0:	b110      	cbz	r0, 8006fa8 <_dtoa_r+0x3d8>
 8006fa2:	07eb      	lsls	r3, r5, #31
 8006fa4:	f100 8326 	bmi.w	80075f4 <_dtoa_r+0xa24>
 8006fa8:	9803      	ldr	r0, [sp, #12]
 8006faa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fac:	f001 f9e6 	bl	800837c <_Bfree>
 8006fb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	1c63      	adds	r3, r4, #1
 8006fb6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006fb8:	703a      	strb	r2, [r7, #0]
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	f43f ae43 	beq.w	8006c4a <_dtoa_r+0x7a>
 8006fc4:	6027      	str	r7, [r4, #0]
 8006fc6:	e640      	b.n	8006c4a <_dtoa_r+0x7a>
 8006fc8:	9c04      	ldr	r4, [sp, #16]
 8006fca:	1ce3      	adds	r3, r4, #3
 8006fcc:	e6fc      	b.n	8006dc8 <_dtoa_r+0x1f8>
 8006fce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006fd0:	2c00      	cmp	r4, #0
 8006fd2:	f000 80fd 	beq.w	80071d0 <_dtoa_r+0x600>
 8006fd6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8006fd8:	2c01      	cmp	r4, #1
 8006fda:	f340 8301 	ble.w	80075e0 <_dtoa_r+0xa10>
 8006fde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006fe0:	1e65      	subs	r5, r4, #1
 8006fe2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006fe4:	42ac      	cmp	r4, r5
 8006fe6:	f2c0 83cb 	blt.w	8007780 <_dtoa_r+0xbb0>
 8006fea:	1b65      	subs	r5, r4, r5
 8006fec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	f2c0 84b0 	blt.w	8007954 <_dtoa_r+0xd84>
 8006ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffa:	9803      	ldr	r0, [sp, #12]
 8006ffc:	18d2      	adds	r2, r2, r3
 8006ffe:	2101      	movs	r1, #1
 8007000:	920a      	str	r2, [sp, #40]	; 0x28
 8007002:	4499      	add	r9, r3
 8007004:	f001 fa9e 	bl	8008544 <__i2b>
 8007008:	4680      	mov	r8, r0
 800700a:	b164      	cbz	r4, 8007026 <_dtoa_r+0x456>
 800700c:	f1b9 0f00 	cmp.w	r9, #0
 8007010:	dd09      	ble.n	8007026 <_dtoa_r+0x456>
 8007012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007014:	45a1      	cmp	r9, r4
 8007016:	bfb4      	ite	lt
 8007018:	464b      	movlt	r3, r9
 800701a:	4623      	movge	r3, r4
 800701c:	1ac0      	subs	r0, r0, r3
 800701e:	900a      	str	r0, [sp, #40]	; 0x28
 8007020:	1ae4      	subs	r4, r4, r3
 8007022:	ebc3 0909 	rsb	r9, r3, r9
 8007026:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007028:	2900      	cmp	r1, #0
 800702a:	dd1a      	ble.n	8007062 <_dtoa_r+0x492>
 800702c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800702e:	2a00      	cmp	r2, #0
 8007030:	f000 839f 	beq.w	8007772 <_dtoa_r+0xba2>
 8007034:	2d00      	cmp	r5, #0
 8007036:	dd10      	ble.n	800705a <_dtoa_r+0x48a>
 8007038:	4641      	mov	r1, r8
 800703a:	462a      	mov	r2, r5
 800703c:	9803      	ldr	r0, [sp, #12]
 800703e:	f001 fb2d 	bl	800869c <__pow5mult>
 8007042:	4680      	mov	r8, r0
 8007044:	4641      	mov	r1, r8
 8007046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007048:	9803      	ldr	r0, [sp, #12]
 800704a:	f001 fa85 	bl	8008558 <__multiply>
 800704e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007050:	4606      	mov	r6, r0
 8007052:	9803      	ldr	r0, [sp, #12]
 8007054:	f001 f992 	bl	800837c <_Bfree>
 8007058:	960d      	str	r6, [sp, #52]	; 0x34
 800705a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800705c:	1b5a      	subs	r2, r3, r5
 800705e:	f040 82ae 	bne.w	80075be <_dtoa_r+0x9ee>
 8007062:	2101      	movs	r1, #1
 8007064:	9803      	ldr	r0, [sp, #12]
 8007066:	f001 fa6d 	bl	8008544 <__i2b>
 800706a:	4605      	mov	r5, r0
 800706c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800706e:	2800      	cmp	r0, #0
 8007070:	dd05      	ble.n	800707e <_dtoa_r+0x4ae>
 8007072:	4629      	mov	r1, r5
 8007074:	9803      	ldr	r0, [sp, #12]
 8007076:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007078:	f001 fb10 	bl	800869c <__pow5mult>
 800707c:	4605      	mov	r5, r0
 800707e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007080:	2901      	cmp	r1, #1
 8007082:	f340 8124 	ble.w	80072ce <_dtoa_r+0x6fe>
 8007086:	2600      	movs	r6, #0
 8007088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 834a 	bne.w	8007724 <_dtoa_r+0xb54>
 8007090:	2301      	movs	r3, #1
 8007092:	444b      	add	r3, r9
 8007094:	f013 031f 	ands.w	r3, r3, #31
 8007098:	f000 809f 	beq.w	80071da <_dtoa_r+0x60a>
 800709c:	f1c3 0220 	rsb	r2, r3, #32
 80070a0:	2a04      	cmp	r2, #4
 80070a2:	f340 84b8 	ble.w	8007a16 <_dtoa_r+0xe46>
 80070a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070a8:	f1c3 031c 	rsb	r3, r3, #28
 80070ac:	18c0      	adds	r0, r0, r3
 80070ae:	900a      	str	r0, [sp, #40]	; 0x28
 80070b0:	18e4      	adds	r4, r4, r3
 80070b2:	4499      	add	r9, r3
 80070b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	dd04      	ble.n	80070c4 <_dtoa_r+0x4f4>
 80070ba:	9803      	ldr	r0, [sp, #12]
 80070bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070be:	f001 fb39 	bl	8008734 <__lshift>
 80070c2:	900d      	str	r0, [sp, #52]	; 0x34
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	dd05      	ble.n	80070d6 <_dtoa_r+0x506>
 80070ca:	4629      	mov	r1, r5
 80070cc:	9803      	ldr	r0, [sp, #12]
 80070ce:	464a      	mov	r2, r9
 80070d0:	f001 fb30 	bl	8008734 <__lshift>
 80070d4:	4605      	mov	r5, r0
 80070d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 830b 	bne.w	80076f4 <_dtoa_r+0xb24>
 80070de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f340 8328 	ble.w	8007736 <_dtoa_r+0xb66>
 80070e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f040 8088 	bne.w	80071fe <_dtoa_r+0x62e>
 80070ee:	46c2      	mov	sl, r8
 80070f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80070f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070f4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80070f8:	9f04      	ldr	r7, [sp, #16]
 80070fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070fe:	e008      	b.n	8007112 <_dtoa_r+0x542>
 8007100:	0800a2e8 	.word	0x0800a2e8
 8007104:	4659      	mov	r1, fp
 8007106:	4640      	mov	r0, r8
 8007108:	220a      	movs	r2, #10
 800710a:	2300      	movs	r3, #0
 800710c:	f001 f940 	bl	8008390 <__multadd>
 8007110:	4683      	mov	fp, r0
 8007112:	4629      	mov	r1, r5
 8007114:	4658      	mov	r0, fp
 8007116:	f7ff fcb1 	bl	8006a7c <quorem>
 800711a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800711e:	f807 9004 	strb.w	r9, [r7, r4]
 8007122:	3401      	adds	r4, #1
 8007124:	42a6      	cmp	r6, r4
 8007126:	dced      	bgt.n	8007104 <_dtoa_r+0x534>
 8007128:	46d0      	mov	r8, sl
 800712a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800712c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007130:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8007134:	2c01      	cmp	r4, #1
 8007136:	bfac      	ite	ge
 8007138:	44a2      	addge	sl, r4
 800713a:	f10a 0a01 	addlt.w	sl, sl, #1
 800713e:	2600      	movs	r6, #0
 8007140:	2201      	movs	r2, #1
 8007142:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007144:	9803      	ldr	r0, [sp, #12]
 8007146:	f001 faf5 	bl	8008734 <__lshift>
 800714a:	4629      	mov	r1, r5
 800714c:	900d      	str	r0, [sp, #52]	; 0x34
 800714e:	f001 fb51 	bl	80087f4 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	f340 8239 	ble.w	80075ca <_dtoa_r+0x9fa>
 8007158:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800715c:	9c04      	ldr	r4, [sp, #16]
 800715e:	1c62      	adds	r2, r4, #1
 8007160:	e003      	b.n	800716a <_dtoa_r+0x59a>
 8007162:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8007166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800716a:	2b39      	cmp	r3, #57	; 0x39
 800716c:	4657      	mov	r7, sl
 800716e:	f040 836a 	bne.w	8007846 <_dtoa_r+0xc76>
 8007172:	4592      	cmp	sl, r2
 8007174:	d1f5      	bne.n	8007162 <_dtoa_r+0x592>
 8007176:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007178:	2331      	movs	r3, #49	; 0x31
 800717a:	3401      	adds	r4, #1
 800717c:	940b      	str	r4, [sp, #44]	; 0x2c
 800717e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	4629      	mov	r1, r5
 8007186:	f001 f8f9 	bl	800837c <_Bfree>
 800718a:	f1b8 0f00 	cmp.w	r8, #0
 800718e:	f43f af0b 	beq.w	8006fa8 <_dtoa_r+0x3d8>
 8007192:	b12e      	cbz	r6, 80071a0 <_dtoa_r+0x5d0>
 8007194:	4546      	cmp	r6, r8
 8007196:	d003      	beq.n	80071a0 <_dtoa_r+0x5d0>
 8007198:	9803      	ldr	r0, [sp, #12]
 800719a:	4631      	mov	r1, r6
 800719c:	f001 f8ee 	bl	800837c <_Bfree>
 80071a0:	9803      	ldr	r0, [sp, #12]
 80071a2:	4641      	mov	r1, r8
 80071a4:	f001 f8ea 	bl	800837c <_Bfree>
 80071a8:	e6fe      	b.n	8006fa8 <_dtoa_r+0x3d8>
 80071aa:	2401      	movs	r4, #1
 80071ac:	9414      	str	r4, [sp, #80]	; 0x50
 80071ae:	e5d4      	b.n	8006d5a <_dtoa_r+0x18a>
 80071b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071b4:	1a24      	subs	r4, r4, r0
 80071b6:	940a      	str	r4, [sp, #40]	; 0x28
 80071b8:	4244      	negs	r4, r0
 80071ba:	940e      	str	r4, [sp, #56]	; 0x38
 80071bc:	2400      	movs	r4, #0
 80071be:	9412      	str	r4, [sp, #72]	; 0x48
 80071c0:	e5db      	b.n	8006d7a <_dtoa_r+0x1aa>
 80071c2:	f1c9 0900 	rsb	r9, r9, #0
 80071c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80071ca:	f04f 0900 	mov.w	r9, #0
 80071ce:	e5cc      	b.n	8006d6a <_dtoa_r+0x19a>
 80071d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80071d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071d4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80071d8:	e717      	b.n	800700a <_dtoa_r+0x43a>
 80071da:	231c      	movs	r3, #28
 80071dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071de:	18e4      	adds	r4, r4, r3
 80071e0:	18c9      	adds	r1, r1, r3
 80071e2:	910a      	str	r1, [sp, #40]	; 0x28
 80071e4:	4499      	add	r9, r3
 80071e6:	e765      	b.n	80070b4 <_dtoa_r+0x4e4>
 80071e8:	2400      	movs	r4, #0
 80071ea:	9414      	str	r4, [sp, #80]	; 0x50
 80071ec:	e5b5      	b.n	8006d5a <_dtoa_r+0x18a>
 80071ee:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80071f2:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80071f6:	1b40      	subs	r0, r0, r5
 80071f8:	fa0a f000 	lsl.w	r0, sl, r0
 80071fc:	e552      	b.n	8006ca4 <_dtoa_r+0xd4>
 80071fe:	2c00      	cmp	r4, #0
 8007200:	dd05      	ble.n	800720e <_dtoa_r+0x63e>
 8007202:	4641      	mov	r1, r8
 8007204:	9803      	ldr	r0, [sp, #12]
 8007206:	4622      	mov	r2, r4
 8007208:	f001 fa94 	bl	8008734 <__lshift>
 800720c:	4680      	mov	r8, r0
 800720e:	2e00      	cmp	r6, #0
 8007210:	f040 831d 	bne.w	800784e <_dtoa_r+0xc7e>
 8007214:	4644      	mov	r4, r8
 8007216:	9f04      	ldr	r7, [sp, #16]
 8007218:	4646      	mov	r6, r8
 800721a:	f04f 0801 	mov.w	r8, #1
 800721e:	ea0a 0108 	and.w	r1, sl, r8
 8007222:	46c1      	mov	r9, r8
 8007224:	9505      	str	r5, [sp, #20]
 8007226:	46b8      	mov	r8, r7
 8007228:	9d03      	ldr	r5, [sp, #12]
 800722a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800722c:	910e      	str	r1, [sp, #56]	; 0x38
 800722e:	9905      	ldr	r1, [sp, #20]
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff fc23 	bl	8006a7c <quorem>
 8007236:	4631      	mov	r1, r6
 8007238:	900a      	str	r0, [sp, #40]	; 0x28
 800723a:	4638      	mov	r0, r7
 800723c:	f001 fada 	bl	80087f4 <__mcmp>
 8007240:	4622      	mov	r2, r4
 8007242:	9008      	str	r0, [sp, #32]
 8007244:	9905      	ldr	r1, [sp, #20]
 8007246:	4628      	mov	r0, r5
 8007248:	f001 faf2 	bl	8008830 <__mdiff>
 800724c:	4682      	mov	sl, r0
 800724e:	68c2      	ldr	r2, [r0, #12]
 8007250:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007252:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007256:	2a00      	cmp	r2, #0
 8007258:	f000 81e7 	beq.w	800762a <_dtoa_r+0xa5a>
 800725c:	4628      	mov	r0, r5
 800725e:	4651      	mov	r1, sl
 8007260:	9302      	str	r3, [sp, #8]
 8007262:	f001 f88b 	bl	800837c <_Bfree>
 8007266:	9b02      	ldr	r3, [sp, #8]
 8007268:	f04f 0b01 	mov.w	fp, #1
 800726c:	9808      	ldr	r0, [sp, #32]
 800726e:	2800      	cmp	r0, #0
 8007270:	f2c0 829f 	blt.w	80077b2 <_dtoa_r+0xbe2>
 8007274:	d105      	bne.n	8007282 <_dtoa_r+0x6b2>
 8007276:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007278:	b919      	cbnz	r1, 8007282 <_dtoa_r+0x6b2>
 800727a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800727c:	2a00      	cmp	r2, #0
 800727e:	f000 8298 	beq.w	80077b2 <_dtoa_r+0xbe2>
 8007282:	f1bb 0f00 	cmp.w	fp, #0
 8007286:	f300 82f9 	bgt.w	800787c <_dtoa_r+0xcac>
 800728a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800728c:	f808 3b01 	strb.w	r3, [r8], #1
 8007290:	4581      	cmp	r9, r0
 8007292:	46c2      	mov	sl, r8
 8007294:	f000 82fb 	beq.w	800788e <_dtoa_r+0xcbe>
 8007298:	4639      	mov	r1, r7
 800729a:	220a      	movs	r2, #10
 800729c:	2300      	movs	r3, #0
 800729e:	4628      	mov	r0, r5
 80072a0:	f001 f876 	bl	8008390 <__multadd>
 80072a4:	42a6      	cmp	r6, r4
 80072a6:	4607      	mov	r7, r0
 80072a8:	f000 81e7 	beq.w	800767a <_dtoa_r+0xaaa>
 80072ac:	4631      	mov	r1, r6
 80072ae:	220a      	movs	r2, #10
 80072b0:	2300      	movs	r3, #0
 80072b2:	4628      	mov	r0, r5
 80072b4:	f001 f86c 	bl	8008390 <__multadd>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4606      	mov	r6, r0
 80072bc:	220a      	movs	r2, #10
 80072be:	4628      	mov	r0, r5
 80072c0:	2300      	movs	r3, #0
 80072c2:	f001 f865 	bl	8008390 <__multadd>
 80072c6:	f109 0901 	add.w	r9, r9, #1
 80072ca:	4604      	mov	r4, r0
 80072cc:	e7af      	b.n	800722e <_dtoa_r+0x65e>
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	f47f aed8 	bne.w	8007086 <_dtoa_r+0x4b6>
 80072d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 8341 	bne.w	8007962 <_dtoa_r+0xd92>
 80072e0:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80072e4:	ea0b 0303 	and.w	r3, fp, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8369 	beq.w	80079c0 <_dtoa_r+0xdf0>
 80072ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072f0:	f109 0901 	add.w	r9, r9, #1
 80072f4:	3201      	adds	r2, #1
 80072f6:	920a      	str	r2, [sp, #40]	; 0x28
 80072f8:	2601      	movs	r6, #1
 80072fa:	e6c5      	b.n	8007088 <_dtoa_r+0x4b8>
 80072fc:	2300      	movs	r3, #0
 80072fe:	e5fb      	b.n	8006ef8 <_dtoa_r+0x328>
 8007300:	2400      	movs	r4, #0
 8007302:	940f      	str	r4, [sp, #60]	; 0x3c
 8007304:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8007306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007308:	1904      	adds	r4, r0, r4
 800730a:	1c65      	adds	r5, r4, #1
 800730c:	2d00      	cmp	r5, #0
 800730e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007310:	462c      	mov	r4, r5
 8007312:	f340 8247 	ble.w	80077a4 <_dtoa_r+0xbd4>
 8007316:	950c      	str	r5, [sp, #48]	; 0x30
 8007318:	9a03      	ldr	r2, [sp, #12]
 800731a:	2100      	movs	r1, #0
 800731c:	2d17      	cmp	r5, #23
 800731e:	6451      	str	r1, [r2, #68]	; 0x44
 8007320:	d90a      	bls.n	8007338 <_dtoa_r+0x768>
 8007322:	2201      	movs	r2, #1
 8007324:	2304      	movs	r3, #4
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	f103 0014 	add.w	r0, r3, #20
 800732c:	4611      	mov	r1, r2
 800732e:	3201      	adds	r2, #1
 8007330:	42a8      	cmp	r0, r5
 8007332:	d9f8      	bls.n	8007326 <_dtoa_r+0x756>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	6459      	str	r1, [r3, #68]	; 0x44
 8007338:	9803      	ldr	r0, [sp, #12]
 800733a:	f000 fff9 	bl	8008330 <_Balloc>
 800733e:	9903      	ldr	r1, [sp, #12]
 8007340:	2c0e      	cmp	r4, #14
 8007342:	9004      	str	r0, [sp, #16]
 8007344:	6408      	str	r0, [r1, #64]	; 0x40
 8007346:	f63f ad93 	bhi.w	8006e70 <_dtoa_r+0x2a0>
 800734a:	2e00      	cmp	r6, #0
 800734c:	f43f ad90 	beq.w	8006e70 <_dtoa_r+0x2a0>
 8007350:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	2c00      	cmp	r4, #0
 8007358:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800735c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007360:	f340 824d 	ble.w	80077fe <_dtoa_r+0xc2e>
 8007364:	4ba5      	ldr	r3, [pc, #660]	; (80075fc <_dtoa_r+0xa2c>)
 8007366:	f004 020f 	and.w	r2, r4, #15
 800736a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800736e:	1124      	asrs	r4, r4, #4
 8007370:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8007374:	06e3      	lsls	r3, r4, #27
 8007376:	f140 820b 	bpl.w	8007790 <_dtoa_r+0xbc0>
 800737a:	4ba1      	ldr	r3, [pc, #644]	; (8007600 <_dtoa_r+0xa30>)
 800737c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007384:	f7fc fa36 	bl	80037f4 <__aeabi_ddiv>
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800738c:	f004 040f 	and.w	r4, r4, #15
 8007390:	2603      	movs	r6, #3
 8007392:	b174      	cbz	r4, 80073b2 <_dtoa_r+0x7e2>
 8007394:	4d9a      	ldr	r5, [pc, #616]	; (8007600 <_dtoa_r+0xa30>)
 8007396:	4650      	mov	r0, sl
 8007398:	4659      	mov	r1, fp
 800739a:	07e7      	lsls	r7, r4, #31
 800739c:	d504      	bpl.n	80073a8 <_dtoa_r+0x7d8>
 800739e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073a2:	f7fc f8fd 	bl	80035a0 <__aeabi_dmul>
 80073a6:	3601      	adds	r6, #1
 80073a8:	3508      	adds	r5, #8
 80073aa:	1064      	asrs	r4, r4, #1
 80073ac:	d1f5      	bne.n	800739a <_dtoa_r+0x7ca>
 80073ae:	4682      	mov	sl, r0
 80073b0:	468b      	mov	fp, r1
 80073b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073b6:	4652      	mov	r2, sl
 80073b8:	465b      	mov	r3, fp
 80073ba:	f7fc fa1b 	bl	80037f4 <__aeabi_ddiv>
 80073be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f000 8163 	beq.w	8007690 <_dtoa_r+0xac0>
 80073ca:	2300      	movs	r3, #0
 80073cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d0:	2200      	movs	r2, #0
 80073d2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80073d6:	f7fc fb55 	bl	8003a84 <__aeabi_dcmplt>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f000 8158 	beq.w	8007690 <_dtoa_r+0xac0>
 80073e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	f000 82ef 	beq.w	80079c6 <_dtoa_r+0xdf6>
 80073e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	f340 8201 	ble.w	80077f2 <_dtoa_r+0xc22>
 80073f0:	2300      	movs	r3, #0
 80073f2:	2200      	movs	r2, #0
 80073f4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80073f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073fc:	f7fc f8d0 	bl	80035a0 <__aeabi_dmul>
 8007400:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007404:	1c70      	adds	r0, r6, #1
 8007406:	f7fc f865 	bl	80034d4 <__aeabi_i2d>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007412:	f7fc f8c5 	bl	80035a0 <__aeabi_dmul>
 8007416:	2300      	movs	r3, #0
 8007418:	2200      	movs	r2, #0
 800741a:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800741e:	f7fb ff0d 	bl	800323c <__adddf3>
 8007422:	4604      	mov	r4, r0
 8007424:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007426:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800742a:	3801      	subs	r0, #1
 800742c:	901a      	str	r0, [sp, #104]	; 0x68
 800742e:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8232 	beq.w	800789e <_dtoa_r+0xcce>
 800743a:	4b70      	ldr	r3, [pc, #448]	; (80075fc <_dtoa_r+0xa2c>)
 800743c:	2100      	movs	r1, #0
 800743e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007446:	2000      	movs	r0, #0
 8007448:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800744c:	f7fc f9d2 	bl	80037f4 <__aeabi_ddiv>
 8007450:	462b      	mov	r3, r5
 8007452:	4622      	mov	r2, r4
 8007454:	f7fb fef0 	bl	8003238 <__aeabi_dsub>
 8007458:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800745c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007460:	f7fc fb38 	bl	8003ad4 <__aeabi_d2iz>
 8007464:	4605      	mov	r5, r0
 8007466:	f7fc f835 	bl	80034d4 <__aeabi_i2d>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007472:	f7fb fee1 	bl	8003238 <__aeabi_dsub>
 8007476:	3530      	adds	r5, #48	; 0x30
 8007478:	f8dd a010 	ldr.w	sl, [sp, #16]
 800747c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8007480:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007484:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007488:	b2ed      	uxtb	r5, r5
 800748a:	f80a 5b01 	strb.w	r5, [sl], #1
 800748e:	f7fc fb17 	bl	8003ac0 <__aeabi_dcmpgt>
 8007492:	4657      	mov	r7, sl
 8007494:	2800      	cmp	r0, #0
 8007496:	d162      	bne.n	800755e <_dtoa_r+0x98e>
 8007498:	2100      	movs	r1, #0
 800749a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800749e:	2000      	movs	r0, #0
 80074a0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80074a4:	f7fb fec8 	bl	8003238 <__aeabi_dsub>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80074b0:	f7fc fb06 	bl	8003ac0 <__aeabi_dcmpgt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f040 8280 	bne.w	80079ba <_dtoa_r+0xdea>
 80074ba:	f1b8 0f01 	cmp.w	r8, #1
 80074be:	f340 8198 	ble.w	80077f2 <_dtoa_r+0xc22>
 80074c2:	9c04      	ldr	r4, [sp, #16]
 80074c4:	4656      	mov	r6, sl
 80074c6:	44a0      	add	r8, r4
 80074c8:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80074cc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80074d0:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 80074d4:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 80074d8:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
 80074dc:	e00c      	b.n	80074f8 <_dtoa_r+0x928>
 80074de:	f7fb feab 	bl	8003238 <__aeabi_dsub>
 80074e2:	4652      	mov	r2, sl
 80074e4:	465b      	mov	r3, fp
 80074e6:	f7fc facd 	bl	8003a84 <__aeabi_dcmplt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f040 8263 	bne.w	80079b6 <_dtoa_r+0xde6>
 80074f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80074f2:	42a6      	cmp	r6, r4
 80074f4:	f000 817b 	beq.w	80077ee <_dtoa_r+0xc1e>
 80074f8:	2300      	movs	r3, #0
 80074fa:	2200      	movs	r2, #0
 80074fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8007500:	4650      	mov	r0, sl
 8007502:	4659      	mov	r1, fp
 8007504:	f7fc f84c 	bl	80035a0 <__aeabi_dmul>
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8007510:	4682      	mov	sl, r0
 8007512:	468b      	mov	fp, r1
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7fc f842 	bl	80035a0 <__aeabi_dmul>
 800751c:	4689      	mov	r9, r1
 800751e:	4680      	mov	r8, r0
 8007520:	f7fc fad8 	bl	8003ad4 <__aeabi_d2iz>
 8007524:	4604      	mov	r4, r0
 8007526:	f7fb ffd5 	bl	80034d4 <__aeabi_i2d>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7fb fe81 	bl	8003238 <__aeabi_dsub>
 8007536:	3430      	adds	r4, #48	; 0x30
 8007538:	b2e5      	uxtb	r5, r4
 800753a:	f806 5b01 	strb.w	r5, [r6], #1
 800753e:	4652      	mov	r2, sl
 8007540:	465b      	mov	r3, fp
 8007542:	4689      	mov	r9, r1
 8007544:	4680      	mov	r8, r0
 8007546:	f7fc fa9d 	bl	8003a84 <__aeabi_dcmplt>
 800754a:	2100      	movs	r1, #0
 800754c:	4604      	mov	r4, r0
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	2000      	movs	r0, #0
 8007554:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8007558:	4637      	mov	r7, r6
 800755a:	2c00      	cmp	r4, #0
 800755c:	d0bf      	beq.n	80074de <_dtoa_r+0x90e>
 800755e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007560:	940b      	str	r4, [sp, #44]	; 0x2c
 8007562:	e521      	b.n	8006fa8 <_dtoa_r+0x3d8>
 8007564:	2400      	movs	r4, #0
 8007566:	940f      	str	r4, [sp, #60]	; 0x3c
 8007568:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800756a:	2c00      	cmp	r4, #0
 800756c:	f340 8112 	ble.w	8007794 <_dtoa_r+0xbc4>
 8007570:	4625      	mov	r5, r4
 8007572:	9413      	str	r4, [sp, #76]	; 0x4c
 8007574:	940c      	str	r4, [sp, #48]	; 0x30
 8007576:	e6cf      	b.n	8007318 <_dtoa_r+0x748>
 8007578:	2401      	movs	r4, #1
 800757a:	940f      	str	r4, [sp, #60]	; 0x3c
 800757c:	e6c2      	b.n	8007304 <_dtoa_r+0x734>
 800757e:	2401      	movs	r4, #1
 8007580:	940f      	str	r4, [sp, #60]	; 0x3c
 8007582:	e7f1      	b.n	8007568 <_dtoa_r+0x998>
 8007584:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007586:	2c00      	cmp	r4, #0
 8007588:	f73f ac85 	bgt.w	8006e96 <_dtoa_r+0x2c6>
 800758c:	f040 8240 	bne.w	8007a10 <_dtoa_r+0xe40>
 8007590:	2300      	movs	r3, #0
 8007592:	2200      	movs	r2, #0
 8007594:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8007598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759c:	f7fc f800 	bl	80035a0 <__aeabi_dmul>
 80075a0:	4652      	mov	r2, sl
 80075a2:	465b      	mov	r3, fp
 80075a4:	f7fc fa82 	bl	8003aac <__aeabi_dcmpge>
 80075a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075aa:	46a8      	mov	r8, r5
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f000 80d7 	beq.w	8007760 <_dtoa_r+0xb90>
 80075b2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80075b4:	9f04      	ldr	r7, [sp, #16]
 80075b6:	43e4      	mvns	r4, r4
 80075b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80075ba:	2600      	movs	r6, #0
 80075bc:	e5e1      	b.n	8007182 <_dtoa_r+0x5b2>
 80075be:	9803      	ldr	r0, [sp, #12]
 80075c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075c2:	f001 f86b 	bl	800869c <__pow5mult>
 80075c6:	900d      	str	r0, [sp, #52]	; 0x34
 80075c8:	e54b      	b.n	8007062 <_dtoa_r+0x492>
 80075ca:	d103      	bne.n	80075d4 <_dtoa_r+0xa04>
 80075cc:	f019 0f01 	tst.w	r9, #1
 80075d0:	f47f adc2 	bne.w	8007158 <_dtoa_r+0x588>
 80075d4:	4657      	mov	r7, sl
 80075d6:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80075da:	2b30      	cmp	r3, #48	; 0x30
 80075dc:	d0fa      	beq.n	80075d4 <_dtoa_r+0xa04>
 80075de:	e5d0      	b.n	8007182 <_dtoa_r+0x5b2>
 80075e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	f000 81c0 	beq.w	8007968 <_dtoa_r+0xd98>
 80075e8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80075ec:	3303      	adds	r3, #3
 80075ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80075f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075f2:	e501      	b.n	8006ff8 <_dtoa_r+0x428>
 80075f4:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 80075f8:	463b      	mov	r3, r7
 80075fa:	e006      	b.n	800760a <_dtoa_r+0xa3a>
 80075fc:	0800a2e8 	.word	0x0800a2e8
 8007600:	0800a3b0 	.word	0x0800a3b0
 8007604:	f813 5c02 	ldrb.w	r5, [r3, #-2]
 8007608:	3b01      	subs	r3, #1
 800760a:	2d39      	cmp	r5, #57	; 0x39
 800760c:	461f      	mov	r7, r3
 800760e:	f040 81b2 	bne.w	8007976 <_dtoa_r+0xda6>
 8007612:	4553      	cmp	r3, sl
 8007614:	d1f6      	bne.n	8007604 <_dtoa_r+0xa34>
 8007616:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007618:	2330      	movs	r3, #48	; 0x30
 800761a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800761e:	3401      	adds	r4, #1
 8007620:	2331      	movs	r3, #49	; 0x31
 8007622:	940b      	str	r4, [sp, #44]	; 0x2c
 8007624:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8007628:	e4be      	b.n	8006fa8 <_dtoa_r+0x3d8>
 800762a:	4651      	mov	r1, sl
 800762c:	4638      	mov	r0, r7
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	f001 f8e0 	bl	80087f4 <__mcmp>
 8007634:	4651      	mov	r1, sl
 8007636:	4683      	mov	fp, r0
 8007638:	4628      	mov	r0, r5
 800763a:	f000 fe9f 	bl	800837c <_Bfree>
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	f1bb 0f00 	cmp.w	fp, #0
 8007644:	f47f ae12 	bne.w	800726c <_dtoa_r+0x69c>
 8007648:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800764a:	2900      	cmp	r1, #0
 800764c:	f47f ae0e 	bne.w	800726c <_dtoa_r+0x69c>
 8007650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007652:	2a00      	cmp	r2, #0
 8007654:	f47f ae0a 	bne.w	800726c <_dtoa_r+0x69c>
 8007658:	2b39      	cmp	r3, #57	; 0x39
 800765a:	970d      	str	r7, [sp, #52]	; 0x34
 800765c:	4699      	mov	r9, r3
 800765e:	9d05      	ldr	r5, [sp, #20]
 8007660:	4647      	mov	r7, r8
 8007662:	f000 80be 	beq.w	80077e2 <_dtoa_r+0xc12>
 8007666:	9b08      	ldr	r3, [sp, #32]
 8007668:	2b00      	cmp	r3, #0
 800766a:	dd02      	ble.n	8007672 <_dtoa_r+0xaa2>
 800766c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766e:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007672:	f807 9b01 	strb.w	r9, [r7], #1
 8007676:	46a0      	mov	r8, r4
 8007678:	e583      	b.n	8007182 <_dtoa_r+0x5b2>
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	220a      	movs	r2, #10
 8007680:	2300      	movs	r3, #0
 8007682:	f000 fe85 	bl	8008390 <__multadd>
 8007686:	f109 0901 	add.w	r9, r9, #1
 800768a:	4606      	mov	r6, r0
 800768c:	4604      	mov	r4, r0
 800768e:	e5ce      	b.n	800722e <_dtoa_r+0x65e>
 8007690:	4630      	mov	r0, r6
 8007692:	f7fb ff1f 	bl	80034d4 <__aeabi_i2d>
 8007696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800769a:	f7fb ff81 	bl	80035a0 <__aeabi_dmul>
 800769e:	2300      	movs	r3, #0
 80076a0:	2200      	movs	r2, #0
 80076a2:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80076a6:	f7fb fdc9 	bl	800323c <__adddf3>
 80076aa:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80076ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076b0:	4604      	mov	r4, r0
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d178      	bne.n	80077a8 <_dtoa_r+0xbd8>
 80076b6:	2300      	movs	r3, #0
 80076b8:	2200      	movs	r2, #0
 80076ba:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80076be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076c2:	f7fb fdb9 	bl	8003238 <__aeabi_dsub>
 80076c6:	4622      	mov	r2, r4
 80076c8:	462b      	mov	r3, r5
 80076ca:	4682      	mov	sl, r0
 80076cc:	468b      	mov	fp, r1
 80076ce:	f7fc f9f7 	bl	8003ac0 <__aeabi_dcmpgt>
 80076d2:	4606      	mov	r6, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f040 80df 	bne.w	8007898 <_dtoa_r+0xcc8>
 80076da:	4622      	mov	r2, r4
 80076dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076e0:	4650      	mov	r0, sl
 80076e2:	4659      	mov	r1, fp
 80076e4:	f7fc f9ce 	bl	8003a84 <__aeabi_dcmplt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f000 8082 	beq.w	80077f2 <_dtoa_r+0xc22>
 80076ee:	4635      	mov	r5, r6
 80076f0:	46b0      	mov	r8, r6
 80076f2:	e75e      	b.n	80075b2 <_dtoa_r+0x9e2>
 80076f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076f6:	4629      	mov	r1, r5
 80076f8:	f001 f87c 	bl	80087f4 <__mcmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f6bf acee 	bge.w	80070de <_dtoa_r+0x50e>
 8007702:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007704:	9803      	ldr	r0, [sp, #12]
 8007706:	220a      	movs	r2, #10
 8007708:	2300      	movs	r3, #0
 800770a:	f000 fe41 	bl	8008390 <__multadd>
 800770e:	900d      	str	r0, [sp, #52]	; 0x34
 8007710:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007712:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007714:	3801      	subs	r0, #1
 8007716:	900b      	str	r0, [sp, #44]	; 0x2c
 8007718:	2900      	cmp	r1, #0
 800771a:	f040 816e 	bne.w	80079fa <_dtoa_r+0xe2a>
 800771e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007720:	930c      	str	r3, [sp, #48]	; 0x30
 8007722:	e4dc      	b.n	80070de <_dtoa_r+0x50e>
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800772a:	6918      	ldr	r0, [r3, #16]
 800772c:	f000 febe 	bl	80084ac <__hi0bits>
 8007730:	f1c0 0320 	rsb	r3, r0, #32
 8007734:	e4ad      	b.n	8007092 <_dtoa_r+0x4c2>
 8007736:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8007738:	2902      	cmp	r1, #2
 800773a:	f77f acd4 	ble.w	80070e6 <_dtoa_r+0x516>
 800773e:	2800      	cmp	r0, #0
 8007740:	f47f af37 	bne.w	80075b2 <_dtoa_r+0x9e2>
 8007744:	2205      	movs	r2, #5
 8007746:	4603      	mov	r3, r0
 8007748:	4629      	mov	r1, r5
 800774a:	9803      	ldr	r0, [sp, #12]
 800774c:	f000 fe20 	bl	8008390 <__multadd>
 8007750:	4605      	mov	r5, r0
 8007752:	4629      	mov	r1, r5
 8007754:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007756:	f001 f84d 	bl	80087f4 <__mcmp>
 800775a:	2800      	cmp	r0, #0
 800775c:	f77f af29 	ble.w	80075b2 <_dtoa_r+0x9e2>
 8007760:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007762:	9f04      	ldr	r7, [sp, #16]
 8007764:	2331      	movs	r3, #49	; 0x31
 8007766:	3401      	adds	r4, #1
 8007768:	f807 3b01 	strb.w	r3, [r7], #1
 800776c:	940b      	str	r4, [sp, #44]	; 0x2c
 800776e:	2600      	movs	r6, #0
 8007770:	e507      	b.n	8007182 <_dtoa_r+0x5b2>
 8007772:	9803      	ldr	r0, [sp, #12]
 8007774:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007778:	f000 ff90 	bl	800869c <__pow5mult>
 800777c:	900d      	str	r0, [sp, #52]	; 0x34
 800777e:	e470      	b.n	8007062 <_dtoa_r+0x492>
 8007780:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007782:	950e      	str	r5, [sp, #56]	; 0x38
 8007784:	1b2b      	subs	r3, r5, r4
 8007786:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007788:	2500      	movs	r5, #0
 800778a:	18e4      	adds	r4, r4, r3
 800778c:	9412      	str	r4, [sp, #72]	; 0x48
 800778e:	e42d      	b.n	8006fec <_dtoa_r+0x41c>
 8007790:	2602      	movs	r6, #2
 8007792:	e5fe      	b.n	8007392 <_dtoa_r+0x7c2>
 8007794:	2401      	movs	r4, #1
 8007796:	9413      	str	r4, [sp, #76]	; 0x4c
 8007798:	940c      	str	r4, [sp, #48]	; 0x30
 800779a:	9429      	str	r4, [sp, #164]	; 0xa4
 800779c:	9803      	ldr	r0, [sp, #12]
 800779e:	2100      	movs	r1, #0
 80077a0:	6441      	str	r1, [r0, #68]	; 0x44
 80077a2:	e5c9      	b.n	8007338 <_dtoa_r+0x768>
 80077a4:	950c      	str	r5, [sp, #48]	; 0x30
 80077a6:	e7f9      	b.n	800779c <_dtoa_r+0xbcc>
 80077a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077aa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80077ae:	921a      	str	r2, [sp, #104]	; 0x68
 80077b0:	e63f      	b.n	8007432 <_dtoa_r+0x862>
 80077b2:	f1bb 0f00 	cmp.w	fp, #0
 80077b6:	970d      	str	r7, [sp, #52]	; 0x34
 80077b8:	4699      	mov	r9, r3
 80077ba:	9d05      	ldr	r5, [sp, #20]
 80077bc:	4647      	mov	r7, r8
 80077be:	f77f af58 	ble.w	8007672 <_dtoa_r+0xaa2>
 80077c2:	2201      	movs	r2, #1
 80077c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077c6:	9803      	ldr	r0, [sp, #12]
 80077c8:	f000 ffb4 	bl	8008734 <__lshift>
 80077cc:	4629      	mov	r1, r5
 80077ce:	900d      	str	r0, [sp, #52]	; 0x34
 80077d0:	f001 f810 	bl	80087f4 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f340 8109 	ble.w	80079ec <_dtoa_r+0xe1c>
 80077da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077de:	f47f af45 	bne.w	800766c <_dtoa_r+0xa9c>
 80077e2:	2339      	movs	r3, #57	; 0x39
 80077e4:	46ba      	mov	sl, r7
 80077e6:	f80a 3b01 	strb.w	r3, [sl], #1
 80077ea:	46a0      	mov	r8, r4
 80077ec:	e4b6      	b.n	800715c <_dtoa_r+0x58c>
 80077ee:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80077f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077f6:	4682      	mov	sl, r0
 80077f8:	468b      	mov	fp, r1
 80077fa:	f7ff bb39 	b.w	8006e70 <_dtoa_r+0x2a0>
 80077fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007800:	4244      	negs	r4, r0
 8007802:	2c00      	cmp	r4, #0
 8007804:	f000 80ab 	beq.w	800795e <_dtoa_r+0xd8e>
 8007808:	4b87      	ldr	r3, [pc, #540]	; (8007a28 <_dtoa_r+0xe58>)
 800780a:	f004 020f 	and.w	r2, r4, #15
 800780e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7fb fec1 	bl	80035a0 <__aeabi_dmul>
 800781e:	1124      	asrs	r4, r4, #4
 8007820:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007824:	f000 809b 	beq.w	800795e <_dtoa_r+0xd8e>
 8007828:	4d80      	ldr	r5, [pc, #512]	; (8007a2c <_dtoa_r+0xe5c>)
 800782a:	2602      	movs	r6, #2
 800782c:	07e2      	lsls	r2, r4, #31
 800782e:	d504      	bpl.n	800783a <_dtoa_r+0xc6a>
 8007830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007834:	f7fb feb4 	bl	80035a0 <__aeabi_dmul>
 8007838:	3601      	adds	r6, #1
 800783a:	3508      	adds	r5, #8
 800783c:	1064      	asrs	r4, r4, #1
 800783e:	d1f5      	bne.n	800782c <_dtoa_r+0xc5c>
 8007840:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007844:	e5bd      	b.n	80073c2 <_dtoa_r+0x7f2>
 8007846:	3301      	adds	r3, #1
 8007848:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800784c:	e499      	b.n	8007182 <_dtoa_r+0x5b2>
 800784e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007852:	9803      	ldr	r0, [sp, #12]
 8007854:	f000 fd6c 	bl	8008330 <_Balloc>
 8007858:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800785c:	4604      	mov	r4, r0
 800785e:	3202      	adds	r2, #2
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	f108 010c 	add.w	r1, r8, #12
 8007866:	f100 000c 	add.w	r0, r0, #12
 800786a:	f000 fd1b 	bl	80082a4 <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	9803      	ldr	r0, [sp, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f000 ff5e 	bl	8008734 <__lshift>
 8007878:	4604      	mov	r4, r0
 800787a:	e4cc      	b.n	8007216 <_dtoa_r+0x646>
 800787c:	2b39      	cmp	r3, #57	; 0x39
 800787e:	970d      	str	r7, [sp, #52]	; 0x34
 8007880:	4699      	mov	r9, r3
 8007882:	9d05      	ldr	r5, [sp, #20]
 8007884:	4647      	mov	r7, r8
 8007886:	d0ac      	beq.n	80077e2 <_dtoa_r+0xc12>
 8007888:	f103 0901 	add.w	r9, r3, #1
 800788c:	e6f1      	b.n	8007672 <_dtoa_r+0xaa2>
 800788e:	4699      	mov	r9, r3
 8007890:	970d      	str	r7, [sp, #52]	; 0x34
 8007892:	9d05      	ldr	r5, [sp, #20]
 8007894:	46a0      	mov	r8, r4
 8007896:	e453      	b.n	8007140 <_dtoa_r+0x570>
 8007898:	2500      	movs	r5, #0
 800789a:	46a8      	mov	r8, r5
 800789c:	e760      	b.n	8007760 <_dtoa_r+0xb90>
 800789e:	4962      	ldr	r1, [pc, #392]	; (8007a28 <_dtoa_r+0xe58>)
 80078a0:	f108 3bff 	add.w	fp, r8, #4294967295
 80078a4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80078a8:	4622      	mov	r2, r4
 80078aa:	462b      	mov	r3, r5
 80078ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b0:	f7fb fe76 	bl	80035a0 <__aeabi_dmul>
 80078b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80078b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078bc:	f7fc f90a 	bl	8003ad4 <__aeabi_d2iz>
 80078c0:	4604      	mov	r4, r0
 80078c2:	f7fb fe07 	bl	80034d4 <__aeabi_i2d>
 80078c6:	460b      	mov	r3, r1
 80078c8:	4602      	mov	r2, r0
 80078ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ce:	f7fb fcb3 	bl	8003238 <__aeabi_dsub>
 80078d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80078d6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80078da:	f80a 3b01 	strb.w	r3, [sl], #1
 80078de:	f1b8 0f01 	cmp.w	r8, #1
 80078e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078e6:	4657      	mov	r7, sl
 80078e8:	d020      	beq.n	800792c <_dtoa_r+0xd5c>
 80078ea:	9c04      	ldr	r4, [sp, #16]
 80078ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078f0:	1e63      	subs	r3, r4, #1
 80078f2:	4498      	add	r8, r3
 80078f4:	2300      	movs	r3, #0
 80078f6:	2200      	movs	r2, #0
 80078f8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80078fc:	f7fb fe50 	bl	80035a0 <__aeabi_dmul>
 8007900:	460f      	mov	r7, r1
 8007902:	4606      	mov	r6, r0
 8007904:	f7fc f8e6 	bl	8003ad4 <__aeabi_d2iz>
 8007908:	4605      	mov	r5, r0
 800790a:	f7fb fde3 	bl	80034d4 <__aeabi_i2d>
 800790e:	3530      	adds	r5, #48	; 0x30
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	f7fb fc8e 	bl	8003238 <__aeabi_dsub>
 800791c:	f804 5f01 	strb.w	r5, [r4, #1]!
 8007920:	4544      	cmp	r4, r8
 8007922:	d1e7      	bne.n	80078f4 <_dtoa_r+0xd24>
 8007924:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007928:	eb0a 070b 	add.w	r7, sl, fp
 800792c:	2300      	movs	r3, #0
 800792e:	2200      	movs	r2, #0
 8007930:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8007934:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007938:	f7fb fc80 	bl	800323c <__adddf3>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007944:	f7fc f8bc 	bl	8003ac0 <__aeabi_dcmpgt>
 8007948:	b1e0      	cbz	r0, 8007984 <_dtoa_r+0xdb4>
 800794a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800794c:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 8007950:	940b      	str	r4, [sp, #44]	; 0x2c
 8007952:	e651      	b.n	80075f8 <_dtoa_r+0xa28>
 8007954:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007956:	2300      	movs	r3, #0
 8007958:	1b04      	subs	r4, r0, r4
 800795a:	f7ff bb4d 	b.w	8006ff8 <_dtoa_r+0x428>
 800795e:	2602      	movs	r6, #2
 8007960:	e52f      	b.n	80073c2 <_dtoa_r+0x7f2>
 8007962:	4656      	mov	r6, sl
 8007964:	f7ff bb90 	b.w	8007088 <_dtoa_r+0x4b8>
 8007968:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800796a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800796c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007970:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007972:	f7ff bb41 	b.w	8006ff8 <_dtoa_r+0x428>
 8007976:	1c6b      	adds	r3, r5, #1
 8007978:	b2db      	uxtb	r3, r3
 800797a:	46ba      	mov	sl, r7
 800797c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8007980:	f7ff bb12 	b.w	8006fa8 <_dtoa_r+0x3d8>
 8007984:	2100      	movs	r1, #0
 8007986:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800798a:	2000      	movs	r0, #0
 800798c:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8007990:	f7fb fc52 	bl	8003238 <__aeabi_dsub>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800799c:	f7fc f872 	bl	8003a84 <__aeabi_dcmplt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f43f af26 	beq.w	80077f2 <_dtoa_r+0xc22>
 80079a6:	463b      	mov	r3, r7
 80079a8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80079ac:	461f      	mov	r7, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	2a30      	cmp	r2, #48	; 0x30
 80079b2:	d0f9      	beq.n	80079a8 <_dtoa_r+0xdd8>
 80079b4:	e5d3      	b.n	800755e <_dtoa_r+0x98e>
 80079b6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 80079ba:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80079bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80079be:	e61b      	b.n	80075f8 <_dtoa_r+0xa28>
 80079c0:	461e      	mov	r6, r3
 80079c2:	f7ff bb61 	b.w	8007088 <_dtoa_r+0x4b8>
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7fb fd84 	bl	80034d4 <__aeabi_i2d>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079d4:	f7fb fde4 	bl	80035a0 <__aeabi_dmul>
 80079d8:	2300      	movs	r3, #0
 80079da:	2200      	movs	r2, #0
 80079dc:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80079e0:	f7fb fc2c 	bl	800323c <__adddf3>
 80079e4:	4604      	mov	r4, r0
 80079e6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80079ea:	e664      	b.n	80076b6 <_dtoa_r+0xae6>
 80079ec:	f47f ae41 	bne.w	8007672 <_dtoa_r+0xaa2>
 80079f0:	f019 0f01 	tst.w	r9, #1
 80079f4:	f43f ae3d 	beq.w	8007672 <_dtoa_r+0xaa2>
 80079f8:	e6ef      	b.n	80077da <_dtoa_r+0xc0a>
 80079fa:	4641      	mov	r1, r8
 80079fc:	220a      	movs	r2, #10
 80079fe:	9803      	ldr	r0, [sp, #12]
 8007a00:	2300      	movs	r3, #0
 8007a02:	f000 fcc5 	bl	8008390 <__multadd>
 8007a06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a08:	4680      	mov	r8, r0
 8007a0a:	920c      	str	r2, [sp, #48]	; 0x30
 8007a0c:	f7ff bb67 	b.w	80070de <_dtoa_r+0x50e>
 8007a10:	2500      	movs	r5, #0
 8007a12:	46a8      	mov	r8, r5
 8007a14:	e5cd      	b.n	80075b2 <_dtoa_r+0x9e2>
 8007a16:	f43f ab4d 	beq.w	80070b4 <_dtoa_r+0x4e4>
 8007a1a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8007a1e:	f7ff bbdd 	b.w	80071dc <_dtoa_r+0x60c>
 8007a22:	2601      	movs	r6, #1
 8007a24:	f7ff b9b2 	b.w	8006d8c <_dtoa_r+0x1bc>
 8007a28:	0800a2e8 	.word	0x0800a2e8
 8007a2c:	0800a3b0 	.word	0x0800a3b0

08007a30 <_malloc_trim_r>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	4d24      	ldr	r5, [pc, #144]	; (8007ac4 <_malloc_trim_r+0x94>)
 8007a34:	4604      	mov	r4, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	f000 fc76 	bl	8008328 <__malloc_lock>
 8007a3c:	68ab      	ldr	r3, [r5, #8]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	685e      	ldr	r6, [r3, #4]
 8007a42:	f026 0603 	bic.w	r6, r6, #3
 8007a46:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8007a4a:	330f      	adds	r3, #15
 8007a4c:	1bdf      	subs	r7, r3, r7
 8007a4e:	0b3f      	lsrs	r7, r7, #12
 8007a50:	3f01      	subs	r7, #1
 8007a52:	033f      	lsls	r7, r7, #12
 8007a54:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8007a58:	db1c      	blt.n	8007a94 <_malloc_trim_r+0x64>
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	f001 f904 	bl	8008c68 <_sbrk_r>
 8007a60:	68ab      	ldr	r3, [r5, #8]
 8007a62:	199b      	adds	r3, r3, r6
 8007a64:	4298      	cmp	r0, r3
 8007a66:	d019      	beq.n	8007a9c <_malloc_trim_r+0x6c>
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fc5f 	bl	800832c <__malloc_unlock>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a72:	2100      	movs	r1, #0
 8007a74:	4620      	mov	r0, r4
 8007a76:	f001 f8f7 	bl	8008c68 <_sbrk_r>
 8007a7a:	68ab      	ldr	r3, [r5, #8]
 8007a7c:	1ac2      	subs	r2, r0, r3
 8007a7e:	2a0f      	cmp	r2, #15
 8007a80:	dd07      	ble.n	8007a92 <_malloc_trim_r+0x62>
 8007a82:	4911      	ldr	r1, [pc, #68]	; (8007ac8 <_malloc_trim_r+0x98>)
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	6809      	ldr	r1, [r1, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
 8007a8c:	1a40      	subs	r0, r0, r1
 8007a8e:	490f      	ldr	r1, [pc, #60]	; (8007acc <_malloc_trim_r+0x9c>)
 8007a90:	6008      	str	r0, [r1, #0]
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fc4a 	bl	800832c <__malloc_unlock>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a9c:	4279      	negs	r1, r7
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f001 f8e2 	bl	8008c68 <_sbrk_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d0e4      	beq.n	8007a72 <_malloc_trim_r+0x42>
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <_malloc_trim_r+0x9c>)
 8007aaa:	68aa      	ldr	r2, [r5, #8]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	1bf6      	subs	r6, r6, r7
 8007ab0:	f046 0601 	orr.w	r6, r6, #1
 8007ab4:	1bcf      	subs	r7, r1, r7
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	6056      	str	r6, [r2, #4]
 8007aba:	601f      	str	r7, [r3, #0]
 8007abc:	f000 fc36 	bl	800832c <__malloc_unlock>
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	20000548 	.word	0x20000548
 8007ac8:	20000954 	.word	0x20000954
 8007acc:	20000978 	.word	0x20000978

08007ad0 <_free_r>:
 8007ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad4:	460d      	mov	r5, r1
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d058      	beq.n	8007b8e <_free_r+0xbe>
 8007adc:	f000 fc24 	bl	8008328 <__malloc_lock>
 8007ae0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8007ae4:	4e5a      	ldr	r6, [pc, #360]	; (8007c50 <_free_r+0x180>)
 8007ae6:	f1a5 0108 	sub.w	r1, r5, #8
 8007aea:	f020 0301 	bic.w	r3, r0, #1
 8007aee:	18ca      	adds	r2, r1, r3
 8007af0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8007af4:	6857      	ldr	r7, [r2, #4]
 8007af6:	4594      	cmp	ip, r2
 8007af8:	f027 0703 	bic.w	r7, r7, #3
 8007afc:	d065      	beq.n	8007bca <_free_r+0xfa>
 8007afe:	f010 0001 	ands.w	r0, r0, #1
 8007b02:	6057      	str	r7, [r2, #4]
 8007b04:	d032      	beq.n	8007b6c <_free_r+0x9c>
 8007b06:	2000      	movs	r0, #0
 8007b08:	19d5      	adds	r5, r2, r7
 8007b0a:	686d      	ldr	r5, [r5, #4]
 8007b0c:	f015 0f01 	tst.w	r5, #1
 8007b10:	d106      	bne.n	8007b20 <_free_r+0x50>
 8007b12:	19db      	adds	r3, r3, r7
 8007b14:	6895      	ldr	r5, [r2, #8]
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d04b      	beq.n	8007bb2 <_free_r+0xe2>
 8007b1a:	68d2      	ldr	r2, [r2, #12]
 8007b1c:	60ea      	str	r2, [r5, #12]
 8007b1e:	6095      	str	r5, [r2, #8]
 8007b20:	f043 0201 	orr.w	r2, r3, #1
 8007b24:	604a      	str	r2, [r1, #4]
 8007b26:	50cb      	str	r3, [r1, r3]
 8007b28:	b9d8      	cbnz	r0, 8007b62 <_free_r+0x92>
 8007b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2e:	d330      	bcc.n	8007b92 <_free_r+0xc2>
 8007b30:	0a5a      	lsrs	r2, r3, #9
 8007b32:	2a04      	cmp	r2, #4
 8007b34:	d864      	bhi.n	8007c00 <_free_r+0x130>
 8007b36:	099d      	lsrs	r5, r3, #6
 8007b38:	3538      	adds	r5, #56	; 0x38
 8007b3a:	00e8      	lsls	r0, r5, #3
 8007b3c:	1986      	adds	r6, r0, r6
 8007b3e:	68b2      	ldr	r2, [r6, #8]
 8007b40:	4843      	ldr	r0, [pc, #268]	; (8007c50 <_free_r+0x180>)
 8007b42:	42b2      	cmp	r2, r6
 8007b44:	d103      	bne.n	8007b4e <_free_r+0x7e>
 8007b46:	e061      	b.n	8007c0c <_free_r+0x13c>
 8007b48:	6892      	ldr	r2, [r2, #8]
 8007b4a:	4296      	cmp	r6, r2
 8007b4c:	d004      	beq.n	8007b58 <_free_r+0x88>
 8007b4e:	6850      	ldr	r0, [r2, #4]
 8007b50:	f020 0003 	bic.w	r0, r0, #3
 8007b54:	4283      	cmp	r3, r0
 8007b56:	d3f7      	bcc.n	8007b48 <_free_r+0x78>
 8007b58:	68d3      	ldr	r3, [r2, #12]
 8007b5a:	60cb      	str	r3, [r1, #12]
 8007b5c:	608a      	str	r2, [r1, #8]
 8007b5e:	60d1      	str	r1, [r2, #12]
 8007b60:	6099      	str	r1, [r3, #8]
 8007b62:	4620      	mov	r0, r4
 8007b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	f000 bbe0 	b.w	800832c <__malloc_unlock>
 8007b6c:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8007b70:	f106 0808 	add.w	r8, r6, #8
 8007b74:	ebcc 0101 	rsb	r1, ip, r1
 8007b78:	688d      	ldr	r5, [r1, #8]
 8007b7a:	4463      	add	r3, ip
 8007b7c:	4545      	cmp	r5, r8
 8007b7e:	d03d      	beq.n	8007bfc <_free_r+0x12c>
 8007b80:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007b84:	f8c5 c00c 	str.w	ip, [r5, #12]
 8007b88:	f8cc 5008 	str.w	r5, [ip, #8]
 8007b8c:	e7bc      	b.n	8007b08 <_free_r+0x38>
 8007b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b92:	08db      	lsrs	r3, r3, #3
 8007b94:	109a      	asrs	r2, r3, #2
 8007b96:	2001      	movs	r0, #1
 8007b98:	fa00 f002 	lsl.w	r0, r0, r2
 8007b9c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8007ba0:	6875      	ldr	r5, [r6, #4]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	4328      	orrs	r0, r5
 8007ba6:	60cb      	str	r3, [r1, #12]
 8007ba8:	608a      	str	r2, [r1, #8]
 8007baa:	6070      	str	r0, [r6, #4]
 8007bac:	6099      	str	r1, [r3, #8]
 8007bae:	60d1      	str	r1, [r2, #12]
 8007bb0:	e7d7      	b.n	8007b62 <_free_r+0x92>
 8007bb2:	4f28      	ldr	r7, [pc, #160]	; (8007c54 <_free_r+0x184>)
 8007bb4:	42bd      	cmp	r5, r7
 8007bb6:	d1b0      	bne.n	8007b1a <_free_r+0x4a>
 8007bb8:	f043 0201 	orr.w	r2, r3, #1
 8007bbc:	6171      	str	r1, [r6, #20]
 8007bbe:	6131      	str	r1, [r6, #16]
 8007bc0:	60cd      	str	r5, [r1, #12]
 8007bc2:	608d      	str	r5, [r1, #8]
 8007bc4:	604a      	str	r2, [r1, #4]
 8007bc6:	50cb      	str	r3, [r1, r3]
 8007bc8:	e7cb      	b.n	8007b62 <_free_r+0x92>
 8007bca:	07c2      	lsls	r2, r0, #31
 8007bcc:	443b      	add	r3, r7
 8007bce:	d407      	bmi.n	8007be0 <_free_r+0x110>
 8007bd0:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8007bd4:	1b49      	subs	r1, r1, r5
 8007bd6:	68ca      	ldr	r2, [r1, #12]
 8007bd8:	6888      	ldr	r0, [r1, #8]
 8007bda:	195b      	adds	r3, r3, r5
 8007bdc:	60c2      	str	r2, [r0, #12]
 8007bde:	6090      	str	r0, [r2, #8]
 8007be0:	4a1d      	ldr	r2, [pc, #116]	; (8007c58 <_free_r+0x188>)
 8007be2:	f043 0001 	orr.w	r0, r3, #1
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	6048      	str	r0, [r1, #4]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	60b1      	str	r1, [r6, #8]
 8007bee:	d3b8      	bcc.n	8007b62 <_free_r+0x92>
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <_free_r+0x18c>)
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	f7ff ff1b 	bl	8007a30 <_malloc_trim_r>
 8007bfa:	e7b2      	b.n	8007b62 <_free_r+0x92>
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	e783      	b.n	8007b08 <_free_r+0x38>
 8007c00:	2a14      	cmp	r2, #20
 8007c02:	d80c      	bhi.n	8007c1e <_free_r+0x14e>
 8007c04:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8007c08:	00e8      	lsls	r0, r5, #3
 8007c0a:	e797      	b.n	8007b3c <_free_r+0x6c>
 8007c0c:	10ad      	asrs	r5, r5, #2
 8007c0e:	2601      	movs	r6, #1
 8007c10:	fa06 f605 	lsl.w	r6, r6, r5
 8007c14:	6845      	ldr	r5, [r0, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	4335      	orrs	r5, r6
 8007c1a:	6045      	str	r5, [r0, #4]
 8007c1c:	e79d      	b.n	8007b5a <_free_r+0x8a>
 8007c1e:	2a54      	cmp	r2, #84	; 0x54
 8007c20:	d803      	bhi.n	8007c2a <_free_r+0x15a>
 8007c22:	0b1d      	lsrs	r5, r3, #12
 8007c24:	356e      	adds	r5, #110	; 0x6e
 8007c26:	00e8      	lsls	r0, r5, #3
 8007c28:	e788      	b.n	8007b3c <_free_r+0x6c>
 8007c2a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007c2e:	d803      	bhi.n	8007c38 <_free_r+0x168>
 8007c30:	0bdd      	lsrs	r5, r3, #15
 8007c32:	3577      	adds	r5, #119	; 0x77
 8007c34:	00e8      	lsls	r0, r5, #3
 8007c36:	e781      	b.n	8007b3c <_free_r+0x6c>
 8007c38:	f240 5054 	movw	r0, #1364	; 0x554
 8007c3c:	4282      	cmp	r2, r0
 8007c3e:	d803      	bhi.n	8007c48 <_free_r+0x178>
 8007c40:	0c9d      	lsrs	r5, r3, #18
 8007c42:	357c      	adds	r5, #124	; 0x7c
 8007c44:	00e8      	lsls	r0, r5, #3
 8007c46:	e779      	b.n	8007b3c <_free_r+0x6c>
 8007c48:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8007c4c:	257e      	movs	r5, #126	; 0x7e
 8007c4e:	e775      	b.n	8007b3c <_free_r+0x6c>
 8007c50:	20000548 	.word	0x20000548
 8007c54:	20000550 	.word	0x20000550
 8007c58:	20000950 	.word	0x20000950
 8007c5c:	20000974 	.word	0x20000974

08007c60 <_setlocale_r>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	4614      	mov	r4, r2
 8007c64:	b122      	cbz	r2, 8007c70 <_setlocale_r+0x10>
 8007c66:	4610      	mov	r0, r2
 8007c68:	490b      	ldr	r1, [pc, #44]	; (8007c98 <_setlocale_r+0x38>)
 8007c6a:	f001 f80f 	bl	8008c8c <strcmp>
 8007c6e:	b908      	cbnz	r0, 8007c74 <_setlocale_r+0x14>
 8007c70:	480a      	ldr	r0, [pc, #40]	; (8007c9c <_setlocale_r+0x3c>)
 8007c72:	bd10      	pop	{r4, pc}
 8007c74:	4620      	mov	r0, r4
 8007c76:	4909      	ldr	r1, [pc, #36]	; (8007c9c <_setlocale_r+0x3c>)
 8007c78:	f001 f808 	bl	8008c8c <strcmp>
 8007c7c:	b908      	cbnz	r0, 8007c82 <_setlocale_r+0x22>
 8007c7e:	4807      	ldr	r0, [pc, #28]	; (8007c9c <_setlocale_r+0x3c>)
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	4620      	mov	r0, r4
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <_setlocale_r+0x40>)
 8007c86:	f001 f801 	bl	8008c8c <strcmp>
 8007c8a:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <_setlocale_r+0x3c>)
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	bf0c      	ite	eq
 8007c90:	4618      	moveq	r0, r3
 8007c92:	2000      	movne	r0, #0
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	bf00      	nop
 8007c98:	0800a2d8 	.word	0x0800a2d8
 8007c9c:	0800a2d0 	.word	0x0800a2d0
 8007ca0:	0800a28c 	.word	0x0800a28c

08007ca4 <__locale_charset>:
 8007ca4:	f240 5024 	movw	r0, #1316	; 0x524
 8007ca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <__locale_mb_cur_max>:
 8007cb0:	f240 5344 	movw	r3, #1348	; 0x544
 8007cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	4770      	bx	lr

08007cbc <__locale_msgcharset>:
 8007cbc:	f240 40cc 	movw	r0, #1228	; 0x4cc
 8007cc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop

08007cc8 <__locale_cjk_lang>:
 8007cc8:	2000      	movs	r0, #0
 8007cca:	4770      	bx	lr

08007ccc <_localeconv_r>:
 8007ccc:	f240 40ec 	movw	r0, #1260	; 0x4ec
 8007cd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <setlocale>:
 8007cd8:	f240 43c8 	movw	r3, #1224	; 0x4c8
 8007cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff bfba 	b.w	8007c60 <_setlocale_r>

08007cec <localeconv>:
 8007cec:	f240 40ec 	movw	r0, #1260	; 0x4ec
 8007cf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop

08007cf8 <_malloc_r>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	f101 040b 	add.w	r4, r1, #11
 8007d00:	2c16      	cmp	r4, #22
 8007d02:	b083      	sub	sp, #12
 8007d04:	4605      	mov	r5, r0
 8007d06:	d927      	bls.n	8007d58 <_malloc_r+0x60>
 8007d08:	f034 0407 	bics.w	r4, r4, #7
 8007d0c:	d427      	bmi.n	8007d5e <_malloc_r+0x66>
 8007d0e:	42a1      	cmp	r1, r4
 8007d10:	d825      	bhi.n	8007d5e <_malloc_r+0x66>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fb08 	bl	8008328 <__malloc_lock>
 8007d18:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007d1c:	d223      	bcs.n	8007d66 <_malloc_r+0x6e>
 8007d1e:	4eb1      	ldr	r6, [pc, #708]	; (8007fe4 <_malloc_r+0x2ec>)
 8007d20:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8007d24:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8007d28:	68df      	ldr	r7, [r3, #12]
 8007d2a:	429f      	cmp	r7, r3
 8007d2c:	f000 81d5 	beq.w	80080da <_malloc_r+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	6858      	ldr	r0, [r3, #4]
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	f040 0001 	orr.w	r0, r0, #1
 8007d42:	6058      	str	r0, [r3, #4]
 8007d44:	60ca      	str	r2, [r1, #12]
 8007d46:	6091      	str	r1, [r2, #8]
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f000 faef 	bl	800832c <__malloc_unlock>
 8007d4e:	3708      	adds	r7, #8
 8007d50:	4638      	mov	r0, r7
 8007d52:	b003      	add	sp, #12
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	2410      	movs	r4, #16
 8007d5a:	42a1      	cmp	r1, r4
 8007d5c:	d9d9      	bls.n	8007d12 <_malloc_r+0x1a>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	2700      	movs	r7, #0
 8007d64:	e7f4      	b.n	8007d50 <_malloc_r+0x58>
 8007d66:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8007d6a:	f000 8088 	beq.w	8007e7e <_malloc_r+0x186>
 8007d6e:	f1be 0f04 	cmp.w	lr, #4
 8007d72:	f200 8150 	bhi.w	8008016 <_malloc_r+0x31e>
 8007d76:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 8007d7a:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
 8007d7e:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8007d82:	4e98      	ldr	r6, [pc, #608]	; (8007fe4 <_malloc_r+0x2ec>)
 8007d84:	1871      	adds	r1, r6, r1
 8007d86:	68cf      	ldr	r7, [r1, #12]
 8007d88:	42b9      	cmp	r1, r7
 8007d8a:	d105      	bne.n	8007d98 <_malloc_r+0xa0>
 8007d8c:	e00c      	b.n	8007da8 <_malloc_r+0xb0>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da7a      	bge.n	8007e88 <_malloc_r+0x190>
 8007d92:	68ff      	ldr	r7, [r7, #12]
 8007d94:	42b9      	cmp	r1, r7
 8007d96:	d007      	beq.n	8007da8 <_malloc_r+0xb0>
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f022 0203 	bic.w	r2, r2, #3
 8007d9e:	1b13      	subs	r3, r2, r4
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	ddf4      	ble.n	8007d8e <_malloc_r+0x96>
 8007da4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007da8:	f10e 0e01 	add.w	lr, lr, #1
 8007dac:	4a8d      	ldr	r2, [pc, #564]	; (8007fe4 <_malloc_r+0x2ec>)
 8007dae:	6937      	ldr	r7, [r6, #16]
 8007db0:	f102 0c08 	add.w	ip, r2, #8
 8007db4:	4567      	cmp	r7, ip
 8007db6:	f000 816e 	beq.w	8008096 <_malloc_r+0x39e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	1b19      	subs	r1, r3, r4
 8007dc2:	290f      	cmp	r1, #15
 8007dc4:	f300 8154 	bgt.w	8008070 <_malloc_r+0x378>
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	f8c2 c014 	str.w	ip, [r2, #20]
 8007dce:	f8c2 c010 	str.w	ip, [r2, #16]
 8007dd2:	da67      	bge.n	8007ea4 <_malloc_r+0x1ac>
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd8:	f080 812b 	bcs.w	8008032 <_malloc_r+0x33a>
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	1099      	asrs	r1, r3, #2
 8007de0:	f04f 0801 	mov.w	r8, #1
 8007de4:	fa08 f801 	lsl.w	r8, r8, r1
 8007de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dec:	6851      	ldr	r1, [r2, #4]
 8007dee:	6898      	ldr	r0, [r3, #8]
 8007df0:	ea48 0101 	orr.w	r1, r8, r1
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	60b8      	str	r0, [r7, #8]
 8007df8:	6051      	str	r1, [r2, #4]
 8007dfa:	609f      	str	r7, [r3, #8]
 8007dfc:	60c7      	str	r7, [r0, #12]
 8007dfe:	2001      	movs	r0, #1
 8007e00:	ea4f 03ae 	mov.w	r3, lr, asr #2
 8007e04:	fa00 f003 	lsl.w	r0, r0, r3
 8007e08:	4288      	cmp	r0, r1
 8007e0a:	d855      	bhi.n	8007eb8 <_malloc_r+0x1c0>
 8007e0c:	4201      	tst	r1, r0
 8007e0e:	d106      	bne.n	8007e1e <_malloc_r+0x126>
 8007e10:	f02e 0e03 	bic.w	lr, lr, #3
 8007e14:	0040      	lsls	r0, r0, #1
 8007e16:	4201      	tst	r1, r0
 8007e18:	f10e 0e04 	add.w	lr, lr, #4
 8007e1c:	d0fa      	beq.n	8007e14 <_malloc_r+0x11c>
 8007e1e:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8007e22:	464f      	mov	r7, r9
 8007e24:	46f0      	mov	r8, lr
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	429f      	cmp	r7, r3
 8007e2a:	d107      	bne.n	8007e3c <_malloc_r+0x144>
 8007e2c:	e135      	b.n	800809a <_malloc_r+0x3a2>
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	f280 815c 	bge.w	80080ec <_malloc_r+0x3f4>
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	429f      	cmp	r7, r3
 8007e38:	f000 812f 	beq.w	800809a <_malloc_r+0x3a2>
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	f021 0103 	bic.w	r1, r1, #3
 8007e42:	1b0a      	subs	r2, r1, r4
 8007e44:	2a0f      	cmp	r2, #15
 8007e46:	ddf2      	ble.n	8007e2e <_malloc_r+0x136>
 8007e48:	461f      	mov	r7, r3
 8007e4a:	68d8      	ldr	r0, [r3, #12]
 8007e4c:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8007e50:	1919      	adds	r1, r3, r4
 8007e52:	f042 0801 	orr.w	r8, r2, #1
 8007e56:	f044 0401 	orr.w	r4, r4, #1
 8007e5a:	f8ce 000c 	str.w	r0, [lr, #12]
 8007e5e:	f8c0 e008 	str.w	lr, [r0, #8]
 8007e62:	605c      	str	r4, [r3, #4]
 8007e64:	6171      	str	r1, [r6, #20]
 8007e66:	6131      	str	r1, [r6, #16]
 8007e68:	f8c1 c00c 	str.w	ip, [r1, #12]
 8007e6c:	f8c1 c008 	str.w	ip, [r1, #8]
 8007e70:	f8c1 8004 	str.w	r8, [r1, #4]
 8007e74:	508a      	str	r2, [r1, r2]
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fa58 	bl	800832c <__malloc_unlock>
 8007e7c:	e768      	b.n	8007d50 <_malloc_r+0x58>
 8007e7e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8007e82:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8007e86:	e77c      	b.n	8007d82 <_malloc_r+0x8a>
 8007e88:	18ba      	adds	r2, r7, r2
 8007e8a:	6850      	ldr	r0, [r2, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	f040 0001 	orr.w	r0, r0, #1
 8007e94:	6050      	str	r0, [r2, #4]
 8007e96:	60cb      	str	r3, [r1, #12]
 8007e98:	6099      	str	r1, [r3, #8]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f000 fa46 	bl	800832c <__malloc_unlock>
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	e755      	b.n	8007d50 <_malloc_r+0x58>
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f042 0201 	orr.w	r2, r2, #1
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	f000 fa3c 	bl	800832c <__malloc_unlock>
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	e74b      	b.n	8007d50 <_malloc_r+0x58>
 8007eb8:	68b7      	ldr	r7, [r6, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f023 0903 	bic.w	r9, r3, #3
 8007ec0:	454c      	cmp	r4, r9
 8007ec2:	d804      	bhi.n	8007ece <_malloc_r+0x1d6>
 8007ec4:	ebc4 0209 	rsb	r2, r4, r9
 8007ec8:	2a0f      	cmp	r2, #15
 8007eca:	f300 8097 	bgt.w	8007ffc <_malloc_r+0x304>
 8007ece:	f8df b124 	ldr.w	fp, [pc, #292]	; 8007ff4 <_malloc_r+0x2fc>
 8007ed2:	4b45      	ldr	r3, [pc, #276]	; (8007fe8 <_malloc_r+0x2f0>)
 8007ed4:	f8db 2000 	ldr.w	r2, [fp]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3201      	adds	r2, #1
 8007edc:	4423      	add	r3, r4
 8007ede:	f000 814f 	beq.w	8008180 <_malloc_r+0x488>
 8007ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee6:	330f      	adds	r3, #15
 8007ee8:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8007eec:	f023 031f 	bic.w	r3, r3, #31
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	f000 feb7 	bl	8008c68 <_sbrk_r>
 8007efa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007efe:	4680      	mov	r8, r0
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	f000 8145 	beq.w	8008190 <_malloc_r+0x498>
 8007f06:	eb07 0109 	add.w	r1, r7, r9
 8007f0a:	4281      	cmp	r1, r0
 8007f0c:	f200 8106 	bhi.w	800811c <_malloc_r+0x424>
 8007f10:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ff8 <_malloc_r+0x300>
 8007f14:	4541      	cmp	r1, r8
 8007f16:	f8da 2000 	ldr.w	r2, [sl]
 8007f1a:	441a      	add	r2, r3
 8007f1c:	f8ca 2000 	str.w	r2, [sl]
 8007f20:	f000 813b 	beq.w	800819a <_malloc_r+0x4a2>
 8007f24:	f8db 0000 	ldr.w	r0, [fp]
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f000 8146 	beq.w	80081ba <_malloc_r+0x4c2>
 8007f2e:	ebc1 0108 	rsb	r1, r1, r8
 8007f32:	1852      	adds	r2, r2, r1
 8007f34:	f8ca 2000 	str.w	r2, [sl]
 8007f38:	f018 0207 	ands.w	r2, r8, #7
 8007f3c:	f000 8101 	beq.w	8008142 <_malloc_r+0x44a>
 8007f40:	f1c2 0108 	rsb	r1, r2, #8
 8007f44:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8007f48:	4488      	add	r8, r1
 8007f4a:	f102 0b08 	add.w	fp, r2, #8
 8007f4e:	4443      	add	r3, r8
 8007f50:	051b      	lsls	r3, r3, #20
 8007f52:	0d1b      	lsrs	r3, r3, #20
 8007f54:	ebc3 0b0b 	rsb	fp, r3, fp
 8007f58:	4628      	mov	r0, r5
 8007f5a:	4659      	mov	r1, fp
 8007f5c:	f000 fe84 	bl	8008c68 <_sbrk_r>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	f000 8136 	beq.w	80081d2 <_malloc_r+0x4da>
 8007f66:	ebc8 0300 	rsb	r3, r8, r0
 8007f6a:	445b      	add	r3, fp
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	f8da 2000 	ldr.w	r2, [sl]
 8007f74:	42b7      	cmp	r7, r6
 8007f76:	445a      	add	r2, fp
 8007f78:	f8c6 8008 	str.w	r8, [r6, #8]
 8007f7c:	f8ca 2000 	str.w	r2, [sl]
 8007f80:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f84:	d015      	beq.n	8007fb2 <_malloc_r+0x2ba>
 8007f86:	f1b9 0f0f 	cmp.w	r9, #15
 8007f8a:	f240 80e8 	bls.w	800815e <_malloc_r+0x466>
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	f1a9 030c 	sub.w	r3, r9, #12
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	f001 0e01 	and.w	lr, r1, #1
 8007f9c:	2005      	movs	r0, #5
 8007f9e:	18f9      	adds	r1, r7, r3
 8007fa0:	ea43 0e0e 	orr.w	lr, r3, lr
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	f8c7 e004 	str.w	lr, [r7, #4]
 8007faa:	6048      	str	r0, [r1, #4]
 8007fac:	6088      	str	r0, [r1, #8]
 8007fae:	f200 8108 	bhi.w	80081c2 <_malloc_r+0x4ca>
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <_malloc_r+0x2f4>)
 8007fb4:	68b7      	ldr	r7, [r6, #8]
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	428a      	cmp	r2, r1
 8007fba:	bf88      	it	hi
 8007fbc:	601a      	strhi	r2, [r3, #0]
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <_malloc_r+0x2f8>)
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	428a      	cmp	r2, r1
 8007fc4:	bf88      	it	hi
 8007fc6:	601a      	strhi	r2, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f022 0203 	bic.w	r2, r2, #3
 8007fce:	4294      	cmp	r4, r2
 8007fd0:	d802      	bhi.n	8007fd8 <_malloc_r+0x2e0>
 8007fd2:	1b12      	subs	r2, r2, r4
 8007fd4:	2a0f      	cmp	r2, #15
 8007fd6:	dc11      	bgt.n	8007ffc <_malloc_r+0x304>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f000 f9a7 	bl	800832c <__malloc_unlock>
 8007fde:	2700      	movs	r7, #0
 8007fe0:	e6b6      	b.n	8007d50 <_malloc_r+0x58>
 8007fe2:	bf00      	nop
 8007fe4:	20000548 	.word	0x20000548
 8007fe8:	20000974 	.word	0x20000974
 8007fec:	20000970 	.word	0x20000970
 8007ff0:	2000096c 	.word	0x2000096c
 8007ff4:	20000954 	.word	0x20000954
 8007ff8:	20000978 	.word	0x20000978
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	f044 0401 	orr.w	r4, r4, #1
 8008006:	607c      	str	r4, [r7, #4]
 8008008:	4628      	mov	r0, r5
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	60b3      	str	r3, [r6, #8]
 800800e:	3708      	adds	r7, #8
 8008010:	f000 f98c 	bl	800832c <__malloc_unlock>
 8008014:	e69c      	b.n	8007d50 <_malloc_r+0x58>
 8008016:	f1be 0f14 	cmp.w	lr, #20
 800801a:	d976      	bls.n	800810a <_malloc_r+0x412>
 800801c:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8008020:	f200 8085 	bhi.w	800812e <_malloc_r+0x436>
 8008024:	ea4f 3e14 	mov.w	lr, r4, lsr #12
 8008028:	f10e 0e6e 	add.w	lr, lr, #110	; 0x6e
 800802c:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8008030:	e6a7      	b.n	8007d82 <_malloc_r+0x8a>
 8008032:	0a5a      	lsrs	r2, r3, #9
 8008034:	2a04      	cmp	r2, #4
 8008036:	d96d      	bls.n	8008114 <_malloc_r+0x41c>
 8008038:	2a14      	cmp	r2, #20
 800803a:	f200 80a3 	bhi.w	8008184 <_malloc_r+0x48c>
 800803e:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 8008042:	00c8      	lsls	r0, r1, #3
 8008044:	1830      	adds	r0, r6, r0
 8008046:	6882      	ldr	r2, [r0, #8]
 8008048:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8008214 <_malloc_r+0x51c>
 800804c:	4282      	cmp	r2, r0
 800804e:	d103      	bne.n	8008058 <_malloc_r+0x360>
 8008050:	e07a      	b.n	8008148 <_malloc_r+0x450>
 8008052:	6892      	ldr	r2, [r2, #8]
 8008054:	4290      	cmp	r0, r2
 8008056:	d004      	beq.n	8008062 <_malloc_r+0x36a>
 8008058:	6851      	ldr	r1, [r2, #4]
 800805a:	f021 0103 	bic.w	r1, r1, #3
 800805e:	428b      	cmp	r3, r1
 8008060:	d3f7      	bcc.n	8008052 <_malloc_r+0x35a>
 8008062:	68d3      	ldr	r3, [r2, #12]
 8008064:	6871      	ldr	r1, [r6, #4]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	60ba      	str	r2, [r7, #8]
 800806a:	60d7      	str	r7, [r2, #12]
 800806c:	609f      	str	r7, [r3, #8]
 800806e:	e6c6      	b.n	8007dfe <_malloc_r+0x106>
 8008070:	193b      	adds	r3, r7, r4
 8008072:	f041 0001 	orr.w	r0, r1, #1
 8008076:	f044 0401 	orr.w	r4, r4, #1
 800807a:	607c      	str	r4, [r7, #4]
 800807c:	6153      	str	r3, [r2, #20]
 800807e:	6113      	str	r3, [r2, #16]
 8008080:	6058      	str	r0, [r3, #4]
 8008082:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008086:	f8c3 c008 	str.w	ip, [r3, #8]
 800808a:	5059      	str	r1, [r3, r1]
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f94d 	bl	800832c <__malloc_unlock>
 8008092:	3708      	adds	r7, #8
 8008094:	e65c      	b.n	8007d50 <_malloc_r+0x58>
 8008096:	6851      	ldr	r1, [r2, #4]
 8008098:	e6b1      	b.n	8007dfe <_malloc_r+0x106>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	3708      	adds	r7, #8
 80080a0:	f018 0f03 	tst.w	r8, #3
 80080a4:	f47f aebf 	bne.w	8007e26 <_malloc_r+0x12e>
 80080a8:	464b      	mov	r3, r9
 80080aa:	f01e 0f03 	tst.w	lr, #3
 80080ae:	f1a3 0208 	sub.w	r2, r3, #8
 80080b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80080b6:	f000 809f 	beq.w	80081f8 <_malloc_r+0x500>
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4293      	cmp	r3, r2
 80080be:	d0f4      	beq.n	80080aa <_malloc_r+0x3b2>
 80080c0:	6873      	ldr	r3, [r6, #4]
 80080c2:	0040      	lsls	r0, r0, #1
 80080c4:	4298      	cmp	r0, r3
 80080c6:	f63f aef7 	bhi.w	8007eb8 <_malloc_r+0x1c0>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f aef4 	beq.w	8007eb8 <_malloc_r+0x1c0>
 80080d0:	4218      	tst	r0, r3
 80080d2:	f000 8096 	beq.w	8008202 <_malloc_r+0x50a>
 80080d6:	46c6      	mov	lr, r8
 80080d8:	e6a1      	b.n	8007e1e <_malloc_r+0x126>
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	697f      	ldr	r7, [r7, #20]
 80080e0:	42bb      	cmp	r3, r7
 80080e2:	f47f ae25 	bne.w	8007d30 <_malloc_r+0x38>
 80080e6:	f10e 0e02 	add.w	lr, lr, #2
 80080ea:	e65f      	b.n	8007dac <_malloc_r+0xb4>
 80080ec:	1859      	adds	r1, r3, r1
 80080ee:	6848      	ldr	r0, [r1, #4]
 80080f0:	461f      	mov	r7, r3
 80080f2:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f040 0001 	orr.w	r0, r0, #1
 80080fc:	6048      	str	r0, [r1, #4]
 80080fe:	60d3      	str	r3, [r2, #12]
 8008100:	609a      	str	r2, [r3, #8]
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f912 	bl	800832c <__malloc_unlock>
 8008108:	e622      	b.n	8007d50 <_malloc_r+0x58>
 800810a:	f10e 0e5b 	add.w	lr, lr, #91	; 0x5b
 800810e:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8008112:	e636      	b.n	8007d82 <_malloc_r+0x8a>
 8008114:	0999      	lsrs	r1, r3, #6
 8008116:	3138      	adds	r1, #56	; 0x38
 8008118:	00c8      	lsls	r0, r1, #3
 800811a:	e793      	b.n	8008044 <_malloc_r+0x34c>
 800811c:	42b7      	cmp	r7, r6
 800811e:	f43f aef7 	beq.w	8007f10 <_malloc_r+0x218>
 8008122:	4b3c      	ldr	r3, [pc, #240]	; (8008214 <_malloc_r+0x51c>)
 8008124:	689f      	ldr	r7, [r3, #8]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	f022 0203 	bic.w	r2, r2, #3
 800812c:	e74f      	b.n	8007fce <_malloc_r+0x2d6>
 800812e:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8008132:	d81a      	bhi.n	800816a <_malloc_r+0x472>
 8008134:	ea4f 3ed4 	mov.w	lr, r4, lsr #15
 8008138:	f10e 0e77 	add.w	lr, lr, #119	; 0x77
 800813c:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 8008140:	e61f      	b.n	8007d82 <_malloc_r+0x8a>
 8008142:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8008146:	e702      	b.n	8007f4e <_malloc_r+0x256>
 8008148:	1089      	asrs	r1, r1, #2
 800814a:	2001      	movs	r0, #1
 800814c:	fa00 f001 	lsl.w	r0, r0, r1
 8008150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	4301      	orrs	r1, r0
 8008158:	f8c8 1004 	str.w	r1, [r8, #4]
 800815c:	e783      	b.n	8008066 <_malloc_r+0x36e>
 800815e:	2301      	movs	r3, #1
 8008160:	f8c8 3004 	str.w	r3, [r8, #4]
 8008164:	4647      	mov	r7, r8
 8008166:	2200      	movs	r2, #0
 8008168:	e731      	b.n	8007fce <_malloc_r+0x2d6>
 800816a:	f240 5354 	movw	r3, #1364	; 0x554
 800816e:	459e      	cmp	lr, r3
 8008170:	d81e      	bhi.n	80081b0 <_malloc_r+0x4b8>
 8008172:	ea4f 4e94 	mov.w	lr, r4, lsr #18
 8008176:	f10e 0e7c 	add.w	lr, lr, #124	; 0x7c
 800817a:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 800817e:	e600      	b.n	8007d82 <_malloc_r+0x8a>
 8008180:	3310      	adds	r3, #16
 8008182:	e6b5      	b.n	8007ef0 <_malloc_r+0x1f8>
 8008184:	2a54      	cmp	r2, #84	; 0x54
 8008186:	d828      	bhi.n	80081da <_malloc_r+0x4e2>
 8008188:	0b19      	lsrs	r1, r3, #12
 800818a:	316e      	adds	r1, #110	; 0x6e
 800818c:	00c8      	lsls	r0, r1, #3
 800818e:	e759      	b.n	8008044 <_malloc_r+0x34c>
 8008190:	68b7      	ldr	r7, [r6, #8]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f022 0203 	bic.w	r2, r2, #3
 8008198:	e719      	b.n	8007fce <_malloc_r+0x2d6>
 800819a:	0508      	lsls	r0, r1, #20
 800819c:	0d00      	lsrs	r0, r0, #20
 800819e:	2800      	cmp	r0, #0
 80081a0:	f47f aec0 	bne.w	8007f24 <_malloc_r+0x22c>
 80081a4:	68b1      	ldr	r1, [r6, #8]
 80081a6:	444b      	add	r3, r9
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	604b      	str	r3, [r1, #4]
 80081ae:	e700      	b.n	8007fb2 <_malloc_r+0x2ba>
 80081b0:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80081b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 80081b8:	e5e3      	b.n	8007d82 <_malloc_r+0x8a>
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <_malloc_r+0x520>)
 80081bc:	f8c2 8000 	str.w	r8, [r2]
 80081c0:	e6ba      	b.n	8007f38 <_malloc_r+0x240>
 80081c2:	f107 0108 	add.w	r1, r7, #8
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7ff fc82 	bl	8007ad0 <_free_r>
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <_malloc_r+0x524>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	e6ef      	b.n	8007fb2 <_malloc_r+0x2ba>
 80081d2:	2301      	movs	r3, #1
 80081d4:	f04f 0b00 	mov.w	fp, #0
 80081d8:	e6ca      	b.n	8007f70 <_malloc_r+0x278>
 80081da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80081de:	d803      	bhi.n	80081e8 <_malloc_r+0x4f0>
 80081e0:	0bd9      	lsrs	r1, r3, #15
 80081e2:	3177      	adds	r1, #119	; 0x77
 80081e4:	00c8      	lsls	r0, r1, #3
 80081e6:	e72d      	b.n	8008044 <_malloc_r+0x34c>
 80081e8:	f240 5154 	movw	r1, #1364	; 0x554
 80081ec:	428a      	cmp	r2, r1
 80081ee:	d80c      	bhi.n	800820a <_malloc_r+0x512>
 80081f0:	0c99      	lsrs	r1, r3, #18
 80081f2:	317c      	adds	r1, #124	; 0x7c
 80081f4:	00c8      	lsls	r0, r1, #3
 80081f6:	e725      	b.n	8008044 <_malloc_r+0x34c>
 80081f8:	6873      	ldr	r3, [r6, #4]
 80081fa:	ea23 0300 	bic.w	r3, r3, r0
 80081fe:	6073      	str	r3, [r6, #4]
 8008200:	e75f      	b.n	80080c2 <_malloc_r+0x3ca>
 8008202:	0040      	lsls	r0, r0, #1
 8008204:	f108 0804 	add.w	r8, r8, #4
 8008208:	e762      	b.n	80080d0 <_malloc_r+0x3d8>
 800820a:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800820e:	217e      	movs	r1, #126	; 0x7e
 8008210:	e718      	b.n	8008044 <_malloc_r+0x34c>
 8008212:	bf00      	nop
 8008214:	20000548 	.word	0x20000548
 8008218:	20000954 	.word	0x20000954
 800821c:	20000978 	.word	0x20000978

08008220 <memchr>:
 8008220:	0783      	lsls	r3, r0, #30
 8008222:	b470      	push	{r4, r5, r6}
 8008224:	b2c9      	uxtb	r1, r1
 8008226:	d011      	beq.n	800824c <memchr+0x2c>
 8008228:	2a00      	cmp	r2, #0
 800822a:	d023      	beq.n	8008274 <memchr+0x54>
 800822c:	7803      	ldrb	r3, [r0, #0]
 800822e:	428b      	cmp	r3, r1
 8008230:	d01e      	beq.n	8008270 <memchr+0x50>
 8008232:	4603      	mov	r3, r0
 8008234:	3a01      	subs	r2, #1
 8008236:	e005      	b.n	8008244 <memchr+0x24>
 8008238:	b1e2      	cbz	r2, 8008274 <memchr+0x54>
 800823a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800823e:	3a01      	subs	r2, #1
 8008240:	428c      	cmp	r4, r1
 8008242:	d015      	beq.n	8008270 <memchr+0x50>
 8008244:	3001      	adds	r0, #1
 8008246:	f010 0f03 	tst.w	r0, #3
 800824a:	d1f5      	bne.n	8008238 <memchr+0x18>
 800824c:	2a03      	cmp	r2, #3
 800824e:	d813      	bhi.n	8008278 <memchr+0x58>
 8008250:	b182      	cbz	r2, 8008274 <memchr+0x54>
 8008252:	7803      	ldrb	r3, [r0, #0]
 8008254:	428b      	cmp	r3, r1
 8008256:	d00b      	beq.n	8008270 <memchr+0x50>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	1882      	adds	r2, r0, r2
 800825c:	e003      	b.n	8008266 <memchr+0x46>
 800825e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008262:	428c      	cmp	r4, r1
 8008264:	d004      	beq.n	8008270 <memchr+0x50>
 8008266:	4293      	cmp	r3, r2
 8008268:	f100 0001 	add.w	r0, r0, #1
 800826c:	d1f7      	bne.n	800825e <memchr+0x3e>
 800826e:	2000      	movs	r0, #0
 8008270:	bc70      	pop	{r4, r5, r6}
 8008272:	4770      	bx	lr
 8008274:	4610      	mov	r0, r2
 8008276:	e7fb      	b.n	8008270 <memchr+0x50>
 8008278:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800827c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8008280:	6803      	ldr	r3, [r0, #0]
 8008282:	4604      	mov	r4, r0
 8008284:	4073      	eors	r3, r6
 8008286:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800828a:	ea25 0303 	bic.w	r3, r5, r3
 800828e:	3004      	adds	r0, #4
 8008290:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008294:	d103      	bne.n	800829e <memchr+0x7e>
 8008296:	3a04      	subs	r2, #4
 8008298:	2a03      	cmp	r2, #3
 800829a:	d8f1      	bhi.n	8008280 <memchr+0x60>
 800829c:	e7d8      	b.n	8008250 <memchr+0x30>
 800829e:	4620      	mov	r0, r4
 80082a0:	e7d6      	b.n	8008250 <memchr+0x30>
 80082a2:	bf00      	nop

080082a4 <memcpy>:
 80082a4:	2a0f      	cmp	r2, #15
 80082a6:	b4f0      	push	{r4, r5, r6, r7}
 80082a8:	d93a      	bls.n	8008320 <memcpy+0x7c>
 80082aa:	ea41 0300 	orr.w	r3, r1, r0
 80082ae:	079b      	lsls	r3, r3, #30
 80082b0:	d138      	bne.n	8008324 <memcpy+0x80>
 80082b2:	460c      	mov	r4, r1
 80082b4:	4603      	mov	r3, r0
 80082b6:	4615      	mov	r5, r2
 80082b8:	6826      	ldr	r6, [r4, #0]
 80082ba:	3d10      	subs	r5, #16
 80082bc:	601e      	str	r6, [r3, #0]
 80082be:	6866      	ldr	r6, [r4, #4]
 80082c0:	605e      	str	r6, [r3, #4]
 80082c2:	68a6      	ldr	r6, [r4, #8]
 80082c4:	609e      	str	r6, [r3, #8]
 80082c6:	68e6      	ldr	r6, [r4, #12]
 80082c8:	3410      	adds	r4, #16
 80082ca:	60de      	str	r6, [r3, #12]
 80082cc:	3310      	adds	r3, #16
 80082ce:	2d0f      	cmp	r5, #15
 80082d0:	d8f2      	bhi.n	80082b8 <memcpy+0x14>
 80082d2:	f1a2 0410 	sub.w	r4, r2, #16
 80082d6:	f024 040f 	bic.w	r4, r4, #15
 80082da:	f002 020f 	and.w	r2, r2, #15
 80082de:	3410      	adds	r4, #16
 80082e0:	2a03      	cmp	r2, #3
 80082e2:	eb00 0304 	add.w	r3, r0, r4
 80082e6:	4421      	add	r1, r4
 80082e8:	d911      	bls.n	800830e <memcpy+0x6a>
 80082ea:	460e      	mov	r6, r1
 80082ec:	461d      	mov	r5, r3
 80082ee:	4614      	mov	r4, r2
 80082f0:	f856 7b04 	ldr.w	r7, [r6], #4
 80082f4:	3c04      	subs	r4, #4
 80082f6:	2c03      	cmp	r4, #3
 80082f8:	f845 7b04 	str.w	r7, [r5], #4
 80082fc:	d8f8      	bhi.n	80082f0 <memcpy+0x4c>
 80082fe:	1f14      	subs	r4, r2, #4
 8008300:	f024 0403 	bic.w	r4, r4, #3
 8008304:	3404      	adds	r4, #4
 8008306:	f002 0203 	and.w	r2, r2, #3
 800830a:	1909      	adds	r1, r1, r4
 800830c:	191b      	adds	r3, r3, r4
 800830e:	b12a      	cbz	r2, 800831c <memcpy+0x78>
 8008310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008314:	3a01      	subs	r2, #1
 8008316:	f803 4b01 	strb.w	r4, [r3], #1
 800831a:	d1f9      	bne.n	8008310 <memcpy+0x6c>
 800831c:	bcf0      	pop	{r4, r5, r6, r7}
 800831e:	4770      	bx	lr
 8008320:	4603      	mov	r3, r0
 8008322:	e7f4      	b.n	800830e <memcpy+0x6a>
 8008324:	4603      	mov	r3, r0
 8008326:	e7f3      	b.n	8008310 <memcpy+0x6c>

08008328 <__malloc_lock>:
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <__malloc_unlock>:
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <_Balloc>:
 8008330:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	b14b      	cbz	r3, 800834e <_Balloc+0x1e>
 800833a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800833e:	b178      	cbz	r0, 8008360 <_Balloc+0x30>
 8008340:	6802      	ldr	r2, [r0, #0]
 8008342:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008346:	2300      	movs	r3, #0
 8008348:	6103      	str	r3, [r0, #16]
 800834a:	60c3      	str	r3, [r0, #12]
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	2104      	movs	r1, #4
 8008350:	2221      	movs	r2, #33	; 0x21
 8008352:	f001 fb4d 	bl	80099f0 <_calloc_r>
 8008356:	4603      	mov	r3, r0
 8008358:	64e8      	str	r0, [r5, #76]	; 0x4c
 800835a:	2800      	cmp	r0, #0
 800835c:	d1ed      	bne.n	800833a <_Balloc+0xa>
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	2101      	movs	r1, #1
 8008362:	fa01 f604 	lsl.w	r6, r1, r4
 8008366:	1d72      	adds	r2, r6, #5
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	4628      	mov	r0, r5
 800836c:	f001 fb40 	bl	80099f0 <_calloc_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	d0f4      	beq.n	800835e <_Balloc+0x2e>
 8008374:	6044      	str	r4, [r0, #4]
 8008376:	6086      	str	r6, [r0, #8]
 8008378:	e7e5      	b.n	8008346 <_Balloc+0x16>
 800837a:	bf00      	nop

0800837c <_Bfree>:
 800837c:	b131      	cbz	r1, 800838c <_Bfree+0x10>
 800837e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008380:	684a      	ldr	r2, [r1, #4]
 8008382:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008386:	6008      	str	r0, [r1, #0]
 8008388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <__multadd>:
 8008390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008392:	460d      	mov	r5, r1
 8008394:	690c      	ldr	r4, [r1, #16]
 8008396:	4606      	mov	r6, r0
 8008398:	b083      	sub	sp, #12
 800839a:	f101 0014 	add.w	r0, r1, #20
 800839e:	2100      	movs	r1, #0
 80083a0:	6807      	ldr	r7, [r0, #0]
 80083a2:	3101      	adds	r1, #1
 80083a4:	fa1f fc87 	uxth.w	ip, r7
 80083a8:	0c3f      	lsrs	r7, r7, #16
 80083aa:	fb02 330c 	mla	r3, r2, ip, r3
 80083ae:	fb02 fc07 	mul.w	ip, r2, r7
 80083b2:	b29f      	uxth	r7, r3
 80083b4:	eb0c 4313 	add.w	r3, ip, r3, lsr #16
 80083b8:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	428c      	cmp	r4, r1
 80083c0:	f840 7b04 	str.w	r7, [r0], #4
 80083c4:	dcec      	bgt.n	80083a0 <__multadd+0x10>
 80083c6:	b13b      	cbz	r3, 80083d8 <__multadd+0x48>
 80083c8:	68aa      	ldr	r2, [r5, #8]
 80083ca:	4294      	cmp	r4, r2
 80083cc:	da07      	bge.n	80083de <__multadd+0x4e>
 80083ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80083d2:	3401      	adds	r4, #1
 80083d4:	6153      	str	r3, [r2, #20]
 80083d6:	612c      	str	r4, [r5, #16]
 80083d8:	4628      	mov	r0, r5
 80083da:	b003      	add	sp, #12
 80083dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083de:	6869      	ldr	r1, [r5, #4]
 80083e0:	4630      	mov	r0, r6
 80083e2:	3101      	adds	r1, #1
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	f7ff ffa3 	bl	8008330 <_Balloc>
 80083ea:	692a      	ldr	r2, [r5, #16]
 80083ec:	f105 010c 	add.w	r1, r5, #12
 80083f0:	3202      	adds	r2, #2
 80083f2:	4607      	mov	r7, r0
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	f100 000c 	add.w	r0, r0, #12
 80083fa:	f7ff ff53 	bl	80082a4 <memcpy>
 80083fe:	6869      	ldr	r1, [r5, #4]
 8008400:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008408:	6028      	str	r0, [r5, #0]
 800840a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800840e:	463d      	mov	r5, r7
 8008410:	e7dd      	b.n	80083ce <__multadd+0x3e>
 8008412:	bf00      	nop

08008414 <__s2b>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	461e      	mov	r6, r3
 800841a:	f648 6339 	movw	r3, #36409	; 0x8e39
 800841e:	f106 0408 	add.w	r4, r6, #8
 8008422:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8008426:	fb83 5304 	smull	r5, r3, r3, r4
 800842a:	17e4      	asrs	r4, r4, #31
 800842c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	4605      	mov	r5, r0
 8008434:	4688      	mov	r8, r1
 8008436:	4617      	mov	r7, r2
 8008438:	dd35      	ble.n	80084a6 <__s2b+0x92>
 800843a:	2201      	movs	r2, #1
 800843c:	2100      	movs	r1, #0
 800843e:	0052      	lsls	r2, r2, #1
 8008440:	3101      	adds	r1, #1
 8008442:	4293      	cmp	r3, r2
 8008444:	dcfb      	bgt.n	800843e <__s2b+0x2a>
 8008446:	4628      	mov	r0, r5
 8008448:	f7ff ff72 	bl	8008330 <_Balloc>
 800844c:	9b08      	ldr	r3, [sp, #32]
 800844e:	4601      	mov	r1, r0
 8008450:	6143      	str	r3, [r0, #20]
 8008452:	2301      	movs	r3, #1
 8008454:	2f09      	cmp	r7, #9
 8008456:	6103      	str	r3, [r0, #16]
 8008458:	dd21      	ble.n	800849e <__s2b+0x8a>
 800845a:	f108 0909 	add.w	r9, r8, #9
 800845e:	2409      	movs	r4, #9
 8008460:	f818 3004 	ldrb.w	r3, [r8, r4]
 8008464:	220a      	movs	r2, #10
 8008466:	3b30      	subs	r3, #48	; 0x30
 8008468:	4628      	mov	r0, r5
 800846a:	f7ff ff91 	bl	8008390 <__multadd>
 800846e:	3401      	adds	r4, #1
 8008470:	42bc      	cmp	r4, r7
 8008472:	4601      	mov	r1, r0
 8008474:	d1f4      	bne.n	8008460 <__s2b+0x4c>
 8008476:	eb09 0804 	add.w	r8, r9, r4
 800847a:	f1a8 0808 	sub.w	r8, r8, #8
 800847e:	42a6      	cmp	r6, r4
 8008480:	dd0a      	ble.n	8008498 <__s2b+0x84>
 8008482:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008486:	220a      	movs	r2, #10
 8008488:	3b30      	subs	r3, #48	; 0x30
 800848a:	4628      	mov	r0, r5
 800848c:	f7ff ff80 	bl	8008390 <__multadd>
 8008490:	3401      	adds	r4, #1
 8008492:	42b4      	cmp	r4, r6
 8008494:	4601      	mov	r1, r0
 8008496:	d1f4      	bne.n	8008482 <__s2b+0x6e>
 8008498:	4608      	mov	r0, r1
 800849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849e:	f108 080a 	add.w	r8, r8, #10
 80084a2:	2409      	movs	r4, #9
 80084a4:	e7eb      	b.n	800847e <__s2b+0x6a>
 80084a6:	2100      	movs	r1, #0
 80084a8:	e7cd      	b.n	8008446 <__s2b+0x32>
 80084aa:	bf00      	nop

080084ac <__hi0bits>:
 80084ac:	0c02      	lsrs	r2, r0, #16
 80084ae:	4603      	mov	r3, r0
 80084b0:	d116      	bne.n	80084e0 <__hi0bits+0x34>
 80084b2:	0403      	lsls	r3, r0, #16
 80084b4:	2010      	movs	r0, #16
 80084b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084ba:	d101      	bne.n	80084c0 <__hi0bits+0x14>
 80084bc:	3008      	adds	r0, #8
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084c4:	d101      	bne.n	80084ca <__hi0bits+0x1e>
 80084c6:	3004      	adds	r0, #4
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084ce:	d101      	bne.n	80084d4 <__hi0bits+0x28>
 80084d0:	3002      	adds	r0, #2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	db02      	blt.n	80084de <__hi0bits+0x32>
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	d403      	bmi.n	80084e4 <__hi0bits+0x38>
 80084dc:	2020      	movs	r0, #32
 80084de:	4770      	bx	lr
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7e8      	b.n	80084b6 <__hi0bits+0xa>
 80084e4:	3001      	adds	r0, #1
 80084e6:	4770      	bx	lr

080084e8 <__lo0bits>:
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	4602      	mov	r2, r0
 80084ec:	f013 0007 	ands.w	r0, r3, #7
 80084f0:	d007      	beq.n	8008502 <__lo0bits+0x1a>
 80084f2:	07d9      	lsls	r1, r3, #31
 80084f4:	d41f      	bmi.n	8008536 <__lo0bits+0x4e>
 80084f6:	0798      	lsls	r0, r3, #30
 80084f8:	d41f      	bmi.n	800853a <__lo0bits+0x52>
 80084fa:	089b      	lsrs	r3, r3, #2
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	2002      	movs	r0, #2
 8008500:	4770      	bx	lr
 8008502:	b299      	uxth	r1, r3
 8008504:	b909      	cbnz	r1, 800850a <__lo0bits+0x22>
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	2010      	movs	r0, #16
 800850a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800850e:	d101      	bne.n	8008514 <__lo0bits+0x2c>
 8008510:	3008      	adds	r0, #8
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	0719      	lsls	r1, r3, #28
 8008516:	d101      	bne.n	800851c <__lo0bits+0x34>
 8008518:	3004      	adds	r0, #4
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	0799      	lsls	r1, r3, #30
 800851e:	d101      	bne.n	8008524 <__lo0bits+0x3c>
 8008520:	3002      	adds	r0, #2
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	07d9      	lsls	r1, r3, #31
 8008526:	d404      	bmi.n	8008532 <__lo0bits+0x4a>
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	d101      	bne.n	8008530 <__lo0bits+0x48>
 800852c:	2020      	movs	r0, #32
 800852e:	4770      	bx	lr
 8008530:	3001      	adds	r0, #1
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	4770      	bx	lr
 8008536:	2000      	movs	r0, #0
 8008538:	4770      	bx	lr
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	2001      	movs	r0, #1
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <__i2b>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	2101      	movs	r1, #1
 800854a:	f7ff fef1 	bl	8008330 <_Balloc>
 800854e:	2301      	movs	r3, #1
 8008550:	6144      	str	r4, [r0, #20]
 8008552:	6103      	str	r3, [r0, #16]
 8008554:	bd10      	pop	{r4, pc}
 8008556:	bf00      	nop

08008558 <__multiply>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	690f      	ldr	r7, [r1, #16]
 800855e:	6915      	ldr	r5, [r2, #16]
 8008560:	b087      	sub	sp, #28
 8008562:	42af      	cmp	r7, r5
 8008564:	460c      	mov	r4, r1
 8008566:	4692      	mov	sl, r2
 8008568:	da04      	bge.n	8008574 <__multiply+0x1c>
 800856a:	463a      	mov	r2, r7
 800856c:	4654      	mov	r4, sl
 800856e:	462f      	mov	r7, r5
 8008570:	468a      	mov	sl, r1
 8008572:	4615      	mov	r5, r2
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	6861      	ldr	r1, [r4, #4]
 8008578:	eb07 0b05 	add.w	fp, r7, r5
 800857c:	459b      	cmp	fp, r3
 800857e:	bfc8      	it	gt
 8008580:	3101      	addgt	r1, #1
 8008582:	f7ff fed5 	bl	8008330 <_Balloc>
 8008586:	f10b 0104 	add.w	r1, fp, #4
 800858a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800858e:	3304      	adds	r3, #4
 8008590:	f100 0914 	add.w	r9, r0, #20
 8008594:	4599      	cmp	r9, r3
 8008596:	9002      	str	r0, [sp, #8]
 8008598:	9104      	str	r1, [sp, #16]
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	d206      	bcs.n	80085ac <__multiply+0x54>
 800859e:	9903      	ldr	r1, [sp, #12]
 80085a0:	464b      	mov	r3, r9
 80085a2:	2200      	movs	r2, #0
 80085a4:	f843 2b04 	str.w	r2, [r3], #4
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d8fb      	bhi.n	80085a4 <__multiply+0x4c>
 80085ac:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 80085b0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80085b4:	f10a 0a14 	add.w	sl, sl, #20
 80085b8:	3514      	adds	r5, #20
 80085ba:	3414      	adds	r4, #20
 80085bc:	3714      	adds	r7, #20
 80085be:	45aa      	cmp	sl, r5
 80085c0:	9401      	str	r4, [sp, #4]
 80085c2:	d253      	bcs.n	800866c <__multiply+0x114>
 80085c4:	f8cd b014 	str.w	fp, [sp, #20]
 80085c8:	46ab      	mov	fp, r5
 80085ca:	f85a 4b04 	ldr.w	r4, [sl], #4
 80085ce:	b2a5      	uxth	r5, r4
 80085d0:	b1ed      	cbz	r5, 800860e <__multiply+0xb6>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	464b      	mov	r3, r9
 80085d6:	2400      	movs	r4, #0
 80085d8:	6819      	ldr	r1, [r3, #0]
 80085da:	f852 0b04 	ldr.w	r0, [r2], #4
 80085de:	b28e      	uxth	r6, r1
 80085e0:	1934      	adds	r4, r6, r4
 80085e2:	0c09      	lsrs	r1, r1, #16
 80085e4:	b286      	uxth	r6, r0
 80085e6:	0c00      	lsrs	r0, r0, #16
 80085e8:	fb05 4406 	mla	r4, r5, r6, r4
 80085ec:	fb05 1000 	mla	r0, r5, r0, r1
 80085f0:	b2a6      	uxth	r6, r4
 80085f2:	eb00 4414 	add.w	r4, r0, r4, lsr #16
 80085f6:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80085fa:	0c24      	lsrs	r4, r4, #16
 80085fc:	4297      	cmp	r7, r2
 80085fe:	469c      	mov	ip, r3
 8008600:	f843 6b04 	str.w	r6, [r3], #4
 8008604:	d8e8      	bhi.n	80085d8 <__multiply+0x80>
 8008606:	f8cc 4004 	str.w	r4, [ip, #4]
 800860a:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 800860e:	0c24      	lsrs	r4, r4, #16
 8008610:	d026      	beq.n	8008660 <__multiply+0x108>
 8008612:	f8d9 c000 	ldr.w	ip, [r9]
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	464e      	mov	r6, r9
 800861a:	4661      	mov	r1, ip
 800861c:	464d      	mov	r5, r9
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	e000      	b.n	8008626 <__multiply+0xce>
 8008624:	4615      	mov	r5, r2
 8008626:	881a      	ldrh	r2, [r3, #0]
 8008628:	eb08 4811 	add.w	r8, r8, r1, lsr #16
 800862c:	fb04 8802 	mla	r8, r4, r2, r8
 8008630:	fa1f fc8c 	uxth.w	ip, ip
 8008634:	ea4c 4008 	orr.w	r0, ip, r8, lsl #16
 8008638:	462a      	mov	r2, r5
 800863a:	f842 0b04 	str.w	r0, [r2], #4
 800863e:	f853 cb04 	ldr.w	ip, [r3], #4
 8008642:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8008646:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800864a:	b288      	uxth	r0, r1
 800864c:	fb04 0c0c 	mla	ip, r4, ip, r0
 8008650:	429f      	cmp	r7, r3
 8008652:	eb0c 4c18 	add.w	ip, ip, r8, lsr #16
 8008656:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800865a:	d8e3      	bhi.n	8008624 <__multiply+0xcc>
 800865c:	f8c5 c004 	str.w	ip, [r5, #4]
 8008660:	45d3      	cmp	fp, sl
 8008662:	f109 0904 	add.w	r9, r9, #4
 8008666:	d8b0      	bhi.n	80085ca <__multiply+0x72>
 8008668:	f8dd b014 	ldr.w	fp, [sp, #20]
 800866c:	f1bb 0f00 	cmp.w	fp, #0
 8008670:	dd0d      	ble.n	800868e <__multiply+0x136>
 8008672:	9a04      	ldr	r2, [sp, #16]
 8008674:	9902      	ldr	r1, [sp, #8]
 8008676:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800867a:	b943      	cbnz	r3, 800868e <__multiply+0x136>
 800867c:	9a03      	ldr	r2, [sp, #12]
 800867e:	1f13      	subs	r3, r2, #4
 8008680:	e002      	b.n	8008688 <__multiply+0x130>
 8008682:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008686:	b912      	cbnz	r2, 800868e <__multiply+0x136>
 8008688:	f1bb 0b01 	subs.w	fp, fp, #1
 800868c:	d1f9      	bne.n	8008682 <__multiply+0x12a>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	f8c3 b010 	str.w	fp, [r3, #16]
 8008694:	4618      	mov	r0, r3
 8008696:	b007      	add	sp, #28
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800869c <__pow5mult>:
 800869c:	f012 0303 	ands.w	r3, r2, #3
 80086a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a4:	4615      	mov	r5, r2
 80086a6:	4604      	mov	r4, r0
 80086a8:	4688      	mov	r8, r1
 80086aa:	d12d      	bne.n	8008708 <__pow5mult+0x6c>
 80086ac:	10ad      	asrs	r5, r5, #2
 80086ae:	d01d      	beq.n	80086ec <__pow5mult+0x50>
 80086b0:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80086b2:	b92f      	cbnz	r7, 80086c0 <__pow5mult+0x24>
 80086b4:	e031      	b.n	800871a <__pow5mult+0x7e>
 80086b6:	106d      	asrs	r5, r5, #1
 80086b8:	d018      	beq.n	80086ec <__pow5mult+0x50>
 80086ba:	683e      	ldr	r6, [r7, #0]
 80086bc:	b1ce      	cbz	r6, 80086f2 <__pow5mult+0x56>
 80086be:	4637      	mov	r7, r6
 80086c0:	07e8      	lsls	r0, r5, #31
 80086c2:	d5f8      	bpl.n	80086b6 <__pow5mult+0x1a>
 80086c4:	4641      	mov	r1, r8
 80086c6:	463a      	mov	r2, r7
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7ff ff45 	bl	8008558 <__multiply>
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	d017      	beq.n	8008704 <__pow5mult+0x68>
 80086d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80086d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80086da:	106d      	asrs	r5, r5, #1
 80086dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e0:	f8c8 1000 	str.w	r1, [r8]
 80086e4:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 80086e8:	4680      	mov	r8, r0
 80086ea:	d1e6      	bne.n	80086ba <__pow5mult+0x1e>
 80086ec:	4640      	mov	r0, r8
 80086ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f2:	4639      	mov	r1, r7
 80086f4:	463a      	mov	r2, r7
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff ff2e 	bl	8008558 <__multiply>
 80086fc:	6038      	str	r0, [r7, #0]
 80086fe:	6006      	str	r6, [r0, #0]
 8008700:	4607      	mov	r7, r0
 8008702:	e7dd      	b.n	80086c0 <__pow5mult+0x24>
 8008704:	4680      	mov	r8, r0
 8008706:	e7d6      	b.n	80086b6 <__pow5mult+0x1a>
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <__pow5mult+0x94>)
 800870a:	3b01      	subs	r3, #1
 800870c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008710:	2300      	movs	r3, #0
 8008712:	f7ff fe3d 	bl	8008390 <__multadd>
 8008716:	4680      	mov	r8, r0
 8008718:	e7c8      	b.n	80086ac <__pow5mult+0x10>
 800871a:	4620      	mov	r0, r4
 800871c:	f240 2171 	movw	r1, #625	; 0x271
 8008720:	f7ff ff10 	bl	8008544 <__i2b>
 8008724:	2300      	movs	r3, #0
 8008726:	64a0      	str	r0, [r4, #72]	; 0x48
 8008728:	4607      	mov	r7, r0
 800872a:	6003      	str	r3, [r0, #0]
 800872c:	e7c8      	b.n	80086c0 <__pow5mult+0x24>
 800872e:	bf00      	nop
 8008730:	0800a400 	.word	0x0800a400

08008734 <__lshift>:
 8008734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	690b      	ldr	r3, [r1, #16]
 800873a:	ea4f 1762 	mov.w	r7, r2, asr #5
 800873e:	eb07 0b03 	add.w	fp, r7, r3
 8008742:	688b      	ldr	r3, [r1, #8]
 8008744:	f10b 0501 	add.w	r5, fp, #1
 8008748:	429d      	cmp	r5, r3
 800874a:	460c      	mov	r4, r1
 800874c:	4691      	mov	r9, r2
 800874e:	4606      	mov	r6, r0
 8008750:	6849      	ldr	r1, [r1, #4]
 8008752:	dd03      	ble.n	800875c <__lshift+0x28>
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	3101      	adds	r1, #1
 8008758:	429d      	cmp	r5, r3
 800875a:	dcfb      	bgt.n	8008754 <__lshift+0x20>
 800875c:	4630      	mov	r0, r6
 800875e:	f7ff fde7 	bl	8008330 <_Balloc>
 8008762:	2f00      	cmp	r7, #0
 8008764:	f100 0314 	add.w	r3, r0, #20
 8008768:	dd09      	ble.n	800877e <__lshift+0x4a>
 800876a:	2200      	movs	r2, #0
 800876c:	4611      	mov	r1, r2
 800876e:	3201      	adds	r2, #1
 8008770:	42ba      	cmp	r2, r7
 8008772:	f843 1b04 	str.w	r1, [r3], #4
 8008776:	d1fa      	bne.n	800876e <__lshift+0x3a>
 8008778:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800877c:	3314      	adds	r3, #20
 800877e:	6922      	ldr	r2, [r4, #16]
 8008780:	f019 091f 	ands.w	r9, r9, #31
 8008784:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8008788:	f104 0114 	add.w	r1, r4, #20
 800878c:	f10c 0c14 	add.w	ip, ip, #20
 8008790:	d022      	beq.n	80087d8 <__lshift+0xa4>
 8008792:	f1c9 0a20 	rsb	sl, r9, #32
 8008796:	2200      	movs	r2, #0
 8008798:	e000      	b.n	800879c <__lshift+0x68>
 800879a:	463b      	mov	r3, r7
 800879c:	f8d1 8000 	ldr.w	r8, [r1]
 80087a0:	461f      	mov	r7, r3
 80087a2:	fa08 f809 	lsl.w	r8, r8, r9
 80087a6:	ea48 0202 	orr.w	r2, r8, r2
 80087aa:	f847 2b04 	str.w	r2, [r7], #4
 80087ae:	f851 2b04 	ldr.w	r2, [r1], #4
 80087b2:	458c      	cmp	ip, r1
 80087b4:	fa22 f20a 	lsr.w	r2, r2, sl
 80087b8:	d8ef      	bhi.n	800879a <__lshift+0x66>
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	b10a      	cbz	r2, 80087c2 <__lshift+0x8e>
 80087be:	f10b 0502 	add.w	r5, fp, #2
 80087c2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80087c4:	6862      	ldr	r2, [r4, #4]
 80087c6:	3d01      	subs	r5, #1
 80087c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087cc:	6105      	str	r5, [r0, #16]
 80087ce:	6021      	str	r1, [r4, #0]
 80087d0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	f851 2b04 	ldr.w	r2, [r1], #4
 80087dc:	458c      	cmp	ip, r1
 80087de:	f843 2b04 	str.w	r2, [r3], #4
 80087e2:	d9ee      	bls.n	80087c2 <__lshift+0x8e>
 80087e4:	f851 2b04 	ldr.w	r2, [r1], #4
 80087e8:	458c      	cmp	ip, r1
 80087ea:	f843 2b04 	str.w	r2, [r3], #4
 80087ee:	d8f3      	bhi.n	80087d8 <__lshift+0xa4>
 80087f0:	e7e7      	b.n	80087c2 <__lshift+0x8e>
 80087f2:	bf00      	nop

080087f4 <__mcmp>:
 80087f4:	4603      	mov	r3, r0
 80087f6:	690a      	ldr	r2, [r1, #16]
 80087f8:	6900      	ldr	r0, [r0, #16]
 80087fa:	b430      	push	{r4, r5}
 80087fc:	1a80      	subs	r0, r0, r2
 80087fe:	d10f      	bne.n	8008820 <__mcmp+0x2c>
 8008800:	3204      	adds	r2, #4
 8008802:	0094      	lsls	r4, r2, #2
 8008804:	191a      	adds	r2, r3, r4
 8008806:	1909      	adds	r1, r1, r4
 8008808:	3314      	adds	r3, #20
 800880a:	3204      	adds	r2, #4
 800880c:	3104      	adds	r1, #4
 800880e:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008812:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008816:	3a04      	subs	r2, #4
 8008818:	42a5      	cmp	r5, r4
 800881a:	d103      	bne.n	8008824 <__mcmp+0x30>
 800881c:	4293      	cmp	r3, r2
 800881e:	d3f6      	bcc.n	800880e <__mcmp+0x1a>
 8008820:	bc30      	pop	{r4, r5}
 8008822:	4770      	bx	lr
 8008824:	d301      	bcc.n	800882a <__mcmp+0x36>
 8008826:	2001      	movs	r0, #1
 8008828:	e7fa      	b.n	8008820 <__mcmp+0x2c>
 800882a:	f04f 30ff 	mov.w	r0, #4294967295
 800882e:	e7f7      	b.n	8008820 <__mcmp+0x2c>

08008830 <__mdiff>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	4607      	mov	r7, r0
 8008838:	4611      	mov	r1, r2
 800883a:	4620      	mov	r0, r4
 800883c:	4615      	mov	r5, r2
 800883e:	f7ff ffd9 	bl	80087f4 <__mcmp>
 8008842:	2800      	cmp	r0, #0
 8008844:	4606      	mov	r6, r0
 8008846:	d056      	beq.n	80088f6 <__mdiff+0xc6>
 8008848:	db50      	blt.n	80088ec <__mdiff+0xbc>
 800884a:	2600      	movs	r6, #0
 800884c:	6861      	ldr	r1, [r4, #4]
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff fd6e 	bl	8008330 <_Balloc>
 8008854:	6927      	ldr	r7, [r4, #16]
 8008856:	692b      	ldr	r3, [r5, #16]
 8008858:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
 800885c:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8008860:	60c6      	str	r6, [r0, #12]
 8008862:	f10c 0c14 	add.w	ip, ip, #20
 8008866:	f108 0814 	add.w	r8, r8, #20
 800886a:	3414      	adds	r4, #20
 800886c:	3514      	adds	r5, #20
 800886e:	f100 0914 	add.w	r9, r0, #20
 8008872:	2600      	movs	r6, #0
 8008874:	f854 3b04 	ldr.w	r3, [r4], #4
 8008878:	f855 2b04 	ldr.w	r2, [r5], #4
 800887c:	b299      	uxth	r1, r3
 800887e:	1989      	adds	r1, r1, r6
 8008880:	fa1f fa82 	uxth.w	sl, r2
 8008884:	0c12      	lsrs	r2, r2, #16
 8008886:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 800888a:	ebca 0101 	rsb	r1, sl, r1
 800888e:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8008892:	b289      	uxth	r1, r1
 8008894:	464b      	mov	r3, r9
 8008896:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800889a:	f843 1b04 	str.w	r1, [r3], #4
 800889e:	1436      	asrs	r6, r6, #16
 80088a0:	45a8      	cmp	r8, r5
 80088a2:	4622      	mov	r2, r4
 80088a4:	4699      	mov	r9, r3
 80088a6:	d8e5      	bhi.n	8008874 <__mdiff+0x44>
 80088a8:	45a4      	cmp	ip, r4
 80088aa:	4698      	mov	r8, r3
 80088ac:	d914      	bls.n	80088d8 <__mdiff+0xa8>
 80088ae:	f852 5b04 	ldr.w	r5, [r2], #4
 80088b2:	b2a9      	uxth	r1, r5
 80088b4:	198e      	adds	r6, r1, r6
 80088b6:	0c2d      	lsrs	r5, r5, #16
 80088b8:	eb05 4526 	add.w	r5, r5, r6, asr #16
 80088bc:	b2b6      	uxth	r6, r6
 80088be:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 80088c2:	142e      	asrs	r6, r5, #16
 80088c4:	4594      	cmp	ip, r2
 80088c6:	f843 1b04 	str.w	r1, [r3], #4
 80088ca:	d8f0      	bhi.n	80088ae <__mdiff+0x7e>
 80088cc:	43e3      	mvns	r3, r4
 80088ce:	4463      	add	r3, ip
 80088d0:	f023 0303 	bic.w	r3, r3, #3
 80088d4:	3304      	adds	r3, #4
 80088d6:	4443      	add	r3, r8
 80088d8:	b929      	cbnz	r1, 80088e6 <__mdiff+0xb6>
 80088da:	3b04      	subs	r3, #4
 80088dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088e0:	3f01      	subs	r7, #1
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	d0fa      	beq.n	80088dc <__mdiff+0xac>
 80088e6:	6107      	str	r7, [r0, #16]
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	4623      	mov	r3, r4
 80088ee:	2601      	movs	r6, #1
 80088f0:	462c      	mov	r4, r5
 80088f2:	461d      	mov	r5, r3
 80088f4:	e7aa      	b.n	800884c <__mdiff+0x1c>
 80088f6:	4638      	mov	r0, r7
 80088f8:	4631      	mov	r1, r6
 80088fa:	f7ff fd19 	bl	8008330 <_Balloc>
 80088fe:	2301      	movs	r3, #1
 8008900:	6103      	str	r3, [r0, #16]
 8008902:	6146      	str	r6, [r0, #20]
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008908 <__ulp>:
 8008908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800890c:	0d1b      	lsrs	r3, r3, #20
 800890e:	051b      	lsls	r3, r3, #20
 8008910:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd02      	ble.n	800891e <__ulp+0x16>
 8008918:	4619      	mov	r1, r3
 800891a:	2000      	movs	r0, #0
 800891c:	4770      	bx	lr
 800891e:	425b      	negs	r3, r3
 8008920:	151b      	asrs	r3, r3, #20
 8008922:	2100      	movs	r1, #0
 8008924:	2b13      	cmp	r3, #19
 8008926:	dd0b      	ble.n	8008940 <__ulp+0x38>
 8008928:	2b32      	cmp	r3, #50	; 0x32
 800892a:	dd02      	ble.n	8008932 <__ulp+0x2a>
 800892c:	2301      	movs	r3, #1
 800892e:	4618      	mov	r0, r3
 8008930:	4770      	bx	lr
 8008932:	2201      	movs	r2, #1
 8008934:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8008938:	fa02 f303 	lsl.w	r3, r2, r3
 800893c:	4618      	mov	r0, r3
 800893e:	4770      	bx	lr
 8008940:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008944:	fa42 f103 	asr.w	r1, r2, r3
 8008948:	2000      	movs	r0, #0
 800894a:	4770      	bx	lr

0800894c <__b2d>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	6904      	ldr	r4, [r0, #16]
 8008950:	4603      	mov	r3, r0
 8008952:	3404      	adds	r4, #4
 8008954:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008958:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800895c:	4628      	mov	r0, r5
 800895e:	460f      	mov	r7, r1
 8008960:	f103 0614 	add.w	r6, r3, #20
 8008964:	f7ff fda2 	bl	80084ac <__hi0bits>
 8008968:	f1c0 0320 	rsb	r3, r0, #32
 800896c:	280a      	cmp	r0, #10
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4623      	mov	r3, r4
 8008972:	dc17      	bgt.n	80089a4 <__b2d+0x58>
 8008974:	42a6      	cmp	r6, r4
 8008976:	bf38      	it	cc
 8008978:	f854 4c04 	ldrcc.w	r4, [r4, #-4]
 800897c:	f1c0 010b 	rsb	r1, r0, #11
 8008980:	fa25 f701 	lsr.w	r7, r5, r1
 8008984:	bf34      	ite	cc
 8008986:	fa24 f101 	lsrcc.w	r1, r4, r1
 800898a:	2100      	movcs	r1, #0
 800898c:	3015      	adds	r0, #21
 800898e:	fa05 f500 	lsl.w	r5, r5, r0
 8008992:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 8008996:	ea41 0205 	orr.w	r2, r1, r5
 800899a:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 800899e:	4610      	mov	r0, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a4:	42a6      	cmp	r6, r4
 80089a6:	d31f      	bcc.n	80089e8 <__b2d+0x9c>
 80089a8:	2100      	movs	r1, #0
 80089aa:	f1b0 070b 	subs.w	r7, r0, #11
 80089ae:	d021      	beq.n	80089f4 <__b2d+0xa8>
 80089b0:	42b4      	cmp	r4, r6
 80089b2:	bf88      	it	hi
 80089b4:	f854 4c04 	ldrhi.w	r4, [r4, #-4]
 80089b8:	fa05 f507 	lsl.w	r5, r5, r7
 80089bc:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 80089c0:	fa21 fc00 	lsr.w	ip, r1, r0
 80089c4:	bf88      	it	hi
 80089c6:	fa24 f000 	lsrhi.w	r0, r4, r0
 80089ca:	fa01 f107 	lsl.w	r1, r1, r7
 80089ce:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 80089d2:	bf98      	it	ls
 80089d4:	2000      	movls	r0, #0
 80089d6:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 80089da:	ea40 0201 	orr.w	r2, r0, r1
 80089de:	ea45 030c 	orr.w	r3, r5, ip
 80089e2:	4610      	mov	r0, r2
 80089e4:	4619      	mov	r1, r3
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e8:	3c04      	subs	r4, #4
 80089ea:	f1b0 070b 	subs.w	r7, r0, #11
 80089ee:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80089f2:	d1dd      	bne.n	80089b0 <__b2d+0x64>
 80089f4:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 80089f8:	460a      	mov	r2, r1
 80089fa:	f445 03e0 	orr.w	r3, r5, #7340032	; 0x700000
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a04 <__d2b>:
 8008a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a08:	2101      	movs	r1, #1
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	461d      	mov	r5, r3
 8008a0e:	4614      	mov	r4, r2
 8008a10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008a12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a14:	f7ff fc8c 	bl	8008330 <_Balloc>
 8008a18:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8008a1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a20:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8008a24:	4680      	mov	r8, r0
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	f1b9 0f00 	cmp.w	r9, #0
 8008a2c:	d002      	beq.n	8008a34 <__d2b+0x30>
 8008a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	d027      	beq.n	8008a88 <__d2b+0x84>
 8008a38:	a802      	add	r0, sp, #8
 8008a3a:	f840 4d08 	str.w	r4, [r0, #-8]!
 8008a3e:	4668      	mov	r0, sp
 8008a40:	f7ff fd52 	bl	80084e8 <__lo0bits>
 8008a44:	9a01      	ldr	r2, [sp, #4]
 8008a46:	4603      	mov	r3, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d134      	bne.n	8008ab6 <__d2b+0xb2>
 8008a4c:	9900      	ldr	r1, [sp, #0]
 8008a4e:	f8c8 1014 	str.w	r1, [r8, #20]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	bf0c      	ite	eq
 8008a56:	2401      	moveq	r4, #1
 8008a58:	2402      	movne	r4, #2
 8008a5a:	f8c8 2018 	str.w	r2, [r8, #24]
 8008a5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	d11d      	bne.n	8008aa4 <__d2b+0xa0>
 8008a68:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8008a6c:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8008a70:	3b02      	subs	r3, #2
 8008a72:	6910      	ldr	r0, [r2, #16]
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	f7ff fd19 	bl	80084ac <__hi0bits>
 8008a7a:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 8008a7e:	6034      	str	r4, [r6, #0]
 8008a80:	4640      	mov	r0, r8
 8008a82:	b003      	add	sp, #12
 8008a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a88:	a801      	add	r0, sp, #4
 8008a8a:	f7ff fd2d 	bl	80084e8 <__lo0bits>
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	2401      	movs	r4, #1
 8008a92:	f8c8 3014 	str.w	r3, [r8, #20]
 8008a96:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a9a:	f100 0320 	add.w	r3, r0, #32
 8008a9e:	f1b9 0f00 	cmp.w	r9, #0
 8008aa2:	d0e1      	beq.n	8008a68 <__d2b+0x64>
 8008aa4:	f5a9 6286 	sub.w	r2, r9, #1072	; 0x430
 8008aa8:	3a03      	subs	r2, #3
 8008aaa:	18d2      	adds	r2, r2, r3
 8008aac:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 8008ab0:	603a      	str	r2, [r7, #0]
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	e7e4      	b.n	8008a80 <__d2b+0x7c>
 8008ab6:	f1c0 0120 	rsb	r1, r0, #32
 8008aba:	fa02 f101 	lsl.w	r1, r2, r1
 8008abe:	fa22 f200 	lsr.w	r2, r2, r0
 8008ac2:	9800      	ldr	r0, [sp, #0]
 8008ac4:	9201      	str	r2, [sp, #4]
 8008ac6:	4301      	orrs	r1, r0
 8008ac8:	f8c8 1014 	str.w	r1, [r8, #20]
 8008acc:	e7c1      	b.n	8008a52 <__d2b+0x4e>
 8008ace:	bf00      	nop

08008ad0 <__ratio>:
 8008ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	4669      	mov	r1, sp
 8008ada:	4604      	mov	r4, r0
 8008adc:	f7ff ff36 	bl	800894c <__b2d>
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	4689      	mov	r9, r1
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	a901      	add	r1, sp, #4
 8008ae8:	f7ff ff30 	bl	800894c <__b2d>
 8008aec:	6924      	ldr	r4, [r4, #16]
 8008aee:	692a      	ldr	r2, [r5, #16]
 8008af0:	460f      	mov	r7, r1
 8008af2:	1aa4      	subs	r4, r4, r2
 8008af4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8008af8:	1acb      	subs	r3, r1, r3
 8008afa:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8008afe:	2c00      	cmp	r4, #0
 8008b00:	4606      	mov	r6, r0
 8008b02:	dd0b      	ble.n	8008b1c <__ratio+0x4c>
 8008b04:	eb09 5304 	add.w	r3, r9, r4, lsl #20
 8008b08:	4699      	mov	r9, r3
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	4632      	mov	r2, r6
 8008b10:	463b      	mov	r3, r7
 8008b12:	f7fa fe6f 	bl	80037f4 <__aeabi_ddiv>
 8008b16:	b003      	add	sp, #12
 8008b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	eba7 5104 	sub.w	r1, r7, r4, lsl #20
 8008b20:	460f      	mov	r7, r1
 8008b22:	e7f2      	b.n	8008b0a <__ratio+0x3a>

08008b24 <_mprec_log10>:
 8008b24:	2817      	cmp	r0, #23
 8008b26:	b510      	push	{r4, lr}
 8008b28:	4604      	mov	r4, r0
 8008b2a:	dd0c      	ble.n	8008b46 <_mprec_log10+0x22>
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008b3c:	f7fa fd30 	bl	80035a0 <__aeabi_dmul>
 8008b40:	3c01      	subs	r4, #1
 8008b42:	d1f7      	bne.n	8008b34 <_mprec_log10+0x10>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	4b03      	ldr	r3, [pc, #12]	; (8008b54 <_mprec_log10+0x30>)
 8008b48:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8008b4c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	bf00      	nop
 8008b54:	0800a2e8 	.word	0x0800a2e8

08008b58 <__copybits>:
 8008b58:	6913      	ldr	r3, [r2, #16]
 8008b5a:	3901      	subs	r1, #1
 8008b5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b60:	1149      	asrs	r1, r1, #5
 8008b62:	b470      	push	{r4, r5, r6}
 8008b64:	3314      	adds	r3, #20
 8008b66:	f102 0414 	add.w	r4, r2, #20
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b72:	d20c      	bcs.n	8008b8e <__copybits+0x36>
 8008b74:	4605      	mov	r5, r0
 8008b76:	f854 6b04 	ldr.w	r6, [r4], #4
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	f845 6b04 	str.w	r6, [r5], #4
 8008b80:	d8f9      	bhi.n	8008b76 <__copybits+0x1e>
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	3b15      	subs	r3, #21
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	18c0      	adds	r0, r0, r3
 8008b8e:	4281      	cmp	r1, r0
 8008b90:	d904      	bls.n	8008b9c <__copybits+0x44>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f840 3b04 	str.w	r3, [r0], #4
 8008b98:	4281      	cmp	r1, r0
 8008b9a:	d8fb      	bhi.n	8008b94 <__copybits+0x3c>
 8008b9c:	bc70      	pop	{r4, r5, r6}
 8008b9e:	4770      	bx	lr

08008ba0 <__any_on>:
 8008ba0:	6902      	ldr	r2, [r0, #16]
 8008ba2:	114b      	asrs	r3, r1, #5
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	b410      	push	{r4}
 8008ba8:	db01      	blt.n	8008bae <__any_on+0xe>
 8008baa:	461a      	mov	r2, r3
 8008bac:	dc18      	bgt.n	8008be0 <__any_on+0x40>
 8008bae:	3204      	adds	r2, #4
 8008bb0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8008bb4:	f100 0114 	add.w	r1, r0, #20
 8008bb8:	1d1c      	adds	r4, r3, #4
 8008bba:	42a1      	cmp	r1, r4
 8008bbc:	d21d      	bcs.n	8008bfa <__any_on+0x5a>
 8008bbe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008bc2:	b952      	cbnz	r2, 8008bda <__any_on+0x3a>
 8008bc4:	1a59      	subs	r1, r3, r1
 8008bc6:	3103      	adds	r1, #3
 8008bc8:	f021 0103 	bic.w	r1, r1, #3
 8008bcc:	1a59      	subs	r1, r3, r1
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d013      	beq.n	8008bfa <__any_on+0x5a>
 8008bd2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d0f9      	beq.n	8008bce <__any_on+0x2e>
 8008bda:	2001      	movs	r0, #1
 8008bdc:	bc10      	pop	{r4}
 8008bde:	4770      	bx	lr
 8008be0:	f011 011f 	ands.w	r1, r1, #31
 8008be4:	d0e3      	beq.n	8008bae <__any_on+0xe>
 8008be6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	fa23 f401 	lsr.w	r4, r3, r1
 8008bf0:	fa04 f101 	lsl.w	r1, r4, r1
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d1f0      	bne.n	8008bda <__any_on+0x3a>
 8008bf8:	e7d9      	b.n	8008bae <__any_on+0xe>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e7ee      	b.n	8008bdc <__any_on+0x3c>
 8008bfe:	bf00      	nop

08008c00 <__fpclassifyd>:
 8008c00:	460b      	mov	r3, r1
 8008c02:	b161      	cbz	r1, 8008c1e <__fpclassifyd+0x1e>
 8008c04:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008c08:	d009      	beq.n	8008c1e <__fpclassifyd+0x1e>
 8008c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c0e:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 8008c12:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8008c16:	4291      	cmp	r1, r2
 8008c18:	d805      	bhi.n	8008c26 <__fpclassifyd+0x26>
 8008c1a:	2004      	movs	r0, #4
 8008c1c:	4770      	bx	lr
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d1f3      	bne.n	8008c0a <__fpclassifyd+0xa>
 8008c22:	2002      	movs	r0, #2
 8008c24:	4770      	bx	lr
 8008c26:	f103 41fe 	add.w	r1, r3, #2130706432	; 0x7f000000
 8008c2a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d9f3      	bls.n	8008c1a <__fpclassifyd+0x1a>
 8008c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c36:	f2c0 020f 	movt	r2, #15
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d801      	bhi.n	8008c42 <__fpclassifyd+0x42>
 8008c3e:	2003      	movs	r0, #3
 8008c40:	4770      	bx	lr
 8008c42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d9f9      	bls.n	8008c3e <__fpclassifyd+0x3e>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d004      	beq.n	8008c5e <__fpclassifyd+0x5e>
 8008c54:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8008c58:	d001      	beq.n	8008c5e <__fpclassifyd+0x5e>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	4770      	bx	lr
 8008c5e:	f1d0 0001 	rsbs	r0, r0, #1
 8008c62:	bf38      	it	cc
 8008c64:	2000      	movcc	r0, #0
 8008c66:	4770      	bx	lr

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4c07      	ldr	r4, [pc, #28]	; (8008c88 <_sbrk_r+0x20>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4605      	mov	r5, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	f7fa f9ee 	bl	8003054 <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d000      	beq.n	8008c7e <_sbrk_r+0x16>
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0fb      	beq.n	8008c7c <_sbrk_r+0x14>
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20001688 	.word	0x20001688

08008c8c <strcmp>:
 8008c8c:	ea80 0201 	eor.w	r2, r0, r1
 8008c90:	f012 0f03 	tst.w	r2, #3
 8008c94:	f040 803a 	bne.w	8008d0c <strcmp_unaligned>
 8008c98:	f010 0203 	ands.w	r2, r0, #3
 8008c9c:	f020 0003 	bic.w	r0, r0, #3
 8008ca0:	f021 0103 	bic.w	r1, r1, #3
 8008ca4:	f850 cb04 	ldr.w	ip, [r0], #4
 8008ca8:	bf08      	it	eq
 8008caa:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008cae:	d00d      	beq.n	8008ccc <strcmp+0x40>
 8008cb0:	f082 0203 	eor.w	r2, r2, #3
 8008cb4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008cb8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008cbc:	fa23 f202 	lsr.w	r2, r3, r2
 8008cc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008cc4:	ea4c 0c02 	orr.w	ip, ip, r2
 8008cc8:	ea43 0302 	orr.w	r3, r3, r2
 8008ccc:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8008cd0:	459c      	cmp	ip, r3
 8008cd2:	bf01      	itttt	eq
 8008cd4:	ea22 020c 	biceq.w	r2, r2, ip
 8008cd8:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8008cdc:	f850 cb04 	ldreq.w	ip, [r0], #4
 8008ce0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008ce4:	d0f2      	beq.n	8008ccc <strcmp+0x40>
 8008ce6:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8008cea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8008cee:	2801      	cmp	r0, #1
 8008cf0:	bf28      	it	cs
 8008cf2:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8008cf6:	bf08      	it	eq
 8008cf8:	0a1b      	lsreq	r3, r3, #8
 8008cfa:	d0f4      	beq.n	8008ce6 <strcmp+0x5a>
 8008cfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008d00:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8008d04:	eba0 0003 	sub.w	r0, r0, r3
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop

08008d0c <strcmp_unaligned>:
 8008d0c:	f010 0f03 	tst.w	r0, #3
 8008d10:	d00a      	beq.n	8008d28 <strcmp_unaligned+0x1c>
 8008d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d1a:	2a01      	cmp	r2, #1
 8008d1c:	bf28      	it	cs
 8008d1e:	429a      	cmpcs	r2, r3
 8008d20:	d0f4      	beq.n	8008d0c <strcmp_unaligned>
 8008d22:	eba2 0003 	sub.w	r0, r2, r3
 8008d26:	4770      	bx	lr
 8008d28:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8008d2c:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8008d30:	f04f 0201 	mov.w	r2, #1
 8008d34:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8008d38:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8008d3c:	f001 0c03 	and.w	ip, r1, #3
 8008d40:	f021 0103 	bic.w	r1, r1, #3
 8008d44:	f850 4b04 	ldr.w	r4, [r0], #4
 8008d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d4c:	f1bc 0f02 	cmp.w	ip, #2
 8008d50:	d026      	beq.n	8008da0 <strcmp_unaligned+0x94>
 8008d52:	d84b      	bhi.n	8008dec <strcmp_unaligned+0xe0>
 8008d54:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8008d58:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8008d5c:	eba4 0302 	sub.w	r3, r4, r2
 8008d60:	ea23 0304 	bic.w	r3, r3, r4
 8008d64:	d10d      	bne.n	8008d82 <strcmp_unaligned+0x76>
 8008d66:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008d6a:	bf08      	it	eq
 8008d6c:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008d70:	d10a      	bne.n	8008d88 <strcmp_unaligned+0x7c>
 8008d72:	ea8c 0c04 	eor.w	ip, ip, r4
 8008d76:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8008d7a:	d10c      	bne.n	8008d96 <strcmp_unaligned+0x8a>
 8008d7c:	f850 4b04 	ldr.w	r4, [r0], #4
 8008d80:	e7e8      	b.n	8008d54 <strcmp_unaligned+0x48>
 8008d82:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8008d86:	e05c      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008d88:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	d152      	bne.n	8008e34 <strcmp_unaligned+0x128>
 8008d8e:	780d      	ldrb	r5, [r1, #0]
 8008d90:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008d94:	e055      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008d96:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8008d9a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8008d9e:	e050      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008da0:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8008da4:	eba4 0302 	sub.w	r3, r4, r2
 8008da8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dac:	ea23 0304 	bic.w	r3, r3, r4
 8008db0:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8008db4:	d117      	bne.n	8008de6 <strcmp_unaligned+0xda>
 8008db6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008dba:	bf08      	it	eq
 8008dbc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008dc0:	d107      	bne.n	8008dd2 <strcmp_unaligned+0xc6>
 8008dc2:	ea8c 0c04 	eor.w	ip, ip, r4
 8008dc6:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8008dca:	d108      	bne.n	8008dde <strcmp_unaligned+0xd2>
 8008dcc:	f850 4b04 	ldr.w	r4, [r0], #4
 8008dd0:	e7e6      	b.n	8008da0 <strcmp_unaligned+0x94>
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	d12e      	bne.n	8008e34 <strcmp_unaligned+0x128>
 8008dd6:	880d      	ldrh	r5, [r1, #0]
 8008dd8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008ddc:	e031      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008dde:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8008de2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008de6:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8008dea:	e02a      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008dec:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8008df0:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8008df4:	eba4 0302 	sub.w	r3, r4, r2
 8008df8:	ea23 0304 	bic.w	r3, r3, r4
 8008dfc:	d10d      	bne.n	8008e1a <strcmp_unaligned+0x10e>
 8008dfe:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8008e02:	bf08      	it	eq
 8008e04:	f851 5b04 	ldreq.w	r5, [r1], #4
 8008e08:	d10a      	bne.n	8008e20 <strcmp_unaligned+0x114>
 8008e0a:	ea8c 0c04 	eor.w	ip, ip, r4
 8008e0e:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8008e12:	d10a      	bne.n	8008e2a <strcmp_unaligned+0x11e>
 8008e14:	f850 4b04 	ldr.w	r4, [r0], #4
 8008e18:	e7e8      	b.n	8008dec <strcmp_unaligned+0xe0>
 8008e1a:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8008e1e:	e010      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008e20:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008e24:	d006      	beq.n	8008e34 <strcmp_unaligned+0x128>
 8008e26:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e2a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8008e2e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8008e32:	e006      	b.n	8008e42 <strcmp_unaligned+0x136>
 8008e34:	f04f 0000 	mov.w	r0, #0
 8008e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e3c:	f85d 5b04 	ldr.w	r5, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8008e46:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8008e4a:	2801      	cmp	r0, #1
 8008e4c:	bf28      	it	cs
 8008e4e:	4290      	cmpcs	r0, r2
 8008e50:	bf04      	itt	eq
 8008e52:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8008e56:	0a2d      	lsreq	r5, r5, #8
 8008e58:	d0f3      	beq.n	8008e42 <strcmp_unaligned+0x136>
 8008e5a:	eba2 0000 	sub.w	r0, r2, r0
 8008e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e62:	f85d 5b04 	ldr.w	r5, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <strlen>:
 8008e68:	f020 0103 	bic.w	r1, r0, #3
 8008e6c:	f010 0003 	ands.w	r0, r0, #3
 8008e70:	f1c0 0000 	rsb	r0, r0, #0
 8008e74:	f851 3b04 	ldr.w	r3, [r1], #4
 8008e78:	f100 0c04 	add.w	ip, r0, #4
 8008e7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008e80:	f06f 0200 	mvn.w	r2, #0
 8008e84:	bf1c      	itt	ne
 8008e86:	fa22 f20c 	lsrne.w	r2, r2, ip
 8008e8a:	4313      	orrne	r3, r2
 8008e8c:	f04f 0c01 	mov.w	ip, #1
 8008e90:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8008e94:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8008e98:	eba3 020c 	sub.w	r2, r3, ip
 8008e9c:	ea22 0203 	bic.w	r2, r2, r3
 8008ea0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8008ea4:	bf04      	itt	eq
 8008ea6:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008eaa:	3004      	addeq	r0, #4
 8008eac:	d0f4      	beq.n	8008e98 <strlen+0x30>
 8008eae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eb2:	bf1f      	itttt	ne
 8008eb4:	3001      	addne	r0, #1
 8008eb6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8008eba:	3001      	addne	r0, #1
 8008ebc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8008ec0:	bf18      	it	ne
 8008ec2:	3001      	addne	r0, #1
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop

08008ec8 <__ssprint_r>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	6894      	ldr	r4, [r2, #8]
 8008ece:	b083      	sub	sp, #12
 8008ed0:	4691      	mov	r9, r2
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	460d      	mov	r5, r1
 8008ed6:	6817      	ldr	r7, [r2, #0]
 8008ed8:	2c00      	cmp	r4, #0
 8008eda:	d06b      	beq.n	8008fb4 <__ssprint_r+0xec>
 8008edc:	f04f 0a00 	mov.w	sl, #0
 8008ee0:	6808      	ldr	r0, [r1, #0]
 8008ee2:	688b      	ldr	r3, [r1, #8]
 8008ee4:	4654      	mov	r4, sl
 8008ee6:	b1b4      	cbz	r4, 8008f16 <__ssprint_r+0x4e>
 8008ee8:	429c      	cmp	r4, r3
 8008eea:	461e      	mov	r6, r3
 8008eec:	4698      	mov	r8, r3
 8008eee:	d217      	bcs.n	8008f20 <__ssprint_r+0x58>
 8008ef0:	4626      	mov	r6, r4
 8008ef2:	46a0      	mov	r8, r4
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	4651      	mov	r1, sl
 8008ef8:	f000 fdaa 	bl	8009a50 <memmove>
 8008efc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8008f00:	68ab      	ldr	r3, [r5, #8]
 8008f02:	6828      	ldr	r0, [r5, #0]
 8008f04:	1b9b      	subs	r3, r3, r6
 8008f06:	4440      	add	r0, r8
 8008f08:	1b14      	subs	r4, r2, r4
 8008f0a:	60ab      	str	r3, [r5, #8]
 8008f0c:	6028      	str	r0, [r5, #0]
 8008f0e:	f8c9 4008 	str.w	r4, [r9, #8]
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d04e      	beq.n	8008fb4 <__ssprint_r+0xec>
 8008f16:	f8d7 a000 	ldr.w	sl, [r7]
 8008f1a:	687c      	ldr	r4, [r7, #4]
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	e7e2      	b.n	8008ee6 <__ssprint_r+0x1e>
 8008f20:	89ab      	ldrh	r3, [r5, #12]
 8008f22:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008f26:	d0e5      	beq.n	8008ef4 <__ssprint_r+0x2c>
 8008f28:	696e      	ldr	r6, [r5, #20]
 8008f2a:	6929      	ldr	r1, [r5, #16]
 8008f2c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8008f30:	ebc1 0800 	rsb	r8, r1, r0
 8008f34:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8008f38:	1c60      	adds	r0, r4, #1
 8008f3a:	1076      	asrs	r6, r6, #1
 8008f3c:	4440      	add	r0, r8
 8008f3e:	4286      	cmp	r6, r0
 8008f40:	4632      	mov	r2, r6
 8008f42:	bf3c      	itt	cc
 8008f44:	4606      	movcc	r6, r0
 8008f46:	4632      	movcc	r2, r6
 8008f48:	055b      	lsls	r3, r3, #21
 8008f4a:	9801      	ldr	r0, [sp, #4]
 8008f4c:	d51a      	bpl.n	8008f84 <__ssprint_r+0xbc>
 8008f4e:	4611      	mov	r1, r2
 8008f50:	f7fe fed2 	bl	8007cf8 <_malloc_r>
 8008f54:	4683      	mov	fp, r0
 8008f56:	b1f0      	cbz	r0, 8008f96 <__ssprint_r+0xce>
 8008f58:	6929      	ldr	r1, [r5, #16]
 8008f5a:	4642      	mov	r2, r8
 8008f5c:	f7ff f9a2 	bl	80082a4 <memcpy>
 8008f60:	89ab      	ldrh	r3, [r5, #12]
 8008f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6a:	81ab      	strh	r3, [r5, #12]
 8008f6c:	ebc8 0306 	rsb	r3, r8, r6
 8008f70:	eb0b 0008 	add.w	r0, fp, r8
 8008f74:	616e      	str	r6, [r5, #20]
 8008f76:	f8c5 b010 	str.w	fp, [r5, #16]
 8008f7a:	6028      	str	r0, [r5, #0]
 8008f7c:	4626      	mov	r6, r4
 8008f7e:	60ab      	str	r3, [r5, #8]
 8008f80:	46a0      	mov	r8, r4
 8008f82:	e7b7      	b.n	8008ef4 <__ssprint_r+0x2c>
 8008f84:	f000 fe04 	bl	8009b90 <_realloc_r>
 8008f88:	4683      	mov	fp, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1ee      	bne.n	8008f6c <__ssprint_r+0xa4>
 8008f8e:	6929      	ldr	r1, [r5, #16]
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	f7fe fd9d 	bl	8007ad0 <_free_r>
 8008f96:	9a01      	ldr	r2, [sp, #4]
 8008f98:	230c      	movs	r3, #12
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	89aa      	ldrh	r2, [r5, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fa4:	81aa      	strh	r2, [r5, #12]
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	f8c9 3008 	str.w	r3, [r9, #8]
 8008fae:	f8c9 3004 	str.w	r3, [r9, #4]
 8008fb2:	e002      	b.n	8008fba <__ssprint_r+0xf2>
 8008fb4:	f8c9 4004 	str.w	r4, [r9, #4]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	b003      	add	sp, #12
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fc0 <_svfiprintf_r>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	468a      	mov	sl, r1
 8008fc6:	8989      	ldrh	r1, [r1, #12]
 8008fc8:	b0ab      	sub	sp, #172	; 0xac
 8008fca:	9306      	str	r3, [sp, #24]
 8008fcc:	060b      	lsls	r3, r1, #24
 8008fce:	9007      	str	r0, [sp, #28]
 8008fd0:	d504      	bpl.n	8008fdc <_svfiprintf_r+0x1c>
 8008fd2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 84cc 	beq.w	8009974 <_svfiprintf_r+0x9b4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	a80c      	add	r0, sp, #48	; 0x30
 8008fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe2:	9026      	str	r0, [sp, #152]	; 0x98
 8008fe4:	9328      	str	r3, [sp, #160]	; 0xa0
 8008fe6:	9327      	str	r3, [sp, #156]	; 0x9c
 8008fe8:	4616      	mov	r6, r2
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	4604      	mov	r4, r0
 8008fee:	7833      	ldrb	r3, [r6, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8313 	beq.w	800961c <_svfiprintf_r+0x65c>
 8008ff6:	2b25      	cmp	r3, #37	; 0x25
 8008ff8:	f000 8310 	beq.w	800961c <_svfiprintf_r+0x65c>
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	4635      	mov	r5, r6
 8009000:	e001      	b.n	8009006 <_svfiprintf_r+0x46>
 8009002:	2b25      	cmp	r3, #37	; 0x25
 8009004:	d004      	beq.n	8009010 <_svfiprintf_r+0x50>
 8009006:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800900a:	3501      	adds	r5, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f8      	bne.n	8009002 <_svfiprintf_r+0x42>
 8009010:	1baf      	subs	r7, r5, r6
 8009012:	b177      	cbz	r7, 8009032 <_svfiprintf_r+0x72>
 8009014:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009016:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009018:	3301      	adds	r3, #1
 800901a:	19d2      	adds	r2, r2, r7
 800901c:	2b07      	cmp	r3, #7
 800901e:	e884 00c0 	stmia.w	r4, {r6, r7}
 8009022:	9228      	str	r2, [sp, #160]	; 0xa0
 8009024:	9327      	str	r3, [sp, #156]	; 0x9c
 8009026:	f300 8380 	bgt.w	800972a <_svfiprintf_r+0x76a>
 800902a:	3408      	adds	r4, #8
 800902c:	9904      	ldr	r1, [sp, #16]
 800902e:	19c9      	adds	r1, r1, r7
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	782b      	ldrb	r3, [r5, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 831e 	beq.w	8009676 <_svfiprintf_r+0x6b6>
 800903a:	2300      	movs	r3, #0
 800903c:	2200      	movs	r2, #0
 800903e:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8009042:	786b      	ldrb	r3, [r5, #1]
 8009044:	1c6e      	adds	r6, r5, #1
 8009046:	f04f 37ff 	mov.w	r7, #4294967295
 800904a:	9205      	str	r2, [sp, #20]
 800904c:	9202      	str	r2, [sp, #8]
 800904e:	3601      	adds	r6, #1
 8009050:	f1a3 0120 	sub.w	r1, r3, #32
 8009054:	2958      	cmp	r1, #88	; 0x58
 8009056:	f200 81b7 	bhi.w	80093c8 <_svfiprintf_r+0x408>
 800905a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800905e:	01af      	.short	0x01af
 8009060:	01b501b5 	.word	0x01b501b5
 8009064:	01b501a9 	.word	0x01b501a9
 8009068:	01b501b5 	.word	0x01b501b5
 800906c:	01b501b5 	.word	0x01b501b5
 8009070:	00ac01b5 	.word	0x00ac01b5
 8009074:	01b50210 	.word	0x01b50210
 8009078:	021300b8 	.word	0x021300b8
 800907c:	020a01b5 	.word	0x020a01b5
 8009080:	01f901f9 	.word	0x01f901f9
 8009084:	01f901f9 	.word	0x01f901f9
 8009088:	01f901f9 	.word	0x01f901f9
 800908c:	01f901f9 	.word	0x01f901f9
 8009090:	01b501f9 	.word	0x01b501f9
 8009094:	01b501b5 	.word	0x01b501b5
 8009098:	01b501b5 	.word	0x01b501b5
 800909c:	01b501b5 	.word	0x01b501b5
 80090a0:	01b501b5 	.word	0x01b501b5
 80090a4:	01dd01b5 	.word	0x01dd01b5
 80090a8:	01b501b5 	.word	0x01b501b5
 80090ac:	01b501b5 	.word	0x01b501b5
 80090b0:	01b501b5 	.word	0x01b501b5
 80090b4:	01b501b5 	.word	0x01b501b5
 80090b8:	01b501b5 	.word	0x01b501b5
 80090bc:	01b50098 	.word	0x01b50098
 80090c0:	01b501b5 	.word	0x01b501b5
 80090c4:	01b501b5 	.word	0x01b501b5
 80090c8:	01b50059 	.word	0x01b50059
 80090cc:	018101b5 	.word	0x018101b5
 80090d0:	01b501b5 	.word	0x01b501b5
 80090d4:	01b501b5 	.word	0x01b501b5
 80090d8:	01b501b5 	.word	0x01b501b5
 80090dc:	01b501b5 	.word	0x01b501b5
 80090e0:	01b501b5 	.word	0x01b501b5
 80090e4:	010b0122 	.word	0x010b0122
 80090e8:	01b501b5 	.word	0x01b501b5
 80090ec:	01a301b5 	.word	0x01a301b5
 80090f0:	01b5010b 	.word	0x01b5010b
 80090f4:	017701b5 	.word	0x017701b5
 80090f8:	00be01b5 	.word	0x00be01b5
 80090fc:	00f5009c 	.word	0x00f5009c
 8009100:	01b500ef 	.word	0x01b500ef
 8009104:	01b500cf 	.word	0x01b500cf
 8009108:	01b5005d 	.word	0x01b5005d
 800910c:	01c601b5 	.word	0x01c601b5
 8009110:	9802      	ldr	r0, [sp, #8]
 8009112:	f040 0010 	orr.w	r0, r0, #16
 8009116:	9002      	str	r0, [sp, #8]
 8009118:	9902      	ldr	r1, [sp, #8]
 800911a:	0689      	lsls	r1, r1, #26
 800911c:	f140 8372 	bpl.w	8009804 <_svfiprintf_r+0x844>
 8009120:	9a06      	ldr	r2, [sp, #24]
 8009122:	1dd3      	adds	r3, r2, #7
 8009124:	f023 0307 	bic.w	r3, r3, #7
 8009128:	f103 0008 	add.w	r0, r3, #8
 800912c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009130:	9006      	str	r0, [sp, #24]
 8009132:	2301      	movs	r3, #1
 8009134:	2000      	movs	r0, #0
 8009136:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 800913a:	2f00      	cmp	r7, #0
 800913c:	db03      	blt.n	8009146 <_svfiprintf_r+0x186>
 800913e:	9902      	ldr	r1, [sp, #8]
 8009140:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009144:	9102      	str	r1, [sp, #8]
 8009146:	ea58 0209 	orrs.w	r2, r8, r9
 800914a:	f040 8269 	bne.w	8009620 <_svfiprintf_r+0x660>
 800914e:	2f00      	cmp	r7, #0
 8009150:	f040 8266 	bne.w	8009620 <_svfiprintf_r+0x660>
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 81af 	bne.w	80094b8 <_svfiprintf_r+0x4f8>
 800915a:	9a02      	ldr	r2, [sp, #8]
 800915c:	07d3      	lsls	r3, r2, #31
 800915e:	f140 81ab 	bpl.w	80094b8 <_svfiprintf_r+0x4f8>
 8009162:	2330      	movs	r3, #48	; 0x30
 8009164:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 8009168:	2301      	movs	r3, #1
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	f10d 0b97 	add.w	fp, sp, #151	; 0x97
 8009170:	9708      	str	r7, [sp, #32]
 8009172:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009176:	9808      	ldr	r0, [sp, #32]
 8009178:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 800917c:	4581      	cmp	r9, r0
 800917e:	bfb8      	it	lt
 8009180:	4681      	movlt	r9, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 809f 	beq.w	80092c6 <_svfiprintf_r+0x306>
 8009188:	f109 0901 	add.w	r9, r9, #1
 800918c:	e09b      	b.n	80092c6 <_svfiprintf_r+0x306>
 800918e:	9b02      	ldr	r3, [sp, #8]
 8009190:	f043 0310 	orr.w	r3, r3, #16
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	9802      	ldr	r0, [sp, #8]
 8009198:	f010 0320 	ands.w	r3, r0, #32
 800919c:	f000 834e 	beq.w	800983c <_svfiprintf_r+0x87c>
 80091a0:	9906      	ldr	r1, [sp, #24]
 80091a2:	1dcb      	adds	r3, r1, #7
 80091a4:	f023 0307 	bic.w	r3, r3, #7
 80091a8:	f103 0208 	add.w	r2, r3, #8
 80091ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091b0:	9206      	str	r2, [sp, #24]
 80091b2:	2300      	movs	r3, #0
 80091b4:	e7be      	b.n	8009134 <_svfiprintf_r+0x174>
 80091b6:	9806      	ldr	r0, [sp, #24]
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	6800      	ldr	r0, [r0, #0]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	2800      	cmp	r0, #0
 80091c0:	9005      	str	r0, [sp, #20]
 80091c2:	f280 8356 	bge.w	8009872 <_svfiprintf_r+0x8b2>
 80091c6:	9805      	ldr	r0, [sp, #20]
 80091c8:	9106      	str	r1, [sp, #24]
 80091ca:	4240      	negs	r0, r0
 80091cc:	9005      	str	r0, [sp, #20]
 80091ce:	9902      	ldr	r1, [sp, #8]
 80091d0:	f041 0104 	orr.w	r1, r1, #4
 80091d4:	9102      	str	r1, [sp, #8]
 80091d6:	7833      	ldrb	r3, [r6, #0]
 80091d8:	e739      	b.n	800904e <_svfiprintf_r+0x8e>
 80091da:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 80091de:	9a02      	ldr	r2, [sp, #8]
 80091e0:	0693      	lsls	r3, r2, #26
 80091e2:	f100 8373 	bmi.w	80098cc <_svfiprintf_r+0x90c>
 80091e6:	9902      	ldr	r1, [sp, #8]
 80091e8:	06cd      	lsls	r5, r1, #27
 80091ea:	f140 839e 	bpl.w	800992a <_svfiprintf_r+0x96a>
 80091ee:	9a06      	ldr	r2, [sp, #24]
 80091f0:	9804      	ldr	r0, [sp, #16]
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	3204      	adds	r2, #4
 80091f6:	9206      	str	r2, [sp, #24]
 80091f8:	6018      	str	r0, [r3, #0]
 80091fa:	e6f8      	b.n	8008fee <_svfiprintf_r+0x2e>
 80091fc:	9b06      	ldr	r3, [sp, #24]
 80091fe:	2000      	movs	r0, #0
 8009200:	f8d3 b000 	ldr.w	fp, [r3]
 8009204:	1d19      	adds	r1, r3, #4
 8009206:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 800920a:	9106      	str	r1, [sp, #24]
 800920c:	f1bb 0f00 	cmp.w	fp, #0
 8009210:	f000 83bf 	beq.w	8009992 <_svfiprintf_r+0x9d2>
 8009214:	2f00      	cmp	r7, #0
 8009216:	4658      	mov	r0, fp
 8009218:	f2c0 83a5 	blt.w	8009966 <_svfiprintf_r+0x9a6>
 800921c:	2100      	movs	r1, #0
 800921e:	463a      	mov	r2, r7
 8009220:	f7fe fffe 	bl	8008220 <memchr>
 8009224:	2800      	cmp	r0, #0
 8009226:	f000 83c5 	beq.w	80099b4 <_svfiprintf_r+0x9f4>
 800922a:	ebcb 0000 	rsb	r0, fp, r0
 800922e:	42b8      	cmp	r0, r7
 8009230:	9003      	str	r0, [sp, #12]
 8009232:	dd00      	ble.n	8009236 <_svfiprintf_r+0x276>
 8009234:	9703      	str	r7, [sp, #12]
 8009236:	2300      	movs	r3, #0
 8009238:	9308      	str	r3, [sp, #32]
 800923a:	e79a      	b.n	8009172 <_svfiprintf_r+0x1b2>
 800923c:	9902      	ldr	r1, [sp, #8]
 800923e:	f041 0120 	orr.w	r1, r1, #32
 8009242:	9102      	str	r1, [sp, #8]
 8009244:	7833      	ldrb	r3, [r6, #0]
 8009246:	e702      	b.n	800904e <_svfiprintf_r+0x8e>
 8009248:	9b06      	ldr	r3, [sp, #24]
 800924a:	9906      	ldr	r1, [sp, #24]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9a02      	ldr	r2, [sp, #8]
 8009250:	4698      	mov	r8, r3
 8009252:	2330      	movs	r3, #48	; 0x30
 8009254:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8009258:	2378      	movs	r3, #120	; 0x78
 800925a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
 800925e:	4b99      	ldr	r3, [pc, #612]	; (80094c4 <_svfiprintf_r+0x504>)
 8009260:	3104      	adds	r1, #4
 8009262:	f042 0202 	orr.w	r2, r2, #2
 8009266:	930b      	str	r3, [sp, #44]	; 0x2c
 8009268:	9106      	str	r1, [sp, #24]
 800926a:	f04f 0900 	mov.w	r9, #0
 800926e:	9202      	str	r2, [sp, #8]
 8009270:	2302      	movs	r3, #2
 8009272:	e75f      	b.n	8009134 <_svfiprintf_r+0x174>
 8009274:	9902      	ldr	r1, [sp, #8]
 8009276:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 800927a:	0688      	lsls	r0, r1, #26
 800927c:	f140 80d6 	bpl.w	800942c <_svfiprintf_r+0x46c>
 8009280:	9a06      	ldr	r2, [sp, #24]
 8009282:	1dd1      	adds	r1, r2, #7
 8009284:	f021 0107 	bic.w	r1, r1, #7
 8009288:	e9d1 2300 	ldrd	r2, r3, [r1]
 800928c:	3108      	adds	r1, #8
 800928e:	9106      	str	r1, [sp, #24]
 8009290:	4690      	mov	r8, r2
 8009292:	4699      	mov	r9, r3
 8009294:	2a00      	cmp	r2, #0
 8009296:	f173 0100 	sbcs.w	r1, r3, #0
 800929a:	f2c0 830e 	blt.w	80098ba <_svfiprintf_r+0x8fa>
 800929e:	2301      	movs	r3, #1
 80092a0:	e74b      	b.n	800913a <_svfiprintf_r+0x17a>
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	9a06      	ldr	r2, [sp, #24]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f04f 0901 	mov.w	r9, #1
 80092ac:	3204      	adds	r2, #4
 80092ae:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80092b2:	2300      	movs	r3, #0
 80092b4:	9206      	str	r2, [sp, #24]
 80092b6:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 80092ba:	f8cd 900c 	str.w	r9, [sp, #12]
 80092be:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80092c2:	2300      	movs	r3, #0
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	f013 0302 	ands.w	r3, r3, #2
 80092cc:	9309      	str	r3, [sp, #36]	; 0x24
 80092ce:	9b02      	ldr	r3, [sp, #8]
 80092d0:	bf18      	it	ne
 80092d2:	f109 0902 	addne.w	r9, r9, #2
 80092d6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80092da:	930a      	str	r3, [sp, #40]	; 0x28
 80092dc:	f040 80f8 	bne.w	80094d0 <_svfiprintf_r+0x510>
 80092e0:	9805      	ldr	r0, [sp, #20]
 80092e2:	ebc9 0500 	rsb	r5, r9, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	f340 80f2 	ble.w	80094d0 <_svfiprintf_r+0x510>
 80092ec:	2d10      	cmp	r5, #16
 80092ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80092f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80092f2:	4f75      	ldr	r7, [pc, #468]	; (80094c8 <_svfiprintf_r+0x508>)
 80092f4:	dd1f      	ble.n	8009336 <_svfiprintf_r+0x376>
 80092f6:	4621      	mov	r1, r4
 80092f8:	f04f 0810 	mov.w	r8, #16
 80092fc:	9c07      	ldr	r4, [sp, #28]
 80092fe:	e003      	b.n	8009308 <_svfiprintf_r+0x348>
 8009300:	3d10      	subs	r5, #16
 8009302:	3108      	adds	r1, #8
 8009304:	2d10      	cmp	r5, #16
 8009306:	dd15      	ble.n	8009334 <_svfiprintf_r+0x374>
 8009308:	3301      	adds	r3, #1
 800930a:	3210      	adds	r2, #16
 800930c:	2b07      	cmp	r3, #7
 800930e:	e881 0180 	stmia.w	r1, {r7, r8}
 8009312:	9228      	str	r2, [sp, #160]	; 0xa0
 8009314:	9327      	str	r3, [sp, #156]	; 0x9c
 8009316:	ddf3      	ble.n	8009300 <_svfiprintf_r+0x340>
 8009318:	4620      	mov	r0, r4
 800931a:	4651      	mov	r1, sl
 800931c:	aa26      	add	r2, sp, #152	; 0x98
 800931e:	f7ff fdd3 	bl	8008ec8 <__ssprint_r>
 8009322:	2800      	cmp	r0, #0
 8009324:	f040 81ae 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 8009328:	3d10      	subs	r5, #16
 800932a:	2d10      	cmp	r5, #16
 800932c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800932e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009330:	a90c      	add	r1, sp, #48	; 0x30
 8009332:	dce9      	bgt.n	8009308 <_svfiprintf_r+0x348>
 8009334:	460c      	mov	r4, r1
 8009336:	3301      	adds	r3, #1
 8009338:	1952      	adds	r2, r2, r5
 800933a:	2b07      	cmp	r3, #7
 800933c:	6027      	str	r7, [r4, #0]
 800933e:	6065      	str	r5, [r4, #4]
 8009340:	9228      	str	r2, [sp, #160]	; 0xa0
 8009342:	9327      	str	r3, [sp, #156]	; 0x9c
 8009344:	f300 826e 	bgt.w	8009824 <_svfiprintf_r+0x864>
 8009348:	3408      	adds	r4, #8
 800934a:	e0c3      	b.n	80094d4 <_svfiprintf_r+0x514>
 800934c:	7833      	ldrb	r3, [r6, #0]
 800934e:	4631      	mov	r1, r6
 8009350:	2b6c      	cmp	r3, #108	; 0x6c
 8009352:	f000 82d6 	beq.w	8009902 <_svfiprintf_r+0x942>
 8009356:	9802      	ldr	r0, [sp, #8]
 8009358:	f040 0010 	orr.w	r0, r0, #16
 800935c:	9002      	str	r0, [sp, #8]
 800935e:	e676      	b.n	800904e <_svfiprintf_r+0x8e>
 8009360:	495a      	ldr	r1, [pc, #360]	; (80094cc <_svfiprintf_r+0x50c>)
 8009362:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 8009366:	910b      	str	r1, [sp, #44]	; 0x2c
 8009368:	9902      	ldr	r1, [sp, #8]
 800936a:	0688      	lsls	r0, r1, #26
 800936c:	d544      	bpl.n	80093f8 <_svfiprintf_r+0x438>
 800936e:	9806      	ldr	r0, [sp, #24]
 8009370:	1dc2      	adds	r2, r0, #7
 8009372:	f022 0207 	bic.w	r2, r2, #7
 8009376:	f102 0108 	add.w	r1, r2, #8
 800937a:	9106      	str	r1, [sp, #24]
 800937c:	e9d2 8900 	ldrd	r8, r9, [r2]
 8009380:	9902      	ldr	r1, [sp, #8]
 8009382:	07c8      	lsls	r0, r1, #31
 8009384:	f140 809c 	bpl.w	80094c0 <_svfiprintf_r+0x500>
 8009388:	ea58 0209 	orrs.w	r2, r8, r9
 800938c:	f000 8098 	beq.w	80094c0 <_svfiprintf_r+0x500>
 8009390:	2230      	movs	r2, #48	; 0x30
 8009392:	f041 0102 	orr.w	r1, r1, #2
 8009396:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
 800939a:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
 800939e:	9102      	str	r1, [sp, #8]
 80093a0:	2302      	movs	r3, #2
 80093a2:	e6c7      	b.n	8009134 <_svfiprintf_r+0x174>
 80093a4:	9902      	ldr	r1, [sp, #8]
 80093a6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80093aa:	9102      	str	r1, [sp, #8]
 80093ac:	7833      	ldrb	r3, [r6, #0]
 80093ae:	e64e      	b.n	800904e <_svfiprintf_r+0x8e>
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	f043 0301 	orr.w	r3, r3, #1
 80093b6:	9302      	str	r3, [sp, #8]
 80093b8:	7833      	ldrb	r3, [r6, #0]
 80093ba:	e648      	b.n	800904e <_svfiprintf_r+0x8e>
 80093bc:	7833      	ldrb	r3, [r6, #0]
 80093be:	2a00      	cmp	r2, #0
 80093c0:	f47f ae45 	bne.w	800904e <_svfiprintf_r+0x8e>
 80093c4:	2220      	movs	r2, #32
 80093c6:	e642      	b.n	800904e <_svfiprintf_r+0x8e>
 80093c8:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8152 	beq.w	8009676 <_svfiprintf_r+0x6b6>
 80093d2:	f04f 0901 	mov.w	r9, #1
 80093d6:	2000      	movs	r0, #0
 80093d8:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80093dc:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 80093e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80093e4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80093e8:	e76b      	b.n	80092c2 <_svfiprintf_r+0x302>
 80093ea:	4836      	ldr	r0, [pc, #216]	; (80094c4 <_svfiprintf_r+0x504>)
 80093ec:	9902      	ldr	r1, [sp, #8]
 80093ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80093f0:	0688      	lsls	r0, r1, #26
 80093f2:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 80093f6:	d4ba      	bmi.n	800936e <_svfiprintf_r+0x3ae>
 80093f8:	9a02      	ldr	r2, [sp, #8]
 80093fa:	06d1      	lsls	r1, r2, #27
 80093fc:	f100 8247 	bmi.w	800988e <_svfiprintf_r+0x8ce>
 8009400:	9902      	ldr	r1, [sp, #8]
 8009402:	064a      	lsls	r2, r1, #25
 8009404:	f140 8243 	bpl.w	800988e <_svfiprintf_r+0x8ce>
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	f8b2 8000 	ldrh.w	r8, [r2]
 8009412:	3204      	adds	r2, #4
 8009414:	9206      	str	r2, [sp, #24]
 8009416:	e7b3      	b.n	8009380 <_svfiprintf_r+0x3c0>
 8009418:	9802      	ldr	r0, [sp, #8]
 800941a:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 800941e:	f040 0010 	orr.w	r0, r0, #16
 8009422:	9002      	str	r0, [sp, #8]
 8009424:	9902      	ldr	r1, [sp, #8]
 8009426:	0688      	lsls	r0, r1, #26
 8009428:	f53f af2a 	bmi.w	8009280 <_svfiprintf_r+0x2c0>
 800942c:	9b02      	ldr	r3, [sp, #8]
 800942e:	06d9      	lsls	r1, r3, #27
 8009430:	f100 8235 	bmi.w	800989e <_svfiprintf_r+0x8de>
 8009434:	9902      	ldr	r1, [sp, #8]
 8009436:	064a      	lsls	r2, r1, #25
 8009438:	f140 8231 	bpl.w	800989e <_svfiprintf_r+0x8de>
 800943c:	9a06      	ldr	r2, [sp, #24]
 800943e:	f9b2 8000 	ldrsh.w	r8, [r2]
 8009442:	3204      	adds	r2, #4
 8009444:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8009448:	9206      	str	r2, [sp, #24]
 800944a:	464b      	mov	r3, r9
 800944c:	4642      	mov	r2, r8
 800944e:	e721      	b.n	8009294 <_svfiprintf_r+0x2d4>
 8009450:	4630      	mov	r0, r6
 8009452:	2100      	movs	r1, #0
 8009454:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009458:	f810 3b01 	ldrb.w	r3, [r0], #1
 800945c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009460:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009464:	2d09      	cmp	r5, #9
 8009466:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800946a:	4606      	mov	r6, r0
 800946c:	d9f2      	bls.n	8009454 <_svfiprintf_r+0x494>
 800946e:	9105      	str	r1, [sp, #20]
 8009470:	e5ee      	b.n	8009050 <_svfiprintf_r+0x90>
 8009472:	9802      	ldr	r0, [sp, #8]
 8009474:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8009478:	9002      	str	r0, [sp, #8]
 800947a:	7833      	ldrb	r3, [r6, #0]
 800947c:	e5e7      	b.n	800904e <_svfiprintf_r+0x8e>
 800947e:	7833      	ldrb	r3, [r6, #0]
 8009480:	222b      	movs	r2, #43	; 0x2b
 8009482:	e5e4      	b.n	800904e <_svfiprintf_r+0x8e>
 8009484:	4630      	mov	r0, r6
 8009486:	f810 3b01 	ldrb.w	r3, [r0], #1
 800948a:	2b2a      	cmp	r3, #42	; 0x2a
 800948c:	f000 829a 	beq.w	80099c4 <_svfiprintf_r+0xa04>
 8009490:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009494:	2909      	cmp	r1, #9
 8009496:	f200 8291 	bhi.w	80099bc <_svfiprintf_r+0x9fc>
 800949a:	2700      	movs	r7, #0
 800949c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80094a0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80094a4:	eb01 0747 	add.w	r7, r1, r7, lsl #1
 80094a8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094ac:	2909      	cmp	r1, #9
 80094ae:	4606      	mov	r6, r0
 80094b0:	d9f4      	bls.n	800949c <_svfiprintf_r+0x4dc>
 80094b2:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 80094b6:	e5cb      	b.n	8009050 <_svfiprintf_r+0x90>
 80094b8:	9703      	str	r7, [sp, #12]
 80094ba:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
 80094be:	e657      	b.n	8009170 <_svfiprintf_r+0x1b0>
 80094c0:	2302      	movs	r3, #2
 80094c2:	e637      	b.n	8009134 <_svfiprintf_r+0x174>
 80094c4:	0800a290 	.word	0x0800a290
 80094c8:	0800a41c 	.word	0x0800a41c
 80094cc:	0800a27c 	.word	0x0800a27c
 80094d0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80094d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80094d4:	f89d 10a7 	ldrb.w	r1, [sp, #167]	; 0xa7
 80094d8:	b161      	cbz	r1, 80094f4 <_svfiprintf_r+0x534>
 80094da:	3301      	adds	r3, #1
 80094dc:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 80094e0:	3201      	adds	r2, #1
 80094e2:	6021      	str	r1, [r4, #0]
 80094e4:	2101      	movs	r1, #1
 80094e6:	2b07      	cmp	r3, #7
 80094e8:	6061      	str	r1, [r4, #4]
 80094ea:	9228      	str	r2, [sp, #160]	; 0xa0
 80094ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80094ee:	f300 8171 	bgt.w	80097d4 <_svfiprintf_r+0x814>
 80094f2:	3408      	adds	r4, #8
 80094f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f6:	b159      	cbz	r1, 8009510 <_svfiprintf_r+0x550>
 80094f8:	3301      	adds	r3, #1
 80094fa:	a929      	add	r1, sp, #164	; 0xa4
 80094fc:	3202      	adds	r2, #2
 80094fe:	6021      	str	r1, [r4, #0]
 8009500:	2102      	movs	r1, #2
 8009502:	2b07      	cmp	r3, #7
 8009504:	6061      	str	r1, [r4, #4]
 8009506:	9228      	str	r2, [sp, #160]	; 0xa0
 8009508:	9327      	str	r3, [sp, #156]	; 0x9c
 800950a:	f300 816f 	bgt.w	80097ec <_svfiprintf_r+0x82c>
 800950e:	3408      	adds	r4, #8
 8009510:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009512:	2880      	cmp	r0, #128	; 0x80
 8009514:	f000 80c3 	beq.w	800969e <_svfiprintf_r+0x6de>
 8009518:	9808      	ldr	r0, [sp, #32]
 800951a:	9903      	ldr	r1, [sp, #12]
 800951c:	1a45      	subs	r5, r0, r1
 800951e:	2d00      	cmp	r5, #0
 8009520:	dd2c      	ble.n	800957c <_svfiprintf_r+0x5bc>
 8009522:	2d10      	cmp	r5, #16
 8009524:	4f98      	ldr	r7, [pc, #608]	; (8009788 <_svfiprintf_r+0x7c8>)
 8009526:	dd1f      	ble.n	8009568 <_svfiprintf_r+0x5a8>
 8009528:	4621      	mov	r1, r4
 800952a:	f04f 0810 	mov.w	r8, #16
 800952e:	9c07      	ldr	r4, [sp, #28]
 8009530:	e003      	b.n	800953a <_svfiprintf_r+0x57a>
 8009532:	3d10      	subs	r5, #16
 8009534:	3108      	adds	r1, #8
 8009536:	2d10      	cmp	r5, #16
 8009538:	dd15      	ble.n	8009566 <_svfiprintf_r+0x5a6>
 800953a:	3301      	adds	r3, #1
 800953c:	3210      	adds	r2, #16
 800953e:	2b07      	cmp	r3, #7
 8009540:	e881 0180 	stmia.w	r1, {r7, r8}
 8009544:	9228      	str	r2, [sp, #160]	; 0xa0
 8009546:	9327      	str	r3, [sp, #156]	; 0x9c
 8009548:	ddf3      	ble.n	8009532 <_svfiprintf_r+0x572>
 800954a:	4620      	mov	r0, r4
 800954c:	4651      	mov	r1, sl
 800954e:	aa26      	add	r2, sp, #152	; 0x98
 8009550:	f7ff fcba 	bl	8008ec8 <__ssprint_r>
 8009554:	2800      	cmp	r0, #0
 8009556:	f040 8095 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 800955a:	3d10      	subs	r5, #16
 800955c:	2d10      	cmp	r5, #16
 800955e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009560:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009562:	a90c      	add	r1, sp, #48	; 0x30
 8009564:	dce9      	bgt.n	800953a <_svfiprintf_r+0x57a>
 8009566:	460c      	mov	r4, r1
 8009568:	3301      	adds	r3, #1
 800956a:	1952      	adds	r2, r2, r5
 800956c:	2b07      	cmp	r3, #7
 800956e:	6027      	str	r7, [r4, #0]
 8009570:	6065      	str	r5, [r4, #4]
 8009572:	9228      	str	r2, [sp, #160]	; 0xa0
 8009574:	9327      	str	r3, [sp, #156]	; 0x9c
 8009576:	f300 80e1 	bgt.w	800973c <_svfiprintf_r+0x77c>
 800957a:	3408      	adds	r4, #8
 800957c:	9803      	ldr	r0, [sp, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	1812      	adds	r2, r2, r0
 8009582:	2b07      	cmp	r3, #7
 8009584:	f8c4 b000 	str.w	fp, [r4]
 8009588:	6060      	str	r0, [r4, #4]
 800958a:	9228      	str	r2, [sp, #160]	; 0xa0
 800958c:	9327      	str	r3, [sp, #156]	; 0x9c
 800958e:	f300 80b9 	bgt.w	8009704 <_svfiprintf_r+0x744>
 8009592:	f104 0108 	add.w	r1, r4, #8
 8009596:	9b02      	ldr	r3, [sp, #8]
 8009598:	0758      	lsls	r0, r3, #29
 800959a:	d52e      	bpl.n	80095fa <_svfiprintf_r+0x63a>
 800959c:	9805      	ldr	r0, [sp, #20]
 800959e:	ebc9 0500 	rsb	r5, r9, r0
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	dd29      	ble.n	80095fa <_svfiprintf_r+0x63a>
 80095a6:	2d10      	cmp	r5, #16
 80095a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80095aa:	4f78      	ldr	r7, [pc, #480]	; (800978c <_svfiprintf_r+0x7cc>)
 80095ac:	dd1c      	ble.n	80095e8 <_svfiprintf_r+0x628>
 80095ae:	2410      	movs	r4, #16
 80095b0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80095b4:	e003      	b.n	80095be <_svfiprintf_r+0x5fe>
 80095b6:	3d10      	subs	r5, #16
 80095b8:	3108      	adds	r1, #8
 80095ba:	2d10      	cmp	r5, #16
 80095bc:	dd14      	ble.n	80095e8 <_svfiprintf_r+0x628>
 80095be:	3301      	adds	r3, #1
 80095c0:	3210      	adds	r2, #16
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	600f      	str	r7, [r1, #0]
 80095c6:	604c      	str	r4, [r1, #4]
 80095c8:	9228      	str	r2, [sp, #160]	; 0xa0
 80095ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80095cc:	ddf3      	ble.n	80095b6 <_svfiprintf_r+0x5f6>
 80095ce:	4640      	mov	r0, r8
 80095d0:	4651      	mov	r1, sl
 80095d2:	aa26      	add	r2, sp, #152	; 0x98
 80095d4:	f7ff fc78 	bl	8008ec8 <__ssprint_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d153      	bne.n	8009684 <_svfiprintf_r+0x6c4>
 80095dc:	3d10      	subs	r5, #16
 80095de:	2d10      	cmp	r5, #16
 80095e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80095e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80095e4:	a90c      	add	r1, sp, #48	; 0x30
 80095e6:	dcea      	bgt.n	80095be <_svfiprintf_r+0x5fe>
 80095e8:	3301      	adds	r3, #1
 80095ea:	18aa      	adds	r2, r5, r2
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	600f      	str	r7, [r1, #0]
 80095f0:	604d      	str	r5, [r1, #4]
 80095f2:	9228      	str	r2, [sp, #160]	; 0xa0
 80095f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80095f6:	f300 8140 	bgt.w	800987a <_svfiprintf_r+0x8ba>
 80095fa:	9904      	ldr	r1, [sp, #16]
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	4599      	cmp	r9, r3
 8009600:	bfac      	ite	ge
 8009602:	4449      	addge	r1, r9
 8009604:	18c9      	addlt	r1, r1, r3
 8009606:	9104      	str	r1, [sp, #16]
 8009608:	2a00      	cmp	r2, #0
 800960a:	f040 8085 	bne.w	8009718 <_svfiprintf_r+0x758>
 800960e:	7833      	ldrb	r3, [r6, #0]
 8009610:	2000      	movs	r0, #0
 8009612:	9027      	str	r0, [sp, #156]	; 0x9c
 8009614:	ac0c      	add	r4, sp, #48	; 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	f47f aced 	bne.w	8008ff6 <_svfiprintf_r+0x36>
 800961c:	4635      	mov	r5, r6
 800961e:	e508      	b.n	8009032 <_svfiprintf_r+0x72>
 8009620:	2b01      	cmp	r3, #1
 8009622:	f000 80b5 	beq.w	8009790 <_svfiprintf_r+0x7d0>
 8009626:	2b02      	cmp	r3, #2
 8009628:	f000 8093 	beq.w	8009752 <_svfiprintf_r+0x792>
 800962c:	ad26      	add	r5, sp, #152	; 0x98
 800962e:	462a      	mov	r2, r5
 8009630:	e000      	b.n	8009634 <_svfiprintf_r+0x674>
 8009632:	465a      	mov	r2, fp
 8009634:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8009638:	ea43 7349 	orr.w	r3, r3, r9, lsl #29
 800963c:	ea4f 01d9 	mov.w	r1, r9, lsr #3
 8009640:	f008 0007 	and.w	r0, r8, #7
 8009644:	4689      	mov	r9, r1
 8009646:	4698      	mov	r8, r3
 8009648:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800964c:	ea58 0009 	orrs.w	r0, r8, r9
 8009650:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009654:	f102 3bff 	add.w	fp, r2, #4294967295
 8009658:	d1eb      	bne.n	8009632 <_svfiprintf_r+0x672>
 800965a:	9902      	ldr	r1, [sp, #8]
 800965c:	07c9      	lsls	r1, r1, #31
 800965e:	d506      	bpl.n	800966e <_svfiprintf_r+0x6ae>
 8009660:	2b30      	cmp	r3, #48	; 0x30
 8009662:	d004      	beq.n	800966e <_svfiprintf_r+0x6ae>
 8009664:	2330      	movs	r3, #48	; 0x30
 8009666:	f1a2 0b02 	sub.w	fp, r2, #2
 800966a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800966e:	ebcb 0505 	rsb	r5, fp, r5
 8009672:	9503      	str	r5, [sp, #12]
 8009674:	e57c      	b.n	8009170 <_svfiprintf_r+0x1b0>
 8009676:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009678:	b123      	cbz	r3, 8009684 <_svfiprintf_r+0x6c4>
 800967a:	9807      	ldr	r0, [sp, #28]
 800967c:	4651      	mov	r1, sl
 800967e:	aa26      	add	r2, sp, #152	; 0x98
 8009680:	f7ff fc22 	bl	8008ec8 <__ssprint_r>
 8009684:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009688:	9904      	ldr	r1, [sp, #16]
 800968a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800968e:	bf18      	it	ne
 8009690:	f04f 31ff 	movne.w	r1, #4294967295
 8009694:	9104      	str	r1, [sp, #16]
 8009696:	9804      	ldr	r0, [sp, #16]
 8009698:	b02b      	add	sp, #172	; 0xac
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	9905      	ldr	r1, [sp, #20]
 80096a0:	ebc9 0501 	rsb	r5, r9, r1
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	f77f af37 	ble.w	8009518 <_svfiprintf_r+0x558>
 80096aa:	2d10      	cmp	r5, #16
 80096ac:	4f36      	ldr	r7, [pc, #216]	; (8009788 <_svfiprintf_r+0x7c8>)
 80096ae:	dd1e      	ble.n	80096ee <_svfiprintf_r+0x72e>
 80096b0:	4621      	mov	r1, r4
 80096b2:	f04f 0810 	mov.w	r8, #16
 80096b6:	9c07      	ldr	r4, [sp, #28]
 80096b8:	e003      	b.n	80096c2 <_svfiprintf_r+0x702>
 80096ba:	3d10      	subs	r5, #16
 80096bc:	3108      	adds	r1, #8
 80096be:	2d10      	cmp	r5, #16
 80096c0:	dd14      	ble.n	80096ec <_svfiprintf_r+0x72c>
 80096c2:	3301      	adds	r3, #1
 80096c4:	3210      	adds	r2, #16
 80096c6:	2b07      	cmp	r3, #7
 80096c8:	e881 0180 	stmia.w	r1, {r7, r8}
 80096cc:	9228      	str	r2, [sp, #160]	; 0xa0
 80096ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80096d0:	ddf3      	ble.n	80096ba <_svfiprintf_r+0x6fa>
 80096d2:	4620      	mov	r0, r4
 80096d4:	4651      	mov	r1, sl
 80096d6:	aa26      	add	r2, sp, #152	; 0x98
 80096d8:	f7ff fbf6 	bl	8008ec8 <__ssprint_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d1d1      	bne.n	8009684 <_svfiprintf_r+0x6c4>
 80096e0:	3d10      	subs	r5, #16
 80096e2:	2d10      	cmp	r5, #16
 80096e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80096e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80096e8:	a90c      	add	r1, sp, #48	; 0x30
 80096ea:	dcea      	bgt.n	80096c2 <_svfiprintf_r+0x702>
 80096ec:	460c      	mov	r4, r1
 80096ee:	3301      	adds	r3, #1
 80096f0:	1952      	adds	r2, r2, r5
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	6027      	str	r7, [r4, #0]
 80096f6:	6065      	str	r5, [r4, #4]
 80096f8:	9228      	str	r2, [sp, #160]	; 0xa0
 80096fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80096fc:	f300 8109 	bgt.w	8009912 <_svfiprintf_r+0x952>
 8009700:	3408      	adds	r4, #8
 8009702:	e709      	b.n	8009518 <_svfiprintf_r+0x558>
 8009704:	9807      	ldr	r0, [sp, #28]
 8009706:	4651      	mov	r1, sl
 8009708:	aa26      	add	r2, sp, #152	; 0x98
 800970a:	f7ff fbdd 	bl	8008ec8 <__ssprint_r>
 800970e:	2800      	cmp	r0, #0
 8009710:	d1b8      	bne.n	8009684 <_svfiprintf_r+0x6c4>
 8009712:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009714:	a90c      	add	r1, sp, #48	; 0x30
 8009716:	e73e      	b.n	8009596 <_svfiprintf_r+0x5d6>
 8009718:	9807      	ldr	r0, [sp, #28]
 800971a:	4651      	mov	r1, sl
 800971c:	aa26      	add	r2, sp, #152	; 0x98
 800971e:	f7ff fbd3 	bl	8008ec8 <__ssprint_r>
 8009722:	2800      	cmp	r0, #0
 8009724:	f43f af73 	beq.w	800960e <_svfiprintf_r+0x64e>
 8009728:	e7ac      	b.n	8009684 <_svfiprintf_r+0x6c4>
 800972a:	9807      	ldr	r0, [sp, #28]
 800972c:	4651      	mov	r1, sl
 800972e:	aa26      	add	r2, sp, #152	; 0x98
 8009730:	f7ff fbca 	bl	8008ec8 <__ssprint_r>
 8009734:	2800      	cmp	r0, #0
 8009736:	d1a5      	bne.n	8009684 <_svfiprintf_r+0x6c4>
 8009738:	ac0c      	add	r4, sp, #48	; 0x30
 800973a:	e477      	b.n	800902c <_svfiprintf_r+0x6c>
 800973c:	9807      	ldr	r0, [sp, #28]
 800973e:	4651      	mov	r1, sl
 8009740:	aa26      	add	r2, sp, #152	; 0x98
 8009742:	f7ff fbc1 	bl	8008ec8 <__ssprint_r>
 8009746:	2800      	cmp	r0, #0
 8009748:	d19c      	bne.n	8009684 <_svfiprintf_r+0x6c4>
 800974a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800974c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800974e:	ac0c      	add	r4, sp, #48	; 0x30
 8009750:	e714      	b.n	800957c <_svfiprintf_r+0x5bc>
 8009752:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009754:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8009758:	ea4f 1218 	mov.w	r2, r8, lsr #4
 800975c:	f008 010f 	and.w	r1, r8, #15
 8009760:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
 8009764:	5c69      	ldrb	r1, [r5, r1]
 8009766:	ea4f 1019 	mov.w	r0, r9, lsr #4
 800976a:	4690      	mov	r8, r2
 800976c:	4681      	mov	r9, r0
 800976e:	7019      	strb	r1, [r3, #0]
 8009770:	ea58 0109 	orrs.w	r1, r8, r9
 8009774:	469b      	mov	fp, r3
 8009776:	f103 33ff 	add.w	r3, r3, #4294967295
 800977a:	d1ed      	bne.n	8009758 <_svfiprintf_r+0x798>
 800977c:	ab26      	add	r3, sp, #152	; 0x98
 800977e:	ebcb 0303 	rsb	r3, fp, r3
 8009782:	9303      	str	r3, [sp, #12]
 8009784:	e4f4      	b.n	8009170 <_svfiprintf_r+0x1b0>
 8009786:	bf00      	nop
 8009788:	0800a40c 	.word	0x0800a40c
 800978c:	0800a41c 	.word	0x0800a41c
 8009790:	f1b8 0f0a 	cmp.w	r8, #10
 8009794:	f179 0200 	sbcs.w	r2, r9, #0
 8009798:	d362      	bcc.n	8009860 <_svfiprintf_r+0x8a0>
 800979a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 800979e:	4640      	mov	r0, r8
 80097a0:	4649      	mov	r1, r9
 80097a2:	220a      	movs	r2, #10
 80097a4:	2300      	movs	r3, #0
 80097a6:	f7fa f9bd 	bl	8003b24 <__aeabi_uldivmod>
 80097aa:	3230      	adds	r2, #48	; 0x30
 80097ac:	702a      	strb	r2, [r5, #0]
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	220a      	movs	r2, #10
 80097b4:	2300      	movs	r3, #0
 80097b6:	f7fa f9b5 	bl	8003b24 <__aeabi_uldivmod>
 80097ba:	4680      	mov	r8, r0
 80097bc:	4689      	mov	r9, r1
 80097be:	ea58 0009 	orrs.w	r0, r8, r9
 80097c2:	46ab      	mov	fp, r5
 80097c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80097c8:	d1e9      	bne.n	800979e <_svfiprintf_r+0x7de>
 80097ca:	ab26      	add	r3, sp, #152	; 0x98
 80097cc:	ebcb 0303 	rsb	r3, fp, r3
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	e4cd      	b.n	8009170 <_svfiprintf_r+0x1b0>
 80097d4:	9807      	ldr	r0, [sp, #28]
 80097d6:	4651      	mov	r1, sl
 80097d8:	aa26      	add	r2, sp, #152	; 0x98
 80097da:	f7ff fb75 	bl	8008ec8 <__ssprint_r>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f47f af50 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 80097e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80097e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80097e8:	ac0c      	add	r4, sp, #48	; 0x30
 80097ea:	e683      	b.n	80094f4 <_svfiprintf_r+0x534>
 80097ec:	9807      	ldr	r0, [sp, #28]
 80097ee:	4651      	mov	r1, sl
 80097f0:	aa26      	add	r2, sp, #152	; 0x98
 80097f2:	f7ff fb69 	bl	8008ec8 <__ssprint_r>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f47f af44 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 80097fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80097fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009800:	ac0c      	add	r4, sp, #48	; 0x30
 8009802:	e685      	b.n	8009510 <_svfiprintf_r+0x550>
 8009804:	9902      	ldr	r1, [sp, #8]
 8009806:	06ca      	lsls	r2, r1, #27
 8009808:	d46a      	bmi.n	80098e0 <_svfiprintf_r+0x920>
 800980a:	9b02      	ldr	r3, [sp, #8]
 800980c:	065b      	lsls	r3, r3, #25
 800980e:	f140 8097 	bpl.w	8009940 <_svfiprintf_r+0x980>
 8009812:	9806      	ldr	r0, [sp, #24]
 8009814:	2301      	movs	r3, #1
 8009816:	f8b0 8000 	ldrh.w	r8, [r0]
 800981a:	3004      	adds	r0, #4
 800981c:	f04f 0900 	mov.w	r9, #0
 8009820:	9006      	str	r0, [sp, #24]
 8009822:	e487      	b.n	8009134 <_svfiprintf_r+0x174>
 8009824:	9807      	ldr	r0, [sp, #28]
 8009826:	4651      	mov	r1, sl
 8009828:	aa26      	add	r2, sp, #152	; 0x98
 800982a:	f7ff fb4d 	bl	8008ec8 <__ssprint_r>
 800982e:	2800      	cmp	r0, #0
 8009830:	f47f af28 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 8009834:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009836:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009838:	ac0c      	add	r4, sp, #48	; 0x30
 800983a:	e64b      	b.n	80094d4 <_svfiprintf_r+0x514>
 800983c:	9802      	ldr	r0, [sp, #8]
 800983e:	f010 0210 	ands.w	r2, r0, #16
 8009842:	d156      	bne.n	80098f2 <_svfiprintf_r+0x932>
 8009844:	9802      	ldr	r0, [sp, #8]
 8009846:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800984a:	f000 8083 	beq.w	8009954 <_svfiprintf_r+0x994>
 800984e:	9906      	ldr	r1, [sp, #24]
 8009850:	4613      	mov	r3, r2
 8009852:	f8b1 8000 	ldrh.w	r8, [r1]
 8009856:	3104      	adds	r1, #4
 8009858:	f04f 0900 	mov.w	r9, #0
 800985c:	9106      	str	r1, [sp, #24]
 800985e:	e469      	b.n	8009134 <_svfiprintf_r+0x174>
 8009860:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009864:	2301      	movs	r3, #1
 8009866:	f88d 8097 	strb.w	r8, [sp, #151]	; 0x97
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	f10d 0b97 	add.w	fp, sp, #151	; 0x97
 8009870:	e47e      	b.n	8009170 <_svfiprintf_r+0x1b0>
 8009872:	7833      	ldrb	r3, [r6, #0]
 8009874:	9106      	str	r1, [sp, #24]
 8009876:	f7ff bbea 	b.w	800904e <_svfiprintf_r+0x8e>
 800987a:	9807      	ldr	r0, [sp, #28]
 800987c:	4651      	mov	r1, sl
 800987e:	aa26      	add	r2, sp, #152	; 0x98
 8009880:	f7ff fb22 	bl	8008ec8 <__ssprint_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	f47f aefd 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 800988a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800988c:	e6b5      	b.n	80095fa <_svfiprintf_r+0x63a>
 800988e:	9806      	ldr	r0, [sp, #24]
 8009890:	f04f 0900 	mov.w	r9, #0
 8009894:	6802      	ldr	r2, [r0, #0]
 8009896:	3004      	adds	r0, #4
 8009898:	9006      	str	r0, [sp, #24]
 800989a:	4690      	mov	r8, r2
 800989c:	e570      	b.n	8009380 <_svfiprintf_r+0x3c0>
 800989e:	9806      	ldr	r0, [sp, #24]
 80098a0:	6803      	ldr	r3, [r0, #0]
 80098a2:	3004      	adds	r0, #4
 80098a4:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80098a8:	461a      	mov	r2, r3
 80098aa:	4698      	mov	r8, r3
 80098ac:	464b      	mov	r3, r9
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	f173 0100 	sbcs.w	r1, r3, #0
 80098b4:	9006      	str	r0, [sp, #24]
 80098b6:	f6bf acf2 	bge.w	800929e <_svfiprintf_r+0x2de>
 80098ba:	232d      	movs	r3, #45	; 0x2d
 80098bc:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 80098c0:	f1d8 0800 	rsbs	r8, r8, #0
 80098c4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80098c8:	2301      	movs	r3, #1
 80098ca:	e436      	b.n	800913a <_svfiprintf_r+0x17a>
 80098cc:	9806      	ldr	r0, [sp, #24]
 80098ce:	9a04      	ldr	r2, [sp, #16]
 80098d0:	6803      	ldr	r3, [r0, #0]
 80098d2:	17d1      	asrs	r1, r2, #31
 80098d4:	3004      	adds	r0, #4
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	6059      	str	r1, [r3, #4]
 80098da:	9006      	str	r0, [sp, #24]
 80098dc:	f7ff bb87 	b.w	8008fee <_svfiprintf_r+0x2e>
 80098e0:	9a06      	ldr	r2, [sp, #24]
 80098e2:	f04f 0900 	mov.w	r9, #0
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	3204      	adds	r2, #4
 80098ea:	4698      	mov	r8, r3
 80098ec:	9206      	str	r2, [sp, #24]
 80098ee:	2301      	movs	r3, #1
 80098f0:	e420      	b.n	8009134 <_svfiprintf_r+0x174>
 80098f2:	9906      	ldr	r1, [sp, #24]
 80098f4:	f04f 0900 	mov.w	r9, #0
 80098f8:	680a      	ldr	r2, [r1, #0]
 80098fa:	3104      	adds	r1, #4
 80098fc:	9106      	str	r1, [sp, #24]
 80098fe:	4690      	mov	r8, r2
 8009900:	e418      	b.n	8009134 <_svfiprintf_r+0x174>
 8009902:	9b02      	ldr	r3, [sp, #8]
 8009904:	3601      	adds	r6, #1
 8009906:	f043 0320 	orr.w	r3, r3, #32
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	784b      	ldrb	r3, [r1, #1]
 800990e:	f7ff bb9e 	b.w	800904e <_svfiprintf_r+0x8e>
 8009912:	9807      	ldr	r0, [sp, #28]
 8009914:	4651      	mov	r1, sl
 8009916:	aa26      	add	r2, sp, #152	; 0x98
 8009918:	f7ff fad6 	bl	8008ec8 <__ssprint_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	f47f aeb1 	bne.w	8009684 <_svfiprintf_r+0x6c4>
 8009922:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009924:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009926:	ac0c      	add	r4, sp, #48	; 0x30
 8009928:	e5f6      	b.n	8009518 <_svfiprintf_r+0x558>
 800992a:	9902      	ldr	r1, [sp, #8]
 800992c:	0648      	lsls	r0, r1, #25
 800992e:	d539      	bpl.n	80099a4 <_svfiprintf_r+0x9e4>
 8009930:	9a06      	ldr	r2, [sp, #24]
 8009932:	9804      	ldr	r0, [sp, #16]
 8009934:	6813      	ldr	r3, [r2, #0]
 8009936:	3204      	adds	r2, #4
 8009938:	9206      	str	r2, [sp, #24]
 800993a:	8018      	strh	r0, [r3, #0]
 800993c:	f7ff bb57 	b.w	8008fee <_svfiprintf_r+0x2e>
 8009940:	9906      	ldr	r1, [sp, #24]
 8009942:	f04f 0900 	mov.w	r9, #0
 8009946:	680b      	ldr	r3, [r1, #0]
 8009948:	3104      	adds	r1, #4
 800994a:	4698      	mov	r8, r3
 800994c:	9106      	str	r1, [sp, #24]
 800994e:	2301      	movs	r3, #1
 8009950:	f7ff bbf0 	b.w	8009134 <_svfiprintf_r+0x174>
 8009954:	9806      	ldr	r0, [sp, #24]
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	6802      	ldr	r2, [r0, #0]
 800995c:	3004      	adds	r0, #4
 800995e:	9006      	str	r0, [sp, #24]
 8009960:	4690      	mov	r8, r2
 8009962:	f7ff bbe7 	b.w	8009134 <_svfiprintf_r+0x174>
 8009966:	f7ff fa7f 	bl	8008e68 <strlen>
 800996a:	2300      	movs	r3, #0
 800996c:	9003      	str	r0, [sp, #12]
 800996e:	9308      	str	r3, [sp, #32]
 8009970:	f7ff bbff 	b.w	8009172 <_svfiprintf_r+0x1b2>
 8009974:	2140      	movs	r1, #64	; 0x40
 8009976:	9201      	str	r2, [sp, #4]
 8009978:	f7fe f9be 	bl	8007cf8 <_malloc_r>
 800997c:	9a01      	ldr	r2, [sp, #4]
 800997e:	f8ca 0000 	str.w	r0, [sl]
 8009982:	f8ca 0010 	str.w	r0, [sl, #16]
 8009986:	b350      	cbz	r0, 80099de <_svfiprintf_r+0xa1e>
 8009988:	2340      	movs	r3, #64	; 0x40
 800998a:	f8ca 3014 	str.w	r3, [sl, #20]
 800998e:	f7ff bb25 	b.w	8008fdc <_svfiprintf_r+0x1c>
 8009992:	2f06      	cmp	r7, #6
 8009994:	bf28      	it	cs
 8009996:	2706      	movcs	r7, #6
 8009998:	9703      	str	r7, [sp, #12]
 800999a:	ea27 79e7 	bic.w	r9, r7, r7, asr #31
 800999e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80099ec <_svfiprintf_r+0xa2c>
 80099a2:	e48e      	b.n	80092c2 <_svfiprintf_r+0x302>
 80099a4:	9906      	ldr	r1, [sp, #24]
 80099a6:	9a04      	ldr	r2, [sp, #16]
 80099a8:	680b      	ldr	r3, [r1, #0]
 80099aa:	3104      	adds	r1, #4
 80099ac:	9106      	str	r1, [sp, #24]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	f7ff bb1d 	b.w	8008fee <_svfiprintf_r+0x2e>
 80099b4:	9703      	str	r7, [sp, #12]
 80099b6:	9008      	str	r0, [sp, #32]
 80099b8:	f7ff bbdb 	b.w	8009172 <_svfiprintf_r+0x1b2>
 80099bc:	4606      	mov	r6, r0
 80099be:	2700      	movs	r7, #0
 80099c0:	f7ff bb46 	b.w	8009050 <_svfiprintf_r+0x90>
 80099c4:	9b06      	ldr	r3, [sp, #24]
 80099c6:	681f      	ldr	r7, [r3, #0]
 80099c8:	1d19      	adds	r1, r3, #4
 80099ca:	2f00      	cmp	r7, #0
 80099cc:	7873      	ldrb	r3, [r6, #1]
 80099ce:	9106      	str	r1, [sp, #24]
 80099d0:	4606      	mov	r6, r0
 80099d2:	f6bf ab3c 	bge.w	800904e <_svfiprintf_r+0x8e>
 80099d6:	f04f 37ff 	mov.w	r7, #4294967295
 80099da:	f7ff bb38 	b.w	800904e <_svfiprintf_r+0x8e>
 80099de:	9807      	ldr	r0, [sp, #28]
 80099e0:	230c      	movs	r3, #12
 80099e2:	f04f 31ff 	mov.w	r1, #4294967295
 80099e6:	6003      	str	r3, [r0, #0]
 80099e8:	9104      	str	r1, [sp, #16]
 80099ea:	e654      	b.n	8009696 <_svfiprintf_r+0x6d6>
 80099ec:	0800a2a4 	.word	0x0800a2a4

080099f0 <_calloc_r>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	fb01 f102 	mul.w	r1, r1, r2
 80099f6:	f7fe f97f 	bl	8007cf8 <_malloc_r>
 80099fa:	4604      	mov	r4, r0
 80099fc:	b1d8      	cbz	r0, 8009a36 <_calloc_r+0x46>
 80099fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009a02:	f022 0203 	bic.w	r2, r2, #3
 8009a06:	3a04      	subs	r2, #4
 8009a08:	2a24      	cmp	r2, #36	; 0x24
 8009a0a:	d818      	bhi.n	8009a3e <_calloc_r+0x4e>
 8009a0c:	2a13      	cmp	r2, #19
 8009a0e:	d914      	bls.n	8009a3a <_calloc_r+0x4a>
 8009a10:	2300      	movs	r3, #0
 8009a12:	2a1b      	cmp	r2, #27
 8009a14:	6003      	str	r3, [r0, #0]
 8009a16:	6043      	str	r3, [r0, #4]
 8009a18:	d916      	bls.n	8009a48 <_calloc_r+0x58>
 8009a1a:	2a24      	cmp	r2, #36	; 0x24
 8009a1c:	6083      	str	r3, [r0, #8]
 8009a1e:	60c3      	str	r3, [r0, #12]
 8009a20:	bf11      	iteee	ne
 8009a22:	f100 0210 	addne.w	r2, r0, #16
 8009a26:	6103      	streq	r3, [r0, #16]
 8009a28:	6143      	streq	r3, [r0, #20]
 8009a2a:	f100 0218 	addeq.w	r2, r0, #24
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	6053      	str	r3, [r2, #4]
 8009a34:	6093      	str	r3, [r2, #8]
 8009a36:	4620      	mov	r0, r4
 8009a38:	bd10      	pop	{r4, pc}
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	e7f7      	b.n	8009a2e <_calloc_r+0x3e>
 8009a3e:	2100      	movs	r1, #0
 8009a40:	f000 f85e 	bl	8009b00 <memset>
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd10      	pop	{r4, pc}
 8009a48:	f100 0208 	add.w	r2, r0, #8
 8009a4c:	e7ef      	b.n	8009a2e <_calloc_r+0x3e>
 8009a4e:	bf00      	nop

08009a50 <memmove>:
 8009a50:	4288      	cmp	r0, r1
 8009a52:	b4f0      	push	{r4, r5, r6, r7}
 8009a54:	d912      	bls.n	8009a7c <memmove+0x2c>
 8009a56:	188d      	adds	r5, r1, r2
 8009a58:	42a8      	cmp	r0, r5
 8009a5a:	d20f      	bcs.n	8009a7c <memmove+0x2c>
 8009a5c:	b162      	cbz	r2, 8009a78 <memmove+0x28>
 8009a5e:	4251      	negs	r1, r2
 8009a60:	4613      	mov	r3, r2
 8009a62:	1882      	adds	r2, r0, r2
 8009a64:	186d      	adds	r5, r5, r1
 8009a66:	1852      	adds	r2, r2, r1
 8009a68:	18e9      	adds	r1, r5, r3
 8009a6a:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8009a6e:	18d1      	adds	r1, r2, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	f801 4c01 	strb.w	r4, [r1, #-1]
 8009a76:	d1f7      	bne.n	8009a68 <memmove+0x18>
 8009a78:	bcf0      	pop	{r4, r5, r6, r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	2a0f      	cmp	r2, #15
 8009a7e:	d93a      	bls.n	8009af6 <memmove+0xa6>
 8009a80:	ea41 0300 	orr.w	r3, r1, r0
 8009a84:	079b      	lsls	r3, r3, #30
 8009a86:	d138      	bne.n	8009afa <memmove+0xaa>
 8009a88:	460c      	mov	r4, r1
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	6826      	ldr	r6, [r4, #0]
 8009a90:	3d10      	subs	r5, #16
 8009a92:	601e      	str	r6, [r3, #0]
 8009a94:	6866      	ldr	r6, [r4, #4]
 8009a96:	605e      	str	r6, [r3, #4]
 8009a98:	68a6      	ldr	r6, [r4, #8]
 8009a9a:	609e      	str	r6, [r3, #8]
 8009a9c:	68e6      	ldr	r6, [r4, #12]
 8009a9e:	3410      	adds	r4, #16
 8009aa0:	60de      	str	r6, [r3, #12]
 8009aa2:	3310      	adds	r3, #16
 8009aa4:	2d0f      	cmp	r5, #15
 8009aa6:	d8f2      	bhi.n	8009a8e <memmove+0x3e>
 8009aa8:	f1a2 0410 	sub.w	r4, r2, #16
 8009aac:	f024 040f 	bic.w	r4, r4, #15
 8009ab0:	f002 020f 	and.w	r2, r2, #15
 8009ab4:	3410      	adds	r4, #16
 8009ab6:	2a03      	cmp	r2, #3
 8009ab8:	eb00 0304 	add.w	r3, r0, r4
 8009abc:	4421      	add	r1, r4
 8009abe:	d911      	bls.n	8009ae4 <memmove+0x94>
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	461d      	mov	r5, r3
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	f856 7b04 	ldr.w	r7, [r6], #4
 8009aca:	3c04      	subs	r4, #4
 8009acc:	2c03      	cmp	r4, #3
 8009ace:	f845 7b04 	str.w	r7, [r5], #4
 8009ad2:	d8f8      	bhi.n	8009ac6 <memmove+0x76>
 8009ad4:	1f14      	subs	r4, r2, #4
 8009ad6:	f024 0403 	bic.w	r4, r4, #3
 8009ada:	3404      	adds	r4, #4
 8009adc:	f002 0203 	and.w	r2, r2, #3
 8009ae0:	1909      	adds	r1, r1, r4
 8009ae2:	191b      	adds	r3, r3, r4
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	d0c7      	beq.n	8009a78 <memmove+0x28>
 8009ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aec:	3a01      	subs	r2, #1
 8009aee:	f803 4b01 	strb.w	r4, [r3], #1
 8009af2:	d1f9      	bne.n	8009ae8 <memmove+0x98>
 8009af4:	e7c0      	b.n	8009a78 <memmove+0x28>
 8009af6:	4603      	mov	r3, r0
 8009af8:	e7f4      	b.n	8009ae4 <memmove+0x94>
 8009afa:	4603      	mov	r3, r0
 8009afc:	e7f4      	b.n	8009ae8 <memmove+0x98>
 8009afe:	bf00      	nop

08009b00 <memset>:
 8009b00:	f010 0f03 	tst.w	r0, #3
 8009b04:	b470      	push	{r4, r5, r6}
 8009b06:	4603      	mov	r3, r0
 8009b08:	d03f      	beq.n	8009b8a <memset+0x8a>
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	d03b      	beq.n	8009b86 <memset+0x86>
 8009b0e:	b2cd      	uxtb	r5, r1
 8009b10:	e001      	b.n	8009b16 <memset+0x16>
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d037      	beq.n	8009b86 <memset+0x86>
 8009b16:	f803 5b01 	strb.w	r5, [r3], #1
 8009b1a:	3a01      	subs	r2, #1
 8009b1c:	f013 0f03 	tst.w	r3, #3
 8009b20:	461c      	mov	r4, r3
 8009b22:	d1f6      	bne.n	8009b12 <memset+0x12>
 8009b24:	2a03      	cmp	r2, #3
 8009b26:	d928      	bls.n	8009b7a <memset+0x7a>
 8009b28:	b2cd      	uxtb	r5, r1
 8009b2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8009b2e:	2a0f      	cmp	r2, #15
 8009b30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009b34:	d913      	bls.n	8009b5e <memset+0x5e>
 8009b36:	4623      	mov	r3, r4
 8009b38:	4616      	mov	r6, r2
 8009b3a:	3e10      	subs	r6, #16
 8009b3c:	601d      	str	r5, [r3, #0]
 8009b3e:	605d      	str	r5, [r3, #4]
 8009b40:	609d      	str	r5, [r3, #8]
 8009b42:	60dd      	str	r5, [r3, #12]
 8009b44:	3310      	adds	r3, #16
 8009b46:	2e0f      	cmp	r6, #15
 8009b48:	d8f7      	bhi.n	8009b3a <memset+0x3a>
 8009b4a:	f1a2 0310 	sub.w	r3, r2, #16
 8009b4e:	f023 030f 	bic.w	r3, r3, #15
 8009b52:	f002 020f 	and.w	r2, r2, #15
 8009b56:	3310      	adds	r3, #16
 8009b58:	2a03      	cmp	r2, #3
 8009b5a:	441c      	add	r4, r3
 8009b5c:	d90d      	bls.n	8009b7a <memset+0x7a>
 8009b5e:	4626      	mov	r6, r4
 8009b60:	4613      	mov	r3, r2
 8009b62:	3b04      	subs	r3, #4
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	f846 5b04 	str.w	r5, [r6], #4
 8009b6a:	d8fa      	bhi.n	8009b62 <memset+0x62>
 8009b6c:	1f13      	subs	r3, r2, #4
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	3304      	adds	r3, #4
 8009b74:	f002 0203 	and.w	r2, r2, #3
 8009b78:	18e4      	adds	r4, r4, r3
 8009b7a:	b122      	cbz	r2, 8009b86 <memset+0x86>
 8009b7c:	b2c9      	uxtb	r1, r1
 8009b7e:	3a01      	subs	r2, #1
 8009b80:	f804 1b01 	strb.w	r1, [r4], #1
 8009b84:	d1fb      	bne.n	8009b7e <memset+0x7e>
 8009b86:	bc70      	pop	{r4, r5, r6}
 8009b88:	4770      	bx	lr
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	e7ca      	b.n	8009b24 <memset+0x24>
 8009b8e:	bf00      	nop

08009b90 <_realloc_r>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	460c      	mov	r4, r1
 8009b96:	b083      	sub	sp, #12
 8009b98:	4606      	mov	r6, r0
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	f000 80cd 	beq.w	8009d3a <_realloc_r+0x1aa>
 8009ba0:	9201      	str	r2, [sp, #4]
 8009ba2:	f7fe fbc1 	bl	8008328 <__malloc_lock>
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009bac:	f102 050b 	add.w	r5, r2, #11
 8009bb0:	2d16      	cmp	r5, #22
 8009bb2:	d857      	bhi.n	8009c64 <_realloc_r+0xd4>
 8009bb4:	2010      	movs	r0, #16
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	42aa      	cmp	r2, r5
 8009bba:	d858      	bhi.n	8009c6e <_realloc_r+0xde>
 8009bbc:	f021 0903 	bic.w	r9, r1, #3
 8009bc0:	4581      	cmp	r9, r0
 8009bc2:	f1a4 0a08 	sub.w	sl, r4, #8
 8009bc6:	da56      	bge.n	8009c76 <_realloc_r+0xe6>
 8009bc8:	4b90      	ldr	r3, [pc, #576]	; (8009e0c <_realloc_r+0x27c>)
 8009bca:	eb0a 0e09 	add.w	lr, sl, r9
 8009bce:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009bd2:	45f3      	cmp	fp, lr
 8009bd4:	f000 80b7 	beq.w	8009d46 <_realloc_r+0x1b6>
 8009bd8:	f8de 7004 	ldr.w	r7, [lr, #4]
 8009bdc:	f027 0c01 	bic.w	ip, r7, #1
 8009be0:	44f4      	add	ip, lr
 8009be2:	f8dc c004 	ldr.w	ip, [ip, #4]
 8009be6:	f01c 0f01 	tst.w	ip, #1
 8009bea:	d05c      	beq.n	8009ca6 <_realloc_r+0x116>
 8009bec:	f04f 0c00 	mov.w	ip, #0
 8009bf0:	46e6      	mov	lr, ip
 8009bf2:	07c9      	lsls	r1, r1, #31
 8009bf4:	d47b      	bmi.n	8009cee <_realloc_r+0x15e>
 8009bf6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8009bfa:	ebc1 080a 	rsb	r8, r1, sl
 8009bfe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c02:	f021 0103 	bic.w	r1, r1, #3
 8009c06:	f1be 0f00 	cmp.w	lr, #0
 8009c0a:	d06c      	beq.n	8009ce6 <_realloc_r+0x156>
 8009c0c:	45de      	cmp	lr, fp
 8009c0e:	eb01 0b09 	add.w	fp, r1, r9
 8009c12:	f000 80fd 	beq.w	8009e10 <_realloc_r+0x280>
 8009c16:	eb0c 070b 	add.w	r7, ip, fp
 8009c1a:	4287      	cmp	r7, r0
 8009c1c:	db65      	blt.n	8009cea <_realloc_r+0x15a>
 8009c1e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8009c22:	f8de 2008 	ldr.w	r2, [lr, #8]
 8009c26:	46c2      	mov	sl, r8
 8009c28:	609a      	str	r2, [r3, #8]
 8009c2a:	60d3      	str	r3, [r2, #12]
 8009c2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c30:	f85a 1f08 	ldr.w	r1, [sl, #8]!
 8009c34:	f1a9 0204 	sub.w	r2, r9, #4
 8009c38:	2a24      	cmp	r2, #36	; 0x24
 8009c3a:	60cb      	str	r3, [r1, #12]
 8009c3c:	6099      	str	r1, [r3, #8]
 8009c3e:	f200 8131 	bhi.w	8009ea4 <_realloc_r+0x314>
 8009c42:	2a13      	cmp	r2, #19
 8009c44:	f240 80be 	bls.w	8009dc4 <_realloc_r+0x234>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	2a1b      	cmp	r2, #27
 8009c4c:	f8c8 3008 	str.w	r3, [r8, #8]
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	f8c8 300c 	str.w	r3, [r8, #12]
 8009c56:	f200 813b 	bhi.w	8009ed0 <_realloc_r+0x340>
 8009c5a:	f108 0310 	add.w	r3, r8, #16
 8009c5e:	f104 0208 	add.w	r2, r4, #8
 8009c62:	e0b1      	b.n	8009dc8 <_realloc_r+0x238>
 8009c64:	f025 0507 	bic.w	r5, r5, #7
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	daa4      	bge.n	8009bb8 <_realloc_r+0x28>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	2700      	movs	r7, #0
 8009c74:	e013      	b.n	8009c9e <_realloc_r+0x10e>
 8009c76:	464f      	mov	r7, r9
 8009c78:	1b7b      	subs	r3, r7, r5
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	f001 0101 	and.w	r1, r1, #1
 8009c80:	d81e      	bhi.n	8009cc0 <_realloc_r+0x130>
 8009c82:	4339      	orrs	r1, r7
 8009c84:	f8ca 1004 	str.w	r1, [sl, #4]
 8009c88:	44ba      	add	sl, r7
 8009c8a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009c8e:	f043 0301 	orr.w	r3, r3, #1
 8009c92:	f8ca 3004 	str.w	r3, [sl, #4]
 8009c96:	4630      	mov	r0, r6
 8009c98:	f7fe fb48 	bl	800832c <__malloc_unlock>
 8009c9c:	4627      	mov	r7, r4
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	b003      	add	sp, #12
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	f027 0c03 	bic.w	ip, r7, #3
 8009caa:	eb0c 0709 	add.w	r7, ip, r9
 8009cae:	4287      	cmp	r7, r0
 8009cb0:	db9f      	blt.n	8009bf2 <_realloc_r+0x62>
 8009cb2:	f8de 300c 	ldr.w	r3, [lr, #12]
 8009cb6:	f8de 2008 	ldr.w	r2, [lr, #8]
 8009cba:	60d3      	str	r3, [r2, #12]
 8009cbc:	609a      	str	r2, [r3, #8]
 8009cbe:	e7db      	b.n	8009c78 <_realloc_r+0xe8>
 8009cc0:	eb0a 0205 	add.w	r2, sl, r5
 8009cc4:	f043 0001 	orr.w	r0, r3, #1
 8009cc8:	430d      	orrs	r5, r1
 8009cca:	f8ca 5004 	str.w	r5, [sl, #4]
 8009cce:	18d3      	adds	r3, r2, r3
 8009cd0:	6050      	str	r0, [r2, #4]
 8009cd2:	6858      	ldr	r0, [r3, #4]
 8009cd4:	f102 0108 	add.w	r1, r2, #8
 8009cd8:	f040 0201 	orr.w	r2, r0, #1
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7fd fef6 	bl	8007ad0 <_free_r>
 8009ce4:	e7d7      	b.n	8009c96 <_realloc_r+0x106>
 8009ce6:	eb01 0b09 	add.w	fp, r1, r9
 8009cea:	4583      	cmp	fp, r0
 8009cec:	da37      	bge.n	8009d5e <_realloc_r+0x1ce>
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	f7fe f801 	bl	8007cf8 <_malloc_r>
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	b1d8      	cbz	r0, 8009d32 <_realloc_r+0x1a2>
 8009cfa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009cfe:	f1a0 0208 	sub.w	r2, r0, #8
 8009d02:	f021 0301 	bic.w	r3, r1, #1
 8009d06:	4453      	add	r3, sl
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	f000 80c5 	beq.w	8009e98 <_realloc_r+0x308>
 8009d0e:	f1a9 0204 	sub.w	r2, r9, #4
 8009d12:	2a24      	cmp	r2, #36	; 0x24
 8009d14:	d876      	bhi.n	8009e04 <_realloc_r+0x274>
 8009d16:	2a13      	cmp	r2, #19
 8009d18:	d849      	bhi.n	8009dae <_realloc_r+0x21e>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	6811      	ldr	r1, [r2, #0]
 8009d20:	6019      	str	r1, [r3, #0]
 8009d22:	6851      	ldr	r1, [r2, #4]
 8009d24:	6059      	str	r1, [r3, #4]
 8009d26:	6892      	ldr	r2, [r2, #8]
 8009d28:	609a      	str	r2, [r3, #8]
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f7fd fecf 	bl	8007ad0 <_free_r>
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7fe fafa 	bl	800832c <__malloc_unlock>
 8009d38:	e7b1      	b.n	8009c9e <_realloc_r+0x10e>
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	b003      	add	sp, #12
 8009d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d42:	f7fd bfd9 	b.w	8007cf8 <_malloc_r>
 8009d46:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009d4a:	f105 0e10 	add.w	lr, r5, #16
 8009d4e:	f027 0c03 	bic.w	ip, r7, #3
 8009d52:	eb0c 0709 	add.w	r7, ip, r9
 8009d56:	4577      	cmp	r7, lr
 8009d58:	da41      	bge.n	8009dde <_realloc_r+0x24e>
 8009d5a:	46de      	mov	lr, fp
 8009d5c:	e749      	b.n	8009bf2 <_realloc_r+0x62>
 8009d5e:	4647      	mov	r7, r8
 8009d60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d64:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009d68:	f1a9 0204 	sub.w	r2, r9, #4
 8009d6c:	2a24      	cmp	r2, #36	; 0x24
 8009d6e:	60cb      	str	r3, [r1, #12]
 8009d70:	6099      	str	r1, [r3, #8]
 8009d72:	f200 80a3 	bhi.w	8009ebc <_realloc_r+0x32c>
 8009d76:	2a13      	cmp	r2, #19
 8009d78:	f240 809d 	bls.w	8009eb6 <_realloc_r+0x326>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	2a1b      	cmp	r2, #27
 8009d80:	f8c8 3008 	str.w	r3, [r8, #8]
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	f8c8 300c 	str.w	r3, [r8, #12]
 8009d8a:	f200 80b7 	bhi.w	8009efc <_realloc_r+0x36c>
 8009d8e:	f108 0310 	add.w	r3, r8, #16
 8009d92:	f104 0208 	add.w	r2, r4, #8
 8009d96:	6811      	ldr	r1, [r2, #0]
 8009d98:	463c      	mov	r4, r7
 8009d9a:	6019      	str	r1, [r3, #0]
 8009d9c:	6851      	ldr	r1, [r2, #4]
 8009d9e:	465f      	mov	r7, fp
 8009da0:	6059      	str	r1, [r3, #4]
 8009da2:	6892      	ldr	r2, [r2, #8]
 8009da4:	46c2      	mov	sl, r8
 8009da6:	609a      	str	r2, [r3, #8]
 8009da8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dac:	e764      	b.n	8009c78 <_realloc_r+0xe8>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	2a1b      	cmp	r2, #27
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	6043      	str	r3, [r0, #4]
 8009db8:	d863      	bhi.n	8009e82 <_realloc_r+0x2f2>
 8009dba:	f100 0308 	add.w	r3, r0, #8
 8009dbe:	f104 0208 	add.w	r2, r4, #8
 8009dc2:	e7ac      	b.n	8009d1e <_realloc_r+0x18e>
 8009dc4:	4653      	mov	r3, sl
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	6811      	ldr	r1, [r2, #0]
 8009dca:	4654      	mov	r4, sl
 8009dcc:	6019      	str	r1, [r3, #0]
 8009dce:	6851      	ldr	r1, [r2, #4]
 8009dd0:	46c2      	mov	sl, r8
 8009dd2:	6059      	str	r1, [r3, #4]
 8009dd4:	6892      	ldr	r2, [r2, #8]
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ddc:	e74c      	b.n	8009c78 <_realloc_r+0xe8>
 8009dde:	1b79      	subs	r1, r7, r5
 8009de0:	eb0a 0205 	add.w	r2, sl, r5
 8009de4:	f041 0101 	orr.w	r1, r1, #1
 8009de8:	6051      	str	r1, [r2, #4]
 8009dea:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009dee:	4630      	mov	r0, r6
 8009df0:	f001 0101 	and.w	r1, r1, #1
 8009df4:	430d      	orrs	r5, r1
 8009df6:	f844 5c04 	str.w	r5, [r4, #-4]
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	4627      	mov	r7, r4
 8009dfe:	f7fe fa95 	bl	800832c <__malloc_unlock>
 8009e02:	e74c      	b.n	8009c9e <_realloc_r+0x10e>
 8009e04:	4621      	mov	r1, r4
 8009e06:	f7ff fe23 	bl	8009a50 <memmove>
 8009e0a:	e78e      	b.n	8009d2a <_realloc_r+0x19a>
 8009e0c:	20000548 	.word	0x20000548
 8009e10:	44dc      	add	ip, fp
 8009e12:	f105 0110 	add.w	r1, r5, #16
 8009e16:	458c      	cmp	ip, r1
 8009e18:	f6ff af67 	blt.w	8009cea <_realloc_r+0x15a>
 8009e1c:	4647      	mov	r7, r8
 8009e1e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009e22:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009e26:	f1a9 0204 	sub.w	r2, r9, #4
 8009e2a:	2a24      	cmp	r2, #36	; 0x24
 8009e2c:	60c1      	str	r1, [r0, #12]
 8009e2e:	6088      	str	r0, [r1, #8]
 8009e30:	f200 8089 	bhi.w	8009f46 <_realloc_r+0x3b6>
 8009e34:	2a13      	cmp	r2, #19
 8009e36:	d979      	bls.n	8009f2c <_realloc_r+0x39c>
 8009e38:	6821      	ldr	r1, [r4, #0]
 8009e3a:	2a1b      	cmp	r2, #27
 8009e3c:	f8c8 1008 	str.w	r1, [r8, #8]
 8009e40:	6861      	ldr	r1, [r4, #4]
 8009e42:	f8c8 100c 	str.w	r1, [r8, #12]
 8009e46:	f200 8087 	bhi.w	8009f58 <_realloc_r+0x3c8>
 8009e4a:	f108 0210 	add.w	r2, r8, #16
 8009e4e:	3408      	adds	r4, #8
 8009e50:	6821      	ldr	r1, [r4, #0]
 8009e52:	6011      	str	r1, [r2, #0]
 8009e54:	6861      	ldr	r1, [r4, #4]
 8009e56:	6051      	str	r1, [r2, #4]
 8009e58:	68a1      	ldr	r1, [r4, #8]
 8009e5a:	6091      	str	r1, [r2, #8]
 8009e5c:	ebc5 010c 	rsb	r1, r5, ip
 8009e60:	eb08 0205 	add.w	r2, r8, r5
 8009e64:	f041 0101 	orr.w	r1, r1, #1
 8009e68:	6051      	str	r1, [r2, #4]
 8009e6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e6e:	609a      	str	r2, [r3, #8]
 8009e70:	f001 0301 	and.w	r3, r1, #1
 8009e74:	431d      	orrs	r5, r3
 8009e76:	f8c8 5004 	str.w	r5, [r8, #4]
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7fe fa56 	bl	800832c <__malloc_unlock>
 8009e80:	e70d      	b.n	8009c9e <_realloc_r+0x10e>
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	2a24      	cmp	r2, #36	; 0x24
 8009e86:	6083      	str	r3, [r0, #8]
 8009e88:	68e3      	ldr	r3, [r4, #12]
 8009e8a:	60c3      	str	r3, [r0, #12]
 8009e8c:	d02d      	beq.n	8009eea <_realloc_r+0x35a>
 8009e8e:	f100 0310 	add.w	r3, r0, #16
 8009e92:	f104 0210 	add.w	r2, r4, #16
 8009e96:	e742      	b.n	8009d1e <_realloc_r+0x18e>
 8009e98:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009e9c:	f027 0703 	bic.w	r7, r7, #3
 8009ea0:	444f      	add	r7, r9
 8009ea2:	e6e9      	b.n	8009c78 <_realloc_r+0xe8>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	f7ff fdd2 	bl	8009a50 <memmove>
 8009eac:	4654      	mov	r4, sl
 8009eae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eb2:	46c2      	mov	sl, r8
 8009eb4:	e6e0      	b.n	8009c78 <_realloc_r+0xe8>
 8009eb6:	463b      	mov	r3, r7
 8009eb8:	4622      	mov	r2, r4
 8009eba:	e76c      	b.n	8009d96 <_realloc_r+0x206>
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7ff fdc6 	bl	8009a50 <memmove>
 8009ec4:	463c      	mov	r4, r7
 8009ec6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eca:	465f      	mov	r7, fp
 8009ecc:	46c2      	mov	sl, r8
 8009ece:	e6d3      	b.n	8009c78 <_realloc_r+0xe8>
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	2a24      	cmp	r2, #36	; 0x24
 8009ed4:	f8c8 3010 	str.w	r3, [r8, #16]
 8009ed8:	68e3      	ldr	r3, [r4, #12]
 8009eda:	f8c8 3014 	str.w	r3, [r8, #20]
 8009ede:	d01a      	beq.n	8009f16 <_realloc_r+0x386>
 8009ee0:	f108 0318 	add.w	r3, r8, #24
 8009ee4:	f104 0210 	add.w	r2, r4, #16
 8009ee8:	e76e      	b.n	8009dc8 <_realloc_r+0x238>
 8009eea:	6922      	ldr	r2, [r4, #16]
 8009eec:	f100 0318 	add.w	r3, r0, #24
 8009ef0:	6102      	str	r2, [r0, #16]
 8009ef2:	6961      	ldr	r1, [r4, #20]
 8009ef4:	f104 0218 	add.w	r2, r4, #24
 8009ef8:	6141      	str	r1, [r0, #20]
 8009efa:	e710      	b.n	8009d1e <_realloc_r+0x18e>
 8009efc:	68a3      	ldr	r3, [r4, #8]
 8009efe:	2a24      	cmp	r2, #36	; 0x24
 8009f00:	f8c8 3010 	str.w	r3, [r8, #16]
 8009f04:	68e3      	ldr	r3, [r4, #12]
 8009f06:	f8c8 3014 	str.w	r3, [r8, #20]
 8009f0a:	d011      	beq.n	8009f30 <_realloc_r+0x3a0>
 8009f0c:	f108 0318 	add.w	r3, r8, #24
 8009f10:	f104 0210 	add.w	r2, r4, #16
 8009f14:	e73f      	b.n	8009d96 <_realloc_r+0x206>
 8009f16:	6922      	ldr	r2, [r4, #16]
 8009f18:	f108 0320 	add.w	r3, r8, #32
 8009f1c:	f8c8 2018 	str.w	r2, [r8, #24]
 8009f20:	6961      	ldr	r1, [r4, #20]
 8009f22:	f104 0218 	add.w	r2, r4, #24
 8009f26:	f8c8 101c 	str.w	r1, [r8, #28]
 8009f2a:	e74d      	b.n	8009dc8 <_realloc_r+0x238>
 8009f2c:	463a      	mov	r2, r7
 8009f2e:	e78f      	b.n	8009e50 <_realloc_r+0x2c0>
 8009f30:	6922      	ldr	r2, [r4, #16]
 8009f32:	f108 0320 	add.w	r3, r8, #32
 8009f36:	f8c8 2018 	str.w	r2, [r8, #24]
 8009f3a:	6961      	ldr	r1, [r4, #20]
 8009f3c:	f104 0218 	add.w	r2, r4, #24
 8009f40:	f8c8 101c 	str.w	r1, [r8, #28]
 8009f44:	e727      	b.n	8009d96 <_realloc_r+0x206>
 8009f46:	4638      	mov	r0, r7
 8009f48:	4621      	mov	r1, r4
 8009f4a:	e88d 1008 	stmia.w	sp, {r3, ip}
 8009f4e:	f7ff fd7f 	bl	8009a50 <memmove>
 8009f52:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8009f56:	e781      	b.n	8009e5c <_realloc_r+0x2cc>
 8009f58:	68a1      	ldr	r1, [r4, #8]
 8009f5a:	2a24      	cmp	r2, #36	; 0x24
 8009f5c:	f8c8 1010 	str.w	r1, [r8, #16]
 8009f60:	68e1      	ldr	r1, [r4, #12]
 8009f62:	f8c8 1014 	str.w	r1, [r8, #20]
 8009f66:	d003      	beq.n	8009f70 <_realloc_r+0x3e0>
 8009f68:	f108 0218 	add.w	r2, r8, #24
 8009f6c:	3410      	adds	r4, #16
 8009f6e:	e76f      	b.n	8009e50 <_realloc_r+0x2c0>
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	f108 0220 	add.w	r2, r8, #32
 8009f76:	f8c8 1018 	str.w	r1, [r8, #24]
 8009f7a:	6961      	ldr	r1, [r4, #20]
 8009f7c:	3418      	adds	r4, #24
 8009f7e:	f8c8 101c 	str.w	r1, [r8, #28]
 8009f82:	e765      	b.n	8009e50 <_realloc_r+0x2c0>

08009f84 <abort>:
 8009f84:	b508      	push	{r3, lr}
 8009f86:	2006      	movs	r0, #6
 8009f88:	f000 f894 	bl	800a0b4 <raise>
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f7f9 f885 	bl	800309c <_exit>
 8009f92:	bf00      	nop

08009f94 <_init_signal_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	b10d      	cbz	r5, 8009fa2 <_init_signal_r+0xe>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bd38      	pop	{r3, r4, r5, pc}
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	f7fd fea8 	bl	8007cf8 <_malloc_r>
 8009fa8:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8009fac:	b148      	cbz	r0, 8009fc2 <_init_signal_r+0x2e>
 8009fae:	462b      	mov	r3, r5
 8009fb0:	e001      	b.n	8009fb6 <_init_signal_r+0x22>
 8009fb2:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
 8009fb6:	5143      	str	r3, [r0, r5]
 8009fb8:	3504      	adds	r5, #4
 8009fba:	2d80      	cmp	r5, #128	; 0x80
 8009fbc:	d1f9      	bne.n	8009fb2 <_init_signal_r+0x1e>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
 8009fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}

08009fc8 <_signal_r>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	291f      	cmp	r1, #31
 8009fcc:	b082      	sub	sp, #8
 8009fce:	4604      	mov	r4, r0
 8009fd0:	d808      	bhi.n	8009fe4 <_signal_r+0x1c>
 8009fd2:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8009fd6:	b153      	cbz	r3, 8009fee <_signal_r+0x26>
 8009fd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009fdc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8009fe0:	b002      	add	sp, #8
 8009fe2:	bd10      	pop	{r4, pc}
 8009fe4:	2316      	movs	r3, #22
 8009fe6:	6003      	str	r3, [r0, #0]
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e7f8      	b.n	8009fe0 <_signal_r+0x18>
 8009fee:	9101      	str	r1, [sp, #4]
 8009ff0:	9200      	str	r2, [sp, #0]
 8009ff2:	f7ff ffcf 	bl	8009f94 <_init_signal_r>
 8009ff6:	9901      	ldr	r1, [sp, #4]
 8009ff8:	9a00      	ldr	r2, [sp, #0]
 8009ffa:	b910      	cbnz	r0, 800a002 <_signal_r+0x3a>
 8009ffc:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 800a000:	e7ea      	b.n	8009fd8 <_signal_r+0x10>
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	e7eb      	b.n	8009fe0 <_signal_r+0x18>

0800a008 <_raise_r>:
 800a008:	291f      	cmp	r1, #31
 800a00a:	b538      	push	{r3, r4, r5, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	4605      	mov	r5, r0
 800a010:	d820      	bhi.n	800a054 <_raise_r+0x4c>
 800a012:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a016:	b19a      	cbz	r2, 800a040 <_raise_r+0x38>
 800a018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a01c:	b183      	cbz	r3, 800a040 <_raise_r+0x38>
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d00c      	beq.n	800a03c <_raise_r+0x34>
 800a022:	1c59      	adds	r1, r3, #1
 800a024:	d006      	beq.n	800a034 <_raise_r+0x2c>
 800a026:	2500      	movs	r5, #0
 800a028:	4620      	mov	r0, r4
 800a02a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800a02e:	4798      	blx	r3
 800a030:	4628      	mov	r0, r5
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	2316      	movs	r3, #22
 800a036:	6003      	str	r3, [r0, #0]
 800a038:	2001      	movs	r0, #1
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	2000      	movs	r0, #0
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	4628      	mov	r0, r5
 800a042:	f000 f871 	bl	800a128 <_getpid_r>
 800a046:	4622      	mov	r2, r4
 800a048:	4601      	mov	r1, r0
 800a04a:	4628      	mov	r0, r5
 800a04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a050:	f000 b856 	b.w	800a100 <_kill_r>
 800a054:	2316      	movs	r3, #22
 800a056:	6003      	str	r3, [r0, #0]
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	bd38      	pop	{r3, r4, r5, pc}
 800a05e:	bf00      	nop

0800a060 <__sigtramp_r>:
 800a060:	b510      	push	{r4, lr}
 800a062:	291f      	cmp	r1, #31
 800a064:	b082      	sub	sp, #8
 800a066:	4604      	mov	r4, r0
 800a068:	d820      	bhi.n	800a0ac <__sigtramp_r+0x4c>
 800a06a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a06e:	b1aa      	cbz	r2, 800a09c <__sigtramp_r+0x3c>
 800a070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a074:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a078:	b173      	cbz	r3, 800a098 <__sigtramp_r+0x38>
 800a07a:	1c58      	adds	r0, r3, #1
 800a07c:	d00a      	beq.n	800a094 <__sigtramp_r+0x34>
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d006      	beq.n	800a090 <__sigtramp_r+0x30>
 800a082:	2400      	movs	r4, #0
 800a084:	4608      	mov	r0, r1
 800a086:	6014      	str	r4, [r2, #0]
 800a088:	4798      	blx	r3
 800a08a:	4620      	mov	r0, r4
 800a08c:	b002      	add	sp, #8
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	2003      	movs	r0, #3
 800a092:	e7fb      	b.n	800a08c <__sigtramp_r+0x2c>
 800a094:	2002      	movs	r0, #2
 800a096:	e7f9      	b.n	800a08c <__sigtramp_r+0x2c>
 800a098:	2001      	movs	r0, #1
 800a09a:	e7f7      	b.n	800a08c <__sigtramp_r+0x2c>
 800a09c:	9101      	str	r1, [sp, #4]
 800a09e:	f7ff ff79 	bl	8009f94 <_init_signal_r>
 800a0a2:	9901      	ldr	r1, [sp, #4]
 800a0a4:	b910      	cbnz	r0, 800a0ac <__sigtramp_r+0x4c>
 800a0a6:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 800a0aa:	e7e1      	b.n	800a070 <__sigtramp_r+0x10>
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e7ec      	b.n	800a08c <__sigtramp_r+0x2c>
 800a0b2:	bf00      	nop

0800a0b4 <raise>:
 800a0b4:	f240 43c8 	movw	r3, #1224	; 0x4c8
 800a0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff bfa1 	b.w	800a008 <_raise_r>
 800a0c6:	bf00      	nop

0800a0c8 <signal>:
 800a0c8:	f240 43c8 	movw	r3, #1224	; 0x4c8
 800a0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff bf76 	b.w	8009fc8 <_signal_r>

0800a0dc <_init_signal>:
 800a0dc:	f240 43c8 	movw	r3, #1224	; 0x4c8
 800a0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	f7ff bf55 	b.w	8009f94 <_init_signal_r>
 800a0ea:	bf00      	nop

0800a0ec <__sigtramp>:
 800a0ec:	f240 43c8 	movw	r3, #1224	; 0x4c8
 800a0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff bfb1 	b.w	800a060 <__sigtramp_r>
 800a0fe:	bf00      	nop

0800a100 <_kill_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4c08      	ldr	r4, [pc, #32]	; (800a124 <_kill_r+0x24>)
 800a104:	2300      	movs	r3, #0
 800a106:	4605      	mov	r5, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	f7f8 ff2f 	bl	8002f70 <_kill>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d000      	beq.n	800a118 <_kill_r+0x18>
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0fb      	beq.n	800a116 <_kill_r+0x16>
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	bd38      	pop	{r3, r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	20001688 	.word	0x20001688

0800a128 <_getpid_r>:
 800a128:	f7f8 bf15 	b.w	8002f56 <_getpid>
 800a12c:	00000000 	.word	0x00000000
 800a130:	00000040 	.word	0x00000040
 800a134:	00000014 	.word	0x00000014
 800a138:	00000054 	.word	0x00000054
 800a13c:	70706148 	.word	0x70706148
 800a140:	72612079 	.word	0x72612079
 800a144:	68742065 	.word	0x68742065
 800a148:	2065736f 	.word	0x2065736f
 800a14c:	206f6877 	.word	0x206f6877
 800a150:	776f6e6b 	.word	0x776f6e6b
 800a154:	65687420 	.word	0x65687420
 800a158:	72612079 	.word	0x72612079
 800a15c:	70732065 	.word	0x70732065
 800a160:	74697269 	.word	0x74697269
 800a164:	6c6c6175 	.word	0x6c6c6175
 800a168:	6f702079 	.word	0x6f702079
 800a16c:	203b726f 	.word	0x203b726f
 800a170:	6854000a 	.word	0x6854000a
 800a174:	696b2065 	.word	0x696b2065
 800a178:	6f64676e 	.word	0x6f64676e
 800a17c:	666f206d 	.word	0x666f206d
 800a180:	61656820 	.word	0x61656820
 800a184:	206e6576 	.word	0x206e6576
 800a188:	6f6c6562 	.word	0x6f6c6562
 800a18c:	2073676e 	.word	0x2073676e
 800a190:	74206f74 	.word	0x74206f74
 800a194:	216d6568 	.word	0x216d6568
 800a198:	6f48000a 	.word	0x6f48000a
 800a19c:	616d2077 	.word	0x616d2077
 800a1a0:	6520796e 	.word	0x6520796e
 800a1a4:	20736579 	.word	0x20736579
 800a1a8:	73656f64 	.word	0x73656f64
 800a1ac:	73694d20 	.word	0x73694d20
 800a1b0:	73736973 	.word	0x73736973
 800a1b4:	20697069 	.word	0x20697069
 800a1b8:	65766972 	.word	0x65766972
 800a1bc:	61682072 	.word	0x61682072
 800a1c0:	0a3f6576 	.word	0x0a3f6576
 800a1c4:	69755100 	.word	0x69755100
 800a1c8:	62206b63 	.word	0x62206b63
 800a1cc:	6e776f72 	.word	0x6e776f72
 800a1d0:	786f6620 	.word	0x786f6620
 800a1d4:	6d756a20 	.word	0x6d756a20
 800a1d8:	20646570 	.word	0x20646570
 800a1dc:	7265766f 	.word	0x7265766f
 800a1e0:	65687420 	.word	0x65687420
 800a1e4:	7a616c20 	.word	0x7a616c20
 800a1e8:	6f642079 	.word	0x6f642079
 800a1ec:	000a2167 	.word	0x000a2167
 800a1f0:	43535953 	.word	0x43535953
 800a1f4:	3d204b4c 	.word	0x3d204b4c
 800a1f8:	646c2520 	.word	0x646c2520
 800a1fc:	4800202c 	.word	0x4800202c
 800a200:	204b4c43 	.word	0x204b4c43
 800a204:	6c25203d 	.word	0x6c25203d
 800a208:	00202c64 	.word	0x00202c64
 800a20c:	4b4c4350 	.word	0x4b4c4350
 800a210:	203d2031 	.word	0x203d2031
 800a214:	2c646c25 	.word	0x2c646c25
 800a218:	43500020 	.word	0x43500020
 800a21c:	20324b4c 	.word	0x20324b4c
 800a220:	6c25203d 	.word	0x6c25203d
 800a224:	000a0d64 	.word	0x000a0d64
 800a228:	74206948 	.word	0x74206948
 800a22c:	65726568 	.word	0x65726568
 800a230:	30250021 	.word	0x30250021
 800a234:	00646c34 	.word	0x00646c34
 800a238:	203e      	.short	0x203e
 800a23a:	00          	.byte	0x00
 800a23b:	48          	.byte	0x48
 800a23c:	20706165 	.word	0x20706165
 800a240:	20646e61 	.word	0x20646e61
 800a244:	63617473 	.word	0x63617473
 800a248:	6f63206b 	.word	0x6f63206b
 800a24c:	73696c6c 	.word	0x73696c6c
 800a250:	0a6e6f69 	.word	0x0a6e6f69
 800a254:	69786500 	.word	0x69786500
 800a258:	00000074 	.word	0x00000074

0800a25c <zeroes.6590>:
 800a25c:	30303030 30303030 30303030 30303030     0000000000000000
 800a26c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800a27c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800a28c:	00000000 33323130 37363534 62613938     ....0123456789ab
 800a29c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800a2ac:	00000030                                0...

0800a2b0 <blanks.6589>:
 800a2b0:	20202020 20202020 20202020 20202020                     
 800a2c0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800a2d0:	00000043                                C...

0800a2d4 <_global_impure_ptr>:
 800a2d4:	200000a0 49534f50 00000058 0000002e     ... POSIX.......
 800a2e4:	00000000                                ....

0800a2e8 <__mprec_tens>:
 800a2e8:	00000000 3ff00000 00000000 40240000     .......?......$@
 800a2f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800a308:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800a318:	00000000 412e8480 00000000 416312d0     .......A......cA
 800a328:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800a338:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800a348:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800a358:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800a368:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800a378:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800a388:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800a398:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800a3a8:	79d99db4 44ea7843                       ...yCx.D

0800a3b0 <__mprec_bigtens>:
 800a3b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800a3c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800a3d0:	7f73bf3c 75154fdd                       <.s..O.u

0800a3d8 <__mprec_tinytens>:
 800a3d8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800a3e8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800a3f8:	64ac6f43 0ac80628                       Co.d(...

0800a400 <p05.5111>:
 800a400:	00000005 00000019 0000007d              ........}...

0800a40c <zeroes.6534>:
 800a40c:	30303030 30303030 30303030 30303030     0000000000000000

0800a41c <blanks.6533>:
 800a41c:	20202020 20202020 20202020 20202020                     
=======

stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8000188:	2302      	movs	r3, #2
 800018a:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 800018c:	2310      	movs	r3, #16
 800018e:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8000190:	2300      	movs	r3, #0
 8000192:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8000194:	233e      	movs	r3, #62	; 0x3e
 8000196:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8000198:	232a      	movs	r3, #42	; 0x2a
 800019a:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 800019c:	23ff      	movs	r3, #255	; 0xff
 800019e:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 80001a0:	6081      	str	r1, [r0, #8]
 80001a2:	4770      	bx	lr

080001a4 <ST7032i_command>:
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 80001a4:	b507      	push	{r0, r1, r2, lr}
 80001a6:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 80001a8:	2200      	movs	r2, #0
 80001aa:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value;
 80001ae:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80001b2:	aa01      	add	r2, sp, #4
 80001b4:	7b59      	ldrb	r1, [r3, #13]
 80001b6:	6880      	ldr	r0, [r0, #8]
 80001b8:	2302      	movs	r3, #2
 80001ba:	f000 fc0f 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001be:	2032      	movs	r0, #50	; 0x32
 80001c0:	f000 f9a6 	bl	8000510 <delay_us>
}
 80001c4:	bd0e      	pop	{r1, r2, r3, pc}

080001c6 <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 80001c6:	b507      	push	{r0, r1, r2, lr}
 80001c8:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = 0b01000000;
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value & 0xff;
 80001d0:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80001d4:	aa01      	add	r2, sp, #4
 80001d6:	7b59      	ldrb	r1, [r3, #13]
 80001d8:	6880      	ldr	r0, [r0, #8]
 80001da:	2302      	movs	r3, #2
 80001dc:	f000 fbfe 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 f995 	bl	8000510 <delay_us>
	return 1; // assume success
}
 80001e6:	2001      	movs	r0, #1
 80001e8:	bd0e      	pop	{r1, r2, r3, pc}

080001ea <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 80001ea:	b570      	push	{r4, r5, r6, lr}
 80001ec:	4606      	mov	r6, r0
 80001ee:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001f0:	2400      	movs	r4, #0
 80001f2:	e004      	b.n	80001fe <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 80001f4:	4630      	mov	r0, r6
 80001f6:	f7ff ffe6 	bl	80001c6 <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001fa:	3401      	adds	r4, #1
 80001fc:	b2a4      	uxth	r4, r4
 80001fe:	5d29      	ldrb	r1, [r5, r4]
 8000200:	2900      	cmp	r1, #0
 8000202:	d1f7      	bne.n	80001f4 <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8000204:	4620      	mov	r0, r4
 8000206:	bd70      	pop	{r4, r5, r6, pc}

08000208 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8000208:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 800020c:	b510      	push	{r4, lr}
 800020e:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8000210:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8000212:	2138      	movs	r1, #56	; 0x38
 8000214:	f7ff ffc6 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8000218:	4620      	mov	r0, r4
 800021a:	2139      	movs	r1, #57	; 0x39
 800021c:	f7ff ffc2 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000220:	2002      	movs	r0, #2
 8000222:	f000 f965 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000226:	7b21      	ldrb	r1, [r4, #12]
 8000228:	f001 010f 	and.w	r1, r1, #15
 800022c:	4620      	mov	r0, r4
 800022e:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000232:	f7ff ffb7 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 f95a 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800023c:	7b21      	ldrb	r1, [r4, #12]
 800023e:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000242:	4620      	mov	r0, r4
 8000244:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000248:	f7ff ffac 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 800024c:	4620      	mov	r0, r4
 800024e:	2138      	movs	r1, #56	; 0x38
 8000250:	f7ff ffa8 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000254:	2002      	movs	r0, #2
}
 8000256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 800025a:	f000 b949 	b.w	80004f0 <delay_ms>

0800025e <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 800025e:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8000260:	2101      	movs	r1, #1
 8000262:	f7ff ff9f 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000266:	20c8      	movs	r0, #200	; 0xc8
}
 8000268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800026c:	f000 b940 	b.w	80004f0 <delay_ms>

08000270 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8000270:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8000272:	2102      	movs	r1, #2
 8000274:	f7ff ff96 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000278:	20c8      	movs	r0, #200	; 0xc8
}
 800027a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800027e:	f000 b937 	b.w	80004f0 <delay_ms>

08000282 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000282:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <ST7032i_setCursor+0x42>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000286:	4605      	mov	r5, r0
 8000288:	4614      	mov	r4, r2
 800028a:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 800028e:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	af04      	add	r7, sp, #16
 8000292:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8000296:	792b      	ldrb	r3, [r5, #4]
 8000298:	429c      	cmp	r4, r3
 800029a:	d304      	bcc.n	80002a6 <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 800029c:	fbb4 f2f3 	udiv	r2, r4, r3
 80002a0:	fb03 4412 	mls	r4, r3, r2, r4
 80002a4:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002ac:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 80002ae:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80002b2:	1871      	adds	r1, r6, r1
 80002b4:	b2c9      	uxtb	r1, r1
 80002b6:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 80002bc:	b005      	add	sp, #20
 80002be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002c2:	e76f      	b.n	80001a4 <ST7032i_command>
 80002c4:	08008ad0 	.word	0x08008ad0

080002c8 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 80002c8:	7841      	ldrb	r1, [r0, #1]
 80002ca:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80002ce:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002d0:	f041 0108 	orr.w	r1, r1, #8
 80002d4:	e766      	b.n	80001a4 <ST7032i_command>

080002d6 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002d6:	7841      	ldrb	r1, [r0, #1]
 80002d8:	f041 0204 	orr.w	r2, r1, #4
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002dc:	f041 010c 	orr.w	r1, r1, #12
	this->_displaycontrol &= ~LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002e0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002e2:	e75f      	b.n	80001a4 <ST7032i_command>

080002e4 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e4:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002e6:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e8:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002ea:	f7ff ff5b 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 80002ee:	4620      	mov	r0, r4
 80002f0:	2139      	movs	r1, #57	; 0x39
 80002f2:	f7ff ff57 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 80002f6:	2002      	movs	r0, #2
 80002f8:	f000 f8fa 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 80002fc:	4620      	mov	r0, r4
 80002fe:	2114      	movs	r1, #20
 8000300:	f7ff ff50 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000304:	7b21      	ldrb	r1, [r4, #12]
 8000306:	f001 010f 	and.w	r1, r1, #15
 800030a:	4620      	mov	r0, r4
 800030c:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000310:	f7ff ff48 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 f8eb 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800031a:	7b21      	ldrb	r1, [r4, #12]
 800031c:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000320:	4620      	mov	r0, r4
 8000322:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000326:	f7ff ff3d 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800032a:	4620      	mov	r0, r4
 800032c:	216c      	movs	r1, #108	; 0x6c
 800032e:	f7ff ff39 	bl	80001a4 <ST7032i_command>
	delay_ms(300);
 8000332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000336:	f000 f8db 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800033a:	4620      	mov	r0, r4
 800033c:	2138      	movs	r1, #56	; 0x38
 800033e:	f7ff ff31 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8000342:	4620      	mov	r0, r4
 8000344:	210c      	movs	r1, #12
 8000346:	f7ff ff2d 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 800034a:	2002      	movs	r0, #2
 800034c:	f000 f8d0 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8000350:	4620      	mov	r0, r4
 8000352:	2101      	movs	r1, #1
 8000354:	f7ff ff26 	bl	80001a4 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8000358:	2002      	movs	r0, #2
 800035a:	f000 f8c9 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 800035e:	4620      	mov	r0, r4
 8000360:	2102      	movs	r1, #2
 8000362:	f7ff ff1f 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 f8c2 	bl	80004f0 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 800036c:	7821      	ldrb	r1, [r4, #0]
 800036e:	4620      	mov	r0, r4
 8000370:	f041 0120 	orr.w	r1, r1, #32
 8000374:	f7ff ff16 	bl	80001a4 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000378:	2304      	movs	r3, #4
 800037a:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 800037c:	4620      	mov	r0, r4
 800037e:	f7ff ffaa 	bl	80002d6 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 8000382:	4620      	mov	r0, r4
 8000384:	f7ff ff6b 	bl	800025e <ST7032i_clear>
	ST7032i_home(lcd);
 8000388:	4620      	mov	r0, r4
 800038a:	f7ff ff71 	bl	8000270 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800038e:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8000390:	4620      	mov	r0, r4
 8000392:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000394:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 8000396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 800039a:	e703      	b.n	80001a4 <ST7032i_command>

0800039c <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 800039c:	7841      	ldrb	r1, [r0, #1]
 800039e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80003a2:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003a4:	f041 0108 	orr.w	r1, r1, #8
 80003a8:	e6fc      	b.n	80001a4 <ST7032i_command>

080003aa <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003aa:	7841      	ldrb	r1, [r0, #1]
 80003ac:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b0:	f041 0109 	orr.w	r1, r1, #9
	this->_displaycontrol &= ~LCD_BLINKON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003b4:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b6:	e6f5      	b.n	80001a4 <ST7032i_command>

080003b8 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80003b8:	7841      	ldrb	r1, [r0, #1]
 80003ba:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003be:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003c0:	f041 0108 	orr.w	r1, r1, #8
 80003c4:	e6ee      	b.n	80001a4 <ST7032i_command>

080003c6 <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003c6:	7841      	ldrb	r1, [r0, #1]
 80003c8:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003cc:	f041 010a 	orr.w	r1, r1, #10
	this->_displaycontrol &= ~LCD_CURSORON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003d0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003d2:	e6e7      	b.n	80001a4 <ST7032i_command>

080003d4 <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003d4:	2118      	movs	r1, #24
 80003d6:	e6e5      	b.n	80001a4 <ST7032i_command>

080003d8 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80003d8:	211c      	movs	r1, #28
 80003da:	e6e3      	b.n	80001a4 <ST7032i_command>

080003dc <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003dc:	7881      	ldrb	r1, [r0, #2]
 80003de:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e2:	f041 0106 	orr.w	r1, r1, #6
void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003e6:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e8:	e6dc      	b.n	80001a4 <ST7032i_command>

080003ea <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 80003ea:	7881      	ldrb	r1, [r0, #2]
 80003ec:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003f0:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003f2:	f041 0104 	orr.w	r1, r1, #4
 80003f6:	e6d5      	b.n	80001a4 <ST7032i_command>

080003f8 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 80003f8:	7881      	ldrb	r1, [r0, #2]
 80003fa:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003fe:	f041 0105 	orr.w	r1, r1, #5
	this->_displaymode &= ~LCD_ENTRYLEFT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8000402:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8000404:	e6ce      	b.n	80001a4 <ST7032i_command>

08000406 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8000406:	7881      	ldrb	r1, [r0, #2]
 8000408:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800040c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 800040e:	f041 0104 	orr.w	r1, r1, #4
 8000412:	e6c7      	b.n	80001a4 <ST7032i_command>

08000414 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000414:	f001 0107 	and.w	r1, r1, #7
 8000418:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 800041a:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800041c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8000420:	4606      	mov	r6, r0
 8000422:	4615      	mov	r5, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000424:	f7ff febe 	bl	80001a4 <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8000428:	2400      	movs	r4, #0
		ST7032i_write(this, charmap[i]);
 800042a:	5d29      	ldrb	r1, [r5, r4]
 800042c:	4630      	mov	r0, r6

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 800042e:	3401      	adds	r4, #1
		ST7032i_write(this, charmap[i]);
 8000430:	f7ff fec9 	bl	80001c6 <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8000434:	2c08      	cmp	r4, #8
 8000436:	d1f8      	bne.n	800042a <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	bf00      	nop

0800043c <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000440:	a804      	add	r0, sp, #16
 8000442:	f001 fad1 	bl	80019e8 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000446:	9b04      	ldr	r3, [sp, #16]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <TIM2_timer_start+0x84>)
 800044a:	085b      	lsrs	r3, r3, #1
 800044c:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000450:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000452:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000454:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000456:	f8ad 3004 	strh.w	r3, [sp, #4]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 800045a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800045e:	9302      	str	r3, [sp, #8]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000460:	f8ad 4006 	strh.w	r4, [sp, #6]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000464:	f8ad 400c 	strh.w	r4, [sp, #12]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 8000468:	f88d 400e 	strb.w	r4, [sp, #14]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800046c:	f001 fb4e 	bl	8001b0c <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8000470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000474:	a901      	add	r1, sp, #4
 8000476:	f001 feaf 	bl	80021d8 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 800047a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800047e:	4621      	mov	r1, r4
 8000480:	f001 fefc 	bl	800227c <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000484:	2101      	movs	r1, #1
 8000486:	460a      	mov	r2, r1
 8000488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800048c:	f002 fa67 	bl	800295e <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000490:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000492:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000494:	4668      	mov	r0, sp
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000496:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800049a:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800049e:	f88d 5002 	strb.w	r5, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004a2:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 80004a6:	f000 fea1 	bl	80011ec <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80004aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004ae:	4629      	mov	r1, r5
 80004b0:	f001 ff27 	bl	8002302 <TIM_Cmd>

	__counter_micros = 0;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <TIM2_timer_start+0x88>)
 80004b6:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <TIM2_timer_start+0x8c>)
 80004ba:	601c      	str	r4, [r3, #0]
}
 80004bc:	b009      	add	sp, #36	; 0x24
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	000f4240 	.word	0x000f4240
 80004c4:	200009a4 	.word	0x200009a4
 80004c8:	200009a8 	.word	0x200009a8

080004cc <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 80004ce:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004d4:	681c      	ldr	r4, [r3, #0]
 80004d6:	f001 fed5 	bl	8002284 <TIM_GetCounter>
}
 80004da:	1900      	adds	r0, r0, r4
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	bf00      	nop
 80004e0:	200009a4 	.word	0x200009a4

080004e4 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <millis+0x8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200009a8 	.word	0x200009a8

080004f0 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <delay_ms+0x1c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 80004f4:	1880      	adds	r0, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f6:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
 80004f8:	4290      	cmp	r0, r2
 80004fa:	d202      	bcs.n	8000502 <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004fc:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 80004fe:	4282      	cmp	r2, r0
 8000500:	d2fc      	bcs.n	80004fc <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000502:	4a02      	ldr	r2, [pc, #8]	; (800050c <delay_ms+0x1c>)
 8000504:	6813      	ldr	r3, [r2, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 8000506:	4283      	cmp	r3, r0
 8000508:	d3fc      	bcc.n	8000504 <delay_ms+0x14>
		;
}
 800050a:	4770      	bx	lr
 800050c:	200009a8 	.word	0x200009a8

08000510 <delay_us>:

void delay_us(uint32_t w) {
 8000510:	b510      	push	{r4, lr}
 8000512:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000514:	f7ff ffda 	bl	80004cc <micros>
 8000518:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 800051a:	f7ff ffd7 	bl	80004cc <micros>
 800051e:	4284      	cmp	r4, r0
 8000520:	d203      	bcs.n	800052a <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 8000522:	f7ff ffd3 	bl	80004cc <micros>
 8000526:	42a0      	cmp	r0, r4
 8000528:	d2fb      	bcs.n	8000522 <delay_us+0x12>
	}
	while (micros() < wtill)
 800052a:	f7ff ffcf 	bl	80004cc <micros>
 800052e:	42a0      	cmp	r0, r4
 8000530:	d3fb      	bcc.n	800052a <delay_us+0x1a>
		;
}
 8000532:	bd10      	pop	{r4, pc}

08000534 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000534:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800053a:	2101      	movs	r1, #1
 800053c:	f002 fa24 	bl	8002988 <TIM_GetITStatus>
 8000540:	b168      	cbz	r0, 800055e <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000542:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000546:	2101      	movs	r1, #1
 8000548:	f002 fa29 	bl	800299e <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <TIM2_IRQHandler+0x2c>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000554:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <TIM2_IRQHandler+0x30>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	3201      	adds	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	bd08      	pop	{r3, pc}
 8000560:	200009a4 	.word	0x200009a4
 8000564:	200009a8 	.word	0x200009a8

08000568 <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 800056a:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 800056e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000

08000578 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000578:	2301      	movs	r3, #1
 800057a:	f000 000f 	and.w	r0, r0, #15
 800057e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8000582:	b280      	uxth	r0, r0
 8000584:	4770      	bx	lr

08000586 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000586:	f000 000f 	and.w	r0, r0, #15
 800058a:	4770      	bx	lr

0800058c <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800058c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800058e:	4c11      	ldr	r4, [pc, #68]	; (80005d4 <pinMode+0x48>)
 8000590:	f3c0 2503 	ubfx	r5, r0, #8, #4
 8000594:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000598:	460f      	mov	r7, r1
 800059a:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800059c:	2101      	movs	r1, #1
 800059e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005a0:	f001 fa90 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005a4:	f006 060f 	and.w	r6, r6, #15
 80005a8:	2301      	movs	r3, #1
 80005aa:	fa03 f606 	lsl.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005ae:	2300      	movs	r3, #0

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80005b0:	b2b6      	uxth	r6, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005b2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80005be:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005c2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80005c4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005cc:	f000 fed2 	bl	8001374 <GPIO_Init>
}
 80005d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000

080005d8 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80005d8:	0a02      	lsrs	r2, r0, #8
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005dc:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e0:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80005e4:	b131      	cbz	r1, 80005f4 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005ee:	b289      	uxth	r1, r1
 80005f0:	f000 bf31 	b.w	8001456 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005f4:	2101      	movs	r1, #1
 80005f6:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005fc:	b289      	uxth	r1, r1
 80005fe:	f000 bf2c 	b.w	800145a <GPIO_ResetBits>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000608:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800060c:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <digitalRead+0x3c>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000610:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000612:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800061a:	2301      	movs	r3, #1
 800061c:	fa03 f101 	lsl.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000620:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000622:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <digitalRead+0x30>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000632:	f000 ff07 	bl	8001444 <GPIO_ReadOutputDataBit>
 8000636:	e001      	b.n	800063c <digitalRead+0x34>
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000638:	f000 fefb 	bl	8001432 <GPIO_ReadInputDataBit>
 800063c:	3000      	adds	r0, #0
 800063e:	bf18      	it	ne
 8000640:	2001      	movne	r0, #1
}
 8000642:	bd08      	pop	{r3, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800064a:	461d      	mov	r5, r3
	if ( port == GPIOB ) {
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <GPIOMode+0x90>)
 800064e:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000650:	4604      	mov	r4, r0
 8000652:	460f      	mov	r7, r1
 8000654:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000656:	bf08      	it	eq
 8000658:	2002      	moveq	r0, #2
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
 800065a:	d022      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <GPIOMode+0x94>)
 800065e:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000660:	bf08      	it	eq
 8000662:	2004      	moveq	r0, #4

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 8000664:	d01d      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <GPIOMode+0x98>)
 8000668:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800066a:	bf08      	it	eq
 800066c:	2008      	moveq	r0, #8
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 800066e:	d018      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <GPIOMode+0x9c>)
 8000672:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000674:	bf08      	it	eq
 8000676:	2010      	moveq	r0, #16
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000678:	d013      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <GPIOMode+0xa0>)
 800067c:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800067e:	bf08      	it	eq
 8000680:	2020      	moveq	r0, #32
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 8000682:	d00e      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <GPIOMode+0xa4>)
 8000686:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000688:	bf08      	it	eq
 800068a:	2040      	moveq	r0, #64	; 0x40
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 800068c:	d009      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <GPIOMode+0xa8>)
 8000690:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000692:	bf08      	it	eq
 8000694:	2080      	moveq	r0, #128	; 0x80
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000696:	d004      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <GPIOMode+0xac>)
 800069a:	429c      	cmp	r4, r3
 800069c:	d103      	bne.n	80006a6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800069e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a2:	2101      	movs	r1, #1
 80006a4:	e004      	b.n	80006b0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <GPIOMode+0xb0>)
 80006a8:	429c      	cmp	r4, r3
 80006aa:	d103      	bne.n	80006b4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006ac:	2001      	movs	r0, #1
 80006ae:	4601      	mov	r1, r0
 80006b0:	f001 fa08 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80006b8:	9700      	str	r7, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006ba:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006be:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80006c2:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006c6:	4620      	mov	r0, r4
 80006c8:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006ca:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80006ce:	f88d 5005 	strb.w	r5, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006d2:	f000 fe4f 	bl	8001374 <GPIO_Init>
}
 80006d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000
 80006f8:	40020000 	.word	0x40020000

080006fc <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80006fc:	f000 beb4 	b.w	8001468 <GPIO_Write>

08000700 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <i2c_begin+0xdc>)
 8000704:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 8000706:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800070a:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 800070c:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 800070e:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000712:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8000714:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000716:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000718:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800071c:	2101      	movs	r1, #1
 800071e:	f001 f9f5 	bl	8001b0c <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000722:	88e0      	ldrh	r0, [r4, #6]
 8000724:	f7ff ff20 	bl	8000568 <PinPort>
 8000728:	4607      	mov	r7, r0
 800072a:	88e0      	ldrh	r0, [r4, #6]
 800072c:	f7ff ff24 	bl	8000578 <PinBit>
 8000730:	2601      	movs	r6, #1
 8000732:	2202      	movs	r2, #2
 8000734:	4601      	mov	r1, r0
 8000736:	4613      	mov	r3, r2
 8000738:	4638      	mov	r0, r7
 800073a:	9600      	str	r6, [sp, #0]
 800073c:	9601      	str	r6, [sp, #4]
 800073e:	f7ff ff83 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000742:	88a0      	ldrh	r0, [r4, #4]
 8000744:	f7ff ff10 	bl	8000568 <PinPort>
 8000748:	4607      	mov	r7, r0
 800074a:	88a0      	ldrh	r0, [r4, #4]
 800074c:	f7ff ff14 	bl	8000578 <PinBit>
 8000750:	2202      	movs	r2, #2
 8000752:	4613      	mov	r3, r2
 8000754:	4601      	mov	r1, r0
 8000756:	9600      	str	r6, [sp, #0]
 8000758:	9601      	str	r6, [sp, #4]
 800075a:	4638      	mov	r0, r7
 800075c:	f7ff ff74 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8000760:	88e0      	ldrh	r0, [r4, #6]
 8000762:	f7ff ff01 	bl	8000568 <PinPort>
 8000766:	4606      	mov	r6, r0
 8000768:	88e0      	ldrh	r0, [r4, #6]
 800076a:	f7ff ff0c 	bl	8000586 <PinSource>
 800076e:	2204      	movs	r2, #4
 8000770:	4601      	mov	r1, r0
 8000772:	4630      	mov	r0, r6
 8000774:	f000 fe7e 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 8000778:	88a0      	ldrh	r0, [r4, #4]
 800077a:	f7ff fef5 	bl	8000568 <PinPort>
 800077e:	4606      	mov	r6, r0
 8000780:	88a0      	ldrh	r0, [r4, #4]
 8000782:	f7ff ff00 	bl	8000586 <PinSource>
 8000786:	2204      	movs	r2, #4
 8000788:	4601      	mov	r1, r0
 800078a:	4630      	mov	r0, r6
 800078c:	f000 fe72 	bl	8001474 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <i2c_begin+0xe0>)
 8000792:	429d      	cmp	r5, r3
 8000794:	d004      	beq.n	80007a0 <i2c_begin+0xa0>
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <i2c_begin+0xe4>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000798:	4295      	cmp	r5, r2
 800079a:	bf0c      	ite	eq
 800079c:	4615      	moveq	r5, r2
 800079e:	461d      	movne	r5, r3
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007a0:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80007a2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80007a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007ae:	2600      	movs	r6, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007b4:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007bc:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007be:	f8ad 3014 	strh.w	r3, [sp, #20]
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007c2:	f8ad 600c 	strh.w	r6, [sp, #12]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007c6:	f000 fe99 	bl	80014fc <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 80007ca:	6820      	ldr	r0, [r4, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	f000 ff0b 	bl	80015e8 <I2C_Cmd>

	wirex->status = NOT_READY;
 80007d2:	20ff      	movs	r0, #255	; 0xff
 80007d4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80007d6:	72a6      	strb	r6, [r4, #10]

	return true;
}
 80007d8:	b007      	add	sp, #28
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007e8:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 80007ea:	b570      	push	{r4, r5, r6, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007f0:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 80007f2:	2506      	movs	r5, #6
 80007f4:	e008      	b.n	8000808 <i2c_start+0x20>
 80007f6:	3d01      	subs	r5, #1
 80007f8:	b2ad      	uxth	r5, r5
		if (wc == 0)
 80007fa:	b90d      	cbnz	r5, 8000800 <i2c_start+0x18>
			return false;
 80007fc:	2000      	movs	r0, #0
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(667);
 8000800:	f240 209b 	movw	r0, #667	; 0x29b
 8000804:	f7ff fe84 	bl	8000510 <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800080e:	f001 f802 	bl	8001816 <I2C_GetFlagStatus>
 8000812:	2800      	cmp	r0, #0
 8000814:	d1ef      	bne.n	80007f6 <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 8000816:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8000818:	2101      	movs	r1, #1
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	f000 fef0 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000820:	2506      	movs	r5, #6
 8000822:	e007      	b.n	8000834 <i2c_start+0x4c>
 8000824:	3d01      	subs	r5, #1
 8000826:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0e7      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 800082c:	f240 209b 	movw	r0, #667	; 0x29b
 8000830:	f7ff fe6e 	bl	8000510 <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	4911      	ldr	r1, [pc, #68]	; (800087c <i2c_start+0x94>)
 8000838:	f000 ffd9 	bl	80017ee <I2C_CheckEvent>
 800083c:	2800      	cmp	r0, #0
 800083e:	d0f1      	beq.n	8000824 <i2c_start+0x3c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000840:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000842:	fa06 f103 	lsl.w	r1, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000846:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000848:	6820      	ldr	r0, [r4, #0]
 800084a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800084e:	2200      	movs	r2, #0
 8000850:	f000 feee 	bl	8001630 <I2C_Send7bitAddress>
 8000854:	2506      	movs	r5, #6
 8000856:	e007      	b.n	8000868 <i2c_start+0x80>
 8000858:	3d01      	subs	r5, #1
 800085a:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 800085c:	2d00      	cmp	r5, #0
 800085e:	d0cd      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 8000860:	f240 209b 	movw	r0, #667	; 0x29b
 8000864:	f7ff fe54 	bl	8000510 <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <i2c_start+0x98>)
 800086c:	f000 ffbf 	bl	80017ee <I2C_CheckEvent>
 8000870:	2800      	cmp	r0, #0
 8000872:	d0f1      	beq.n	8000858 <i2c_start+0x70>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 8000874:	2302      	movs	r3, #2
 8000876:	7263      	strb	r3, [r4, #9]
	return true;
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	00030001 	.word	0x00030001
 8000880:	00070082 	.word	0x00070082

08000884 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000888:	461d      	mov	r5, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 800088a:	2302      	movs	r3, #2
 800088c:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800088e:	4604      	mov	r4, r0
 8000890:	4688      	mov	r8, r1
 8000892:	4616      	mov	r6, r2
 8000894:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 8000898:	f7ff ffa6 	bl	80007e8 <i2c_start>
 800089c:	b910      	cbnz	r0, 80008a4 <i2c_receive+0x20>
		return false;
 800089e:	2000      	movs	r0, #0
 80008a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80008a4:	4631      	mov	r1, r6
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f000 ff45 	bl	8001736 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80008ac:	2304      	movs	r3, #4
 80008ae:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008b0:	2606      	movs	r6, #6
 80008b2:	e007      	b.n	80008c4 <i2c_receive+0x40>
 80008b4:	3e01      	subs	r6, #1
 80008b6:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d0f0      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008bc:	f240 209b 	movw	r0, #667	; 0x29b
 80008c0:	f7ff fe26 	bl	8000510 <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008c4:	6820      	ldr	r0, [r4, #0]
 80008c6:	4941      	ldr	r1, [pc, #260]	; (80009cc <i2c_receive+0x148>)
 80008c8:	f000 ff91 	bl	80017ee <I2C_CheckEvent>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0f1      	beq.n	80008b4 <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 80008d0:	2606      	movs	r6, #6
 80008d2:	7266      	strb	r6, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	f000 fe92 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008dc:	e007      	b.n	80008ee <i2c_receive+0x6a>
 80008de:	3e01      	subs	r6, #1
 80008e0:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0db      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008e6:	f240 209b 	movw	r0, #667	; 0x29b
 80008ea:	f7ff fe11 	bl	8000510 <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008ee:	6820      	ldr	r0, [r4, #0]
 80008f0:	4937      	ldr	r1, [pc, #220]	; (80009d0 <i2c_receive+0x14c>)
 80008f2:	f000 ff7c 	bl	80017ee <I2C_CheckEvent>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d0f1      	beq.n	80008de <i2c_receive+0x5a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 80008fa:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 80008fc:	ea4f 0148 	mov.w	r1, r8, lsl #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8000900:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8000902:	6820      	ldr	r0, [r4, #0]
 8000904:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000908:	2201      	movs	r2, #1
 800090a:	f000 fe91 	bl	8001630 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 800090e:	2606      	movs	r6, #6
 8000910:	e007      	b.n	8000922 <i2c_receive+0x9e>
 8000912:	3e01      	subs	r6, #1
 8000914:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000916:	2e00      	cmp	r6, #0
 8000918:	d0c1      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 800091a:	f240 209b 	movw	r0, #667	; 0x29b
 800091e:	f7ff fdf7 	bl	8000510 <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8000922:	6820      	ldr	r0, [r4, #0]
 8000924:	492b      	ldr	r1, [pc, #172]	; (80009d4 <i2c_receive+0x150>)
 8000926:	f000 ff62 	bl	80017ee <I2C_CheckEvent>
 800092a:	2800      	cmp	r0, #0
 800092c:	d0f1      	beq.n	8000912 <i2c_receive+0x8e>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 800092e:	2303      	movs	r3, #3
 8000930:	7263      	strb	r3, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000932:	f1c5 0801 	rsb	r8, r5, #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8000936:	e018      	b.n	800096a <i2c_receive+0xe6>
		wirex->status = RECEIVE_BYTE_READY;
 8000938:	2308      	movs	r3, #8
 800093a:	7263      	strb	r3, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800093c:	2606      	movs	r6, #6
 800093e:	e007      	b.n	8000950 <i2c_receive+0xcc>
 8000940:	3e01      	subs	r6, #1
 8000942:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0aa      	beq.n	800089e <i2c_receive+0x1a>
				return false;
			delay_us(667);
 8000948:	f240 209b 	movw	r0, #667	; 0x29b
 800094c:	f7ff fde0 	bl	8000510 <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	4921      	ldr	r1, [pc, #132]	; (80009d8 <i2c_receive+0x154>)
 8000954:	f000 ff4b 	bl	80017ee <I2C_CheckEvent>
 8000958:	2800      	cmp	r0, #0
 800095a:	d0f1      	beq.n	8000940 <i2c_receive+0xbc>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f000 feec 	bl	800173a <I2C_ReceiveData>
		wirex->status = BYTE_RECEIVED;
 8000962:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8000964:	f805 0b01 	strb.w	r0, [r5], #1
		wirex->status = BYTE_RECEIVED;
 8000968:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800096a:	eb05 0308 	add.w	r3, r5, r8
 800096e:	b29b      	uxth	r3, r3
 8000970:	42bb      	cmp	r3, r7
 8000972:	d3e1      	bcc.n	8000938 <i2c_receive+0xb4>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 8000974:	230a      	movs	r3, #10
 8000976:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 8000978:	6820      	ldr	r0, [r4, #0]
 800097a:	2100      	movs	r1, #0
 800097c:	f000 fe60 	bl	8001640 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	f000 fe48 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 8000988:	230b      	movs	r3, #11
 800098a:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800098c:	2606      	movs	r6, #6
 800098e:	e007      	b.n	80009a0 <i2c_receive+0x11c>
 8000990:	3e01      	subs	r6, #1
 8000992:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000994:	2e00      	cmp	r6, #0
 8000996:	d082      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 8000998:	f240 209b 	movw	r0, #667	; 0x29b
 800099c:	f7ff fdb8 	bl	8000510 <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <i2c_receive+0x154>)
 80009a4:	f000 ff23 	bl	80017ee <I2C_CheckEvent>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d0f1      	beq.n	8000990 <i2c_receive+0x10c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f000 fec4 	bl	800173a <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b2:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009b4:	7028      	strb	r0, [r5, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009b6:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b8:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	f000 fe40 	bl	8001640 <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 80009c0:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c2:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 80009c4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c6:	72a3      	strb	r3, [r4, #10]

	return true;
}
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009cc:	00070084 	.word	0x00070084
 80009d0:	00030001 	.word	0x00030001
 80009d4:	00030002 	.word	0x00030002
 80009d8:	00030040 	.word	0x00030040

080009dc <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e0:	461f      	mov	r7, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 80009e2:	2301      	movs	r3, #1
 80009e4:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009e6:	4604      	mov	r4, r0
 80009e8:	4690      	mov	r8, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 80009ea:	f7ff fefd 	bl	80007e8 <i2c_start>
 80009ee:	b9e8      	cbnz	r0, 8000a2c <i2c_transmit+0x50>
		return false;
 80009f0:	2000      	movs	r0, #0
 80009f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	f818 1005 	ldrb.w	r1, [r8, r5]
 80009fc:	f000 fe9b 	bl	8001736 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a00:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a02:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a06:	e007      	b.n	8000a18 <i2c_transmit+0x3c>
 8000a08:	3e01      	subs	r6, #1
 8000a0a:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d0ef      	beq.n	80009f0 <i2c_transmit+0x14>
				return false;
			delay_us(667);
 8000a10:	f240 209b 	movw	r0, #667	; 0x29b
 8000a14:	f7ff fd7c 	bl	8000510 <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <i2c_transmit+0x74>)
 8000a1c:	f000 fee7 	bl	80017ee <I2C_CheckEvent>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0f1      	beq.n	8000a08 <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 8000a24:	2305      	movs	r3, #5
 8000a26:	7263      	strb	r3, [r4, #9]
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e002      	b.n	8000a32 <i2c_transmit+0x56>
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8000a2c:	2500      	movs	r5, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a2e:	f04f 0904 	mov.w	r9, #4
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8000a32:	b2ab      	uxth	r3, r5
 8000a34:	42bb      	cmp	r3, r7
 8000a36:	d3de      	bcc.n	80009f6 <i2c_transmit+0x1a>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000a3c:	6820      	ldr	r0, [r4, #0]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	f000 fdea 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 8000a44:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a46:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 8000a48:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a4a:	72a3      	strb	r3, [r4, #10]

	return true;
}
 8000a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a50:	00070084 	.word	0x00070084

08000a54 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4698      	mov	r8, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a5c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a60:	4607      	mov	r7, r0
 8000a62:	468a      	mov	sl, r1
 8000a64:	4691      	mov	r9, r2
 8000a66:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a6a:	d105      	bne.n	8000a78 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a70:	2101      	movs	r1, #1
 8000a72:	f001 f857 	bl	8001b24 <RCC_APB2PeriphClockCmd>
 8000a76:	e007      	b.n	8000a88 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <spi_begin+0x168>)
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d106      	bne.n	8000a8c <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a82:	2101      	movs	r1, #1
 8000a84:	f001 f842 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000a88:	2605      	movs	r6, #5
 8000a8a:	e005      	b.n	8000a98 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a90:	2101      	movs	r1, #1
 8000a92:	f001 f877 	bl	8001b84 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000a96:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000a98:	4650      	mov	r0, sl
 8000a9a:	f7ff fd65 	bl	8000568 <PinPort>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4650      	mov	r0, sl
 8000aa2:	9303      	str	r3, [sp, #12]
 8000aa4:	f7ff fd68 	bl	8000578 <PinBit>
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	2401      	movs	r4, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	4601      	mov	r1, r0
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	9500      	str	r5, [sp, #0]
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	9401      	str	r4, [sp, #4]
 8000aba:	f7ff fdc5 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000abe:	4648      	mov	r0, r9
 8000ac0:	f7ff fd52 	bl	8000568 <PinPort>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4648      	mov	r0, r9
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	f7ff fd55 	bl	8000578 <PinBit>
 8000ace:	9b03      	ldr	r3, [sp, #12]
 8000ad0:	9500      	str	r5, [sp, #0]
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	9401      	str	r4, [sp, #4]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f7ff fdb4 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	f7ff fd41 	bl	8000568 <PinPort>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4640      	mov	r0, r8
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	f7ff fd44 	bl	8000578 <PinBit>
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	9500      	str	r5, [sp, #0]
 8000af4:	4601      	mov	r1, r0
 8000af6:	2202      	movs	r2, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	9401      	str	r4, [sp, #4]
 8000afc:	4623      	mov	r3, r4
 8000afe:	f7ff fda3 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8000b02:	4650      	mov	r0, sl
 8000b04:	f7ff fd30 	bl	8000568 <PinPort>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4650      	mov	r0, sl
 8000b0c:	9303      	str	r3, [sp, #12]
 8000b0e:	f7ff fd3a 	bl	8000586 <PinSource>
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	4601      	mov	r1, r0
 8000b16:	4632      	mov	r2, r6
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fcab 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000b1e:	4648      	mov	r0, r9
 8000b20:	f7ff fd22 	bl	8000568 <PinPort>
 8000b24:	4682      	mov	sl, r0
 8000b26:	4648      	mov	r0, r9
 8000b28:	f7ff fd2d 	bl	8000586 <PinSource>
 8000b2c:	4632      	mov	r2, r6
 8000b2e:	4601      	mov	r1, r0
 8000b30:	4650      	mov	r0, sl
 8000b32:	f000 fc9f 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8000b36:	4640      	mov	r0, r8
 8000b38:	f7ff fd16 	bl	8000568 <PinPort>
 8000b3c:	4681      	mov	r9, r0
 8000b3e:	4640      	mov	r0, r8
 8000b40:	f7ff fd21 	bl	8000586 <PinSource>
 8000b44:	4632      	mov	r2, r6
 8000b46:	4601      	mov	r1, r0
 8000b48:	4648      	mov	r0, r9
 8000b4a:	f000 fc93 	bl	8001474 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000b4e:	4658      	mov	r0, fp
 8000b50:	f7ff fd0a 	bl	8000568 <PinPort>
 8000b54:	4606      	mov	r6, r0
 8000b56:	4658      	mov	r0, fp
 8000b58:	f7ff fd0e 	bl	8000578 <PinBit>
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4623      	mov	r3, r4
 8000b60:	4601      	mov	r1, r0
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	4630      	mov	r0, r6
 8000b66:	9401      	str	r4, [sp, #4]
 8000b68:	f7ff fd6e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000b6c:	4658      	mov	r0, fp
 8000b6e:	4621      	mov	r1, r4
 8000b70:	f7ff fd32 	bl	80005d8 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000b74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b78:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b84:	4638      	mov	r0, r7
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b86:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b88:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000b8a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000b8e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000b92:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000b96:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000b9e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000ba2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000ba6:	f001 f8c1 	bl	8001d2c <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 8000baa:	4638      	mov	r0, r7
 8000bac:	4621      	mov	r1, r4
 8000bae:	f001 f95a 	bl	8001e66 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000bb2:	b00b      	add	sp, #44	; 0x2c
 8000bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bc8:	e016      	b.n	8000bf8 <spi_transfer+0x38>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	f001 f9fd 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d0f9      	beq.n	8000bca <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	7871      	ldrb	r1, [r6, #1]
 8000bda:	f001 f9c2 	bl	8001f62 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000bde:	4620      	mov	r0, r4
 8000be0:	2101      	movs	r1, #1
 8000be2:	f001 f9f3 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d0f9      	beq.n	8000bde <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f001 f9b6 	bl	8001f5c <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf0:	3d01      	subs	r5, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bf2:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1e6      	bne.n	8000bca <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop

08000c00 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <SysTick_Handler+0xc>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	3201      	adds	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200009d0 	.word	0x200009d0

08000c10 <SysTick_delay>:
}

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SysTick_delay+0x10>)
 8000c12:	6819      	ldr	r1, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	d3fb      	bcc.n	8000c14 <SysTick_delay+0x4>
		;
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200009d0 	.word	0x200009d0

08000c24 <SysTick_Start>:

void SysTick_Start(void) {
 8000c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000c26:	4668      	mov	r0, sp
 8000c28:	f000 fede 	bl	80019e8 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c32:	fbb3 f3f2 	udiv	r3, r3, r2
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Start+0x2c>)
 8000c3a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SysTick_Start+0x30>)
 8000c3e:	21f0      	movs	r1, #240	; 0xf0
 8000c40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000c4c:	b005      	add	sp, #20
 8000c4e:	bd00      	pop	{pc}
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <SysTick_count+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200009d0 	.word	0x200009d0

08000c64 <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000c6a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000c6e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
 8000c72:	4770      	bx	lr

08000c74 <buffer_count>:
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000c74:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000c78:	4770      	bx	lr

08000c7a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000c7a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000c7e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d105      	bne.n	8000c92 <buffer_is_full+0x18>
 8000c86:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
		return 1;
 8000c8a:	3000      	adds	r0, #0
 8000c8c:	bf18      	it	ne
 8000c8e:	2001      	movne	r0, #1
 8000c90:	4770      	bx	lr
	}
	return 0;
 8000c92:	2000      	movs	r0, #0
}
 8000c94:	4770      	bx	lr

08000c96 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000c96:	b538      	push	{r3, r4, r5, lr}
 8000c98:	4604      	mov	r4, r0
 8000c9a:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 8000c9c:	f7ff ffed 	bl	8000c7a <buffer_is_full>
 8000ca0:	b9b0      	cbnz	r0, 8000cd0 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000ca2:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 8000cae:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000cb2:	3201      	adds	r2, #1
 8000cb4:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <buffer_enque+0x42>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da03      	bge.n	8000cca <buffer_enque+0x34>
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8000cce:	e001      	b.n	8000cd4 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000cd0:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	8000007f 	.word	0x8000007f

08000cdc <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000cdc:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000ce0:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8000ce2:	b1a1      	cbz	r1, 8000d0e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000ce4:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000ce8:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cea:	b218      	sxth	r0, r3
 8000cec:	3301      	adds	r3, #1
	r->count--;
 8000cee:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000cf2:	b219      	sxth	r1, r3
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cf6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <buffer_deque+0x2c>
 8000d00:	3b01      	subs	r3, #1
 8000d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d06:	3301      	adds	r3, #1
 8000d08:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	return w;
 8000d0c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000d12:	4770      	bx	lr
 8000d14:	8000007f 	.word	0x8000007f

08000d18 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000d18:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000d1c:	b123      	cbz	r3, 8000d28 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8000d1e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000d22:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000d26:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000d2c:	4770      	bx	lr

08000d2e <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d32:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d34:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <usart_begin+0x1ca>)
 8000d36:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d38:	b089      	sub	sp, #36	; 0x24
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	4690      	mov	r8, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d40:	d10d      	bne.n	8000d5e <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d42:	2010      	movs	r0, #16
 8000d44:	2101      	movs	r1, #1
 8000d46:	f000 feed 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <usart_begin+0x1ce>)
 8000d50:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <usart_begin+0x1d2>)
 8000d54:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8000d58:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000d5a:	60e3      	str	r3, [r4, #12]
 8000d5c:	e010      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8000d5e:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <usart_begin+0x1da>)
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d10f      	bne.n	8000d84 <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d68:	2101      	movs	r1, #1
 8000d6a:	f000 fecf 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8000d72:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <usart_begin+0x1de>)
 8000d74:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8000d76:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <usart_begin+0x1e2>)
 8000d78:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8000d7c:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000d7e:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000d80:	2607      	movs	r6, #7
 8000d82:	e043      	b.n	8000e0c <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000d84:	4b64      	ldr	r3, [pc, #400]	; (8000f18 <usart_begin+0x1ea>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d10e      	bne.n	8000da8 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000d8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f000 febc 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000d94:	2302      	movs	r3, #2
 8000d96:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8000d98:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <usart_begin+0x1ee>)
 8000d9a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <usart_begin+0x1f2>)
 8000d9e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000da2:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000da4:	60e3      	str	r3, [r4, #12]
 8000da6:	e7eb      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8000da8:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <usart_begin+0x1fa>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d10e      	bne.n	8000dcc <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000dae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000db2:	2101      	movs	r1, #1
 8000db4:	f000 feaa 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000db8:	2303      	movs	r3, #3
 8000dba:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <usart_begin+0x1fe>)
 8000dbe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <usart_begin+0x202>)
 8000dc2:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000dc6:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000dc8:	60e3      	str	r3, [r4, #12]
 8000dca:	e01e      	b.n	8000e0a <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <usart_begin+0x20a>)
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d10e      	bne.n	8000df0 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000dd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f000 fe98 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <usart_begin+0x20e>)
 8000de2:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <usart_begin+0x212>)
 8000de6:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000dea:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000dec:	60e3      	str	r3, [r4, #12]
 8000dee:	e00c      	b.n	8000e0a <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000df0:	2020      	movs	r0, #32
 8000df2:	2101      	movs	r1, #1
 8000df4:	f000 fe96 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8000dfc:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <usart_begin+0x21a>)
 8000dfe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <usart_begin+0x21e>)
 8000e02:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000e06:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000e08:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000e0a:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e0c:	4648      	mov	r0, r9
 8000e0e:	f7ff fbab 	bl	8000568 <PinPort>
 8000e12:	4683      	mov	fp, r0
 8000e14:	4648      	mov	r0, r9
 8000e16:	f7ff fbaf 	bl	8000578 <PinBit>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4601      	mov	r1, r0
 8000e20:	4613      	mov	r3, r2
 8000e22:	4658      	mov	r0, fp
 8000e24:	9500      	str	r5, [sp, #0]
 8000e26:	9501      	str	r5, [sp, #4]
 8000e28:	f7ff fc0e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f7ff fb9b 	bl	8000568 <PinPort>
 8000e32:	4683      	mov	fp, r0
 8000e34:	4640      	mov	r0, r8
 8000e36:	f7ff fb9f 	bl	8000578 <PinBit>
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	4601      	mov	r1, r0
 8000e40:	9500      	str	r5, [sp, #0]
 8000e42:	4658      	mov	r0, fp
 8000e44:	9501      	str	r5, [sp, #4]
 8000e46:	f7ff fbff 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	f7ff fb8c 	bl	8000568 <PinPort>
 8000e50:	4683      	mov	fp, r0
 8000e52:	4648      	mov	r0, r9
 8000e54:	f7ff fb97 	bl	8000586 <PinSource>
 8000e58:	4632      	mov	r2, r6
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	4658      	mov	r0, fp
 8000e5e:	f000 fb09 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000e62:	4640      	mov	r0, r8
 8000e64:	f7ff fb80 	bl	8000568 <PinPort>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	4640      	mov	r0, r8
 8000e6c:	f7ff fb8b 	bl	8000586 <PinSource>
 8000e70:	4632      	mov	r2, r6
 8000e72:	4601      	mov	r1, r0
 8000e74:	4648      	mov	r0, r9
 8000e76:	f000 fafd 	bl	8001474 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7a:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e7c:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7e:	f8ad 301a 	strh.w	r3, [sp, #26]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e82:	a904      	add	r1, sp, #16
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000e84:	f8cd a010 	str.w	sl, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000e88:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000e8c:	f8ad 5016 	strh.w	r5, [sp, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000e90:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000e94:	f8ad 501c 	strh.w	r5, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e98:	f001 fe98 	bl	8002bcc <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000e9c:	6860      	ldr	r0, [r4, #4]
 8000e9e:	f240 5125 	movw	r1, #1317	; 0x525
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f001 ffce 	bl	8002e44 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000ea8:	6860      	ldr	r0, [r4, #4]
 8000eaa:	f240 7127 	movw	r1, #1831	; 0x727
 8000eae:	462a      	mov	r2, r5
 8000eb0:	f001 ffc8 	bl	8002e44 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000eb4:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000eb6:	a803      	add	r0, sp, #12
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000eb8:	f88d 700c 	strb.w	r7, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000ebc:	f88d 500d 	strb.w	r5, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000ec0:	f88d 500e 	strb.w	r5, [sp, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000ec4:	f88d 600f 	strb.w	r6, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000ec8:	f000 f990 	bl	80011ec <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000ecc:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ece:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ed0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ed4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ed8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000edc:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ede:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ee0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ee4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ee8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000eec:	f001 fee9 	bl	8002cc2 <USART_Cmd>
}
 8000ef0:	b009      	add	sp, #36	; 0x24
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001008 	.word	0x20001008
 8000efc:	40011000 	.word	0x40011000
 8000f00:	20001038 	.word	0x20001038
 8000f04:	200009e4 	.word	0x200009e4
 8000f08:	2000166c 	.word	0x2000166c
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	2000113e 	.word	0x2000113e
 8000f14:	20000aea 	.word	0x20000aea
 8000f18:	20001018 	.word	0x20001018
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	20001244 	.word	0x20001244
 8000f24:	20000bf0 	.word	0x20000bf0
 8000f28:	2000165c 	.word	0x2000165c
 8000f2c:	40004c00 	.word	0x40004c00
 8000f30:	2000134a 	.word	0x2000134a
 8000f34:	20000cf6 	.word	0x20000cf6
 8000f38:	200009d4 	.word	0x200009d4
 8000f3c:	40005000 	.word	0x40005000
 8000f40:	20001450 	.word	0x20001450
 8000f44:	20000dfc 	.word	0x20000dfc
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	20001556 	.word	0x20001556
 8000f50:	20000f02 	.word	0x20000f02

08000f54 <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000f5a:	6860      	ldr	r0, [r4, #4]
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f001 ff89 	bl	8002e74 <USART_GetFlagStatus>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d0f9      	beq.n	8000f5a <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000f66:	6860      	ldr	r0, [r4, #4]
 8000f68:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000f6e:	f001 bed5 	b.w	8002d1c <USART_SendData>

08000f72 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	4604      	mov	r4, r0
 8000f76:	460e      	mov	r6, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f78:	2504      	movs	r5, #4
 8000f7a:	e003      	b.n	8000f84 <usart_write+0x12>
		delay_us(667);
 8000f7c:	f240 209b 	movw	r0, #667	; 0x29b
 8000f80:	f7ff fac6 	bl	8000510 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f84:	68e0      	ldr	r0, [r4, #12]
 8000f86:	f7ff fe78 	bl	8000c7a <buffer_is_full>
 8000f8a:	b118      	cbz	r0, 8000f94 <usart_write+0x22>
 8000f8c:	3d01      	subs	r5, #1
 8000f8e:	b2ad      	uxth	r5, r5
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f3      	bne.n	8000f7c <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000f94:	6860      	ldr	r0, [r4, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f240 7127 	movw	r1, #1831	; 0x727
 8000f9c:	f001 ff52 	bl	8002e44 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	68e0      	ldr	r0, [r4, #12]
 8000fa4:	f7ff fe77 	bl	8000c96 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fa8:	6860      	ldr	r0, [r4, #4]
 8000faa:	f240 7127 	movw	r1, #1831	; 0x727
 8000fae:	2201      	movs	r2, #1
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fb4:	f001 bf46 	b.w	8002e44 <USART_ITConfig>

08000fb8 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	1e4c      	subs	r4, r1, #1
	while (*s)
 8000fbe:	e002      	b.n	8000fc6 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff ffd6 	bl	8000f72 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000fc6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d1f8      	bne.n	8000fc0 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000fd0:	f001 bea8 	b.w	8002d24 <USART_ReceiveData>

08000fd4 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000fd4:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000fd6:	6880      	ldr	r0, [r0, #8]
 8000fd8:	f7ff fe80 	bl	8000cdc <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	bf08      	it	eq
 8000fe4:	2000      	moveq	r0, #0
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <usart_flush>:

void usart_flush(Serial * usx) {
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000fec:	f7ff fa7a 	bl	80004e4 <millis>
 8000ff0:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000ff4:	e00c      	b.n	8001010 <usart_flush+0x28>
		if (millis() > wtill)
 8000ff6:	f7ff fa75 	bl	80004e4 <millis>
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d908      	bls.n	8001010 <usart_flush+0x28>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000ffe:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8001000:	2200      	movs	r2, #0
 8001002:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8001006:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 800100a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800100e:	bd38      	pop	{r3, r4, r5, pc}
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001010:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8001012:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ed      	bne.n	8000ff6 <usart_flush+0xe>
 800101a:	e7f0      	b.n	8000ffe <usart_flush+0x16>

0800101c <usart_peek>:
}

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 800101c:	6880      	ldr	r0, [r0, #8]
 800101e:	e67b      	b.n	8000d18 <buffer_peek>

08001020 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001020:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8001022:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8001026:	4770      	bx	lr

08001028 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001028:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <USART1_IRQHandler+0x64>)
 800102c:	f240 5125 	movw	r1, #1317	; 0x525
 8001030:	f001 ff2a 	bl	8002e88 <USART_GetITStatus>
 8001034:	b140      	cbz	r0, 8001048 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <USART1_IRQHandler+0x68>)
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <USART1_IRQHandler+0x64>)
 800103a:	689c      	ldr	r4, [r3, #8]
 800103c:	f001 fe72 	bl	8002d24 <USART_ReceiveData>
 8001040:	4601      	mov	r1, r0
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff fe27 	bl	8000c96 <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <USART1_IRQHandler+0x64>)
 800104a:	f240 7127 	movw	r1, #1831	; 0x727
 800104e:	f001 ff1b 	bl	8002e88 <USART_GetITStatus>
 8001052:	2800      	cmp	r0, #0
 8001054:	d019      	beq.n	800108a <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <USART1_IRQHandler+0x68>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 800105e:	b95a      	cbnz	r2, 8001078 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <USART1_IRQHandler+0x64>)
 8001062:	f240 7127 	movw	r1, #1831	; 0x727
 8001066:	f001 feed 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <USART1_IRQHandler+0x64>)
 800106c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8001070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8001074:	f001 bf28 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001078:	68d8      	ldr	r0, [r3, #12]
 800107a:	f7ff fe2f 	bl	8000cdc <buffer_deque>
 800107e:	4601      	mov	r1, r0
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x64>)
		}
	}
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001086:	f001 be49 	b.w	8002d1c <USART_SendData>
 800108a:	bd10      	pop	{r4, pc}
 800108c:	40011000 	.word	0x40011000
 8001090:	20001008 	.word	0x20001008

08001094 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8001094:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <USART2_IRQHandler+0x64>)
 8001098:	f240 5125 	movw	r1, #1317	; 0x525
 800109c:	f001 fef4 	bl	8002e88 <USART_GetITStatus>
 80010a0:	b140      	cbz	r0, 80010b4 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <USART2_IRQHandler+0x68>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010a6:	689c      	ldr	r4, [r3, #8]
 80010a8:	f001 fe3c 	bl	8002d24 <USART_ReceiveData>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff fdf1 	bl	8000c96 <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010b6:	f240 7127 	movw	r1, #1831	; 0x727
 80010ba:	f001 fee5 	bl	8002e88 <USART_GetITStatus>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d018      	beq.n	80010f4 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <USART2_IRQHandler+0x68>)
 80010c4:	68d8      	ldr	r0, [r3, #12]
 80010c6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80010ca:	b95a      	cbnz	r2, 80010e4 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010ce:	f240 7127 	movw	r1, #1831	; 0x727
 80010d2:	f001 feb7 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010d8:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 80010dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010e0:	f001 bef2 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010e4:	f7ff fdfa 	bl	8000cdc <buffer_deque>
 80010e8:	4601      	mov	r1, r0
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <USART2_IRQHandler+0x64>)
		}
	}
}
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010f0:	f001 be14 	b.w	8002d1c <USART_SendData>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	2000166c 	.word	0x2000166c

08001100 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8001100:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <USART3_IRQHandler+0x64>)
 8001104:	f240 5125 	movw	r1, #1317	; 0x525
 8001108:	f001 febe 	bl	8002e88 <USART_GetITStatus>
 800110c:	b140      	cbz	r0, 8001120 <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <USART3_IRQHandler+0x68>)
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <USART3_IRQHandler+0x64>)
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	f001 fe06 	bl	8002d24 <USART_ReceiveData>
 8001118:	4601      	mov	r1, r0
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fdbb 	bl	8000c96 <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <USART3_IRQHandler+0x64>)
 8001122:	f240 7127 	movw	r1, #1831	; 0x727
 8001126:	f001 feaf 	bl	8002e88 <USART_GetITStatus>
 800112a:	2800      	cmp	r0, #0
 800112c:	d018      	beq.n	8001160 <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <USART3_IRQHandler+0x68>)
 8001130:	68d8      	ldr	r0, [r3, #12]
 8001132:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8001136:	b95a      	cbnz	r2, 8001150 <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <USART3_IRQHandler+0x64>)
 800113a:	f240 7127 	movw	r1, #1831	; 0x727
 800113e:	f001 fe81 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <USART3_IRQHandler+0x64>)
 8001144:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800114c:	f001 bebc 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8001150:	f7ff fdc4 	bl	8000cdc <buffer_deque>
 8001154:	4601      	mov	r1, r0
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 800115c:	f001 bdde 	b.w	8002d1c <USART_SendData>
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40004800 	.word	0x40004800
 8001168:	20001018 	.word	0x20001018

0800116c <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 800116c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <UART4_IRQHandler+0x64>)
 8001170:	f240 5125 	movw	r1, #1317	; 0x525
 8001174:	f001 fe88 	bl	8002e88 <USART_GetITStatus>
 8001178:	b140      	cbz	r0, 800118c <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <UART4_IRQHandler+0x68>)
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <UART4_IRQHandler+0x64>)
 800117e:	689c      	ldr	r4, [r3, #8]
 8001180:	f001 fdd0 	bl	8002d24 <USART_ReceiveData>
 8001184:	4601      	mov	r1, r0
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fd85 	bl	8000c96 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <UART4_IRQHandler+0x64>)
 800118e:	f240 7127 	movw	r1, #1831	; 0x727
 8001192:	f001 fe79 	bl	8002e88 <USART_GetITStatus>
 8001196:	2800      	cmp	r0, #0
 8001198:	d018      	beq.n	80011cc <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <UART4_IRQHandler+0x68>)
 800119c:	68d8      	ldr	r0, [r3, #12]
 800119e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80011a2:	b95a      	cbnz	r2, 80011bc <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011a6:	f240 7127 	movw	r1, #1831	; 0x727
 80011aa:	f001 fe4b 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011b0:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 80011b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011b8:	f001 be86 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011bc:	f7ff fd8e 	bl	8000cdc <buffer_deque>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <UART4_IRQHandler+0x64>)
		}
	}
}
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011c8:	f001 bda8 	b.w	8002d1c <USART_SendData>
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	bf00      	nop
 80011d0:	40004c00 	.word	0x40004c00
 80011d4:	2000165c 	.word	0x2000165c

080011d8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80011d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <NVIC_PriorityGroupConfig+0x10>)
 80011de:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80011e2:	60d8      	str	r0, [r3, #12]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011ec:	78c3      	ldrb	r3, [r0, #3]
 80011ee:	b313      	cbz	r3, 8001236 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011f2:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80011fc:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001206:	210f      	movs	r1, #15
 8001208:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800120c:	7881      	ldrb	r1, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800120e:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001214:	7803      	ldrb	r3, [r0, #0]
 8001216:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800121a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001222:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001226:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001228:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800122a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	e007      	b.n	8001246 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001236:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001238:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800123a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001244:	3120      	adds	r1, #32
 8001246:	4a03      	ldr	r2, [pc, #12]	; (8001254 <NVIC_Init+0x68>)
 8001248:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	e000e100 	.word	0xe000e100

08001258 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001258:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800125c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <NVIC_SetVectorTable+0x10>)
 8001262:	4308      	orrs	r0, r1
 8001264:	6098      	str	r0, [r3, #8]
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800126e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001270:	b109      	cbz	r1, 8001276 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8001272:	4310      	orrs	r0, r2
 8001274:	e001      	b.n	800127a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001276:	ea22 0000 	bic.w	r0, r2, r0
 800127a:	6118      	str	r0, [r3, #16]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001286:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001288:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800128a:	bf0c      	ite	eq
 800128c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001290:	f022 0204 	bicne.w	r2, r2, #4
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4770      	bx	lr
 8001298:	e000e010 	.word	0xe000e010

0800129c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800129c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <GPIO_DeInit+0xb4>)
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d105      	bne.n	80012b0 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80012a4:	2001      	movs	r0, #1
 80012a6:	4601      	mov	r1, r0
 80012a8:	f000 fc48 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80012ac:	2001      	movs	r0, #1
 80012ae:	e048      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <GPIO_DeInit+0xb8>)
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d105      	bne.n	80012c2 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012b6:	2002      	movs	r0, #2
 80012b8:	2101      	movs	r1, #1
 80012ba:	f000 fc3f 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80012be:	2002      	movs	r0, #2
 80012c0:	e03f      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <GPIO_DeInit+0xbc>)
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d105      	bne.n	80012d4 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012c8:	2004      	movs	r0, #4
 80012ca:	2101      	movs	r1, #1
 80012cc:	f000 fc36 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80012d0:	2004      	movs	r0, #4
 80012d2:	e036      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <GPIO_DeInit+0xc0>)
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d105      	bne.n	80012e6 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80012da:	2008      	movs	r0, #8
 80012dc:	2101      	movs	r1, #1
 80012de:	f000 fc2d 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80012e2:	2008      	movs	r0, #8
 80012e4:	e02d      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <GPIO_DeInit+0xc4>)
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d105      	bne.n	80012f8 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80012ec:	2010      	movs	r0, #16
 80012ee:	2101      	movs	r1, #1
 80012f0:	f000 fc24 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80012f4:	2010      	movs	r0, #16
 80012f6:	e024      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <GPIO_DeInit+0xc8>)
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d105      	bne.n	800130a <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80012fe:	2020      	movs	r0, #32
 8001300:	2101      	movs	r1, #1
 8001302:	f000 fc1b 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001306:	2020      	movs	r0, #32
 8001308:	e01b      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <GPIO_DeInit+0xcc>)
 800130c:	4298      	cmp	r0, r3
 800130e:	d105      	bne.n	800131c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001310:	2040      	movs	r0, #64	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	f000 fc12 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	e012      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <GPIO_DeInit+0xd0>)
 800131e:	4298      	cmp	r0, r3
 8001320:	d105      	bne.n	800132e <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001322:	2080      	movs	r0, #128	; 0x80
 8001324:	2101      	movs	r1, #1
 8001326:	f000 fc09 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800132a:	2080      	movs	r0, #128	; 0x80
 800132c:	e009      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <GPIO_DeInit+0xd4>)
 8001330:	4298      	cmp	r0, r3
 8001332:	d10b      	bne.n	800134c <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001334:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001338:	2101      	movs	r1, #1
 800133a:	f000 fbff 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800133e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001342:	2100      	movs	r1, #0
    }
  }
}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001348:	f000 bbf8 	b.w	8001b3c <RCC_AHB1PeriphResetCmd>
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40022000 	.word	0x40022000

08001374 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001378:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800137a:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 800137c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001380:	f04f 0803 	mov.w	r8, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001384:	fa0c f203 	lsl.w	r2, ip, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001388:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 800138c:	4295      	cmp	r5, r2
 800138e:	d130      	bne.n	80013f2 <GPIO_Init+0x7e>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8001390:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001392:	6806      	ldr	r6, [r0, #0]
 8001394:	fa08 f402 	lsl.w	r4, r8, r2
 8001398:	43e4      	mvns	r4, r4
 800139a:	4026      	ands	r6, r4
 800139c:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800139e:	790e      	ldrb	r6, [r1, #4]
 80013a0:	f8d0 9000 	ldr.w	r9, [r0]
 80013a4:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013a8:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013aa:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013ae:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013b0:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013b4:	d814      	bhi.n	80013e0 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013b6:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013b8:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013bc:	4026      	ands	r6, r4
 80013be:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013c0:	6886      	ldr	r6, [r0, #8]
 80013c2:	fa09 f902 	lsl.w	r9, r9, r2
 80013c6:	ea49 0606 	orr.w	r6, r9, r6
 80013ca:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013cc:	6846      	ldr	r6, [r0, #4]
 80013ce:	ea26 0505 	bic.w	r5, r6, r5
 80013d2:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013d4:	798d      	ldrb	r5, [r1, #6]
 80013d6:	6846      	ldr	r6, [r0, #4]
 80013d8:	409d      	lsls	r5, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80013da:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013dc:	4335      	orrs	r5, r6
 80013de:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80013e0:	68c5      	ldr	r5, [r0, #12]
 80013e2:	402c      	ands	r4, r5
 80013e4:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013e6:	79cd      	ldrb	r5, [r1, #7]
 80013e8:	68c4      	ldr	r4, [r0, #12]
 80013ea:	fa05 f202 	lsl.w	r2, r5, r2
 80013ee:	4322      	orrs	r2, r4
 80013f0:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013f2:	3301      	adds	r3, #1
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d1c5      	bne.n	8001384 <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80013f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080013fc <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001402:	2300      	movs	r3, #0
 8001404:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001406:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001408:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800140a:	71c3      	strb	r3, [r0, #7]
 800140c:	4770      	bx	lr

0800140e <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001416:	9b01      	ldr	r3, [sp, #4]
 8001418:	430b      	orrs	r3, r1
 800141a:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800141c:	9b01      	ldr	r3, [sp, #4]
 800141e:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001420:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001426:	69c3      	ldr	r3, [r0, #28]
 8001428:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800142a:	69c3      	ldr	r3, [r0, #28]
 800142c:	9301      	str	r3, [sp, #4]
}
 800142e:	b002      	add	sp, #8
 8001430:	4770      	bx	lr

08001432 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001432:	6903      	ldr	r3, [r0, #16]
 8001434:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001436:	bf0c      	ite	eq
 8001438:	2000      	moveq	r0, #0
 800143a:	2001      	movne	r0, #1
 800143c:	4770      	bx	lr

0800143e <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800143e:	6900      	ldr	r0, [r0, #16]
}
 8001440:	b280      	uxth	r0, r0
 8001442:	4770      	bx	lr

08001444 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001444:	6943      	ldr	r3, [r0, #20]
 8001446:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001448:	bf0c      	ite	eq
 800144a:	2000      	moveq	r0, #0
 800144c:	2001      	movne	r0, #1
 800144e:	4770      	bx	lr

08001450 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001450:	6940      	ldr	r0, [r0, #20]
}
 8001452:	b280      	uxth	r0, r0
 8001454:	4770      	bx	lr

08001456 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001456:	8301      	strh	r1, [r0, #24]
 8001458:	4770      	bx	lr

0800145a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800145a:	8341      	strh	r1, [r0, #26]
 800145c:	4770      	bx	lr

0800145e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800145e:	b10a      	cbz	r2, 8001464 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001460:	8301      	strh	r1, [r0, #24]
 8001462:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001464:	8341      	strh	r1, [r0, #26]
 8001466:	4770      	bx	lr

08001468 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001468:	6141      	str	r1, [r0, #20]
 800146a:	4770      	bx	lr

0800146c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800146c:	6943      	ldr	r3, [r0, #20]
 800146e:	4059      	eors	r1, r3
 8001470:	6141      	str	r1, [r0, #20]
 8001472:	4770      	bx	lr

08001474 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001474:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001478:	08c9      	lsrs	r1, r1, #3
 800147a:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800147c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800147e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001480:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001484:	240f      	movs	r4, #15
 8001486:	409c      	lsls	r4, r3
 8001488:	ea25 0404 	bic.w	r4, r5, r4
 800148c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001490:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001494:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001496:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001498:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 800149c:	bd30      	pop	{r4, r5, pc}
 800149e:	bf00      	nop

080014a0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80014a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <I2C_DeInit+0x50>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d107      	bne.n	80014b8 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80014a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014ac:	2101      	movs	r1, #1
 80014ae:	f000 fb69 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80014b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014b6:	e014      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <I2C_DeInit+0x54>)
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d107      	bne.n	80014ce <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80014be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014c2:	2101      	movs	r1, #1
 80014c4:	f000 fb5e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80014c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014cc:	e009      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <I2C_DeInit+0x58>)
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d10b      	bne.n	80014ec <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80014d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014d8:	2101      	movs	r1, #1
 80014da:	f000 fb53 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014e2:	2100      	movs	r1, #0
    }
  }
}
 80014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014e8:	f000 bb4c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40005800 	.word	0x40005800
 80014f8:	40005c00 	.word	0x40005c00

080014fc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001502:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001504:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001506:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001508:	f000 fa6e 	bl	80019e8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800150c:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <I2C_Init+0xc8>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001510:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001512:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001516:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001518:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800151c:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800151e:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 8001520:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001522:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001524:	8822      	ldrh	r2, [r4, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	0412      	lsls	r2, r2, #16
 800152c:	0c12      	lsrs	r2, r2, #16
 800152e:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <I2C_Init+0xcc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d80a      	bhi.n	800154c <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800153c:	3701      	adds	r7, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800153e:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001540:	b2bf      	uxth	r7, r7
 8001542:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001544:	2b03      	cmp	r3, #3
 8001546:	bf98      	it	ls
 8001548:	2304      	movls	r3, #4
 800154a:	e021      	b.n	8001590 <I2C_Init+0x94>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800154c:	88ee      	ldrh	r6, [r5, #6]
 800154e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001552:	4296      	cmp	r6, r2
 8001554:	d104      	bne.n	8001560 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001556:	2203      	movs	r2, #3
 8001558:	4353      	muls	r3, r2
 800155a:	fbb1 f3f3 	udiv	r3, r1, r3
 800155e:	e005      	b.n	800156c <I2C_Init+0x70>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001560:	2219      	movs	r2, #25
 8001562:	4353      	muls	r3, r2
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	b29b      	uxth	r3, r3
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800156e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001572:	b90a      	cbnz	r2, 8001578 <I2C_Init+0x7c>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001574:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001578:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157c:	4350      	muls	r0, r2
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	fb90 f0f2 	sdiv	r0, r0, r2
 8001586:	3001      	adds	r0, #1
 8001588:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800158a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800158e:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001590:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001592:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001594:	8969      	ldrh	r1, [r5, #10]
 8001596:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001598:	b29b      	uxth	r3, r3
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80015a0:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015a2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015ac:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015ae:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80015b4:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80015b6:	892a      	ldrh	r2, [r5, #8]
 80015b8:	89ab      	ldrh	r3, [r5, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8123      	strh	r3, [r4, #8]
}
 80015c0:	b005      	add	sp, #20
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	000f4240 	.word	0x000f4240
 80015c8:	000186a0 	.word	0x000186a0

080015cc <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80015cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d0:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80015d2:	2300      	movs	r3, #0
 80015d4:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80015da:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80015dc:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015e2:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015e4:	8183      	strh	r3, [r0, #12]
 80015e6:	4770      	bx	lr

080015e8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015e8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015ea:	b119      	cbz	r1, 80015f4 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	e003      	b.n	80015fc <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	8003      	strh	r3, [r0, #0]
 80015fe:	4770      	bx	lr

08001600 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001600:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001602:	b119      	cbz	r1, 800160c <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001604:	b29b      	uxth	r3, r3
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	e003      	b.n	8001614 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	8003      	strh	r3, [r0, #0]
 8001616:	4770      	bx	lr

08001618 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001618:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800161a:	b119      	cbz	r1, 8001624 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800161c:	b29b      	uxth	r3, r3
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	e003      	b.n	800162c <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	8003      	strh	r3, [r0, #0]
 800162e:	4770      	bx	lr

08001630 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001630:	b112      	cbz	r2, 8001638 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001632:	f041 0101 	orr.w	r1, r1, #1
 8001636:	e001      	b.n	800163c <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001638:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800163c:	8201      	strh	r1, [r0, #16]
 800163e:	4770      	bx	lr

08001640 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001640:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001642:	b119      	cbz	r1, 800164c <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001644:	b29b      	uxth	r3, r3
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	e003      	b.n	8001654 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800164c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	0c1b      	lsrs	r3, r3, #16
 8001654:	8003      	strh	r3, [r0, #0]
 8001656:	4770      	bx	lr

08001658 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8001658:	8983      	ldrh	r3, [r0, #12]
 800165a:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800165c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001660:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001664:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8001666:	8183      	strh	r3, [r0, #12]
 8001668:	4770      	bx	lr

0800166a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166c:	b119      	cbz	r1, 8001676 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166e:	b29b      	uxth	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	e003      	b.n	800167e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	8183      	strh	r3, [r0, #12]
 8001680:	4770      	bx	lr

08001682 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001682:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001684:	b119      	cbz	r1, 800168e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001686:	b29b      	uxth	r3, r3
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	e003      	b.n	8001696 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800168e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	8003      	strh	r3, [r0, #0]
 8001698:	4770      	bx	lr

0800169a <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169a:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800169c:	b129      	cbz	r1, 80016aa <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	e001      	b.n	80016ae <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80016aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ae:	8003      	strh	r3, [r0, #0]
 80016b0:	4770      	bx	lr

080016b2 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b2:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80016b4:	b919      	cbnz	r1, 80016be <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	e003      	b.n	80016c6 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80016be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	8003      	strh	r3, [r0, #0]
 80016c8:	4770      	bx	lr

080016ca <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016ca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016ce:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016d0:	d004      	beq.n	80016dc <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	e002      	b.n	80016e2 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	8383      	strh	r3, [r0, #28]
 80016e4:	4770      	bx	lr

080016e6 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016e6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ea:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016ec:	d103      	bne.n	80016f6 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f4:	e003      	b.n	80016fe <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80016f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fa:	041b      	lsls	r3, r3, #16
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	8003      	strh	r3, [r0, #0]
 8001700:	4770      	bx	lr

08001702 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001702:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001706:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001708:	d103      	bne.n	8001712 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800170a:	b29b      	uxth	r3, r3
 800170c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001710:	e003      	b.n	800171a <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	8003      	strh	r3, [r0, #0]
 800171c:	4770      	bx	lr

0800171e <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800171e:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001720:	b119      	cbz	r1, 800172a <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001722:	b29b      	uxth	r3, r3
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	e003      	b.n	8001732 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800172a:	f023 0310 	bic.w	r3, r3, #16
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	8003      	strh	r3, [r0, #0]
 8001734:	4770      	bx	lr

08001736 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001736:	8201      	strh	r1, [r0, #16]
 8001738:	4770      	bx	lr

0800173a <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800173a:	8a00      	ldrh	r0, [r0, #16]
}
 800173c:	b2c0      	uxtb	r0, r0
 800173e:	4770      	bx	lr

08001740 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001740:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001742:	b119      	cbz	r1, 800174c <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001744:	b29b      	uxth	r3, r3
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	e003      	b.n	8001754 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800174c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	0c1b      	lsrs	r3, r3, #16
 8001754:	8003      	strh	r3, [r0, #0]
 8001756:	4770      	bx	lr

08001758 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001758:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800175c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800175e:	d103      	bne.n	8001768 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001760:	b29b      	uxth	r3, r3
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	e003      	b.n	8001770 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	8003      	strh	r3, [r0, #0]
 8001772:	4770      	bx	lr

08001774 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001774:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001776:	b119      	cbz	r1, 8001780 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001778:	b29b      	uxth	r3, r3
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	e003      	b.n	8001788 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001780:	f023 0320 	bic.w	r3, r3, #32
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	8003      	strh	r3, [r0, #0]
 800178a:	4770      	bx	lr

0800178c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800178c:	8b00      	ldrh	r0, [r0, #24]
}
 800178e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001792:	4770      	bx	lr

08001794 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001794:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001796:	b119      	cbz	r1, 80017a0 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001798:	b29b      	uxth	r3, r3
 800179a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179e:	e003      	b.n	80017a8 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80017a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	8083      	strh	r3, [r0, #4]
 80017aa:	4770      	bx	lr

080017ac <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017ac:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017ae:	b119      	cbz	r1, 80017b8 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b6:	e003      	b.n	80017c0 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80017b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	8083      	strh	r3, [r0, #4]
 80017c2:	4770      	bx	lr

080017c4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80017c4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80017ca:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	18c9      	adds	r1, r1, r3
 80017d0:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	8818      	ldrh	r0, [r3, #0]
}
 80017d6:	b280      	uxth	r0, r0
 80017d8:	b002      	add	sp, #8
 80017da:	4770      	bx	lr

080017dc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017dc:	8883      	ldrh	r3, [r0, #4]
 80017de:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80017e0:	b10a      	cbz	r2, 80017e6 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017e2:	4319      	orrs	r1, r3
 80017e4:	e001      	b.n	80017ea <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80017e6:	ea23 0101 	bic.w	r1, r3, r1
 80017ea:	8081      	strh	r1, [r0, #4]
 80017ec:	4770      	bx	lr

080017ee <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017ee:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80017f0:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017f2:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80017f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80017f8:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80017fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80017fe:	1a43      	subs	r3, r0, r1
 8001800:	4258      	negs	r0, r3
 8001802:	4158      	adcs	r0, r3
 8001804:	4770      	bx	lr

08001806 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001806:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001808:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800180a:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800180c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001814:	4770      	bx	lr

08001816 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001816:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800181e:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001820:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001822:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001824:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001826:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800182a:	b113      	cbz	r3, 8001832 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	3314      	adds	r3, #20
 8001830:	e002      	b.n	8001838 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001832:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001834:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001836:	3318      	adds	r3, #24
 8001838:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001840:	bf0c      	ite	eq
 8001842:	2000      	moveq	r0, #0
 8001844:	2001      	movne	r0, #1
 8001846:	b002      	add	sp, #8
 8001848:	4770      	bx	lr

0800184a <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800184a:	43c9      	mvns	r1, r1
 800184c:	b289      	uxth	r1, r1
 800184e:	8281      	strh	r1, [r0, #20]
 8001850:	4770      	bx	lr

08001852 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001852:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001854:	8a80      	ldrh	r0, [r0, #20]
 8001856:	b280      	uxth	r0, r0
 8001858:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185a:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800185c:	d006      	beq.n	800186c <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185e:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001862:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001866:	bf0c      	ite	eq
 8001868:	2000      	moveq	r0, #0
 800186a:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800186c:	4770      	bx	lr

0800186e <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800186e:	43c9      	mvns	r1, r1
 8001870:	b289      	uxth	r1, r1
 8001872:	8281      	strh	r1, [r0, #20]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <RCC_DeInit+0x2c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800188c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001890:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <RCC_DeInit+0x30>)
 8001894:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800189c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	24003010 	.word	0x24003010

080018ac <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <RCC_HSEConfig+0xc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80018b2:	7018      	strb	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023802 	.word	0x40023802

080018bc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <RCC_AdjustHSICalibrationValue+0x10>)
 80018be:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80018c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80018c4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80018c8:	6018      	str	r0, [r3, #0]
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800

080018d0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <RCC_HSICmd+0x8>)
 80018d2:	6018      	str	r0, [r3, #0]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	42470000 	.word	0x42470000

080018dc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <RCC_LSEConfig+0x1c>)
 80018de:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e6:	d002      	beq.n	80018ee <RCC_LSEConfig+0x12>
 80018e8:	2804      	cmp	r0, #4
 80018ea:	d104      	bne.n	80018f6 <RCC_LSEConfig+0x1a>
 80018ec:	e001      	b.n	80018f2 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80018ee:	7018      	strb	r0, [r3, #0]
      break;
 80018f0:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80018f2:	2205      	movs	r2, #5
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	4770      	bx	lr
 80018f8:	40023870 	.word	0x40023870

080018fc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <RCC_LSICmd+0x8>)
 80018fe:	6018      	str	r0, [r3, #0]
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	42470e80 	.word	0x42470e80

08001908 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001908:	b510      	push	{r4, lr}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800190a:	9c02      	ldr	r4, [sp, #8]
 800190c:	4301      	orrs	r1, r0
 800190e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800191a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800191e:	4b01      	ldr	r3, [pc, #4]	; (8001924 <RCC_PLLConfig+0x1c>)
 8001920:	605c      	str	r4, [r3, #4]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <RCC_PLLCmd+0x8>)
 800192a:	6018      	str	r0, [r3, #0]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	42470060 	.word	0x42470060

08001934 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001934:	0180      	lsls	r0, r0, #6
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RCC_PLLI2SConfig+0x10>)
 8001938:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 800193c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <RCC_PLLI2SCmd+0x8>)
 800194a:	6018      	str	r0, [r3, #0]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	42470068 	.word	0x42470068

08001954 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <RCC_ClockSecuritySystemCmd+0x8>)
 8001956:	6018      	str	r0, [r3, #0]
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	4247004c 	.word	0x4247004c

08001960 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <RCC_MCO1Config+0x10>)
 8001962:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001964:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001968:	4310      	orrs	r0, r2
 800196a:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800196c:	6099      	str	r1, [r3, #8]
 800196e:	4770      	bx	lr
 8001970:	40023800 	.word	0x40023800

08001974 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <RCC_MCO2Config+0x10>)
 8001976:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001978:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800197c:	4310      	orrs	r0, r2
 800197e:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001980:	6099      	str	r1, [r3, #8]
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800

08001988 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <RCC_SYSCLKConfig+0x10>)
 800198a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800198c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001990:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001992:	6098      	str	r0, [r3, #8]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <RCC_GetSYSCLKSource+0xc>)
 800199e:	6898      	ldr	r0, [r3, #8]
}
 80019a0:	f000 000c 	and.w	r0, r0, #12
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <RCC_HCLKConfig+0x10>)
 80019ae:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019b4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019b6:	6098      	str	r0, [r3, #8]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <RCC_PCLK1Config+0x10>)
 80019c2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80019c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019c8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ca:	6098      	str	r0, [r3, #8]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <RCC_PCLK2Config+0x10>)
 80019d6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80019d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80019dc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019e0:	6098      	str	r0, [r3, #8]
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800

080019e8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80019f0:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80019f2:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80019f4:	d003      	beq.n	80019fe <RCC_GetClocksFreq+0x16>
 80019f6:	2a08      	cmp	r2, #8
 80019f8:	d003      	beq.n	8001a02 <RCC_GetClocksFreq+0x1a>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <RCC_GetClocksFreq+0x7c>)
 80019fc:	e018      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <RCC_GetClocksFreq+0x80>)
 8001a00:	e016      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001a02:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a04:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001a06:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	bf14      	ite	ne
 8001a0e:	4b16      	ldrne	r3, [pc, #88]	; (8001a68 <RCC_GetClocksFreq+0x80>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a10:	4b14      	ldreq	r3, [pc, #80]	; (8001a64 <RCC_GetClocksFreq+0x7c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a16:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 8001a1c:	6852      	ldr	r2, [r2, #4]
 8001a1e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a22:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a26:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a28:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a2a:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a2c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <RCC_GetClocksFreq+0x78>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a32:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a34:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <RCC_GetClocksFreq+0x84>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8001a38:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001a3c:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001a3e:	6803      	ldr	r3, [r0, #0]
 8001a40:	40e3      	lsrs	r3, r4
 8001a42:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001a44:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8001a46:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001a4a:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a4c:	fa23 f404 	lsr.w	r4, r3, r4
 8001a50:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001a52:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8001a54:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001a58:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a5a:	40d3      	lsrs	r3, r2
 8001a5c:	60c3      	str	r3, [r0, #12]
 8001a5e:	bd10      	pop	{r4, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	20000074 	.word	0x20000074

08001a70 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001a70:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <RCC_RTCCLKConfig+0x2c>)
 8001a7a:	d108      	bne.n	8001a8e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001a7c:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a7e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001a82:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a8a:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001a8c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a90:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001a94:	4310      	orrs	r0, r2
 8001a96:	6718      	str	r0, [r3, #112]	; 0x70
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001aa0:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <RCC_RTCCLKCmd+0x8>)
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	42470e3c 	.word	0x42470e3c

08001aac <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <RCC_BackupResetCmd+0x8>)
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	42470e40 	.word	0x42470e40

08001ab8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <RCC_I2SCLKConfig+0x8>)
 8001aba:	6018      	str	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	4247015c 	.word	0x4247015c

08001ac4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	b109      	cbz	r1, 8001ace <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001aca:	4310      	orrs	r0, r2
 8001acc:	e001      	b.n	8001ad2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001ace:	ea22 0000 	bic.w	r0, r2, r0
 8001ad2:	6318      	str	r0, [r3, #48]	; 0x30
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ae0:	b109      	cbz	r1, 8001ae6 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ae2:	4310      	orrs	r0, r2
 8001ae4:	e001      	b.n	8001aea <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001ae6:	ea22 0000 	bic.w	r0, r2, r0
 8001aea:	6358      	str	r0, [r3, #52]	; 0x34
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001af8:	b109      	cbz	r1, 8001afe <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001afa:	4310      	orrs	r0, r2
 8001afc:	e001      	b.n	8001b02 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001afe:	ea22 0000 	bic.w	r0, r2, r0
 8001b02:	6398      	str	r0, [r3, #56]	; 0x38
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b10:	b109      	cbz	r1, 8001b16 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b12:	4310      	orrs	r0, r2
 8001b14:	e001      	b.n	8001b1a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001b16:	ea22 0000 	bic.w	r0, r2, r0
 8001b1a:	6418      	str	r0, [r3, #64]	; 0x40
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b28:	b109      	cbz	r1, 8001b2e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b2a:	4310      	orrs	r0, r2
 8001b2c:	e001      	b.n	8001b32 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b2e:	ea22 0000 	bic.w	r0, r2, r0
 8001b32:	6458      	str	r0, [r3, #68]	; 0x44
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b3e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b40:	b109      	cbz	r1, 8001b46 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b42:	4310      	orrs	r0, r2
 8001b44:	e001      	b.n	8001b4a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001b46:	ea22 0000 	bic.w	r0, r2, r0
 8001b4a:	6118      	str	r0, [r3, #16]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b56:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b58:	b109      	cbz	r1, 8001b5e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b5a:	4310      	orrs	r0, r2
 8001b5c:	e001      	b.n	8001b62 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001b5e:	ea22 0000 	bic.w	r0, r2, r0
 8001b62:	6158      	str	r0, [r3, #20]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b6e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b70:	b109      	cbz	r1, 8001b76 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b72:	4310      	orrs	r0, r2
 8001b74:	e001      	b.n	8001b7a <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001b76:	ea22 0000 	bic.w	r0, r2, r0
 8001b7a:	6198      	str	r0, [r3, #24]
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b86:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b88:	b109      	cbz	r1, 8001b8e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	e001      	b.n	8001b92 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001b8e:	ea22 0000 	bic.w	r0, r2, r0
 8001b92:	6218      	str	r0, [r3, #32]
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ba0:	b109      	cbz	r1, 8001ba6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ba2:	4310      	orrs	r0, r2
 8001ba4:	e001      	b.n	8001baa <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ba6:	ea22 0000 	bic.w	r0, r2, r0
 8001baa:	6258      	str	r0, [r3, #36]	; 0x24
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bb8:	b109      	cbz	r1, 8001bbe <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bba:	4310      	orrs	r0, r2
 8001bbc:	e001      	b.n	8001bc2 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001bbe:	ea22 0000 	bic.w	r0, r2, r0
 8001bc2:	6518      	str	r0, [r3, #80]	; 0x50
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bd0:	b109      	cbz	r1, 8001bd6 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bd2:	4310      	orrs	r0, r2
 8001bd4:	e001      	b.n	8001bda <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001bd6:	ea22 0000 	bic.w	r0, r2, r0
 8001bda:	6558      	str	r0, [r3, #84]	; 0x54
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001be8:	b109      	cbz	r1, 8001bee <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001bea:	4310      	orrs	r0, r2
 8001bec:	e001      	b.n	8001bf2 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001bee:	ea22 0000 	bic.w	r0, r2, r0
 8001bf2:	6598      	str	r0, [r3, #88]	; 0x58
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c00:	b109      	cbz	r1, 8001c06 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001c02:	4310      	orrs	r0, r2
 8001c04:	e001      	b.n	8001c0a <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001c06:	ea22 0000 	bic.w	r0, r2, r0
 8001c0a:	6618      	str	r0, [r3, #96]	; 0x60
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c18:	b109      	cbz	r1, 8001c1e <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c1a:	4310      	orrs	r0, r2
 8001c1c:	e001      	b.n	8001c22 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001c1e:	ea22 0000 	bic.w	r0, r2, r0
 8001c22:	6658      	str	r0, [r3, #100]	; 0x64
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c2e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c30:	b109      	cbz	r1, 8001c36 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c32:	4310      	orrs	r0, r2
 8001c34:	e001      	b.n	8001c3a <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001c36:	ea22 0000 	bic.w	r0, r2, r0
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	4002380d 	.word	0x4002380d

08001c44 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001c44:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <RCC_GetFlagStatus+0x24>)
 8001c4a:	d101      	bne.n	8001c50 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	e003      	b.n	8001c58 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001c50:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001c52:	bf0c      	ite	eq
 8001c54:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001c56:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001c58:	f000 001f 	and.w	r0, r0, #31
 8001c5c:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001c60:	f000 0001 	and.w	r0, r0, #1
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001c6c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001c72:	2031      	movs	r0, #49	; 0x31
 8001c74:	f7ff ffe6 	bl	8001c44 <RCC_GetFlagStatus>
    startupcounter++;
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c84:	d001      	beq.n	8001c8a <RCC_WaitForHSEStartUp+0x1e>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0f3      	beq.n	8001c72 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	2031      	movs	r0, #49	; 0x31
 8001c8c:	f7ff ffda 	bl	8001c44 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001c90:	3000      	adds	r0, #0
 8001c92:	bf18      	it	ne
 8001c94:	2001      	movne	r0, #1
 8001c96:	bd0e      	pop	{r1, r2, r3, pc}

08001c98 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <RCC_ClearFlag+0xc>)
 8001c9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <RCC_GetITStatus+0x10>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001cae:	bf0c      	ite	eq
 8001cb0:	2000      	moveq	r0, #0
 8001cb2:	2001      	movne	r0, #1
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <RCC_ClearITPendingBit+0x8>)
 8001cbe:	7018      	strb	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	4002380e 	.word	0x4002380e

08001cc8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001cc8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <SPI_I2S_DeInit+0x58>)
 8001ccc:	4298      	cmp	r0, r3
 8001cce:	d10b      	bne.n	8001ce8 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001cd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f7ff ff61 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cde:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001ce4:	f7ff bf5a 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <SPI_I2S_DeInit+0x5c>)
 8001cea:	4298      	cmp	r0, r3
 8001cec:	d107      	bne.n	8001cfe <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001cee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f7ff ff46 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cfc:	e009      	b.n	8001d12 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <SPI_I2S_DeInit+0x60>)
 8001d00:	4298      	cmp	r0, r3
 8001d02:	d10b      	bne.n	8001d1c <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001d04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d08:	2101      	movs	r1, #1
 8001d0a:	f7ff ff3b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d12:	2100      	movs	r1, #0
    }
  }
}
 8001d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d18:	f7ff bf34 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 8001d1c:	bd08      	pop	{r3, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013000 	.word	0x40013000
 8001d24:	40003800 	.word	0x40003800
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d2c:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001d2e:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001d30:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d32:	884c      	ldrh	r4, [r1, #2]
 8001d34:	4323      	orrs	r3, r4
 8001d36:	888c      	ldrh	r4, [r1, #4]
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	88cc      	ldrh	r4, [r1, #6]
 8001d3c:	4323      	orrs	r3, r4
 8001d3e:	890c      	ldrh	r4, [r1, #8]
 8001d40:	4323      	orrs	r3, r4
 8001d42:	894c      	ldrh	r4, [r1, #10]
 8001d44:	4323      	orrs	r3, r4
 8001d46:	898c      	ldrh	r4, [r1, #12]
 8001d48:	4323      	orrs	r3, r4
 8001d4a:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001d4c:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d50:	4323      	orrs	r3, r4
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001d56:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001d58:	8b83      	ldrh	r3, [r0, #28]
 8001d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001d64:	8a0b      	ldrh	r3, [r1, #16]
 8001d66:	8203      	strh	r3, [r0, #16]
 8001d68:	bd10      	pop	{r4, pc}

08001d6a <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d6a:	8b83      	ldrh	r3, [r0, #28]
 8001d6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d70:	f023 030f 	bic.w	r3, r3, #15
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d7e:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d82:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d84:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d86:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d88:	d038      	beq.n	8001dfc <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <I2S_Init+0xca>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001d8c:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8e:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2602      	movne	r6, #2
 8001d96:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d98:	0224      	lsls	r4, r4, #8
 8001d9a:	d503      	bpl.n	8001da4 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001d9c:	6894      	ldr	r4, [r2, #8]
 8001d9e:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001da2:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001da4:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001da8:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001dac:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dae:	f8df c088 	ldr.w	ip, [pc, #136]	; 8001e38 <I2S_Init+0xce>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001db6:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001dba:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dbe:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001dc0:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dc4:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001dc8:	88ca      	ldrh	r2, [r1, #6]
 8001dca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dce:	bf18      	it	ne
 8001dd0:	0176      	lslne	r6, r6, #5
 8001dd2:	f04f 020a 	mov.w	r2, #10
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dd6:	bf0c      	ite	eq
 8001dd8:	0a24      	lsreq	r4, r4, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dda:	fbb4 f4f6 	udivne	r4, r4, r6
 8001dde:	4362      	muls	r2, r4
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001de6:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001de8:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001dea:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001dee:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df2:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001df4:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	e000      	b.n	8001dfe <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001dfc:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001dfe:	1e9c      	subs	r4, r3, #2
 8001e00:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e02:	2cfe      	cmp	r4, #254	; 0xfe
 8001e04:	bf28      	it	cs
 8001e06:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e08:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e0a:	bf28      	it	cs
 8001e0c:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4323      	orrs	r3, r4
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e12:	880a      	ldrh	r2, [r1, #0]
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e18:	ea45 0302 	orr.w	r3, r5, r2

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e1c:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e22:	4313      	orrs	r3, r2
 8001e24:	888a      	ldrh	r2, [r1, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	898a      	ldrh	r2, [r1, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001e2e:	8383      	strh	r3, [r0, #28]
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001e40:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001e42:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001e44:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001e46:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001e48:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001e4a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001e4c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	8203      	strh	r3, [r0, #16]
 8001e52:	4770      	bx	lr

08001e54 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e54:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e56:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e58:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001e5a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001e5c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001e5e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e60:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001e62:	8183      	strh	r3, [r0, #12]
 8001e64:	4770      	bx	lr

08001e66 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e66:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e68:	b119      	cbz	r1, 8001e72 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e70:	e003      	b.n	8001e7a <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	8003      	strh	r3, [r0, #0]
 8001e7c:	4770      	bx	lr

08001e7e <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e7e:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e80:	b119      	cbz	r1, 8001e8a <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e88:	e003      	b.n	8001e92 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	8383      	strh	r3, [r0, #28]
 8001e94:	4770      	bx	lr

08001e96 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001e96:	8803      	ldrh	r3, [r0, #0]
 8001e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001ea2:	8803      	ldrh	r3, [r0, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4319      	orrs	r1, r3
 8001ea8:	8001      	strh	r1, [r0, #0]
 8001eaa:	4770      	bx	lr

08001eac <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eb2:	d103      	bne.n	8001ebc <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	e003      	b.n	8001ec4 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	8003      	strh	r3, [r0, #0]
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ec8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001ecc:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ece:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ed0:	d003      	beq.n	8001eda <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	e003      	b.n	8001ee2 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	8003      	strh	r3, [r0, #0]
 8001ee4:	4770      	bx	lr

08001ee6 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001ee6:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ee8:	b119      	cbz	r1, 8001ef2 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	e003      	b.n	8001efa <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	8083      	strh	r3, [r0, #4]
 8001efc:	4770      	bx	lr

08001efe <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001efe:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f00:	b119      	cbz	r1, 8001f0a <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	e003      	b.n	8001f12 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001f0a:	f023 0310 	bic.w	r3, r3, #16
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	8083      	strh	r3, [r0, #4]
 8001f14:	4770      	bx	lr

08001f16 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f16:	8b83      	ldrh	r3, [r0, #28]
 8001f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001f26:	2302      	movs	r3, #2
 8001f28:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2a:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f2c:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001f32:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f34:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f36:	d102      	bne.n	8001f3e <I2S_FullDuplexConfig+0x28>
  {
    tmp = I2S_Mode_SlaveRx;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	e002      	b.n	8001f44 <I2S_FullDuplexConfig+0x2e>
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0fa      	beq.n	8001f38 <I2S_FullDuplexConfig+0x22>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
    {
      tmp = I2S_Mode_SlaveTx;
 8001f42:	2300      	movs	r3, #0
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f44:	884c      	ldrh	r4, [r1, #2]
 8001f46:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f48:	888c      	ldrh	r4, [r1, #4]
 8001f4a:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f50:	4322      	orrs	r2, r4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	b292      	uxth	r2, r2
 8001f56:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001f58:	8383      	strh	r3, [r0, #28]
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001f5c:	8980      	ldrh	r0, [r0, #12]
}
 8001f5e:	b280      	uxth	r0, r0
 8001f60:	4770      	bx	lr

08001f62 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001f62:	8181      	strh	r1, [r0, #12]
 8001f64:	4770      	bx	lr

08001f66 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f66:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f68:	b119      	cbz	r1, 8001f72 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f70:	e003      	b.n	8001f7a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	8003      	strh	r3, [r0, #0]
 8001f7c:	4770      	bx	lr

08001f7e <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001f7e:	8803      	ldrh	r3, [r0, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f86:	8003      	strh	r3, [r0, #0]
 8001f88:	4770      	bx	lr

08001f8a <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001f8a:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001f8c:	bf14      	ite	ne
 8001f8e:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001f90:	8a80      	ldrheq	r0, [r0, #20]
 8001f92:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001f94:	4770      	bx	lr

08001f96 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001f96:	8a00      	ldrh	r0, [r0, #16]
}
 8001f98:	b280      	uxth	r0, r0
 8001f9a:	4770      	bx	lr

08001f9c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001f9c:	8883      	ldrh	r3, [r0, #4]
 8001f9e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001fa0:	b10a      	cbz	r2, 8001fa6 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	e001      	b.n	8001faa <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001fa6:	ea23 0101 	bic.w	r1, r3, r1
 8001faa:	8081      	strh	r1, [r0, #4]
 8001fac:	4770      	bx	lr

08001fae <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001fae:	0909      	lsrs	r1, r1, #4
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	408b      	lsls	r3, r1
 8001fb4:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001fb6:	b11a      	cbz	r2, 8001fc0 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001fb8:	8882      	ldrh	r2, [r0, #4]
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	e003      	b.n	8001fc8 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001fc0:	8882      	ldrh	r2, [r0, #4]
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	ea22 0303 	bic.w	r3, r2, r3
 8001fc8:	8083      	strh	r3, [r0, #4]
 8001fca:	4770      	bx	lr

08001fcc <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001fcc:	8903      	ldrh	r3, [r0, #8]
 8001fce:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2000      	moveq	r0, #0
 8001fd4:	2001      	movne	r0, #1
 8001fd6:	4770      	bx	lr

08001fd8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001fd8:	43c9      	mvns	r1, r1
 8001fda:	b289      	uxth	r1, r1
 8001fdc:	8101      	strh	r1, [r0, #8]
 8001fde:	4770      	bx	lr

08001fe0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001fe0:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001fe2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fe4:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fe6:	f001 020f 	and.w	r2, r1, #15
 8001fea:	2301      	movs	r3, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fec:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fee:	fa03 f202 	lsl.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff2:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ff4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff6:	d005      	beq.n	8002004 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001ff8:	0909      	lsrs	r1, r1, #4
 8001ffa:	408b      	lsls	r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ffc:	421c      	tst	r4, r3
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001ffe:	bf0c      	ite	eq
 8002000:	2000      	moveq	r0, #0
 8002002:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002004:	bd10      	pop	{r4, pc}

08002006 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002006:	f001 010f 	and.w	r1, r1, #15
 800200a:	2301      	movs	r3, #1
 800200c:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800200e:	43db      	mvns	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	8103      	strh	r3, [r0, #8]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002018:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800201a:	8c04      	ldrh	r4, [r0, #32]
 800201c:	f024 0401 	bic.w	r4, r4, #1
 8002020:	0424      	lsls	r4, r4, #16
 8002022:	0c24      	lsrs	r4, r4, #16
 8002024:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002026:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002028:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 800202a:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800202c:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002030:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002032:	432a      	orrs	r2, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002034:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002038:	ea42 1303 	orr.w	r3, r2, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800203c:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002040:	b29d      	uxth	r5, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002042:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002044:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8002046:	8401      	strh	r1, [r0, #32]
 8002048:	bd30      	pop	{r4, r5, pc}

0800204a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800204a:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800204c:	8c04      	ldrh	r4, [r0, #32]
 800204e:	f024 0410 	bic.w	r4, r4, #16
 8002052:	0424      	lsls	r4, r4, #16
 8002054:	0c24      	lsrs	r4, r4, #16
 8002056:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002058:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800205a:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800205c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002060:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002062:	0524      	lsls	r4, r4, #20
 8002064:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002066:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800206a:	f045 0510 	orr.w	r5, r5, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800206e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002072:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002076:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800207a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800207c:	b28d      	uxth	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800207e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002080:	8405      	strh	r5, [r0, #32]
 8002082:	bd30      	pop	{r4, r5, pc}

08002084 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002084:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <TIM_DeInit+0x120>)
 8002088:	4298      	cmp	r0, r3
 800208a:	d105      	bne.n	8002098 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800208c:	2001      	movs	r0, #1
 800208e:	4601      	mov	r1, r0
 8002090:	f7ff fd84 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002094:	2001      	movs	r0, #1
 8002096:	e03d      	b.n	8002114 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8002098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800209c:	d105      	bne.n	80020aa <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800209e:	2001      	movs	r0, #1
 80020a0:	4601      	mov	r1, r0
 80020a2:	f7ff fd6f 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80020a6:	2001      	movs	r0, #1
 80020a8:	e076      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <TIM_DeInit+0x124>)
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d105      	bne.n	80020bc <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80020b0:	2002      	movs	r0, #2
 80020b2:	2101      	movs	r1, #1
 80020b4:	f7ff fd66 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80020b8:	2002      	movs	r0, #2
 80020ba:	e06d      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <TIM_DeInit+0x128>)
 80020be:	4298      	cmp	r0, r3
 80020c0:	d105      	bne.n	80020ce <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80020c2:	2004      	movs	r0, #4
 80020c4:	2101      	movs	r1, #1
 80020c6:	f7ff fd5d 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80020ca:	2004      	movs	r0, #4
 80020cc:	e064      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <TIM_DeInit+0x12c>)
 80020d0:	4298      	cmp	r0, r3
 80020d2:	d105      	bne.n	80020e0 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80020d4:	2008      	movs	r0, #8
 80020d6:	2101      	movs	r1, #1
 80020d8:	f7ff fd54 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80020dc:	2008      	movs	r0, #8
 80020de:	e05b      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <TIM_DeInit+0x130>)
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d105      	bne.n	80020f2 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80020e6:	2010      	movs	r0, #16
 80020e8:	2101      	movs	r1, #1
 80020ea:	f7ff fd4b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80020ee:	2010      	movs	r0, #16
 80020f0:	e052      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <TIM_DeInit+0x134>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d105      	bne.n	8002104 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80020f8:	2020      	movs	r0, #32
 80020fa:	2101      	movs	r1, #1
 80020fc:	f7ff fd42 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002100:	2020      	movs	r0, #32
 8002102:	e049      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <TIM_DeInit+0x138>)
 8002106:	4298      	cmp	r0, r3
 8002108:	d109      	bne.n	800211e <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800210a:	2002      	movs	r0, #2
 800210c:	2101      	movs	r1, #1
 800210e:	f7ff fd45 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002112:	2002      	movs	r0, #2
 8002114:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800211a:	f7ff bd3f 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <TIM_DeInit+0x13c>)
 8002120:	4298      	cmp	r0, r3
 8002122:	d107      	bne.n	8002134 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002124:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002128:	2101      	movs	r1, #1
 800212a:	f7ff fd37 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800212e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002132:	e7ef      	b.n	8002114 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <TIM_DeInit+0x140>)
 8002136:	4298      	cmp	r0, r3
 8002138:	d107      	bne.n	800214a <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800213a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800213e:	2101      	movs	r1, #1
 8002140:	f7ff fd2c 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002144:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002148:	e7e4      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <TIM_DeInit+0x144>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d107      	bne.n	8002160 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002154:	2101      	movs	r1, #1
 8002156:	f7ff fd21 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800215a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800215e:	e7d9      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <TIM_DeInit+0x148>)
 8002162:	4298      	cmp	r0, r3
 8002164:	d105      	bne.n	8002172 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002166:	2040      	movs	r0, #64	; 0x40
 8002168:	2101      	movs	r1, #1
 800216a:	f7ff fd0b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800216e:	2040      	movs	r0, #64	; 0x40
 8002170:	e012      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <TIM_DeInit+0x14c>)
 8002174:	4298      	cmp	r0, r3
 8002176:	d105      	bne.n	8002184 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002178:	2080      	movs	r0, #128	; 0x80
 800217a:	2101      	movs	r1, #1
 800217c:	f7ff fd02 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002180:	2080      	movs	r0, #128	; 0x80
 8002182:	e009      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <TIM_DeInit+0x150>)
 8002186:	4298      	cmp	r0, r3
 8002188:	d10b      	bne.n	80021a2 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800218a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800218e:	2101      	movs	r1, #1
 8002190:	f7ff fcf8 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002194:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002198:	2100      	movs	r1, #0
    }   
  }
}
 800219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800219e:	f7ff bcf1 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80021a2:	bd08      	pop	{r3, pc}
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40001000 	.word	0x40001000
 80021b8:	40001400 	.word	0x40001400
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800
 80021cc:	40001800 	.word	0x40001800
 80021d0:	40001c00 	.word	0x40001c00
 80021d4:	40002000 	.word	0x40002000

080021d8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021da:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021dc:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021de:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021e0:	d012      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d00e      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ee:	d00b      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80021f0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80021f4:	4290      	cmp	r0, r2
 80021f6:	d007      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d003      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002204:	4290      	cmp	r0, r2
 8002206:	d103      	bne.n	8002210 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002208:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800220e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <TIM_TimeBaseInit+0x78>)
 8002212:	4290      	cmp	r0, r2
 8002214:	d008      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
 8002216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221a:	4290      	cmp	r0, r2
 800221c:	d004      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002222:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002224:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002226:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002228:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800222a:	684b      	ldr	r3, [r1, #4]
 800222c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800222e:	880b      	ldrh	r3, [r1, #0]
 8002230:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <TIM_TimeBaseInit+0x74>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d003      	beq.n	8002240 <TIM_TimeBaseInit+0x68>
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	4298      	cmp	r0, r3
 800223e:	d101      	bne.n	8002244 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002240:	7a8b      	ldrb	r3, [r1, #10]
 8002242:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002244:	2301      	movs	r3, #1
 8002246:	8283      	strh	r3, [r0, #20]
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40001000 	.word	0x40001000

08002254 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002258:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800225a:	2300      	movs	r3, #0
 800225c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800225e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002260:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002262:	7283      	strb	r3, [r0, #10]
 8002264:	4770      	bx	lr

08002266 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002266:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002268:	8282      	strh	r2, [r0, #20]
 800226a:	4770      	bx	lr

0800226c <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800226c:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002276:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002278:	8001      	strh	r1, [r0, #0]
 800227a:	4770      	bx	lr

0800227c <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800227c:	6241      	str	r1, [r0, #36]	; 0x24
 800227e:	4770      	bx	lr

08002280 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002280:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002282:	4770      	bx	lr

08002284 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002284:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002286:	4770      	bx	lr

08002288 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002288:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800228a:	b280      	uxth	r0, r0
 800228c:	4770      	bx	lr

0800228e <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800228e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002290:	b119      	cbz	r1, 800229a <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002292:	b29b      	uxth	r3, r3
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	e003      	b.n	80022a2 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800229a:	f023 0302 	bic.w	r3, r3, #2
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	8003      	strh	r3, [r0, #0]
 80022a4:	4770      	bx	lr

080022a6 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022a6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80022a8:	b119      	cbz	r1, 80022b2 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	e003      	b.n	80022ba <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	8003      	strh	r3, [r0, #0]
 80022bc:	4770      	bx	lr

080022be <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022be:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022c0:	b119      	cbz	r1, 80022ca <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	e003      	b.n	80022d2 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80022ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	8003      	strh	r3, [r0, #0]
 80022d4:	4770      	bx	lr

080022d6 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80022d6:	8803      	ldrh	r3, [r0, #0]
 80022d8:	f023 0308 	bic.w	r3, r3, #8
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80022e2:	8803      	ldrh	r3, [r0, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4319      	orrs	r1, r3
 80022e8:	8001      	strh	r1, [r0, #0]
 80022ea:	4770      	bx	lr

080022ec <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80022ec:	8803      	ldrh	r3, [r0, #0]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80022f8:	8803      	ldrh	r3, [r0, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4319      	orrs	r1, r3
 80022fe:	8001      	strh	r1, [r0, #0]
 8002300:	4770      	bx	lr

08002302 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002302:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002304:	b119      	cbz	r1, 800230e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002306:	b29b      	uxth	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	e003      	b.n	8002316 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	8003      	strh	r3, [r0, #0]
 8002318:	4770      	bx	lr

0800231a <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800231a:	8c03      	ldrh	r3, [r0, #32]
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002326:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002328:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800232c:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800232e:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002330:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002332:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002336:	0412      	lsls	r2, r2, #16
 8002338:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800233a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800233c:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002344:	4335      	orrs	r5, r6
 8002346:	b2ad      	uxth	r5, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002348:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800234a:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800234c:	4d0e      	ldr	r5, [pc, #56]	; (8002388 <TIM_OC1Init+0x6e>)
 800234e:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002352:	d003      	beq.n	800235c <TIM_OC1Init+0x42>
 8002354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002358:	42a8      	cmp	r0, r5
 800235a:	d10e      	bne.n	800237a <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800235c:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800235e:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002360:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002364:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002366:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002368:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800236c:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800236e:	8a0d      	ldrh	r5, [r1, #16]
 8002370:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002372:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002376:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002378:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800237c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800237e:	688a      	ldr	r2, [r1, #8]
 8002380:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	8403      	strh	r3, [r0, #32]
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000

0800238c <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800238c:	8c03      	ldrh	r3, [r0, #32]
 800238e:	f023 0310 	bic.w	r3, r3, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002398:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239a:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800239c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023a0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80023a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80023a6:	0424      	lsls	r4, r4, #16
 80023a8:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023aa:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b2:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b4:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b6:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023bc:	884d      	ldrh	r5, [r1, #2]
 80023be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023c2:	4d13      	ldr	r5, [pc, #76]	; (8002410 <TIM_OC2Init+0x84>)
 80023c4:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c6:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023c8:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023ca:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023cc:	d003      	beq.n	80023d6 <TIM_OC2Init+0x4a>
 80023ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023d2:	42a8      	cmp	r0, r5
 80023d4:	d115      	bne.n	8002402 <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023d6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80023d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023dc:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80023e2:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 80023e6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023e8:	888b      	ldrh	r3, [r1, #4]
 80023ea:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023ee:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80023f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023f4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80023f8:	8a4d      	ldrh	r5, [r1, #18]
 80023fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023fe:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002400:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002402:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002404:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002406:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002408:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	8403      	strh	r3, [r0, #32]
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002414:	8c03      	ldrh	r3, [r0, #32]
 8002416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002422:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002424:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800242a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800242e:	0424      	lsls	r4, r4, #16
 8002430:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002432:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002436:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002438:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243a:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800243c:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002442:	884d      	ldrh	r5, [r1, #2]
 8002444:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002448:	4d12      	ldr	r5, [pc, #72]	; (8002494 <TIM_OC3Init+0x80>)
 800244a:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800244e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002450:	d003      	beq.n	800245a <TIM_OC3Init+0x46>
 8002452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002456:	42a8      	cmp	r0, r5
 8002458:	d115      	bne.n	8002486 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800245a:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800245c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002460:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002462:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002466:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800246a:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800246c:	888b      	ldrh	r3, [r1, #4]
 800246e:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002472:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002474:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002478:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800247c:	8a4d      	ldrh	r5, [r1, #18]
 800247e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002482:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002484:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002486:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002488:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248a:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800248c:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248e:	8403      	strh	r3, [r0, #32]
 8002490:	bd30      	pop	{r4, r5, pc}
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000

08002498 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002498:	8c03      	ldrh	r3, [r0, #32]
 800249a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a4:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024a6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024aa:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ac:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80024ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80024b2:	0412      	lsls	r2, r2, #16
 80024b4:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024be:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c0:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024c2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024c8:	884d      	ldrh	r5, [r1, #2]
 80024ca:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024ce:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <TIM_OC4Init+0x64>)
 80024d0:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d2:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024d4:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024d6:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024d8:	d003      	beq.n	80024e2 <TIM_OC4Init+0x4a>
 80024da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024de:	42a8      	cmp	r0, r5
 80024e0:	d105      	bne.n	80024ee <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e2:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80024e4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80024ec:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024f0:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80024f2:	688a      	ldr	r2, [r1, #8]
 80024f4:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f6:	8403      	strh	r3, [r0, #32]
 80024f8:	bd30      	pop	{r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000

08002500 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002500:	2300      	movs	r3, #0
 8002502:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002504:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002506:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002508:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800250a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800250c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800250e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002510:	8243      	strh	r3, [r0, #18]
 8002512:	4770      	bx	lr

08002514 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002514:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002516:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002518:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251a:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800251c:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251e:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002522:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002526:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002528:	b109      	cbz	r1, 800252e <TIM_SelectOCxM+0x1a>
 800252a:	2908      	cmp	r1, #8
 800252c:	d107      	bne.n	800253e <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 800252e:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002530:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8002534:	58cc      	ldr	r4, [r1, r3]
 8002536:	4020      	ands	r0, r4
 8002538:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800253a:	58c8      	ldr	r0, [r1, r3]
 800253c:	e00a      	b.n	8002554 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800253e:	3904      	subs	r1, #4
 8002540:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002544:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8002548:	58cc      	ldr	r4, [r1, r3]
 800254a:	4020      	ands	r0, r4
 800254c:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	58c8      	ldr	r0, [r1, r3]
 8002552:	b292      	uxth	r2, r2
 8002554:	4302      	orrs	r2, r0
 8002556:	50ca      	str	r2, [r1, r3]
 8002558:	bd30      	pop	{r4, r5, pc}

0800255a <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800255a:	6341      	str	r1, [r0, #52]	; 0x34
 800255c:	4770      	bx	lr

0800255e <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800255e:	6381      	str	r1, [r0, #56]	; 0x38
 8002560:	4770      	bx	lr

08002562 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002562:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002564:	4770      	bx	lr

08002566 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002566:	6401      	str	r1, [r0, #64]	; 0x40
 8002568:	4770      	bx	lr

0800256a <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800256a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002574:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002576:	8301      	strh	r1, [r0, #24]
 8002578:	4770      	bx	lr

0800257a <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800257a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002584:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002588:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800258a:	8303      	strh	r3, [r0, #24]
 800258c:	4770      	bx	lr

0800258e <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800258e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002598:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800259a:	8381      	strh	r1, [r0, #28]
 800259c:	4770      	bx	lr

0800259e <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800259e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80025a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025ac:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ae:	8383      	strh	r3, [r0, #28]
 80025b0:	4770      	bx	lr

080025b2 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025b2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80025b4:	f023 0308 	bic.w	r3, r3, #8
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80025bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025be:	8301      	strh	r1, [r0, #24]
 80025c0:	4770      	bx	lr

080025c2 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025c2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80025c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80025cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025d0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	8303      	strh	r3, [r0, #24]
 80025d4:	4770      	bx	lr

080025d6 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025d6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80025d8:	f023 0308 	bic.w	r3, r3, #8
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80025e0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025e2:	8381      	strh	r1, [r0, #28]
 80025e4:	4770      	bx	lr

080025e6 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025e6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80025e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80025f0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025f4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025f6:	8383      	strh	r3, [r0, #28]
 80025f8:	4770      	bx	lr

080025fa <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002604:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002606:	8301      	strh	r1, [r0, #24]
 8002608:	4770      	bx	lr

0800260a <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800260a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800260c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002614:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002618:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800261a:	8303      	strh	r3, [r0, #24]
 800261c:	4770      	bx	lr

0800261e <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800261e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002628:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800262a:	8381      	strh	r1, [r0, #28]
 800262c:	4770      	bx	lr

0800262e <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800262e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002638:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800263c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800263e:	8383      	strh	r3, [r0, #28]
 8002640:	4770      	bx	lr

08002642 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002642:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800264c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800264e:	8301      	strh	r1, [r0, #24]
 8002650:	4770      	bx	lr

08002652 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002652:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002654:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002658:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800265c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800265e:	8303      	strh	r3, [r0, #24]
 8002660:	4770      	bx	lr

08002662 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002662:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800266c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800266e:	8381      	strh	r1, [r0, #28]
 8002670:	4770      	bx	lr

08002672 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002672:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002674:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002678:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800267c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800267e:	8383      	strh	r3, [r0, #28]
 8002680:	4770      	bx	lr

08002682 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002682:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002684:	f023 0302 	bic.w	r3, r3, #2
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800268c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800268e:	8401      	strh	r1, [r0, #32]
 8002690:	4770      	bx	lr

08002692 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002692:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002694:	f023 0308 	bic.w	r3, r3, #8
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 800269c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800269e:	8401      	strh	r1, [r0, #32]
 80026a0:	4770      	bx	lr

080026a2 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026a2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80026a4:	f023 0320 	bic.w	r3, r3, #32
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80026ac:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026b0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026b2:	8403      	strh	r3, [r0, #32]
 80026b4:	4770      	bx	lr

080026b6 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80026b6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80026b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80026c0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026c4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026c6:	8403      	strh	r3, [r0, #32]
 80026c8:	4770      	bx	lr

080026ca <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026ca:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80026cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80026d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026d8:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026da:	8403      	strh	r3, [r0, #32]
 80026dc:	4770      	bx	lr

080026de <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80026de:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80026e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80026e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026ec:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026ee:	8403      	strh	r3, [r0, #32]
 80026f0:	4770      	bx	lr

080026f2 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026f2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80026fc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8002700:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002702:	8403      	strh	r3, [r0, #32]
 8002704:	4770      	bx	lr

08002706 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002706:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002708:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270a:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800270c:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002710:	ea24 0303 	bic.w	r3, r4, r3
 8002714:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002716:	8c03      	ldrh	r3, [r0, #32]
 8002718:	408a      	lsls	r2, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	8403      	strh	r3, [r0, #32]
 8002720:	bd10      	pop	{r4, pc}

08002722 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002722:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002724:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002726:	2304      	movs	r3, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002728:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800272a:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800272c:	ea24 0303 	bic.w	r3, r4, r3
 8002730:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002732:	8c03      	ldrh	r3, [r0, #32]
 8002734:	408a      	lsls	r2, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	8403      	strh	r3, [r0, #32]
 800273c:	bd10      	pop	{r4, pc}

0800273e <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800273e:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002740:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002742:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002744:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002746:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002748:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800274a:	8103      	strh	r3, [r0, #8]
 800274c:	4770      	bx	lr

0800274e <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800274e:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002750:	4770      	bx	lr

08002752 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002752:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002754:	4770      	bx	lr

08002756 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002756:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002758:	4770      	bx	lr

0800275a <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800275a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800275c:	4770      	bx	lr

0800275e <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800275e:	8b03      	ldrh	r3, [r0, #24]
 8002760:	f023 030c 	bic.w	r3, r3, #12
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800276a:	8b03      	ldrh	r3, [r0, #24]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4319      	orrs	r1, r3
 8002770:	8301      	strh	r1, [r0, #24]
 8002772:	4770      	bx	lr

08002774 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002774:	8b03      	ldrh	r3, [r0, #24]
 8002776:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002780:	8b03      	ldrh	r3, [r0, #24]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002788:	b28b      	uxth	r3, r1
 800278a:	8303      	strh	r3, [r0, #24]
 800278c:	4770      	bx	lr

0800278e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002792:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002794:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002796:	f8b4 e000 	ldrh.w	lr, [r4]
 800279a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800279c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800279e:	2900      	cmp	r1, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2702      	moveq	r7, #2
 80027a4:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2601      	movne	r6, #1
 80027ac:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027ae:	f1be 0f00 	cmp.w	lr, #0
 80027b2:	d110      	bne.n	80027d6 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027b4:	f7ff fc30 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027b8:	4628      	mov	r0, r5
 80027ba:	88e1      	ldrh	r1, [r4, #6]
 80027bc:	f7ff ffcf 	bl	800275e <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027c0:	4628      	mov	r0, r5
 80027c2:	4639      	mov	r1, r7
 80027c4:	4632      	mov	r2, r6
 80027c6:	8923      	ldrh	r3, [r4, #8]
 80027c8:	f7ff fc3f 	bl	800204a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027cc:	88e1      	ldrh	r1, [r4, #6]
 80027ce:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d4:	e7ce      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027d6:	f7ff fc38 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027da:	4628      	mov	r0, r5
 80027dc:	88e1      	ldrh	r1, [r4, #6]
 80027de:	f7ff ffc9 	bl	8002774 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027e2:	4628      	mov	r0, r5
 80027e4:	4639      	mov	r1, r7
 80027e6:	4632      	mov	r2, r6
 80027e8:	8923      	ldrh	r3, [r4, #8]
 80027ea:	f7ff fc15 	bl	8002018 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027ee:	88e1      	ldrh	r1, [r4, #6]
 80027f0:	4628      	mov	r0, r5
  }
}
 80027f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027f6:	e7b2      	b.n	800275e <TIM_SetIC1Prescaler>

080027f8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80027f8:	8b83      	ldrh	r3, [r0, #28]
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002804:	8b83      	ldrh	r3, [r0, #28]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4319      	orrs	r1, r3
 800280a:	8381      	strh	r1, [r0, #28]
 800280c:	4770      	bx	lr

0800280e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800280e:	8b83      	ldrh	r3, [r0, #28]
 8002810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800281a:	8b83      	ldrh	r3, [r0, #28]
 800281c:	b29b      	uxth	r3, r3
 800281e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002822:	b28b      	uxth	r3, r1
 8002824:	8383      	strh	r3, [r0, #28]
 8002826:	4770      	bx	lr

08002828 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800282c:	880b      	ldrh	r3, [r1, #0]
 800282e:	88aa      	ldrh	r2, [r5, #4]
 8002830:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002832:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002834:	b93b      	cbnz	r3, 8002846 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002836:	892b      	ldrh	r3, [r5, #8]
 8002838:	f7ff fbee 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800283c:	88e9      	ldrh	r1, [r5, #6]
 800283e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002844:	e78b      	b.n	800275e <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800284a:	892b      	ldrh	r3, [r5, #8]
 800284c:	f7ff fbfd 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002850:	88e9      	ldrh	r1, [r5, #6]
 8002852:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002858:	e78c      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800285a:	2b08      	cmp	r3, #8
 800285c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002860:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002862:	d11d      	bne.n	80028a0 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002864:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002868:	043f      	lsls	r7, r7, #16
 800286a:	0c3f      	lsrs	r7, r7, #16
 800286c:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800286e:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002870:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8002872:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8002874:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002876:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800287a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800287e:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002882:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002886:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800288a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800288c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002890:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002894:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002896:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002898:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800289e:	e7ab      	b.n	80027f8 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80028a0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80028a4:	043f      	lsls	r7, r7, #16
 80028a6:	0c3f      	lsrs	r7, r7, #16
 80028a8:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028aa:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80028ac:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ae:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028b6:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b8:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ba:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028bc:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80028be:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028c2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028c6:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028ca:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028cc:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028ce:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028d4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80028d6:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80028d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028dc:	e797      	b.n	800280e <TIM_SetIC4Prescaler>

080028de <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80028de:	884a      	ldrh	r2, [r1, #2]
 80028e0:	880b      	ldrh	r3, [r1, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	888a      	ldrh	r2, [r1, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	88ca      	ldrh	r2, [r1, #6]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	890a      	ldrh	r2, [r1, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	894a      	ldrh	r2, [r1, #10]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	898a      	ldrh	r2, [r1, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80028fe:	4770      	bx	lr

08002900 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002900:	2300      	movs	r3, #0
 8002902:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002904:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002906:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002908:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800290a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800290c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800290e:	8183      	strh	r3, [r0, #12]
 8002910:	4770      	bx	lr

08002912 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002912:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002916:	b129      	cbz	r1, 8002924 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002920:	b29b      	uxth	r3, r3
 8002922:	e001      	b.n	8002928 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002928:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800292c:	4770      	bx	lr

0800292e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800292e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002930:	b119      	cbz	r1, 800293a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	e003      	b.n	8002942 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	8083      	strh	r3, [r0, #4]
 8002944:	4770      	bx	lr

08002946 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002946:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002948:	b119      	cbz	r1, 8002952 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800294a:	b29b      	uxth	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	e003      	b.n	800295a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	8083      	strh	r3, [r0, #4]
 800295c:	4770      	bx	lr

0800295e <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800295e:	8983      	ldrh	r3, [r0, #12]
 8002960:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002962:	b10a      	cbz	r2, 8002968 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002964:	4319      	orrs	r1, r3
 8002966:	e001      	b.n	800296c <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002968:	ea23 0101 	bic.w	r1, r3, r1
 800296c:	8181      	strh	r1, [r0, #12]
 800296e:	4770      	bx	lr

08002970 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002970:	8281      	strh	r1, [r0, #20]
 8002972:	4770      	bx	lr

08002974 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002974:	8a03      	ldrh	r3, [r0, #16]
 8002976:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002978:	bf0c      	ite	eq
 800297a:	2000      	moveq	r0, #0
 800297c:	2001      	movne	r0, #1
 800297e:	4770      	bx	lr

08002980 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002980:	43c9      	mvns	r1, r1
 8002982:	b289      	uxth	r1, r1
 8002984:	8201      	strh	r1, [r0, #16]
 8002986:	4770      	bx	lr

08002988 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002988:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800298a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800298c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002990:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002992:	d003      	beq.n	800299c <TIM_GetITStatus+0x14>
 8002994:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002996:	bf0c      	ite	eq
 8002998:	2000      	moveq	r0, #0
 800299a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800299c:	4770      	bx	lr

0800299e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800299e:	43c9      	mvns	r1, r1
 80029a0:	b289      	uxth	r1, r1
 80029a2:	8201      	strh	r1, [r0, #16]
 80029a4:	4770      	bx	lr

080029a6 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80029a6:	430a      	orrs	r2, r1
 80029a8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80029ac:	4770      	bx	lr

080029ae <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029ae:	8983      	ldrh	r3, [r0, #12]
 80029b0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029b2:	b10a      	cbz	r2, 80029b8 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029b4:	4319      	orrs	r1, r3
 80029b6:	e001      	b.n	80029bc <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80029b8:	ea23 0101 	bic.w	r1, r3, r1
 80029bc:	8181      	strh	r1, [r0, #12]
 80029be:	4770      	bx	lr

080029c0 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029c2:	b119      	cbz	r1, 80029cc <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	e003      	b.n	80029d4 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80029cc:	f023 0308 	bic.w	r3, r3, #8
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	8083      	strh	r3, [r0, #4]
 80029d6:	4770      	bx	lr

080029d8 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80029d8:	8903      	ldrh	r3, [r0, #8]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	8103      	strh	r3, [r0, #8]
 80029e4:	4770      	bx	lr

080029e6 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e6:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029f0:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f2:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80029f4:	8903      	ldrh	r3, [r0, #8]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	8103      	strh	r3, [r0, #8]
 80029fe:	4770      	bx	lr

08002a00 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a04:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a06:	4611      	mov	r1, r2
 8002a08:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a0a:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a0e:	d102      	bne.n	8002a16 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a10:	f7ff fb1b 	bl	800204a <TI2_Config>
 8002a14:	e001      	b.n	8002a1a <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a16:	f7ff faff 	bl	8002018 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1a:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a24:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	8123      	strh	r3, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002a28:	8923      	ldrh	r3, [r4, #8]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	8123      	strh	r3, [r4, #8]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}

08002a34 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a3e:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a40:	8101      	strh	r1, [r0, #8]
 8002a42:	4770      	bx	lr

08002a44 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002a44:	8883      	ldrh	r3, [r0, #4]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002a50:	8883      	ldrh	r3, [r0, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4319      	orrs	r1, r3
 8002a56:	8081      	strh	r1, [r0, #4]
 8002a58:	4770      	bx	lr

08002a5a <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002a5a:	8903      	ldrh	r3, [r0, #8]
 8002a5c:	f023 0307 	bic.w	r3, r3, #7
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002a66:	8903      	ldrh	r3, [r0, #8]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	8101      	strh	r1, [r0, #8]
 8002a6e:	4770      	bx	lr

08002a70 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002a70:	8903      	ldrh	r3, [r0, #8]
 8002a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002a7c:	8903      	ldrh	r3, [r0, #8]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4319      	orrs	r1, r3
 8002a82:	8101      	strh	r1, [r0, #8]
 8002a84:	4770      	bx	lr

08002a86 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a86:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002a88:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002a8a:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002a8c:	4321      	orrs	r1, r4
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002a94:	b29c      	uxth	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	8104      	strh	r4, [r0, #8]
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a9e:	f7ff fff2 	bl	8002a86 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002aa2:	8923      	ldrh	r3, [r4, #8]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aaa:	8123      	strh	r3, [r4, #8]
 8002aac:	bd10      	pop	{r4, pc}

08002aae <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002ab2:	f7ff ffe8 	bl	8002a86 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab6:	8923      	ldrh	r3, [r4, #8]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002ab8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8002ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	8123      	strh	r3, [r4, #8]
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aca:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad0:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad4:	b2b6      	uxth	r6, r6
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad6:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002ada:	f026 0622 	bic.w	r6, r6, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ade:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae2:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002ae4:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ae6:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae8:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002aea:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002aec:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002af0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002af4:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002af6:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002afa:	b29e      	uxth	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b00:	8406      	strh	r6, [r0, #32]
 8002b02:	bd70      	pop	{r4, r5, r6, pc}

08002b04 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b04:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b06:	b119      	cbz	r1, 8002b10 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	e003      	b.n	8002b18 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	8083      	strh	r3, [r0, #4]
 8002b1a:	4770      	bx	lr

08002b1c <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002b1c:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002b24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <USART_DeInit+0x90>)
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	d105      	bne.n	8002b38 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002b2c:	2010      	movs	r0, #16
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f7ff f834 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002b34:	2010      	movs	r0, #16
 8002b36:	e037      	b.n	8002ba8 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <USART_DeInit+0x94>)
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d107      	bne.n	8002b4e <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002b3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b42:	2101      	movs	r1, #1
 8002b44:	f7ff f81e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002b48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b4c:	e009      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <USART_DeInit+0x98>)
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d10b      	bne.n	8002b6c <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002b54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b58:	2101      	movs	r1, #1
 8002b5a:	f7ff f813 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b62:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b68:	f7ff b80c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <USART_DeInit+0x9c>)
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	d107      	bne.n	8002b82 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b76:	2101      	movs	r1, #1
 8002b78:	f7ff f804 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002b7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b80:	e7ef      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <USART_DeInit+0xa0>)
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d107      	bne.n	8002b98 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	f7fe fff9 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002b92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b96:	e7e4      	b.n	8002b62 <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <USART_DeInit+0xa4>)
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	d109      	bne.n	8002bb2 <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b9e:	2020      	movs	r0, #32
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f7fe fffb 	bl	8001b9c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	2100      	movs	r1, #0
    }
  }
}
 8002baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002bae:	f7fe bff5 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
 8002bb2:	bd08      	pop	{r3, pc}
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004800 	.word	0x40004800
 8002bc0:	40004c00 	.word	0x40004c00
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40011400 	.word	0x40011400

08002bcc <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bcc:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002bce:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bd0:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bd6:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bd8:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bda:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bdc:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002bde:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be0:	8909      	ldrh	r1, [r1, #8]
 8002be2:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002be4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be8:	430a      	orrs	r2, r1
 8002bea:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bec:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf0:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf2:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf4:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf6:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002bfc:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002bfe:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002c00:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c06:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c08:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c0a:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c0c:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002c0e:	4668      	mov	r0, sp
 8002c10:	f7fe feea 	bl	80019e8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <USART_Init+0xb0>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d003      	beq.n	8002c22 <USART_Init+0x56>
 8002c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d101      	bne.n	8002c26 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	e000      	b.n	8002c28 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002c26:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c28:	89a2      	ldrh	r2, [r4, #12]
 8002c2a:	b212      	sxth	r2, r2
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	682a      	ldr	r2, [r5, #0]
 8002c30:	f04f 0119 	mov.w	r1, #25
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c34:	bfb4      	ite	lt
 8002c36:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c38:	0092      	lslge	r2, r2, #2
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c3a:	4359      	muls	r1, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c3c:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002c40:	2364      	movs	r3, #100	; 0x64
 8002c42:	fbb1 f2f3 	udiv	r2, r1, r3
 8002c46:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002c48:	0910      	lsrs	r0, r2, #4
 8002c4a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c4e:	89a0      	ldrh	r0, [r4, #12]
 8002c50:	b200      	sxth	r0, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	da06      	bge.n	8002c64 <USART_Init+0x98>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002c56:	00c9      	lsls	r1, r1, #3
 8002c58:	3132      	adds	r1, #50	; 0x32
 8002c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	e005      	b.n	8002c70 <USART_Init+0xa4>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002c64:	0109      	lsls	r1, r1, #4
 8002c66:	3132      	adds	r1, #50	; 0x32
 8002c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002c72:	b292      	uxth	r2, r2
 8002c74:	8122      	strh	r2, [r4, #8]
}
 8002c76:	b005      	add	sp, #20
 8002c78:	bd30      	pop	{r4, r5, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40011000 	.word	0x40011000

08002c80 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002c80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c84:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c86:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002c8c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002c8e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c90:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002c92:	8183      	strh	r3, [r0, #12]
 8002c94:	4770      	bx	lr

08002c96 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c96:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c98:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002c9a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c9c:	884c      	ldrh	r4, [r1, #2]
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	888c      	ldrh	r4, [r1, #4]
 8002ca2:	88c9      	ldrh	r1, [r1, #6]
 8002ca4:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002ca6:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ca8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002caa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002cae:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	8203      	strh	r3, [r0, #16]
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002cba:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002cbc:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002cbe:	80c3      	strh	r3, [r0, #6]
 8002cc0:	4770      	bx	lr

08002cc2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cc4:	b119      	cbz	r1, 8002cce <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ccc:	e003      	b.n	8002cd6 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	8183      	strh	r3, [r0, #12]
 8002cd8:	4770      	bx	lr

08002cda <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002cda:	8b03      	ldrh	r3, [r0, #24]
 8002cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ce0:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002ce2:	8b03      	ldrh	r3, [r0, #24]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4319      	orrs	r1, r3
 8002ce8:	8301      	strh	r1, [r0, #24]
 8002cea:	4770      	bx	lr

08002cec <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cec:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cee:	b129      	cbz	r1, 8002cfc <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	e001      	b.n	8002d00 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d00:	8183      	strh	r3, [r0, #12]
 8002d02:	4770      	bx	lr

08002d04 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d04:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d06:	b119      	cbz	r1, 8002d10 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0e:	e003      	b.n	8002d18 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	8283      	strh	r3, [r0, #20]
 8002d1a:	4770      	bx	lr

08002d1c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002d1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d20:	8081      	strh	r1, [r0, #4]
 8002d22:	4770      	bx	lr

08002d24 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002d24:	8880      	ldrh	r0, [r0, #4]
}
 8002d26:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002d2a:	4770      	bx	lr

08002d2c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002d2c:	8a03      	ldrh	r3, [r0, #16]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002d38:	8a03      	ldrh	r3, [r0, #16]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	8201      	strh	r1, [r0, #16]
 8002d40:	4770      	bx	lr

08002d42 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d42:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002d44:	b119      	cbz	r1, 8002d4e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	e003      	b.n	8002d56 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002d4e:	f023 0302 	bic.w	r3, r3, #2
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	8183      	strh	r3, [r0, #12]
 8002d58:	4770      	bx	lr

08002d5a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002d5a:	8983      	ldrh	r3, [r0, #12]
 8002d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002d66:	8983      	ldrh	r3, [r0, #12]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4319      	orrs	r1, r3
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	4770      	bx	lr

08002d70 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002d70:	8a03      	ldrh	r3, [r0, #16]
 8002d72:	f023 0320 	bic.w	r3, r3, #32
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002d7c:	8a03      	ldrh	r3, [r0, #16]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4319      	orrs	r1, r3
 8002d82:	8201      	strh	r1, [r0, #16]
 8002d84:	4770      	bx	lr

08002d86 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d86:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d88:	b119      	cbz	r1, 8002d92 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	e003      	b.n	8002d9a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	8203      	strh	r3, [r0, #16]
 8002d9c:	4770      	bx	lr

08002d9e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002d9e:	8983      	ldrh	r3, [r0, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	8183      	strh	r3, [r0, #12]
 8002da8:	4770      	bx	lr

08002daa <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002daa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002dac:	b119      	cbz	r1, 8002db6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	e003      	b.n	8002dbe <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002db6:	f023 0308 	bic.w	r3, r3, #8
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	8283      	strh	r3, [r0, #20]
 8002dc0:	4770      	bx	lr

08002dc2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002dc2:	8b03      	ldrh	r3, [r0, #24]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002dc8:	8b03      	ldrh	r3, [r0, #24]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002dd0:	8301      	strh	r1, [r0, #24]
 8002dd2:	4770      	bx	lr

08002dd4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dd6:	b119      	cbz	r1, 8002de0 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	e003      	b.n	8002de8 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002de0:	f023 0320 	bic.w	r3, r3, #32
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	8283      	strh	r3, [r0, #20]
 8002dea:	4770      	bx	lr

08002dec <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002dec:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dee:	b119      	cbz	r1, 8002df8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	e003      	b.n	8002e00 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8283      	strh	r3, [r0, #20]
 8002e02:	4770      	bx	lr

08002e04 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002e04:	8a83      	ldrh	r3, [r0, #20]
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002e10:	8a83      	ldrh	r3, [r0, #20]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4319      	orrs	r1, r3
 8002e16:	8281      	strh	r1, [r0, #20]
 8002e18:	4770      	bx	lr

08002e1a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002e1c:	b119      	cbz	r1, 8002e26 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	e003      	b.n	8002e2e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	8283      	strh	r3, [r0, #20]
 8002e30:	4770      	bx	lr

08002e32 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e32:	8a83      	ldrh	r3, [r0, #20]
 8002e34:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002e36:	b10a      	cbz	r2, 8002e3c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e38:	4319      	orrs	r1, r3
 8002e3a:	e001      	b.n	8002e40 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002e3c:	ea23 0101 	bic.w	r1, r3, r1
 8002e40:	8281      	strh	r1, [r0, #20]
 8002e42:	4770      	bx	lr

08002e44 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e44:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002e48:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e4a:	2401      	movs	r4, #1
 8002e4c:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e50:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e52:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e56:	d101      	bne.n	8002e5c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002e58:	300c      	adds	r0, #12
 8002e5a:	e003      	b.n	8002e64 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002e5c:	2b02      	cmp	r3, #2
  {
    usartxbase += 0x10;
 8002e5e:	bf0c      	ite	eq
 8002e60:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002e62:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e64:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002e66:	b10a      	cbz	r2, 8002e6c <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e68:	4319      	orrs	r1, r3
 8002e6a:	e001      	b.n	8002e70 <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002e6c:	ea23 0101 	bic.w	r1, r3, r1
 8002e70:	6001      	str	r1, [r0, #0]
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002e74:	8803      	ldrh	r3, [r0, #0]
 8002e76:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002e78:	bf0c      	ite	eq
 8002e7a:	2000      	moveq	r0, #0
 8002e7c:	2001      	movne	r0, #1
 8002e7e:	4770      	bx	lr

08002e80 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e80:	43c9      	mvns	r1, r1
 8002e82:	b289      	uxth	r1, r1
 8002e84:	8001      	strh	r1, [r0, #0]
 8002e86:	4770      	bx	lr

08002e88 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e88:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e8a:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e8e:	f001 031f 	and.w	r3, r1, #31
 8002e92:	2201      	movs	r2, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e94:	2c01      	cmp	r4, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e96:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e9a:	d101      	bne.n	8002ea0 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8002e9c:	8983      	ldrh	r3, [r0, #12]
 8002e9e:	e003      	b.n	8002ea8 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002ea0:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002ea2:	bf0c      	ite	eq
 8002ea4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002ea6:	8a83      	ldrhne	r3, [r0, #20]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002eac:	8802      	ldrh	r2, [r0, #0]
 8002eae:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eb0:	b143      	cbz	r3, 8002ec4 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	0a09      	lsrs	r1, r1, #8
 8002eb6:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eba:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2000      	moveq	r0, #0
 8002ec0:	2001      	movne	r0, #1
 8002ec2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002ec4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002ec8:	0a09      	lsrs	r1, r1, #8
 8002eca:	2301      	movs	r3, #1
 8002ecc:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8003      	strh	r3, [r0, #0]
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	4770      	bx	lr

08002ede <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002ede:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_execve+0xe>)
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000168c 	.word	0x2000168c

08002ef0 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <_fork+0xc>)
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efa:	4770      	bx	lr
 8002efc:	2000168c 	.word	0x2000168c

08002f00 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f04:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	4770      	bx	lr

08002f0a <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	4770      	bx	lr

08002f0e <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d904      	bls.n	8002f1c <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <_isatty+0x12>)
 8002f14:	2209      	movs	r2, #9
 8002f16:	601a      	str	r2, [r3, #0]
		return 0;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f1c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f1e:	4770      	bx	lr
 8002f20:	2000168c 	.word	0x2000168c

08002f24 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_kill+0xc>)
 8002f26:	2216      	movs	r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2e:	4770      	bx	lr
 8002f30:	2000168c 	.word	0x2000168c

08002f34 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_link+0xc>)
 8002f36:	221f      	movs	r2, #31
 8002f38:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3e:	4770      	bx	lr
 8002f40:	2000168c 	.word	0x2000168c

08002f44 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr

08002f48 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f48:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f4a:	b138      	cbz	r0, 8002f5c <_read+0x14>
 8002f4c:	e00d      	b.n	8002f6a <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f4e:	881d      	ldrh	r5, [r3, #0]
 8002f50:	06ad      	lsls	r5, r5, #26
 8002f52:	d5fc      	bpl.n	8002f4e <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f54:	88a5      	ldrh	r5, [r4, #4]
 8002f56:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f58:	3001      	adds	r0, #1
 8002f5a:	e001      	b.n	8002f60 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <_read+0x30>)
 8002f5e:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f60:	4290      	cmp	r0, r2
 8002f62:	dbf4      	blt.n	8002f4e <_read+0x6>
 8002f64:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f68:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <_read+0x34>)
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	601a      	str	r2, [r3, #0]
				return -1;
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	40011000 	.word	0x40011000
 8002f7c:	2000168c 	.word	0x2000168c

08002f80 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f84:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	4770      	bx	lr

08002f8a <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8e:	4770      	bx	lr

08002f90 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <_unlink+0xc>)
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9a:	4770      	bx	lr
 8002f9c:	2000168c 	.word	0x2000168c

08002fa0 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <_wait+0xc>)
 8002fa2:	220a      	movs	r2, #10
 8002fa4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002faa:	4770      	bx	lr
 8002fac:	2000168c 	.word	0x2000168c

08002fb0 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fb0:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002fb2:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002fb4:	d009      	beq.n	8002fca <_write+0x1a>
 8002fb6:	2802      	cmp	r0, #2
 8002fb8:	d11a      	bne.n	8002ff0 <_write+0x40>
 8002fba:	e013      	b.n	8002fe4 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fbc:	8805      	ldrh	r5, [r0, #0]
 8002fbe:	066d      	lsls	r5, r5, #25
 8002fc0:	d5fc      	bpl.n	8002fbc <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc2:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fc4:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc6:	80a5      	strh	r5, [r4, #4]
 8002fc8:	e002      	b.n	8002fd0 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fca:	480d      	ldr	r0, [pc, #52]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fcc:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fce:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	dbf3      	blt.n	8002fbc <_write+0xc>
 8002fd4:	e011      	b.n	8002ffa <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fd6:	8805      	ldrh	r5, [r0, #0]
 8002fd8:	066d      	lsls	r5, r5, #25
 8002fda:	d5fc      	bpl.n	8002fd6 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fdc:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fde:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fe0:	80a5      	strh	r5, [r4, #4]
 8002fe2:	e002      	b.n	8002fea <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe4:	4806      	ldr	r0, [pc, #24]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fe6:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe8:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fea:	4293      	cmp	r3, r2
 8002fec:	dbf3      	blt.n	8002fd6 <_write+0x26>
 8002fee:	e004      	b.n	8002ffa <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <_write+0x54>)
 8002ff2:	2209      	movs	r2, #9
 8002ff4:	601a      	str	r2, [r3, #0]
				return -1;
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	bd30      	pop	{r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	40011000 	.word	0x40011000
 8003004:	2000168c 	.word	0x2000168c

08003008 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8003008:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <_sbrk+0x38>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	b90a      	cbnz	r2, 8003014 <_sbrk+0xc>
		heap_end = &_ebss;
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <_sbrk+0x3c>)
 8003012:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003014:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003016:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800301a:	1818      	adds	r0, r3, r0
 800301c:	4290      	cmp	r0, r2
 800301e:	d90a      	bls.n	8003036 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8003020:	2219      	movs	r2, #25
 8003022:	2002      	movs	r0, #2
 8003024:	4908      	ldr	r1, [pc, #32]	; (8003048 <_sbrk+0x40>)
 8003026:	f7ff ffc3 	bl	8002fb0 <_write>
		errno = ENOMEM;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x44>)
 800302c:	220c      	movs	r2, #12
 800302e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003034:	e001      	b.n	800303a <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8003036:	4a02      	ldr	r2, [pc, #8]	; (8003040 <_sbrk+0x38>)
 8003038:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 800303a:	4618      	mov	r0, r3
 800303c:	bd08      	pop	{r3, pc}
 800303e:	bf00      	nop
 8003040:	2000095c 	.word	0x2000095c
 8003044:	20001690 	.word	0x20001690
 8003048:	0800900d 	.word	0x0800900d
 800304c:	2000168c 	.word	0x2000168c

08003050 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8003050:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8003052:	2001      	movs	r0, #1
 8003054:	4902      	ldr	r1, [pc, #8]	; (8003060 <_exit+0x10>)
 8003056:	2204      	movs	r2, #4
 8003058:	f7ff ffaa 	bl	8002fb0 <_write>
 800305c:	e7fe      	b.n	800305c <_exit+0xc>
 800305e:	bf00      	nop
 8003060:	08009027 	.word	0x08009027
 8003064:	08009090 	.word	0x08009090
 8003068:	20000000 	.word	0x20000000
 800306c:	2000095c 	.word	0x2000095c
 8003070:	2000095c 	.word	0x2000095c
 8003074:	20001690 	.word	0x20001690

08003078 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003078:	4770      	bx	lr

0800307a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800307a:	e7fe      	b.n	800307a <HardFault_Handler>

0800307c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800307c:	e7fe      	b.n	800307c <MemManage_Handler>

0800307e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800307e:	e7fe      	b.n	800307e <BusFault_Handler>

08003080 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler>

08003082 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003082:	4770      	bx	lr

08003084 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003084:	4770      	bx	lr

08003086 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003086:	4770      	bx	lr

08003088 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <SystemInit+0xd4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800309c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80030a0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030a2:	492f      	ldr	r1, [pc, #188]	; (8003160 <SystemInit+0xd8>)
 80030a4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030a6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030aa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030ae:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030b0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030b2:	9200      	str	r2, [sp, #0]
 80030b4:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030bc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030c4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80030c6:	9a00      	ldr	r2, [sp, #0]
 80030c8:	3201      	adds	r2, #1
 80030ca:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030cc:	9a01      	ldr	r2, [sp, #4]
 80030ce:	b91a      	cbnz	r2, 80030d8 <SystemInit+0x50>
 80030d0:	9a00      	ldr	r2, [sp, #0]
 80030d2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80030d6:	d1f2      	bne.n	80030be <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <SystemInit+0xd4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80030e0:	bf18      	it	ne
 80030e2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030e4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d004      	beq.n	80030f6 <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <SystemInit+0xdc>)
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e02f      	b.n	8003156 <SystemInit+0xce>
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <SystemInit+0xd4>)
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <SystemInit+0xe0>)
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003108:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003114:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800311c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <SystemInit+0xe4>)
 8003120:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003128:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <SystemInit+0xd4>)
 800312e:	0189      	lsls	r1, r1, #6
 8003130:	d5fb      	bpl.n	800312a <SystemInit+0xa2>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <SystemInit+0xe8>)
 8003134:	f240 6105 	movw	r1, #1541	; 0x605
 8003138:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800313a:	6893      	ldr	r3, [r2, #8]
 800313c:	f023 0303 	bic.w	r3, r3, #3
 8003140:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003142:	6893      	ldr	r3, [r2, #8]
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800314a:	6893      	ldr	r3, [r2, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d1fa      	bne.n	800314a <SystemInit+0xc2>
 8003154:	e7ca      	b.n	80030ec <SystemInit+0x64>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8003156:	b002      	add	sp, #8
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	24003010 	.word	0x24003010
 8003164:	e000ed00 	.word	0xe000ed00
 8003168:	40007000 	.word	0x40007000
 800316c:	07405419 	.word	0x07405419
 8003170:	40023c00 	.word	0x40023c00

08003174 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <SystemCoreClockUpdate+0x68>)
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 800317e:	2904      	cmp	r1, #4
 8003180:	d003      	beq.n	800318a <SystemCoreClockUpdate+0x16>
 8003182:	2908      	cmp	r1, #8
 8003184:	d003      	beq.n	800318e <SystemCoreClockUpdate+0x1a>
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <SystemCoreClockUpdate+0x6c>)
 8003188:	e019      	b.n	80031be <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <SystemCoreClockUpdate+0x70>)
 800318c:	e017      	b.n	80031be <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800318e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003192:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	bf14      	ite	ne
 800319a:	4b12      	ldrne	r3, [pc, #72]	; (80031e4 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800319c:	4b10      	ldreq	r3, [pc, #64]	; (80031e0 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031a8:	6852      	ldr	r2, [r2, #4]
 80031aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031b2:	3201      	adds	r2, #1
 80031b4:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031b6:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80031b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031be:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031ca:	189a      	adds	r2, r3, r2
 80031cc:	7911      	ldrb	r1, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	40ca      	lsrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	20000088 	.word	0x20000088
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <cleanup_glue>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	1c0c      	adds	r4, r1, #0
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	1c05      	adds	r5, r0, #0
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d001      	beq.n	80031f8 <cleanup_glue+0x10>
 80031f4:	f7ff fff8 	bl	80031e8 <cleanup_glue>
 80031f8:	1c28      	adds	r0, r5, #0
 80031fa:	1c21      	adds	r1, r4, #0
 80031fc:	f002 fb56 	bl	80058ac <_free_r>
 8003200:	bc38      	pop	{r3, r4, r5}
 8003202:	bc01      	pop	{r0}
 8003204:	4700      	bx	r0
 8003206:	46c0      	nop			; (mov r8, r8)

08003208 <_reclaim_reent>:
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <_reclaim_reent+0x9c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	1c05      	adds	r5, r0, #0
 8003210:	4298      	cmp	r0, r3
 8003212:	d037      	beq.n	8003284 <_reclaim_reent+0x7c>
 8003214:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003216:	2a00      	cmp	r2, #0
 8003218:	d014      	beq.n	8003244 <_reclaim_reent+0x3c>
 800321a:	2300      	movs	r3, #0
 800321c:	2600      	movs	r6, #0
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	5899      	ldr	r1, [r3, r2]
 8003222:	2900      	cmp	r1, #0
 8003224:	d006      	beq.n	8003234 <_reclaim_reent+0x2c>
 8003226:	680c      	ldr	r4, [r1, #0]
 8003228:	1c28      	adds	r0, r5, #0
 800322a:	f002 fb3f 	bl	80058ac <_free_r>
 800322e:	1e21      	subs	r1, r4, #0
 8003230:	d1f9      	bne.n	8003226 <_reclaim_reent+0x1e>
 8003232:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003234:	3601      	adds	r6, #1
 8003236:	1c33      	adds	r3, r6, #0
 8003238:	2e20      	cmp	r6, #32
 800323a:	d1f0      	bne.n	800321e <_reclaim_reent+0x16>
 800323c:	1c28      	adds	r0, r5, #0
 800323e:	1c11      	adds	r1, r2, #0
 8003240:	f002 fb34 	bl	80058ac <_free_r>
 8003244:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003246:	2900      	cmp	r1, #0
 8003248:	d002      	beq.n	8003250 <_reclaim_reent+0x48>
 800324a:	1c28      	adds	r0, r5, #0
 800324c:	f002 fb2e 	bl	80058ac <_free_r>
 8003250:	23a4      	movs	r3, #164	; 0xa4
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	58e9      	ldr	r1, [r5, r3]
 8003256:	2900      	cmp	r1, #0
 8003258:	d00b      	beq.n	8003272 <_reclaim_reent+0x6a>
 800325a:	23a6      	movs	r3, #166	; 0xa6
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	18ee      	adds	r6, r5, r3
 8003260:	42b1      	cmp	r1, r6
 8003262:	d006      	beq.n	8003272 <_reclaim_reent+0x6a>
 8003264:	680c      	ldr	r4, [r1, #0]
 8003266:	1c28      	adds	r0, r5, #0
 8003268:	f002 fb20 	bl	80058ac <_free_r>
 800326c:	1c21      	adds	r1, r4, #0
 800326e:	42a6      	cmp	r6, r4
 8003270:	d1f8      	bne.n	8003264 <_reclaim_reent+0x5c>
 8003272:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003274:	2900      	cmp	r1, #0
 8003276:	d002      	beq.n	800327e <_reclaim_reent+0x76>
 8003278:	1c28      	adds	r0, r5, #0
 800327a:	f002 fb17 	bl	80058ac <_free_r>
 800327e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <_reclaim_reent+0x82>
 8003284:	bc70      	pop	{r4, r5, r6}
 8003286:	bc01      	pop	{r0}
 8003288:	4700      	bx	r0
 800328a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800328c:	1c28      	adds	r0, r5, #0
 800328e:	f000 f831 	bl	80032f4 <_wrapup_reent+0x4c>
 8003292:	23b8      	movs	r3, #184	; 0xb8
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	58e9      	ldr	r1, [r5, r3]
 8003298:	2900      	cmp	r1, #0
 800329a:	d0f3      	beq.n	8003284 <_reclaim_reent+0x7c>
 800329c:	1c28      	adds	r0, r5, #0
 800329e:	f7ff ffa3 	bl	80031e8 <cleanup_glue>
 80032a2:	e7ef      	b.n	8003284 <_reclaim_reent+0x7c>
 80032a4:	200000a0 	.word	0x200000a0

080032a8 <_wrapup_reent>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	1e07      	subs	r7, r0, #0
 80032ac:	d01c      	beq.n	80032e8 <_wrapup_reent+0x40>
 80032ae:	23a4      	movs	r3, #164	; 0xa4
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	58fe      	ldr	r6, [r7, r3]
 80032b4:	2e00      	cmp	r6, #0
 80032b6:	d00e      	beq.n	80032d6 <_wrapup_reent+0x2e>
 80032b8:	6873      	ldr	r3, [r6, #4]
 80032ba:	1e5c      	subs	r4, r3, #1
 80032bc:	d408      	bmi.n	80032d0 <_wrapup_reent+0x28>
 80032be:	1c5d      	adds	r5, r3, #1
 80032c0:	00ad      	lsls	r5, r5, #2
 80032c2:	1975      	adds	r5, r6, r5
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	f000 f815 	bl	80032f4 <_wrapup_reent+0x4c>
 80032ca:	3d04      	subs	r5, #4
 80032cc:	3c01      	subs	r4, #1
 80032ce:	d2f9      	bcs.n	80032c4 <_wrapup_reent+0x1c>
 80032d0:	6836      	ldr	r6, [r6, #0]
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d1f0      	bne.n	80032b8 <_wrapup_reent+0x10>
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <_wrapup_reent+0x3a>
 80032dc:	1c38      	adds	r0, r7, #0
 80032de:	f000 f809 	bl	80032f4 <_wrapup_reent+0x4c>
 80032e2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e4:	bc01      	pop	{r0}
 80032e6:	4700      	bx	r0
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <_wrapup_reent+0x48>)
 80032ea:	681f      	ldr	r7, [r3, #0]
 80032ec:	e7df      	b.n	80032ae <_wrapup_reent+0x6>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200000a0 	.word	0x200000a0
 80032f4:	4718      	bx	r3
 80032f6:	46c0      	nop			; (mov r8, r8)

080032f8 <_sprintf_r>:
 80032f8:	b40c      	push	{r2, r3}
 80032fa:	b510      	push	{r4, lr}
 80032fc:	b09c      	sub	sp, #112	; 0x70
 80032fe:	9102      	str	r1, [sp, #8]
 8003300:	9106      	str	r1, [sp, #24]
 8003302:	490c      	ldr	r1, [pc, #48]	; (8003334 <_sprintf_r+0x3c>)
 8003304:	ab1e      	add	r3, sp, #120	; 0x78
 8003306:	9104      	str	r1, [sp, #16]
 8003308:	9107      	str	r1, [sp, #28]
 800330a:	2482      	movs	r4, #130	; 0x82
 800330c:	2101      	movs	r1, #1
 800330e:	cb04      	ldmia	r3!, {r2}
 8003310:	00a4      	lsls	r4, r4, #2
 8003312:	aa02      	add	r2, sp, #8
 8003314:	4249      	negs	r1, r1
 8003316:	8194      	strh	r4, [r2, #12]
 8003318:	81d1      	strh	r1, [r2, #14]
 800331a:	1c11      	adds	r1, r2, #0
 800331c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f000 f82e 	bl	8003380 <_svfprintf_r>
 8003324:	9a02      	ldr	r2, [sp, #8]
 8003326:	2300      	movs	r3, #0
 8003328:	7013      	strb	r3, [r2, #0]
 800332a:	b01c      	add	sp, #112	; 0x70
 800332c:	bc10      	pop	{r4}
 800332e:	bc08      	pop	{r3}
 8003330:	b002      	add	sp, #8
 8003332:	4718      	bx	r3
 8003334:	7fffffff 	.word	0x7fffffff

08003338 <sprintf>:
 8003338:	b40e      	push	{r1, r2, r3}
 800333a:	b500      	push	{lr}
 800333c:	b09c      	sub	sp, #112	; 0x70
 800333e:	ab1d      	add	r3, sp, #116	; 0x74
 8003340:	cb04      	ldmia	r3!, {r2}
 8003342:	2282      	movs	r2, #130	; 0x82
 8003344:	a902      	add	r1, sp, #8
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	818a      	strh	r2, [r1, #12]
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <sprintf+0x3c>)
 800334c:	608a      	str	r2, [r1, #8]
 800334e:	614a      	str	r2, [r1, #20]
 8003350:	2201      	movs	r2, #1
 8003352:	4252      	negs	r2, r2
 8003354:	81ca      	strh	r2, [r1, #14]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <sprintf+0x40>)
 8003358:	9002      	str	r0, [sp, #8]
 800335a:	6108      	str	r0, [r1, #16]
 800335c:	6810      	ldr	r0, [r2, #0]
 800335e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f000 f80d 	bl	8003380 <_svfprintf_r>
 8003366:	9a02      	ldr	r2, [sp, #8]
 8003368:	2300      	movs	r3, #0
 800336a:	7013      	strb	r3, [r2, #0]
 800336c:	b01c      	add	sp, #112	; 0x70
 800336e:	bc08      	pop	{r3}
 8003370:	b003      	add	sp, #12
 8003372:	4718      	bx	r3
 8003374:	7fffffff 	.word	0x7fffffff
 8003378:	200000a0 	.word	0x200000a0
 800337c:	00000000 	.word	0x00000000

08003380 <_svfprintf_r>:
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	464d      	mov	r5, r9
 8003384:	4644      	mov	r4, r8
 8003386:	465f      	mov	r7, fp
 8003388:	4656      	mov	r6, sl
 800338a:	b4f0      	push	{r4, r5, r6, r7}
 800338c:	b0c5      	sub	sp, #276	; 0x114
 800338e:	4689      	mov	r9, r1
 8003390:	9310      	str	r3, [sp, #64]	; 0x40
 8003392:	1c14      	adds	r4, r2, #0
 8003394:	900b      	str	r0, [sp, #44]	; 0x2c
 8003396:	f002 fb89 	bl	8005aac <_localeconv_r>
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	9017      	str	r0, [sp, #92]	; 0x5c
 800339e:	f003 fbbb 	bl	8006b18 <strlen>
 80033a2:	901a      	str	r0, [sp, #104]	; 0x68
 80033a4:	2000      	movs	r0, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	9018      	str	r0, [sp, #96]	; 0x60
 80033aa:	9119      	str	r1, [sp, #100]	; 0x64
 80033ac:	4649      	mov	r1, r9
 80033ae:	898b      	ldrh	r3, [r1, #12]
 80033b0:	061a      	lsls	r2, r3, #24
 80033b2:	d504      	bpl.n	80033be <_svfprintf_r+0x3e>
 80033b4:	690b      	ldr	r3, [r1, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <_svfprintf_r+0x3e>
 80033ba:	f000 ffa2 	bl	8004302 <_svfprintf_r+0xf82>
 80033be:	2200      	movs	r2, #0
 80033c0:	9215      	str	r2, [sp, #84]	; 0x54
 80033c2:	466a      	mov	r2, sp
 80033c4:	2300      	movs	r3, #0
 80033c6:	a934      	add	r1, sp, #208	; 0xd0
 80033c8:	ae27      	add	r6, sp, #156	; 0x9c
 80033ca:	32cf      	adds	r2, #207	; 0xcf
 80033cc:	af34      	add	r7, sp, #208	; 0xd0
 80033ce:	9108      	str	r1, [sp, #32]
 80033d0:	9127      	str	r1, [sp, #156]	; 0x9c
 80033d2:	60b3      	str	r3, [r6, #8]
 80033d4:	6073      	str	r3, [r6, #4]
 80033d6:	931c      	str	r3, [sp, #112]	; 0x70
 80033d8:	2000      	movs	r0, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	1abb      	subs	r3, r7, r2
 80033de:	901b      	str	r0, [sp, #108]	; 0x6c
 80033e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80033e2:	9207      	str	r2, [sp, #28]
 80033e4:	931d      	str	r3, [sp, #116]	; 0x74
 80033e6:	1c25      	adds	r5, r4, #0
 80033e8:	46cb      	mov	fp, r9
 80033ea:	782b      	ldrb	r3, [r5, #0]
 80033ec:	1c2c      	adds	r4, r5, #0
 80033ee:	2b25      	cmp	r3, #37	; 0x25
 80033f0:	d01c      	beq.n	800342c <_svfprintf_r+0xac>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <_svfprintf_r+0x7c>
 80033f6:	e019      	b.n	800342c <_svfprintf_r+0xac>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <_svfprintf_r+0x84>
 80033fc:	3401      	adds	r4, #1
 80033fe:	7823      	ldrb	r3, [r4, #0]
 8003400:	2b25      	cmp	r3, #37	; 0x25
 8003402:	d1f9      	bne.n	80033f8 <_svfprintf_r+0x78>
 8003404:	1b60      	subs	r0, r4, r5
 8003406:	4680      	mov	r8, r0
 8003408:	d010      	beq.n	800342c <_svfprintf_r+0xac>
 800340a:	68b1      	ldr	r1, [r6, #8]
 800340c:	1c0b      	adds	r3, r1, #0
 800340e:	4443      	add	r3, r8
 8003410:	603d      	str	r5, [r7, #0]
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	60b3      	str	r3, [r6, #8]
 8003416:	6873      	ldr	r3, [r6, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	6073      	str	r3, [r6, #4]
 800341c:	2b07      	cmp	r3, #7
 800341e:	dd00      	ble.n	8003422 <_svfprintf_r+0xa2>
 8003420:	e346      	b.n	8003ab0 <_svfprintf_r+0x730>
 8003422:	3708      	adds	r7, #8
 8003424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003426:	1c13      	adds	r3, r2, #0
 8003428:	4443      	add	r3, r8
 800342a:	930f      	str	r3, [sp, #60]	; 0x3c
 800342c:	7823      	ldrb	r3, [r4, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <_svfprintf_r+0xb6>
 8003432:	f000 fdb6 	bl	8003fa2 <_svfprintf_r+0xc22>
 8003436:	207b      	movs	r0, #123	; 0x7b
 8003438:	2201      	movs	r2, #1
 800343a:	2300      	movs	r3, #0
 800343c:	4468      	add	r0, sp
 800343e:	4252      	negs	r2, r2
 8003440:	7003      	strb	r3, [r0, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	4692      	mov	sl, r2
 8003448:	2200      	movs	r2, #0
 800344a:	9111      	str	r1, [sp, #68]	; 0x44
 800344c:	920a      	str	r2, [sp, #40]	; 0x28
 800344e:	4699      	mov	r9, r3
 8003450:	2208      	movs	r2, #8
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	49ce      	ldr	r1, [pc, #824]	; (8003790 <_svfprintf_r+0x410>)
 8003456:	1c65      	adds	r5, r4, #1
 8003458:	2010      	movs	r0, #16
 800345a:	4690      	mov	r8, r2
 800345c:	469c      	mov	ip, r3
 800345e:	242b      	movs	r4, #43	; 0x2b
 8003460:	782b      	ldrb	r3, [r5, #0]
 8003462:	930c      	str	r3, [sp, #48]	; 0x30
 8003464:	3501      	adds	r5, #1
 8003466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003468:	3b20      	subs	r3, #32
 800346a:	2b58      	cmp	r3, #88	; 0x58
 800346c:	d914      	bls.n	8003498 <_svfprintf_r+0x118>
 800346e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003470:	2900      	cmp	r1, #0
 8003472:	d101      	bne.n	8003478 <_svfprintf_r+0xf8>
 8003474:	f000 fd95 	bl	8003fa2 <_svfprintf_r+0xc22>
 8003478:	ab2a      	add	r3, sp, #168	; 0xa8
 800347a:	7019      	strb	r1, [r3, #0]
 800347c:	207b      	movs	r0, #123	; 0x7b
 800347e:	2200      	movs	r2, #0
 8003480:	4468      	add	r0, sp
 8003482:	7002      	strb	r2, [r0, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	2201      	movs	r2, #1
 8003488:	910d      	str	r1, [sp, #52]	; 0x34
 800348a:	920e      	str	r2, [sp, #56]	; 0x38
 800348c:	9313      	str	r3, [sp, #76]	; 0x4c
 800348e:	2200      	movs	r2, #0
 8003490:	2300      	movs	r3, #0
 8003492:	9214      	str	r2, [sp, #80]	; 0x50
 8003494:	9316      	str	r3, [sp, #88]	; 0x58
 8003496:	e0a3      	b.n	80035e0 <_svfprintf_r+0x260>
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	58cb      	ldr	r3, [r1, r3]
 800349c:	469f      	mov	pc, r3
 800349e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034a0:	2310      	movs	r3, #16
 80034a2:	4319      	orrs	r1, r3
 80034a4:	910a      	str	r1, [sp, #40]	; 0x28
 80034a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a8:	06d2      	lsls	r2, r2, #27
 80034aa:	d400      	bmi.n	80034ae <_svfprintf_r+0x12e>
 80034ac:	e3dc      	b.n	8003c68 <_svfprintf_r+0x8e8>
 80034ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	3004      	adds	r0, #4
 80034b6:	1c21      	adds	r1, r4, #0
 80034b8:	9010      	str	r0, [sp, #64]	; 0x40
 80034ba:	1e4b      	subs	r3, r1, #1
 80034bc:	4199      	sbcs	r1, r3
 80034be:	2301      	movs	r3, #1
 80034c0:	207b      	movs	r0, #123	; 0x7b
 80034c2:	2200      	movs	r2, #0
 80034c4:	4468      	add	r0, sp
 80034c6:	7002      	strb	r2, [r0, #0]
 80034c8:	4652      	mov	r2, sl
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	db03      	blt.n	80034d6 <_svfprintf_r+0x156>
 80034ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	4390      	bics	r0, r2
 80034d4:	900a      	str	r0, [sp, #40]	; 0x28
 80034d6:	4652      	mov	r2, sl
 80034d8:	2a00      	cmp	r2, #0
 80034da:	d101      	bne.n	80034e0 <_svfprintf_r+0x160>
 80034dc:	2900      	cmp	r1, #0
 80034de:	d05f      	beq.n	80035a0 <_svfprintf_r+0x220>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d100      	bne.n	80034e6 <_svfprintf_r+0x166>
 80034e4:	e377      	b.n	8003bd6 <_svfprintf_r+0x856>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d100      	bne.n	80034ec <_svfprintf_r+0x16c>
 80034ea:	e362      	b.n	8003bb2 <_svfprintf_r+0x832>
 80034ec:	466b      	mov	r3, sp
 80034ee:	33cf      	adds	r3, #207	; 0xcf
 80034f0:	2107      	movs	r1, #7
 80034f2:	1c0a      	adds	r2, r1, #0
 80034f4:	4022      	ands	r2, r4
 80034f6:	3230      	adds	r2, #48	; 0x30
 80034f8:	1c18      	adds	r0, r3, #0
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	08e4      	lsrs	r4, r4, #3
 80034fe:	3b01      	subs	r3, #1
 8003500:	2c00      	cmp	r4, #0
 8003502:	d1f6      	bne.n	80034f2 <_svfprintf_r+0x172>
 8003504:	9013      	str	r0, [sp, #76]	; 0x4c
 8003506:	1c01      	adds	r1, r0, #0
 8003508:	980a      	ldr	r0, [sp, #40]	; 0x28
 800350a:	07c0      	lsls	r0, r0, #31
 800350c:	d400      	bmi.n	8003510 <_svfprintf_r+0x190>
 800350e:	e3c3      	b.n	8003c98 <_svfprintf_r+0x918>
 8003510:	2a30      	cmp	r2, #48	; 0x30
 8003512:	d101      	bne.n	8003518 <_svfprintf_r+0x198>
 8003514:	f000 ff68 	bl	80043e8 <_svfprintf_r+0x1068>
 8003518:	9313      	str	r3, [sp, #76]	; 0x4c
 800351a:	3901      	subs	r1, #1
 800351c:	2330      	movs	r3, #48	; 0x30
 800351e:	700b      	strb	r3, [r1, #0]
 8003520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003522:	9908      	ldr	r1, [sp, #32]
 8003524:	1a89      	subs	r1, r1, r2
 8003526:	910e      	str	r1, [sp, #56]	; 0x38
 8003528:	e048      	b.n	80035bc <_svfprintf_r+0x23c>
 800352a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800352c:	2310      	movs	r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	920a      	str	r2, [sp, #40]	; 0x28
 8003532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003534:	06db      	lsls	r3, r3, #27
 8003536:	d500      	bpl.n	800353a <_svfprintf_r+0x1ba>
 8003538:	e3a4      	b.n	8003c84 <_svfprintf_r+0x904>
 800353a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800353c:	0649      	lsls	r1, r1, #25
 800353e:	d401      	bmi.n	8003544 <_svfprintf_r+0x1c4>
 8003540:	f000 fe2a 	bl	8004198 <_svfprintf_r+0xe18>
 8003544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003546:	8814      	ldrh	r4, [r2, #0]
 8003548:	3204      	adds	r2, #4
 800354a:	1c21      	adds	r1, r4, #0
 800354c:	1e4b      	subs	r3, r1, #1
 800354e:	4199      	sbcs	r1, r3
 8003550:	9210      	str	r2, [sp, #64]	; 0x40
 8003552:	2300      	movs	r3, #0
 8003554:	e7b4      	b.n	80034c0 <_svfprintf_r+0x140>
 8003556:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003558:	2310      	movs	r3, #16
 800355a:	4318      	orrs	r0, r3
 800355c:	900a      	str	r0, [sp, #40]	; 0x28
 800355e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003560:	06c9      	lsls	r1, r1, #27
 8003562:	d400      	bmi.n	8003566 <_svfprintf_r+0x1e6>
 8003564:	e375      	b.n	8003c52 <_svfprintf_r+0x8d2>
 8003566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003568:	6814      	ldr	r4, [r2, #0]
 800356a:	3204      	adds	r2, #4
 800356c:	9210      	str	r2, [sp, #64]	; 0x40
 800356e:	2c00      	cmp	r4, #0
 8003570:	da01      	bge.n	8003576 <_svfprintf_r+0x1f6>
 8003572:	f000 fde9 	bl	8004148 <_svfprintf_r+0xdc8>
 8003576:	1c21      	adds	r1, r4, #0
 8003578:	1e4b      	subs	r3, r1, #1
 800357a:	4199      	sbcs	r1, r3
 800357c:	2301      	movs	r3, #1
 800357e:	e7a3      	b.n	80034c8 <_svfprintf_r+0x148>
 8003580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3204      	adds	r2, #4
 8003588:	9311      	str	r3, [sp, #68]	; 0x44
 800358a:	9210      	str	r2, [sp, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	db00      	blt.n	8003592 <_svfprintf_r+0x212>
 8003590:	e766      	b.n	8003460 <_svfprintf_r+0xe0>
 8003592:	425b      	negs	r3, r3
 8003594:	9311      	str	r3, [sp, #68]	; 0x44
 8003596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003598:	2304      	movs	r3, #4
 800359a:	431a      	orrs	r2, r3
 800359c:	920a      	str	r2, [sp, #40]	; 0x28
 800359e:	e75f      	b.n	8003460 <_svfprintf_r+0xe0>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d000      	beq.n	80035a6 <_svfprintf_r+0x226>
 80035a4:	e27f      	b.n	8003aa6 <_svfprintf_r+0x726>
 80035a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035a8:	07c9      	lsls	r1, r1, #31
 80035aa:	d400      	bmi.n	80035ae <_svfprintf_r+0x22e>
 80035ac:	e2fc      	b.n	8003ba8 <_svfprintf_r+0x828>
 80035ae:	22cf      	movs	r2, #207	; 0xcf
 80035b0:	2330      	movs	r3, #48	; 0x30
 80035b2:	446a      	add	r2, sp
 80035b4:	7013      	strb	r3, [r2, #0]
 80035b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80035b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80035ba:	930e      	str	r3, [sp, #56]	; 0x38
 80035bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035be:	910d      	str	r1, [sp, #52]	; 0x34
 80035c0:	4551      	cmp	r1, sl
 80035c2:	da01      	bge.n	80035c8 <_svfprintf_r+0x248>
 80035c4:	4653      	mov	r3, sl
 80035c6:	930d      	str	r3, [sp, #52]	; 0x34
 80035c8:	207b      	movs	r0, #123	; 0x7b
 80035ca:	4468      	add	r0, sp
 80035cc:	7803      	ldrb	r3, [r0, #0]
 80035ce:	4652      	mov	r2, sl
 80035d0:	2000      	movs	r0, #0
 80035d2:	9214      	str	r2, [sp, #80]	; 0x50
 80035d4:	9016      	str	r0, [sp, #88]	; 0x58
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <_svfprintf_r+0x260>
 80035da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035dc:	3301      	adds	r3, #1
 80035de:	930d      	str	r3, [sp, #52]	; 0x34
 80035e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035e2:	2302      	movs	r3, #2
 80035e4:	4018      	ands	r0, r3
 80035e6:	9012      	str	r0, [sp, #72]	; 0x48
 80035e8:	d002      	beq.n	80035f0 <_svfprintf_r+0x270>
 80035ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ec:	3102      	adds	r1, #2
 80035ee:	910d      	str	r1, [sp, #52]	; 0x34
 80035f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035f2:	2384      	movs	r3, #132	; 0x84
 80035f4:	401a      	ands	r2, r3
 80035f6:	4692      	mov	sl, r2
 80035f8:	d13d      	bne.n	8003676 <_svfprintf_r+0x2f6>
 80035fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035fe:	1a1c      	subs	r4, r3, r0
 8003600:	2c00      	cmp	r4, #0
 8003602:	dd38      	ble.n	8003676 <_svfprintf_r+0x2f6>
 8003604:	2c10      	cmp	r4, #16
 8003606:	dc01      	bgt.n	800360c <_svfprintf_r+0x28c>
 8003608:	f000 fec4 	bl	8004394 <_svfprintf_r+0x1014>
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <_svfprintf_r+0x414>)
 800360e:	2310      	movs	r3, #16
 8003610:	4699      	mov	r9, r3
 8003612:	46a8      	mov	r8, r5
 8003614:	1c3b      	adds	r3, r7, #0
 8003616:	1c15      	adds	r5, r2, #0
 8003618:	465f      	mov	r7, fp
 800361a:	e003      	b.n	8003624 <_svfprintf_r+0x2a4>
 800361c:	3c10      	subs	r4, #16
 800361e:	3308      	adds	r3, #8
 8003620:	2c10      	cmp	r4, #16
 8003622:	dd16      	ble.n	8003652 <_svfprintf_r+0x2d2>
 8003624:	68b2      	ldr	r2, [r6, #8]
 8003626:	4648      	mov	r0, r9
 8003628:	3210      	adds	r2, #16
 800362a:	601d      	str	r5, [r3, #0]
 800362c:	6058      	str	r0, [r3, #4]
 800362e:	60b2      	str	r2, [r6, #8]
 8003630:	6872      	ldr	r2, [r6, #4]
 8003632:	3201      	adds	r2, #1
 8003634:	6072      	str	r2, [r6, #4]
 8003636:	2a07      	cmp	r2, #7
 8003638:	ddf0      	ble.n	800361c <_svfprintf_r+0x29c>
 800363a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800363c:	1c39      	adds	r1, r7, #0
 800363e:	1c32      	adds	r2, r6, #0
 8003640:	f003 fa72 	bl	8006b28 <__ssprint_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	d000      	beq.n	800364a <_svfprintf_r+0x2ca>
 8003648:	e15f      	b.n	800390a <_svfprintf_r+0x58a>
 800364a:	3c10      	subs	r4, #16
 800364c:	ab34      	add	r3, sp, #208	; 0xd0
 800364e:	2c10      	cmp	r4, #16
 8003650:	dce8      	bgt.n	8003624 <_svfprintf_r+0x2a4>
 8003652:	46bb      	mov	fp, r7
 8003654:	1c1f      	adds	r7, r3, #0
 8003656:	1c2b      	adds	r3, r5, #0
 8003658:	4645      	mov	r5, r8
 800365a:	4698      	mov	r8, r3
 800365c:	68b2      	ldr	r2, [r6, #8]
 800365e:	6873      	ldr	r3, [r6, #4]
 8003660:	607c      	str	r4, [r7, #4]
 8003662:	4641      	mov	r1, r8
 8003664:	1914      	adds	r4, r2, r4
 8003666:	3301      	adds	r3, #1
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	60b4      	str	r4, [r6, #8]
 800366c:	6073      	str	r3, [r6, #4]
 800366e:	2b07      	cmp	r3, #7
 8003670:	dd00      	ble.n	8003674 <_svfprintf_r+0x2f4>
 8003672:	e2cb      	b.n	8003c0c <_svfprintf_r+0x88c>
 8003674:	3708      	adds	r7, #8
 8003676:	207b      	movs	r0, #123	; 0x7b
 8003678:	4468      	add	r0, sp
 800367a:	7803      	ldrb	r3, [r0, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00c      	beq.n	800369a <_svfprintf_r+0x31a>
 8003680:	2301      	movs	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	3301      	adds	r3, #1
 8003688:	6038      	str	r0, [r7, #0]
 800368a:	60b3      	str	r3, [r6, #8]
 800368c:	6873      	ldr	r3, [r6, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	6073      	str	r3, [r6, #4]
 8003692:	2b07      	cmp	r3, #7
 8003694:	dd00      	ble.n	8003698 <_svfprintf_r+0x318>
 8003696:	e21d      	b.n	8003ad4 <_svfprintf_r+0x754>
 8003698:	3708      	adds	r7, #8
 800369a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800369c:	2900      	cmp	r1, #0
 800369e:	d00d      	beq.n	80036bc <_svfprintf_r+0x33c>
 80036a0:	ab1f      	add	r3, sp, #124	; 0x7c
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	2302      	movs	r3, #2
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	68b3      	ldr	r3, [r6, #8]
 80036aa:	3302      	adds	r3, #2
 80036ac:	60b3      	str	r3, [r6, #8]
 80036ae:	6873      	ldr	r3, [r6, #4]
 80036b0:	3301      	adds	r3, #1
 80036b2:	6073      	str	r3, [r6, #4]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dd00      	ble.n	80036ba <_svfprintf_r+0x33a>
 80036b8:	e215      	b.n	8003ae6 <_svfprintf_r+0x766>
 80036ba:	3708      	adds	r7, #8
 80036bc:	4652      	mov	r2, sl
 80036be:	2a80      	cmp	r2, #128	; 0x80
 80036c0:	d100      	bne.n	80036c4 <_svfprintf_r+0x344>
 80036c2:	e134      	b.n	800392e <_svfprintf_r+0x5ae>
 80036c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80036c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036c8:	1a44      	subs	r4, r0, r1
 80036ca:	2c00      	cmp	r4, #0
 80036cc:	dd3b      	ble.n	8003746 <_svfprintf_r+0x3c6>
 80036ce:	2c10      	cmp	r4, #16
 80036d0:	dc01      	bgt.n	80036d6 <_svfprintf_r+0x356>
 80036d2:	f000 fd7c 	bl	80041ce <_svfprintf_r+0xe4e>
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <_svfprintf_r+0x414>)
 80036d8:	2010      	movs	r0, #16
 80036da:	4698      	mov	r8, r3
 80036dc:	4682      	mov	sl, r0
 80036de:	1c3b      	adds	r3, r7, #0
 80036e0:	44c2      	add	sl, r8
 80036e2:	465f      	mov	r7, fp
 80036e4:	4681      	mov	r9, r0
 80036e6:	46ab      	mov	fp, r5
 80036e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036ea:	e003      	b.n	80036f4 <_svfprintf_r+0x374>
 80036ec:	3c10      	subs	r4, #16
 80036ee:	3308      	adds	r3, #8
 80036f0:	2c10      	cmp	r4, #16
 80036f2:	dd17      	ble.n	8003724 <_svfprintf_r+0x3a4>
 80036f4:	4652      	mov	r2, sl
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68b2      	ldr	r2, [r6, #8]
 80036fa:	4648      	mov	r0, r9
 80036fc:	3210      	adds	r2, #16
 80036fe:	6058      	str	r0, [r3, #4]
 8003700:	60b2      	str	r2, [r6, #8]
 8003702:	6872      	ldr	r2, [r6, #4]
 8003704:	3201      	adds	r2, #1
 8003706:	6072      	str	r2, [r6, #4]
 8003708:	2a07      	cmp	r2, #7
 800370a:	ddef      	ble.n	80036ec <_svfprintf_r+0x36c>
 800370c:	1c28      	adds	r0, r5, #0
 800370e:	1c39      	adds	r1, r7, #0
 8003710:	1c32      	adds	r2, r6, #0
 8003712:	f003 fa09 	bl	8006b28 <__ssprint_r>
 8003716:	2800      	cmp	r0, #0
 8003718:	d000      	beq.n	800371c <_svfprintf_r+0x39c>
 800371a:	e0f6      	b.n	800390a <_svfprintf_r+0x58a>
 800371c:	3c10      	subs	r4, #16
 800371e:	ab34      	add	r3, sp, #208	; 0xd0
 8003720:	2c10      	cmp	r4, #16
 8003722:	dce7      	bgt.n	80036f4 <_svfprintf_r+0x374>
 8003724:	465d      	mov	r5, fp
 8003726:	46bb      	mov	fp, r7
 8003728:	1c1f      	adds	r7, r3, #0
 800372a:	4643      	mov	r3, r8
 800372c:	3310      	adds	r3, #16
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	68b1      	ldr	r1, [r6, #8]
 8003732:	6873      	ldr	r3, [r6, #4]
 8003734:	607c      	str	r4, [r7, #4]
 8003736:	3301      	adds	r3, #1
 8003738:	190c      	adds	r4, r1, r4
 800373a:	60b4      	str	r4, [r6, #8]
 800373c:	6073      	str	r3, [r6, #4]
 800373e:	2b07      	cmp	r3, #7
 8003740:	dd00      	ble.n	8003744 <_svfprintf_r+0x3c4>
 8003742:	e1be      	b.n	8003ac2 <_svfprintf_r+0x742>
 8003744:	3708      	adds	r7, #8
 8003746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003748:	05d2      	lsls	r2, r2, #23
 800374a:	d500      	bpl.n	800374e <_svfprintf_r+0x3ce>
 800374c:	e07e      	b.n	800384c <_svfprintf_r+0x4cc>
 800374e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003752:	68b1      	ldr	r1, [r6, #8]
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	180b      	adds	r3, r1, r0
 800375a:	60b3      	str	r3, [r6, #8]
 800375c:	6873      	ldr	r3, [r6, #4]
 800375e:	3301      	adds	r3, #1
 8003760:	6073      	str	r3, [r6, #4]
 8003762:	2b07      	cmp	r3, #7
 8003764:	dc68      	bgt.n	8003838 <_svfprintf_r+0x4b8>
 8003766:	3708      	adds	r7, #8
 8003768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800376a:	075b      	lsls	r3, r3, #29
 800376c:	d545      	bpl.n	80037fa <_svfprintf_r+0x47a>
 800376e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003770:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003772:	1a44      	subs	r4, r0, r1
 8003774:	2c00      	cmp	r4, #0
 8003776:	dd40      	ble.n	80037fa <_svfprintf_r+0x47a>
 8003778:	2c10      	cmp	r4, #16
 800377a:	dc01      	bgt.n	8003780 <_svfprintf_r+0x400>
 800377c:	f000 fe3a 	bl	80043f4 <_svfprintf_r+0x1074>
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <_svfprintf_r+0x414>)
 8003782:	2010      	movs	r0, #16
 8003784:	46aa      	mov	sl, r5
 8003786:	4698      	mov	r8, r3
 8003788:	4681      	mov	r9, r0
 800378a:	465d      	mov	r5, fp
 800378c:	e008      	b.n	80037a0 <_svfprintf_r+0x420>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	08008ae0 	.word	0x08008ae0
 8003794:	08008c44 	.word	0x08008c44
 8003798:	3c10      	subs	r4, #16
 800379a:	3708      	adds	r7, #8
 800379c:	2c10      	cmp	r4, #16
 800379e:	dd18      	ble.n	80037d2 <_svfprintf_r+0x452>
 80037a0:	68b3      	ldr	r3, [r6, #8]
 80037a2:	4641      	mov	r1, r8
 80037a4:	3310      	adds	r3, #16
 80037a6:	464a      	mov	r2, r9
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	60b3      	str	r3, [r6, #8]
 80037ae:	6873      	ldr	r3, [r6, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	6073      	str	r3, [r6, #4]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	ddef      	ble.n	8003798 <_svfprintf_r+0x418>
 80037b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037ba:	1c29      	adds	r1, r5, #0
 80037bc:	1c32      	adds	r2, r6, #0
 80037be:	f003 f9b3 	bl	8006b28 <__ssprint_r>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d001      	beq.n	80037ca <_svfprintf_r+0x44a>
 80037c6:	f000 fc0e 	bl	8003fe6 <_svfprintf_r+0xc66>
 80037ca:	3c10      	subs	r4, #16
 80037cc:	af34      	add	r7, sp, #208	; 0xd0
 80037ce:	2c10      	cmp	r4, #16
 80037d0:	dce6      	bgt.n	80037a0 <_svfprintf_r+0x420>
 80037d2:	46ab      	mov	fp, r5
 80037d4:	4655      	mov	r5, sl
 80037d6:	4643      	mov	r3, r8
 80037d8:	c718      	stmia	r7!, {r3, r4}
 80037da:	68b0      	ldr	r0, [r6, #8]
 80037dc:	6873      	ldr	r3, [r6, #4]
 80037de:	1824      	adds	r4, r4, r0
 80037e0:	3301      	adds	r3, #1
 80037e2:	60b4      	str	r4, [r6, #8]
 80037e4:	6073      	str	r3, [r6, #4]
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	dd08      	ble.n	80037fc <_svfprintf_r+0x47c>
 80037ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037ec:	4659      	mov	r1, fp
 80037ee:	1c32      	adds	r2, r6, #0
 80037f0:	f003 f99a 	bl	8006b28 <__ssprint_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d000      	beq.n	80037fa <_svfprintf_r+0x47a>
 80037f8:	e153      	b.n	8003aa2 <_svfprintf_r+0x722>
 80037fa:	68b4      	ldr	r4, [r6, #8]
 80037fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003800:	428b      	cmp	r3, r1
 8003802:	da00      	bge.n	8003806 <_svfprintf_r+0x486>
 8003804:	1c0b      	adds	r3, r1, #0
 8003806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003808:	18d2      	adds	r2, r2, r3
 800380a:	920f      	str	r2, [sp, #60]	; 0x3c
 800380c:	2c00      	cmp	r4, #0
 800380e:	d000      	beq.n	8003812 <_svfprintf_r+0x492>
 8003810:	e13f      	b.n	8003a92 <_svfprintf_r+0x712>
 8003812:	2300      	movs	r3, #0
 8003814:	6073      	str	r3, [r6, #4]
 8003816:	af34      	add	r7, sp, #208	; 0xd0
 8003818:	e5e7      	b.n	80033ea <_svfprintf_r+0x6a>
 800381a:	465d      	mov	r5, fp
 800381c:	46bb      	mov	fp, r7
 800381e:	1c1f      	adds	r7, r3, #0
 8003820:	4643      	mov	r3, r8
 8003822:	3310      	adds	r3, #16
 8003824:	68b1      	ldr	r1, [r6, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	607c      	str	r4, [r7, #4]
 800382a:	190c      	adds	r4, r1, r4
 800382c:	6873      	ldr	r3, [r6, #4]
 800382e:	3301      	adds	r3, #1
 8003830:	60b4      	str	r4, [r6, #8]
 8003832:	6073      	str	r3, [r6, #4]
 8003834:	2b07      	cmp	r3, #7
 8003836:	dd96      	ble.n	8003766 <_svfprintf_r+0x3e6>
 8003838:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800383a:	4659      	mov	r1, fp
 800383c:	1c32      	adds	r2, r6, #0
 800383e:	f003 f973 	bl	8006b28 <__ssprint_r>
 8003842:	2800      	cmp	r0, #0
 8003844:	d000      	beq.n	8003848 <_svfprintf_r+0x4c8>
 8003846:	e12c      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003848:	af34      	add	r7, sp, #208	; 0xd0
 800384a:	e78d      	b.n	8003768 <_svfprintf_r+0x3e8>
 800384c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800384e:	2a65      	cmp	r2, #101	; 0x65
 8003850:	dc00      	bgt.n	8003854 <_svfprintf_r+0x4d4>
 8003852:	e0ae      	b.n	80039b2 <_svfprintf_r+0x632>
 8003854:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003856:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003858:	4bd0      	ldr	r3, [pc, #832]	; (8003b9c <_svfprintf_r+0x81c>)
 800385a:	4acf      	ldr	r2, [pc, #828]	; (8003b98 <_svfprintf_r+0x818>)
 800385c:	f004 ef1e 	blx	800869c <__aeabi_dcmpeq>
 8003860:	2800      	cmp	r0, #0
 8003862:	d100      	bne.n	8003866 <_svfprintf_r+0x4e6>
 8003864:	e148      	b.n	8003af8 <_svfprintf_r+0x778>
 8003866:	4bce      	ldr	r3, [pc, #824]	; (8003ba0 <_svfprintf_r+0x820>)
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	2301      	movs	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	68b3      	ldr	r3, [r6, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	60b3      	str	r3, [r6, #8]
 8003874:	6873      	ldr	r3, [r6, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	6073      	str	r3, [r6, #4]
 800387a:	2b07      	cmp	r3, #7
 800387c:	dd00      	ble.n	8003880 <_svfprintf_r+0x500>
 800387e:	e336      	b.n	8003eee <_svfprintf_r+0xb6e>
 8003880:	3708      	adds	r7, #8
 8003882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003884:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003886:	4283      	cmp	r3, r0
 8003888:	db03      	blt.n	8003892 <_svfprintf_r+0x512>
 800388a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800388c:	07c9      	lsls	r1, r1, #31
 800388e:	d400      	bmi.n	8003892 <_svfprintf_r+0x512>
 8003890:	e76a      	b.n	8003768 <_svfprintf_r+0x3e8>
 8003892:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003894:	68b1      	ldr	r1, [r6, #8]
 8003896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	185b      	adds	r3, r3, r1
 800389c:	603a      	str	r2, [r7, #0]
 800389e:	60b3      	str	r3, [r6, #8]
 80038a0:	6873      	ldr	r3, [r6, #4]
 80038a2:	3301      	adds	r3, #1
 80038a4:	6073      	str	r3, [r6, #4]
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	dd01      	ble.n	80038ae <_svfprintf_r+0x52e>
 80038aa:	f000 fd1b 	bl	80042e4 <_svfprintf_r+0xf64>
 80038ae:	3708      	adds	r7, #8
 80038b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80038b2:	3c01      	subs	r4, #1
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	dc00      	bgt.n	80038ba <_svfprintf_r+0x53a>
 80038b8:	e756      	b.n	8003768 <_svfprintf_r+0x3e8>
 80038ba:	2c10      	cmp	r4, #16
 80038bc:	dc01      	bgt.n	80038c2 <_svfprintf_r+0x542>
 80038be:	f000 fecf 	bl	8004660 <_svfprintf_r+0x12e0>
 80038c2:	4bb8      	ldr	r3, [pc, #736]	; (8003ba4 <_svfprintf_r+0x824>)
 80038c4:	2010      	movs	r0, #16
 80038c6:	4698      	mov	r8, r3
 80038c8:	4682      	mov	sl, r0
 80038ca:	1c3b      	adds	r3, r7, #0
 80038cc:	44c2      	add	sl, r8
 80038ce:	465f      	mov	r7, fp
 80038d0:	4681      	mov	r9, r0
 80038d2:	46ab      	mov	fp, r5
 80038d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80038d6:	e003      	b.n	80038e0 <_svfprintf_r+0x560>
 80038d8:	3308      	adds	r3, #8
 80038da:	3c10      	subs	r4, #16
 80038dc:	2c10      	cmp	r4, #16
 80038de:	dd9c      	ble.n	800381a <_svfprintf_r+0x49a>
 80038e0:	4652      	mov	r2, sl
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	68b2      	ldr	r2, [r6, #8]
 80038e6:	4648      	mov	r0, r9
 80038e8:	3210      	adds	r2, #16
 80038ea:	6058      	str	r0, [r3, #4]
 80038ec:	60b2      	str	r2, [r6, #8]
 80038ee:	6872      	ldr	r2, [r6, #4]
 80038f0:	3201      	adds	r2, #1
 80038f2:	6072      	str	r2, [r6, #4]
 80038f4:	2a07      	cmp	r2, #7
 80038f6:	ddef      	ble.n	80038d8 <_svfprintf_r+0x558>
 80038f8:	1c28      	adds	r0, r5, #0
 80038fa:	1c39      	adds	r1, r7, #0
 80038fc:	1c32      	adds	r2, r6, #0
 80038fe:	f003 f913 	bl	8006b28 <__ssprint_r>
 8003902:	2800      	cmp	r0, #0
 8003904:	d101      	bne.n	800390a <_svfprintf_r+0x58a>
 8003906:	ab34      	add	r3, sp, #208	; 0xd0
 8003908:	e7e7      	b.n	80038da <_svfprintf_r+0x55a>
 800390a:	46b9      	mov	r9, r7
 800390c:	4648      	mov	r0, r9
 800390e:	8983      	ldrh	r3, [r0, #12]
 8003910:	0659      	lsls	r1, r3, #25
 8003912:	d502      	bpl.n	800391a <_svfprintf_r+0x59a>
 8003914:	2301      	movs	r3, #1
 8003916:	425b      	negs	r3, r3
 8003918:	930f      	str	r3, [sp, #60]	; 0x3c
 800391a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800391c:	b045      	add	sp, #276	; 0x114
 800391e:	bc3c      	pop	{r2, r3, r4, r5}
 8003920:	4690      	mov	r8, r2
 8003922:	4699      	mov	r9, r3
 8003924:	46a2      	mov	sl, r4
 8003926:	46ab      	mov	fp, r5
 8003928:	bcf0      	pop	{r4, r5, r6, r7}
 800392a:	bc02      	pop	{r1}
 800392c:	4708      	bx	r1
 800392e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003930:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003932:	1a1c      	subs	r4, r3, r0
 8003934:	2c00      	cmp	r4, #0
 8003936:	dc00      	bgt.n	800393a <_svfprintf_r+0x5ba>
 8003938:	e6c4      	b.n	80036c4 <_svfprintf_r+0x344>
 800393a:	2c10      	cmp	r4, #16
 800393c:	dc01      	bgt.n	8003942 <_svfprintf_r+0x5c2>
 800393e:	f000 fe02 	bl	8004546 <_svfprintf_r+0x11c6>
 8003942:	4a98      	ldr	r2, [pc, #608]	; (8003ba4 <_svfprintf_r+0x824>)
 8003944:	2310      	movs	r3, #16
 8003946:	469a      	mov	sl, r3
 8003948:	4690      	mov	r8, r2
 800394a:	4699      	mov	r9, r3
 800394c:	44c2      	add	sl, r8
 800394e:	1c3b      	adds	r3, r7, #0
 8003950:	465f      	mov	r7, fp
 8003952:	46ab      	mov	fp, r5
 8003954:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003956:	e003      	b.n	8003960 <_svfprintf_r+0x5e0>
 8003958:	3c10      	subs	r4, #16
 800395a:	3308      	adds	r3, #8
 800395c:	2c10      	cmp	r4, #16
 800395e:	dd16      	ble.n	800398e <_svfprintf_r+0x60e>
 8003960:	464a      	mov	r2, r9
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	68b2      	ldr	r2, [r6, #8]
 8003966:	4651      	mov	r1, sl
 8003968:	3210      	adds	r2, #16
 800396a:	6019      	str	r1, [r3, #0]
 800396c:	60b2      	str	r2, [r6, #8]
 800396e:	6872      	ldr	r2, [r6, #4]
 8003970:	3201      	adds	r2, #1
 8003972:	6072      	str	r2, [r6, #4]
 8003974:	2a07      	cmp	r2, #7
 8003976:	ddef      	ble.n	8003958 <_svfprintf_r+0x5d8>
 8003978:	1c28      	adds	r0, r5, #0
 800397a:	1c39      	adds	r1, r7, #0
 800397c:	1c32      	adds	r2, r6, #0
 800397e:	f003 f8d3 	bl	8006b28 <__ssprint_r>
 8003982:	2800      	cmp	r0, #0
 8003984:	d1c1      	bne.n	800390a <_svfprintf_r+0x58a>
 8003986:	3c10      	subs	r4, #16
 8003988:	ab34      	add	r3, sp, #208	; 0xd0
 800398a:	2c10      	cmp	r4, #16
 800398c:	dce8      	bgt.n	8003960 <_svfprintf_r+0x5e0>
 800398e:	465d      	mov	r5, fp
 8003990:	46bb      	mov	fp, r7
 8003992:	1c1f      	adds	r7, r3, #0
 8003994:	4643      	mov	r3, r8
 8003996:	3310      	adds	r3, #16
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	68b3      	ldr	r3, [r6, #8]
 800399c:	607c      	str	r4, [r7, #4]
 800399e:	191c      	adds	r4, r3, r4
 80039a0:	6873      	ldr	r3, [r6, #4]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60b4      	str	r4, [r6, #8]
 80039a6:	6073      	str	r3, [r6, #4]
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	dd00      	ble.n	80039ae <_svfprintf_r+0x62e>
 80039ac:	e3c1      	b.n	8004132 <_svfprintf_r+0xdb2>
 80039ae:	3708      	adds	r7, #8
 80039b0:	e688      	b.n	80036c4 <_svfprintf_r+0x344>
 80039b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	dc00      	bgt.n	80039ba <_svfprintf_r+0x63a>
 80039b8:	e39c      	b.n	80040f4 <_svfprintf_r+0xd74>
 80039ba:	2301      	movs	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	68b3      	ldr	r3, [r6, #8]
 80039c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80039c2:	3301      	adds	r3, #1
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	60b3      	str	r3, [r6, #8]
 80039c8:	6873      	ldr	r3, [r6, #4]
 80039ca:	3301      	adds	r3, #1
 80039cc:	6073      	str	r3, [r6, #4]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	dd00      	ble.n	80039d4 <_svfprintf_r+0x654>
 80039d2:	e3a4      	b.n	800411e <_svfprintf_r+0xd9e>
 80039d4:	3708      	adds	r7, #8
 80039d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80039d8:	68b1      	ldr	r1, [r6, #8]
 80039da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	185b      	adds	r3, r3, r1
 80039e0:	603a      	str	r2, [r7, #0]
 80039e2:	60b3      	str	r3, [r6, #8]
 80039e4:	6873      	ldr	r3, [r6, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	6073      	str	r3, [r6, #4]
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	dd00      	ble.n	80039f0 <_svfprintf_r+0x670>
 80039ee:	e38c      	b.n	800410a <_svfprintf_r+0xd8a>
 80039f0:	3708      	adds	r7, #8
 80039f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80039f4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80039f6:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <_svfprintf_r+0x81c>)
 80039f8:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <_svfprintf_r+0x818>)
 80039fa:	f004 ee50 	blx	800869c <__aeabi_dcmpeq>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d100      	bne.n	8003a04 <_svfprintf_r+0x684>
 8003a02:	e10d      	b.n	8003c20 <_svfprintf_r+0x8a0>
 8003a04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003a06:	3c01      	subs	r4, #1
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	dd3b      	ble.n	8003a84 <_svfprintf_r+0x704>
 8003a0c:	2c10      	cmp	r4, #16
 8003a0e:	dc01      	bgt.n	8003a14 <_svfprintf_r+0x694>
 8003a10:	f000 fe19 	bl	8004646 <_svfprintf_r+0x12c6>
 8003a14:	4863      	ldr	r0, [pc, #396]	; (8003ba4 <_svfprintf_r+0x824>)
 8003a16:	2110      	movs	r1, #16
 8003a18:	4680      	mov	r8, r0
 8003a1a:	468a      	mov	sl, r1
 8003a1c:	1c3b      	adds	r3, r7, #0
 8003a1e:	44c2      	add	sl, r8
 8003a20:	465f      	mov	r7, fp
 8003a22:	4689      	mov	r9, r1
 8003a24:	46ab      	mov	fp, r5
 8003a26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a28:	e003      	b.n	8003a32 <_svfprintf_r+0x6b2>
 8003a2a:	3c10      	subs	r4, #16
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2c10      	cmp	r4, #16
 8003a30:	dd17      	ble.n	8003a62 <_svfprintf_r+0x6e2>
 8003a32:	68b2      	ldr	r2, [r6, #8]
 8003a34:	4650      	mov	r0, sl
 8003a36:	3210      	adds	r2, #16
 8003a38:	4649      	mov	r1, r9
 8003a3a:	6018      	str	r0, [r3, #0]
 8003a3c:	6059      	str	r1, [r3, #4]
 8003a3e:	60b2      	str	r2, [r6, #8]
 8003a40:	6872      	ldr	r2, [r6, #4]
 8003a42:	3201      	adds	r2, #1
 8003a44:	6072      	str	r2, [r6, #4]
 8003a46:	2a07      	cmp	r2, #7
 8003a48:	ddef      	ble.n	8003a2a <_svfprintf_r+0x6aa>
 8003a4a:	1c28      	adds	r0, r5, #0
 8003a4c:	1c39      	adds	r1, r7, #0
 8003a4e:	1c32      	adds	r2, r6, #0
 8003a50:	f003 f86a 	bl	8006b28 <__ssprint_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d000      	beq.n	8003a5a <_svfprintf_r+0x6da>
 8003a58:	e757      	b.n	800390a <_svfprintf_r+0x58a>
 8003a5a:	3c10      	subs	r4, #16
 8003a5c:	ab34      	add	r3, sp, #208	; 0xd0
 8003a5e:	2c10      	cmp	r4, #16
 8003a60:	dce7      	bgt.n	8003a32 <_svfprintf_r+0x6b2>
 8003a62:	465d      	mov	r5, fp
 8003a64:	46bb      	mov	fp, r7
 8003a66:	1c1f      	adds	r7, r3, #0
 8003a68:	4643      	mov	r3, r8
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	68b2      	ldr	r2, [r6, #8]
 8003a70:	6873      	ldr	r3, [r6, #4]
 8003a72:	607c      	str	r4, [r7, #4]
 8003a74:	3301      	adds	r3, #1
 8003a76:	1914      	adds	r4, r2, r4
 8003a78:	60b4      	str	r4, [r6, #8]
 8003a7a:	6073      	str	r3, [r6, #4]
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	dd00      	ble.n	8003a82 <_svfprintf_r+0x702>
 8003a80:	e0dd      	b.n	8003c3e <_svfprintf_r+0x8be>
 8003a82:	3708      	adds	r7, #8
 8003a84:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003a86:	68b2      	ldr	r2, [r6, #8]
 8003a88:	ab23      	add	r3, sp, #140	; 0x8c
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	6079      	str	r1, [r7, #4]
 8003a8e:	1853      	adds	r3, r2, r1
 8003a90:	e663      	b.n	800375a <_svfprintf_r+0x3da>
 8003a92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a94:	4659      	mov	r1, fp
 8003a96:	1c32      	adds	r2, r6, #0
 8003a98:	f003 f846 	bl	8006b28 <__ssprint_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d100      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003aa0:	e6b7      	b.n	8003812 <_svfprintf_r+0x492>
 8003aa2:	46d9      	mov	r9, fp
 8003aa4:	e732      	b.n	800390c <_svfprintf_r+0x58c>
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	aa34      	add	r2, sp, #208	; 0xd0
 8003aaa:	910e      	str	r1, [sp, #56]	; 0x38
 8003aac:	9213      	str	r2, [sp, #76]	; 0x4c
 8003aae:	e585      	b.n	80035bc <_svfprintf_r+0x23c>
 8003ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	1c32      	adds	r2, r6, #0
 8003ab6:	f003 f837 	bl	8006b28 <__ssprint_r>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1f1      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003abe:	af34      	add	r7, sp, #208	; 0xd0
 8003ac0:	e4b0      	b.n	8003424 <_svfprintf_r+0xa4>
 8003ac2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	1c32      	adds	r2, r6, #0
 8003ac8:	f003 f82e 	bl	8006b28 <__ssprint_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d1e8      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003ad0:	af34      	add	r7, sp, #208	; 0xd0
 8003ad2:	e638      	b.n	8003746 <_svfprintf_r+0x3c6>
 8003ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ad6:	4659      	mov	r1, fp
 8003ad8:	1c32      	adds	r2, r6, #0
 8003ada:	f003 f825 	bl	8006b28 <__ssprint_r>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d1df      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003ae2:	af34      	add	r7, sp, #208	; 0xd0
 8003ae4:	e5d9      	b.n	800369a <_svfprintf_r+0x31a>
 8003ae6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ae8:	4659      	mov	r1, fp
 8003aea:	1c32      	adds	r2, r6, #0
 8003aec:	f003 f81c 	bl	8006b28 <__ssprint_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003af4:	af34      	add	r7, sp, #208	; 0xd0
 8003af6:	e5e1      	b.n	80036bc <_svfprintf_r+0x33c>
 8003af8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	dc00      	bgt.n	8003b00 <_svfprintf_r+0x780>
 8003afe:	e200      	b.n	8003f02 <_svfprintf_r+0xb82>
 8003b00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003b06:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003b08:	18d2      	adds	r2, r2, r3
 8003b0a:	920c      	str	r2, [sp, #48]	; 0x30
 8003b0c:	1a14      	subs	r4, r2, r0
 8003b0e:	428c      	cmp	r4, r1
 8003b10:	dd00      	ble.n	8003b14 <_svfprintf_r+0x794>
 8003b12:	1c0c      	adds	r4, r1, #0
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	dd0d      	ble.n	8003b34 <_svfprintf_r+0x7b4>
 8003b18:	68b0      	ldr	r0, [r6, #8]
 8003b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b1c:	1903      	adds	r3, r0, r4
 8003b1e:	603a      	str	r2, [r7, #0]
 8003b20:	607c      	str	r4, [r7, #4]
 8003b22:	60b3      	str	r3, [r6, #8]
 8003b24:	6873      	ldr	r3, [r6, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	6073      	str	r3, [r6, #4]
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	dd01      	ble.n	8003b32 <_svfprintf_r+0x7b2>
 8003b2e:	f000 fc35 	bl	800439c <_svfprintf_r+0x101c>
 8003b32:	3708      	adds	r7, #8
 8003b34:	43e3      	mvns	r3, r4
 8003b36:	17db      	asrs	r3, r3, #31
 8003b38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003b3a:	401c      	ands	r4, r3
 8003b3c:	1b0c      	subs	r4, r1, r4
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	dc00      	bgt.n	8003b44 <_svfprintf_r+0x7c4>
 8003b42:	e274      	b.n	800402e <_svfprintf_r+0xcae>
 8003b44:	2c10      	cmp	r4, #16
 8003b46:	dc01      	bgt.n	8003b4c <_svfprintf_r+0x7cc>
 8003b48:	f000 fd8e 	bl	8004668 <_svfprintf_r+0x12e8>
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <_svfprintf_r+0x824>)
 8003b4e:	2010      	movs	r0, #16
 8003b50:	4698      	mov	r8, r3
 8003b52:	4682      	mov	sl, r0
 8003b54:	1c3b      	adds	r3, r7, #0
 8003b56:	44c2      	add	sl, r8
 8003b58:	465f      	mov	r7, fp
 8003b5a:	4681      	mov	r9, r0
 8003b5c:	46ab      	mov	fp, r5
 8003b5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b60:	e004      	b.n	8003b6c <_svfprintf_r+0x7ec>
 8003b62:	3308      	adds	r3, #8
 8003b64:	3c10      	subs	r4, #16
 8003b66:	2c10      	cmp	r4, #16
 8003b68:	dc00      	bgt.n	8003b6c <_svfprintf_r+0x7ec>
 8003b6a:	e24f      	b.n	800400c <_svfprintf_r+0xc8c>
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	68b2      	ldr	r2, [r6, #8]
 8003b72:	4648      	mov	r0, r9
 8003b74:	3210      	adds	r2, #16
 8003b76:	6058      	str	r0, [r3, #4]
 8003b78:	60b2      	str	r2, [r6, #8]
 8003b7a:	6872      	ldr	r2, [r6, #4]
 8003b7c:	3201      	adds	r2, #1
 8003b7e:	6072      	str	r2, [r6, #4]
 8003b80:	2a07      	cmp	r2, #7
 8003b82:	ddee      	ble.n	8003b62 <_svfprintf_r+0x7e2>
 8003b84:	1c28      	adds	r0, r5, #0
 8003b86:	1c39      	adds	r1, r7, #0
 8003b88:	1c32      	adds	r2, r6, #0
 8003b8a:	f002 ffcd 	bl	8006b28 <__ssprint_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d000      	beq.n	8003b94 <_svfprintf_r+0x814>
 8003b92:	e6ba      	b.n	800390a <_svfprintf_r+0x58a>
 8003b94:	ab34      	add	r3, sp, #208	; 0xd0
 8003b96:	e7e5      	b.n	8003b64 <_svfprintf_r+0x7e4>
	...
 8003ba0:	0800906c 	.word	0x0800906c
 8003ba4:	08008c44 	.word	0x08008c44
 8003ba8:	2300      	movs	r3, #0
 8003baa:	a834      	add	r0, sp, #208	; 0xd0
 8003bac:	930e      	str	r3, [sp, #56]	; 0x38
 8003bae:	9013      	str	r0, [sp, #76]	; 0x4c
 8003bb0:	e504      	b.n	80035bc <_svfprintf_r+0x23c>
 8003bb2:	466b      	mov	r3, sp
 8003bb4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8003bb6:	33cf      	adds	r3, #207	; 0xcf
 8003bb8:	220f      	movs	r2, #15
 8003bba:	1c19      	adds	r1, r3, #0
 8003bbc:	1c13      	adds	r3, r2, #0
 8003bbe:	4023      	ands	r3, r4
 8003bc0:	5cc3      	ldrb	r3, [r0, r3]
 8003bc2:	0924      	lsrs	r4, r4, #4
 8003bc4:	700b      	strb	r3, [r1, #0]
 8003bc6:	1e4b      	subs	r3, r1, #1
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	d1f6      	bne.n	8003bba <_svfprintf_r+0x83a>
 8003bcc:	9808      	ldr	r0, [sp, #32]
 8003bce:	1a40      	subs	r0, r0, r1
 8003bd0:	9113      	str	r1, [sp, #76]	; 0x4c
 8003bd2:	900e      	str	r0, [sp, #56]	; 0x38
 8003bd4:	e4f2      	b.n	80035bc <_svfprintf_r+0x23c>
 8003bd6:	2c09      	cmp	r4, #9
 8003bd8:	d962      	bls.n	8003ca0 <_svfprintf_r+0x920>
 8003bda:	466b      	mov	r3, sp
 8003bdc:	33cf      	adds	r3, #207	; 0xcf
 8003bde:	46a8      	mov	r8, r5
 8003be0:	1c20      	adds	r0, r4, #0
 8003be2:	210a      	movs	r1, #10
 8003be4:	1c1d      	adds	r5, r3, #0
 8003be6:	f003 efde 	blx	8007ba4 <__aeabi_uidivmod>
 8003bea:	3130      	adds	r1, #48	; 0x30
 8003bec:	7029      	strb	r1, [r5, #0]
 8003bee:	1c20      	adds	r0, r4, #0
 8003bf0:	210a      	movs	r1, #10
 8003bf2:	f003 ef5a 	blx	8007aa8 <__aeabi_uidiv>
 8003bf6:	1e6b      	subs	r3, r5, #1
 8003bf8:	1c04      	adds	r4, r0, #0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d1f0      	bne.n	8003be0 <_svfprintf_r+0x860>
 8003bfe:	9513      	str	r5, [sp, #76]	; 0x4c
 8003c00:	9a08      	ldr	r2, [sp, #32]
 8003c02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c04:	1ad2      	subs	r2, r2, r3
 8003c06:	4645      	mov	r5, r8
 8003c08:	920e      	str	r2, [sp, #56]	; 0x38
 8003c0a:	e4d7      	b.n	80035bc <_svfprintf_r+0x23c>
 8003c0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c0e:	4659      	mov	r1, fp
 8003c10:	1c32      	adds	r2, r6, #0
 8003c12:	f002 ff89 	bl	8006b28 <__ssprint_r>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d000      	beq.n	8003c1c <_svfprintf_r+0x89c>
 8003c1a:	e742      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003c1c:	af34      	add	r7, sp, #208	; 0xd0
 8003c1e:	e52a      	b.n	8003676 <_svfprintf_r+0x2f6>
 8003c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c22:	3301      	adds	r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c28:	68b2      	ldr	r2, [r6, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	60b3      	str	r3, [r6, #8]
 8003c32:	6873      	ldr	r3, [r6, #4]
 8003c34:	3301      	adds	r3, #1
 8003c36:	6073      	str	r3, [r6, #4]
 8003c38:	2b07      	cmp	r3, #7
 8003c3a:	dc00      	bgt.n	8003c3e <_svfprintf_r+0x8be>
 8003c3c:	e721      	b.n	8003a82 <_svfprintf_r+0x702>
 8003c3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c40:	4659      	mov	r1, fp
 8003c42:	1c32      	adds	r2, r6, #0
 8003c44:	f002 ff70 	bl	8006b28 <__ssprint_r>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d000      	beq.n	8003c4e <_svfprintf_r+0x8ce>
 8003c4c:	e729      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003c4e:	af34      	add	r7, sp, #208	; 0xd0
 8003c50:	e718      	b.n	8003a84 <_svfprintf_r+0x704>
 8003c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c54:	065b      	lsls	r3, r3, #25
 8003c56:	d400      	bmi.n	8003c5a <_svfprintf_r+0x8da>
 8003c58:	e485      	b.n	8003566 <_svfprintf_r+0x1e6>
 8003c5a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003c5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c5e:	3104      	adds	r1, #4
 8003c60:	2400      	movs	r4, #0
 8003c62:	5f04      	ldrsh	r4, [r0, r4]
 8003c64:	9110      	str	r1, [sp, #64]	; 0x40
 8003c66:	e482      	b.n	800356e <_svfprintf_r+0x1ee>
 8003c68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c6a:	0649      	lsls	r1, r1, #25
 8003c6c:	d400      	bmi.n	8003c70 <_svfprintf_r+0x8f0>
 8003c6e:	e41e      	b.n	80034ae <_svfprintf_r+0x12e>
 8003c70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c72:	8814      	ldrh	r4, [r2, #0]
 8003c74:	3204      	adds	r2, #4
 8003c76:	1c21      	adds	r1, r4, #0
 8003c78:	1e4b      	subs	r3, r1, #1
 8003c7a:	4199      	sbcs	r1, r3
 8003c7c:	9210      	str	r2, [sp, #64]	; 0x40
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f7ff fc1e 	bl	80034c0 <_svfprintf_r+0x140>
 8003c84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c86:	6804      	ldr	r4, [r0, #0]
 8003c88:	3004      	adds	r0, #4
 8003c8a:	1c21      	adds	r1, r4, #0
 8003c8c:	1e4b      	subs	r3, r1, #1
 8003c8e:	4199      	sbcs	r1, r3
 8003c90:	9010      	str	r0, [sp, #64]	; 0x40
 8003c92:	2300      	movs	r3, #0
 8003c94:	f7ff fc14 	bl	80034c0 <_svfprintf_r+0x140>
 8003c98:	9a08      	ldr	r2, [sp, #32]
 8003c9a:	1a51      	subs	r1, r2, r1
 8003c9c:	910e      	str	r1, [sp, #56]	; 0x38
 8003c9e:	e48d      	b.n	80035bc <_svfprintf_r+0x23c>
 8003ca0:	23cf      	movs	r3, #207	; 0xcf
 8003ca2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003ca4:	446b      	add	r3, sp
 8003ca6:	3430      	adds	r4, #48	; 0x30
 8003ca8:	701c      	strb	r4, [r3, #0]
 8003caa:	900e      	str	r0, [sp, #56]	; 0x38
 8003cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8003cae:	e485      	b.n	80035bc <_svfprintf_r+0x23c>
 8003cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	1c1a      	adds	r2, r3, #0
 8003cba:	3208      	adds	r2, #8
 8003cbc:	9210      	str	r2, [sp, #64]	; 0x40
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	1c02      	adds	r2, r0, #0
 8003cc4:	1c0b      	adds	r3, r1, #0
 8003cc6:	4681      	mov	r9, r0
 8003cc8:	4688      	mov	r8, r1
 8003cca:	9218      	str	r2, [sp, #96]	; 0x60
 8003ccc:	9319      	str	r3, [sp, #100]	; 0x64
 8003cce:	f002 fed7 	bl	8006a80 <__fpclassifyd>
 8003cd2:	2801      	cmp	r0, #1
 8003cd4:	d000      	beq.n	8003cd8 <_svfprintf_r+0x958>
 8003cd6:	e242      	b.n	800415e <_svfprintf_r+0xdde>
 8003cd8:	4648      	mov	r0, r9
 8003cda:	4641      	mov	r1, r8
 8003cdc:	4bc5      	ldr	r3, [pc, #788]	; (8003ff4 <_svfprintf_r+0xc74>)
 8003cde:	4ac4      	ldr	r2, [pc, #784]	; (8003ff0 <_svfprintf_r+0xc70>)
 8003ce0:	f004 ece8 	blx	80086b4 <__aeabi_dcmplt>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d001      	beq.n	8003cec <_svfprintf_r+0x96c>
 8003ce8:	f000 fc27 	bl	800453a <_svfprintf_r+0x11ba>
 8003cec:	227b      	movs	r2, #123	; 0x7b
 8003cee:	446a      	add	r2, sp
 8003cf0:	7813      	ldrb	r3, [r2, #0]
 8003cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cf4:	2947      	cmp	r1, #71	; 0x47
 8003cf6:	dd00      	ble.n	8003cfa <_svfprintf_r+0x97a>
 8003cf8:	e300      	b.n	80042fc <_svfprintf_r+0xf7c>
 8003cfa:	4abf      	ldr	r2, [pc, #764]	; (8003ff8 <_svfprintf_r+0xc78>)
 8003cfc:	9213      	str	r2, [sp, #76]	; 0x4c
 8003cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	4391      	bics	r1, r2
 8003d04:	2203      	movs	r2, #3
 8003d06:	910a      	str	r1, [sp, #40]	; 0x28
 8003d08:	920d      	str	r2, [sp, #52]	; 0x34
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2200      	movs	r2, #0
 8003d10:	900e      	str	r0, [sp, #56]	; 0x38
 8003d12:	9114      	str	r1, [sp, #80]	; 0x50
 8003d14:	9216      	str	r2, [sp, #88]	; 0x58
 8003d16:	e45e      	b.n	80035d6 <_svfprintf_r+0x256>
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	4662      	mov	r2, ip
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d20:	f7ff fb9e 	bl	8003460 <_svfprintf_r+0xe0>
 8003d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d26:	9709      	str	r7, [sp, #36]	; 0x24
 8003d28:	2200      	movs	r2, #0
 8003d2a:	3b30      	subs	r3, #48	; 0x30
 8003d2c:	0097      	lsls	r7, r2, #2
 8003d2e:	18ba      	adds	r2, r7, r2
 8003d30:	782f      	ldrb	r7, [r5, #0]
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	18d2      	adds	r2, r2, r3
 8003d36:	1c3b      	adds	r3, r7, #0
 8003d38:	3b30      	subs	r3, #48	; 0x30
 8003d3a:	3501      	adds	r5, #1
 8003d3c:	2b09      	cmp	r3, #9
 8003d3e:	d9f5      	bls.n	8003d2c <_svfprintf_r+0x9ac>
 8003d40:	970c      	str	r7, [sp, #48]	; 0x30
 8003d42:	9211      	str	r2, [sp, #68]	; 0x44
 8003d44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d46:	f7ff fb8e 	bl	8003466 <_svfprintf_r+0xe6>
 8003d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	930a      	str	r3, [sp, #40]	; 0x28
 8003d52:	f7ff fb85 	bl	8003460 <_svfprintf_r+0xe0>
 8003d56:	4aa9      	ldr	r2, [pc, #676]	; (8003ffc <_svfprintf_r+0xc7c>)
 8003d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d5a:	921c      	str	r2, [sp, #112]	; 0x70
 8003d5c:	06db      	lsls	r3, r3, #27
 8003d5e:	d400      	bmi.n	8003d62 <_svfprintf_r+0x9e2>
 8003d60:	e08b      	b.n	8003e7a <_svfprintf_r+0xafa>
 8003d62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d64:	6804      	ldr	r4, [r0, #0]
 8003d66:	3004      	adds	r0, #4
 8003d68:	9010      	str	r0, [sp, #64]	; 0x40
 8003d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d6c:	07c0      	lsls	r0, r0, #31
 8003d6e:	d500      	bpl.n	8003d72 <_svfprintf_r+0x9f2>
 8003d70:	e122      	b.n	8003fb8 <_svfprintf_r+0xc38>
 8003d72:	1c21      	adds	r1, r4, #0
 8003d74:	1e4b      	subs	r3, r1, #1
 8003d76:	4199      	sbcs	r1, r3
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f7ff fba1 	bl	80034c0 <_svfprintf_r+0x140>
 8003d7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d80:	1c13      	adds	r3, r2, #0
 8003d82:	3304      	adds	r3, #4
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	9310      	str	r3, [sp, #64]	; 0x40
 8003d88:	ab2a      	add	r3, sp, #168	; 0xa8
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	f7ff fb76 	bl	800347c <_svfprintf_r+0xfc>
 8003d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d92:	06db      	lsls	r3, r3, #27
 8003d94:	d500      	bpl.n	8003d98 <_svfprintf_r+0xa18>
 8003d96:	e11e      	b.n	8003fd6 <_svfprintf_r+0xc56>
 8003d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d9a:	0652      	lsls	r2, r2, #25
 8003d9c:	d400      	bmi.n	8003da0 <_svfprintf_r+0xa20>
 8003d9e:	e11a      	b.n	8003fd6 <_svfprintf_r+0xc56>
 8003da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003da2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003da8:	3204      	adds	r2, #4
 8003daa:	8019      	strh	r1, [r3, #0]
 8003dac:	9210      	str	r2, [sp, #64]	; 0x40
 8003dae:	f7ff fb1c 	bl	80033ea <_svfprintf_r+0x6a>
 8003db2:	227b      	movs	r2, #123	; 0x7b
 8003db4:	446a      	add	r2, sp
 8003db6:	7813      	ldrb	r3, [r2, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <_svfprintf_r+0xa40>
 8003dbc:	f7ff fb50 	bl	8003460 <_svfprintf_r+0xe0>
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	7013      	strb	r3, [r2, #0]
 8003dc4:	f7ff fb4c 	bl	8003460 <_svfprintf_r+0xe0>
 8003dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dca:	2301      	movs	r3, #1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	920a      	str	r2, [sp, #40]	; 0x28
 8003dd0:	f7ff fb46 	bl	8003460 <_svfprintf_r+0xe0>
 8003dd4:	237b      	movs	r3, #123	; 0x7b
 8003dd6:	446b      	add	r3, sp
 8003dd8:	701c      	strb	r4, [r3, #0]
 8003dda:	f7ff fb41 	bl	8003460 <_svfprintf_r+0xe0>
 8003dde:	217b      	movs	r1, #123	; 0x7b
 8003de0:	2300      	movs	r3, #0
 8003de2:	4469      	add	r1, sp
 8003de4:	700b      	strb	r3, [r1, #0]
 8003de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003de8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	3404      	adds	r4, #4
 8003dee:	9213      	str	r2, [sp, #76]	; 0x4c
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d100      	bne.n	8003df6 <_svfprintf_r+0xa76>
 8003df4:	e31c      	b.n	8004430 <_svfprintf_r+0x10b0>
 8003df6:	4652      	mov	r2, sl
 8003df8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	da00      	bge.n	8003e00 <_svfprintf_r+0xa80>
 8003dfe:	e2c5      	b.n	800438c <_svfprintf_r+0x100c>
 8003e00:	2100      	movs	r1, #0
 8003e02:	f002 f8fb 	bl	8005ffc <memchr>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d100      	bne.n	8003e0c <_svfprintf_r+0xa8c>
 8003e0a:	e3a0      	b.n	800454e <_svfprintf_r+0x11ce>
 8003e0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003e0e:	1a40      	subs	r0, r0, r1
 8003e10:	900e      	str	r0, [sp, #56]	; 0x38
 8003e12:	4550      	cmp	r0, sl
 8003e14:	dc00      	bgt.n	8003e18 <_svfprintf_r+0xa98>
 8003e16:	e1de      	b.n	80041d6 <_svfprintf_r+0xe56>
 8003e18:	4652      	mov	r2, sl
 8003e1a:	207b      	movs	r0, #123	; 0x7b
 8003e1c:	4653      	mov	r3, sl
 8003e1e:	4468      	add	r0, sp
 8003e20:	920e      	str	r2, [sp, #56]	; 0x38
 8003e22:	2100      	movs	r1, #0
 8003e24:	2200      	movs	r2, #0
 8003e26:	930d      	str	r3, [sp, #52]	; 0x34
 8003e28:	9410      	str	r4, [sp, #64]	; 0x40
 8003e2a:	7803      	ldrb	r3, [r0, #0]
 8003e2c:	9114      	str	r1, [sp, #80]	; 0x50
 8003e2e:	9216      	str	r2, [sp, #88]	; 0x58
 8003e30:	f7ff fbd1 	bl	80035d6 <_svfprintf_r+0x256>
 8003e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	1c19      	adds	r1, r3, #0
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	3104      	adds	r1, #4
 8003e42:	ab1f      	add	r3, sp, #124	; 0x7c
 8003e44:	920a      	str	r2, [sp, #40]	; 0x28
 8003e46:	2230      	movs	r2, #48	; 0x30
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	9110      	str	r1, [sp, #64]	; 0x40
 8003e4c:	2278      	movs	r2, #120	; 0x78
 8003e4e:	1c21      	adds	r1, r4, #0
 8003e50:	705a      	strb	r2, [r3, #1]
 8003e52:	1e4b      	subs	r3, r1, #1
 8003e54:	4199      	sbcs	r1, r3
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <_svfprintf_r+0xc80>)
 8003e58:	2078      	movs	r0, #120	; 0x78
 8003e5a:	931c      	str	r3, [sp, #112]	; 0x70
 8003e5c:	900c      	str	r0, [sp, #48]	; 0x30
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f7ff fb2e 	bl	80034c0 <_svfprintf_r+0x140>
 8003e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e66:	4302      	orrs	r2, r0
 8003e68:	920a      	str	r2, [sp, #40]	; 0x28
 8003e6a:	f7ff faf9 	bl	8003460 <_svfprintf_r+0xe0>
 8003e6e:	4964      	ldr	r1, [pc, #400]	; (8004000 <_svfprintf_r+0xc80>)
 8003e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e72:	911c      	str	r1, [sp, #112]	; 0x70
 8003e74:	06db      	lsls	r3, r3, #27
 8003e76:	d500      	bpl.n	8003e7a <_svfprintf_r+0xafa>
 8003e78:	e773      	b.n	8003d62 <_svfprintf_r+0x9e2>
 8003e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e7c:	0649      	lsls	r1, r1, #25
 8003e7e:	d400      	bmi.n	8003e82 <_svfprintf_r+0xb02>
 8003e80:	e195      	b.n	80041ae <_svfprintf_r+0xe2e>
 8003e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e84:	8814      	ldrh	r4, [r2, #0]
 8003e86:	3204      	adds	r2, #4
 8003e88:	9210      	str	r2, [sp, #64]	; 0x40
 8003e8a:	e76e      	b.n	8003d6a <_svfprintf_r+0x9ea>
 8003e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e8e:	464a      	mov	r2, r9
 8003e90:	4313      	orrs	r3, r2
 8003e92:	930a      	str	r3, [sp, #40]	; 0x28
 8003e94:	f7ff fae4 	bl	8003460 <_svfprintf_r+0xe0>
 8003e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e9a:	4303      	orrs	r3, r0
 8003e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e9e:	f7ff fadf 	bl	8003460 <_svfprintf_r+0xe0>
 8003ea2:	782a      	ldrb	r2, [r5, #0]
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	920c      	str	r2, [sp, #48]	; 0x30
 8003ea8:	2a2a      	cmp	r2, #42	; 0x2a
 8003eaa:	d101      	bne.n	8003eb0 <_svfprintf_r+0xb30>
 8003eac:	f000 fc05 	bl	80046ba <_svfprintf_r+0x133a>
 8003eb0:	1c13      	adds	r3, r2, #0
 8003eb2:	3b30      	subs	r3, #48	; 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4692      	mov	sl, r2
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d901      	bls.n	8003ec0 <_svfprintf_r+0xb40>
 8003ebc:	f7ff fad3 	bl	8003466 <_svfprintf_r+0xe6>
 8003ec0:	46ba      	mov	sl, r7
 8003ec2:	0097      	lsls	r7, r2, #2
 8003ec4:	18ba      	adds	r2, r7, r2
 8003ec6:	782f      	ldrb	r7, [r5, #0]
 8003ec8:	0052      	lsls	r2, r2, #1
 8003eca:	189a      	adds	r2, r3, r2
 8003ecc:	1c3b      	adds	r3, r7, #0
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	3501      	adds	r5, #1
 8003ed2:	2b09      	cmp	r3, #9
 8003ed4:	d9f5      	bls.n	8003ec2 <_svfprintf_r+0xb42>
 8003ed6:	970c      	str	r7, [sp, #48]	; 0x30
 8003ed8:	4657      	mov	r7, sl
 8003eda:	4692      	mov	sl, r2
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	db01      	blt.n	8003ee4 <_svfprintf_r+0xb64>
 8003ee0:	f7ff fac1 	bl	8003466 <_svfprintf_r+0xe6>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	425b      	negs	r3, r3
 8003ee8:	469a      	mov	sl, r3
 8003eea:	f7ff fabc 	bl	8003466 <_svfprintf_r+0xe6>
 8003eee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	1c32      	adds	r2, r6, #0
 8003ef4:	f002 fe18 	bl	8006b28 <__ssprint_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d000      	beq.n	8003efe <_svfprintf_r+0xb7e>
 8003efc:	e5d1      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003efe:	af34      	add	r7, sp, #208	; 0xd0
 8003f00:	e4bf      	b.n	8003882 <_svfprintf_r+0x502>
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <_svfprintf_r+0xc84>)
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	68b3      	ldr	r3, [r6, #8]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60b3      	str	r3, [r6, #8]
 8003f10:	6873      	ldr	r3, [r6, #4]
 8003f12:	3301      	adds	r3, #1
 8003f14:	6073      	str	r3, [r6, #4]
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	dd00      	ble.n	8003f1c <_svfprintf_r+0xb9c>
 8003f1a:	e203      	b.n	8004324 <_svfprintf_r+0xfa4>
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	d107      	bne.n	8003f32 <_svfprintf_r+0xbb2>
 8003f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d104      	bne.n	8003f32 <_svfprintf_r+0xbb2>
 8003f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2a:	07db      	lsls	r3, r3, #31
 8003f2c:	d401      	bmi.n	8003f32 <_svfprintf_r+0xbb2>
 8003f2e:	f7ff fc1b 	bl	8003768 <_svfprintf_r+0x3e8>
 8003f32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f34:	68b2      	ldr	r2, [r6, #8]
 8003f36:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003f38:	188b      	adds	r3, r1, r2
 8003f3a:	6038      	str	r0, [r7, #0]
 8003f3c:	6079      	str	r1, [r7, #4]
 8003f3e:	60b3      	str	r3, [r6, #8]
 8003f40:	6873      	ldr	r3, [r6, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	6073      	str	r3, [r6, #4]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	dd00      	ble.n	8003f4c <_svfprintf_r+0xbcc>
 8003f4a:	e30d      	b.n	8004568 <_svfprintf_r+0x11e8>
 8003f4c:	1c3b      	adds	r3, r7, #0
 8003f4e:	3308      	adds	r3, #8
 8003f50:	4264      	negs	r4, r4
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	dc00      	bgt.n	8003f58 <_svfprintf_r+0xbd8>
 8003f56:	e207      	b.n	8004368 <_svfprintf_r+0xfe8>
 8003f58:	2c10      	cmp	r4, #16
 8003f5a:	dc00      	bgt.n	8003f5e <_svfprintf_r+0xbde>
 8003f5c:	e3aa      	b.n	80046b4 <_svfprintf_r+0x1334>
 8003f5e:	492a      	ldr	r1, [pc, #168]	; (8004008 <_svfprintf_r+0xc88>)
 8003f60:	2210      	movs	r2, #16
 8003f62:	4688      	mov	r8, r1
 8003f64:	4691      	mov	r9, r2
 8003f66:	46aa      	mov	sl, r5
 8003f68:	44c1      	add	r9, r8
 8003f6a:	2710      	movs	r7, #16
 8003f6c:	465d      	mov	r5, fp
 8003f6e:	e004      	b.n	8003f7a <_svfprintf_r+0xbfa>
 8003f70:	3308      	adds	r3, #8
 8003f72:	3c10      	subs	r4, #16
 8003f74:	2c10      	cmp	r4, #16
 8003f76:	dc00      	bgt.n	8003f7a <_svfprintf_r+0xbfa>
 8003f78:	e1e6      	b.n	8004348 <_svfprintf_r+0xfc8>
 8003f7a:	68b2      	ldr	r2, [r6, #8]
 8003f7c:	4648      	mov	r0, r9
 8003f7e:	3210      	adds	r2, #16
 8003f80:	6018      	str	r0, [r3, #0]
 8003f82:	605f      	str	r7, [r3, #4]
 8003f84:	60b2      	str	r2, [r6, #8]
 8003f86:	6872      	ldr	r2, [r6, #4]
 8003f88:	3201      	adds	r2, #1
 8003f8a:	6072      	str	r2, [r6, #4]
 8003f8c:	2a07      	cmp	r2, #7
 8003f8e:	ddef      	ble.n	8003f70 <_svfprintf_r+0xbf0>
 8003f90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f92:	1c29      	adds	r1, r5, #0
 8003f94:	1c32      	adds	r2, r6, #0
 8003f96:	f002 fdc7 	bl	8006b28 <__ssprint_r>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d123      	bne.n	8003fe6 <_svfprintf_r+0xc66>
 8003f9e:	ab34      	add	r3, sp, #208	; 0xd0
 8003fa0:	e7e7      	b.n	8003f72 <_svfprintf_r+0xbf2>
 8003fa2:	68b3      	ldr	r3, [r6, #8]
 8003fa4:	46d9      	mov	r9, fp
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d100      	bne.n	8003fac <_svfprintf_r+0xc2c>
 8003faa:	e4af      	b.n	800390c <_svfprintf_r+0x58c>
 8003fac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fae:	4659      	mov	r1, fp
 8003fb0:	1c32      	adds	r2, r6, #0
 8003fb2:	f002 fdb9 	bl	8006b28 <__ssprint_r>
 8003fb6:	e4a9      	b.n	800390c <_svfprintf_r+0x58c>
 8003fb8:	2c00      	cmp	r4, #0
 8003fba:	d100      	bne.n	8003fbe <_svfprintf_r+0xc3e>
 8003fbc:	e0cb      	b.n	8004156 <_svfprintf_r+0xdd6>
 8003fbe:	ab1f      	add	r3, sp, #124	; 0x7c
 8003fc0:	2230      	movs	r2, #48	; 0x30
 8003fc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc8:	7059      	strb	r1, [r3, #1]
 8003fca:	2302      	movs	r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	920a      	str	r2, [sp, #40]	; 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	f7ff fa75 	bl	80034c0 <_svfprintf_r+0x140>
 8003fd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	3004      	adds	r0, #4
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	9010      	str	r0, [sp, #64]	; 0x40
 8003fe2:	f7ff fa02 	bl	80033ea <_svfprintf_r+0x6a>
 8003fe6:	46a9      	mov	r9, r5
 8003fe8:	e490      	b.n	800390c <_svfprintf_r+0x58c>
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46c0      	nop			; (mov r8, r8)
	...
 8003ff8:	0800902c 	.word	0x0800902c
 8003ffc:	0800903c 	.word	0x0800903c
 8004000:	08009050 	.word	0x08009050
 8004004:	0800906c 	.word	0x0800906c
 8004008:	08008c44 	.word	0x08008c44
 800400c:	465d      	mov	r5, fp
 800400e:	46bb      	mov	fp, r7
 8004010:	1c1f      	adds	r7, r3, #0
 8004012:	4643      	mov	r3, r8
 8004014:	3310      	adds	r3, #16
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	68b1      	ldr	r1, [r6, #8]
 800401a:	6873      	ldr	r3, [r6, #4]
 800401c:	607c      	str	r4, [r7, #4]
 800401e:	3301      	adds	r3, #1
 8004020:	190c      	adds	r4, r1, r4
 8004022:	60b4      	str	r4, [r6, #8]
 8004024:	6073      	str	r3, [r6, #4]
 8004026:	2b07      	cmp	r3, #7
 8004028:	dd00      	ble.n	800402c <_svfprintf_r+0xcac>
 800402a:	e1e7      	b.n	80043fc <_svfprintf_r+0x107c>
 800402c:	3708      	adds	r7, #8
 800402e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004030:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004032:	4690      	mov	r8, r2
 8004034:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004036:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004038:	4490      	add	r8, r2
 800403a:	4283      	cmp	r3, r0
 800403c:	db4b      	blt.n	80040d6 <_svfprintf_r+0xd56>
 800403e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004040:	07c9      	lsls	r1, r1, #31
 8004042:	d448      	bmi.n	80040d6 <_svfprintf_r+0xd56>
 8004044:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004046:	4641      	mov	r1, r8
 8004048:	1a42      	subs	r2, r0, r1
 800404a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800404c:	1ac3      	subs	r3, r0, r3
 800404e:	1c1c      	adds	r4, r3, #0
 8004050:	4293      	cmp	r3, r2
 8004052:	dd00      	ble.n	8004056 <_svfprintf_r+0xcd6>
 8004054:	1c14      	adds	r4, r2, #0
 8004056:	2c00      	cmp	r4, #0
 8004058:	dd0c      	ble.n	8004074 <_svfprintf_r+0xcf4>
 800405a:	68b0      	ldr	r0, [r6, #8]
 800405c:	4641      	mov	r1, r8
 800405e:	1902      	adds	r2, r0, r4
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	607c      	str	r4, [r7, #4]
 8004064:	60b2      	str	r2, [r6, #8]
 8004066:	6872      	ldr	r2, [r6, #4]
 8004068:	3201      	adds	r2, #1
 800406a:	6072      	str	r2, [r6, #4]
 800406c:	2a07      	cmp	r2, #7
 800406e:	dd00      	ble.n	8004072 <_svfprintf_r+0xcf2>
 8004070:	e1a0      	b.n	80043b4 <_svfprintf_r+0x1034>
 8004072:	3708      	adds	r7, #8
 8004074:	43e2      	mvns	r2, r4
 8004076:	17d2      	asrs	r2, r2, #31
 8004078:	4014      	ands	r4, r2
 800407a:	1b1c      	subs	r4, r3, r4
 800407c:	2c00      	cmp	r4, #0
 800407e:	dc01      	bgt.n	8004084 <_svfprintf_r+0xd04>
 8004080:	f7ff fb72 	bl	8003768 <_svfprintf_r+0x3e8>
 8004084:	2c10      	cmp	r4, #16
 8004086:	dc00      	bgt.n	800408a <_svfprintf_r+0xd0a>
 8004088:	e30e      	b.n	80046a8 <_svfprintf_r+0x1328>
 800408a:	48e5      	ldr	r0, [pc, #916]	; (8004420 <_svfprintf_r+0x10a0>)
 800408c:	2110      	movs	r1, #16
 800408e:	4680      	mov	r8, r0
 8004090:	468a      	mov	sl, r1
 8004092:	1c3b      	adds	r3, r7, #0
 8004094:	44c2      	add	sl, r8
 8004096:	465f      	mov	r7, fp
 8004098:	4689      	mov	r9, r1
 800409a:	46ab      	mov	fp, r5
 800409c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800409e:	e004      	b.n	80040aa <_svfprintf_r+0xd2a>
 80040a0:	3308      	adds	r3, #8
 80040a2:	3c10      	subs	r4, #16
 80040a4:	2c10      	cmp	r4, #16
 80040a6:	dc00      	bgt.n	80040aa <_svfprintf_r+0xd2a>
 80040a8:	e086      	b.n	80041b8 <_svfprintf_r+0xe38>
 80040aa:	68b2      	ldr	r2, [r6, #8]
 80040ac:	4650      	mov	r0, sl
 80040ae:	3210      	adds	r2, #16
 80040b0:	4649      	mov	r1, r9
 80040b2:	6018      	str	r0, [r3, #0]
 80040b4:	6059      	str	r1, [r3, #4]
 80040b6:	60b2      	str	r2, [r6, #8]
 80040b8:	6872      	ldr	r2, [r6, #4]
 80040ba:	3201      	adds	r2, #1
 80040bc:	6072      	str	r2, [r6, #4]
 80040be:	2a07      	cmp	r2, #7
 80040c0:	ddee      	ble.n	80040a0 <_svfprintf_r+0xd20>
 80040c2:	1c28      	adds	r0, r5, #0
 80040c4:	1c39      	adds	r1, r7, #0
 80040c6:	1c32      	adds	r2, r6, #0
 80040c8:	f002 fd2e 	bl	8006b28 <__ssprint_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d000      	beq.n	80040d2 <_svfprintf_r+0xd52>
 80040d0:	e41b      	b.n	800390a <_svfprintf_r+0x58a>
 80040d2:	ab34      	add	r3, sp, #208	; 0xd0
 80040d4:	e7e5      	b.n	80040a2 <_svfprintf_r+0xd22>
 80040d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80040d8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80040da:	68b1      	ldr	r1, [r6, #8]
 80040dc:	603a      	str	r2, [r7, #0]
 80040de:	1842      	adds	r2, r0, r1
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	60b2      	str	r2, [r6, #8]
 80040e4:	6872      	ldr	r2, [r6, #4]
 80040e6:	3201      	adds	r2, #1
 80040e8:	6072      	str	r2, [r6, #4]
 80040ea:	2a07      	cmp	r2, #7
 80040ec:	dd00      	ble.n	80040f0 <_svfprintf_r+0xd70>
 80040ee:	e16f      	b.n	80043d0 <_svfprintf_r+0x1050>
 80040f0:	3708      	adds	r7, #8
 80040f2:	e7a7      	b.n	8004044 <_svfprintf_r+0xcc4>
 80040f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040f6:	2301      	movs	r3, #1
 80040f8:	4203      	tst	r3, r0
 80040fa:	d000      	beq.n	80040fe <_svfprintf_r+0xd7e>
 80040fc:	e45d      	b.n	80039ba <_svfprintf_r+0x63a>
 80040fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	68b3      	ldr	r3, [r6, #8]
 8004104:	6038      	str	r0, [r7, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	e592      	b.n	8003c30 <_svfprintf_r+0x8b0>
 800410a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800410c:	4659      	mov	r1, fp
 800410e:	1c32      	adds	r2, r6, #0
 8004110:	f002 fd0a 	bl	8006b28 <__ssprint_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	d000      	beq.n	800411a <_svfprintf_r+0xd9a>
 8004118:	e4c3      	b.n	8003aa2 <_svfprintf_r+0x722>
 800411a:	af34      	add	r7, sp, #208	; 0xd0
 800411c:	e469      	b.n	80039f2 <_svfprintf_r+0x672>
 800411e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004120:	4659      	mov	r1, fp
 8004122:	1c32      	adds	r2, r6, #0
 8004124:	f002 fd00 	bl	8006b28 <__ssprint_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	d000      	beq.n	800412e <_svfprintf_r+0xdae>
 800412c:	e4b9      	b.n	8003aa2 <_svfprintf_r+0x722>
 800412e:	af34      	add	r7, sp, #208	; 0xd0
 8004130:	e451      	b.n	80039d6 <_svfprintf_r+0x656>
 8004132:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004134:	4659      	mov	r1, fp
 8004136:	1c32      	adds	r2, r6, #0
 8004138:	f002 fcf6 	bl	8006b28 <__ssprint_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	d000      	beq.n	8004142 <_svfprintf_r+0xdc2>
 8004140:	e4af      	b.n	8003aa2 <_svfprintf_r+0x722>
 8004142:	af34      	add	r7, sp, #208	; 0xd0
 8004144:	f7ff fabe 	bl	80036c4 <_svfprintf_r+0x344>
 8004148:	207b      	movs	r0, #123	; 0x7b
 800414a:	232d      	movs	r3, #45	; 0x2d
 800414c:	4468      	add	r0, sp
 800414e:	4264      	negs	r4, r4
 8004150:	7003      	strb	r3, [r0, #0]
 8004152:	f7ff fa10 	bl	8003576 <_svfprintf_r+0x1f6>
 8004156:	2100      	movs	r1, #0
 8004158:	2302      	movs	r3, #2
 800415a:	f7ff f9b1 	bl	80034c0 <_svfprintf_r+0x140>
 800415e:	4648      	mov	r0, r9
 8004160:	4641      	mov	r1, r8
 8004162:	f002 fc8d 	bl	8006a80 <__fpclassifyd>
 8004166:	2800      	cmp	r0, #0
 8004168:	d144      	bne.n	80041f4 <_svfprintf_r+0xe74>
 800416a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800416c:	2b47      	cmp	r3, #71	; 0x47
 800416e:	dc00      	bgt.n	8004172 <_svfprintf_r+0xdf2>
 8004170:	e0d5      	b.n	800431e <_svfprintf_r+0xf9e>
 8004172:	49ac      	ldr	r1, [pc, #688]	; (8004424 <_svfprintf_r+0x10a4>)
 8004174:	9113      	str	r1, [sp, #76]	; 0x4c
 8004176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	207b      	movs	r0, #123	; 0x7b
 800417c:	439a      	bics	r2, r3
 800417e:	4468      	add	r0, sp
 8004180:	2103      	movs	r1, #3
 8004182:	920a      	str	r2, [sp, #40]	; 0x28
 8004184:	7803      	ldrb	r3, [r0, #0]
 8004186:	910d      	str	r1, [sp, #52]	; 0x34
 8004188:	2203      	movs	r2, #3
 800418a:	2000      	movs	r0, #0
 800418c:	2100      	movs	r1, #0
 800418e:	920e      	str	r2, [sp, #56]	; 0x38
 8004190:	9014      	str	r0, [sp, #80]	; 0x50
 8004192:	9116      	str	r1, [sp, #88]	; 0x58
 8004194:	f7ff fa1f 	bl	80035d6 <_svfprintf_r+0x256>
 8004198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800419a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800419c:	681c      	ldr	r4, [r3, #0]
 800419e:	3004      	adds	r0, #4
 80041a0:	1c21      	adds	r1, r4, #0
 80041a2:	1e4b      	subs	r3, r1, #1
 80041a4:	4199      	sbcs	r1, r3
 80041a6:	9010      	str	r0, [sp, #64]	; 0x40
 80041a8:	2300      	movs	r3, #0
 80041aa:	f7ff f989 	bl	80034c0 <_svfprintf_r+0x140>
 80041ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	3304      	adds	r3, #4
 80041b4:	9310      	str	r3, [sp, #64]	; 0x40
 80041b6:	e5d8      	b.n	8003d6a <_svfprintf_r+0x9ea>
 80041b8:	465d      	mov	r5, fp
 80041ba:	46bb      	mov	fp, r7
 80041bc:	1c1f      	adds	r7, r3, #0
 80041be:	4643      	mov	r3, r8
 80041c0:	68b2      	ldr	r2, [r6, #8]
 80041c2:	3310      	adds	r3, #16
 80041c4:	607c      	str	r4, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	1914      	adds	r4, r2, r4
 80041ca:	f7ff fb2f 	bl	800382c <_svfprintf_r+0x4ac>
 80041ce:	4a94      	ldr	r2, [pc, #592]	; (8004420 <_svfprintf_r+0x10a0>)
 80041d0:	4690      	mov	r8, r2
 80041d2:	f7ff faaa 	bl	800372a <_svfprintf_r+0x3aa>
 80041d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80041d8:	43c3      	mvns	r3, r0
 80041da:	17db      	asrs	r3, r3, #31
 80041dc:	4018      	ands	r0, r3
 80041de:	217b      	movs	r1, #123	; 0x7b
 80041e0:	900d      	str	r0, [sp, #52]	; 0x34
 80041e2:	4469      	add	r1, sp
 80041e4:	2200      	movs	r2, #0
 80041e6:	2000      	movs	r0, #0
 80041e8:	780b      	ldrb	r3, [r1, #0]
 80041ea:	9410      	str	r4, [sp, #64]	; 0x40
 80041ec:	9214      	str	r2, [sp, #80]	; 0x50
 80041ee:	9016      	str	r0, [sp, #88]	; 0x58
 80041f0:	f7ff f9f1 	bl	80035d6 <_svfprintf_r+0x256>
 80041f4:	4652      	mov	r2, sl
 80041f6:	2320      	movs	r3, #32
 80041f8:	3201      	adds	r2, #1
 80041fa:	d100      	bne.n	80041fe <_svfprintf_r+0xe7e>
 80041fc:	e09e      	b.n	800433c <_svfprintf_r+0xfbc>
 80041fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004200:	439a      	bics	r2, r3
 8004202:	9209      	str	r2, [sp, #36]	; 0x24
 8004204:	2a47      	cmp	r2, #71	; 0x47
 8004206:	d104      	bne.n	8004212 <_svfprintf_r+0xe92>
 8004208:	4653      	mov	r3, sl
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <_svfprintf_r+0xe92>
 800420e:	2001      	movs	r0, #1
 8004210:	4682      	mov	sl, r0
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4319      	orrs	r1, r3
 800421a:	2000      	movs	r0, #0
 800421c:	4643      	mov	r3, r8
 800421e:	9112      	str	r1, [sp, #72]	; 0x48
 8004220:	9014      	str	r0, [sp, #80]	; 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	da00      	bge.n	8004228 <_svfprintf_r+0xea8>
 8004226:	e1ab      	b.n	8004580 <_svfprintf_r+0x1200>
 8004228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422a:	3b46      	subs	r3, #70	; 0x46
 800422c:	4258      	negs	r0, r3
 800422e:	4158      	adcs	r0, r3
 8004230:	900d      	str	r0, [sp, #52]	; 0x34
 8004232:	2800      	cmp	r0, #0
 8004234:	d000      	beq.n	8004238 <_svfprintf_r+0xeb8>
 8004236:	e117      	b.n	8004468 <_svfprintf_r+0x10e8>
 8004238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800423a:	2945      	cmp	r1, #69	; 0x45
 800423c:	d000      	beq.n	8004240 <_svfprintf_r+0xec0>
 800423e:	e1a5      	b.n	800458c <_svfprintf_r+0x120c>
 8004240:	2302      	movs	r3, #2
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	ab20      	add	r3, sp, #128	; 0x80
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	4654      	mov	r4, sl
 800424a:	ab21      	add	r3, sp, #132	; 0x84
 800424c:	3401      	adds	r4, #1
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	ab22      	add	r3, sp, #136	; 0x88
 8004252:	9401      	str	r4, [sp, #4]
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004258:	464a      	mov	r2, r9
 800425a:	4643      	mov	r3, r8
 800425c:	f000 fb0c 	bl	8004878 <_dtoa_r>
 8004260:	9013      	str	r0, [sp, #76]	; 0x4c
 8004262:	1904      	adds	r4, r0, r4
 8004264:	4648      	mov	r0, r9
 8004266:	4641      	mov	r1, r8
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <_svfprintf_r+0x109c>)
 800426a:	4a6b      	ldr	r2, [pc, #428]	; (8004418 <_svfprintf_r+0x1098>)
 800426c:	f004 ea16 	blx	800869c <__aeabi_dcmpeq>
 8004270:	2800      	cmp	r0, #0
 8004272:	d109      	bne.n	8004288 <_svfprintf_r+0xf08>
 8004274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004276:	429c      	cmp	r4, r3
 8004278:	d800      	bhi.n	800427c <_svfprintf_r+0xefc>
 800427a:	e244      	b.n	8004706 <_svfprintf_r+0x1386>
 800427c:	2230      	movs	r2, #48	; 0x30
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	9322      	str	r3, [sp, #136]	; 0x88
 8004284:	42a3      	cmp	r3, r4
 8004286:	d1fa      	bne.n	800427e <_svfprintf_r+0xefe>
 8004288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800428a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428c:	1ae4      	subs	r4, r4, r3
 800428e:	9415      	str	r4, [sp, #84]	; 0x54
 8004290:	2847      	cmp	r0, #71	; 0x47
 8004292:	d100      	bne.n	8004296 <_svfprintf_r+0xf16>
 8004294:	e11d      	b.n	80044d2 <_svfprintf_r+0x1152>
 8004296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004298:	2b65      	cmp	r3, #101	; 0x65
 800429a:	dc00      	bgt.n	800429e <_svfprintf_r+0xf1e>
 800429c:	e226      	b.n	80046ec <_svfprintf_r+0x136c>
 800429e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042a2:	2a66      	cmp	r2, #102	; 0x66
 80042a4:	d100      	bne.n	80042a8 <_svfprintf_r+0xf28>
 80042a6:	e182      	b.n	80045ae <_svfprintf_r+0x122e>
 80042a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80042aa:	428b      	cmp	r3, r1
 80042ac:	da00      	bge.n	80042b0 <_svfprintf_r+0xf30>
 80042ae:	e16f      	b.n	8004590 <_svfprintf_r+0x1210>
 80042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042b2:	07d2      	lsls	r2, r2, #31
 80042b4:	d500      	bpl.n	80042b8 <_svfprintf_r+0xf38>
 80042b6:	e1ca      	b.n	800464e <_svfprintf_r+0x12ce>
 80042b8:	43da      	mvns	r2, r3
 80042ba:	17d2      	asrs	r2, r2, #31
 80042bc:	401a      	ands	r2, r3
 80042be:	2067      	movs	r0, #103	; 0x67
 80042c0:	920d      	str	r2, [sp, #52]	; 0x34
 80042c2:	930e      	str	r3, [sp, #56]	; 0x38
 80042c4:	900c      	str	r0, [sp, #48]	; 0x30
 80042c6:	9316      	str	r3, [sp, #88]	; 0x58
 80042c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d100      	bne.n	80042d0 <_svfprintf_r+0xf50>
 80042ce:	e0c2      	b.n	8004456 <_svfprintf_r+0x10d6>
 80042d0:	207b      	movs	r0, #123	; 0x7b
 80042d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80042d4:	232d      	movs	r3, #45	; 0x2d
 80042d6:	4468      	add	r0, sp
 80042d8:	2200      	movs	r2, #0
 80042da:	7003      	strb	r3, [r0, #0]
 80042dc:	910a      	str	r1, [sp, #40]	; 0x28
 80042de:	9214      	str	r2, [sp, #80]	; 0x50
 80042e0:	f7ff f97b 	bl	80035da <_svfprintf_r+0x25a>
 80042e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042e6:	4659      	mov	r1, fp
 80042e8:	1c32      	adds	r2, r6, #0
 80042ea:	f002 fc1d 	bl	8006b28 <__ssprint_r>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d001      	beq.n	80042f6 <_svfprintf_r+0xf76>
 80042f2:	f7ff fbd6 	bl	8003aa2 <_svfprintf_r+0x722>
 80042f6:	af34      	add	r7, sp, #208	; 0xd0
 80042f8:	f7ff fada 	bl	80038b0 <_svfprintf_r+0x530>
 80042fc:	484a      	ldr	r0, [pc, #296]	; (8004428 <_svfprintf_r+0x10a8>)
 80042fe:	9013      	str	r0, [sp, #76]	; 0x4c
 8004300:	e4fd      	b.n	8003cfe <_svfprintf_r+0x97e>
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004306:	f001 fbeb 	bl	8005ae0 <_malloc_r>
 800430a:	4649      	mov	r1, r9
 800430c:	6008      	str	r0, [r1, #0]
 800430e:	6108      	str	r0, [r1, #16]
 8004310:	2800      	cmp	r0, #0
 8004312:	d100      	bne.n	8004316 <_svfprintf_r+0xf96>
 8004314:	e1ef      	b.n	80046f6 <_svfprintf_r+0x1376>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	614b      	str	r3, [r1, #20]
 800431a:	f7ff f850 	bl	80033be <_svfprintf_r+0x3e>
 800431e:	4843      	ldr	r0, [pc, #268]	; (800442c <_svfprintf_r+0x10ac>)
 8004320:	9013      	str	r0, [sp, #76]	; 0x4c
 8004322:	e728      	b.n	8004176 <_svfprintf_r+0xdf6>
 8004324:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004326:	4659      	mov	r1, fp
 8004328:	1c32      	adds	r2, r6, #0
 800432a:	f002 fbfd 	bl	8006b28 <__ssprint_r>
 800432e:	2800      	cmp	r0, #0
 8004330:	d001      	beq.n	8004336 <_svfprintf_r+0xfb6>
 8004332:	f7ff fbb6 	bl	8003aa2 <_svfprintf_r+0x722>
 8004336:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004338:	af34      	add	r7, sp, #208	; 0xd0
 800433a:	e5f0      	b.n	8003f1e <_svfprintf_r+0xb9e>
 800433c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800433e:	2106      	movs	r1, #6
 8004340:	4398      	bics	r0, r3
 8004342:	9009      	str	r0, [sp, #36]	; 0x24
 8004344:	468a      	mov	sl, r1
 8004346:	e764      	b.n	8004212 <_svfprintf_r+0xe92>
 8004348:	46ab      	mov	fp, r5
 800434a:	4655      	mov	r5, sl
 800434c:	4642      	mov	r2, r8
 800434e:	3210      	adds	r2, #16
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	68b1      	ldr	r1, [r6, #8]
 8004354:	6872      	ldr	r2, [r6, #4]
 8004356:	605c      	str	r4, [r3, #4]
 8004358:	3201      	adds	r2, #1
 800435a:	190c      	adds	r4, r1, r4
 800435c:	60b4      	str	r4, [r6, #8]
 800435e:	6072      	str	r2, [r6, #4]
 8004360:	2a07      	cmp	r2, #7
 8004362:	dd00      	ble.n	8004366 <_svfprintf_r+0xfe6>
 8004364:	e12e      	b.n	80045c4 <_svfprintf_r+0x1244>
 8004366:	3308      	adds	r3, #8
 8004368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800436a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800436c:	68b1      	ldr	r1, [r6, #8]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	180a      	adds	r2, r1, r0
 8004372:	6058      	str	r0, [r3, #4]
 8004374:	60b2      	str	r2, [r6, #8]
 8004376:	6872      	ldr	r2, [r6, #4]
 8004378:	3201      	adds	r2, #1
 800437a:	6072      	str	r2, [r6, #4]
 800437c:	2a07      	cmp	r2, #7
 800437e:	dd01      	ble.n	8004384 <_svfprintf_r+0x1004>
 8004380:	f7ff fa5a 	bl	8003838 <_svfprintf_r+0x4b8>
 8004384:	1c1f      	adds	r7, r3, #0
 8004386:	3708      	adds	r7, #8
 8004388:	f7ff f9ee 	bl	8003768 <_svfprintf_r+0x3e8>
 800438c:	f002 fbc4 	bl	8006b18 <strlen>
 8004390:	900e      	str	r0, [sp, #56]	; 0x38
 8004392:	e721      	b.n	80041d8 <_svfprintf_r+0xe58>
 8004394:	4922      	ldr	r1, [pc, #136]	; (8004420 <_svfprintf_r+0x10a0>)
 8004396:	4688      	mov	r8, r1
 8004398:	f7ff f960 	bl	800365c <_svfprintf_r+0x2dc>
 800439c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800439e:	4659      	mov	r1, fp
 80043a0:	1c32      	adds	r2, r6, #0
 80043a2:	f002 fbc1 	bl	8006b28 <__ssprint_r>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d001      	beq.n	80043ae <_svfprintf_r+0x102e>
 80043aa:	f7ff fb7a 	bl	8003aa2 <_svfprintf_r+0x722>
 80043ae:	af34      	add	r7, sp, #208	; 0xd0
 80043b0:	f7ff fbc0 	bl	8003b34 <_svfprintf_r+0x7b4>
 80043b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043b6:	4659      	mov	r1, fp
 80043b8:	1c32      	adds	r2, r6, #0
 80043ba:	f002 fbb5 	bl	8006b28 <__ssprint_r>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d001      	beq.n	80043c6 <_svfprintf_r+0x1046>
 80043c2:	f7ff fb6e 	bl	8003aa2 <_svfprintf_r+0x722>
 80043c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80043c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ca:	af34      	add	r7, sp, #208	; 0xd0
 80043cc:	1a8b      	subs	r3, r1, r2
 80043ce:	e651      	b.n	8004074 <_svfprintf_r+0xcf4>
 80043d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043d2:	4659      	mov	r1, fp
 80043d4:	1c32      	adds	r2, r6, #0
 80043d6:	f002 fba7 	bl	8006b28 <__ssprint_r>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d001      	beq.n	80043e2 <_svfprintf_r+0x1062>
 80043de:	f7ff fb60 	bl	8003aa2 <_svfprintf_r+0x722>
 80043e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043e4:	af34      	add	r7, sp, #208	; 0xd0
 80043e6:	e62d      	b.n	8004044 <_svfprintf_r+0xcc4>
 80043e8:	9b08      	ldr	r3, [sp, #32]
 80043ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80043ec:	1a1b      	subs	r3, r3, r0
 80043ee:	930e      	str	r3, [sp, #56]	; 0x38
 80043f0:	f7ff f8e4 	bl	80035bc <_svfprintf_r+0x23c>
 80043f4:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <_svfprintf_r+0x10a0>)
 80043f6:	4690      	mov	r8, r2
 80043f8:	f7ff f9ed 	bl	80037d6 <_svfprintf_r+0x456>
 80043fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043fe:	4659      	mov	r1, fp
 8004400:	1c32      	adds	r2, r6, #0
 8004402:	f002 fb91 	bl	8006b28 <__ssprint_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	d001      	beq.n	800440e <_svfprintf_r+0x108e>
 800440a:	f7ff fb4a 	bl	8003aa2 <_svfprintf_r+0x722>
 800440e:	af34      	add	r7, sp, #208	; 0xd0
 8004410:	e60d      	b.n	800402e <_svfprintf_r+0xcae>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46c0      	nop			; (mov r8, r8)
	...
 8004420:	08008c44 	.word	0x08008c44
 8004424:	08009038 	.word	0x08009038
 8004428:	08009030 	.word	0x08009030
 800442c:	08009034 	.word	0x08009034
 8004430:	4650      	mov	r0, sl
 8004432:	900e      	str	r0, [sp, #56]	; 0x38
 8004434:	2806      	cmp	r0, #6
 8004436:	d908      	bls.n	800444a <_svfprintf_r+0x10ca>
 8004438:	2106      	movs	r1, #6
 800443a:	2206      	movs	r2, #6
 800443c:	910e      	str	r1, [sp, #56]	; 0x38
 800443e:	920d      	str	r2, [sp, #52]	; 0x34
 8004440:	49b5      	ldr	r1, [pc, #724]	; (8004718 <_svfprintf_r+0x1398>)
 8004442:	9410      	str	r4, [sp, #64]	; 0x40
 8004444:	9113      	str	r1, [sp, #76]	; 0x4c
 8004446:	f7ff f822 	bl	800348e <_svfprintf_r+0x10e>
 800444a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800444c:	43c3      	mvns	r3, r0
 800444e:	17db      	asrs	r3, r3, #31
 8004450:	4018      	ands	r0, r3
 8004452:	900d      	str	r0, [sp, #52]	; 0x34
 8004454:	e7f4      	b.n	8004440 <_svfprintf_r+0x10c0>
 8004456:	207b      	movs	r0, #123	; 0x7b
 8004458:	9912      	ldr	r1, [sp, #72]	; 0x48
 800445a:	4468      	add	r0, sp
 800445c:	2200      	movs	r2, #0
 800445e:	7803      	ldrb	r3, [r0, #0]
 8004460:	910a      	str	r1, [sp, #40]	; 0x28
 8004462:	9214      	str	r2, [sp, #80]	; 0x50
 8004464:	f7ff f8b7 	bl	80035d6 <_svfprintf_r+0x256>
 8004468:	2303      	movs	r3, #3
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	ab20      	add	r3, sp, #128	; 0x80
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	ab21      	add	r3, sp, #132	; 0x84
 8004472:	4652      	mov	r2, sl
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	ab22      	add	r3, sp, #136	; 0x88
 8004478:	9201      	str	r2, [sp, #4]
 800447a:	9304      	str	r3, [sp, #16]
 800447c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800447e:	4643      	mov	r3, r8
 8004480:	464a      	mov	r2, r9
 8004482:	f000 f9f9 	bl	8004878 <_dtoa_r>
 8004486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004488:	9013      	str	r0, [sp, #76]	; 0x4c
 800448a:	2b47      	cmp	r3, #71	; 0x47
 800448c:	d102      	bne.n	8004494 <_svfprintf_r+0x1114>
 800448e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004490:	07c0      	lsls	r0, r0, #31
 8004492:	d51a      	bpl.n	80044ca <_svfprintf_r+0x114a>
 8004494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004496:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004498:	1c1c      	adds	r4, r3, #0
 800449a:	4454      	add	r4, sl
 800449c:	2800      	cmp	r0, #0
 800449e:	d100      	bne.n	80044a2 <_svfprintf_r+0x1122>
 80044a0:	e6e0      	b.n	8004264 <_svfprintf_r+0xee4>
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d002      	beq.n	80044ae <_svfprintf_r+0x112e>
 80044a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044aa:	18e4      	adds	r4, r4, r3
 80044ac:	e6da      	b.n	8004264 <_svfprintf_r+0xee4>
 80044ae:	4648      	mov	r0, r9
 80044b0:	4641      	mov	r1, r8
 80044b2:	4b98      	ldr	r3, [pc, #608]	; (8004714 <_svfprintf_r+0x1394>)
 80044b4:	4a96      	ldr	r2, [pc, #600]	; (8004710 <_svfprintf_r+0x1390>)
 80044b6:	f004 e8f2 	blx	800869c <__aeabi_dcmpeq>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d1f4      	bne.n	80044a8 <_svfprintf_r+0x1128>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	9320      	str	r3, [sp, #128]	; 0x80
 80044c6:	18e4      	adds	r4, r4, r3
 80044c8:	e6cc      	b.n	8004264 <_svfprintf_r+0xee4>
 80044ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80044cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044ce:	1a89      	subs	r1, r1, r2
 80044d0:	9115      	str	r1, [sp, #84]	; 0x54
 80044d2:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80044d4:	1c23      	adds	r3, r4, #0
 80044d6:	1ce1      	adds	r1, r4, #3
 80044d8:	db02      	blt.n	80044e0 <_svfprintf_r+0x1160>
 80044da:	45a2      	cmp	sl, r4
 80044dc:	db00      	blt.n	80044e0 <_svfprintf_r+0x1160>
 80044de:	e6e3      	b.n	80042a8 <_svfprintf_r+0xf28>
 80044e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044e2:	3a02      	subs	r2, #2
 80044e4:	920c      	str	r2, [sp, #48]	; 0x30
 80044e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044e8:	a823      	add	r0, sp, #140	; 0x8c
 80044ea:	3c01      	subs	r4, #1
 80044ec:	9420      	str	r4, [sp, #128]	; 0x80
 80044ee:	4681      	mov	r9, r0
 80044f0:	7001      	strb	r1, [r0, #0]
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	da00      	bge.n	80044f8 <_svfprintf_r+0x1178>
 80044f6:	e0c5      	b.n	8004684 <_svfprintf_r+0x1304>
 80044f8:	466b      	mov	r3, sp
 80044fa:	222b      	movs	r2, #43	; 0x2b
 80044fc:	338d      	adds	r3, #141	; 0x8d
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	2c09      	cmp	r4, #9
 8004502:	dc6a      	bgt.n	80045da <_svfprintf_r+0x125a>
 8004504:	466b      	mov	r3, sp
 8004506:	338e      	adds	r3, #142	; 0x8e
 8004508:	2230      	movs	r2, #48	; 0x30
 800450a:	3430      	adds	r4, #48	; 0x30
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	705c      	strb	r4, [r3, #1]
 8004510:	ab24      	add	r3, sp, #144	; 0x90
 8004512:	464a      	mov	r2, r9
 8004514:	1a9a      	subs	r2, r3, r2
 8004516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004518:	9815      	ldr	r0, [sp, #84]	; 0x54
 800451a:	189b      	adds	r3, r3, r2
 800451c:	921b      	str	r2, [sp, #108]	; 0x6c
 800451e:	930e      	str	r3, [sp, #56]	; 0x38
 8004520:	2801      	cmp	r0, #1
 8004522:	dc00      	bgt.n	8004526 <_svfprintf_r+0x11a6>
 8004524:	e0b4      	b.n	8004690 <_svfprintf_r+0x1310>
 8004526:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004528:	3001      	adds	r0, #1
 800452a:	43c3      	mvns	r3, r0
 800452c:	17db      	asrs	r3, r3, #31
 800452e:	900e      	str	r0, [sp, #56]	; 0x38
 8004530:	2100      	movs	r1, #0
 8004532:	4018      	ands	r0, r3
 8004534:	900d      	str	r0, [sp, #52]	; 0x34
 8004536:	9116      	str	r1, [sp, #88]	; 0x58
 8004538:	e6c6      	b.n	80042c8 <_svfprintf_r+0xf48>
 800453a:	207b      	movs	r0, #123	; 0x7b
 800453c:	232d      	movs	r3, #45	; 0x2d
 800453e:	4468      	add	r0, sp
 8004540:	7003      	strb	r3, [r0, #0]
 8004542:	f7ff fbd6 	bl	8003cf2 <_svfprintf_r+0x972>
 8004546:	4975      	ldr	r1, [pc, #468]	; (800471c <_svfprintf_r+0x139c>)
 8004548:	4688      	mov	r8, r1
 800454a:	f7ff fa23 	bl	8003994 <_svfprintf_r+0x614>
 800454e:	4650      	mov	r0, sl
 8004550:	217b      	movs	r1, #123	; 0x7b
 8004552:	900d      	str	r0, [sp, #52]	; 0x34
 8004554:	4469      	add	r1, sp
 8004556:	900e      	str	r0, [sp, #56]	; 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	2000      	movs	r0, #0
 800455c:	780b      	ldrb	r3, [r1, #0]
 800455e:	9410      	str	r4, [sp, #64]	; 0x40
 8004560:	9214      	str	r2, [sp, #80]	; 0x50
 8004562:	9016      	str	r0, [sp, #88]	; 0x58
 8004564:	f7ff f837 	bl	80035d6 <_svfprintf_r+0x256>
 8004568:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800456a:	4659      	mov	r1, fp
 800456c:	1c32      	adds	r2, r6, #0
 800456e:	f002 fadb 	bl	8006b28 <__ssprint_r>
 8004572:	2800      	cmp	r0, #0
 8004574:	d001      	beq.n	800457a <_svfprintf_r+0x11fa>
 8004576:	f7ff fa94 	bl	8003aa2 <_svfprintf_r+0x722>
 800457a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800457c:	ab34      	add	r3, sp, #208	; 0xd0
 800457e:	e4e7      	b.n	8003f50 <_svfprintf_r+0xbd0>
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	0609      	lsls	r1, r1, #24
 8004584:	222d      	movs	r2, #45	; 0x2d
 8004586:	4488      	add	r8, r1
 8004588:	9214      	str	r2, [sp, #80]	; 0x50
 800458a:	e64d      	b.n	8004228 <_svfprintf_r+0xea8>
 800458c:	2302      	movs	r3, #2
 800458e:	e76c      	b.n	800446a <_svfprintf_r+0x10ea>
 8004590:	2201      	movs	r2, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	dc00      	bgt.n	8004598 <_svfprintf_r+0x1218>
 8004596:	e08a      	b.n	80046ae <_svfprintf_r+0x132e>
 8004598:	9815      	ldr	r0, [sp, #84]	; 0x54
 800459a:	1812      	adds	r2, r2, r0
 800459c:	920e      	str	r2, [sp, #56]	; 0x38
 800459e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045a0:	43d2      	mvns	r2, r2
 80045a2:	17d2      	asrs	r2, r2, #31
 80045a4:	4011      	ands	r1, r2
 80045a6:	2267      	movs	r2, #103	; 0x67
 80045a8:	910d      	str	r1, [sp, #52]	; 0x34
 80045aa:	920c      	str	r2, [sp, #48]	; 0x30
 80045ac:	e68b      	b.n	80042c6 <_svfprintf_r+0xf46>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	dd5d      	ble.n	800466e <_svfprintf_r+0x12ee>
 80045b2:	4650      	mov	r0, sl
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d13c      	bne.n	8004632 <_svfprintf_r+0x12b2>
 80045b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045ba:	07c9      	lsls	r1, r1, #31
 80045bc:	d439      	bmi.n	8004632 <_svfprintf_r+0x12b2>
 80045be:	930d      	str	r3, [sp, #52]	; 0x34
 80045c0:	930e      	str	r3, [sp, #56]	; 0x38
 80045c2:	e680      	b.n	80042c6 <_svfprintf_r+0xf46>
 80045c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045c6:	4659      	mov	r1, fp
 80045c8:	1c32      	adds	r2, r6, #0
 80045ca:	f002 faad 	bl	8006b28 <__ssprint_r>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d001      	beq.n	80045d6 <_svfprintf_r+0x1256>
 80045d2:	f7ff fa66 	bl	8003aa2 <_svfprintf_r+0x722>
 80045d6:	ab34      	add	r3, sp, #208	; 0xd0
 80045d8:	e6c6      	b.n	8004368 <_svfprintf_r+0xfe8>
 80045da:	466b      	mov	r3, sp
 80045dc:	339a      	adds	r3, #154	; 0x9a
 80045de:	1c20      	adds	r0, r4, #0
 80045e0:	210a      	movs	r1, #10
 80045e2:	4698      	mov	r8, r3
 80045e4:	f003 eb86 	blx	8007cf4 <__aeabi_idivmod>
 80045e8:	4642      	mov	r2, r8
 80045ea:	3130      	adds	r1, #48	; 0x30
 80045ec:	7011      	strb	r1, [r2, #0]
 80045ee:	1c20      	adds	r0, r4, #0
 80045f0:	210a      	movs	r1, #10
 80045f2:	f003 eae8 	blx	8007bc4 <__aeabi_idiv>
 80045f6:	4643      	mov	r3, r8
 80045f8:	1c04      	adds	r4, r0, #0
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2809      	cmp	r0, #9
 80045fe:	dcee      	bgt.n	80045de <_svfprintf_r+0x125e>
 8004600:	1c01      	adds	r1, r0, #0
 8004602:	3130      	adds	r1, #48	; 0x30
 8004604:	0609      	lsls	r1, r1, #24
 8004606:	4668      	mov	r0, sp
 8004608:	0e09      	lsrs	r1, r1, #24
 800460a:	309b      	adds	r0, #155	; 0x9b
 800460c:	7019      	strb	r1, [r3, #0]
 800460e:	4298      	cmp	r0, r3
 8004610:	d96e      	bls.n	80046f0 <_svfprintf_r+0x1370>
 8004612:	466a      	mov	r2, sp
 8004614:	4643      	mov	r3, r8
 8004616:	328e      	adds	r2, #142	; 0x8e
 8004618:	e001      	b.n	800461e <_svfprintf_r+0x129e>
 800461a:	7819      	ldrb	r1, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	7011      	strb	r1, [r2, #0]
 8004620:	3201      	adds	r2, #1
 8004622:	4298      	cmp	r0, r3
 8004624:	d1f9      	bne.n	800461a <_svfprintf_r+0x129a>
 8004626:	4640      	mov	r0, r8
 8004628:	218e      	movs	r1, #142	; 0x8e
 800462a:	1a33      	subs	r3, r6, r0
 800462c:	4469      	add	r1, sp
 800462e:	18cb      	adds	r3, r1, r3
 8004630:	e76f      	b.n	8004512 <_svfprintf_r+0x1192>
 8004632:	4652      	mov	r2, sl
 8004634:	3201      	adds	r2, #1
 8004636:	189a      	adds	r2, r3, r2
 8004638:	920e      	str	r2, [sp, #56]	; 0x38
 800463a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800463c:	43d2      	mvns	r2, r2
 800463e:	17d2      	asrs	r2, r2, #31
 8004640:	4010      	ands	r0, r2
 8004642:	900d      	str	r0, [sp, #52]	; 0x34
 8004644:	e63f      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <_svfprintf_r+0x139c>)
 8004648:	4698      	mov	r8, r3
 800464a:	f7ff fa0d 	bl	8003a68 <_svfprintf_r+0x6e8>
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	43ca      	mvns	r2, r1
 8004652:	17d2      	asrs	r2, r2, #31
 8004654:	910e      	str	r1, [sp, #56]	; 0x38
 8004656:	4011      	ands	r1, r2
 8004658:	2267      	movs	r2, #103	; 0x67
 800465a:	910d      	str	r1, [sp, #52]	; 0x34
 800465c:	920c      	str	r2, [sp, #48]	; 0x30
 800465e:	e632      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004660:	4a2e      	ldr	r2, [pc, #184]	; (800471c <_svfprintf_r+0x139c>)
 8004662:	4690      	mov	r8, r2
 8004664:	f7ff f8dc 	bl	8003820 <_svfprintf_r+0x4a0>
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <_svfprintf_r+0x139c>)
 800466a:	4690      	mov	r8, r2
 800466c:	e4d1      	b.n	8004012 <_svfprintf_r+0xc92>
 800466e:	4651      	mov	r1, sl
 8004670:	2900      	cmp	r1, #0
 8004672:	d133      	bne.n	80046dc <_svfprintf_r+0x135c>
 8004674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004676:	07d2      	lsls	r2, r2, #31
 8004678:	d430      	bmi.n	80046dc <_svfprintf_r+0x135c>
 800467a:	2001      	movs	r0, #1
 800467c:	2101      	movs	r1, #1
 800467e:	900d      	str	r0, [sp, #52]	; 0x34
 8004680:	910e      	str	r1, [sp, #56]	; 0x38
 8004682:	e620      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004684:	466b      	mov	r3, sp
 8004686:	222d      	movs	r2, #45	; 0x2d
 8004688:	338d      	adds	r3, #141	; 0x8d
 800468a:	4264      	negs	r4, r4
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e737      	b.n	8004500 <_svfprintf_r+0x1180>
 8004690:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004692:	07c9      	lsls	r1, r1, #31
 8004694:	d500      	bpl.n	8004698 <_svfprintf_r+0x1318>
 8004696:	e746      	b.n	8004526 <_svfprintf_r+0x11a6>
 8004698:	43db      	mvns	r3, r3
 800469a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800469c:	17db      	asrs	r3, r3, #31
 800469e:	401a      	ands	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	920d      	str	r2, [sp, #52]	; 0x34
 80046a4:	9316      	str	r3, [sp, #88]	; 0x58
 80046a6:	e60f      	b.n	80042c8 <_svfprintf_r+0xf48>
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <_svfprintf_r+0x139c>)
 80046aa:	4698      	mov	r8, r3
 80046ac:	e587      	b.n	80041be <_svfprintf_r+0xe3e>
 80046ae:	2202      	movs	r2, #2
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	e771      	b.n	8004598 <_svfprintf_r+0x1218>
 80046b4:	4819      	ldr	r0, [pc, #100]	; (800471c <_svfprintf_r+0x139c>)
 80046b6:	4680      	mov	r8, r0
 80046b8:	e648      	b.n	800434c <_svfprintf_r+0xfcc>
 80046ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046bc:	3204      	adds	r2, #4
 80046be:	9209      	str	r2, [sp, #36]	; 0x24
 80046c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c6:	469a      	mov	sl, r3
 80046c8:	9210      	str	r2, [sp, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db01      	blt.n	80046d2 <_svfprintf_r+0x1352>
 80046ce:	f7fe fec7 	bl	8003460 <_svfprintf_r+0xe0>
 80046d2:	2301      	movs	r3, #1
 80046d4:	425b      	negs	r3, r3
 80046d6:	469a      	mov	sl, r3
 80046d8:	f7fe fec2 	bl	8003460 <_svfprintf_r+0xe0>
 80046dc:	4650      	mov	r0, sl
 80046de:	3002      	adds	r0, #2
 80046e0:	43c2      	mvns	r2, r0
 80046e2:	17d2      	asrs	r2, r2, #31
 80046e4:	900e      	str	r0, [sp, #56]	; 0x38
 80046e6:	4010      	ands	r0, r2
 80046e8:	900d      	str	r0, [sp, #52]	; 0x34
 80046ea:	e5ec      	b.n	80042c6 <_svfprintf_r+0xf46>
 80046ec:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80046ee:	e6fa      	b.n	80044e6 <_svfprintf_r+0x1166>
 80046f0:	466b      	mov	r3, sp
 80046f2:	338e      	adds	r3, #142	; 0x8e
 80046f4:	e70d      	b.n	8004512 <_svfprintf_r+0x1192>
 80046f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046f8:	230c      	movs	r3, #12
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	930f      	str	r3, [sp, #60]	; 0x3c
 8004702:	f7ff f90a 	bl	800391a <_svfprintf_r+0x59a>
 8004706:	1c1c      	adds	r4, r3, #0
 8004708:	e5be      	b.n	8004288 <_svfprintf_r+0xf08>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46c0      	nop			; (mov r8, r8)
	...
 8004718:	08009064 	.word	0x08009064
 800471c:	08008c44 	.word	0x08008c44

08004720 <quorem>:
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	464d      	mov	r5, r9
 8004724:	4644      	mov	r4, r8
 8004726:	465f      	mov	r7, fp
 8004728:	4656      	mov	r6, sl
 800472a:	b4f0      	push	{r4, r5, r6, r7}
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	690b      	ldr	r3, [r1, #16]
 8004732:	4641      	mov	r1, r8
 8004734:	6909      	ldr	r1, [r1, #16]
 8004736:	b083      	sub	sp, #12
 8004738:	2000      	movs	r0, #0
 800473a:	428b      	cmp	r3, r1
 800473c:	dd00      	ble.n	8004740 <quorem+0x20>
 800473e:	e092      	b.n	8004866 <quorem+0x146>
 8004740:	1e5d      	subs	r5, r3, #1
 8004742:	3303      	adds	r3, #3
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4648      	mov	r0, r9
 8004748:	4641      	mov	r1, r8
 800474a:	18c2      	adds	r2, r0, r3
 800474c:	3114      	adds	r1, #20
 800474e:	9101      	str	r1, [sp, #4]
 8004750:	6851      	ldr	r1, [r2, #4]
 8004752:	4443      	add	r3, r8
 8004754:	3101      	adds	r1, #1
 8004756:	6858      	ldr	r0, [r3, #4]
 8004758:	1d17      	adds	r7, r2, #4
 800475a:	f003 e9a6 	blx	8007aa8 <__aeabi_uidiv>
 800475e:	464c      	mov	r4, r9
 8004760:	3414      	adds	r4, #20
 8004762:	1e06      	subs	r6, r0, #0
 8004764:	d043      	beq.n	80047ee <quorem+0xce>
 8004766:	2100      	movs	r1, #0
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	46ab      	mov	fp, r5
 800476c:	46ba      	mov	sl, r7
 800476e:	1c22      	adds	r2, r4, #0
 8004770:	1c37      	adds	r7, r6, #0
 8004772:	46a4      	mov	ip, r4
 8004774:	1c0d      	adds	r5, r1, #0
 8004776:	1c0e      	adds	r6, r1, #0
 8004778:	ca02      	ldmia	r2!, {r1}
 800477a:	040c      	lsls	r4, r1, #16
 800477c:	0c24      	lsrs	r4, r4, #16
 800477e:	437c      	muls	r4, r7
 8004780:	0c09      	lsrs	r1, r1, #16
 8004782:	4379      	muls	r1, r7
 8004784:	1934      	adds	r4, r6, r4
 8004786:	0c20      	lsrs	r0, r4, #16
 8004788:	1840      	adds	r0, r0, r1
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	0409      	lsls	r1, r1, #16
 800478e:	0c09      	lsrs	r1, r1, #16
 8004790:	0424      	lsls	r4, r4, #16
 8004792:	194d      	adds	r5, r1, r5
 8004794:	0c24      	lsrs	r4, r4, #16
 8004796:	1b2c      	subs	r4, r5, r4
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	0c06      	lsrs	r6, r0, #16
 800479c:	0400      	lsls	r0, r0, #16
 800479e:	0c29      	lsrs	r1, r5, #16
 80047a0:	0c00      	lsrs	r0, r0, #16
 80047a2:	1425      	asrs	r5, r4, #16
 80047a4:	1a09      	subs	r1, r1, r0
 80047a6:	1949      	adds	r1, r1, r5
 80047a8:	0424      	lsls	r4, r4, #16
 80047aa:	140d      	asrs	r5, r1, #16
 80047ac:	0c24      	lsrs	r4, r4, #16
 80047ae:	0409      	lsls	r1, r1, #16
 80047b0:	4321      	orrs	r1, r4
 80047b2:	c302      	stmia	r3!, {r1}
 80047b4:	4592      	cmp	sl, r2
 80047b6:	d2df      	bcs.n	8004778 <quorem+0x58>
 80047b8:	465d      	mov	r5, fp
 80047ba:	1d2b      	adds	r3, r5, #4
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4443      	add	r3, r8
 80047c0:	6858      	ldr	r0, [r3, #4]
 80047c2:	1c3e      	adds	r6, r7, #0
 80047c4:	4664      	mov	r4, ip
 80047c6:	4657      	mov	r7, sl
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d110      	bne.n	80047ee <quorem+0xce>
 80047cc:	9901      	ldr	r1, [sp, #4]
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d20b      	bcs.n	80047ea <quorem+0xca>
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d108      	bne.n	80047ea <quorem+0xca>
 80047d8:	1c0a      	adds	r2, r1, #0
 80047da:	e002      	b.n	80047e2 <quorem+0xc2>
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	2800      	cmp	r0, #0
 80047e0:	d103      	bne.n	80047ea <quorem+0xca>
 80047e2:	3b04      	subs	r3, #4
 80047e4:	3d01      	subs	r5, #1
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3f8      	bcc.n	80047dc <quorem+0xbc>
 80047ea:	4641      	mov	r1, r8
 80047ec:	610d      	str	r5, [r1, #16]
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f001 ff2f 	bl	8006654 <__mcmp>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	db34      	blt.n	8004864 <quorem+0x144>
 80047fa:	2200      	movs	r2, #0
 80047fc:	4694      	mov	ip, r2
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	1c2a      	adds	r2, r5, #0
 8004802:	3601      	adds	r6, #1
 8004804:	1c3d      	adds	r5, r7, #0
 8004806:	4667      	mov	r7, ip
 8004808:	4694      	mov	ip, r2
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	cc01      	ldmia	r4!, {r0}
 800480e:	0411      	lsls	r1, r2, #16
 8004810:	0c09      	lsrs	r1, r1, #16
 8004812:	19cf      	adds	r7, r1, r7
 8004814:	0401      	lsls	r1, r0, #16
 8004816:	0c09      	lsrs	r1, r1, #16
 8004818:	1a79      	subs	r1, r7, r1
 800481a:	0c12      	lsrs	r2, r2, #16
 800481c:	0c00      	lsrs	r0, r0, #16
 800481e:	140f      	asrs	r7, r1, #16
 8004820:	1a12      	subs	r2, r2, r0
 8004822:	19d2      	adds	r2, r2, r7
 8004824:	0409      	lsls	r1, r1, #16
 8004826:	1417      	asrs	r7, r2, #16
 8004828:	0c09      	lsrs	r1, r1, #16
 800482a:	0412      	lsls	r2, r2, #16
 800482c:	430a      	orrs	r2, r1
 800482e:	c304      	stmia	r3!, {r2}
 8004830:	42a5      	cmp	r5, r4
 8004832:	d2ea      	bcs.n	800480a <quorem+0xea>
 8004834:	4665      	mov	r5, ip
 8004836:	1d2b      	adds	r3, r5, #4
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4443      	add	r3, r8
 800483c:	6858      	ldr	r0, [r3, #4]
 800483e:	2800      	cmp	r0, #0
 8004840:	d110      	bne.n	8004864 <quorem+0x144>
 8004842:	9901      	ldr	r1, [sp, #4]
 8004844:	4299      	cmp	r1, r3
 8004846:	d20b      	bcs.n	8004860 <quorem+0x140>
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	2a00      	cmp	r2, #0
 800484c:	d108      	bne.n	8004860 <quorem+0x140>
 800484e:	1c0a      	adds	r2, r1, #0
 8004850:	e002      	b.n	8004858 <quorem+0x138>
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	2800      	cmp	r0, #0
 8004856:	d103      	bne.n	8004860 <quorem+0x140>
 8004858:	3b04      	subs	r3, #4
 800485a:	3d01      	subs	r5, #1
 800485c:	429a      	cmp	r2, r3
 800485e:	d3f8      	bcc.n	8004852 <quorem+0x132>
 8004860:	4641      	mov	r1, r8
 8004862:	610d      	str	r5, [r1, #16]
 8004864:	1c30      	adds	r0, r6, #0
 8004866:	b003      	add	sp, #12
 8004868:	bc3c      	pop	{r2, r3, r4, r5}
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	46a2      	mov	sl, r4
 8004870:	46ab      	mov	fp, r5
 8004872:	bcf0      	pop	{r4, r5, r6, r7}
 8004874:	bc02      	pop	{r1}
 8004876:	4708      	bx	r1

08004878 <_dtoa_r>:
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	4656      	mov	r6, sl
 800487c:	4644      	mov	r4, r8
 800487e:	465f      	mov	r7, fp
 8004880:	464d      	mov	r5, r9
 8004882:	b4f0      	push	{r4, r5, r6, r7}
 8004884:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004886:	b09d      	sub	sp, #116	; 0x74
 8004888:	1c04      	adds	r4, r0, #0
 800488a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800488c:	9202      	str	r2, [sp, #8]
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	2900      	cmp	r1, #0
 8004892:	d008      	beq.n	80048a6 <_dtoa_r+0x2e>
 8004894:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004896:	2201      	movs	r2, #1
 8004898:	409a      	lsls	r2, r3
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	608a      	str	r2, [r1, #8]
 800489e:	f001 fc65 	bl	800616c <_Bfree>
 80048a2:	2300      	movs	r3, #0
 80048a4:	6423      	str	r3, [r4, #64]	; 0x40
 80048a6:	9d03      	ldr	r5, [sp, #12]
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	db37      	blt.n	800491c <_dtoa_r+0xa4>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <_dtoa_r+0xb8>)
 80048b2:	1c2a      	adds	r2, r5, #0
 80048b4:	401a      	ands	r2, r3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d01d      	beq.n	80048f6 <_dtoa_r+0x7e>
 80048ba:	9e02      	ldr	r6, [sp, #8]
 80048bc:	9f03      	ldr	r7, [sp, #12]
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <_dtoa_r+0xb4>)
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <_dtoa_r+0xb0>)
 80048c2:	1c30      	adds	r0, r6, #0
 80048c4:	1c39      	adds	r1, r7, #0
 80048c6:	f003 eeea 	blx	800869c <__aeabi_dcmpeq>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d038      	beq.n	8004940 <_dtoa_r+0xc8>
 80048ce:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80048d0:	2301      	movs	r3, #1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	d100      	bne.n	80048dc <_dtoa_r+0x64>
 80048da:	e21f      	b.n	8004d1c <_dtoa_r+0x4a4>
 80048dc:	4f15      	ldr	r7, [pc, #84]	; (8004934 <_dtoa_r+0xbc>)
 80048de:	602f      	str	r7, [r5, #0]
 80048e0:	3f01      	subs	r7, #1
 80048e2:	1c38      	adds	r0, r7, #0
 80048e4:	b01d      	add	sp, #116	; 0x74
 80048e6:	bc3c      	pop	{r2, r3, r4, r5}
 80048e8:	4690      	mov	r8, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	46a2      	mov	sl, r4
 80048ee:	46ab      	mov	fp, r5
 80048f0:	bcf0      	pop	{r4, r5, r6, r7}
 80048f2:	bc02      	pop	{r1}
 80048f4:	4708      	bx	r1
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <_dtoa_r+0xc0>)
 80048f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80048fa:	9a02      	ldr	r2, [sp, #8]
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d100      	bne.n	8004904 <_dtoa_r+0x8c>
 8004902:	e1bb      	b.n	8004c7c <_dtoa_r+0x404>
 8004904:	4f0d      	ldr	r7, [pc, #52]	; (800493c <_dtoa_r+0xc4>)
 8004906:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8004908:	2d00      	cmp	r5, #0
 800490a:	d0ea      	beq.n	80048e2 <_dtoa_r+0x6a>
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	1cfb      	adds	r3, r7, #3
 8004910:	2a00      	cmp	r2, #0
 8004912:	d000      	beq.n	8004916 <_dtoa_r+0x9e>
 8004914:	3305      	adds	r3, #5
 8004916:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	e7e2      	b.n	80048e2 <_dtoa_r+0x6a>
 800491c:	2301      	movs	r3, #1
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	006b      	lsls	r3, r5, #1
 8004922:	085d      	lsrs	r5, r3, #1
 8004924:	9503      	str	r5, [sp, #12]
 8004926:	e7c3      	b.n	80048b0 <_dtoa_r+0x38>
	...
 8004930:	7ff00000 	.word	0x7ff00000
 8004934:	0800906d 	.word	0x0800906d
 8004938:	0000270f 	.word	0x0000270f
 800493c:	0800907c 	.word	0x0800907c
 8004940:	ab1b      	add	r3, sp, #108	; 0x6c
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	ab1a      	add	r3, sp, #104	; 0x68
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	1c32      	adds	r2, r6, #0
 800494a:	1c3b      	adds	r3, r7, #0
 800494c:	1c20      	adds	r0, r4, #0
 800494e:	f001 ff8d 	bl	800686c <__d2b>
 8004952:	006b      	lsls	r3, r5, #1
 8004954:	900b      	str	r0, [sp, #44]	; 0x2c
 8004956:	0d5a      	lsrs	r2, r3, #21
 8004958:	d100      	bne.n	800495c <_dtoa_r+0xe4>
 800495a:	e1c5      	b.n	8004ce8 <_dtoa_r+0x470>
 800495c:	4ddc      	ldr	r5, [pc, #880]	; (8004cd0 <_dtoa_r+0x458>)
 800495e:	033b      	lsls	r3, r7, #12
 8004960:	0b1b      	lsrs	r3, r3, #12
 8004962:	1c29      	adds	r1, r5, #0
 8004964:	4319      	orrs	r1, r3
 8004966:	4bdb      	ldr	r3, [pc, #876]	; (8004cd4 <_dtoa_r+0x45c>)
 8004968:	18d5      	adds	r5, r2, r3
 800496a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800496c:	2300      	movs	r3, #0
 800496e:	9316      	str	r3, [sp, #88]	; 0x58
 8004970:	1c30      	adds	r0, r6, #0
 8004972:	4690      	mov	r8, r2
 8004974:	4bc5      	ldr	r3, [pc, #788]	; (8004c8c <_dtoa_r+0x414>)
 8004976:	4ac4      	ldr	r2, [pc, #784]	; (8004c88 <_dtoa_r+0x410>)
 8004978:	f003 e9d2 	blx	8007d20 <__aeabi_dsub>
 800497c:	4ac4      	ldr	r2, [pc, #784]	; (8004c90 <_dtoa_r+0x418>)
 800497e:	4bc5      	ldr	r3, [pc, #788]	; (8004c94 <_dtoa_r+0x41c>)
 8004980:	f003 ebd8 	blx	8008134 <__aeabi_dmul>
 8004984:	4ac4      	ldr	r2, [pc, #784]	; (8004c98 <_dtoa_r+0x420>)
 8004986:	4bc5      	ldr	r3, [pc, #788]	; (8004c9c <_dtoa_r+0x424>)
 8004988:	f003 e9cc 	blx	8007d24 <__adddf3>
 800498c:	1c06      	adds	r6, r0, #0
 800498e:	1c28      	adds	r0, r5, #0
 8004990:	1c0f      	adds	r7, r1, #0
 8004992:	f003 eb62 	blx	8008058 <__aeabi_i2d>
 8004996:	4ac2      	ldr	r2, [pc, #776]	; (8004ca0 <_dtoa_r+0x428>)
 8004998:	4bc2      	ldr	r3, [pc, #776]	; (8004ca4 <_dtoa_r+0x42c>)
 800499a:	f003 ebcc 	blx	8008134 <__aeabi_dmul>
 800499e:	1c02      	adds	r2, r0, #0
 80049a0:	1c0b      	adds	r3, r1, #0
 80049a2:	1c30      	adds	r0, r6, #0
 80049a4:	1c39      	adds	r1, r7, #0
 80049a6:	f003 e9be 	blx	8007d24 <__adddf3>
 80049aa:	1c06      	adds	r6, r0, #0
 80049ac:	1c0f      	adds	r7, r1, #0
 80049ae:	f003 eeb2 	blx	8008714 <__aeabi_d2iz>
 80049b2:	1c39      	adds	r1, r7, #0
 80049b4:	9007      	str	r0, [sp, #28]
 80049b6:	4abc      	ldr	r2, [pc, #752]	; (8004ca8 <_dtoa_r+0x430>)
 80049b8:	4bbc      	ldr	r3, [pc, #752]	; (8004cac <_dtoa_r+0x434>)
 80049ba:	1c30      	adds	r0, r6, #0
 80049bc:	f003 ee7a 	blx	80086b4 <__aeabi_dcmplt>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d000      	beq.n	80049c6 <_dtoa_r+0x14e>
 80049c4:	e359      	b.n	800507a <_dtoa_r+0x802>
 80049c6:	9a07      	ldr	r2, [sp, #28]
 80049c8:	2101      	movs	r1, #1
 80049ca:	910e      	str	r1, [sp, #56]	; 0x38
 80049cc:	2a16      	cmp	r2, #22
 80049ce:	d810      	bhi.n	80049f2 <_dtoa_r+0x17a>
 80049d0:	00d3      	lsls	r3, r2, #3
 80049d2:	4ac1      	ldr	r2, [pc, #772]	; (8004cd8 <_dtoa_r+0x460>)
 80049d4:	18d3      	adds	r3, r2, r3
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	9a02      	ldr	r2, [sp, #8]
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	f003 ee8e 	blx	80086fc <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d100      	bne.n	80049e8 <_dtoa_r+0x170>
 80049e6:	e35b      	b.n	80050a0 <_dtoa_r+0x828>
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	2000      	movs	r0, #0
 80049ec:	3b01      	subs	r3, #1
 80049ee:	9307      	str	r3, [sp, #28]
 80049f0:	900e      	str	r0, [sp, #56]	; 0x38
 80049f2:	4642      	mov	r2, r8
 80049f4:	1b55      	subs	r5, r2, r5
 80049f6:	3d01      	subs	r5, #1
 80049f8:	d500      	bpl.n	80049fc <_dtoa_r+0x184>
 80049fa:	e339      	b.n	8005070 <_dtoa_r+0x7f8>
 80049fc:	46aa      	mov	sl, r5
 80049fe:	2500      	movs	r5, #0
 8004a00:	950a      	str	r5, [sp, #40]	; 0x28
 8004a02:	9d07      	ldr	r5, [sp, #28]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	da00      	bge.n	8004a0a <_dtoa_r+0x192>
 8004a08:	e313      	b.n	8005032 <_dtoa_r+0x7ba>
 8004a0a:	44aa      	add	sl, r5
 8004a0c:	9511      	str	r5, [sp, #68]	; 0x44
 8004a0e:	2500      	movs	r5, #0
 8004a10:	950f      	str	r5, [sp, #60]	; 0x3c
 8004a12:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004a14:	2809      	cmp	r0, #9
 8004a16:	d900      	bls.n	8004a1a <_dtoa_r+0x1a2>
 8004a18:	e182      	b.n	8004d20 <_dtoa_r+0x4a8>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	2805      	cmp	r0, #5
 8004a1e:	dd02      	ble.n	8004a26 <_dtoa_r+0x1ae>
 8004a20:	3804      	subs	r0, #4
 8004a22:	9026      	str	r0, [sp, #152]	; 0x98
 8004a24:	2300      	movs	r3, #0
 8004a26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004a28:	2903      	cmp	r1, #3
 8004a2a:	d101      	bne.n	8004a30 <_dtoa_r+0x1b8>
 8004a2c:	f000 fd8a 	bl	8005544 <_dtoa_r+0xccc>
 8004a30:	dd00      	ble.n	8004a34 <_dtoa_r+0x1bc>
 8004a32:	e353      	b.n	80050dc <_dtoa_r+0x864>
 8004a34:	2902      	cmp	r1, #2
 8004a36:	d000      	beq.n	8004a3a <_dtoa_r+0x1c2>
 8004a38:	e174      	b.n	8004d24 <_dtoa_r+0x4ac>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	9512      	str	r5, [sp, #72]	; 0x48
 8004a3e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dc01      	bgt.n	8004a48 <_dtoa_r+0x1d0>
 8004a44:	f000 fd8c 	bl	8005560 <_dtoa_r+0xce8>
 8004a48:	2500      	movs	r5, #0
 8004a4a:	220e      	movs	r2, #14
 8004a4c:	4282      	cmp	r2, r0
 8004a4e:	416d      	adcs	r5, r5
 8004a50:	9010      	str	r0, [sp, #64]	; 0x40
 8004a52:	9009      	str	r0, [sp, #36]	; 0x24
 8004a54:	1c06      	adds	r6, r0, #0
 8004a56:	401d      	ands	r5, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6463      	str	r3, [r4, #68]	; 0x44
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2e17      	cmp	r6, #23
 8004a60:	d909      	bls.n	8004a76 <_dtoa_r+0x1fe>
 8004a62:	2201      	movs	r2, #1
 8004a64:	2304      	movs	r3, #4
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	1c18      	adds	r0, r3, #0
 8004a6a:	3014      	adds	r0, #20
 8004a6c:	1c11      	adds	r1, r2, #0
 8004a6e:	3201      	adds	r2, #1
 8004a70:	42b0      	cmp	r0, r6
 8004a72:	d9f8      	bls.n	8004a66 <_dtoa_r+0x1ee>
 8004a74:	6461      	str	r1, [r4, #68]	; 0x44
 8004a76:	1c20      	adds	r0, r4, #0
 8004a78:	f001 fb4e 	bl	8006118 <_Balloc>
 8004a7c:	4683      	mov	fp, r0
 8004a7e:	6420      	str	r0, [r4, #64]	; 0x40
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	d100      	bne.n	8004a86 <_dtoa_r+0x20e>
 8004a84:	e15e      	b.n	8004d44 <_dtoa_r+0x4cc>
 8004a86:	9d07      	ldr	r5, [sp, #28]
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	dc00      	bgt.n	8004a8e <_dtoa_r+0x216>
 8004a8c:	e3d1      	b.n	8005232 <_dtoa_r+0x9ba>
 8004a8e:	1c2a      	adds	r2, r5, #0
 8004a90:	230f      	movs	r3, #15
 8004a92:	401a      	ands	r2, r3
 8004a94:	4990      	ldr	r1, [pc, #576]	; (8004cd8 <_dtoa_r+0x460>)
 8004a96:	00d2      	lsls	r2, r2, #3
 8004a98:	188a      	adds	r2, r1, r2
 8004a9a:	112d      	asrs	r5, r5, #4
 8004a9c:	6816      	ldr	r6, [r2, #0]
 8004a9e:	6857      	ldr	r7, [r2, #4]
 8004aa0:	06e8      	lsls	r0, r5, #27
 8004aa2:	d400      	bmi.n	8004aa6 <_dtoa_r+0x22e>
 8004aa4:	e3b6      	b.n	8005214 <_dtoa_r+0x99c>
 8004aa6:	401d      	ands	r5, r3
 8004aa8:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <_dtoa_r+0x464>)
 8004aaa:	9802      	ldr	r0, [sp, #8]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 ec88 	blx	80083c4 <__aeabi_ddiv>
 8004ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ab8:	910d      	str	r1, [sp, #52]	; 0x34
 8004aba:	2103      	movs	r1, #3
 8004abc:	4689      	mov	r9, r1
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	d014      	beq.n	8004aec <_dtoa_r+0x274>
 8004ac2:	4886      	ldr	r0, [pc, #536]	; (8004cdc <_dtoa_r+0x464>)
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	1c39      	adds	r1, r7, #0
 8004ac8:	1c30      	adds	r0, r6, #0
 8004aca:	464f      	mov	r7, r9
 8004acc:	4646      	mov	r6, r8
 8004ace:	2201      	movs	r2, #1
 8004ad0:	422a      	tst	r2, r5
 8004ad2:	d004      	beq.n	8004ade <_dtoa_r+0x266>
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	6873      	ldr	r3, [r6, #4]
 8004ad8:	3701      	adds	r7, #1
 8004ada:	f003 eb2c 	blx	8008134 <__aeabi_dmul>
 8004ade:	106d      	asrs	r5, r5, #1
 8004ae0:	3608      	adds	r6, #8
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	d1f3      	bne.n	8004ace <_dtoa_r+0x256>
 8004ae6:	46b9      	mov	r9, r7
 8004ae8:	1c06      	adds	r6, r0, #0
 8004aea:	1c0f      	adds	r7, r1, #0
 8004aec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af0:	1c32      	adds	r2, r6, #0
 8004af2:	1c3b      	adds	r3, r7, #0
 8004af4:	f003 ec66 	blx	80083c4 <__aeabi_ddiv>
 8004af8:	900c      	str	r0, [sp, #48]	; 0x30
 8004afa:	910d      	str	r1, [sp, #52]	; 0x34
 8004afc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	d009      	beq.n	8004b16 <_dtoa_r+0x29e>
 8004b02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b06:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <_dtoa_r+0x438>)
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <_dtoa_r+0x43c>)
 8004b0a:	f003 edd4 	blx	80086b4 <__aeabi_dcmplt>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d001      	beq.n	8004b16 <_dtoa_r+0x29e>
 8004b12:	f000 fd49 	bl	80055a8 <_dtoa_r+0xd30>
 8004b16:	4648      	mov	r0, r9
 8004b18:	f003 ea9e 	blx	8008058 <__aeabi_i2d>
 8004b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b20:	f003 eb08 	blx	8008134 <__aeabi_dmul>
 8004b24:	4a64      	ldr	r2, [pc, #400]	; (8004cb8 <_dtoa_r+0x440>)
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <_dtoa_r+0x444>)
 8004b28:	f003 e8fc 	blx	8007d24 <__adddf3>
 8004b2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b2e:	1c06      	adds	r6, r0, #0
 8004b30:	486b      	ldr	r0, [pc, #428]	; (8004ce0 <_dtoa_r+0x468>)
 8004b32:	180f      	adds	r7, r1, r0
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	d100      	bne.n	8004b3a <_dtoa_r+0x2c2>
 8004b38:	e2f7      	b.n	800512a <_dtoa_r+0x8b2>
 8004b3a:	9d07      	ldr	r5, [sp, #28]
 8004b3c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004b3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b40:	9513      	str	r5, [sp, #76]	; 0x4c
 8004b42:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	d100      	bne.n	8004b4a <_dtoa_r+0x2d2>
 8004b48:	e3a5      	b.n	8005296 <_dtoa_r+0xa1e>
 8004b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b4c:	4a62      	ldr	r2, [pc, #392]	; (8004cd8 <_dtoa_r+0x460>)
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4859      	ldr	r0, [pc, #356]	; (8004cc0 <_dtoa_r+0x448>)
 8004b5a:	495a      	ldr	r1, [pc, #360]	; (8004cc4 <_dtoa_r+0x44c>)
 8004b5c:	f003 ec32 	blx	80083c4 <__aeabi_ddiv>
 8004b60:	1c32      	adds	r2, r6, #0
 8004b62:	1c3b      	adds	r3, r7, #0
 8004b64:	f003 e8dc 	blx	8007d20 <__aeabi_dsub>
 8004b68:	9014      	str	r0, [sp, #80]	; 0x50
 8004b6a:	9115      	str	r1, [sp, #84]	; 0x54
 8004b6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b70:	f003 edd0 	blx	8008714 <__aeabi_d2iz>
 8004b74:	1c05      	adds	r5, r0, #0
 8004b76:	f003 ea70 	blx	8008058 <__aeabi_i2d>
 8004b7a:	1c02      	adds	r2, r0, #0
 8004b7c:	1c0b      	adds	r3, r1, #0
 8004b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b82:	f003 e8ce 	blx	8007d20 <__aeabi_dsub>
 8004b86:	3530      	adds	r5, #48	; 0x30
 8004b88:	062d      	lsls	r5, r5, #24
 8004b8a:	0e2d      	lsrs	r5, r5, #24
 8004b8c:	1c06      	adds	r6, r0, #0
 8004b8e:	1c0f      	adds	r7, r1, #0
 8004b90:	4658      	mov	r0, fp
 8004b92:	7005      	strb	r5, [r0, #0]
 8004b94:	46a8      	mov	r8, r5
 8004b96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004b98:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004b9a:	465d      	mov	r5, fp
 8004b9c:	1c32      	adds	r2, r6, #0
 8004b9e:	1c3b      	adds	r3, r7, #0
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	f003 edac 	blx	80086fc <__aeabi_dcmpgt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d001      	beq.n	8004bae <_dtoa_r+0x336>
 8004baa:	f000 fe1c 	bl	80057e6 <_dtoa_r+0xf6e>
 8004bae:	1c32      	adds	r2, r6, #0
 8004bb0:	1c3b      	adds	r3, r7, #0
 8004bb2:	483f      	ldr	r0, [pc, #252]	; (8004cb0 <_dtoa_r+0x438>)
 8004bb4:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <_dtoa_r+0x43c>)
 8004bb6:	f003 e8b4 	blx	8007d20 <__aeabi_dsub>
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	1c0b      	adds	r3, r1, #0
 8004bbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004bc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004bc2:	f003 ed9c 	blx	80086fc <__aeabi_dcmpgt>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d001      	beq.n	8004bce <_dtoa_r+0x356>
 8004bca:	f000 fd6b 	bl	80056a4 <_dtoa_r+0xe2c>
 8004bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004bd0:	2901      	cmp	r1, #1
 8004bd2:	dc00      	bgt.n	8004bd6 <_dtoa_r+0x35e>
 8004bd4:	e0b6      	b.n	8004d44 <_dtoa_r+0x4cc>
 8004bd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004bd8:	4652      	mov	r2, sl
 8004bda:	4681      	mov	r9, r0
 8004bdc:	46aa      	mov	sl, r5
 8004bde:	465d      	mov	r5, fp
 8004be0:	44d9      	add	r9, fp
 8004be2:	950c      	str	r5, [sp, #48]	; 0x30
 8004be4:	46a3      	mov	fp, r4
 8004be6:	9213      	str	r2, [sp, #76]	; 0x4c
 8004be8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8004bea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004bec:	e011      	b.n	8004c12 <_dtoa_r+0x39a>
 8004bee:	1c32      	adds	r2, r6, #0
 8004bf0:	1c3b      	adds	r3, r7, #0
 8004bf2:	482f      	ldr	r0, [pc, #188]	; (8004cb0 <_dtoa_r+0x438>)
 8004bf4:	492f      	ldr	r1, [pc, #188]	; (8004cb4 <_dtoa_r+0x43c>)
 8004bf6:	f003 e894 	blx	8007d20 <__aeabi_dsub>
 8004bfa:	1c22      	adds	r2, r4, #0
 8004bfc:	1c2b      	adds	r3, r5, #0
 8004bfe:	f003 ed5a 	blx	80086b4 <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d001      	beq.n	8004c0a <_dtoa_r+0x392>
 8004c06:	f000 fd49 	bl	800569c <_dtoa_r+0xe24>
 8004c0a:	45ca      	cmp	sl, r9
 8004c0c:	d101      	bne.n	8004c12 <_dtoa_r+0x39a>
 8004c0e:	f000 fd4e 	bl	80056ae <_dtoa_r+0xe36>
 8004c12:	1c20      	adds	r0, r4, #0
 8004c14:	1c29      	adds	r1, r5, #0
 8004c16:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <_dtoa_r+0x450>)
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <_dtoa_r+0x454>)
 8004c1a:	f003 ea8c 	blx	8008134 <__aeabi_dmul>
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <_dtoa_r+0x450>)
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <_dtoa_r+0x454>)
 8004c22:	1c04      	adds	r4, r0, #0
 8004c24:	1c0d      	adds	r5, r1, #0
 8004c26:	1c30      	adds	r0, r6, #0
 8004c28:	1c39      	adds	r1, r7, #0
 8004c2a:	f003 ea84 	blx	8008134 <__aeabi_dmul>
 8004c2e:	1c0f      	adds	r7, r1, #0
 8004c30:	1c06      	adds	r6, r0, #0
 8004c32:	f003 ed70 	blx	8008714 <__aeabi_d2iz>
 8004c36:	4680      	mov	r8, r0
 8004c38:	f003 ea0e 	blx	8008058 <__aeabi_i2d>
 8004c3c:	1c02      	adds	r2, r0, #0
 8004c3e:	1c0b      	adds	r3, r1, #0
 8004c40:	1c30      	adds	r0, r6, #0
 8004c42:	1c39      	adds	r1, r7, #0
 8004c44:	f003 e86c 	blx	8007d20 <__aeabi_dsub>
 8004c48:	4643      	mov	r3, r8
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	0e1b      	lsrs	r3, r3, #24
 8004c50:	1c06      	adds	r6, r0, #0
 8004c52:	1c0f      	adds	r7, r1, #0
 8004c54:	4650      	mov	r0, sl
 8004c56:	2101      	movs	r1, #1
 8004c58:	7003      	strb	r3, [r0, #0]
 8004c5a:	4698      	mov	r8, r3
 8004c5c:	448a      	add	sl, r1
 8004c5e:	1c30      	adds	r0, r6, #0
 8004c60:	1c39      	adds	r1, r7, #0
 8004c62:	1c22      	adds	r2, r4, #0
 8004c64:	1c2b      	adds	r3, r5, #0
 8004c66:	f003 ed26 	blx	80086b4 <__aeabi_dcmplt>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0bf      	beq.n	8004bee <_dtoa_r+0x376>
 8004c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c70:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004c72:	465c      	mov	r4, fp
 8004c74:	1c17      	adds	r7, r2, #0
 8004c76:	46d3      	mov	fp, sl
 8004c78:	9507      	str	r5, [sp, #28]
 8004c7a:	e1c9      	b.n	8005010 <_dtoa_r+0x798>
 8004c7c:	032b      	lsls	r3, r5, #12
 8004c7e:	d000      	beq.n	8004c82 <_dtoa_r+0x40a>
 8004c80:	e640      	b.n	8004904 <_dtoa_r+0x8c>
 8004c82:	4f18      	ldr	r7, [pc, #96]	; (8004ce4 <_dtoa_r+0x46c>)
 8004c84:	e63f      	b.n	8004906 <_dtoa_r+0x8e>
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	3ff80000 	.word	0x3ff80000
 8004c90:	636f4361 	.word	0x636f4361
 8004c94:	3fd287a7 	.word	0x3fd287a7
 8004c98:	8b60c8b3 	.word	0x8b60c8b3
 8004c9c:	3fc68a28 	.word	0x3fc68a28
 8004ca0:	509f79fb 	.word	0x509f79fb
 8004ca4:	3fd34413 	.word	0x3fd34413
	...
 8004cb4:	3ff00000 	.word	0x3ff00000
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	401c0000 	.word	0x401c0000
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	3fe00000 	.word	0x3fe00000
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	40240000 	.word	0x40240000
 8004cd0:	3ff00000 	.word	0x3ff00000
 8004cd4:	fffffc01 	.word	0xfffffc01
 8004cd8:	08008c78 	.word	0x08008c78
 8004cdc:	08008d68 	.word	0x08008d68
 8004ce0:	fcc00000 	.word	0xfcc00000
 8004ce4:	08009070 	.word	0x08009070
 8004ce8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004cea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004cec:	4680      	mov	r8, r0
 8004cee:	1c0e      	adds	r6, r1, #0
 8004cf0:	4bd9      	ldr	r3, [pc, #868]	; (8005058 <_dtoa_r+0x7e0>)
 8004cf2:	4446      	add	r6, r8
 8004cf4:	429e      	cmp	r6, r3
 8004cf6:	da00      	bge.n	8004cfa <_dtoa_r+0x482>
 8004cf8:	e1cc      	b.n	8005094 <_dtoa_r+0x81c>
 8004cfa:	48d8      	ldr	r0, [pc, #864]	; (800505c <_dtoa_r+0x7e4>)
 8004cfc:	1b80      	subs	r0, r0, r6
 8004cfe:	4085      	lsls	r5, r0
 8004d00:	4ad7      	ldr	r2, [pc, #860]	; (8005060 <_dtoa_r+0x7e8>)
 8004d02:	1c28      	adds	r0, r5, #0
 8004d04:	9d02      	ldr	r5, [sp, #8]
 8004d06:	18b3      	adds	r3, r6, r2
 8004d08:	40dd      	lsrs	r5, r3
 8004d0a:	4328      	orrs	r0, r5
 8004d0c:	f003 e992 	blx	8008034 <__aeabi_ui2d>
 8004d10:	4ad4      	ldr	r2, [pc, #848]	; (8005064 <_dtoa_r+0x7ec>)
 8004d12:	2301      	movs	r3, #1
 8004d14:	1889      	adds	r1, r1, r2
 8004d16:	1e75      	subs	r5, r6, #1
 8004d18:	9316      	str	r3, [sp, #88]	; 0x58
 8004d1a:	e62b      	b.n	8004974 <_dtoa_r+0xfc>
 8004d1c:	4fd2      	ldr	r7, [pc, #840]	; (8005068 <_dtoa_r+0x7f0>)
 8004d1e:	e5e0      	b.n	80048e2 <_dtoa_r+0x6a>
 8004d20:	2000      	movs	r0, #0
 8004d22:	9026      	str	r0, [sp, #152]	; 0x98
 8004d24:	2300      	movs	r3, #0
 8004d26:	6463      	str	r3, [r4, #68]	; 0x44
 8004d28:	1c20      	adds	r0, r4, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f001 f9f4 	bl	8006118 <_Balloc>
 8004d30:	2301      	movs	r3, #1
 8004d32:	425b      	negs	r3, r3
 8004d34:	4683      	mov	fp, r0
 8004d36:	6420      	str	r0, [r4, #64]	; 0x40
 8004d38:	2501      	movs	r5, #1
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8004d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d40:	9512      	str	r5, [sp, #72]	; 0x48
 8004d42:	9027      	str	r0, [sp, #156]	; 0x9c
 8004d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da00      	bge.n	8004d4c <_dtoa_r+0x4d4>
 8004d4a:	e0b6      	b.n	8004eba <_dtoa_r+0x642>
 8004d4c:	9d07      	ldr	r5, [sp, #28]
 8004d4e:	2d0e      	cmp	r5, #14
 8004d50:	dd00      	ble.n	8004d54 <_dtoa_r+0x4dc>
 8004d52:	e0b2      	b.n	8004eba <_dtoa_r+0x642>
 8004d54:	4ac5      	ldr	r2, [pc, #788]	; (800506c <_dtoa_r+0x7f4>)
 8004d56:	00eb      	lsls	r3, r5, #3
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d60:	9004      	str	r0, [sp, #16]
 8004d62:	9105      	str	r1, [sp, #20]
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	dc03      	bgt.n	8004d70 <_dtoa_r+0x4f8>
 8004d68:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	da00      	bge.n	8004d70 <_dtoa_r+0x4f8>
 8004d6e:	e319      	b.n	80053a4 <_dtoa_r+0xb2c>
 8004d70:	9e02      	ldr	r6, [sp, #8]
 8004d72:	9f03      	ldr	r7, [sp, #12]
 8004d74:	9a04      	ldr	r2, [sp, #16]
 8004d76:	9b05      	ldr	r3, [sp, #20]
 8004d78:	1c30      	adds	r0, r6, #0
 8004d7a:	1c39      	adds	r1, r7, #0
 8004d7c:	f003 eb22 	blx	80083c4 <__aeabi_ddiv>
 8004d80:	f003 ecc8 	blx	8008714 <__aeabi_d2iz>
 8004d84:	4680      	mov	r8, r0
 8004d86:	f003 e968 	blx	8008058 <__aeabi_i2d>
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	f003 e9d2 	blx	8008134 <__aeabi_dmul>
 8004d92:	1c02      	adds	r2, r0, #0
 8004d94:	1c0b      	adds	r3, r1, #0
 8004d96:	1c30      	adds	r0, r6, #0
 8004d98:	1c39      	adds	r1, r7, #0
 8004d9a:	f002 efc2 	blx	8007d20 <__aeabi_dsub>
 8004d9e:	4643      	mov	r3, r8
 8004da0:	3330      	adds	r3, #48	; 0x30
 8004da2:	465a      	mov	r2, fp
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	465d      	mov	r5, fp
 8004daa:	1c06      	adds	r6, r0, #0
 8004dac:	1c0f      	adds	r7, r1, #0
 8004dae:	3501      	adds	r5, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d048      	beq.n	8004e46 <_dtoa_r+0x5ce>
 8004db4:	4ba5      	ldr	r3, [pc, #660]	; (800504c <_dtoa_r+0x7d4>)
 8004db6:	4aa4      	ldr	r2, [pc, #656]	; (8005048 <_dtoa_r+0x7d0>)
 8004db8:	f003 e9bc 	blx	8008134 <__aeabi_dmul>
 8004dbc:	4aa4      	ldr	r2, [pc, #656]	; (8005050 <_dtoa_r+0x7d8>)
 8004dbe:	4ba5      	ldr	r3, [pc, #660]	; (8005054 <_dtoa_r+0x7dc>)
 8004dc0:	1c06      	adds	r6, r0, #0
 8004dc2:	1c0f      	adds	r7, r1, #0
 8004dc4:	f003 ec6a 	blx	800869c <__aeabi_dcmpeq>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d000      	beq.n	8004dce <_dtoa_r+0x556>
 8004dcc:	e3d9      	b.n	8005582 <_dtoa_r+0xd0a>
 8004dce:	46a9      	mov	r9, r5
 8004dd0:	46a2      	mov	sl, r4
 8004dd2:	9c04      	ldr	r4, [sp, #16]
 8004dd4:	9d05      	ldr	r5, [sp, #20]
 8004dd6:	e00e      	b.n	8004df6 <_dtoa_r+0x57e>
 8004dd8:	1c10      	adds	r0, r2, #0
 8004dda:	1c19      	adds	r1, r3, #0
 8004ddc:	4b9b      	ldr	r3, [pc, #620]	; (800504c <_dtoa_r+0x7d4>)
 8004dde:	4a9a      	ldr	r2, [pc, #616]	; (8005048 <_dtoa_r+0x7d0>)
 8004de0:	f003 e9a8 	blx	8008134 <__aeabi_dmul>
 8004de4:	4a9a      	ldr	r2, [pc, #616]	; (8005050 <_dtoa_r+0x7d8>)
 8004de6:	4b9b      	ldr	r3, [pc, #620]	; (8005054 <_dtoa_r+0x7dc>)
 8004de8:	1c06      	adds	r6, r0, #0
 8004dea:	1c0f      	adds	r7, r1, #0
 8004dec:	f003 ec56 	blx	800869c <__aeabi_dcmpeq>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d000      	beq.n	8004df6 <_dtoa_r+0x57e>
 8004df4:	e3c3      	b.n	800557e <_dtoa_r+0xd06>
 8004df6:	1c22      	adds	r2, r4, #0
 8004df8:	1c2b      	adds	r3, r5, #0
 8004dfa:	1c30      	adds	r0, r6, #0
 8004dfc:	1c39      	adds	r1, r7, #0
 8004dfe:	f003 eae2 	blx	80083c4 <__aeabi_ddiv>
 8004e02:	f003 ec88 	blx	8008714 <__aeabi_d2iz>
 8004e06:	4680      	mov	r8, r0
 8004e08:	f003 e926 	blx	8008058 <__aeabi_i2d>
 8004e0c:	1c22      	adds	r2, r4, #0
 8004e0e:	1c2b      	adds	r3, r5, #0
 8004e10:	f003 e990 	blx	8008134 <__aeabi_dmul>
 8004e14:	1c02      	adds	r2, r0, #0
 8004e16:	1c0b      	adds	r3, r1, #0
 8004e18:	1c30      	adds	r0, r6, #0
 8004e1a:	1c39      	adds	r1, r7, #0
 8004e1c:	f002 ef80 	blx	8007d20 <__aeabi_dsub>
 8004e20:	1c0b      	adds	r3, r1, #0
 8004e22:	1c0f      	adds	r7, r1, #0
 8004e24:	4641      	mov	r1, r8
 8004e26:	3130      	adds	r1, #48	; 0x30
 8004e28:	1c02      	adds	r2, r0, #0
 8004e2a:	1c06      	adds	r6, r0, #0
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	7001      	strb	r1, [r0, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	4489      	add	r9, r1
 8004e34:	4648      	mov	r0, r9
 8004e36:	4659      	mov	r1, fp
 8004e38:	1a40      	subs	r0, r0, r1
 8004e3a:	4684      	mov	ip, r0
 8004e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3e:	4560      	cmp	r0, ip
 8004e40:	d1ca      	bne.n	8004dd8 <_dtoa_r+0x560>
 8004e42:	464d      	mov	r5, r9
 8004e44:	4654      	mov	r4, sl
 8004e46:	1c32      	adds	r2, r6, #0
 8004e48:	1c3b      	adds	r3, r7, #0
 8004e4a:	1c30      	adds	r0, r6, #0
 8004e4c:	1c39      	adds	r1, r7, #0
 8004e4e:	f002 ef6a 	blx	8007d24 <__adddf3>
 8004e52:	1c06      	adds	r6, r0, #0
 8004e54:	1c0f      	adds	r7, r1, #0
 8004e56:	1c32      	adds	r2, r6, #0
 8004e58:	9804      	ldr	r0, [sp, #16]
 8004e5a:	9905      	ldr	r1, [sp, #20]
 8004e5c:	1c3b      	adds	r3, r7, #0
 8004e5e:	f003 ec2a 	blx	80086b4 <__aeabi_dcmplt>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d10c      	bne.n	8004e80 <_dtoa_r+0x608>
 8004e66:	9804      	ldr	r0, [sp, #16]
 8004e68:	9905      	ldr	r1, [sp, #20]
 8004e6a:	1c32      	adds	r2, r6, #0
 8004e6c:	1c3b      	adds	r3, r7, #0
 8004e6e:	f003 ec16 	blx	800869c <__aeabi_dcmpeq>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d100      	bne.n	8004e78 <_dtoa_r+0x600>
 8004e76:	e384      	b.n	8005582 <_dtoa_r+0xd0a>
 8004e78:	4640      	mov	r0, r8
 8004e7a:	07c0      	lsls	r0, r0, #31
 8004e7c:	d400      	bmi.n	8004e80 <_dtoa_r+0x608>
 8004e7e:	e380      	b.n	8005582 <_dtoa_r+0xd0a>
 8004e80:	1e6b      	subs	r3, r5, #1
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	465f      	mov	r7, fp
 8004e86:	46ab      	mov	fp, r5
 8004e88:	9d07      	ldr	r5, [sp, #28]
 8004e8a:	1c19      	adds	r1, r3, #0
 8004e8c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004e8e:	465a      	mov	r2, fp
 8004e90:	e002      	b.n	8004e98 <_dtoa_r+0x620>
 8004e92:	3a02      	subs	r2, #2
 8004e94:	7811      	ldrb	r1, [r2, #0]
 8004e96:	1c1a      	adds	r2, r3, #0
 8004e98:	1e53      	subs	r3, r2, #1
 8004e9a:	2939      	cmp	r1, #57	; 0x39
 8004e9c:	d001      	beq.n	8004ea2 <_dtoa_r+0x62a>
 8004e9e:	f000 fc0d 	bl	80056bc <_dtoa_r+0xe44>
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	d1f5      	bne.n	8004e92 <_dtoa_r+0x61a>
 8004ea6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004ea8:	2330      	movs	r3, #48	; 0x30
 8004eaa:	703b      	strb	r3, [r7, #0]
 8004eac:	4693      	mov	fp, r2
 8004eae:	3501      	adds	r5, #1
 8004eb0:	1c3b      	adds	r3, r7, #0
 8004eb2:	2231      	movs	r2, #49	; 0x31
 8004eb4:	9507      	str	r5, [sp, #28]
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e0aa      	b.n	8005010 <_dtoa_r+0x798>
 8004eba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	d000      	beq.n	8004ec2 <_dtoa_r+0x64a>
 8004ec0:	e0f1      	b.n	80050a6 <_dtoa_r+0x82e>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8004ec6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004ec8:	4681      	mov	r9, r0
 8004eca:	4651      	mov	r1, sl
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	dd0c      	ble.n	8004eea <_dtoa_r+0x672>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	dd0a      	ble.n	8004eea <_dtoa_r+0x672>
 8004ed4:	4653      	mov	r3, sl
 8004ed6:	45ba      	cmp	sl, r7
 8004ed8:	dd00      	ble.n	8004edc <_dtoa_r+0x664>
 8004eda:	1c3b      	adds	r3, r7, #0
 8004edc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ede:	4650      	mov	r0, sl
 8004ee0:	1aed      	subs	r5, r5, r3
 8004ee2:	1ac0      	subs	r0, r0, r3
 8004ee4:	950a      	str	r5, [sp, #40]	; 0x28
 8004ee6:	1aff      	subs	r7, r7, r3
 8004ee8:	4682      	mov	sl, r0
 8004eea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	dd1a      	ble.n	8004f26 <_dtoa_r+0x6ae>
 8004ef0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	d100      	bne.n	8004ef8 <_dtoa_r+0x680>
 8004ef6:	e33b      	b.n	8005570 <_dtoa_r+0xcf8>
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	dd10      	ble.n	8004f1e <_dtoa_r+0x6a6>
 8004efc:	4649      	mov	r1, r9
 8004efe:	1c32      	adds	r2, r6, #0
 8004f00:	1c20      	adds	r0, r4, #0
 8004f02:	f001 fae7 	bl	80064d4 <__pow5mult>
 8004f06:	4681      	mov	r9, r0
 8004f08:	4649      	mov	r1, r9
 8004f0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f0c:	1c20      	adds	r0, r4, #0
 8004f0e:	f001 fa35 	bl	800637c <__multiply>
 8004f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f14:	1c05      	adds	r5, r0, #0
 8004f16:	1c20      	adds	r0, r4, #0
 8004f18:	f001 f928 	bl	800616c <_Bfree>
 8004f1c:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f20:	1baa      	subs	r2, r5, r6
 8004f22:	d000      	beq.n	8004f26 <_dtoa_r+0x6ae>
 8004f24:	e369      	b.n	80055fa <_dtoa_r+0xd82>
 8004f26:	1c20      	adds	r0, r4, #0
 8004f28:	2101      	movs	r1, #1
 8004f2a:	f001 fa1b 	bl	8006364 <__i2b>
 8004f2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004f30:	4680      	mov	r8, r0
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	dd05      	ble.n	8004f42 <_dtoa_r+0x6ca>
 8004f36:	4641      	mov	r1, r8
 8004f38:	1c20      	adds	r0, r4, #0
 8004f3a:	1c2a      	adds	r2, r5, #0
 8004f3c:	f001 faca 	bl	80064d4 <__pow5mult>
 8004f40:	4680      	mov	r8, r0
 8004f42:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004f44:	2500      	movs	r5, #0
 8004f46:	2801      	cmp	r0, #1
 8004f48:	dc00      	bgt.n	8004f4c <_dtoa_r+0x6d4>
 8004f4a:	e259      	b.n	8005400 <_dtoa_r+0xb88>
 8004f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004f4e:	2301      	movs	r3, #1
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d000      	beq.n	8004f56 <_dtoa_r+0x6de>
 8004f54:	e1fd      	b.n	8005352 <_dtoa_r+0xada>
 8004f56:	4453      	add	r3, sl
 8004f58:	221f      	movs	r2, #31
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <_dtoa_r+0x6e8>
 8004f5e:	e152      	b.n	8005206 <_dtoa_r+0x98e>
 8004f60:	2220      	movs	r2, #32
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	2a04      	cmp	r2, #4
 8004f66:	dc01      	bgt.n	8004f6c <_dtoa_r+0x6f4>
 8004f68:	f000 fc47 	bl	80057fa <_dtoa_r+0xf82>
 8004f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f6e:	221c      	movs	r2, #28
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	18c0      	adds	r0, r0, r3
 8004f74:	900a      	str	r0, [sp, #40]	; 0x28
 8004f76:	18ff      	adds	r7, r7, r3
 8004f78:	449a      	add	sl, r3
 8004f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	dd04      	ble.n	8004f8a <_dtoa_r+0x712>
 8004f80:	1c20      	adds	r0, r4, #0
 8004f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f84:	f001 fafe 	bl	8006584 <__lshift>
 8004f88:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f8a:	4653      	mov	r3, sl
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd05      	ble.n	8004f9c <_dtoa_r+0x724>
 8004f90:	4641      	mov	r1, r8
 8004f92:	1c20      	adds	r0, r4, #0
 8004f94:	4652      	mov	r2, sl
 8004f96:	f001 faf5 	bl	8006584 <__lshift>
 8004f9a:	4680      	mov	r8, r0
 8004f9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d000      	beq.n	8004fa4 <_dtoa_r+0x72c>
 8004fa2:	e1e1      	b.n	8005368 <_dtoa_r+0xaf0>
 8004fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	2a02      	cmp	r2, #2
 8004faa:	dc00      	bgt.n	8004fae <_dtoa_r+0x736>
 8004fac:	2300      	movs	r3, #0
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	d100      	bne.n	8004fb4 <_dtoa_r+0x73c>
 8004fb2:	e0dd      	b.n	8005170 <_dtoa_r+0x8f8>
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dd00      	ble.n	8004fbc <_dtoa_r+0x744>
 8004fba:	e0d9      	b.n	8005170 <_dtoa_r+0x8f8>
 8004fbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d000      	beq.n	8004fc4 <_dtoa_r+0x74c>
 8004fc2:	e0cf      	b.n	8005164 <_dtoa_r+0x8ec>
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1c20      	adds	r0, r4, #0
 8004fc8:	2205      	movs	r2, #5
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f001 f8da 	bl	8006184 <__multadd>
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fd6:	f001 fb3d 	bl	8006654 <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dc00      	bgt.n	8004fe0 <_dtoa_r+0x768>
 8004fde:	e0c1      	b.n	8005164 <_dtoa_r+0x8ec>
 8004fe0:	9d07      	ldr	r5, [sp, #28]
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	2331      	movs	r3, #49	; 0x31
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	2001      	movs	r0, #1
 8004fea:	7013      	strb	r3, [r2, #0]
 8004fec:	9507      	str	r5, [sp, #28]
 8004fee:	465f      	mov	r7, fp
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	4483      	add	fp, r0
 8004ff4:	1c20      	adds	r0, r4, #0
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	f001 f8b8 	bl	800616c <_Bfree>
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <_dtoa_r+0x798>
 8005002:	454d      	cmp	r5, r9
 8005004:	d000      	beq.n	8005008 <_dtoa_r+0x790>
 8005006:	e10c      	b.n	8005222 <_dtoa_r+0x9aa>
 8005008:	1c20      	adds	r0, r4, #0
 800500a:	4649      	mov	r1, r9
 800500c:	f001 f8ae 	bl	800616c <_Bfree>
 8005010:	1c20      	adds	r0, r4, #0
 8005012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005014:	f001 f8aa 	bl	800616c <_Bfree>
 8005018:	2300      	movs	r3, #0
 800501a:	4658      	mov	r0, fp
 800501c:	7003      	strb	r3, [r0, #0]
 800501e:	9b07      	ldr	r3, [sp, #28]
 8005020:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005022:	3301      	adds	r3, #1
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8005028:	2d00      	cmp	r5, #0
 800502a:	d100      	bne.n	800502e <_dtoa_r+0x7b6>
 800502c:	e459      	b.n	80048e2 <_dtoa_r+0x6a>
 800502e:	6028      	str	r0, [r5, #0]
 8005030:	e457      	b.n	80048e2 <_dtoa_r+0x6a>
 8005032:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005034:	9807      	ldr	r0, [sp, #28]
 8005036:	1a2d      	subs	r5, r5, r0
 8005038:	950a      	str	r5, [sp, #40]	; 0x28
 800503a:	4245      	negs	r5, r0
 800503c:	950f      	str	r5, [sp, #60]	; 0x3c
 800503e:	2500      	movs	r5, #0
 8005040:	9511      	str	r5, [sp, #68]	; 0x44
 8005042:	e4e6      	b.n	8004a12 <_dtoa_r+0x19a>
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	00000000 	.word	0x00000000
 800504c:	40240000 	.word	0x40240000
	...
 8005058:	fffffbef 	.word	0xfffffbef
 800505c:	fffffc0e 	.word	0xfffffc0e
 8005060:	00000412 	.word	0x00000412
 8005064:	fe100000 	.word	0xfe100000
 8005068:	0800906c 	.word	0x0800906c
 800506c:	08008c78 	.word	0x08008c78
 8005070:	426d      	negs	r5, r5
 8005072:	2300      	movs	r3, #0
 8005074:	950a      	str	r5, [sp, #40]	; 0x28
 8005076:	469a      	mov	sl, r3
 8005078:	e4c3      	b.n	8004a02 <_dtoa_r+0x18a>
 800507a:	9807      	ldr	r0, [sp, #28]
 800507c:	f002 efec 	blx	8008058 <__aeabi_i2d>
 8005080:	1c3b      	adds	r3, r7, #0
 8005082:	1c32      	adds	r2, r6, #0
 8005084:	f003 eb0a 	blx	800869c <__aeabi_dcmpeq>
 8005088:	4243      	negs	r3, r0
 800508a:	4143      	adcs	r3, r0
 800508c:	9807      	ldr	r0, [sp, #28]
 800508e:	1ac0      	subs	r0, r0, r3
 8005090:	9007      	str	r0, [sp, #28]
 8005092:	e498      	b.n	80049c6 <_dtoa_r+0x14e>
 8005094:	48d6      	ldr	r0, [pc, #856]	; (80053f0 <_dtoa_r+0xb78>)
 8005096:	9902      	ldr	r1, [sp, #8]
 8005098:	1b80      	subs	r0, r0, r6
 800509a:	4081      	lsls	r1, r0
 800509c:	1c08      	adds	r0, r1, #0
 800509e:	e635      	b.n	8004d0c <_dtoa_r+0x494>
 80050a0:	2100      	movs	r1, #0
 80050a2:	910e      	str	r1, [sp, #56]	; 0x38
 80050a4:	e4a5      	b.n	80049f2 <_dtoa_r+0x17a>
 80050a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80050a8:	2801      	cmp	r0, #1
 80050aa:	dc00      	bgt.n	80050ae <_dtoa_r+0x836>
 80050ac:	e2c5      	b.n	800563a <_dtoa_r+0xdc2>
 80050ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050b2:	3e01      	subs	r6, #1
 80050b4:	42b5      	cmp	r5, r6
 80050b6:	da00      	bge.n	80050ba <_dtoa_r+0x842>
 80050b8:	e266      	b.n	8005588 <_dtoa_r+0xd10>
 80050ba:	1bae      	subs	r6, r5, r6
 80050bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050be:	2d00      	cmp	r5, #0
 80050c0:	da00      	bge.n	80050c4 <_dtoa_r+0x84c>
 80050c2:	e2c2      	b.n	800564a <_dtoa_r+0xdd2>
 80050c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80050ca:	1c20      	adds	r0, r4, #0
 80050cc:	18ed      	adds	r5, r5, r3
 80050ce:	2101      	movs	r1, #1
 80050d0:	950a      	str	r5, [sp, #40]	; 0x28
 80050d2:	449a      	add	sl, r3
 80050d4:	f001 f946 	bl	8006364 <__i2b>
 80050d8:	4681      	mov	r9, r0
 80050da:	e6f6      	b.n	8004eca <_dtoa_r+0x652>
 80050dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050de:	2a04      	cmp	r2, #4
 80050e0:	d100      	bne.n	80050e4 <_dtoa_r+0x86c>
 80050e2:	e232      	b.n	800554a <_dtoa_r+0xcd2>
 80050e4:	2a05      	cmp	r2, #5
 80050e6:	d000      	beq.n	80050ea <_dtoa_r+0x872>
 80050e8:	e61c      	b.n	8004d24 <_dtoa_r+0x4ac>
 80050ea:	2501      	movs	r5, #1
 80050ec:	9512      	str	r5, [sp, #72]	; 0x48
 80050ee:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80050f0:	9807      	ldr	r0, [sp, #28]
 80050f2:	182d      	adds	r5, r5, r0
 80050f4:	1c2e      	adds	r6, r5, #0
 80050f6:	9510      	str	r5, [sp, #64]	; 0x40
 80050f8:	3601      	adds	r6, #1
 80050fa:	2500      	movs	r5, #0
 80050fc:	220e      	movs	r2, #14
 80050fe:	42b2      	cmp	r2, r6
 8005100:	416d      	adcs	r5, r5
 8005102:	2e00      	cmp	r6, #0
 8005104:	dc00      	bgt.n	8005108 <_dtoa_r+0x890>
 8005106:	e224      	b.n	8005552 <_dtoa_r+0xcda>
 8005108:	401d      	ands	r5, r3
 800510a:	9609      	str	r6, [sp, #36]	; 0x24
 800510c:	e4a4      	b.n	8004a58 <_dtoa_r+0x1e0>
 800510e:	4648      	mov	r0, r9
 8005110:	f002 efa2 	blx	8008058 <__aeabi_i2d>
 8005114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005118:	f003 e80c 	blx	8008134 <__aeabi_dmul>
 800511c:	4bad      	ldr	r3, [pc, #692]	; (80053d4 <_dtoa_r+0xb5c>)
 800511e:	4aac      	ldr	r2, [pc, #688]	; (80053d0 <_dtoa_r+0xb58>)
 8005120:	f002 ee00 	blx	8007d24 <__adddf3>
 8005124:	1c06      	adds	r6, r0, #0
 8005126:	48b3      	ldr	r0, [pc, #716]	; (80053f4 <_dtoa_r+0xb7c>)
 8005128:	180f      	adds	r7, r1, r0
 800512a:	4aab      	ldr	r2, [pc, #684]	; (80053d8 <_dtoa_r+0xb60>)
 800512c:	4bab      	ldr	r3, [pc, #684]	; (80053dc <_dtoa_r+0xb64>)
 800512e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005130:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005132:	f002 edf6 	blx	8007d20 <__aeabi_dsub>
 8005136:	1c32      	adds	r2, r6, #0
 8005138:	1c3b      	adds	r3, r7, #0
 800513a:	900c      	str	r0, [sp, #48]	; 0x30
 800513c:	910d      	str	r1, [sp, #52]	; 0x34
 800513e:	f003 eade 	blx	80086fc <__aeabi_dcmpgt>
 8005142:	2800      	cmp	r0, #0
 8005144:	d000      	beq.n	8005148 <_dtoa_r+0x8d0>
 8005146:	e0a2      	b.n	800528e <_dtoa_r+0xa16>
 8005148:	2580      	movs	r5, #128	; 0x80
 800514a:	062d      	lsls	r5, r5, #24
 800514c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800514e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005150:	1c32      	adds	r2, r6, #0
 8005152:	197b      	adds	r3, r7, r5
 8005154:	f003 eaae 	blx	80086b4 <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	d100      	bne.n	800515e <_dtoa_r+0x8e6>
 800515c:	e5f2      	b.n	8004d44 <_dtoa_r+0x4cc>
 800515e:	2000      	movs	r0, #0
 8005160:	4680      	mov	r8, r0
 8005162:	4681      	mov	r9, r0
 8005164:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005166:	43ed      	mvns	r5, r5
 8005168:	9507      	str	r5, [sp, #28]
 800516a:	465f      	mov	r7, fp
 800516c:	2500      	movs	r5, #0
 800516e:	e741      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005170:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005172:	2900      	cmp	r1, #0
 8005174:	d000      	beq.n	8005178 <_dtoa_r+0x900>
 8005176:	e166      	b.n	8005446 <_dtoa_r+0xbce>
 8005178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800517a:	46a2      	mov	sl, r4
 800517c:	2500      	movs	r5, #0
 800517e:	4644      	mov	r4, r8
 8005180:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005182:	4690      	mov	r8, r2
 8005184:	e006      	b.n	8005194 <_dtoa_r+0x91c>
 8005186:	1c31      	adds	r1, r6, #0
 8005188:	4650      	mov	r0, sl
 800518a:	220a      	movs	r2, #10
 800518c:	2300      	movs	r3, #0
 800518e:	f000 fff9 	bl	8006184 <__multadd>
 8005192:	1c06      	adds	r6, r0, #0
 8005194:	1c30      	adds	r0, r6, #0
 8005196:	1c21      	adds	r1, r4, #0
 8005198:	f7ff fac2 	bl	8004720 <quorem>
 800519c:	1c07      	adds	r7, r0, #0
 800519e:	3730      	adds	r7, #48	; 0x30
 80051a0:	465b      	mov	r3, fp
 80051a2:	555f      	strb	r7, [r3, r5]
 80051a4:	3501      	adds	r5, #1
 80051a6:	4545      	cmp	r5, r8
 80051a8:	dbed      	blt.n	8005186 <_dtoa_r+0x90e>
 80051aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ac:	46a0      	mov	r8, r4
 80051ae:	960b      	str	r6, [sp, #44]	; 0x2c
 80051b0:	4654      	mov	r4, sl
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc00      	bgt.n	80051b8 <_dtoa_r+0x940>
 80051b6:	e2e9      	b.n	800578c <_dtoa_r+0xf14>
 80051b8:	469a      	mov	sl, r3
 80051ba:	44da      	add	sl, fp
 80051bc:	2500      	movs	r5, #0
 80051be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c0:	1c20      	adds	r0, r4, #0
 80051c2:	2201      	movs	r2, #1
 80051c4:	f001 f9de 	bl	8006584 <__lshift>
 80051c8:	4641      	mov	r1, r8
 80051ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80051cc:	f001 fa42 	bl	8006654 <__mcmp>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	dc00      	bgt.n	80051d6 <_dtoa_r+0x95e>
 80051d4:	e27b      	b.n	80056ce <_dtoa_r+0xe56>
 80051d6:	4656      	mov	r6, sl
 80051d8:	3e01      	subs	r6, #1
 80051da:	7833      	ldrb	r3, [r6, #0]
 80051dc:	4652      	mov	r2, sl
 80051de:	4659      	mov	r1, fp
 80051e0:	e003      	b.n	80051ea <_dtoa_r+0x972>
 80051e2:	3a02      	subs	r2, #2
 80051e4:	7813      	ldrb	r3, [r2, #0]
 80051e6:	1c32      	adds	r2, r6, #0
 80051e8:	3e01      	subs	r6, #1
 80051ea:	2b39      	cmp	r3, #57	; 0x39
 80051ec:	d000      	beq.n	80051f0 <_dtoa_r+0x978>
 80051ee:	e296      	b.n	800571e <_dtoa_r+0xea6>
 80051f0:	42b1      	cmp	r1, r6
 80051f2:	d1f6      	bne.n	80051e2 <_dtoa_r+0x96a>
 80051f4:	4692      	mov	sl, r2
 80051f6:	9a07      	ldr	r2, [sp, #28]
 80051f8:	2331      	movs	r3, #49	; 0x31
 80051fa:	3201      	adds	r2, #1
 80051fc:	9207      	str	r2, [sp, #28]
 80051fe:	700b      	strb	r3, [r1, #0]
 8005200:	1c0f      	adds	r7, r1, #0
 8005202:	46d3      	mov	fp, sl
 8005204:	e6f6      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005206:	231c      	movs	r3, #28
 8005208:	990a      	ldr	r1, [sp, #40]	; 0x28
 800520a:	18c9      	adds	r1, r1, r3
 800520c:	910a      	str	r1, [sp, #40]	; 0x28
 800520e:	18ff      	adds	r7, r7, r3
 8005210:	449a      	add	sl, r3
 8005212:	e6b2      	b.n	8004f7a <_dtoa_r+0x702>
 8005214:	9a02      	ldr	r2, [sp, #8]
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	920c      	str	r2, [sp, #48]	; 0x30
 800521a:	930d      	str	r3, [sp, #52]	; 0x34
 800521c:	2302      	movs	r3, #2
 800521e:	4699      	mov	r9, r3
 8005220:	e44d      	b.n	8004abe <_dtoa_r+0x246>
 8005222:	2d00      	cmp	r5, #0
 8005224:	d100      	bne.n	8005228 <_dtoa_r+0x9b0>
 8005226:	e6ef      	b.n	8005008 <_dtoa_r+0x790>
 8005228:	1c20      	adds	r0, r4, #0
 800522a:	1c29      	adds	r1, r5, #0
 800522c:	f000 ff9e 	bl	800616c <_Bfree>
 8005230:	e6ea      	b.n	8005008 <_dtoa_r+0x790>
 8005232:	9b07      	ldr	r3, [sp, #28]
 8005234:	425d      	negs	r5, r3
 8005236:	2d00      	cmp	r5, #0
 8005238:	d100      	bne.n	800523c <_dtoa_r+0x9c4>
 800523a:	e1ad      	b.n	8005598 <_dtoa_r+0xd20>
 800523c:	230f      	movs	r3, #15
 800523e:	402b      	ands	r3, r5
 8005240:	4a6d      	ldr	r2, [pc, #436]	; (80053f8 <_dtoa_r+0xb80>)
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	9802      	ldr	r0, [sp, #8]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f002 ef72 	blx	8008134 <__aeabi_dmul>
 8005252:	112d      	asrs	r5, r5, #4
 8005254:	900c      	str	r0, [sp, #48]	; 0x30
 8005256:	910d      	str	r1, [sp, #52]	; 0x34
 8005258:	2d00      	cmp	r5, #0
 800525a:	d100      	bne.n	800525e <_dtoa_r+0x9e6>
 800525c:	e2bf      	b.n	80057de <_dtoa_r+0xf66>
 800525e:	2002      	movs	r0, #2
 8005260:	4681      	mov	r9, r0
 8005262:	4e66      	ldr	r6, [pc, #408]	; (80053fc <_dtoa_r+0xb84>)
 8005264:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005266:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005268:	46a0      	mov	r8, r4
 800526a:	2701      	movs	r7, #1
 800526c:	464c      	mov	r4, r9
 800526e:	422f      	tst	r7, r5
 8005270:	d004      	beq.n	800527c <_dtoa_r+0xa04>
 8005272:	6832      	ldr	r2, [r6, #0]
 8005274:	6873      	ldr	r3, [r6, #4]
 8005276:	3401      	adds	r4, #1
 8005278:	f002 ef5c 	blx	8008134 <__aeabi_dmul>
 800527c:	106d      	asrs	r5, r5, #1
 800527e:	3608      	adds	r6, #8
 8005280:	2d00      	cmp	r5, #0
 8005282:	d1f4      	bne.n	800526e <_dtoa_r+0x9f6>
 8005284:	46a1      	mov	r9, r4
 8005286:	900c      	str	r0, [sp, #48]	; 0x30
 8005288:	910d      	str	r1, [sp, #52]	; 0x34
 800528a:	4644      	mov	r4, r8
 800528c:	e436      	b.n	8004afc <_dtoa_r+0x284>
 800528e:	2000      	movs	r0, #0
 8005290:	4680      	mov	r8, r0
 8005292:	4681      	mov	r9, r0
 8005294:	e6a4      	b.n	8004fe0 <_dtoa_r+0x768>
 8005296:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005298:	4a57      	ldr	r2, [pc, #348]	; (80053f8 <_dtoa_r+0xb80>)
 800529a:	3d01      	subs	r5, #1
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	1c32      	adds	r2, r6, #0
 80052a6:	1c3b      	adds	r3, r7, #0
 80052a8:	9514      	str	r5, [sp, #80]	; 0x50
 80052aa:	f002 ef44 	blx	8008134 <__aeabi_dmul>
 80052ae:	9018      	str	r0, [sp, #96]	; 0x60
 80052b0:	9119      	str	r1, [sp, #100]	; 0x64
 80052b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052b6:	f003 ea2e 	blx	8008714 <__aeabi_d2iz>
 80052ba:	1c05      	adds	r5, r0, #0
 80052bc:	f002 eecc 	blx	8008058 <__aeabi_i2d>
 80052c0:	1c02      	adds	r2, r0, #0
 80052c2:	1c0b      	adds	r3, r1, #0
 80052c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052c8:	f002 ed2a 	blx	8007d20 <__aeabi_dsub>
 80052cc:	1c0f      	adds	r7, r1, #0
 80052ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80052d0:	3530      	adds	r5, #48	; 0x30
 80052d2:	1c06      	adds	r6, r0, #0
 80052d4:	4658      	mov	r0, fp
 80052d6:	7005      	strb	r5, [r0, #0]
 80052d8:	4689      	mov	r9, r1
 80052da:	3001      	adds	r0, #1
 80052dc:	900c      	str	r0, [sp, #48]	; 0x30
 80052de:	44d9      	add	r9, fp
 80052e0:	1c05      	adds	r5, r0, #0
 80052e2:	2901      	cmp	r1, #1
 80052e4:	d01f      	beq.n	8005326 <_dtoa_r+0xaae>
 80052e6:	1c30      	adds	r0, r6, #0
 80052e8:	1c39      	adds	r1, r7, #0
 80052ea:	46a0      	mov	r8, r4
 80052ec:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <_dtoa_r+0xb68>)
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <_dtoa_r+0xb6c>)
 80052f0:	f002 ef20 	blx	8008134 <__aeabi_dmul>
 80052f4:	1c0f      	adds	r7, r1, #0
 80052f6:	1c06      	adds	r6, r0, #0
 80052f8:	f003 ea0c 	blx	8008714 <__aeabi_d2iz>
 80052fc:	1c04      	adds	r4, r0, #0
 80052fe:	f002 eeac 	blx	8008058 <__aeabi_i2d>
 8005302:	3430      	adds	r4, #48	; 0x30
 8005304:	1c02      	adds	r2, r0, #0
 8005306:	1c0b      	adds	r3, r1, #0
 8005308:	1c30      	adds	r0, r6, #0
 800530a:	1c39      	adds	r1, r7, #0
 800530c:	f002 ed08 	blx	8007d20 <__aeabi_dsub>
 8005310:	702c      	strb	r4, [r5, #0]
 8005312:	3501      	adds	r5, #1
 8005314:	454d      	cmp	r5, r9
 8005316:	d1e9      	bne.n	80052ec <_dtoa_r+0xa74>
 8005318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800531a:	1c06      	adds	r6, r0, #0
 800531c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800531e:	182d      	adds	r5, r5, r0
 8005320:	950c      	str	r5, [sp, #48]	; 0x30
 8005322:	1c0f      	adds	r7, r1, #0
 8005324:	4644      	mov	r4, r8
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <_dtoa_r+0xb70>)
 8005328:	4b30      	ldr	r3, [pc, #192]	; (80053ec <_dtoa_r+0xb74>)
 800532a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800532c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800532e:	f002 ecfa 	blx	8007d24 <__adddf3>
 8005332:	1c32      	adds	r2, r6, #0
 8005334:	1c3b      	adds	r3, r7, #0
 8005336:	f003 e9be 	blx	80086b4 <__aeabi_dcmplt>
 800533a:	2800      	cmp	r0, #0
 800533c:	d100      	bne.n	8005340 <_dtoa_r+0xac8>
 800533e:	e162      	b.n	8005606 <_dtoa_r+0xd8e>
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	3b01      	subs	r3, #1
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4698      	mov	r8, r3
 8005348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800534a:	465f      	mov	r7, fp
 800534c:	4641      	mov	r1, r8
 800534e:	1c1a      	adds	r2, r3, #0
 8005350:	e5a2      	b.n	8004e98 <_dtoa_r+0x620>
 8005352:	4642      	mov	r2, r8
 8005354:	6913      	ldr	r3, [r2, #16]
 8005356:	3303      	adds	r3, #3
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4443      	add	r3, r8
 800535c:	6858      	ldr	r0, [r3, #4]
 800535e:	f000 ffb5 	bl	80062cc <__hi0bits>
 8005362:	2320      	movs	r3, #32
 8005364:	1a1b      	subs	r3, r3, r0
 8005366:	e5f6      	b.n	8004f56 <_dtoa_r+0x6de>
 8005368:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800536a:	4641      	mov	r1, r8
 800536c:	f001 f972 	bl	8006654 <__mcmp>
 8005370:	2800      	cmp	r0, #0
 8005372:	db00      	blt.n	8005376 <_dtoa_r+0xafe>
 8005374:	e616      	b.n	8004fa4 <_dtoa_r+0x72c>
 8005376:	9907      	ldr	r1, [sp, #28]
 8005378:	3901      	subs	r1, #1
 800537a:	9107      	str	r1, [sp, #28]
 800537c:	220a      	movs	r2, #10
 800537e:	1c20      	adds	r0, r4, #0
 8005380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005382:	2300      	movs	r3, #0
 8005384:	f000 fefe 	bl	8006184 <__multadd>
 8005388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800538a:	900b      	str	r0, [sp, #44]	; 0x2c
 800538c:	2a00      	cmp	r2, #0
 800538e:	d14a      	bne.n	8005426 <_dtoa_r+0xbae>
 8005390:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005392:	2d00      	cmp	r5, #0
 8005394:	dc03      	bgt.n	800539e <_dtoa_r+0xb26>
 8005396:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005398:	2802      	cmp	r0, #2
 800539a:	dd00      	ble.n	800539e <_dtoa_r+0xb26>
 800539c:	e229      	b.n	80057f2 <_dtoa_r+0xf7a>
 800539e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80053a0:	9509      	str	r5, [sp, #36]	; 0x24
 80053a2:	e6e9      	b.n	8005178 <_dtoa_r+0x900>
 80053a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d000      	beq.n	80053ac <_dtoa_r+0xb34>
 80053aa:	e19f      	b.n	80056ec <_dtoa_r+0xe74>
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <_dtoa_r+0xb60>)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <_dtoa_r+0xb64>)
 80053b0:	9804      	ldr	r0, [sp, #16]
 80053b2:	9905      	ldr	r1, [sp, #20]
 80053b4:	f002 eebe 	blx	8008134 <__aeabi_dmul>
 80053b8:	9a02      	ldr	r2, [sp, #8]
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	f003 e992 	blx	80086e4 <__aeabi_dcmpge>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d100      	bne.n	80053c6 <_dtoa_r+0xb4e>
 80053c4:	e764      	b.n	8005290 <_dtoa_r+0xa18>
 80053c6:	2500      	movs	r5, #0
 80053c8:	46a8      	mov	r8, r5
 80053ca:	46a9      	mov	r9, r5
 80053cc:	e6ca      	b.n	8005164 <_dtoa_r+0x8ec>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	00000000 	.word	0x00000000
 80053d4:	401c0000 	.word	0x401c0000
 80053d8:	00000000 	.word	0x00000000
 80053dc:	40140000 	.word	0x40140000
 80053e0:	00000000 	.word	0x00000000
 80053e4:	40240000 	.word	0x40240000
 80053e8:	00000000 	.word	0x00000000
 80053ec:	3fe00000 	.word	0x3fe00000
 80053f0:	fffffbee 	.word	0xfffffbee
 80053f4:	fcc00000 	.word	0xfcc00000
 80053f8:	08008c78 	.word	0x08008c78
 80053fc:	08008d68 	.word	0x08008d68
 8005400:	9902      	ldr	r1, [sp, #8]
 8005402:	2900      	cmp	r1, #0
 8005404:	d000      	beq.n	8005408 <_dtoa_r+0xb90>
 8005406:	e5a1      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005408:	9a03      	ldr	r2, [sp, #12]
 800540a:	0313      	lsls	r3, r2, #12
 800540c:	d000      	beq.n	8005410 <_dtoa_r+0xb98>
 800540e:	e59d      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005410:	4bdb      	ldr	r3, [pc, #876]	; (8005780 <_dtoa_r+0xf08>)
 8005412:	4213      	tst	r3, r2
 8005414:	d100      	bne.n	8005418 <_dtoa_r+0xba0>
 8005416:	e599      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005418:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800541a:	2001      	movs	r0, #1
 800541c:	3501      	adds	r5, #1
 800541e:	950a      	str	r5, [sp, #40]	; 0x28
 8005420:	4482      	add	sl, r0
 8005422:	2501      	movs	r5, #1
 8005424:	e592      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005426:	4649      	mov	r1, r9
 8005428:	2300      	movs	r3, #0
 800542a:	1c20      	adds	r0, r4, #0
 800542c:	220a      	movs	r2, #10
 800542e:	f000 fea9 	bl	8006184 <__multadd>
 8005432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005434:	4681      	mov	r9, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc03      	bgt.n	8005442 <_dtoa_r+0xbca>
 800543a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800543c:	2802      	cmp	r0, #2
 800543e:	dd00      	ble.n	8005442 <_dtoa_r+0xbca>
 8005440:	e1d7      	b.n	80057f2 <_dtoa_r+0xf7a>
 8005442:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005444:	9109      	str	r1, [sp, #36]	; 0x24
 8005446:	2f00      	cmp	r7, #0
 8005448:	dd05      	ble.n	8005456 <_dtoa_r+0xbde>
 800544a:	4649      	mov	r1, r9
 800544c:	1c20      	adds	r0, r4, #0
 800544e:	1c3a      	adds	r2, r7, #0
 8005450:	f001 f898 	bl	8006584 <__lshift>
 8005454:	4681      	mov	r9, r0
 8005456:	4648      	mov	r0, r9
 8005458:	464b      	mov	r3, r9
 800545a:	900a      	str	r0, [sp, #40]	; 0x28
 800545c:	2d00      	cmp	r5, #0
 800545e:	d000      	beq.n	8005462 <_dtoa_r+0xbea>
 8005460:	e148      	b.n	80056f4 <_dtoa_r+0xe7c>
 8005462:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005464:	465b      	mov	r3, fp
 8005466:	3b01      	subs	r3, #1
 8005468:	195b      	adds	r3, r3, r5
 800546a:	9802      	ldr	r0, [sp, #8]
 800546c:	930e      	str	r3, [sp, #56]	; 0x38
 800546e:	2301      	movs	r3, #1
 8005470:	4018      	ands	r0, r3
 8005472:	4642      	mov	r2, r8
 8005474:	465e      	mov	r6, fp
 8005476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800547c:	9208      	str	r2, [sp, #32]
 800547e:	960f      	str	r6, [sp, #60]	; 0x3c
 8005480:	464d      	mov	r5, r9
 8005482:	4698      	mov	r8, r3
 8005484:	9908      	ldr	r1, [sp, #32]
 8005486:	1c38      	adds	r0, r7, #0
 8005488:	f7ff f94a 	bl	8004720 <quorem>
 800548c:	9009      	str	r0, [sp, #36]	; 0x24
 800548e:	3030      	adds	r0, #48	; 0x30
 8005490:	900a      	str	r0, [sp, #40]	; 0x28
 8005492:	1c29      	adds	r1, r5, #0
 8005494:	1c38      	adds	r0, r7, #0
 8005496:	f001 f8dd 	bl	8006654 <__mcmp>
 800549a:	4642      	mov	r2, r8
 800549c:	4683      	mov	fp, r0
 800549e:	9908      	ldr	r1, [sp, #32]
 80054a0:	1c20      	adds	r0, r4, #0
 80054a2:	f001 f8f5 	bl	8006690 <__mdiff>
 80054a6:	68c3      	ldr	r3, [r0, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4681      	mov	r9, r0
 80054ac:	4692      	mov	sl, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <_dtoa_r+0xcb4>
 80054b2:	1c20      	adds	r0, r4, #0
 80054b4:	4649      	mov	r1, r9
 80054b6:	f000 fe59 	bl	800616c <_Bfree>
 80054ba:	9826      	ldr	r0, [sp, #152]	; 0x98
 80054bc:	4653      	mov	r3, sl
 80054be:	4303      	orrs	r3, r0
 80054c0:	d103      	bne.n	80054ca <_dtoa_r+0xc52>
 80054c2:	9902      	ldr	r1, [sp, #8]
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d100      	bne.n	80054ca <_dtoa_r+0xc52>
 80054c8:	e16a      	b.n	80057a0 <_dtoa_r+0xf28>
 80054ca:	4659      	mov	r1, fp
 80054cc:	2900      	cmp	r1, #0
 80054ce:	da00      	bge.n	80054d2 <_dtoa_r+0xc5a>
 80054d0:	e0bf      	b.n	8005652 <_dtoa_r+0xdda>
 80054d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054d4:	465b      	mov	r3, fp
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d103      	bne.n	80054e2 <_dtoa_r+0xc6a>
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d100      	bne.n	80054e2 <_dtoa_r+0xc6a>
 80054e0:	e0b7      	b.n	8005652 <_dtoa_r+0xdda>
 80054e2:	4650      	mov	r0, sl
 80054e4:	2800      	cmp	r0, #0
 80054e6:	dd00      	ble.n	80054ea <_dtoa_r+0xc72>
 80054e8:	e124      	b.n	8005734 <_dtoa_r+0xebc>
 80054ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ee:	1c71      	adds	r1, r6, #1
 80054f0:	7030      	strb	r0, [r6, #0]
 80054f2:	4689      	mov	r9, r1
 80054f4:	4296      	cmp	r6, r2
 80054f6:	d100      	bne.n	80054fa <_dtoa_r+0xc82>
 80054f8:	e128      	b.n	800574c <_dtoa_r+0xed4>
 80054fa:	1c39      	adds	r1, r7, #0
 80054fc:	220a      	movs	r2, #10
 80054fe:	2300      	movs	r3, #0
 8005500:	1c20      	adds	r0, r4, #0
 8005502:	f000 fe3f 	bl	8006184 <__multadd>
 8005506:	1c29      	adds	r1, r5, #0
 8005508:	1c07      	adds	r7, r0, #0
 800550a:	220a      	movs	r2, #10
 800550c:	1c20      	adds	r0, r4, #0
 800550e:	2300      	movs	r3, #0
 8005510:	4545      	cmp	r5, r8
 8005512:	d011      	beq.n	8005538 <_dtoa_r+0xcc0>
 8005514:	f000 fe36 	bl	8006184 <__multadd>
 8005518:	4641      	mov	r1, r8
 800551a:	1c05      	adds	r5, r0, #0
 800551c:	220a      	movs	r2, #10
 800551e:	1c20      	adds	r0, r4, #0
 8005520:	2300      	movs	r3, #0
 8005522:	f000 fe2f 	bl	8006184 <__multadd>
 8005526:	464e      	mov	r6, r9
 8005528:	4680      	mov	r8, r0
 800552a:	e7ab      	b.n	8005484 <_dtoa_r+0xc0c>
 800552c:	1c38      	adds	r0, r7, #0
 800552e:	4649      	mov	r1, r9
 8005530:	f001 f890 	bl	8006654 <__mcmp>
 8005534:	4682      	mov	sl, r0
 8005536:	e7bc      	b.n	80054b2 <_dtoa_r+0xc3a>
 8005538:	f000 fe24 	bl	8006184 <__multadd>
 800553c:	464e      	mov	r6, r9
 800553e:	1c05      	adds	r5, r0, #0
 8005540:	4680      	mov	r8, r0
 8005542:	e79f      	b.n	8005484 <_dtoa_r+0xc0c>
 8005544:	2500      	movs	r5, #0
 8005546:	9512      	str	r5, [sp, #72]	; 0x48
 8005548:	e5d1      	b.n	80050ee <_dtoa_r+0x876>
 800554a:	2501      	movs	r5, #1
 800554c:	9512      	str	r5, [sp, #72]	; 0x48
 800554e:	f7ff fa76 	bl	8004a3e <_dtoa_r+0x1c6>
 8005552:	9609      	str	r6, [sp, #36]	; 0x24
 8005554:	2200      	movs	r2, #0
 8005556:	6462      	str	r2, [r4, #68]	; 0x44
 8005558:	401d      	ands	r5, r3
 800555a:	2100      	movs	r1, #0
 800555c:	f7ff fa8b 	bl	8004a76 <_dtoa_r+0x1fe>
 8005560:	2101      	movs	r1, #1
 8005562:	2201      	movs	r2, #1
 8005564:	2001      	movs	r0, #1
 8005566:	2501      	movs	r5, #1
 8005568:	9110      	str	r1, [sp, #64]	; 0x40
 800556a:	9209      	str	r2, [sp, #36]	; 0x24
 800556c:	9027      	str	r0, [sp, #156]	; 0x9c
 800556e:	e7f1      	b.n	8005554 <_dtoa_r+0xcdc>
 8005570:	1c20      	adds	r0, r4, #0
 8005572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005576:	f000 ffad 	bl	80064d4 <__pow5mult>
 800557a:	900b      	str	r0, [sp, #44]	; 0x2c
 800557c:	e4d3      	b.n	8004f26 <_dtoa_r+0x6ae>
 800557e:	464d      	mov	r5, r9
 8005580:	4654      	mov	r4, sl
 8005582:	465f      	mov	r7, fp
 8005584:	46ab      	mov	fp, r5
 8005586:	e543      	b.n	8005010 <_dtoa_r+0x798>
 8005588:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800558a:	1b73      	subs	r3, r6, r5
 800558c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800558e:	18ed      	adds	r5, r5, r3
 8005590:	960f      	str	r6, [sp, #60]	; 0x3c
 8005592:	9511      	str	r5, [sp, #68]	; 0x44
 8005594:	2600      	movs	r6, #0
 8005596:	e591      	b.n	80050bc <_dtoa_r+0x844>
 8005598:	9902      	ldr	r1, [sp, #8]
 800559a:	9a03      	ldr	r2, [sp, #12]
 800559c:	910c      	str	r1, [sp, #48]	; 0x30
 800559e:	920d      	str	r2, [sp, #52]	; 0x34
 80055a0:	2202      	movs	r2, #2
 80055a2:	4691      	mov	r9, r2
 80055a4:	f7ff faaa 	bl	8004afc <_dtoa_r+0x284>
 80055a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	d100      	bne.n	80055b0 <_dtoa_r+0xd38>
 80055ae:	e5ae      	b.n	800510e <_dtoa_r+0x896>
 80055b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	dc01      	bgt.n	80055ba <_dtoa_r+0xd42>
 80055b6:	f7ff fbc5 	bl	8004d44 <_dtoa_r+0x4cc>
 80055ba:	9d07      	ldr	r5, [sp, #28]
 80055bc:	4b6b      	ldr	r3, [pc, #428]	; (800576c <_dtoa_r+0xef4>)
 80055be:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <_dtoa_r+0xef0>)
 80055c0:	3d01      	subs	r5, #1
 80055c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055c6:	9517      	str	r5, [sp, #92]	; 0x5c
 80055c8:	f002 edb4 	blx	8008134 <__aeabi_dmul>
 80055cc:	900c      	str	r0, [sp, #48]	; 0x30
 80055ce:	910d      	str	r1, [sp, #52]	; 0x34
 80055d0:	4648      	mov	r0, r9
 80055d2:	3001      	adds	r0, #1
 80055d4:	f002 ed40 	blx	8008058 <__aeabi_i2d>
 80055d8:	1c02      	adds	r2, r0, #0
 80055da:	1c0b      	adds	r3, r1, #0
 80055dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055e0:	f002 eda8 	blx	8008134 <__aeabi_dmul>
 80055e4:	4a62      	ldr	r2, [pc, #392]	; (8005770 <_dtoa_r+0xef8>)
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <_dtoa_r+0xefc>)
 80055e8:	f002 eb9c 	blx	8007d24 <__adddf3>
 80055ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055ee:	1c06      	adds	r6, r0, #0
 80055f0:	4864      	ldr	r0, [pc, #400]	; (8005784 <_dtoa_r+0xf0c>)
 80055f2:	9513      	str	r5, [sp, #76]	; 0x4c
 80055f4:	180f      	adds	r7, r1, r0
 80055f6:	f7ff faa4 	bl	8004b42 <_dtoa_r+0x2ca>
 80055fa:	1c20      	adds	r0, r4, #0
 80055fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055fe:	f000 ff69 	bl	80064d4 <__pow5mult>
 8005602:	900b      	str	r0, [sp, #44]	; 0x2c
 8005604:	e48f      	b.n	8004f26 <_dtoa_r+0x6ae>
 8005606:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800560a:	485b      	ldr	r0, [pc, #364]	; (8005778 <_dtoa_r+0xf00>)
 800560c:	495b      	ldr	r1, [pc, #364]	; (800577c <_dtoa_r+0xf04>)
 800560e:	f002 eb88 	blx	8007d20 <__aeabi_dsub>
 8005612:	1c32      	adds	r2, r6, #0
 8005614:	1c3b      	adds	r3, r7, #0
 8005616:	f003 e872 	blx	80086fc <__aeabi_dcmpgt>
 800561a:	2800      	cmp	r0, #0
 800561c:	d101      	bne.n	8005622 <_dtoa_r+0xdaa>
 800561e:	f7ff fb91 	bl	8004d44 <_dtoa_r+0x4cc>
 8005622:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005624:	e000      	b.n	8005628 <_dtoa_r+0xdb0>
 8005626:	1c19      	adds	r1, r3, #0
 8005628:	1e4b      	subs	r3, r1, #1
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	2a30      	cmp	r2, #48	; 0x30
 800562e:	d0fa      	beq.n	8005626 <_dtoa_r+0xdae>
 8005630:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005632:	465f      	mov	r7, fp
 8005634:	9507      	str	r5, [sp, #28]
 8005636:	468b      	mov	fp, r1
 8005638:	e4ea      	b.n	8005010 <_dtoa_r+0x798>
 800563a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800563c:	2d00      	cmp	r5, #0
 800563e:	d073      	beq.n	8005728 <_dtoa_r+0xeb0>
 8005640:	4851      	ldr	r0, [pc, #324]	; (8005788 <_dtoa_r+0xf10>)
 8005642:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005644:	181b      	adds	r3, r3, r0
 8005646:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005648:	e53e      	b.n	80050c8 <_dtoa_r+0x850>
 800564a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800564c:	2300      	movs	r3, #0
 800564e:	1b47      	subs	r7, r0, r5
 8005650:	e53a      	b.n	80050c8 <_dtoa_r+0x850>
 8005652:	970b      	str	r7, [sp, #44]	; 0x2c
 8005654:	9a08      	ldr	r2, [sp, #32]
 8005656:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800565a:	4641      	mov	r1, r8
 800565c:	4650      	mov	r0, sl
 800565e:	910a      	str	r1, [sp, #40]	; 0x28
 8005660:	4690      	mov	r8, r2
 8005662:	469b      	mov	fp, r3
 8005664:	46b9      	mov	r9, r7
 8005666:	2800      	cmp	r0, #0
 8005668:	dd11      	ble.n	800568e <_dtoa_r+0xe16>
 800566a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800566c:	1c20      	adds	r0, r4, #0
 800566e:	2201      	movs	r2, #1
 8005670:	f000 ff88 	bl	8006584 <__lshift>
 8005674:	4641      	mov	r1, r8
 8005676:	900b      	str	r0, [sp, #44]	; 0x2c
 8005678:	f000 ffec 	bl	8006654 <__mcmp>
 800567c:	2800      	cmp	r0, #0
 800567e:	dc00      	bgt.n	8005682 <_dtoa_r+0xe0a>
 8005680:	e0a6      	b.n	80057d0 <_dtoa_r+0xf58>
 8005682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005684:	464a      	mov	r2, r9
 8005686:	3731      	adds	r7, #49	; 0x31
 8005688:	2a39      	cmp	r2, #57	; 0x39
 800568a:	d100      	bne.n	800568e <_dtoa_r+0xe16>
 800568c:	e080      	b.n	8005790 <_dtoa_r+0xf18>
 800568e:	7037      	strb	r7, [r6, #0]
 8005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005692:	3601      	adds	r6, #1
 8005694:	465f      	mov	r7, fp
 8005696:	4699      	mov	r9, r3
 8005698:	46b3      	mov	fp, r6
 800569a:	e4ab      	b.n	8004ff4 <_dtoa_r+0x77c>
 800569c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800569e:	465c      	mov	r4, fp
 80056a0:	4655      	mov	r5, sl
 80056a2:	4683      	mov	fp, r0
 80056a4:	465f      	mov	r7, fp
 80056a6:	4641      	mov	r1, r8
 80056a8:	1c2a      	adds	r2, r5, #0
 80056aa:	f7ff fbf5 	bl	8004e98 <_dtoa_r+0x620>
 80056ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b2:	465c      	mov	r4, fp
 80056b4:	4692      	mov	sl, r2
 80056b6:	469b      	mov	fp, r3
 80056b8:	f7ff fb44 	bl	8004d44 <_dtoa_r+0x4cc>
 80056bc:	4693      	mov	fp, r2
 80056be:	1c0a      	adds	r2, r1, #0
 80056c0:	3201      	adds	r2, #1
 80056c2:	0612      	lsls	r2, r2, #24
 80056c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80056c6:	0e12      	lsrs	r2, r2, #24
 80056c8:	9507      	str	r5, [sp, #28]
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e4a0      	b.n	8005010 <_dtoa_r+0x798>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d102      	bne.n	80056d8 <_dtoa_r+0xe60>
 80056d2:	07f9      	lsls	r1, r7, #31
 80056d4:	d500      	bpl.n	80056d8 <_dtoa_r+0xe60>
 80056d6:	e57e      	b.n	80051d6 <_dtoa_r+0x95e>
 80056d8:	4651      	mov	r1, sl
 80056da:	e000      	b.n	80056de <_dtoa_r+0xe66>
 80056dc:	1c19      	adds	r1, r3, #0
 80056de:	1e4b      	subs	r3, r1, #1
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	2a30      	cmp	r2, #48	; 0x30
 80056e4:	d0fa      	beq.n	80056dc <_dtoa_r+0xe64>
 80056e6:	465f      	mov	r7, fp
 80056e8:	468b      	mov	fp, r1
 80056ea:	e483      	b.n	8004ff4 <_dtoa_r+0x77c>
 80056ec:	2200      	movs	r2, #0
 80056ee:	4690      	mov	r8, r2
 80056f0:	4691      	mov	r9, r2
 80056f2:	e537      	b.n	8005164 <_dtoa_r+0x8ec>
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	1c20      	adds	r0, r4, #0
 80056f8:	f000 fd0e 	bl	8006118 <_Balloc>
 80056fc:	464b      	mov	r3, r9
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	4649      	mov	r1, r9
 8005702:	3202      	adds	r2, #2
 8005704:	1c05      	adds	r5, r0, #0
 8005706:	310c      	adds	r1, #12
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	300c      	adds	r0, #12
 800570c:	f000 fcbc 	bl	8006088 <memcpy>
 8005710:	1c20      	adds	r0, r4, #0
 8005712:	1c29      	adds	r1, r5, #0
 8005714:	2201      	movs	r2, #1
 8005716:	f000 ff35 	bl	8006584 <__lshift>
 800571a:	900a      	str	r0, [sp, #40]	; 0x28
 800571c:	e6a1      	b.n	8005462 <_dtoa_r+0xbea>
 800571e:	3301      	adds	r3, #1
 8005720:	7033      	strb	r3, [r6, #0]
 8005722:	1c0f      	adds	r7, r1, #0
 8005724:	4693      	mov	fp, r2
 8005726:	e465      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005728:	991a      	ldr	r1, [sp, #104]	; 0x68
 800572a:	2336      	movs	r3, #54	; 0x36
 800572c:	1a5b      	subs	r3, r3, r1
 800572e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005730:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005732:	e4c9      	b.n	80050c8 <_dtoa_r+0x850>
 8005734:	970b      	str	r7, [sp, #44]	; 0x2c
 8005736:	9b08      	ldr	r3, [sp, #32]
 8005738:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800573a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800573c:	4642      	mov	r2, r8
 800573e:	920a      	str	r2, [sp, #40]	; 0x28
 8005740:	4698      	mov	r8, r3
 8005742:	4683      	mov	fp, r0
 8005744:	2f39      	cmp	r7, #57	; 0x39
 8005746:	d023      	beq.n	8005790 <_dtoa_r+0xf18>
 8005748:	3701      	adds	r7, #1
 800574a:	e7a0      	b.n	800568e <_dtoa_r+0xe16>
 800574c:	9a08      	ldr	r2, [sp, #32]
 800574e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005750:	4641      	mov	r1, r8
 8005752:	970b      	str	r7, [sp, #44]	; 0x2c
 8005754:	46ca      	mov	sl, r9
 8005756:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005758:	4690      	mov	r8, r2
 800575a:	910a      	str	r1, [sp, #40]	; 0x28
 800575c:	469b      	mov	fp, r3
 800575e:	4689      	mov	r9, r1
 8005760:	e52d      	b.n	80051be <_dtoa_r+0x946>
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	00000000 	.word	0x00000000
 800576c:	40240000 	.word	0x40240000
 8005770:	00000000 	.word	0x00000000
 8005774:	401c0000 	.word	0x401c0000
 8005778:	00000000 	.word	0x00000000
 800577c:	3fe00000 	.word	0x3fe00000
 8005780:	7ff00000 	.word	0x7ff00000
 8005784:	fcc00000 	.word	0xfcc00000
 8005788:	00000433 	.word	0x00000433
 800578c:	2301      	movs	r3, #1
 800578e:	e513      	b.n	80051b8 <_dtoa_r+0x940>
 8005790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005792:	1c71      	adds	r1, r6, #1
 8005794:	2339      	movs	r3, #57	; 0x39
 8005796:	4691      	mov	r9, r2
 8005798:	7033      	strb	r3, [r6, #0]
 800579a:	1c0a      	adds	r2, r1, #0
 800579c:	4659      	mov	r1, fp
 800579e:	e524      	b.n	80051ea <_dtoa_r+0x972>
 80057a0:	4643      	mov	r3, r8
 80057a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80057a4:	9808      	ldr	r0, [sp, #32]
 80057a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057a8:	930a      	str	r3, [sp, #40]	; 0x28
 80057aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ac:	465a      	mov	r2, fp
 80057ae:	4680      	mov	r8, r0
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	469b      	mov	fp, r3
 80057b4:	2f39      	cmp	r7, #57	; 0x39
 80057b6:	d0eb      	beq.n	8005790 <_dtoa_r+0xf18>
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	dd01      	ble.n	80057c0 <_dtoa_r+0xf48>
 80057bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057be:	3731      	adds	r7, #49	; 0x31
 80057c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057c2:	7037      	strb	r7, [r6, #0]
 80057c4:	3601      	adds	r6, #1
 80057c6:	465f      	mov	r7, fp
 80057c8:	4681      	mov	r9, r0
 80057ca:	46b3      	mov	fp, r6
 80057cc:	f7ff fc12 	bl	8004ff4 <_dtoa_r+0x77c>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d000      	beq.n	80057d6 <_dtoa_r+0xf5e>
 80057d4:	e75b      	b.n	800568e <_dtoa_r+0xe16>
 80057d6:	07f9      	lsls	r1, r7, #31
 80057d8:	d400      	bmi.n	80057dc <_dtoa_r+0xf64>
 80057da:	e758      	b.n	800568e <_dtoa_r+0xe16>
 80057dc:	e751      	b.n	8005682 <_dtoa_r+0xe0a>
 80057de:	2302      	movs	r3, #2
 80057e0:	4699      	mov	r9, r3
 80057e2:	f7ff f98b 	bl	8004afc <_dtoa_r+0x284>
 80057e6:	465f      	mov	r7, fp
 80057e8:	46ab      	mov	fp, r5
 80057ea:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80057ec:	9507      	str	r5, [sp, #28]
 80057ee:	f7ff fc0f 	bl	8005010 <_dtoa_r+0x798>
 80057f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057f4:	9509      	str	r5, [sp, #36]	; 0x24
 80057f6:	f7ff fbe1 	bl	8004fbc <_dtoa_r+0x744>
 80057fa:	2a04      	cmp	r2, #4
 80057fc:	d101      	bne.n	8005802 <_dtoa_r+0xf8a>
 80057fe:	f7ff fbbc 	bl	8004f7a <_dtoa_r+0x702>
 8005802:	223c      	movs	r2, #60	; 0x3c
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	e4ff      	b.n	8005208 <_dtoa_r+0x990>

08005808 <_malloc_trim_r>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	1c0f      	adds	r7, r1, #0
 800580c:	1c04      	adds	r4, r0, #0
 800580e:	f000 fc7d 	bl	800610c <__malloc_lock>
 8005812:	4d21      	ldr	r5, [pc, #132]	; (8005898 <_malloc_trim_r+0x90>)
 8005814:	68ab      	ldr	r3, [r5, #8]
 8005816:	685e      	ldr	r6, [r3, #4]
 8005818:	4a20      	ldr	r2, [pc, #128]	; (800589c <_malloc_trim_r+0x94>)
 800581a:	2303      	movs	r3, #3
 800581c:	439e      	bics	r6, r3
 800581e:	18b3      	adds	r3, r6, r2
 8005820:	1bdf      	subs	r7, r3, r7
 8005822:	0b3f      	lsrs	r7, r7, #12
 8005824:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <_malloc_trim_r+0x98>)
 8005826:	3f01      	subs	r7, #1
 8005828:	033f      	lsls	r7, r7, #12
 800582a:	429f      	cmp	r7, r3
 800582c:	dd07      	ble.n	800583e <_malloc_trim_r+0x36>
 800582e:	1c20      	adds	r0, r4, #0
 8005830:	2100      	movs	r1, #0
 8005832:	f001 f953 	bl	8006adc <_sbrk_r>
 8005836:	68aa      	ldr	r2, [r5, #8]
 8005838:	1993      	adds	r3, r2, r6
 800583a:	4298      	cmp	r0, r3
 800583c:	d006      	beq.n	800584c <_malloc_trim_r+0x44>
 800583e:	1c20      	adds	r0, r4, #0
 8005840:	f000 fc66 	bl	8006110 <__malloc_unlock>
 8005844:	2000      	movs	r0, #0
 8005846:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005848:	bc02      	pop	{r1}
 800584a:	4708      	bx	r1
 800584c:	4279      	negs	r1, r7
 800584e:	1c20      	adds	r0, r4, #0
 8005850:	f001 f944 	bl	8006adc <_sbrk_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d00d      	beq.n	8005874 <_malloc_trim_r+0x6c>
 8005858:	68ab      	ldr	r3, [r5, #8]
 800585a:	1bf6      	subs	r6, r6, r7
 800585c:	2201      	movs	r2, #1
 800585e:	4316      	orrs	r6, r2
 8005860:	605e      	str	r6, [r3, #4]
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <_malloc_trim_r+0x9c>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	1c20      	adds	r0, r4, #0
 8005868:	1bd7      	subs	r7, r2, r7
 800586a:	601f      	str	r7, [r3, #0]
 800586c:	f000 fc50 	bl	8006110 <__malloc_unlock>
 8005870:	2001      	movs	r0, #1
 8005872:	e7e8      	b.n	8005846 <_malloc_trim_r+0x3e>
 8005874:	1c20      	adds	r0, r4, #0
 8005876:	2100      	movs	r1, #0
 8005878:	f001 f930 	bl	8006adc <_sbrk_r>
 800587c:	68ab      	ldr	r3, [r5, #8]
 800587e:	1ac2      	subs	r2, r0, r3
 8005880:	2a0f      	cmp	r2, #15
 8005882:	dddc      	ble.n	800583e <_malloc_trim_r+0x36>
 8005884:	4908      	ldr	r1, [pc, #32]	; (80058a8 <_malloc_trim_r+0xa0>)
 8005886:	6809      	ldr	r1, [r1, #0]
 8005888:	1a40      	subs	r0, r0, r1
 800588a:	4906      	ldr	r1, [pc, #24]	; (80058a4 <_malloc_trim_r+0x9c>)
 800588c:	6008      	str	r0, [r1, #0]
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	e7d3      	b.n	800583e <_malloc_trim_r+0x36>
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	2000054c 	.word	0x2000054c
 800589c:	00000fef 	.word	0x00000fef
 80058a0:	00000fff 	.word	0x00000fff
 80058a4:	20000974 	.word	0x20000974
 80058a8:	20000954 	.word	0x20000954

080058ac <_free_r>:
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ae:	4647      	mov	r7, r8
 80058b0:	b480      	push	{r7}
 80058b2:	1c05      	adds	r5, r0, #0
 80058b4:	1e0c      	subs	r4, r1, #0
 80058b6:	d055      	beq.n	8005964 <_free_r+0xb8>
 80058b8:	f000 fc28 	bl	800610c <__malloc_lock>
 80058bc:	1c21      	adds	r1, r4, #0
 80058be:	3908      	subs	r1, #8
 80058c0:	6848      	ldr	r0, [r1, #4]
 80058c2:	2701      	movs	r7, #1
 80058c4:	1c03      	adds	r3, r0, #0
 80058c6:	43bb      	bics	r3, r7
 80058c8:	18ca      	adds	r2, r1, r3
 80058ca:	6854      	ldr	r4, [r2, #4]
 80058cc:	4680      	mov	r8, r0
 80058ce:	2003      	movs	r0, #3
 80058d0:	4384      	bics	r4, r0
 80058d2:	1c20      	adds	r0, r4, #0
 80058d4:	4c54      	ldr	r4, [pc, #336]	; (8005a28 <_free_r+0x17c>)
 80058d6:	68a6      	ldr	r6, [r4, #8]
 80058d8:	4296      	cmp	r6, r2
 80058da:	d062      	beq.n	80059a2 <_free_r+0xf6>
 80058dc:	2600      	movs	r6, #0
 80058de:	46b4      	mov	ip, r6
 80058e0:	4646      	mov	r6, r8
 80058e2:	6050      	str	r0, [r2, #4]
 80058e4:	4237      	tst	r7, r6
 80058e6:	d10a      	bne.n	80058fe <_free_r+0x52>
 80058e8:	680e      	ldr	r6, [r1, #0]
 80058ea:	1b89      	subs	r1, r1, r6
 80058ec:	199b      	adds	r3, r3, r6
 80058ee:	1c27      	adds	r7, r4, #0
 80058f0:	688e      	ldr	r6, [r1, #8]
 80058f2:	3708      	adds	r7, #8
 80058f4:	42be      	cmp	r6, r7
 80058f6:	d06d      	beq.n	80059d4 <_free_r+0x128>
 80058f8:	68cf      	ldr	r7, [r1, #12]
 80058fa:	60f7      	str	r7, [r6, #12]
 80058fc:	60be      	str	r6, [r7, #8]
 80058fe:	1817      	adds	r7, r2, r0
 8005900:	687f      	ldr	r7, [r7, #4]
 8005902:	2601      	movs	r6, #1
 8005904:	4237      	tst	r7, r6
 8005906:	d107      	bne.n	8005918 <_free_r+0x6c>
 8005908:	181b      	adds	r3, r3, r0
 800590a:	4660      	mov	r0, ip
 800590c:	2800      	cmp	r0, #0
 800590e:	d02e      	beq.n	800596e <_free_r+0xc2>
 8005910:	6890      	ldr	r0, [r2, #8]
 8005912:	68d2      	ldr	r2, [r2, #12]
 8005914:	60c2      	str	r2, [r0, #12]
 8005916:	6090      	str	r0, [r2, #8]
 8005918:	2201      	movs	r2, #1
 800591a:	1c18      	adds	r0, r3, #0
 800591c:	4310      	orrs	r0, r2
 800591e:	4666      	mov	r6, ip
 8005920:	6048      	str	r0, [r1, #4]
 8005922:	50cb      	str	r3, [r1, r3]
 8005924:	2e00      	cmp	r6, #0
 8005926:	d11a      	bne.n	800595e <_free_r+0xb2>
 8005928:	4840      	ldr	r0, [pc, #256]	; (8005a2c <_free_r+0x180>)
 800592a:	4283      	cmp	r3, r0
 800592c:	d92b      	bls.n	8005986 <_free_r+0xda>
 800592e:	0a5a      	lsrs	r2, r3, #9
 8005930:	2a04      	cmp	r2, #4
 8005932:	d852      	bhi.n	80059da <_free_r+0x12e>
 8005934:	099f      	lsrs	r7, r3, #6
 8005936:	3738      	adds	r7, #56	; 0x38
 8005938:	0078      	lsls	r0, r7, #1
 800593a:	0080      	lsls	r0, r0, #2
 800593c:	1820      	adds	r0, r4, r0
 800593e:	6882      	ldr	r2, [r0, #8]
 8005940:	2603      	movs	r6, #3
 8005942:	4282      	cmp	r2, r0
 8005944:	d04f      	beq.n	80059e6 <_free_r+0x13a>
 8005946:	6854      	ldr	r4, [r2, #4]
 8005948:	43b4      	bics	r4, r6
 800594a:	42a3      	cmp	r3, r4
 800594c:	d202      	bcs.n	8005954 <_free_r+0xa8>
 800594e:	6892      	ldr	r2, [r2, #8]
 8005950:	4290      	cmp	r0, r2
 8005952:	d1f8      	bne.n	8005946 <_free_r+0x9a>
 8005954:	68d3      	ldr	r3, [r2, #12]
 8005956:	60cb      	str	r3, [r1, #12]
 8005958:	608a      	str	r2, [r1, #8]
 800595a:	60d1      	str	r1, [r2, #12]
 800595c:	6099      	str	r1, [r3, #8]
 800595e:	1c28      	adds	r0, r5, #0
 8005960:	f000 fbd6 	bl	8006110 <__malloc_unlock>
 8005964:	bc04      	pop	{r2}
 8005966:	4690      	mov	r8, r2
 8005968:	bcf0      	pop	{r4, r5, r6, r7}
 800596a:	bc01      	pop	{r0}
 800596c:	4700      	bx	r0
 800596e:	6890      	ldr	r0, [r2, #8]
 8005970:	4f2f      	ldr	r7, [pc, #188]	; (8005a30 <_free_r+0x184>)
 8005972:	42b8      	cmp	r0, r7
 8005974:	d1cd      	bne.n	8005912 <_free_r+0x66>
 8005976:	431e      	orrs	r6, r3
 8005978:	60c1      	str	r1, [r0, #12]
 800597a:	6081      	str	r1, [r0, #8]
 800597c:	60c8      	str	r0, [r1, #12]
 800597e:	6088      	str	r0, [r1, #8]
 8005980:	604e      	str	r6, [r1, #4]
 8005982:	50cb      	str	r3, [r1, r3]
 8005984:	e7eb      	b.n	800595e <_free_r+0xb2>
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	1098      	asrs	r0, r3, #2
 800598a:	4082      	lsls	r2, r0
 800598c:	6860      	ldr	r0, [r4, #4]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4302      	orrs	r2, r0
 8005992:	6062      	str	r2, [r4, #4]
 8005994:	18e4      	adds	r4, r4, r3
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	60cc      	str	r4, [r1, #12]
 800599a:	608b      	str	r3, [r1, #8]
 800599c:	60d9      	str	r1, [r3, #12]
 800599e:	60a1      	str	r1, [r4, #8]
 80059a0:	e7dd      	b.n	800595e <_free_r+0xb2>
 80059a2:	18c3      	adds	r3, r0, r3
 80059a4:	4640      	mov	r0, r8
 80059a6:	4207      	tst	r7, r0
 80059a8:	d106      	bne.n	80059b8 <_free_r+0x10c>
 80059aa:	680a      	ldr	r2, [r1, #0]
 80059ac:	1a89      	subs	r1, r1, r2
 80059ae:	68c8      	ldr	r0, [r1, #12]
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	688a      	ldr	r2, [r1, #8]
 80059b4:	60d0      	str	r0, [r2, #12]
 80059b6:	6082      	str	r2, [r0, #8]
 80059b8:	2201      	movs	r2, #1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	604a      	str	r2, [r1, #4]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <_free_r+0x188>)
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	60a1      	str	r1, [r4, #8]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d3ca      	bcc.n	800595e <_free_r+0xb2>
 80059c8:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <_free_r+0x18c>)
 80059ca:	1c28      	adds	r0, r5, #0
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	f7ff ff1b 	bl	8005808 <_malloc_trim_r>
 80059d2:	e7c4      	b.n	800595e <_free_r+0xb2>
 80059d4:	2601      	movs	r6, #1
 80059d6:	46b4      	mov	ip, r6
 80059d8:	e791      	b.n	80058fe <_free_r+0x52>
 80059da:	2a14      	cmp	r2, #20
 80059dc:	d80c      	bhi.n	80059f8 <_free_r+0x14c>
 80059de:	1c17      	adds	r7, r2, #0
 80059e0:	375b      	adds	r7, #91	; 0x5b
 80059e2:	0078      	lsls	r0, r7, #1
 80059e4:	e7a9      	b.n	800593a <_free_r+0x8e>
 80059e6:	10bf      	asrs	r7, r7, #2
 80059e8:	2301      	movs	r3, #1
 80059ea:	40bb      	lsls	r3, r7
 80059ec:	1c1f      	adds	r7, r3, #0
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	431f      	orrs	r7, r3
 80059f2:	6067      	str	r7, [r4, #4]
 80059f4:	1c13      	adds	r3, r2, #0
 80059f6:	e7ae      	b.n	8005956 <_free_r+0xaa>
 80059f8:	2a54      	cmp	r2, #84	; 0x54
 80059fa:	d803      	bhi.n	8005a04 <_free_r+0x158>
 80059fc:	0b1f      	lsrs	r7, r3, #12
 80059fe:	376e      	adds	r7, #110	; 0x6e
 8005a00:	0078      	lsls	r0, r7, #1
 8005a02:	e79a      	b.n	800593a <_free_r+0x8e>
 8005a04:	20aa      	movs	r0, #170	; 0xaa
 8005a06:	0040      	lsls	r0, r0, #1
 8005a08:	4282      	cmp	r2, r0
 8005a0a:	d803      	bhi.n	8005a14 <_free_r+0x168>
 8005a0c:	0bdf      	lsrs	r7, r3, #15
 8005a0e:	3777      	adds	r7, #119	; 0x77
 8005a10:	0078      	lsls	r0, r7, #1
 8005a12:	e792      	b.n	800593a <_free_r+0x8e>
 8005a14:	4809      	ldr	r0, [pc, #36]	; (8005a3c <_free_r+0x190>)
 8005a16:	4282      	cmp	r2, r0
 8005a18:	d803      	bhi.n	8005a22 <_free_r+0x176>
 8005a1a:	0c9f      	lsrs	r7, r3, #18
 8005a1c:	377c      	adds	r7, #124	; 0x7c
 8005a1e:	0078      	lsls	r0, r7, #1
 8005a20:	e78b      	b.n	800593a <_free_r+0x8e>
 8005a22:	20fc      	movs	r0, #252	; 0xfc
 8005a24:	277e      	movs	r7, #126	; 0x7e
 8005a26:	e788      	b.n	800593a <_free_r+0x8e>
 8005a28:	2000054c 	.word	0x2000054c
 8005a2c:	000001ff 	.word	0x000001ff
 8005a30:	20000554 	.word	0x20000554
 8005a34:	20000958 	.word	0x20000958
 8005a38:	20000970 	.word	0x20000970
 8005a3c:	00000554 	.word	0x00000554

08005a40 <_setlocale_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	1e14      	subs	r4, r2, #0
 8005a44:	d005      	beq.n	8005a52 <_setlocale_r+0x12>
 8005a46:	1c20      	adds	r0, r4, #0
 8005a48:	490c      	ldr	r1, [pc, #48]	; (8005a7c <_setlocale_r+0x3c>)
 8005a4a:	f001 f85b 	bl	8006b04 <strcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d104      	bne.n	8005a5c <_setlocale_r+0x1c>
 8005a52:	4d0b      	ldr	r5, [pc, #44]	; (8005a80 <_setlocale_r+0x40>)
 8005a54:	1c28      	adds	r0, r5, #0
 8005a56:	bc38      	pop	{r3, r4, r5}
 8005a58:	bc02      	pop	{r1}
 8005a5a:	4708      	bx	r1
 8005a5c:	4d08      	ldr	r5, [pc, #32]	; (8005a80 <_setlocale_r+0x40>)
 8005a5e:	1c20      	adds	r0, r4, #0
 8005a60:	1c29      	adds	r1, r5, #0
 8005a62:	f001 f84f 	bl	8006b04 <strcmp>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0f4      	beq.n	8005a54 <_setlocale_r+0x14>
 8005a6a:	1c20      	adds	r0, r4, #0
 8005a6c:	4905      	ldr	r1, [pc, #20]	; (8005a84 <_setlocale_r+0x44>)
 8005a6e:	f001 f849 	bl	8006b04 <strcmp>
 8005a72:	4243      	negs	r3, r0
 8005a74:	4158      	adcs	r0, r3
 8005a76:	4240      	negs	r0, r0
 8005a78:	4028      	ands	r0, r5
 8005a7a:	e7ec      	b.n	8005a56 <_setlocale_r+0x16>
 8005a7c:	08009084 	.word	0x08009084
 8005a80:	08009080 	.word	0x08009080
 8005a84:	0800904c 	.word	0x0800904c

08005a88 <__locale_charset>:
 8005a88:	4800      	ldr	r0, [pc, #0]	; (8005a8c <__locale_charset+0x4>)
 8005a8a:	4770      	bx	lr
 8005a8c:	200004d0 	.word	0x200004d0

08005a90 <__locale_mb_cur_max>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <__locale_mb_cur_max+0x8>)
 8005a92:	6a18      	ldr	r0, [r3, #32]
 8005a94:	4770      	bx	lr
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	200004d0 	.word	0x200004d0

08005a9c <__locale_msgcharset>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__locale_msgcharset+0x8>)
 8005a9e:	3024      	adds	r0, #36	; 0x24
 8005aa0:	4770      	bx	lr
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	200004d0 	.word	0x200004d0

08005aa8 <__locale_cjk_lang>:
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr

08005aac <_localeconv_r>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <_localeconv_r+0x8>)
 8005aae:	3044      	adds	r0, #68	; 0x44
 8005ab0:	4770      	bx	lr
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	200004d0 	.word	0x200004d0

08005ab8 <setlocale>:
 8005ab8:	b508      	push	{r3, lr}
 8005aba:	1c0a      	adds	r2, r1, #0
 8005abc:	4904      	ldr	r1, [pc, #16]	; (8005ad0 <setlocale+0x18>)
 8005abe:	1c03      	adds	r3, r0, #0
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	1c19      	adds	r1, r3, #0
 8005ac4:	f7ff ffbc 	bl	8005a40 <_setlocale_r>
 8005ac8:	bc08      	pop	{r3}
 8005aca:	bc02      	pop	{r1}
 8005acc:	4708      	bx	r1
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	200000a0 	.word	0x200000a0

08005ad4 <localeconv>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <localeconv+0x8>)
 8005ad6:	3044      	adds	r0, #68	; 0x44
 8005ad8:	4770      	bx	lr
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	200004d0 	.word	0x200004d0

08005ae0 <_malloc_r>:
 8005ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae2:	4656      	mov	r6, sl
 8005ae4:	4644      	mov	r4, r8
 8005ae6:	465f      	mov	r7, fp
 8005ae8:	464d      	mov	r5, r9
 8005aea:	b4f0      	push	{r4, r5, r6, r7}
 8005aec:	1c0c      	adds	r4, r1, #0
 8005aee:	340b      	adds	r4, #11
 8005af0:	b083      	sub	sp, #12
 8005af2:	1c06      	adds	r6, r0, #0
 8005af4:	2c16      	cmp	r4, #22
 8005af6:	d92e      	bls.n	8005b56 <_malloc_r+0x76>
 8005af8:	2307      	movs	r3, #7
 8005afa:	439c      	bics	r4, r3
 8005afc:	0fe3      	lsrs	r3, r4, #31
 8005afe:	428c      	cmp	r4, r1
 8005b00:	d32d      	bcc.n	8005b5e <_malloc_r+0x7e>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12b      	bne.n	8005b5e <_malloc_r+0x7e>
 8005b06:	1c30      	adds	r0, r6, #0
 8005b08:	f000 fb00 	bl	800610c <__malloc_lock>
 8005b0c:	4bc0      	ldr	r3, [pc, #768]	; (8005e10 <_malloc_r+0x330>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d829      	bhi.n	8005b66 <_malloc_r+0x86>
 8005b12:	08e2      	lsrs	r2, r4, #3
 8005b14:	4dbf      	ldr	r5, [pc, #764]	; (8005e14 <_malloc_r+0x334>)
 8005b16:	00d3      	lsls	r3, r2, #3
 8005b18:	18eb      	adds	r3, r5, r3
 8005b1a:	68df      	ldr	r7, [r3, #12]
 8005b1c:	429f      	cmp	r7, r3
 8005b1e:	d100      	bne.n	8005b22 <_malloc_r+0x42>
 8005b20:	e1d8      	b.n	8005ed4 <_malloc_r+0x3f4>
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	2303      	movs	r3, #3
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4399      	bics	r1, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	6093      	str	r3, [r2, #8]
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	6858      	ldr	r0, [r3, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	4302      	orrs	r2, r0
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	1c30      	adds	r0, r6, #0
 8005b3c:	f000 fae8 	bl	8006110 <__malloc_unlock>
 8005b40:	1c38      	adds	r0, r7, #0
 8005b42:	3008      	adds	r0, #8
 8005b44:	b003      	add	sp, #12
 8005b46:	bc3c      	pop	{r2, r3, r4, r5}
 8005b48:	4690      	mov	r8, r2
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	46ab      	mov	fp, r5
 8005b50:	bcf0      	pop	{r4, r5, r6, r7}
 8005b52:	bc02      	pop	{r1}
 8005b54:	4708      	bx	r1
 8005b56:	2410      	movs	r4, #16
 8005b58:	2300      	movs	r3, #0
 8005b5a:	428c      	cmp	r4, r1
 8005b5c:	d2d1      	bcs.n	8005b02 <_malloc_r+0x22>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	2000      	movs	r0, #0
 8005b64:	e7ee      	b.n	8005b44 <_malloc_r+0x64>
 8005b66:	0a63      	lsrs	r3, r4, #9
 8005b68:	d100      	bne.n	8005b6c <_malloc_r+0x8c>
 8005b6a:	e08b      	b.n	8005c84 <_malloc_r+0x1a4>
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d900      	bls.n	8005b72 <_malloc_r+0x92>
 8005b70:	e142      	b.n	8005df8 <_malloc_r+0x318>
 8005b72:	09a3      	lsrs	r3, r4, #6
 8005b74:	3338      	adds	r3, #56	; 0x38
 8005b76:	4698      	mov	r8, r3
 8005b78:	0059      	lsls	r1, r3, #1
 8005b7a:	4da6      	ldr	r5, [pc, #664]	; (8005e14 <_malloc_r+0x334>)
 8005b7c:	0089      	lsls	r1, r1, #2
 8005b7e:	1869      	adds	r1, r5, r1
 8005b80:	68cf      	ldr	r7, [r1, #12]
 8005b82:	42b9      	cmp	r1, r7
 8005b84:	d013      	beq.n	8005bae <_malloc_r+0xce>
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	2303      	movs	r3, #3
 8005b8a:	439a      	bics	r2, r3
 8005b8c:	1b13      	subs	r3, r2, r4
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	dc7c      	bgt.n	8005c8c <_malloc_r+0x1ac>
 8005b92:	2003      	movs	r0, #3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db07      	blt.n	8005ba8 <_malloc_r+0xc8>
 8005b98:	e07c      	b.n	8005c94 <_malloc_r+0x1b4>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4382      	bics	r2, r0
 8005b9e:	1b13      	subs	r3, r2, r4
 8005ba0:	2b0f      	cmp	r3, #15
 8005ba2:	dc73      	bgt.n	8005c8c <_malloc_r+0x1ac>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da75      	bge.n	8005c94 <_malloc_r+0x1b4>
 8005ba8:	68ff      	ldr	r7, [r7, #12]
 8005baa:	42b9      	cmp	r1, r7
 8005bac:	d1f5      	bne.n	8005b9a <_malloc_r+0xba>
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4488      	add	r8, r1
 8005bb2:	1c2b      	adds	r3, r5, #0
 8005bb4:	692f      	ldr	r7, [r5, #16]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	429f      	cmp	r7, r3
 8005bba:	d100      	bne.n	8005bbe <_malloc_r+0xde>
 8005bbc:	e167      	b.n	8005e8e <_malloc_r+0x3ae>
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4390      	bics	r0, r2
 8005bc4:	1c02      	adds	r2, r0, #0
 8005bc6:	1b01      	subs	r1, r0, r4
 8005bc8:	290f      	cmp	r1, #15
 8005bca:	dd00      	ble.n	8005bce <_malloc_r+0xee>
 8005bcc:	e14e      	b.n	8005e6c <_malloc_r+0x38c>
 8005bce:	616b      	str	r3, [r5, #20]
 8005bd0:	612b      	str	r3, [r5, #16]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	da6d      	bge.n	8005cb2 <_malloc_r+0x1d2>
 8005bd6:	4b90      	ldr	r3, [pc, #576]	; (8005e18 <_malloc_r+0x338>)
 8005bd8:	4298      	cmp	r0, r3
 8005bda:	d900      	bls.n	8005bde <_malloc_r+0xfe>
 8005bdc:	e126      	b.n	8005e2c <_malloc_r+0x34c>
 8005bde:	08c2      	lsrs	r2, r0, #3
 8005be0:	1093      	asrs	r3, r2, #2
 8005be2:	2001      	movs	r0, #1
 8005be4:	4098      	lsls	r0, r3
 8005be6:	686b      	ldr	r3, [r5, #4]
 8005be8:	00d2      	lsls	r2, r2, #3
 8005bea:	4318      	orrs	r0, r3
 8005bec:	18ab      	adds	r3, r5, r2
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	60ba      	str	r2, [r7, #8]
 8005bf4:	6068      	str	r0, [r5, #4]
 8005bf6:	609f      	str	r7, [r3, #8]
 8005bf8:	60d7      	str	r7, [r2, #12]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	108b      	asrs	r3, r1, #2
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4099      	lsls	r1, r3
 8005c02:	4281      	cmp	r1, r0
 8005c04:	d85a      	bhi.n	8005cbc <_malloc_r+0x1dc>
 8005c06:	4201      	tst	r1, r0
 8005c08:	d10d      	bne.n	8005c26 <_malloc_r+0x146>
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	439a      	bics	r2, r3
 8005c10:	1c13      	adds	r3, r2, #0
 8005c12:	3304      	adds	r3, #4
 8005c14:	0049      	lsls	r1, r1, #1
 8005c16:	4698      	mov	r8, r3
 8005c18:	4201      	tst	r1, r0
 8005c1a:	d104      	bne.n	8005c26 <_malloc_r+0x146>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	0049      	lsls	r1, r1, #1
 8005c20:	4498      	add	r8, r3
 8005c22:	4201      	tst	r1, r0
 8005c24:	d0fa      	beq.n	8005c1c <_malloc_r+0x13c>
 8005c26:	2003      	movs	r0, #3
 8005c28:	4684      	mov	ip, r0
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	00d3      	lsls	r3, r2, #3
 8005c2e:	195b      	adds	r3, r3, r5
 8005c30:	469a      	mov	sl, r3
 8005c32:	1c18      	adds	r0, r3, #0
 8005c34:	46c1      	mov	r9, r8
 8005c36:	68c7      	ldr	r7, [r0, #12]
 8005c38:	42b8      	cmp	r0, r7
 8005c3a:	d107      	bne.n	8005c4c <_malloc_r+0x16c>
 8005c3c:	e129      	b.n	8005e92 <_malloc_r+0x3b2>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	db00      	blt.n	8005c44 <_malloc_r+0x164>
 8005c42:	e150      	b.n	8005ee6 <_malloc_r+0x406>
 8005c44:	68ff      	ldr	r7, [r7, #12]
 8005c46:	42b8      	cmp	r0, r7
 8005c48:	d100      	bne.n	8005c4c <_malloc_r+0x16c>
 8005c4a:	e122      	b.n	8005e92 <_malloc_r+0x3b2>
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4663      	mov	r3, ip
 8005c50:	439a      	bics	r2, r3
 8005c52:	1b13      	subs	r3, r2, r4
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	ddf2      	ble.n	8005c3e <_malloc_r+0x15e>
 8005c58:	2001      	movs	r0, #1
 8005c5a:	193a      	adds	r2, r7, r4
 8005c5c:	4304      	orrs	r4, r0
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	607c      	str	r4, [r7, #4]
 8005c62:	68fc      	ldr	r4, [r7, #12]
 8005c64:	4318      	orrs	r0, r3
 8005c66:	60cc      	str	r4, [r1, #12]
 8005c68:	60a1      	str	r1, [r4, #8]
 8005c6a:	616a      	str	r2, [r5, #20]
 8005c6c:	612a      	str	r2, [r5, #16]
 8005c6e:	3508      	adds	r5, #8
 8005c70:	6050      	str	r0, [r2, #4]
 8005c72:	60d5      	str	r5, [r2, #12]
 8005c74:	1c30      	adds	r0, r6, #0
 8005c76:	6095      	str	r5, [r2, #8]
 8005c78:	50d3      	str	r3, [r2, r3]
 8005c7a:	f000 fa49 	bl	8006110 <__malloc_unlock>
 8005c7e:	1c38      	adds	r0, r7, #0
 8005c80:	3008      	adds	r0, #8
 8005c82:	e75f      	b.n	8005b44 <_malloc_r+0x64>
 8005c84:	08e1      	lsrs	r1, r4, #3
 8005c86:	4688      	mov	r8, r1
 8005c88:	0049      	lsls	r1, r1, #1
 8005c8a:	e776      	b.n	8005b7a <_malloc_r+0x9a>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	425b      	negs	r3, r3
 8005c90:	4498      	add	r8, r3
 8005c92:	e78c      	b.n	8005bae <_malloc_r+0xce>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	18ba      	adds	r2, r7, r2
 8005c9a:	6850      	ldr	r0, [r2, #4]
 8005c9c:	60d9      	str	r1, [r3, #12]
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	1c30      	adds	r0, r6, #0
 8005ca6:	6053      	str	r3, [r2, #4]
 8005ca8:	f000 fa32 	bl	8006110 <__malloc_unlock>
 8005cac:	1c38      	adds	r0, r7, #0
 8005cae:	3008      	adds	r0, #8
 8005cb0:	e748      	b.n	8005b44 <_malloc_r+0x64>
 8005cb2:	183a      	adds	r2, r7, r0
 8005cb4:	6851      	ldr	r1, [r2, #4]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	e7f3      	b.n	8005ca4 <_malloc_r+0x1c4>
 8005cbc:	68af      	ldr	r7, [r5, #8]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	4398      	bics	r0, r3
 8005cc4:	4681      	mov	r9, r0
 8005cc6:	4284      	cmp	r4, r0
 8005cc8:	d803      	bhi.n	8005cd2 <_malloc_r+0x1f2>
 8005cca:	1b03      	subs	r3, r0, r4
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	dd00      	ble.n	8005cd2 <_malloc_r+0x1f2>
 8005cd0:	e084      	b.n	8005ddc <_malloc_r+0x2fc>
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	1879      	adds	r1, r7, r1
 8005cd6:	4a51      	ldr	r2, [pc, #324]	; (8005e1c <_malloc_r+0x33c>)
 8005cd8:	9101      	str	r1, [sp, #4]
 8005cda:	4951      	ldr	r1, [pc, #324]	; (8005e20 <_malloc_r+0x340>)
 8005cdc:	6810      	ldr	r0, [r2, #0]
 8005cde:	4692      	mov	sl, r2
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	1823      	adds	r3, r4, r0
 8005ce4:	468b      	mov	fp, r1
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	d100      	bne.n	8005cec <_malloc_r+0x20c>
 8005cea:	e13f      	b.n	8005f6c <_malloc_r+0x48c>
 8005cec:	484d      	ldr	r0, [pc, #308]	; (8005e24 <_malloc_r+0x344>)
 8005cee:	181b      	adds	r3, r3, r0
 8005cf0:	0b1b      	lsrs	r3, r3, #12
 8005cf2:	031b      	lsls	r3, r3, #12
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	9900      	ldr	r1, [sp, #0]
 8005cf8:	1c30      	adds	r0, r6, #0
 8005cfa:	f000 feef 	bl	8006adc <_sbrk_r>
 8005cfe:	1c01      	adds	r1, r0, #0
 8005d00:	4680      	mov	r8, r0
 8005d02:	3101      	adds	r1, #1
 8005d04:	d05f      	beq.n	8005dc6 <_malloc_r+0x2e6>
 8005d06:	9a01      	ldr	r2, [sp, #4]
 8005d08:	4282      	cmp	r2, r0
 8005d0a:	d900      	bls.n	8005d0e <_malloc_r+0x22e>
 8005d0c:	e103      	b.n	8005f16 <_malloc_r+0x436>
 8005d0e:	4651      	mov	r1, sl
 8005d10:	9800      	ldr	r0, [sp, #0]
 8005d12:	6849      	ldr	r1, [r1, #4]
 8005d14:	1843      	adds	r3, r0, r1
 8005d16:	9801      	ldr	r0, [sp, #4]
 8005d18:	4652      	mov	r2, sl
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	4540      	cmp	r0, r8
 8005d1e:	d100      	bne.n	8005d22 <_malloc_r+0x242>
 8005d20:	e132      	b.n	8005f88 <_malloc_r+0x4a8>
 8005d22:	465a      	mov	r2, fp
 8005d24:	6892      	ldr	r2, [r2, #8]
 8005d26:	3201      	adds	r2, #1
 8005d28:	d100      	bne.n	8005d2c <_malloc_r+0x24c>
 8005d2a:	e144      	b.n	8005fb6 <_malloc_r+0x4d6>
 8005d2c:	9801      	ldr	r0, [sp, #4]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1a0a      	subs	r2, r1, r0
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	4651      	mov	r1, sl
 8005d36:	604b      	str	r3, [r1, #4]
 8005d38:	2307      	movs	r3, #7
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <_malloc_r+0x262>
 8005d40:	e0fb      	b.n	8005f3a <_malloc_r+0x45a>
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	3208      	adds	r2, #8
 8005d46:	4690      	mov	r8, r2
 8005d48:	4a37      	ldr	r2, [pc, #220]	; (8005e28 <_malloc_r+0x348>)
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	9800      	ldr	r0, [sp, #0]
 8005d4e:	1c02      	adds	r2, r0, #0
 8005d50:	4442      	add	r2, r8
 8005d52:	0512      	lsls	r2, r2, #20
 8005d54:	0d12      	lsrs	r2, r2, #20
 8005d56:	1a9a      	subs	r2, r3, r2
 8005d58:	1c11      	adds	r1, r2, #0
 8005d5a:	1c30      	adds	r0, r6, #0
 8005d5c:	4693      	mov	fp, r2
 8005d5e:	f000 febd 	bl	8006adc <_sbrk_r>
 8005d62:	1c41      	adds	r1, r0, #1
 8005d64:	d100      	bne.n	8005d68 <_malloc_r+0x288>
 8005d66:	e11a      	b.n	8005f9e <_malloc_r+0x4be>
 8005d68:	4642      	mov	r2, r8
 8005d6a:	1a80      	subs	r0, r0, r2
 8005d6c:	4458      	add	r0, fp
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4318      	orrs	r0, r3
 8005d72:	4652      	mov	r2, sl
 8005d74:	6851      	ldr	r1, [r2, #4]
 8005d76:	1c0b      	adds	r3, r1, #0
 8005d78:	445b      	add	r3, fp
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	6053      	str	r3, [r2, #4]
 8005d7e:	60a9      	str	r1, [r5, #8]
 8005d80:	6048      	str	r0, [r1, #4]
 8005d82:	42af      	cmp	r7, r5
 8005d84:	d013      	beq.n	8005dae <_malloc_r+0x2ce>
 8005d86:	464a      	mov	r2, r9
 8005d88:	2a0f      	cmp	r2, #15
 8005d8a:	d800      	bhi.n	8005d8e <_malloc_r+0x2ae>
 8005d8c:	e0e1      	b.n	8005f52 <_malloc_r+0x472>
 8005d8e:	464a      	mov	r2, r9
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	2107      	movs	r1, #7
 8005d94:	3a0c      	subs	r2, #12
 8005d96:	438a      	bics	r2, r1
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4001      	ands	r1, r0
 8005d9c:	4311      	orrs	r1, r2
 8005d9e:	6079      	str	r1, [r7, #4]
 8005da0:	2005      	movs	r0, #5
 8005da2:	18b9      	adds	r1, r7, r2
 8005da4:	6048      	str	r0, [r1, #4]
 8005da6:	6088      	str	r0, [r1, #8]
 8005da8:	2a0f      	cmp	r2, #15
 8005daa:	d900      	bls.n	8005dae <_malloc_r+0x2ce>
 8005dac:	e0fb      	b.n	8005fa6 <_malloc_r+0x4c6>
 8005dae:	4652      	mov	r2, sl
 8005db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <_malloc_r+0x2da>
 8005db6:	4650      	mov	r0, sl
 8005db8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005dba:	4651      	mov	r1, sl
 8005dbc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	d901      	bls.n	8005dc6 <_malloc_r+0x2e6>
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc6:	68af      	ldr	r7, [r5, #8]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	2303      	movs	r3, #3
 8005dcc:	439a      	bics	r2, r3
 8005dce:	1b13      	subs	r3, r2, r4
 8005dd0:	4294      	cmp	r4, r2
 8005dd2:	d900      	bls.n	8005dd6 <_malloc_r+0x2f6>
 8005dd4:	e0a3      	b.n	8005f1e <_malloc_r+0x43e>
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	dc00      	bgt.n	8005ddc <_malloc_r+0x2fc>
 8005dda:	e0a0      	b.n	8005f1e <_malloc_r+0x43e>
 8005ddc:	2201      	movs	r2, #1
 8005dde:	1c21      	adds	r1, r4, #0
 8005de0:	4311      	orrs	r1, r2
 8005de2:	193c      	adds	r4, r7, r4
 8005de4:	4313      	orrs	r3, r2
 8005de6:	6079      	str	r1, [r7, #4]
 8005de8:	1c30      	adds	r0, r6, #0
 8005dea:	60ac      	str	r4, [r5, #8]
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	f000 f98f 	bl	8006110 <__malloc_unlock>
 8005df2:	1c38      	adds	r0, r7, #0
 8005df4:	3008      	adds	r0, #8
 8005df6:	e6a5      	b.n	8005b44 <_malloc_r+0x64>
 8005df8:	2b14      	cmp	r3, #20
 8005dfa:	d800      	bhi.n	8005dfe <_malloc_r+0x31e>
 8005dfc:	e082      	b.n	8005f04 <_malloc_r+0x424>
 8005dfe:	2b54      	cmp	r3, #84	; 0x54
 8005e00:	d900      	bls.n	8005e04 <_malloc_r+0x324>
 8005e02:	e091      	b.n	8005f28 <_malloc_r+0x448>
 8005e04:	0b23      	lsrs	r3, r4, #12
 8005e06:	336e      	adds	r3, #110	; 0x6e
 8005e08:	4698      	mov	r8, r3
 8005e0a:	0059      	lsls	r1, r3, #1
 8005e0c:	e6b5      	b.n	8005b7a <_malloc_r+0x9a>
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	000001f7 	.word	0x000001f7
 8005e14:	2000054c 	.word	0x2000054c
 8005e18:	000001ff 	.word	0x000001ff
 8005e1c:	20000970 	.word	0x20000970
 8005e20:	2000094c 	.word	0x2000094c
 8005e24:	0000100f 	.word	0x0000100f
 8005e28:	00001008 	.word	0x00001008
 8005e2c:	0a43      	lsrs	r3, r0, #9
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d96c      	bls.n	8005f0c <_malloc_r+0x42c>
 8005e32:	2b14      	cmp	r3, #20
 8005e34:	d900      	bls.n	8005e38 <_malloc_r+0x358>
 8005e36:	e09c      	b.n	8005f72 <_malloc_r+0x492>
 8005e38:	335b      	adds	r3, #91	; 0x5b
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	0058      	lsls	r0, r3, #1
 8005e3e:	0080      	lsls	r0, r0, #2
 8005e40:	1940      	adds	r0, r0, r5
 8005e42:	6883      	ldr	r3, [r0, #8]
 8005e44:	4681      	mov	r9, r0
 8005e46:	2003      	movs	r0, #3
 8005e48:	4684      	mov	ip, r0
 8005e4a:	454b      	cmp	r3, r9
 8005e4c:	d078      	beq.n	8005f40 <_malloc_r+0x460>
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	4660      	mov	r0, ip
 8005e52:	4381      	bics	r1, r0
 8005e54:	428a      	cmp	r2, r1
 8005e56:	d202      	bcs.n	8005e5e <_malloc_r+0x37e>
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4599      	cmp	r9, r3
 8005e5c:	d1f7      	bne.n	8005e4e <_malloc_r+0x36e>
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	6868      	ldr	r0, [r5, #4]
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	60df      	str	r7, [r3, #12]
 8005e68:	6097      	str	r7, [r2, #8]
 8005e6a:	e6c6      	b.n	8005bfa <_malloc_r+0x11a>
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	193a      	adds	r2, r7, r4
 8005e70:	4304      	orrs	r4, r0
 8005e72:	4308      	orrs	r0, r1
 8005e74:	607c      	str	r4, [r7, #4]
 8005e76:	616a      	str	r2, [r5, #20]
 8005e78:	612a      	str	r2, [r5, #16]
 8005e7a:	6050      	str	r0, [r2, #4]
 8005e7c:	60d3      	str	r3, [r2, #12]
 8005e7e:	1c30      	adds	r0, r6, #0
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	5051      	str	r1, [r2, r1]
 8005e84:	f000 f944 	bl	8006110 <__malloc_unlock>
 8005e88:	1c38      	adds	r0, r7, #0
 8005e8a:	3008      	adds	r0, #8
 8005e8c:	e65a      	b.n	8005b44 <_malloc_r+0x64>
 8005e8e:	6868      	ldr	r0, [r5, #4]
 8005e90:	e6b3      	b.n	8005bfa <_malloc_r+0x11a>
 8005e92:	2201      	movs	r2, #1
 8005e94:	4491      	add	r9, r2
 8005e96:	4663      	mov	r3, ip
 8005e98:	464a      	mov	r2, r9
 8005e9a:	3008      	adds	r0, #8
 8005e9c:	4213      	tst	r3, r2
 8005e9e:	d000      	beq.n	8005ea2 <_malloc_r+0x3c2>
 8005ea0:	e6c9      	b.n	8005c36 <_malloc_r+0x156>
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	4660      	mov	r0, ip
 8005ea8:	4218      	tst	r0, r3
 8005eaa:	d100      	bne.n	8005eae <_malloc_r+0x3ce>
 8005eac:	e098      	b.n	8005fe0 <_malloc_r+0x500>
 8005eae:	1c10      	adds	r0, r2, #0
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	3808      	subs	r0, #8
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4282      	cmp	r2, r0
 8005eb8:	d0f5      	beq.n	8005ea6 <_malloc_r+0x3c6>
 8005eba:	686b      	ldr	r3, [r5, #4]
 8005ebc:	0049      	lsls	r1, r1, #1
 8005ebe:	4299      	cmp	r1, r3
 8005ec0:	d900      	bls.n	8005ec4 <_malloc_r+0x3e4>
 8005ec2:	e6fb      	b.n	8005cbc <_malloc_r+0x1dc>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d100      	bne.n	8005eca <_malloc_r+0x3ea>
 8005ec8:	e6f8      	b.n	8005cbc <_malloc_r+0x1dc>
 8005eca:	4219      	tst	r1, r3
 8005ecc:	d100      	bne.n	8005ed0 <_malloc_r+0x3f0>
 8005ece:	e08b      	b.n	8005fe8 <_malloc_r+0x508>
 8005ed0:	46c8      	mov	r8, r9
 8005ed2:	e6aa      	b.n	8005c2a <_malloc_r+0x14a>
 8005ed4:	1c3b      	adds	r3, r7, #0
 8005ed6:	697f      	ldr	r7, [r7, #20]
 8005ed8:	3202      	adds	r2, #2
 8005eda:	3308      	adds	r3, #8
 8005edc:	4690      	mov	r8, r2
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	d100      	bne.n	8005ee4 <_malloc_r+0x404>
 8005ee2:	e666      	b.n	8005bb2 <_malloc_r+0xd2>
 8005ee4:	e61d      	b.n	8005b22 <_malloc_r+0x42>
 8005ee6:	18ba      	adds	r2, r7, r2
 8005ee8:	6850      	ldr	r0, [r2, #4]
 8005eea:	2301      	movs	r3, #1
 8005eec:	4303      	orrs	r3, r0
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	1c30      	adds	r0, r6, #0
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	6093      	str	r3, [r2, #8]
 8005efa:	f000 f909 	bl	8006110 <__malloc_unlock>
 8005efe:	1c38      	adds	r0, r7, #0
 8005f00:	3008      	adds	r0, #8
 8005f02:	e61f      	b.n	8005b44 <_malloc_r+0x64>
 8005f04:	335b      	adds	r3, #91	; 0x5b
 8005f06:	4698      	mov	r8, r3
 8005f08:	0059      	lsls	r1, r3, #1
 8005f0a:	e636      	b.n	8005b7a <_malloc_r+0x9a>
 8005f0c:	0981      	lsrs	r1, r0, #6
 8005f0e:	3138      	adds	r1, #56	; 0x38
 8005f10:	468a      	mov	sl, r1
 8005f12:	0048      	lsls	r0, r1, #1
 8005f14:	e793      	b.n	8005e3e <_malloc_r+0x35e>
 8005f16:	42af      	cmp	r7, r5
 8005f18:	d000      	beq.n	8005f1c <_malloc_r+0x43c>
 8005f1a:	e754      	b.n	8005dc6 <_malloc_r+0x2e6>
 8005f1c:	e6f7      	b.n	8005d0e <_malloc_r+0x22e>
 8005f1e:	1c30      	adds	r0, r6, #0
 8005f20:	f000 f8f6 	bl	8006110 <__malloc_unlock>
 8005f24:	2000      	movs	r0, #0
 8005f26:	e60d      	b.n	8005b44 <_malloc_r+0x64>
 8005f28:	22aa      	movs	r2, #170	; 0xaa
 8005f2a:	0052      	lsls	r2, r2, #1
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d815      	bhi.n	8005f5c <_malloc_r+0x47c>
 8005f30:	0be3      	lsrs	r3, r4, #15
 8005f32:	3377      	adds	r3, #119	; 0x77
 8005f34:	4698      	mov	r8, r3
 8005f36:	0059      	lsls	r1, r3, #1
 8005f38:	e61f      	b.n	8005b7a <_malloc_r+0x9a>
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	015b      	lsls	r3, r3, #5
 8005f3e:	e705      	b.n	8005d4c <_malloc_r+0x26c>
 8005f40:	4652      	mov	r2, sl
 8005f42:	1091      	asrs	r1, r2, #2
 8005f44:	2001      	movs	r0, #1
 8005f46:	4088      	lsls	r0, r1
 8005f48:	6869      	ldr	r1, [r5, #4]
 8005f4a:	4308      	orrs	r0, r1
 8005f4c:	6068      	str	r0, [r5, #4]
 8005f4e:	1c1a      	adds	r2, r3, #0
 8005f50:	e787      	b.n	8005e62 <_malloc_r+0x382>
 8005f52:	2301      	movs	r3, #1
 8005f54:	604b      	str	r3, [r1, #4]
 8005f56:	4647      	mov	r7, r8
 8005f58:	2200      	movs	r2, #0
 8005f5a:	e738      	b.n	8005dce <_malloc_r+0x2ee>
 8005f5c:	4a26      	ldr	r2, [pc, #152]	; (8005ff8 <_malloc_r+0x518>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d80e      	bhi.n	8005f80 <_malloc_r+0x4a0>
 8005f62:	0ca3      	lsrs	r3, r4, #18
 8005f64:	337c      	adds	r3, #124	; 0x7c
 8005f66:	4698      	mov	r8, r3
 8005f68:	0059      	lsls	r1, r3, #1
 8005f6a:	e606      	b.n	8005b7a <_malloc_r+0x9a>
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	e6c1      	b.n	8005cf6 <_malloc_r+0x216>
 8005f72:	2b54      	cmp	r3, #84	; 0x54
 8005f74:	d823      	bhi.n	8005fbe <_malloc_r+0x4de>
 8005f76:	0b01      	lsrs	r1, r0, #12
 8005f78:	316e      	adds	r1, #110	; 0x6e
 8005f7a:	468a      	mov	sl, r1
 8005f7c:	0048      	lsls	r0, r1, #1
 8005f7e:	e75e      	b.n	8005e3e <_malloc_r+0x35e>
 8005f80:	227e      	movs	r2, #126	; 0x7e
 8005f82:	21fc      	movs	r1, #252	; 0xfc
 8005f84:	4690      	mov	r8, r2
 8005f86:	e5f8      	b.n	8005b7a <_malloc_r+0x9a>
 8005f88:	0502      	lsls	r2, r0, #20
 8005f8a:	d000      	beq.n	8005f8e <_malloc_r+0x4ae>
 8005f8c:	e6c9      	b.n	8005d22 <_malloc_r+0x242>
 8005f8e:	9900      	ldr	r1, [sp, #0]
 8005f90:	1c08      	adds	r0, r1, #0
 8005f92:	68aa      	ldr	r2, [r5, #8]
 8005f94:	4448      	add	r0, r9
 8005f96:	2101      	movs	r1, #1
 8005f98:	4301      	orrs	r1, r0
 8005f9a:	6051      	str	r1, [r2, #4]
 8005f9c:	e707      	b.n	8005dae <_malloc_r+0x2ce>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	469b      	mov	fp, r3
 8005fa4:	e6e5      	b.n	8005d72 <_malloc_r+0x292>
 8005fa6:	1c39      	adds	r1, r7, #0
 8005fa8:	3108      	adds	r1, #8
 8005faa:	1c30      	adds	r0, r6, #0
 8005fac:	f7ff fc7e 	bl	80058ac <_free_r>
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	684b      	ldr	r3, [r1, #4]
 8005fb4:	e6fb      	b.n	8005dae <_malloc_r+0x2ce>
 8005fb6:	4643      	mov	r3, r8
 8005fb8:	4658      	mov	r0, fp
 8005fba:	6083      	str	r3, [r0, #8]
 8005fbc:	e6bc      	b.n	8005d38 <_malloc_r+0x258>
 8005fbe:	21aa      	movs	r1, #170	; 0xaa
 8005fc0:	0049      	lsls	r1, r1, #1
 8005fc2:	428b      	cmp	r3, r1
 8005fc4:	d804      	bhi.n	8005fd0 <_malloc_r+0x4f0>
 8005fc6:	0bc1      	lsrs	r1, r0, #15
 8005fc8:	3177      	adds	r1, #119	; 0x77
 8005fca:	468a      	mov	sl, r1
 8005fcc:	0048      	lsls	r0, r1, #1
 8005fce:	e736      	b.n	8005e3e <_malloc_r+0x35e>
 8005fd0:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <_malloc_r+0x518>)
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d80c      	bhi.n	8005ff0 <_malloc_r+0x510>
 8005fd6:	0c81      	lsrs	r1, r0, #18
 8005fd8:	317c      	adds	r1, #124	; 0x7c
 8005fda:	468a      	mov	sl, r1
 8005fdc:	0048      	lsls	r0, r1, #1
 8005fde:	e72e      	b.n	8005e3e <_malloc_r+0x35e>
 8005fe0:	686b      	ldr	r3, [r5, #4]
 8005fe2:	438b      	bics	r3, r1
 8005fe4:	606b      	str	r3, [r5, #4]
 8005fe6:	e769      	b.n	8005ebc <_malloc_r+0x3dc>
 8005fe8:	2204      	movs	r2, #4
 8005fea:	4491      	add	r9, r2
 8005fec:	0049      	lsls	r1, r1, #1
 8005fee:	e76c      	b.n	8005eca <_malloc_r+0x3ea>
 8005ff0:	217e      	movs	r1, #126	; 0x7e
 8005ff2:	20fc      	movs	r0, #252	; 0xfc
 8005ff4:	468a      	mov	sl, r1
 8005ff6:	e722      	b.n	8005e3e <_malloc_r+0x35e>
 8005ff8:	00000554 	.word	0x00000554

08005ffc <memchr>:
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	060c      	lsls	r4, r1, #24
 8006000:	0e24      	lsrs	r4, r4, #24
 8006002:	0783      	lsls	r3, r0, #30
 8006004:	d039      	beq.n	800607a <memchr+0x7e>
 8006006:	1e53      	subs	r3, r2, #1
 8006008:	2a00      	cmp	r2, #0
 800600a:	d01f      	beq.n	800604c <memchr+0x50>
 800600c:	7802      	ldrb	r2, [r0, #0]
 800600e:	42a2      	cmp	r2, r4
 8006010:	d01d      	beq.n	800604e <memchr+0x52>
 8006012:	2503      	movs	r5, #3
 8006014:	e005      	b.n	8006022 <memchr+0x26>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d018      	beq.n	800604c <memchr+0x50>
 800601a:	7802      	ldrb	r2, [r0, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	42a2      	cmp	r2, r4
 8006020:	d015      	beq.n	800604e <memchr+0x52>
 8006022:	3001      	adds	r0, #1
 8006024:	4228      	tst	r0, r5
 8006026:	d1f6      	bne.n	8006016 <memchr+0x1a>
 8006028:	2b03      	cmp	r3, #3
 800602a:	d813      	bhi.n	8006054 <memchr+0x58>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <memchr+0x50>
 8006030:	7802      	ldrb	r2, [r0, #0]
 8006032:	42a2      	cmp	r2, r4
 8006034:	d00b      	beq.n	800604e <memchr+0x52>
 8006036:	1c42      	adds	r2, r0, #1
 8006038:	18c3      	adds	r3, r0, r3
 800603a:	e004      	b.n	8006046 <memchr+0x4a>
 800603c:	3201      	adds	r2, #1
 800603e:	1e51      	subs	r1, r2, #1
 8006040:	7809      	ldrb	r1, [r1, #0]
 8006042:	42a1      	cmp	r1, r4
 8006044:	d003      	beq.n	800604e <memchr+0x52>
 8006046:	1c10      	adds	r0, r2, #0
 8006048:	429a      	cmp	r2, r3
 800604a:	d1f7      	bne.n	800603c <memchr+0x40>
 800604c:	2000      	movs	r0, #0
 800604e:	bcf0      	pop	{r4, r5, r6, r7}
 8006050:	bc02      	pop	{r1}
 8006052:	4708      	bx	r1
 8006054:	26ff      	movs	r6, #255	; 0xff
 8006056:	4031      	ands	r1, r6
 8006058:	020e      	lsls	r6, r1, #8
 800605a:	4331      	orrs	r1, r6
 800605c:	040e      	lsls	r6, r1, #16
 800605e:	4d08      	ldr	r5, [pc, #32]	; (8006080 <memchr+0x84>)
 8006060:	430e      	orrs	r6, r1
 8006062:	6802      	ldr	r2, [r0, #0]
 8006064:	4f07      	ldr	r7, [pc, #28]	; (8006084 <memchr+0x88>)
 8006066:	4072      	eors	r2, r6
 8006068:	19d1      	adds	r1, r2, r7
 800606a:	4391      	bics	r1, r2
 800606c:	4229      	tst	r1, r5
 800606e:	d1dd      	bne.n	800602c <memchr+0x30>
 8006070:	3b04      	subs	r3, #4
 8006072:	3004      	adds	r0, #4
 8006074:	2b03      	cmp	r3, #3
 8006076:	d8f4      	bhi.n	8006062 <memchr+0x66>
 8006078:	e7d8      	b.n	800602c <memchr+0x30>
 800607a:	1c13      	adds	r3, r2, #0
 800607c:	e7d4      	b.n	8006028 <memchr+0x2c>
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	80808080 	.word	0x80808080
 8006084:	fefefeff 	.word	0xfefefeff

08006088 <memcpy>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	2a0f      	cmp	r2, #15
 800608c:	d934      	bls.n	80060f8 <memcpy+0x70>
 800608e:	1c0b      	adds	r3, r1, #0
 8006090:	4303      	orrs	r3, r0
 8006092:	079c      	lsls	r4, r3, #30
 8006094:	d134      	bne.n	8006100 <memcpy+0x78>
 8006096:	1c14      	adds	r4, r2, #0
 8006098:	3c10      	subs	r4, #16
 800609a:	0924      	lsrs	r4, r4, #4
 800609c:	3401      	adds	r4, #1
 800609e:	0124      	lsls	r4, r4, #4
 80060a0:	190f      	adds	r7, r1, r4
 80060a2:	1c03      	adds	r3, r0, #0
 80060a4:	680d      	ldr	r5, [r1, #0]
 80060a6:	601d      	str	r5, [r3, #0]
 80060a8:	684d      	ldr	r5, [r1, #4]
 80060aa:	605d      	str	r5, [r3, #4]
 80060ac:	688d      	ldr	r5, [r1, #8]
 80060ae:	609d      	str	r5, [r3, #8]
 80060b0:	68cd      	ldr	r5, [r1, #12]
 80060b2:	3110      	adds	r1, #16
 80060b4:	60dd      	str	r5, [r3, #12]
 80060b6:	3310      	adds	r3, #16
 80060b8:	428f      	cmp	r7, r1
 80060ba:	d1f3      	bne.n	80060a4 <memcpy+0x1c>
 80060bc:	250f      	movs	r5, #15
 80060be:	1904      	adds	r4, r0, r4
 80060c0:	4015      	ands	r5, r2
 80060c2:	2d03      	cmp	r5, #3
 80060c4:	d91e      	bls.n	8006104 <memcpy+0x7c>
 80060c6:	1f29      	subs	r1, r5, #4
 80060c8:	0889      	lsrs	r1, r1, #2
 80060ca:	3101      	adds	r1, #1
 80060cc:	0089      	lsls	r1, r1, #2
 80060ce:	1863      	adds	r3, r4, r1
 80060d0:	1c3d      	adds	r5, r7, #0
 80060d2:	cd40      	ldmia	r5!, {r6}
 80060d4:	c440      	stmia	r4!, {r6}
 80060d6:	429c      	cmp	r4, r3
 80060d8:	d1fb      	bne.n	80060d2 <memcpy+0x4a>
 80060da:	2403      	movs	r4, #3
 80060dc:	4022      	ands	r2, r4
 80060de:	1879      	adds	r1, r7, r1
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d006      	beq.n	80060f2 <memcpy+0x6a>
 80060e4:	189a      	adds	r2, r3, r2
 80060e6:	780c      	ldrb	r4, [r1, #0]
 80060e8:	701c      	strb	r4, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	3101      	adds	r1, #1
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d1f9      	bne.n	80060e6 <memcpy+0x5e>
 80060f2:	bcf0      	pop	{r4, r5, r6, r7}
 80060f4:	bc02      	pop	{r1}
 80060f6:	4708      	bx	r1
 80060f8:	1c03      	adds	r3, r0, #0
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1f2      	bne.n	80060e4 <memcpy+0x5c>
 80060fe:	e7f8      	b.n	80060f2 <memcpy+0x6a>
 8006100:	1c03      	adds	r3, r0, #0
 8006102:	e7ef      	b.n	80060e4 <memcpy+0x5c>
 8006104:	1c39      	adds	r1, r7, #0
 8006106:	1c23      	adds	r3, r4, #0
 8006108:	1c2a      	adds	r2, r5, #0
 800610a:	e7f6      	b.n	80060fa <memcpy+0x72>

0800610c <__malloc_lock>:
 800610c:	4770      	bx	lr
 800610e:	46c0      	nop			; (mov r8, r8)

08006110 <__malloc_unlock>:
 8006110:	4770      	bx	lr
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	0000      	movs	r0, r0
	...

08006118 <_Balloc>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	1c04      	adds	r4, r0, #0
 800611c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800611e:	1c0d      	adds	r5, r1, #0
 8006120:	2800      	cmp	r0, #0
 8006122:	d00c      	beq.n	800613e <_Balloc+0x26>
 8006124:	00aa      	lsls	r2, r5, #2
 8006126:	1882      	adds	r2, r0, r2
 8006128:	6810      	ldr	r0, [r2, #0]
 800612a:	2800      	cmp	r0, #0
 800612c:	d011      	beq.n	8006152 <_Balloc+0x3a>
 800612e:	6803      	ldr	r3, [r0, #0]
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	6102      	str	r2, [r0, #16]
 8006136:	60c2      	str	r2, [r0, #12]
 8006138:	bc70      	pop	{r4, r5, r6}
 800613a:	bc02      	pop	{r1}
 800613c:	4708      	bx	r1
 800613e:	1c20      	adds	r0, r4, #0
 8006140:	2104      	movs	r1, #4
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	f001 f9ee 	bl	8007524 <_calloc_r>
 8006148:	64e0      	str	r0, [r4, #76]	; 0x4c
 800614a:	2800      	cmp	r0, #0
 800614c:	d1ea      	bne.n	8006124 <_Balloc+0xc>
 800614e:	2000      	movs	r0, #0
 8006150:	e7f2      	b.n	8006138 <_Balloc+0x20>
 8006152:	2601      	movs	r6, #1
 8006154:	40ae      	lsls	r6, r5
 8006156:	1d72      	adds	r2, r6, #5
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	1c20      	adds	r0, r4, #0
 800615c:	2101      	movs	r1, #1
 800615e:	f001 f9e1 	bl	8007524 <_calloc_r>
 8006162:	2800      	cmp	r0, #0
 8006164:	d0f3      	beq.n	800614e <_Balloc+0x36>
 8006166:	6045      	str	r5, [r0, #4]
 8006168:	6086      	str	r6, [r0, #8]
 800616a:	e7e2      	b.n	8006132 <_Balloc+0x1a>

0800616c <_Bfree>:
 800616c:	b500      	push	{lr}
 800616e:	2900      	cmp	r1, #0
 8006170:	d006      	beq.n	8006180 <_Bfree+0x14>
 8006172:	684a      	ldr	r2, [r1, #4]
 8006174:	0093      	lsls	r3, r2, #2
 8006176:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006178:	18d3      	adds	r3, r2, r3
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	600a      	str	r2, [r1, #0]
 800617e:	6019      	str	r1, [r3, #0]
 8006180:	bc01      	pop	{r0}
 8006182:	4700      	bx	r0

08006184 <__multadd>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	464d      	mov	r5, r9
 8006188:	4644      	mov	r4, r8
 800618a:	465f      	mov	r7, fp
 800618c:	4656      	mov	r6, sl
 800618e:	4698      	mov	r8, r3
 8006190:	690b      	ldr	r3, [r1, #16]
 8006192:	b4f0      	push	{r4, r5, r6, r7}
 8006194:	1c0d      	adds	r5, r1, #0
 8006196:	4683      	mov	fp, r0
 8006198:	468a      	mov	sl, r1
 800619a:	4699      	mov	r9, r3
 800619c:	3514      	adds	r5, #20
 800619e:	2400      	movs	r4, #0
 80061a0:	682e      	ldr	r6, [r5, #0]
 80061a2:	0437      	lsls	r7, r6, #16
 80061a4:	0c3f      	lsrs	r7, r7, #16
 80061a6:	4357      	muls	r7, r2
 80061a8:	0c36      	lsrs	r6, r6, #16
 80061aa:	4356      	muls	r6, r2
 80061ac:	4447      	add	r7, r8
 80061ae:	0c3b      	lsrs	r3, r7, #16
 80061b0:	199e      	adds	r6, r3, r6
 80061b2:	043f      	lsls	r7, r7, #16
 80061b4:	0c31      	lsrs	r1, r6, #16
 80061b6:	0c3f      	lsrs	r7, r7, #16
 80061b8:	0436      	lsls	r6, r6, #16
 80061ba:	19f6      	adds	r6, r6, r7
 80061bc:	3401      	adds	r4, #1
 80061be:	4688      	mov	r8, r1
 80061c0:	c540      	stmia	r5!, {r6}
 80061c2:	45a1      	cmp	r9, r4
 80061c4:	dcec      	bgt.n	80061a0 <__multadd+0x1c>
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d00d      	beq.n	80061e6 <__multadd+0x62>
 80061ca:	4652      	mov	r2, sl
 80061cc:	6892      	ldr	r2, [r2, #8]
 80061ce:	4591      	cmp	r9, r2
 80061d0:	da12      	bge.n	80061f8 <__multadd+0x74>
 80061d2:	464b      	mov	r3, r9
 80061d4:	3304      	adds	r3, #4
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4453      	add	r3, sl
 80061da:	4642      	mov	r2, r8
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	464b      	mov	r3, r9
 80061e0:	3301      	adds	r3, #1
 80061e2:	4651      	mov	r1, sl
 80061e4:	610b      	str	r3, [r1, #16]
 80061e6:	4650      	mov	r0, sl
 80061e8:	bc3c      	pop	{r2, r3, r4, r5}
 80061ea:	4690      	mov	r8, r2
 80061ec:	4699      	mov	r9, r3
 80061ee:	46a2      	mov	sl, r4
 80061f0:	46ab      	mov	fp, r5
 80061f2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f4:	bc02      	pop	{r1}
 80061f6:	4708      	bx	r1
 80061f8:	4653      	mov	r3, sl
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	4658      	mov	r0, fp
 80061fe:	3101      	adds	r1, #1
 8006200:	f7ff ff8a 	bl	8006118 <_Balloc>
 8006204:	4653      	mov	r3, sl
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	4651      	mov	r1, sl
 800620a:	3202      	adds	r2, #2
 800620c:	1c04      	adds	r4, r0, #0
 800620e:	310c      	adds	r1, #12
 8006210:	0092      	lsls	r2, r2, #2
 8006212:	300c      	adds	r0, #12
 8006214:	f7ff ff38 	bl	8006088 <memcpy>
 8006218:	4651      	mov	r1, sl
 800621a:	6849      	ldr	r1, [r1, #4]
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	4659      	mov	r1, fp
 8006220:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006222:	18d3      	adds	r3, r2, r3
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4651      	mov	r1, sl
 8006228:	600a      	str	r2, [r1, #0]
 800622a:	46a2      	mov	sl, r4
 800622c:	6019      	str	r1, [r3, #0]
 800622e:	e7d0      	b.n	80061d2 <__multadd+0x4e>

08006230 <__s2b>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	4646      	mov	r6, r8
 8006234:	464f      	mov	r7, r9
 8006236:	b4c0      	push	{r6, r7}
 8006238:	1c06      	adds	r6, r0, #0
 800623a:	1c18      	adds	r0, r3, #0
 800623c:	1c0c      	adds	r4, r1, #0
 800623e:	3008      	adds	r0, #8
 8006240:	2109      	movs	r1, #9
 8006242:	4690      	mov	r8, r2
 8006244:	1c1f      	adds	r7, r3, #0
 8006246:	f001 ecbe 	blx	8007bc4 <__aeabi_idiv>
 800624a:	2801      	cmp	r0, #1
 800624c:	dd3b      	ble.n	80062c6 <__s2b+0x96>
 800624e:	2501      	movs	r5, #1
 8006250:	2100      	movs	r1, #0
 8006252:	006d      	lsls	r5, r5, #1
 8006254:	3101      	adds	r1, #1
 8006256:	42a8      	cmp	r0, r5
 8006258:	dcfb      	bgt.n	8006252 <__s2b+0x22>
 800625a:	1c30      	adds	r0, r6, #0
 800625c:	f7ff ff5c 	bl	8006118 <_Balloc>
 8006260:	9b08      	ldr	r3, [sp, #32]
 8006262:	6143      	str	r3, [r0, #20]
 8006264:	2301      	movs	r3, #1
 8006266:	6103      	str	r3, [r0, #16]
 8006268:	4643      	mov	r3, r8
 800626a:	1c01      	adds	r1, r0, #0
 800626c:	2b09      	cmp	r3, #9
 800626e:	dd27      	ble.n	80062c0 <__s2b+0x90>
 8006270:	2309      	movs	r3, #9
 8006272:	191b      	adds	r3, r3, r4
 8006274:	4699      	mov	r9, r3
 8006276:	4444      	add	r4, r8
 8006278:	1c1d      	adds	r5, r3, #0
 800627a:	782b      	ldrb	r3, [r5, #0]
 800627c:	1c30      	adds	r0, r6, #0
 800627e:	3b30      	subs	r3, #48	; 0x30
 8006280:	220a      	movs	r2, #10
 8006282:	f7ff ff7f 	bl	8006184 <__multadd>
 8006286:	3501      	adds	r5, #1
 8006288:	1c01      	adds	r1, r0, #0
 800628a:	42a5      	cmp	r5, r4
 800628c:	d1f5      	bne.n	800627a <__s2b+0x4a>
 800628e:	464c      	mov	r4, r9
 8006290:	4444      	add	r4, r8
 8006292:	3c08      	subs	r4, #8
 8006294:	4643      	mov	r3, r8
 8006296:	429f      	cmp	r7, r3
 8006298:	dd0b      	ble.n	80062b2 <__s2b+0x82>
 800629a:	1aff      	subs	r7, r7, r3
 800629c:	19e7      	adds	r7, r4, r7
 800629e:	7823      	ldrb	r3, [r4, #0]
 80062a0:	1c30      	adds	r0, r6, #0
 80062a2:	3b30      	subs	r3, #48	; 0x30
 80062a4:	220a      	movs	r2, #10
 80062a6:	f7ff ff6d 	bl	8006184 <__multadd>
 80062aa:	3401      	adds	r4, #1
 80062ac:	1c01      	adds	r1, r0, #0
 80062ae:	42bc      	cmp	r4, r7
 80062b0:	d1f5      	bne.n	800629e <__s2b+0x6e>
 80062b2:	1c08      	adds	r0, r1, #0
 80062b4:	bc0c      	pop	{r2, r3}
 80062b6:	4690      	mov	r8, r2
 80062b8:	4699      	mov	r9, r3
 80062ba:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062bc:	bc02      	pop	{r1}
 80062be:	4708      	bx	r1
 80062c0:	340a      	adds	r4, #10
 80062c2:	2309      	movs	r3, #9
 80062c4:	e7e7      	b.n	8006296 <__s2b+0x66>
 80062c6:	2100      	movs	r1, #0
 80062c8:	e7c7      	b.n	800625a <__s2b+0x2a>
 80062ca:	46c0      	nop			; (mov r8, r8)

080062cc <__hi0bits>:
 80062cc:	1c03      	adds	r3, r0, #0
 80062ce:	0c02      	lsrs	r2, r0, #16
 80062d0:	b500      	push	{lr}
 80062d2:	2000      	movs	r0, #0
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	d101      	bne.n	80062dc <__hi0bits+0x10>
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	2010      	movs	r0, #16
 80062dc:	0e1a      	lsrs	r2, r3, #24
 80062de:	d101      	bne.n	80062e4 <__hi0bits+0x18>
 80062e0:	3008      	adds	r0, #8
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	0f1a      	lsrs	r2, r3, #28
 80062e6:	d101      	bne.n	80062ec <__hi0bits+0x20>
 80062e8:	3004      	adds	r0, #4
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	0f9a      	lsrs	r2, r3, #30
 80062ee:	d101      	bne.n	80062f4 <__hi0bits+0x28>
 80062f0:	3002      	adds	r0, #2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db03      	blt.n	8006300 <__hi0bits+0x34>
 80062f8:	3001      	adds	r0, #1
 80062fa:	005a      	lsls	r2, r3, #1
 80062fc:	d400      	bmi.n	8006300 <__hi0bits+0x34>
 80062fe:	2020      	movs	r0, #32
 8006300:	bc02      	pop	{r1}
 8006302:	4708      	bx	r1

08006304 <__lo0bits>:
 8006304:	6803      	ldr	r3, [r0, #0]
 8006306:	b500      	push	{lr}
 8006308:	0759      	lsls	r1, r3, #29
 800630a:	d00a      	beq.n	8006322 <__lo0bits+0x1e>
 800630c:	2200      	movs	r2, #0
 800630e:	07d9      	lsls	r1, r3, #31
 8006310:	d404      	bmi.n	800631c <__lo0bits+0x18>
 8006312:	079a      	lsls	r2, r3, #30
 8006314:	d421      	bmi.n	800635a <__lo0bits+0x56>
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	6003      	str	r3, [r0, #0]
 800631a:	2202      	movs	r2, #2
 800631c:	1c10      	adds	r0, r2, #0
 800631e:	bc02      	pop	{r1}
 8006320:	4708      	bx	r1
 8006322:	0419      	lsls	r1, r3, #16
 8006324:	2200      	movs	r2, #0
 8006326:	2900      	cmp	r1, #0
 8006328:	d101      	bne.n	800632e <__lo0bits+0x2a>
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	2210      	movs	r2, #16
 800632e:	21ff      	movs	r1, #255	; 0xff
 8006330:	4219      	tst	r1, r3
 8006332:	d101      	bne.n	8006338 <__lo0bits+0x34>
 8006334:	3208      	adds	r2, #8
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	0719      	lsls	r1, r3, #28
 800633a:	d101      	bne.n	8006340 <__lo0bits+0x3c>
 800633c:	3204      	adds	r2, #4
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	0799      	lsls	r1, r3, #30
 8006342:	d101      	bne.n	8006348 <__lo0bits+0x44>
 8006344:	3202      	adds	r2, #2
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	07d9      	lsls	r1, r3, #31
 800634a:	d404      	bmi.n	8006356 <__lo0bits+0x52>
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	d101      	bne.n	8006354 <__lo0bits+0x50>
 8006350:	2220      	movs	r2, #32
 8006352:	e7e3      	b.n	800631c <__lo0bits+0x18>
 8006354:	3201      	adds	r2, #1
 8006356:	6003      	str	r3, [r0, #0]
 8006358:	e7e0      	b.n	800631c <__lo0bits+0x18>
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	e7dc      	b.n	800631c <__lo0bits+0x18>
 8006362:	46c0      	nop			; (mov r8, r8)

08006364 <__i2b>:
 8006364:	b510      	push	{r4, lr}
 8006366:	1c0c      	adds	r4, r1, #0
 8006368:	2101      	movs	r1, #1
 800636a:	f7ff fed5 	bl	8006118 <_Balloc>
 800636e:	2301      	movs	r3, #1
 8006370:	6144      	str	r4, [r0, #20]
 8006372:	6103      	str	r3, [r0, #16]
 8006374:	bc10      	pop	{r4}
 8006376:	bc02      	pop	{r1}
 8006378:	4708      	bx	r1
 800637a:	46c0      	nop			; (mov r8, r8)

0800637c <__multiply>:
 800637c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637e:	4644      	mov	r4, r8
 8006380:	4656      	mov	r6, sl
 8006382:	464d      	mov	r5, r9
 8006384:	465f      	mov	r7, fp
 8006386:	b4f0      	push	{r4, r5, r6, r7}
 8006388:	1c0e      	adds	r6, r1, #0
 800638a:	6914      	ldr	r4, [r2, #16]
 800638c:	6909      	ldr	r1, [r1, #16]
 800638e:	b085      	sub	sp, #20
 8006390:	1c15      	adds	r5, r2, #0
 8006392:	4688      	mov	r8, r1
 8006394:	42a1      	cmp	r1, r4
 8006396:	da04      	bge.n	80063a2 <__multiply+0x26>
 8006398:	1c33      	adds	r3, r6, #0
 800639a:	46a0      	mov	r8, r4
 800639c:	1c16      	adds	r6, r2, #0
 800639e:	1c0c      	adds	r4, r1, #0
 80063a0:	1c1d      	adds	r5, r3, #0
 80063a2:	4642      	mov	r2, r8
 80063a4:	68b3      	ldr	r3, [r6, #8]
 80063a6:	1912      	adds	r2, r2, r4
 80063a8:	6871      	ldr	r1, [r6, #4]
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	dd00      	ble.n	80063b2 <__multiply+0x36>
 80063b0:	3101      	adds	r1, #1
 80063b2:	f7ff feb1 	bl	8006118 <_Balloc>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4684      	mov	ip, r0
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4463      	add	r3, ip
 80063c0:	1c02      	adds	r2, r0, #0
 80063c2:	3304      	adds	r3, #4
 80063c4:	469b      	mov	fp, r3
 80063c6:	3214      	adds	r2, #20
 80063c8:	1c13      	adds	r3, r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	4658      	mov	r0, fp
 80063ce:	455a      	cmp	r2, fp
 80063d0:	d203      	bcs.n	80063da <__multiply+0x5e>
 80063d2:	c302      	stmia	r3!, {r1}
 80063d4:	4298      	cmp	r0, r3
 80063d6:	d8fc      	bhi.n	80063d2 <__multiply+0x56>
 80063d8:	4683      	mov	fp, r0
 80063da:	4643      	mov	r3, r8
 80063dc:	3304      	adds	r3, #4
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	3404      	adds	r4, #4
 80063e2:	1c31      	adds	r1, r6, #0
 80063e4:	00a4      	lsls	r4, r4, #2
 80063e6:	18f6      	adds	r6, r6, r3
 80063e8:	2314      	movs	r3, #20
 80063ea:	195b      	adds	r3, r3, r5
 80063ec:	192d      	adds	r5, r5, r4
 80063ee:	3114      	adds	r1, #20
 80063f0:	3504      	adds	r5, #4
 80063f2:	9102      	str	r1, [sp, #8]
 80063f4:	3604      	adds	r6, #4
 80063f6:	4699      	mov	r9, r3
 80063f8:	4692      	mov	sl, r2
 80063fa:	46a8      	mov	r8, r5
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	d249      	bcs.n	8006494 <__multiply+0x118>
 8006400:	4649      	mov	r1, r9
 8006402:	680d      	ldr	r5, [r1, #0]
 8006404:	042c      	lsls	r4, r5, #16
 8006406:	0c24      	lsrs	r4, r4, #16
 8006408:	d020      	beq.n	800644c <__multiply+0xd0>
 800640a:	9a02      	ldr	r2, [sp, #8]
 800640c:	9601      	str	r6, [sp, #4]
 800640e:	4653      	mov	r3, sl
 8006410:	2500      	movs	r5, #0
 8006412:	ca80      	ldmia	r2!, {r7}
 8006414:	0438      	lsls	r0, r7, #16
 8006416:	0c00      	lsrs	r0, r0, #16
 8006418:	1c21      	adds	r1, r4, #0
 800641a:	4341      	muls	r1, r0
 800641c:	0c3f      	lsrs	r7, r7, #16
 800641e:	4367      	muls	r7, r4
 8006420:	681e      	ldr	r6, [r3, #0]
 8006422:	0430      	lsls	r0, r6, #16
 8006424:	0c00      	lsrs	r0, r0, #16
 8006426:	1808      	adds	r0, r1, r0
 8006428:	1940      	adds	r0, r0, r5
 800642a:	0c31      	lsrs	r1, r6, #16
 800642c:	0c05      	lsrs	r5, r0, #16
 800642e:	1879      	adds	r1, r7, r1
 8006430:	1949      	adds	r1, r1, r5
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	0c0d      	lsrs	r5, r1, #16
 8006436:	0c00      	lsrs	r0, r0, #16
 8006438:	0409      	lsls	r1, r1, #16
 800643a:	4301      	orrs	r1, r0
 800643c:	c302      	stmia	r3!, {r1}
 800643e:	9901      	ldr	r1, [sp, #4]
 8006440:	4291      	cmp	r1, r2
 8006442:	d8e6      	bhi.n	8006412 <__multiply+0x96>
 8006444:	601d      	str	r5, [r3, #0]
 8006446:	464a      	mov	r2, r9
 8006448:	6815      	ldr	r5, [r2, #0]
 800644a:	1c0e      	adds	r6, r1, #0
 800644c:	0c2d      	lsrs	r5, r5, #16
 800644e:	d01c      	beq.n	800648a <__multiply+0x10e>
 8006450:	4653      	mov	r3, sl
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	1c10      	adds	r0, r2, #0
 8006458:	4651      	mov	r1, sl
 800645a:	2700      	movs	r7, #0
 800645c:	881c      	ldrh	r4, [r3, #0]
 800645e:	436c      	muls	r4, r5
 8006460:	0c00      	lsrs	r0, r0, #16
 8006462:	1820      	adds	r0, r4, r0
 8006464:	19c7      	adds	r7, r0, r7
 8006466:	0412      	lsls	r2, r2, #16
 8006468:	0438      	lsls	r0, r7, #16
 800646a:	0c12      	lsrs	r2, r2, #16
 800646c:	4302      	orrs	r2, r0
 800646e:	c104      	stmia	r1!, {r2}
 8006470:	cb04      	ldmia	r3!, {r2}
 8006472:	0c12      	lsrs	r2, r2, #16
 8006474:	436a      	muls	r2, r5
 8006476:	6808      	ldr	r0, [r1, #0]
 8006478:	0404      	lsls	r4, r0, #16
 800647a:	0c24      	lsrs	r4, r4, #16
 800647c:	0c3f      	lsrs	r7, r7, #16
 800647e:	18a2      	adds	r2, r4, r2
 8006480:	19d2      	adds	r2, r2, r7
 8006482:	0c17      	lsrs	r7, r2, #16
 8006484:	429e      	cmp	r6, r3
 8006486:	d8e9      	bhi.n	800645c <__multiply+0xe0>
 8006488:	600a      	str	r2, [r1, #0]
 800648a:	2504      	movs	r5, #4
 800648c:	44a9      	add	r9, r5
 800648e:	44aa      	add	sl, r5
 8006490:	45c8      	cmp	r8, r9
 8006492:	d8b5      	bhi.n	8006400 <__multiply+0x84>
 8006494:	9d03      	ldr	r5, [sp, #12]
 8006496:	2d00      	cmp	r5, #0
 8006498:	dd0e      	ble.n	80064b8 <__multiply+0x13c>
 800649a:	465b      	mov	r3, fp
 800649c:	3b04      	subs	r3, #4
 800649e:	681e      	ldr	r6, [r3, #0]
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d109      	bne.n	80064b8 <__multiply+0x13c>
 80064a4:	9a03      	ldr	r2, [sp, #12]
 80064a6:	e003      	b.n	80064b0 <__multiply+0x134>
 80064a8:	3b04      	subs	r3, #4
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d102      	bne.n	80064b6 <__multiply+0x13a>
 80064b0:	3a01      	subs	r2, #1
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	d1f8      	bne.n	80064a8 <__multiply+0x12c>
 80064b6:	9203      	str	r2, [sp, #12]
 80064b8:	9d03      	ldr	r5, [sp, #12]
 80064ba:	4666      	mov	r6, ip
 80064bc:	4660      	mov	r0, ip
 80064be:	6135      	str	r5, [r6, #16]
 80064c0:	b005      	add	sp, #20
 80064c2:	bc3c      	pop	{r2, r3, r4, r5}
 80064c4:	4690      	mov	r8, r2
 80064c6:	4699      	mov	r9, r3
 80064c8:	46a2      	mov	sl, r4
 80064ca:	46ab      	mov	fp, r5
 80064cc:	bcf0      	pop	{r4, r5, r6, r7}
 80064ce:	bc02      	pop	{r1}
 80064d0:	4708      	bx	r1
 80064d2:	46c0      	nop			; (mov r8, r8)

080064d4 <__pow5mult>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	464f      	mov	r7, r9
 80064d8:	4646      	mov	r6, r8
 80064da:	2303      	movs	r3, #3
 80064dc:	b4c0      	push	{r6, r7}
 80064de:	4681      	mov	r9, r0
 80064e0:	1c0f      	adds	r7, r1, #0
 80064e2:	1c14      	adds	r4, r2, #0
 80064e4:	4013      	ands	r3, r2
 80064e6:	d136      	bne.n	8006556 <__pow5mult+0x82>
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	d022      	beq.n	8006532 <__pow5mult+0x5e>
 80064ec:	4649      	mov	r1, r9
 80064ee:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80064f0:	2e00      	cmp	r6, #0
 80064f2:	d039      	beq.n	8006568 <__pow5mult+0x94>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4698      	mov	r8, r3
 80064f8:	e005      	b.n	8006506 <__pow5mult+0x32>
 80064fa:	1064      	asrs	r4, r4, #1
 80064fc:	d019      	beq.n	8006532 <__pow5mult+0x5e>
 80064fe:	6835      	ldr	r5, [r6, #0]
 8006500:	2d00      	cmp	r5, #0
 8006502:	d01d      	beq.n	8006540 <__pow5mult+0x6c>
 8006504:	1c2e      	adds	r6, r5, #0
 8006506:	4641      	mov	r1, r8
 8006508:	4221      	tst	r1, r4
 800650a:	d0f6      	beq.n	80064fa <__pow5mult+0x26>
 800650c:	4648      	mov	r0, r9
 800650e:	1c39      	adds	r1, r7, #0
 8006510:	1c32      	adds	r2, r6, #0
 8006512:	f7ff ff33 	bl	800637c <__multiply>
 8006516:	2f00      	cmp	r7, #0
 8006518:	d01b      	beq.n	8006552 <__pow5mult+0x7e>
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4649      	mov	r1, r9
 800651e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006520:	0093      	lsls	r3, r2, #2
 8006522:	18cb      	adds	r3, r1, r3
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	1064      	asrs	r4, r4, #1
 8006528:	603a      	str	r2, [r7, #0]
 800652a:	601f      	str	r7, [r3, #0]
 800652c:	1c07      	adds	r7, r0, #0
 800652e:	2c00      	cmp	r4, #0
 8006530:	d1e5      	bne.n	80064fe <__pow5mult+0x2a>
 8006532:	1c38      	adds	r0, r7, #0
 8006534:	bc0c      	pop	{r2, r3}
 8006536:	4690      	mov	r8, r2
 8006538:	4699      	mov	r9, r3
 800653a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653c:	bc02      	pop	{r1}
 800653e:	4708      	bx	r1
 8006540:	1c31      	adds	r1, r6, #0
 8006542:	1c32      	adds	r2, r6, #0
 8006544:	4648      	mov	r0, r9
 8006546:	f7ff ff19 	bl	800637c <__multiply>
 800654a:	6030      	str	r0, [r6, #0]
 800654c:	6005      	str	r5, [r0, #0]
 800654e:	1c06      	adds	r6, r0, #0
 8006550:	e7d9      	b.n	8006506 <__pow5mult+0x32>
 8006552:	1c07      	adds	r7, r0, #0
 8006554:	e7d1      	b.n	80064fa <__pow5mult+0x26>
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <__pow5mult+0xa8>)
 8006558:	3b01      	subs	r3, #1
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	589a      	ldr	r2, [r3, r2]
 800655e:	2300      	movs	r3, #0
 8006560:	f7ff fe10 	bl	8006184 <__multadd>
 8006564:	1c07      	adds	r7, r0, #0
 8006566:	e7bf      	b.n	80064e8 <__pow5mult+0x14>
 8006568:	4648      	mov	r0, r9
 800656a:	4905      	ldr	r1, [pc, #20]	; (8006580 <__pow5mult+0xac>)
 800656c:	f7ff fefa 	bl	8006364 <__i2b>
 8006570:	464a      	mov	r2, r9
 8006572:	2300      	movs	r3, #0
 8006574:	6490      	str	r0, [r2, #72]	; 0x48
 8006576:	1c06      	adds	r6, r0, #0
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	e7bb      	b.n	80064f4 <__pow5mult+0x20>
 800657c:	08008c68 	.word	0x08008c68
 8006580:	00000271 	.word	0x00000271

08006584 <__lshift>:
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	464d      	mov	r5, r9
 8006588:	4644      	mov	r4, r8
 800658a:	4656      	mov	r6, sl
 800658c:	465f      	mov	r7, fp
 800658e:	b4f0      	push	{r4, r5, r6, r7}
 8006590:	1c0e      	adds	r6, r1, #0
 8006592:	b083      	sub	sp, #12
 8006594:	9001      	str	r0, [sp, #4]
 8006596:	6930      	ldr	r0, [r6, #16]
 8006598:	1155      	asrs	r5, r2, #5
 800659a:	1940      	adds	r0, r0, r5
 800659c:	1c04      	adds	r4, r0, #0
 800659e:	68b3      	ldr	r3, [r6, #8]
 80065a0:	3401      	adds	r4, #1
 80065a2:	4690      	mov	r8, r2
 80065a4:	6849      	ldr	r1, [r1, #4]
 80065a6:	4681      	mov	r9, r0
 80065a8:	429c      	cmp	r4, r3
 80065aa:	dd03      	ble.n	80065b4 <__lshift+0x30>
 80065ac:	3101      	adds	r1, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	429c      	cmp	r4, r3
 80065b2:	dcfb      	bgt.n	80065ac <__lshift+0x28>
 80065b4:	9801      	ldr	r0, [sp, #4]
 80065b6:	f7ff fdaf 	bl	8006118 <_Balloc>
 80065ba:	1c03      	adds	r3, r0, #0
 80065bc:	4683      	mov	fp, r0
 80065be:	3314      	adds	r3, #20
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	dd09      	ble.n	80065d8 <__lshift+0x54>
 80065c4:	2200      	movs	r2, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	3201      	adds	r2, #1
 80065ca:	c302      	stmia	r3!, {r1}
 80065cc:	42aa      	cmp	r2, r5
 80065ce:	d1fb      	bne.n	80065c8 <__lshift+0x44>
 80065d0:	1d13      	adds	r3, r2, #4
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	445b      	add	r3, fp
 80065d6:	3304      	adds	r3, #4
 80065d8:	6935      	ldr	r5, [r6, #16]
 80065da:	3504      	adds	r5, #4
 80065dc:	4641      	mov	r1, r8
 80065de:	00ad      	lsls	r5, r5, #2
 80065e0:	201f      	movs	r0, #31
 80065e2:	1c32      	adds	r2, r6, #0
 80065e4:	1975      	adds	r5, r6, r5
 80065e6:	4001      	ands	r1, r0
 80065e8:	3214      	adds	r2, #20
 80065ea:	3504      	adds	r5, #4
 80065ec:	4688      	mov	r8, r1
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d027      	beq.n	8006642 <__lshift+0xbe>
 80065f2:	2020      	movs	r0, #32
 80065f4:	1a41      	subs	r1, r0, r1
 80065f6:	468c      	mov	ip, r1
 80065f8:	2100      	movs	r1, #0
 80065fa:	6817      	ldr	r7, [r2, #0]
 80065fc:	4640      	mov	r0, r8
 80065fe:	4087      	lsls	r7, r0
 8006600:	4339      	orrs	r1, r7
 8006602:	c302      	stmia	r3!, {r1}
 8006604:	ca02      	ldmia	r2!, {r1}
 8006606:	4667      	mov	r7, ip
 8006608:	40f9      	lsrs	r1, r7
 800660a:	4295      	cmp	r5, r2
 800660c:	d8f5      	bhi.n	80065fa <__lshift+0x76>
 800660e:	6019      	str	r1, [r3, #0]
 8006610:	2900      	cmp	r1, #0
 8006612:	d001      	beq.n	8006618 <__lshift+0x94>
 8006614:	464c      	mov	r4, r9
 8006616:	3402      	adds	r4, #2
 8006618:	9f01      	ldr	r7, [sp, #4]
 800661a:	6871      	ldr	r1, [r6, #4]
 800661c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	4658      	mov	r0, fp
 8006622:	18d3      	adds	r3, r2, r3
 8006624:	3c01      	subs	r4, #1
 8006626:	6104      	str	r4, [r0, #16]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	6030      	str	r0, [r6, #0]
 800662c:	4658      	mov	r0, fp
 800662e:	601e      	str	r6, [r3, #0]
 8006630:	b003      	add	sp, #12
 8006632:	bc3c      	pop	{r2, r3, r4, r5}
 8006634:	4690      	mov	r8, r2
 8006636:	4699      	mov	r9, r3
 8006638:	46a2      	mov	sl, r4
 800663a:	46ab      	mov	fp, r5
 800663c:	bcf0      	pop	{r4, r5, r6, r7}
 800663e:	bc02      	pop	{r1}
 8006640:	4708      	bx	r1
 8006642:	ca02      	ldmia	r2!, {r1}
 8006644:	c302      	stmia	r3!, {r1}
 8006646:	4295      	cmp	r5, r2
 8006648:	d9e6      	bls.n	8006618 <__lshift+0x94>
 800664a:	ca02      	ldmia	r2!, {r1}
 800664c:	c302      	stmia	r3!, {r1}
 800664e:	4295      	cmp	r5, r2
 8006650:	d8f7      	bhi.n	8006642 <__lshift+0xbe>
 8006652:	e7e1      	b.n	8006618 <__lshift+0x94>

08006654 <__mcmp>:
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	690a      	ldr	r2, [r1, #16]
 8006658:	6904      	ldr	r4, [r0, #16]
 800665a:	1c03      	adds	r3, r0, #0
 800665c:	1aa0      	subs	r0, r4, r2
 800665e:	d10f      	bne.n	8006680 <__mcmp+0x2c>
 8006660:	3204      	adds	r2, #4
 8006662:	0092      	lsls	r2, r2, #2
 8006664:	1c1d      	adds	r5, r3, #0
 8006666:	1889      	adds	r1, r1, r2
 8006668:	189b      	adds	r3, r3, r2
 800666a:	3514      	adds	r5, #20
 800666c:	3304      	adds	r3, #4
 800666e:	3104      	adds	r1, #4
 8006670:	3b04      	subs	r3, #4
 8006672:	3904      	subs	r1, #4
 8006674:	681c      	ldr	r4, [r3, #0]
 8006676:	680a      	ldr	r2, [r1, #0]
 8006678:	4294      	cmp	r4, r2
 800667a:	d104      	bne.n	8006686 <__mcmp+0x32>
 800667c:	429d      	cmp	r5, r3
 800667e:	d3f7      	bcc.n	8006670 <__mcmp+0x1c>
 8006680:	bc30      	pop	{r4, r5}
 8006682:	bc02      	pop	{r1}
 8006684:	4708      	bx	r1
 8006686:	4294      	cmp	r4, r2
 8006688:	4180      	sbcs	r0, r0
 800668a:	2301      	movs	r3, #1
 800668c:	4318      	orrs	r0, r3
 800668e:	e7f7      	b.n	8006680 <__mcmp+0x2c>

08006690 <__mdiff>:
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	4657      	mov	r7, sl
 8006694:	464e      	mov	r6, r9
 8006696:	4645      	mov	r5, r8
 8006698:	b4e0      	push	{r5, r6, r7}
 800669a:	1c0c      	adds	r4, r1, #0
 800669c:	1c07      	adds	r7, r0, #0
 800669e:	1c08      	adds	r0, r1, #0
 80066a0:	1c11      	adds	r1, r2, #0
 80066a2:	1c15      	adds	r5, r2, #0
 80066a4:	f7ff ffd6 	bl	8006654 <__mcmp>
 80066a8:	1e06      	subs	r6, r0, #0
 80066aa:	d060      	beq.n	800676e <__mdiff+0xde>
 80066ac:	db5a      	blt.n	8006764 <__mdiff+0xd4>
 80066ae:	2600      	movs	r6, #0
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	1c38      	adds	r0, r7, #0
 80066b4:	f7ff fd30 	bl	8006118 <_Balloc>
 80066b8:	6927      	ldr	r7, [r4, #16]
 80066ba:	1d3a      	adds	r2, r7, #4
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	1c23      	adds	r3, r4, #0
 80066c0:	18a4      	adds	r4, r4, r2
 80066c2:	692a      	ldr	r2, [r5, #16]
 80066c4:	3204      	adds	r2, #4
 80066c6:	0092      	lsls	r2, r2, #2
 80066c8:	60c6      	str	r6, [r0, #12]
 80066ca:	1c2e      	adds	r6, r5, #0
 80066cc:	18ad      	adds	r5, r5, r2
 80066ce:	3504      	adds	r5, #4
 80066d0:	3404      	adds	r4, #4
 80066d2:	1c01      	adds	r1, r0, #0
 80066d4:	46a9      	mov	r9, r5
 80066d6:	4682      	mov	sl, r0
 80066d8:	3314      	adds	r3, #20
 80066da:	46a4      	mov	ip, r4
 80066dc:	3614      	adds	r6, #20
 80066de:	3114      	adds	r1, #20
 80066e0:	2500      	movs	r5, #0
 80066e2:	cb01      	ldmia	r3!, {r0}
 80066e4:	ce10      	ldmia	r6!, {r4}
 80066e6:	0402      	lsls	r2, r0, #16
 80066e8:	0c12      	lsrs	r2, r2, #16
 80066ea:	1955      	adds	r5, r2, r5
 80066ec:	0422      	lsls	r2, r4, #16
 80066ee:	0c12      	lsrs	r2, r2, #16
 80066f0:	1aaa      	subs	r2, r5, r2
 80066f2:	0c24      	lsrs	r4, r4, #16
 80066f4:	0c05      	lsrs	r5, r0, #16
 80066f6:	1b2c      	subs	r4, r5, r4
 80066f8:	1415      	asrs	r5, r2, #16
 80066fa:	1964      	adds	r4, r4, r5
 80066fc:	0412      	lsls	r2, r2, #16
 80066fe:	1425      	asrs	r5, r4, #16
 8006700:	0c12      	lsrs	r2, r2, #16
 8006702:	0424      	lsls	r4, r4, #16
 8006704:	4314      	orrs	r4, r2
 8006706:	c110      	stmia	r1!, {r4}
 8006708:	45b1      	cmp	r9, r6
 800670a:	d8ea      	bhi.n	80066e2 <__mdiff+0x52>
 800670c:	4688      	mov	r8, r1
 800670e:	4699      	mov	r9, r3
 8006710:	459c      	cmp	ip, r3
 8006712:	d915      	bls.n	8006740 <__mdiff+0xb0>
 8006714:	cb40      	ldmia	r3!, {r6}
 8006716:	0432      	lsls	r2, r6, #16
 8006718:	0c12      	lsrs	r2, r2, #16
 800671a:	1952      	adds	r2, r2, r5
 800671c:	1414      	asrs	r4, r2, #16
 800671e:	0c36      	lsrs	r6, r6, #16
 8006720:	19a4      	adds	r4, r4, r6
 8006722:	0412      	lsls	r2, r2, #16
 8006724:	1425      	asrs	r5, r4, #16
 8006726:	0c12      	lsrs	r2, r2, #16
 8006728:	0424      	lsls	r4, r4, #16
 800672a:	4314      	orrs	r4, r2
 800672c:	c110      	stmia	r1!, {r4}
 800672e:	459c      	cmp	ip, r3
 8006730:	d8f0      	bhi.n	8006714 <__mdiff+0x84>
 8006732:	464a      	mov	r2, r9
 8006734:	43d1      	mvns	r1, r2
 8006736:	4461      	add	r1, ip
 8006738:	0889      	lsrs	r1, r1, #2
 800673a:	3101      	adds	r1, #1
 800673c:	0089      	lsls	r1, r1, #2
 800673e:	4441      	add	r1, r8
 8006740:	3904      	subs	r1, #4
 8006742:	2c00      	cmp	r4, #0
 8006744:	d104      	bne.n	8006750 <__mdiff+0xc0>
 8006746:	3904      	subs	r1, #4
 8006748:	680b      	ldr	r3, [r1, #0]
 800674a:	3f01      	subs	r7, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0fa      	beq.n	8006746 <__mdiff+0xb6>
 8006750:	4650      	mov	r0, sl
 8006752:	6107      	str	r7, [r0, #16]
 8006754:	4650      	mov	r0, sl
 8006756:	bc1c      	pop	{r2, r3, r4}
 8006758:	4690      	mov	r8, r2
 800675a:	4699      	mov	r9, r3
 800675c:	46a2      	mov	sl, r4
 800675e:	bcf0      	pop	{r4, r5, r6, r7}
 8006760:	bc02      	pop	{r1}
 8006762:	4708      	bx	r1
 8006764:	1c23      	adds	r3, r4, #0
 8006766:	2601      	movs	r6, #1
 8006768:	1c2c      	adds	r4, r5, #0
 800676a:	1c1d      	adds	r5, r3, #0
 800676c:	e7a0      	b.n	80066b0 <__mdiff+0x20>
 800676e:	1c38      	adds	r0, r7, #0
 8006770:	2100      	movs	r1, #0
 8006772:	f7ff fcd1 	bl	8006118 <_Balloc>
 8006776:	2301      	movs	r3, #1
 8006778:	4682      	mov	sl, r0
 800677a:	6103      	str	r3, [r0, #16]
 800677c:	6146      	str	r6, [r0, #20]
 800677e:	e7e9      	b.n	8006754 <__mdiff+0xc4>

08006780 <__ulp>:
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <__ulp+0x40>)
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <__ulp+0x44>)
 8006784:	400b      	ands	r3, r1
 8006786:	189b      	adds	r3, r3, r2
 8006788:	b510      	push	{r4, lr}
 800678a:	2b00      	cmp	r3, #0
 800678c:	dd04      	ble.n	8006798 <__ulp+0x18>
 800678e:	1c19      	adds	r1, r3, #0
 8006790:	2000      	movs	r0, #0
 8006792:	bc10      	pop	{r4}
 8006794:	bc04      	pop	{r2}
 8006796:	4710      	bx	r2
 8006798:	425b      	negs	r3, r3
 800679a:	151b      	asrs	r3, r3, #20
 800679c:	2000      	movs	r0, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	2b13      	cmp	r3, #19
 80067a2:	dd07      	ble.n	80067b4 <__ulp+0x34>
 80067a4:	2201      	movs	r2, #1
 80067a6:	2b32      	cmp	r3, #50	; 0x32
 80067a8:	dc02      	bgt.n	80067b0 <__ulp+0x30>
 80067aa:	2433      	movs	r4, #51	; 0x33
 80067ac:	1ae3      	subs	r3, r4, r3
 80067ae:	409a      	lsls	r2, r3
 80067b0:	1c10      	adds	r0, r2, #0
 80067b2:	e7ee      	b.n	8006792 <__ulp+0x12>
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	0312      	lsls	r2, r2, #12
 80067b8:	1c11      	adds	r1, r2, #0
 80067ba:	4119      	asrs	r1, r3
 80067bc:	2000      	movs	r0, #0
 80067be:	e7e8      	b.n	8006792 <__ulp+0x12>
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	fcc00000 	.word	0xfcc00000

080067c8 <__b2d>:
 80067c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ca:	6904      	ldr	r4, [r0, #16]
 80067cc:	3404      	adds	r4, #4
 80067ce:	00a4      	lsls	r4, r4, #2
 80067d0:	1904      	adds	r4, r0, r4
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	4647      	mov	r7, r8
 80067d6:	b480      	push	{r7}
 80067d8:	1c06      	adds	r6, r0, #0
 80067da:	1c28      	adds	r0, r5, #0
 80067dc:	1c0f      	adds	r7, r1, #0
 80067de:	f7ff fd75 	bl	80062cc <__hi0bits>
 80067e2:	2320      	movs	r3, #32
 80067e4:	1a1b      	subs	r3, r3, r0
 80067e6:	3614      	adds	r6, #20
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	280a      	cmp	r0, #10
 80067ec:	dc19      	bgt.n	8006822 <__b2d+0x5a>
 80067ee:	270b      	movs	r7, #11
 80067f0:	1a3f      	subs	r7, r7, r0
 80067f2:	1c29      	adds	r1, r5, #0
 80067f4:	40f9      	lsrs	r1, r7
 80067f6:	4688      	mov	r8, r1
 80067f8:	491b      	ldr	r1, [pc, #108]	; (8006868 <__b2d+0xa0>)
 80067fa:	1c0b      	adds	r3, r1, #0
 80067fc:	4641      	mov	r1, r8
 80067fe:	430b      	orrs	r3, r1
 8006800:	2100      	movs	r1, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d202      	bcs.n	800680c <__b2d+0x44>
 8006806:	3c04      	subs	r4, #4
 8006808:	6821      	ldr	r1, [r4, #0]
 800680a:	40f9      	lsrs	r1, r7
 800680c:	3015      	adds	r0, #21
 800680e:	4085      	lsls	r5, r0
 8006810:	1c0a      	adds	r2, r1, #0
 8006812:	432a      	orrs	r2, r5
 8006814:	1c10      	adds	r0, r2, #0
 8006816:	1c19      	adds	r1, r3, #0
 8006818:	bc04      	pop	{r2}
 800681a:	4690      	mov	r8, r2
 800681c:	bcf0      	pop	{r4, r5, r6, r7}
 800681e:	bc04      	pop	{r2}
 8006820:	4710      	bx	r2
 8006822:	2100      	movs	r1, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d201      	bcs.n	800682c <__b2d+0x64>
 8006828:	3c04      	subs	r4, #4
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	1c07      	adds	r7, r0, #0
 800682e:	3f0b      	subs	r7, #11
 8006830:	2f00      	cmp	r7, #0
 8006832:	d013      	beq.n	800685c <__b2d+0x94>
 8006834:	232b      	movs	r3, #43	; 0x2b
 8006836:	1a18      	subs	r0, r3, r0
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <__b2d+0xa0>)
 800683a:	40bd      	lsls	r5, r7
 800683c:	432b      	orrs	r3, r5
 800683e:	469c      	mov	ip, r3
 8006840:	1c0d      	adds	r5, r1, #0
 8006842:	40c5      	lsrs	r5, r0
 8006844:	4663      	mov	r3, ip
 8006846:	432b      	orrs	r3, r5
 8006848:	2500      	movs	r5, #0
 800684a:	42b4      	cmp	r4, r6
 800684c:	d902      	bls.n	8006854 <__b2d+0x8c>
 800684e:	3c04      	subs	r4, #4
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	40c5      	lsrs	r5, r0
 8006854:	40b9      	lsls	r1, r7
 8006856:	1c2a      	adds	r2, r5, #0
 8006858:	430a      	orrs	r2, r1
 800685a:	e7db      	b.n	8006814 <__b2d+0x4c>
 800685c:	4802      	ldr	r0, [pc, #8]	; (8006868 <__b2d+0xa0>)
 800685e:	1c03      	adds	r3, r0, #0
 8006860:	432b      	orrs	r3, r5
 8006862:	1c0a      	adds	r2, r1, #0
 8006864:	e7d6      	b.n	8006814 <__b2d+0x4c>
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	3ff00000 	.word	0x3ff00000

0800686c <__d2b>:
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	2101      	movs	r1, #1
 8006870:	b083      	sub	sp, #12
 8006872:	1c1d      	adds	r5, r3, #0
 8006874:	1c14      	adds	r4, r2, #0
 8006876:	f7ff fc4f 	bl	8006118 <_Balloc>
 800687a:	032b      	lsls	r3, r5, #12
 800687c:	006a      	lsls	r2, r5, #1
 800687e:	1c06      	adds	r6, r0, #0
 8006880:	0b1b      	lsrs	r3, r3, #12
 8006882:	0d57      	lsrs	r7, r2, #21
 8006884:	d002      	beq.n	800688c <__d2b+0x20>
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	0352      	lsls	r2, r2, #13
 800688a:	4313      	orrs	r3, r2
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2c00      	cmp	r4, #0
 8006890:	d01a      	beq.n	80068c8 <__d2b+0x5c>
 8006892:	4668      	mov	r0, sp
 8006894:	9400      	str	r4, [sp, #0]
 8006896:	f7ff fd35 	bl	8006304 <__lo0bits>
 800689a:	2800      	cmp	r0, #0
 800689c:	d132      	bne.n	8006904 <__d2b+0x98>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	9c01      	ldr	r4, [sp, #4]
 80068a2:	6173      	str	r3, [r6, #20]
 80068a4:	61b4      	str	r4, [r6, #24]
 80068a6:	4263      	negs	r3, r4
 80068a8:	4163      	adcs	r3, r4
 80068aa:	2402      	movs	r4, #2
 80068ac:	1ae4      	subs	r4, r4, r3
 80068ae:	6134      	str	r4, [r6, #16]
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	d014      	beq.n	80068de <__d2b+0x72>
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <__d2b+0xb0>)
 80068b6:	9908      	ldr	r1, [sp, #32]
 80068b8:	18bb      	adds	r3, r7, r2
 80068ba:	181b      	adds	r3, r3, r0
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c0:	2335      	movs	r3, #53	; 0x35
 80068c2:	1a18      	subs	r0, r3, r0
 80068c4:	6010      	str	r0, [r2, #0]
 80068c6:	e018      	b.n	80068fa <__d2b+0x8e>
 80068c8:	a801      	add	r0, sp, #4
 80068ca:	f7ff fd1b 	bl	8006304 <__lo0bits>
 80068ce:	9901      	ldr	r1, [sp, #4]
 80068d0:	2301      	movs	r3, #1
 80068d2:	6171      	str	r1, [r6, #20]
 80068d4:	6133      	str	r3, [r6, #16]
 80068d6:	3020      	adds	r0, #32
 80068d8:	2401      	movs	r4, #1
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d1ea      	bne.n	80068b4 <__d2b+0x48>
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <__d2b+0xb4>)
 80068e0:	18c0      	adds	r0, r0, r3
 80068e2:	1ce3      	adds	r3, r4, #3
 80068e4:	9908      	ldr	r1, [sp, #32]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	18f3      	adds	r3, r6, r3
 80068ea:	6008      	str	r0, [r1, #0]
 80068ec:	6858      	ldr	r0, [r3, #4]
 80068ee:	f7ff fced 	bl	80062cc <__hi0bits>
 80068f2:	0164      	lsls	r4, r4, #5
 80068f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f6:	1a24      	subs	r4, r4, r0
 80068f8:	6014      	str	r4, [r2, #0]
 80068fa:	1c30      	adds	r0, r6, #0
 80068fc:	b003      	add	sp, #12
 80068fe:	bcf0      	pop	{r4, r5, r6, r7}
 8006900:	bc02      	pop	{r1}
 8006902:	4708      	bx	r1
 8006904:	9c01      	ldr	r4, [sp, #4]
 8006906:	2320      	movs	r3, #32
 8006908:	1a1b      	subs	r3, r3, r0
 800690a:	1c21      	adds	r1, r4, #0
 800690c:	4099      	lsls	r1, r3
 800690e:	9a00      	ldr	r2, [sp, #0]
 8006910:	1c0b      	adds	r3, r1, #0
 8006912:	4313      	orrs	r3, r2
 8006914:	40c4      	lsrs	r4, r0
 8006916:	6173      	str	r3, [r6, #20]
 8006918:	9401      	str	r4, [sp, #4]
 800691a:	e7c3      	b.n	80068a4 <__d2b+0x38>
 800691c:	fffffbcd 	.word	0xfffffbcd
 8006920:	fffffbce 	.word	0xfffffbce

08006924 <__ratio>:
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	4657      	mov	r7, sl
 8006928:	464e      	mov	r6, r9
 800692a:	4645      	mov	r5, r8
 800692c:	b4e0      	push	{r5, r6, r7}
 800692e:	b084      	sub	sp, #16
 8006930:	4689      	mov	r9, r1
 8006932:	a902      	add	r1, sp, #8
 8006934:	4680      	mov	r8, r0
 8006936:	f7ff ff47 	bl	80067c8 <__b2d>
 800693a:	1c06      	adds	r6, r0, #0
 800693c:	1c0f      	adds	r7, r1, #0
 800693e:	4648      	mov	r0, r9
 8006940:	a903      	add	r1, sp, #12
 8006942:	f7ff ff41 	bl	80067c8 <__b2d>
 8006946:	1c02      	adds	r2, r0, #0
 8006948:	1c0b      	adds	r3, r1, #0
 800694a:	9802      	ldr	r0, [sp, #8]
 800694c:	9903      	ldr	r1, [sp, #12]
 800694e:	1a40      	subs	r0, r0, r1
 8006950:	4641      	mov	r1, r8
 8006952:	4682      	mov	sl, r0
 8006954:	6908      	ldr	r0, [r1, #16]
 8006956:	4684      	mov	ip, r0
 8006958:	4648      	mov	r0, r9
 800695a:	6901      	ldr	r1, [r0, #16]
 800695c:	4660      	mov	r0, ip
 800695e:	1a41      	subs	r1, r0, r1
 8006960:	0149      	lsls	r1, r1, #5
 8006962:	4451      	add	r1, sl
 8006964:	9200      	str	r2, [sp, #0]
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2900      	cmp	r1, #0
 800696a:	dd0e      	ble.n	800698a <__ratio+0x66>
 800696c:	0509      	lsls	r1, r1, #20
 800696e:	19cd      	adds	r5, r1, r7
 8006970:	1c2f      	adds	r7, r5, #0
 8006972:	1c30      	adds	r0, r6, #0
 8006974:	1c39      	adds	r1, r7, #0
 8006976:	f001 ed26 	blx	80083c4 <__aeabi_ddiv>
 800697a:	b004      	add	sp, #16
 800697c:	bc1c      	pop	{r2, r3, r4}
 800697e:	4690      	mov	r8, r2
 8006980:	4699      	mov	r9, r3
 8006982:	46a2      	mov	sl, r4
 8006984:	bcf0      	pop	{r4, r5, r6, r7}
 8006986:	bc04      	pop	{r2}
 8006988:	4710      	bx	r2
 800698a:	9b01      	ldr	r3, [sp, #4]
 800698c:	0509      	lsls	r1, r1, #20
 800698e:	1a59      	subs	r1, r3, r1
 8006990:	9101      	str	r1, [sp, #4]
 8006992:	9a00      	ldr	r2, [sp, #0]
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	e7ec      	b.n	8006972 <__ratio+0x4e>

08006998 <_mprec_log10>:
 8006998:	b510      	push	{r4, lr}
 800699a:	1c04      	adds	r4, r0, #0
 800699c:	2817      	cmp	r0, #23
 800699e:	dd0b      	ble.n	80069b8 <_mprec_log10+0x20>
 80069a0:	490a      	ldr	r1, [pc, #40]	; (80069cc <_mprec_log10+0x34>)
 80069a2:	4809      	ldr	r0, [pc, #36]	; (80069c8 <_mprec_log10+0x30>)
 80069a4:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <_mprec_log10+0x38>)
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <_mprec_log10+0x3c>)
 80069a8:	3c01      	subs	r4, #1
 80069aa:	f001 ebc4 	blx	8008134 <__aeabi_dmul>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d1f8      	bne.n	80069a4 <_mprec_log10+0xc>
 80069b2:	bc10      	pop	{r4}
 80069b4:	bc04      	pop	{r2}
 80069b6:	4710      	bx	r2
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <_mprec_log10+0x40>)
 80069ba:	00c4      	lsls	r4, r0, #3
 80069bc:	191c      	adds	r4, r3, r4
 80069be:	6920      	ldr	r0, [r4, #16]
 80069c0:	6961      	ldr	r1, [r4, #20]
 80069c2:	e7f6      	b.n	80069b2 <_mprec_log10+0x1a>
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	00000000 	.word	0x00000000
 80069cc:	3ff00000 	.word	0x3ff00000
 80069d0:	00000000 	.word	0x00000000
 80069d4:	40240000 	.word	0x40240000
 80069d8:	08008c68 	.word	0x08008c68

080069dc <__copybits>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	6915      	ldr	r5, [r2, #16]
 80069e0:	1e4e      	subs	r6, r1, #1
 80069e2:	3504      	adds	r5, #4
 80069e4:	1176      	asrs	r6, r6, #5
 80069e6:	00ad      	lsls	r5, r5, #2
 80069e8:	3601      	adds	r6, #1
 80069ea:	1c13      	adds	r3, r2, #0
 80069ec:	1955      	adds	r5, r2, r5
 80069ee:	00b6      	lsls	r6, r6, #2
 80069f0:	3314      	adds	r3, #20
 80069f2:	3504      	adds	r5, #4
 80069f4:	1986      	adds	r6, r0, r6
 80069f6:	42ab      	cmp	r3, r5
 80069f8:	d20a      	bcs.n	8006a10 <__copybits+0x34>
 80069fa:	1c01      	adds	r1, r0, #0
 80069fc:	cb10      	ldmia	r3!, {r4}
 80069fe:	c110      	stmia	r1!, {r4}
 8006a00:	429d      	cmp	r5, r3
 8006a02:	d8fb      	bhi.n	80069fc <__copybits+0x20>
 8006a04:	1aab      	subs	r3, r5, r2
 8006a06:	3b15      	subs	r3, #21
 8006a08:	089b      	lsrs	r3, r3, #2
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	18c0      	adds	r0, r0, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	4286      	cmp	r6, r0
 8006a14:	d902      	bls.n	8006a1c <__copybits+0x40>
 8006a16:	c008      	stmia	r0!, {r3}
 8006a18:	4286      	cmp	r6, r0
 8006a1a:	d8fc      	bhi.n	8006a16 <__copybits+0x3a>
 8006a1c:	bc70      	pop	{r4, r5, r6}
 8006a1e:	bc01      	pop	{r0}
 8006a20:	4700      	bx	r0
 8006a22:	46c0      	nop			; (mov r8, r8)

08006a24 <__any_on>:
 8006a24:	1c03      	adds	r3, r0, #0
 8006a26:	1c02      	adds	r2, r0, #0
 8006a28:	6900      	ldr	r0, [r0, #16]
 8006a2a:	b530      	push	{r4, r5, lr}
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	114c      	asrs	r4, r1, #5
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	da11      	bge.n	8006a58 <__any_on+0x34>
 8006a34:	1c04      	adds	r4, r0, #0
 8006a36:	1d20      	adds	r0, r4, #4
 8006a38:	0080      	lsls	r0, r0, #2
 8006a3a:	1810      	adds	r0, r2, r0
 8006a3c:	1d02      	adds	r2, r0, #4
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d303      	bcc.n	8006a4a <__any_on+0x26>
 8006a42:	e01a      	b.n	8006a7a <__any_on+0x56>
 8006a44:	4283      	cmp	r3, r0
 8006a46:	d218      	bcs.n	8006a7a <__any_on+0x56>
 8006a48:	3804      	subs	r0, #4
 8006a4a:	6802      	ldr	r2, [r0, #0]
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d0f9      	beq.n	8006a44 <__any_on+0x20>
 8006a50:	2001      	movs	r0, #1
 8006a52:	bc30      	pop	{r4, r5}
 8006a54:	bc02      	pop	{r1}
 8006a56:	4708      	bx	r1
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	ddec      	ble.n	8006a36 <__any_on+0x12>
 8006a5c:	201f      	movs	r0, #31
 8006a5e:	4001      	ands	r1, r0
 8006a60:	d0e9      	beq.n	8006a36 <__any_on+0x12>
 8006a62:	1d20      	adds	r0, r4, #4
 8006a64:	0080      	lsls	r0, r0, #2
 8006a66:	1810      	adds	r0, r2, r0
 8006a68:	6845      	ldr	r5, [r0, #4]
 8006a6a:	1c28      	adds	r0, r5, #0
 8006a6c:	40c8      	lsrs	r0, r1
 8006a6e:	4088      	lsls	r0, r1
 8006a70:	1c01      	adds	r1, r0, #0
 8006a72:	2001      	movs	r0, #1
 8006a74:	42a9      	cmp	r1, r5
 8006a76:	d1ec      	bne.n	8006a52 <__any_on+0x2e>
 8006a78:	e7dd      	b.n	8006a36 <__any_on+0x12>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e7e9      	b.n	8006a52 <__any_on+0x2e>
 8006a7e:	46c0      	nop			; (mov r8, r8)

08006a80 <__fpclassifyd>:
 8006a80:	1c0b      	adds	r3, r1, #0
 8006a82:	1c01      	adds	r1, r0, #0
 8006a84:	1c02      	adds	r2, r0, #0
 8006a86:	b530      	push	{r4, r5, lr}
 8006a88:	4319      	orrs	r1, r3
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d102      	bne.n	8006a96 <__fpclassifyd+0x16>
 8006a90:	bc30      	pop	{r4, r5}
 8006a92:	bc02      	pop	{r1}
 8006a94:	4708      	bx	r1
 8006a96:	4251      	negs	r1, r2
 8006a98:	4151      	adcs	r1, r2
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d004      	beq.n	8006aa8 <__fpclassifyd+0x28>
 8006a9e:	2580      	movs	r5, #128	; 0x80
 8006aa0:	062d      	lsls	r5, r5, #24
 8006aa2:	195c      	adds	r4, r3, r5
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d0f3      	beq.n	8006a90 <__fpclassifyd+0x10>
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <__fpclassifyd+0x4c>)
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	189c      	adds	r4, r3, r2
 8006ab0:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <__fpclassifyd+0x50>)
 8006ab2:	2004      	movs	r0, #4
 8006ab4:	4294      	cmp	r4, r2
 8006ab6:	d9eb      	bls.n	8006a90 <__fpclassifyd+0x10>
 8006ab8:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <__fpclassifyd+0x54>)
 8006aba:	2003      	movs	r0, #3
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d9e7      	bls.n	8006a90 <__fpclassifyd+0x10>
 8006ac0:	4d05      	ldr	r5, [pc, #20]	; (8006ad8 <__fpclassifyd+0x58>)
 8006ac2:	1958      	adds	r0, r3, r5
 8006ac4:	4243      	negs	r3, r0
 8006ac6:	4158      	adcs	r0, r3
 8006ac8:	4008      	ands	r0, r1
 8006aca:	e7e1      	b.n	8006a90 <__fpclassifyd+0x10>
 8006acc:	fff00000 	.word	0xfff00000
 8006ad0:	7fdfffff 	.word	0x7fdfffff
 8006ad4:	000fffff 	.word	0x000fffff
 8006ad8:	80100000 	.word	0x80100000

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4c08      	ldr	r4, [pc, #32]	; (8006b00 <_sbrk_r+0x24>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	1c05      	adds	r5, r0, #0
 8006ae4:	1c08      	adds	r0, r1, #0
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7fc fa8e 	bl	8003008 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d002      	beq.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	bc38      	pop	{r3, r4, r5}
 8006af2:	bc02      	pop	{r1}
 8006af4:	4708      	bx	r1
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f9      	beq.n	8006af0 <_sbrk_r+0x14>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	e7f7      	b.n	8006af0 <_sbrk_r+0x14>
 8006b00:	2000168c 	.word	0x2000168c

08006b04 <strcmp>:
 8006b04:	7802      	ldrb	r2, [r0, #0]
 8006b06:	780b      	ldrb	r3, [r1, #0]
 8006b08:	3001      	adds	r0, #1
 8006b0a:	3101      	adds	r1, #1
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d001      	beq.n	8006b14 <strcmp+0x10>
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d0f7      	beq.n	8006b04 <strcmp>
 8006b14:	1ad0      	subs	r0, r2, r3
 8006b16:	4770      	bx	lr

08006b18 <strlen>:
 8006b18:	2300      	movs	r3, #0
 8006b1a:	5cc2      	ldrb	r2, [r0, r3]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1fb      	bne.n	8006b1a <strlen+0x2>
 8006b22:	1e58      	subs	r0, r3, #1
 8006b24:	4770      	bx	lr
 8006b26:	46c0      	nop			; (mov r8, r8)

08006b28 <__ssprint_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	465f      	mov	r7, fp
 8006b2c:	464d      	mov	r5, r9
 8006b2e:	4644      	mov	r4, r8
 8006b30:	4656      	mov	r6, sl
 8006b32:	b4f0      	push	{r4, r5, r6, r7}
 8006b34:	6893      	ldr	r3, [r2, #8]
 8006b36:	b083      	sub	sp, #12
 8006b38:	9001      	str	r0, [sp, #4]
 8006b3a:	1c0d      	adds	r5, r1, #0
 8006b3c:	4690      	mov	r8, r2
 8006b3e:	6817      	ldr	r7, [r2, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d100      	bne.n	8006b46 <__ssprint_r+0x1e>
 8006b44:	e07e      	b.n	8006c44 <__ssprint_r+0x11c>
 8006b46:	6808      	ldr	r0, [r1, #0]
 8006b48:	2400      	movs	r4, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	68ab      	ldr	r3, [r5, #8]
 8006b50:	2c00      	cmp	r4, #0
 8006b52:	d048      	beq.n	8006be6 <__ssprint_r+0xbe>
 8006b54:	1c1e      	adds	r6, r3, #0
 8006b56:	469a      	mov	sl, r3
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d34e      	bcc.n	8006bfa <__ssprint_r+0xd2>
 8006b5c:	2290      	movs	r2, #144	; 0x90
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	00d2      	lsls	r2, r2, #3
 8006b62:	4213      	tst	r3, r2
 8006b64:	d02e      	beq.n	8006bc4 <__ssprint_r+0x9c>
 8006b66:	6929      	ldr	r1, [r5, #16]
 8006b68:	696a      	ldr	r2, [r5, #20]
 8006b6a:	1a40      	subs	r0, r0, r1
 8006b6c:	4683      	mov	fp, r0
 8006b6e:	0050      	lsls	r0, r2, #1
 8006b70:	1882      	adds	r2, r0, r2
 8006b72:	0fd0      	lsrs	r0, r2, #31
 8006b74:	1882      	adds	r2, r0, r2
 8006b76:	1c60      	adds	r0, r4, #1
 8006b78:	1052      	asrs	r2, r2, #1
 8006b7a:	4458      	add	r0, fp
 8006b7c:	4692      	mov	sl, r2
 8006b7e:	4282      	cmp	r2, r0
 8006b80:	d201      	bcs.n	8006b86 <__ssprint_r+0x5e>
 8006b82:	4682      	mov	sl, r0
 8006b84:	1c02      	adds	r2, r0, #0
 8006b86:	2080      	movs	r0, #128	; 0x80
 8006b88:	00c0      	lsls	r0, r0, #3
 8006b8a:	4203      	tst	r3, r0
 8006b8c:	d038      	beq.n	8006c00 <__ssprint_r+0xd8>
 8006b8e:	9801      	ldr	r0, [sp, #4]
 8006b90:	1c11      	adds	r1, r2, #0
 8006b92:	f7fe ffa5 	bl	8005ae0 <_malloc_r>
 8006b96:	1e06      	subs	r6, r0, #0
 8006b98:	d057      	beq.n	8006c4a <__ssprint_r+0x122>
 8006b9a:	465a      	mov	r2, fp
 8006b9c:	1c30      	adds	r0, r6, #0
 8006b9e:	6929      	ldr	r1, [r5, #16]
 8006ba0:	f7ff fa72 	bl	8006088 <memcpy>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <__ssprint_r+0x12c>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	4313      	orrs	r3, r2
 8006bae:	81ab      	strh	r3, [r5, #12]
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	1870      	adds	r0, r6, r1
 8006bb6:	1a53      	subs	r3, r2, r1
 8006bb8:	6028      	str	r0, [r5, #0]
 8006bba:	616a      	str	r2, [r5, #20]
 8006bbc:	60ab      	str	r3, [r5, #8]
 8006bbe:	612e      	str	r6, [r5, #16]
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	1c26      	adds	r6, r4, #0
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	f000 fcde 	bl	8007588 <memmove>
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	68ab      	ldr	r3, [r5, #8]
 8006bd2:	6892      	ldr	r2, [r2, #8]
 8006bd4:	1c08      	adds	r0, r1, #0
 8006bd6:	1b9b      	subs	r3, r3, r6
 8006bd8:	4450      	add	r0, sl
 8006bda:	1b14      	subs	r4, r2, r4
 8006bdc:	4641      	mov	r1, r8
 8006bde:	60ab      	str	r3, [r5, #8]
 8006be0:	6028      	str	r0, [r5, #0]
 8006be2:	608c      	str	r4, [r1, #8]
 8006be4:	d023      	beq.n	8006c2e <__ssprint_r+0x106>
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	687c      	ldr	r4, [r7, #4]
 8006bea:	4689      	mov	r9, r1
 8006bec:	3708      	adds	r7, #8
 8006bee:	2c00      	cmp	r4, #0
 8006bf0:	d0f9      	beq.n	8006be6 <__ssprint_r+0xbe>
 8006bf2:	1c1e      	adds	r6, r3, #0
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d2b0      	bcs.n	8006b5c <__ssprint_r+0x34>
 8006bfa:	1c26      	adds	r6, r4, #0
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	e7e1      	b.n	8006bc4 <__ssprint_r+0x9c>
 8006c00:	9801      	ldr	r0, [sp, #4]
 8006c02:	f000 fd5d 	bl	80076c0 <_realloc_r>
 8006c06:	1e06      	subs	r6, r0, #0
 8006c08:	d1d2      	bne.n	8006bb0 <__ssprint_r+0x88>
 8006c0a:	9801      	ldr	r0, [sp, #4]
 8006c0c:	6929      	ldr	r1, [r5, #16]
 8006c0e:	f7fe fe4d 	bl	80058ac <_free_r>
 8006c12:	9801      	ldr	r0, [sp, #4]
 8006c14:	230c      	movs	r3, #12
 8006c16:	6003      	str	r3, [r0, #0]
 8006c18:	89aa      	ldrh	r2, [r5, #12]
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	81ab      	strh	r3, [r5, #12]
 8006c20:	4640      	mov	r0, r8
 8006c22:	2300      	movs	r3, #0
 8006c24:	6083      	str	r3, [r0, #8]
 8006c26:	6043      	str	r3, [r0, #4]
 8006c28:	2001      	movs	r0, #1
 8006c2a:	4240      	negs	r0, r0
 8006c2c:	e001      	b.n	8006c32 <__ssprint_r+0x10a>
 8006c2e:	604c      	str	r4, [r1, #4]
 8006c30:	2000      	movs	r0, #0
 8006c32:	b003      	add	sp, #12
 8006c34:	bc3c      	pop	{r2, r3, r4, r5}
 8006c36:	4690      	mov	r8, r2
 8006c38:	4699      	mov	r9, r3
 8006c3a:	46a2      	mov	sl, r4
 8006c3c:	46ab      	mov	fp, r5
 8006c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8006c40:	bc02      	pop	{r1}
 8006c42:	4708      	bx	r1
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	2000      	movs	r0, #0
 8006c48:	e7f3      	b.n	8006c32 <__ssprint_r+0x10a>
 8006c4a:	9901      	ldr	r1, [sp, #4]
 8006c4c:	230c      	movs	r3, #12
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	e7e2      	b.n	8006c18 <__ssprint_r+0xf0>
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	fffffb7f 	.word	0xfffffb7f

08006c58 <_svfiprintf_r>:
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	465f      	mov	r7, fp
 8006c5c:	4644      	mov	r4, r8
 8006c5e:	4656      	mov	r6, sl
 8006c60:	464d      	mov	r5, r9
 8006c62:	b4f0      	push	{r4, r5, r6, r7}
 8006c64:	b0af      	sub	sp, #188	; 0xbc
 8006c66:	9005      	str	r0, [sp, #20]
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	898b      	ldrh	r3, [r1, #12]
 8006c6c:	468b      	mov	fp, r1
 8006c6e:	1c14      	adds	r4, r2, #0
 8006c70:	0618      	lsls	r0, r3, #24
 8006c72:	d504      	bpl.n	8006c7e <_svfiprintf_r+0x26>
 8006c74:	6909      	ldr	r1, [r1, #16]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d101      	bne.n	8006c7e <_svfiprintf_r+0x26>
 8006c7a:	f000 fc17 	bl	80074ac <_svfiprintf_r+0x854>
 8006c7e:	46a1      	mov	r9, r4
 8006c80:	2400      	movs	r4, #0
 8006c82:	940c      	str	r4, [sp, #48]	; 0x30
 8006c84:	9406      	str	r4, [sp, #24]
 8006c86:	466c      	mov	r4, sp
 8006c88:	a91e      	add	r1, sp, #120	; 0x78
 8006c8a:	3477      	adds	r4, #119	; 0x77
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	9111      	str	r1, [sp, #68]	; 0x44
 8006c92:	1c0f      	adds	r7, r1, #0
 8006c94:	1b09      	subs	r1, r1, r4
 8006c96:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c98:	9312      	str	r3, [sp, #72]	; 0x48
 8006c9a:	9401      	str	r4, [sp, #4]
 8006c9c:	910d      	str	r1, [sp, #52]	; 0x34
 8006c9e:	464d      	mov	r5, r9
 8006ca0:	782b      	ldrb	r3, [r5, #0]
 8006ca2:	1c2c      	adds	r4, r5, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d019      	beq.n	8006cdc <_svfiprintf_r+0x84>
 8006ca8:	2b25      	cmp	r3, #37	; 0x25
 8006caa:	d102      	bne.n	8006cb2 <_svfiprintf_r+0x5a>
 8006cac:	e016      	b.n	8006cdc <_svfiprintf_r+0x84>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <_svfiprintf_r+0x62>
 8006cb2:	3401      	adds	r4, #1
 8006cb4:	7823      	ldrb	r3, [r4, #0]
 8006cb6:	2b25      	cmp	r3, #37	; 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_svfiprintf_r+0x56>
 8006cba:	1b66      	subs	r6, r4, r5
 8006cbc:	d00e      	beq.n	8006cdc <_svfiprintf_r+0x84>
 8006cbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006cc0:	1983      	adds	r3, r0, r6
 8006cc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	603d      	str	r5, [r7, #0]
 8006cca:	607e      	str	r6, [r7, #4]
 8006ccc:	9312      	str	r3, [sp, #72]	; 0x48
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	dd00      	ble.n	8006cd4 <_svfiprintf_r+0x7c>
 8006cd2:	e320      	b.n	8007316 <_svfiprintf_r+0x6be>
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	9906      	ldr	r1, [sp, #24]
 8006cd8:	1989      	adds	r1, r1, r6
 8006cda:	9106      	str	r1, [sp, #24]
 8006cdc:	7823      	ldrb	r3, [r4, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d100      	bne.n	8006ce4 <_svfiprintf_r+0x8c>
 8006ce2:	e2ef      	b.n	80072c4 <_svfiprintf_r+0x66c>
 8006ce4:	1c65      	adds	r5, r4, #1
 8006ce6:	2401      	movs	r4, #1
 8006ce8:	4264      	negs	r4, r4
 8006cea:	223f      	movs	r2, #63	; 0x3f
 8006cec:	2300      	movs	r3, #0
 8006cee:	446a      	add	r2, sp
 8006cf0:	46a1      	mov	r9, r4
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	7013      	strb	r3, [r2, #0]
 8006cf6:	9407      	str	r4, [sp, #28]
 8006cf8:	2280      	movs	r2, #128	; 0x80
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	9402      	str	r4, [sp, #8]
 8006cfe:	49cd      	ldr	r1, [pc, #820]	; (8007034 <_svfiprintf_r+0x3dc>)
 8006d00:	2000      	movs	r0, #0
 8006d02:	2610      	movs	r6, #16
 8006d04:	4692      	mov	sl, r2
 8006d06:	469c      	mov	ip, r3
 8006d08:	782b      	ldrb	r3, [r5, #0]
 8006d0a:	3501      	adds	r5, #1
 8006d0c:	1c1a      	adds	r2, r3, #0
 8006d0e:	3a20      	subs	r2, #32
 8006d10:	2a58      	cmp	r2, #88	; 0x58
 8006d12:	d800      	bhi.n	8006d16 <_svfiprintf_r+0xbe>
 8006d14:	e118      	b.n	8006f48 <_svfiprintf_r+0x2f0>
 8006d16:	213f      	movs	r1, #63	; 0x3f
 8006d18:	4469      	add	r1, sp
 8006d1a:	7008      	strb	r0, [r1, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d100      	bne.n	8006d22 <_svfiprintf_r+0xca>
 8006d20:	e2d0      	b.n	80072c4 <_svfiprintf_r+0x66c>
 8006d22:	aa14      	add	r2, sp, #80	; 0x50
 8006d24:	2401      	movs	r4, #1
 8006d26:	7013      	strb	r3, [r2, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	700b      	strb	r3, [r1, #0]
 8006d2c:	9403      	str	r4, [sp, #12]
 8006d2e:	9404      	str	r4, [sp, #16]
 8006d30:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d32:	2400      	movs	r4, #0
 8006d34:	9409      	str	r4, [sp, #36]	; 0x24
 8006d36:	9c02      	ldr	r4, [sp, #8]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	401c      	ands	r4, r3
 8006d3c:	940a      	str	r4, [sp, #40]	; 0x28
 8006d3e:	d002      	beq.n	8006d46 <_svfiprintf_r+0xee>
 8006d40:	9c03      	ldr	r4, [sp, #12]
 8006d42:	3402      	adds	r4, #2
 8006d44:	9403      	str	r4, [sp, #12]
 8006d46:	9c02      	ldr	r4, [sp, #8]
 8006d48:	2384      	movs	r3, #132	; 0x84
 8006d4a:	401c      	ands	r4, r3
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	d138      	bne.n	8006dc2 <_svfiprintf_r+0x16a>
 8006d50:	9807      	ldr	r0, [sp, #28]
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	1a44      	subs	r4, r0, r1
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	dd33      	ble.n	8006dc2 <_svfiprintf_r+0x16a>
 8006d5a:	4eb7      	ldr	r6, [pc, #732]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006d5c:	2c10      	cmp	r4, #16
 8006d5e:	dd24      	ble.n	8006daa <_svfiprintf_r+0x152>
 8006d60:	2210      	movs	r2, #16
 8006d62:	1c3b      	adds	r3, r7, #0
 8006d64:	4691      	mov	r9, r2
 8006d66:	465f      	mov	r7, fp
 8006d68:	46ab      	mov	fp, r5
 8006d6a:	9d05      	ldr	r5, [sp, #20]
 8006d6c:	e003      	b.n	8006d76 <_svfiprintf_r+0x11e>
 8006d6e:	3c10      	subs	r4, #16
 8006d70:	3308      	adds	r3, #8
 8006d72:	2c10      	cmp	r4, #16
 8006d74:	dd16      	ble.n	8006da4 <_svfiprintf_r+0x14c>
 8006d76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d78:	3210      	adds	r2, #16
 8006d7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d7e:	4648      	mov	r0, r9
 8006d80:	3201      	adds	r2, #1
 8006d82:	601e      	str	r6, [r3, #0]
 8006d84:	6058      	str	r0, [r3, #4]
 8006d86:	9212      	str	r2, [sp, #72]	; 0x48
 8006d88:	2a07      	cmp	r2, #7
 8006d8a:	ddf0      	ble.n	8006d6e <_svfiprintf_r+0x116>
 8006d8c:	1c28      	adds	r0, r5, #0
 8006d8e:	1c39      	adds	r1, r7, #0
 8006d90:	aa11      	add	r2, sp, #68	; 0x44
 8006d92:	f7ff fec9 	bl	8006b28 <__ssprint_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d000      	beq.n	8006d9c <_svfiprintf_r+0x144>
 8006d9a:	e32f      	b.n	80073fc <_svfiprintf_r+0x7a4>
 8006d9c:	3c10      	subs	r4, #16
 8006d9e:	4643      	mov	r3, r8
 8006da0:	2c10      	cmp	r4, #16
 8006da2:	dce8      	bgt.n	8006d76 <_svfiprintf_r+0x11e>
 8006da4:	465d      	mov	r5, fp
 8006da6:	46bb      	mov	fp, r7
 8006da8:	1c1f      	adds	r7, r3, #0
 8006daa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dae:	607c      	str	r4, [r7, #4]
 8006db0:	3301      	adds	r3, #1
 8006db2:	190c      	adds	r4, r1, r4
 8006db4:	603e      	str	r6, [r7, #0]
 8006db6:	9413      	str	r4, [sp, #76]	; 0x4c
 8006db8:	9312      	str	r3, [sp, #72]	; 0x48
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	dd00      	ble.n	8006dc0 <_svfiprintf_r+0x168>
 8006dbe:	e313      	b.n	80073e8 <_svfiprintf_r+0x790>
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	223f      	movs	r2, #63	; 0x3f
 8006dc4:	446a      	add	r2, sp
 8006dc6:	7813      	ldrb	r3, [r2, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00c      	beq.n	8006de6 <_svfiprintf_r+0x18e>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd8:	3301      	adds	r3, #1
 8006dda:	603a      	str	r2, [r7, #0]
 8006ddc:	9312      	str	r3, [sp, #72]	; 0x48
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	dd00      	ble.n	8006de4 <_svfiprintf_r+0x18c>
 8006de2:	e2aa      	b.n	800733a <_svfiprintf_r+0x6e2>
 8006de4:	3708      	adds	r7, #8
 8006de6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006de8:	2c00      	cmp	r4, #0
 8006dea:	d00d      	beq.n	8006e08 <_svfiprintf_r+0x1b0>
 8006dec:	ab10      	add	r3, sp, #64	; 0x40
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	2302      	movs	r3, #2
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df6:	3302      	adds	r3, #2
 8006df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	9312      	str	r3, [sp, #72]	; 0x48
 8006e00:	2b07      	cmp	r3, #7
 8006e02:	dd00      	ble.n	8006e06 <_svfiprintf_r+0x1ae>
 8006e04:	e2a2      	b.n	800734c <_svfiprintf_r+0x6f4>
 8006e06:	3708      	adds	r7, #8
 8006e08:	4650      	mov	r0, sl
 8006e0a:	2880      	cmp	r0, #128	; 0x80
 8006e0c:	d100      	bne.n	8006e10 <_svfiprintf_r+0x1b8>
 8006e0e:	e20f      	b.n	8007230 <_svfiprintf_r+0x5d8>
 8006e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e12:	9904      	ldr	r1, [sp, #16]
 8006e14:	1a44      	subs	r4, r0, r1
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	dd3a      	ble.n	8006e90 <_svfiprintf_r+0x238>
 8006e1a:	4e87      	ldr	r6, [pc, #540]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006e1c:	2c10      	cmp	r4, #16
 8006e1e:	dd2a      	ble.n	8006e76 <_svfiprintf_r+0x21e>
 8006e20:	2210      	movs	r2, #16
 8006e22:	1992      	adds	r2, r2, r6
 8006e24:	2310      	movs	r3, #16
 8006e26:	4699      	mov	r9, r3
 8006e28:	4692      	mov	sl, r2
 8006e2a:	1c3b      	adds	r3, r7, #0
 8006e2c:	1c37      	adds	r7, r6, #0
 8006e2e:	465e      	mov	r6, fp
 8006e30:	46ab      	mov	fp, r5
 8006e32:	9d05      	ldr	r5, [sp, #20]
 8006e34:	e003      	b.n	8006e3e <_svfiprintf_r+0x1e6>
 8006e36:	3c10      	subs	r4, #16
 8006e38:	3308      	adds	r3, #8
 8006e3a:	2c10      	cmp	r4, #16
 8006e3c:	dd17      	ble.n	8006e6e <_svfiprintf_r+0x216>
 8006e3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e40:	3210      	adds	r2, #16
 8006e42:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e46:	4650      	mov	r0, sl
 8006e48:	4649      	mov	r1, r9
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	6018      	str	r0, [r3, #0]
 8006e4e:	6059      	str	r1, [r3, #4]
 8006e50:	9212      	str	r2, [sp, #72]	; 0x48
 8006e52:	2a07      	cmp	r2, #7
 8006e54:	ddef      	ble.n	8006e36 <_svfiprintf_r+0x1de>
 8006e56:	1c28      	adds	r0, r5, #0
 8006e58:	1c31      	adds	r1, r6, #0
 8006e5a:	aa11      	add	r2, sp, #68	; 0x44
 8006e5c:	f7ff fe64 	bl	8006b28 <__ssprint_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d000      	beq.n	8006e66 <_svfiprintf_r+0x20e>
 8006e64:	e255      	b.n	8007312 <_svfiprintf_r+0x6ba>
 8006e66:	3c10      	subs	r4, #16
 8006e68:	4643      	mov	r3, r8
 8006e6a:	2c10      	cmp	r4, #16
 8006e6c:	dce7      	bgt.n	8006e3e <_svfiprintf_r+0x1e6>
 8006e6e:	465d      	mov	r5, fp
 8006e70:	46b3      	mov	fp, r6
 8006e72:	1c3e      	adds	r6, r7, #0
 8006e74:	1c1f      	adds	r7, r3, #0
 8006e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7a:	3610      	adds	r6, #16
 8006e7c:	607c      	str	r4, [r7, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	1914      	adds	r4, r2, r4
 8006e82:	603e      	str	r6, [r7, #0]
 8006e84:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e86:	9312      	str	r3, [sp, #72]	; 0x48
 8006e88:	2b07      	cmp	r3, #7
 8006e8a:	dd00      	ble.n	8006e8e <_svfiprintf_r+0x236>
 8006e8c:	e24c      	b.n	8007328 <_svfiprintf_r+0x6d0>
 8006e8e:	3708      	adds	r7, #8
 8006e90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006e92:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006e94:	603c      	str	r4, [r7, #0]
 8006e96:	9c04      	ldr	r4, [sp, #16]
 8006e98:	1903      	adds	r3, r0, r4
 8006e9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	607c      	str	r4, [r7, #4]
 8006ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	dd00      	ble.n	8006eaa <_svfiprintf_r+0x252>
 8006ea8:	e203      	b.n	80072b2 <_svfiprintf_r+0x65a>
 8006eaa:	1c3b      	adds	r3, r7, #0
 8006eac:	3308      	adds	r3, #8
 8006eae:	9c02      	ldr	r4, [sp, #8]
 8006eb0:	0764      	lsls	r4, r4, #29
 8006eb2:	d539      	bpl.n	8006f28 <_svfiprintf_r+0x2d0>
 8006eb4:	9807      	ldr	r0, [sp, #28]
 8006eb6:	9903      	ldr	r1, [sp, #12]
 8006eb8:	1a44      	subs	r4, r0, r1
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	dd34      	ble.n	8006f28 <_svfiprintf_r+0x2d0>
 8006ebe:	4e5e      	ldr	r6, [pc, #376]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006ec0:	2c10      	cmp	r4, #16
 8006ec2:	dd1f      	ble.n	8006f04 <_svfiprintf_r+0x2ac>
 8006ec4:	46a9      	mov	r9, r5
 8006ec6:	2710      	movs	r7, #16
 8006ec8:	465d      	mov	r5, fp
 8006eca:	e003      	b.n	8006ed4 <_svfiprintf_r+0x27c>
 8006ecc:	3c10      	subs	r4, #16
 8006ece:	3308      	adds	r3, #8
 8006ed0:	2c10      	cmp	r4, #16
 8006ed2:	dd15      	ble.n	8006f00 <_svfiprintf_r+0x2a8>
 8006ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ed6:	3210      	adds	r2, #16
 8006ed8:	9213      	str	r2, [sp, #76]	; 0x4c
 8006eda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006edc:	3201      	adds	r2, #1
 8006ede:	601e      	str	r6, [r3, #0]
 8006ee0:	605f      	str	r7, [r3, #4]
 8006ee2:	9212      	str	r2, [sp, #72]	; 0x48
 8006ee4:	2a07      	cmp	r2, #7
 8006ee6:	ddf1      	ble.n	8006ecc <_svfiprintf_r+0x274>
 8006ee8:	9805      	ldr	r0, [sp, #20]
 8006eea:	1c29      	adds	r1, r5, #0
 8006eec:	aa11      	add	r2, sp, #68	; 0x44
 8006eee:	f7ff fe1b 	bl	8006b28 <__ssprint_r>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d000      	beq.n	8006ef8 <_svfiprintf_r+0x2a0>
 8006ef6:	e2c4      	b.n	8007482 <_svfiprintf_r+0x82a>
 8006ef8:	3c10      	subs	r4, #16
 8006efa:	4643      	mov	r3, r8
 8006efc:	2c10      	cmp	r4, #16
 8006efe:	dce9      	bgt.n	8006ed4 <_svfiprintf_r+0x27c>
 8006f00:	46ab      	mov	fp, r5
 8006f02:	464d      	mov	r5, r9
 8006f04:	605c      	str	r4, [r3, #4]
 8006f06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f08:	601e      	str	r6, [r3, #0]
 8006f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f0c:	18a4      	adds	r4, r4, r2
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9413      	str	r4, [sp, #76]	; 0x4c
 8006f12:	9312      	str	r3, [sp, #72]	; 0x48
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	dd08      	ble.n	8006f2a <_svfiprintf_r+0x2d2>
 8006f18:	9805      	ldr	r0, [sp, #20]
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	aa11      	add	r2, sp, #68	; 0x44
 8006f1e:	f7ff fe03 	bl	8006b28 <__ssprint_r>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d000      	beq.n	8006f28 <_svfiprintf_r+0x2d0>
 8006f26:	e1d5      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8006f28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	9807      	ldr	r0, [sp, #28]
 8006f2e:	4283      	cmp	r3, r0
 8006f30:	da00      	bge.n	8006f34 <_svfiprintf_r+0x2dc>
 8006f32:	1c03      	adds	r3, r0, #0
 8006f34:	9906      	ldr	r1, [sp, #24]
 8006f36:	18c9      	adds	r1, r1, r3
 8006f38:	9106      	str	r1, [sp, #24]
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	d000      	beq.n	8006f40 <_svfiprintf_r+0x2e8>
 8006f3e:	e1da      	b.n	80072f6 <_svfiprintf_r+0x69e>
 8006f40:	2300      	movs	r3, #0
 8006f42:	9312      	str	r3, [sp, #72]	; 0x48
 8006f44:	4647      	mov	r7, r8
 8006f46:	e6ab      	b.n	8006ca0 <_svfiprintf_r+0x48>
 8006f48:	0092      	lsls	r2, r2, #2
 8006f4a:	588a      	ldr	r2, [r1, r2]
 8006f4c:	4697      	mov	pc, r2
 8006f4e:	9c02      	ldr	r4, [sp, #8]
 8006f50:	4334      	orrs	r4, r6
 8006f52:	9402      	str	r4, [sp, #8]
 8006f54:	e6d8      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8006f56:	9c02      	ldr	r4, [sp, #8]
 8006f58:	2310      	movs	r3, #16
 8006f5a:	431c      	orrs	r4, r3
 8006f5c:	9402      	str	r4, [sp, #8]
 8006f5e:	9c02      	ldr	r4, [sp, #8]
 8006f60:	06e4      	lsls	r4, r4, #27
 8006f62:	d403      	bmi.n	8006f6c <_svfiprintf_r+0x314>
 8006f64:	9c02      	ldr	r4, [sp, #8]
 8006f66:	0664      	lsls	r4, r4, #25
 8006f68:	d500      	bpl.n	8006f6c <_svfiprintf_r+0x314>
 8006f6a:	e25d      	b.n	8007428 <_svfiprintf_r+0x7d0>
 8006f6c:	9c08      	ldr	r4, [sp, #32]
 8006f6e:	6826      	ldr	r6, [r4, #0]
 8006f70:	1c31      	adds	r1, r6, #0
 8006f72:	3404      	adds	r4, #4
 8006f74:	1e4b      	subs	r3, r1, #1
 8006f76:	4199      	sbcs	r1, r3
 8006f78:	9408      	str	r4, [sp, #32]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e012      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 8006f7e:	9c02      	ldr	r4, [sp, #8]
 8006f80:	2310      	movs	r3, #16
 8006f82:	431c      	orrs	r4, r3
 8006f84:	9402      	str	r4, [sp, #8]
 8006f86:	9c02      	ldr	r4, [sp, #8]
 8006f88:	06e4      	lsls	r4, r4, #27
 8006f8a:	d403      	bmi.n	8006f94 <_svfiprintf_r+0x33c>
 8006f8c:	9c02      	ldr	r4, [sp, #8]
 8006f8e:	0664      	lsls	r4, r4, #25
 8006f90:	d500      	bpl.n	8006f94 <_svfiprintf_r+0x33c>
 8006f92:	e24f      	b.n	8007434 <_svfiprintf_r+0x7dc>
 8006f94:	9c08      	ldr	r4, [sp, #32]
 8006f96:	6826      	ldr	r6, [r4, #0]
 8006f98:	3404      	adds	r4, #4
 8006f9a:	1c31      	adds	r1, r6, #0
 8006f9c:	9408      	str	r4, [sp, #32]
 8006f9e:	1e4b      	subs	r3, r1, #1
 8006fa0:	4199      	sbcs	r1, r3
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	203f      	movs	r0, #63	; 0x3f
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4468      	add	r0, sp
 8006faa:	7002      	strb	r2, [r0, #0]
 8006fac:	2400      	movs	r4, #0
 8006fae:	464a      	mov	r2, r9
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	db03      	blt.n	8006fbc <_svfiprintf_r+0x364>
 8006fb4:	9802      	ldr	r0, [sp, #8]
 8006fb6:	2280      	movs	r2, #128	; 0x80
 8006fb8:	4390      	bics	r0, r2
 8006fba:	9002      	str	r0, [sp, #8]
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d102      	bne.n	8006fc8 <_svfiprintf_r+0x370>
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d100      	bne.n	8006fc8 <_svfiprintf_r+0x370>
 8006fc6:	e117      	b.n	80071f8 <_svfiprintf_r+0x5a0>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d100      	bne.n	8006fce <_svfiprintf_r+0x376>
 8006fcc:	e1de      	b.n	800738c <_svfiprintf_r+0x734>
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d100      	bne.n	8006fd4 <_svfiprintf_r+0x37c>
 8006fd2:	e1c9      	b.n	8007368 <_svfiprintf_r+0x710>
 8006fd4:	466b      	mov	r3, sp
 8006fd6:	3377      	adds	r3, #119	; 0x77
 8006fd8:	2107      	movs	r1, #7
 8006fda:	1c0a      	adds	r2, r1, #0
 8006fdc:	4032      	ands	r2, r6
 8006fde:	3230      	adds	r2, #48	; 0x30
 8006fe0:	1c18      	adds	r0, r3, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	08f6      	lsrs	r6, r6, #3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d1f6      	bne.n	8006fda <_svfiprintf_r+0x382>
 8006fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fee:	1c01      	adds	r1, r0, #0
 8006ff0:	9802      	ldr	r0, [sp, #8]
 8006ff2:	07c0      	lsls	r0, r0, #31
 8006ff4:	d400      	bmi.n	8006ff8 <_svfiprintf_r+0x3a0>
 8006ff6:	e203      	b.n	8007400 <_svfiprintf_r+0x7a8>
 8006ff8:	2a30      	cmp	r2, #48	; 0x30
 8006ffa:	d100      	bne.n	8006ffe <_svfiprintf_r+0x3a6>
 8006ffc:	e263      	b.n	80074c6 <_svfiprintf_r+0x86e>
 8006ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007000:	3901      	subs	r1, #1
 8007002:	2330      	movs	r3, #48	; 0x30
 8007004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007006:	700b      	strb	r3, [r1, #0]
 8007008:	4641      	mov	r1, r8
 800700a:	1a89      	subs	r1, r1, r2
 800700c:	9104      	str	r1, [sp, #16]
 800700e:	e101      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007010:	9c08      	ldr	r4, [sp, #32]
 8007012:	6824      	ldr	r4, [r4, #0]
 8007014:	9407      	str	r4, [sp, #28]
 8007016:	9c08      	ldr	r4, [sp, #32]
 8007018:	3404      	adds	r4, #4
 800701a:	9408      	str	r4, [sp, #32]
 800701c:	9c07      	ldr	r4, [sp, #28]
 800701e:	2c00      	cmp	r4, #0
 8007020:	db00      	blt.n	8007024 <_svfiprintf_r+0x3cc>
 8007022:	e671      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007024:	4264      	negs	r4, r4
 8007026:	9407      	str	r4, [sp, #28]
 8007028:	9c02      	ldr	r4, [sp, #8]
 800702a:	4662      	mov	r2, ip
 800702c:	4314      	orrs	r4, r2
 800702e:	9402      	str	r4, [sp, #8]
 8007030:	e66a      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	08008d90 	.word	0x08008d90
 8007038:	08008ef4 	.word	0x08008ef4
 800703c:	243f      	movs	r4, #63	; 0x3f
 800703e:	446c      	add	r4, sp
 8007040:	7020      	strb	r0, [r4, #0]
 8007042:	9c02      	ldr	r4, [sp, #8]
 8007044:	06e4      	lsls	r4, r4, #27
 8007046:	d403      	bmi.n	8007050 <_svfiprintf_r+0x3f8>
 8007048:	9c02      	ldr	r4, [sp, #8]
 800704a:	0664      	lsls	r4, r4, #25
 800704c:	d500      	bpl.n	8007050 <_svfiprintf_r+0x3f8>
 800704e:	e1f9      	b.n	8007444 <_svfiprintf_r+0x7ec>
 8007050:	9c08      	ldr	r4, [sp, #32]
 8007052:	6826      	ldr	r6, [r4, #0]
 8007054:	3404      	adds	r4, #4
 8007056:	9408      	str	r4, [sp, #32]
 8007058:	2e00      	cmp	r6, #0
 800705a:	da00      	bge.n	800705e <_svfiprintf_r+0x406>
 800705c:	e1fb      	b.n	8007456 <_svfiprintf_r+0x7fe>
 800705e:	203f      	movs	r0, #63	; 0x3f
 8007060:	4468      	add	r0, sp
 8007062:	1c31      	adds	r1, r6, #0
 8007064:	1e4b      	subs	r3, r1, #1
 8007066:	4199      	sbcs	r1, r3
 8007068:	7804      	ldrb	r4, [r0, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	e79f      	b.n	8006fae <_svfiprintf_r+0x356>
 800706e:	9a08      	ldr	r2, [sp, #32]
 8007070:	1c14      	adds	r4, r2, #0
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	3404      	adds	r4, #4
 8007076:	ab14      	add	r3, sp, #80	; 0x50
 8007078:	203f      	movs	r0, #63	; 0x3f
 800707a:	9408      	str	r4, [sp, #32]
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	2401      	movs	r4, #1
 8007080:	2200      	movs	r2, #0
 8007082:	4468      	add	r0, sp
 8007084:	7002      	strb	r2, [r0, #0]
 8007086:	9403      	str	r4, [sp, #12]
 8007088:	9404      	str	r4, [sp, #16]
 800708a:	930b      	str	r3, [sp, #44]	; 0x2c
 800708c:	e651      	b.n	8006d32 <_svfiprintf_r+0xda>
 800708e:	213f      	movs	r1, #63	; 0x3f
 8007090:	4ccc      	ldr	r4, [pc, #816]	; (80073c4 <_svfiprintf_r+0x76c>)
 8007092:	4469      	add	r1, sp
 8007094:	7008      	strb	r0, [r1, #0]
 8007096:	940c      	str	r4, [sp, #48]	; 0x30
 8007098:	9c02      	ldr	r4, [sp, #8]
 800709a:	06e4      	lsls	r4, r4, #27
 800709c:	d403      	bmi.n	80070a6 <_svfiprintf_r+0x44e>
 800709e:	9c02      	ldr	r4, [sp, #8]
 80070a0:	0664      	lsls	r4, r4, #25
 80070a2:	d500      	bpl.n	80070a6 <_svfiprintf_r+0x44e>
 80070a4:	e1c9      	b.n	800743a <_svfiprintf_r+0x7e2>
 80070a6:	9c08      	ldr	r4, [sp, #32]
 80070a8:	6826      	ldr	r6, [r4, #0]
 80070aa:	3404      	adds	r4, #4
 80070ac:	9408      	str	r4, [sp, #32]
 80070ae:	9c02      	ldr	r4, [sp, #8]
 80070b0:	07e4      	lsls	r4, r4, #31
 80070b2:	d500      	bpl.n	80070b6 <_svfiprintf_r+0x45e>
 80070b4:	e18c      	b.n	80073d0 <_svfiprintf_r+0x778>
 80070b6:	1c31      	adds	r1, r6, #0
 80070b8:	1e4b      	subs	r3, r1, #1
 80070ba:	4199      	sbcs	r1, r3
 80070bc:	2302      	movs	r3, #2
 80070be:	e771      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80070c0:	213f      	movs	r1, #63	; 0x3f
 80070c2:	4cc1      	ldr	r4, [pc, #772]	; (80073c8 <_svfiprintf_r+0x770>)
 80070c4:	4469      	add	r1, sp
 80070c6:	7008      	strb	r0, [r1, #0]
 80070c8:	940c      	str	r4, [sp, #48]	; 0x30
 80070ca:	e7e5      	b.n	8007098 <_svfiprintf_r+0x440>
 80070cc:	9c02      	ldr	r4, [sp, #8]
 80070ce:	2240      	movs	r2, #64	; 0x40
 80070d0:	4314      	orrs	r4, r2
 80070d2:	9402      	str	r4, [sp, #8]
 80070d4:	e618      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80070d6:	223f      	movs	r2, #63	; 0x3f
 80070d8:	9c02      	ldr	r4, [sp, #8]
 80070da:	446a      	add	r2, sp
 80070dc:	7010      	strb	r0, [r2, #0]
 80070de:	06e4      	lsls	r4, r4, #27
 80070e0:	d500      	bpl.n	80070e4 <_svfiprintf_r+0x48c>
 80070e2:	e199      	b.n	8007418 <_svfiprintf_r+0x7c0>
 80070e4:	9c02      	ldr	r4, [sp, #8]
 80070e6:	0664      	lsls	r4, r4, #25
 80070e8:	d400      	bmi.n	80070ec <_svfiprintf_r+0x494>
 80070ea:	e195      	b.n	8007418 <_svfiprintf_r+0x7c0>
 80070ec:	9808      	ldr	r0, [sp, #32]
 80070ee:	9c06      	ldr	r4, [sp, #24]
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	8004      	strh	r4, [r0, #0]
 80070f4:	9c08      	ldr	r4, [sp, #32]
 80070f6:	3404      	adds	r4, #4
 80070f8:	9408      	str	r4, [sp, #32]
 80070fa:	e5d1      	b.n	8006ca0 <_svfiprintf_r+0x48>
 80070fc:	9c08      	ldr	r4, [sp, #32]
 80070fe:	203f      	movs	r0, #63	; 0x3f
 8007100:	9e08      	ldr	r6, [sp, #32]
 8007102:	6824      	ldr	r4, [r4, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	4468      	add	r0, sp
 8007108:	7003      	strb	r3, [r0, #0]
 800710a:	3604      	adds	r6, #4
 800710c:	940b      	str	r4, [sp, #44]	; 0x2c
 800710e:	2c00      	cmp	r4, #0
 8007110:	d100      	bne.n	8007114 <_svfiprintf_r+0x4bc>
 8007112:	e1dd      	b.n	80074d0 <_svfiprintf_r+0x878>
 8007114:	4648      	mov	r0, r9
 8007116:	2800      	cmp	r0, #0
 8007118:	da00      	bge.n	800711c <_svfiprintf_r+0x4c4>
 800711a:	e1a7      	b.n	800746c <_svfiprintf_r+0x814>
 800711c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800711e:	2100      	movs	r1, #0
 8007120:	464a      	mov	r2, r9
 8007122:	f7fe ff6b 	bl	8005ffc <memchr>
 8007126:	2800      	cmp	r0, #0
 8007128:	d100      	bne.n	800712c <_svfiprintf_r+0x4d4>
 800712a:	e1b6      	b.n	800749a <_svfiprintf_r+0x842>
 800712c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800712e:	1b00      	subs	r0, r0, r4
 8007130:	9004      	str	r0, [sp, #16]
 8007132:	4548      	cmp	r0, r9
 8007134:	dd00      	ble.n	8007138 <_svfiprintf_r+0x4e0>
 8007136:	e1b0      	b.n	800749a <_svfiprintf_r+0x842>
 8007138:	203f      	movs	r0, #63	; 0x3f
 800713a:	4468      	add	r0, sp
 800713c:	2100      	movs	r1, #0
 800713e:	7804      	ldrb	r4, [r0, #0]
 8007140:	9608      	str	r6, [sp, #32]
 8007142:	9109      	str	r1, [sp, #36]	; 0x24
 8007144:	e068      	b.n	8007218 <_svfiprintf_r+0x5c0>
 8007146:	782b      	ldrb	r3, [r5, #0]
 8007148:	3501      	adds	r5, #1
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d100      	bne.n	8007150 <_svfiprintf_r+0x4f8>
 800714e:	e1d0      	b.n	80074f2 <_svfiprintf_r+0x89a>
 8007150:	1c1a      	adds	r2, r3, #0
 8007152:	3a30      	subs	r2, #48	; 0x30
 8007154:	2400      	movs	r4, #0
 8007156:	2a09      	cmp	r2, #9
 8007158:	d80f      	bhi.n	800717a <_svfiprintf_r+0x522>
 800715a:	00a3      	lsls	r3, r4, #2
 800715c:	191c      	adds	r4, r3, r4
 800715e:	782b      	ldrb	r3, [r5, #0]
 8007160:	0064      	lsls	r4, r4, #1
 8007162:	1914      	adds	r4, r2, r4
 8007164:	1c1a      	adds	r2, r3, #0
 8007166:	3a30      	subs	r2, #48	; 0x30
 8007168:	3501      	adds	r5, #1
 800716a:	2a09      	cmp	r2, #9
 800716c:	d9f5      	bls.n	800715a <_svfiprintf_r+0x502>
 800716e:	46a1      	mov	r9, r4
 8007170:	2c00      	cmp	r4, #0
 8007172:	db00      	blt.n	8007176 <_svfiprintf_r+0x51e>
 8007174:	e5ca      	b.n	8006d0c <_svfiprintf_r+0xb4>
 8007176:	2401      	movs	r4, #1
 8007178:	4264      	negs	r4, r4
 800717a:	46a1      	mov	r9, r4
 800717c:	e5c6      	b.n	8006d0c <_svfiprintf_r+0xb4>
 800717e:	202b      	movs	r0, #43	; 0x2b
 8007180:	e5c2      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007182:	9c02      	ldr	r4, [sp, #8]
 8007184:	213f      	movs	r1, #63	; 0x3f
 8007186:	2310      	movs	r3, #16
 8007188:	4469      	add	r1, sp
 800718a:	431c      	orrs	r4, r3
 800718c:	7008      	strb	r0, [r1, #0]
 800718e:	9402      	str	r4, [sp, #8]
 8007190:	e757      	b.n	8007042 <_svfiprintf_r+0x3ea>
 8007192:	1c1a      	adds	r2, r3, #0
 8007194:	2400      	movs	r4, #0
 8007196:	3a30      	subs	r2, #48	; 0x30
 8007198:	00a3      	lsls	r3, r4, #2
 800719a:	191c      	adds	r4, r3, r4
 800719c:	782b      	ldrb	r3, [r5, #0]
 800719e:	0064      	lsls	r4, r4, #1
 80071a0:	18a4      	adds	r4, r4, r2
 80071a2:	1c1a      	adds	r2, r3, #0
 80071a4:	3a30      	subs	r2, #48	; 0x30
 80071a6:	3501      	adds	r5, #1
 80071a8:	2a09      	cmp	r2, #9
 80071aa:	d9f5      	bls.n	8007198 <_svfiprintf_r+0x540>
 80071ac:	9407      	str	r4, [sp, #28]
 80071ae:	e5ad      	b.n	8006d0c <_svfiprintf_r+0xb4>
 80071b0:	9c02      	ldr	r4, [sp, #8]
 80071b2:	4652      	mov	r2, sl
 80071b4:	4314      	orrs	r4, r2
 80071b6:	9402      	str	r4, [sp, #8]
 80071b8:	e5a6      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	1c1c      	adds	r4, r3, #0
 80071be:	3404      	adds	r4, #4
 80071c0:	9408      	str	r4, [sp, #32]
 80071c2:	9c02      	ldr	r4, [sp, #8]
 80071c4:	681e      	ldr	r6, [r3, #0]
 80071c6:	2302      	movs	r3, #2
 80071c8:	431c      	orrs	r4, r3
 80071ca:	2230      	movs	r2, #48	; 0x30
 80071cc:	ab10      	add	r3, sp, #64	; 0x40
 80071ce:	9402      	str	r4, [sp, #8]
 80071d0:	4c7d      	ldr	r4, [pc, #500]	; (80073c8 <_svfiprintf_r+0x770>)
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	1c31      	adds	r1, r6, #0
 80071d6:	2278      	movs	r2, #120	; 0x78
 80071d8:	705a      	strb	r2, [r3, #1]
 80071da:	940c      	str	r4, [sp, #48]	; 0x30
 80071dc:	1e4b      	subs	r3, r1, #1
 80071de:	4199      	sbcs	r1, r3
 80071e0:	2302      	movs	r3, #2
 80071e2:	e6df      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80071e4:	9c02      	ldr	r4, [sp, #8]
 80071e6:	2201      	movs	r2, #1
 80071e8:	4314      	orrs	r4, r2
 80071ea:	9402      	str	r4, [sp, #8]
 80071ec:	e58c      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d000      	beq.n	80071f4 <_svfiprintf_r+0x59c>
 80071f2:	e589      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071f4:	2020      	movs	r0, #32
 80071f6:	e587      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d000      	beq.n	80071fe <_svfiprintf_r+0x5a6>
 80071fc:	e084      	b.n	8007308 <_svfiprintf_r+0x6b0>
 80071fe:	9902      	ldr	r1, [sp, #8]
 8007200:	07c9      	lsls	r1, r1, #31
 8007202:	d400      	bmi.n	8007206 <_svfiprintf_r+0x5ae>
 8007204:	e0ab      	b.n	800735e <_svfiprintf_r+0x706>
 8007206:	2277      	movs	r2, #119	; 0x77
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	446a      	add	r2, sp
 800720c:	7013      	strb	r3, [r2, #0]
 800720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007210:	920b      	str	r2, [sp, #44]	; 0x2c
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	4648      	mov	r0, r9
 8007216:	9009      	str	r0, [sp, #36]	; 0x24
 8007218:	9804      	ldr	r0, [sp, #16]
 800721a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721c:	9003      	str	r0, [sp, #12]
 800721e:	4288      	cmp	r0, r1
 8007220:	da00      	bge.n	8007224 <_svfiprintf_r+0x5cc>
 8007222:	9103      	str	r1, [sp, #12]
 8007224:	9a03      	ldr	r2, [sp, #12]
 8007226:	1e63      	subs	r3, r4, #1
 8007228:	419c      	sbcs	r4, r3
 800722a:	1912      	adds	r2, r2, r4
 800722c:	9203      	str	r2, [sp, #12]
 800722e:	e582      	b.n	8006d36 <_svfiprintf_r+0xde>
 8007230:	9907      	ldr	r1, [sp, #28]
 8007232:	9a03      	ldr	r2, [sp, #12]
 8007234:	1a8c      	subs	r4, r1, r2
 8007236:	2c00      	cmp	r4, #0
 8007238:	dc00      	bgt.n	800723c <_svfiprintf_r+0x5e4>
 800723a:	e5e9      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 800723c:	4e63      	ldr	r6, [pc, #396]	; (80073cc <_svfiprintf_r+0x774>)
 800723e:	2c10      	cmp	r4, #16
 8007240:	dd29      	ble.n	8007296 <_svfiprintf_r+0x63e>
 8007242:	2310      	movs	r3, #16
 8007244:	199b      	adds	r3, r3, r6
 8007246:	2010      	movs	r0, #16
 8007248:	469a      	mov	sl, r3
 800724a:	4681      	mov	r9, r0
 800724c:	1c3b      	adds	r3, r7, #0
 800724e:	1c37      	adds	r7, r6, #0
 8007250:	465e      	mov	r6, fp
 8007252:	46ab      	mov	fp, r5
 8007254:	9d05      	ldr	r5, [sp, #20]
 8007256:	e003      	b.n	8007260 <_svfiprintf_r+0x608>
 8007258:	3c10      	subs	r4, #16
 800725a:	3308      	adds	r3, #8
 800725c:	2c10      	cmp	r4, #16
 800725e:	dd16      	ble.n	800728e <_svfiprintf_r+0x636>
 8007260:	464a      	mov	r2, r9
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007266:	3210      	adds	r2, #16
 8007268:	9213      	str	r2, [sp, #76]	; 0x4c
 800726a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800726c:	4651      	mov	r1, sl
 800726e:	3201      	adds	r2, #1
 8007270:	6019      	str	r1, [r3, #0]
 8007272:	9212      	str	r2, [sp, #72]	; 0x48
 8007274:	2a07      	cmp	r2, #7
 8007276:	ddef      	ble.n	8007258 <_svfiprintf_r+0x600>
 8007278:	1c28      	adds	r0, r5, #0
 800727a:	1c31      	adds	r1, r6, #0
 800727c:	aa11      	add	r2, sp, #68	; 0x44
 800727e:	f7ff fc53 	bl	8006b28 <__ssprint_r>
 8007282:	2800      	cmp	r0, #0
 8007284:	d145      	bne.n	8007312 <_svfiprintf_r+0x6ba>
 8007286:	3c10      	subs	r4, #16
 8007288:	4643      	mov	r3, r8
 800728a:	2c10      	cmp	r4, #16
 800728c:	dce8      	bgt.n	8007260 <_svfiprintf_r+0x608>
 800728e:	465d      	mov	r5, fp
 8007290:	46b3      	mov	fp, r6
 8007292:	1c3e      	adds	r6, r7, #0
 8007294:	1c1f      	adds	r7, r3, #0
 8007296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007298:	607c      	str	r4, [r7, #4]
 800729a:	191c      	adds	r4, r3, r4
 800729c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800729e:	3610      	adds	r6, #16
 80072a0:	3301      	adds	r3, #1
 80072a2:	603e      	str	r6, [r7, #0]
 80072a4:	9413      	str	r4, [sp, #76]	; 0x4c
 80072a6:	9312      	str	r3, [sp, #72]	; 0x48
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	dd00      	ble.n	80072ae <_svfiprintf_r+0x656>
 80072ac:	e0eb      	b.n	8007486 <_svfiprintf_r+0x82e>
 80072ae:	3708      	adds	r7, #8
 80072b0:	e5ae      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 80072b2:	9805      	ldr	r0, [sp, #20]
 80072b4:	4659      	mov	r1, fp
 80072b6:	aa11      	add	r2, sp, #68	; 0x44
 80072b8:	f7ff fc36 	bl	8006b28 <__ssprint_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d109      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 80072c0:	4643      	mov	r3, r8
 80072c2:	e5f4      	b.n	8006eae <_svfiprintf_r+0x256>
 80072c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d004      	beq.n	80072d4 <_svfiprintf_r+0x67c>
 80072ca:	9805      	ldr	r0, [sp, #20]
 80072cc:	4659      	mov	r1, fp
 80072ce:	aa11      	add	r2, sp, #68	; 0x44
 80072d0:	f7ff fc2a 	bl	8006b28 <__ssprint_r>
 80072d4:	465c      	mov	r4, fp
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	0658      	lsls	r0, r3, #25
 80072da:	d502      	bpl.n	80072e2 <_svfiprintf_r+0x68a>
 80072dc:	2301      	movs	r3, #1
 80072de:	425b      	negs	r3, r3
 80072e0:	9306      	str	r3, [sp, #24]
 80072e2:	9806      	ldr	r0, [sp, #24]
 80072e4:	b02f      	add	sp, #188	; 0xbc
 80072e6:	bc3c      	pop	{r2, r3, r4, r5}
 80072e8:	4690      	mov	r8, r2
 80072ea:	4699      	mov	r9, r3
 80072ec:	46a2      	mov	sl, r4
 80072ee:	46ab      	mov	fp, r5
 80072f0:	bcf0      	pop	{r4, r5, r6, r7}
 80072f2:	bc02      	pop	{r1}
 80072f4:	4708      	bx	r1
 80072f6:	9805      	ldr	r0, [sp, #20]
 80072f8:	4659      	mov	r1, fp
 80072fa:	aa11      	add	r2, sp, #68	; 0x44
 80072fc:	f7ff fc14 	bl	8006b28 <__ssprint_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d100      	bne.n	8007306 <_svfiprintf_r+0x6ae>
 8007304:	e61c      	b.n	8006f40 <_svfiprintf_r+0x2e8>
 8007306:	e7e5      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007308:	2100      	movs	r1, #0
 800730a:	4643      	mov	r3, r8
 800730c:	9104      	str	r1, [sp, #16]
 800730e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007310:	e780      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007312:	46b3      	mov	fp, r6
 8007314:	e7de      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007316:	9805      	ldr	r0, [sp, #20]
 8007318:	4659      	mov	r1, fp
 800731a:	aa11      	add	r2, sp, #68	; 0x44
 800731c:	f7ff fc04 	bl	8006b28 <__ssprint_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d1d7      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007324:	4647      	mov	r7, r8
 8007326:	e4d6      	b.n	8006cd6 <_svfiprintf_r+0x7e>
 8007328:	9805      	ldr	r0, [sp, #20]
 800732a:	4659      	mov	r1, fp
 800732c:	aa11      	add	r2, sp, #68	; 0x44
 800732e:	f7ff fbfb 	bl	8006b28 <__ssprint_r>
 8007332:	2800      	cmp	r0, #0
 8007334:	d1ce      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007336:	4647      	mov	r7, r8
 8007338:	e5aa      	b.n	8006e90 <_svfiprintf_r+0x238>
 800733a:	9805      	ldr	r0, [sp, #20]
 800733c:	4659      	mov	r1, fp
 800733e:	aa11      	add	r2, sp, #68	; 0x44
 8007340:	f7ff fbf2 	bl	8006b28 <__ssprint_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	d1c5      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007348:	4647      	mov	r7, r8
 800734a:	e54c      	b.n	8006de6 <_svfiprintf_r+0x18e>
 800734c:	9805      	ldr	r0, [sp, #20]
 800734e:	4659      	mov	r1, fp
 8007350:	aa11      	add	r2, sp, #68	; 0x44
 8007352:	f7ff fbe9 	bl	8006b28 <__ssprint_r>
 8007356:	2800      	cmp	r0, #0
 8007358:	d1bc      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 800735a:	4647      	mov	r7, r8
 800735c:	e554      	b.n	8006e08 <_svfiprintf_r+0x1b0>
 800735e:	2000      	movs	r0, #0
 8007360:	4642      	mov	r2, r8
 8007362:	9004      	str	r0, [sp, #16]
 8007364:	920b      	str	r2, [sp, #44]	; 0x2c
 8007366:	e755      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007368:	466b      	mov	r3, sp
 800736a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800736c:	3377      	adds	r3, #119	; 0x77
 800736e:	220f      	movs	r2, #15
 8007370:	1c19      	adds	r1, r3, #0
 8007372:	1c13      	adds	r3, r2, #0
 8007374:	4033      	ands	r3, r6
 8007376:	5cc3      	ldrb	r3, [r0, r3]
 8007378:	0936      	lsrs	r6, r6, #4
 800737a:	700b      	strb	r3, [r1, #0]
 800737c:	1e4b      	subs	r3, r1, #1
 800737e:	2e00      	cmp	r6, #0
 8007380:	d1f6      	bne.n	8007370 <_svfiprintf_r+0x718>
 8007382:	4640      	mov	r0, r8
 8007384:	1a40      	subs	r0, r0, r1
 8007386:	910b      	str	r1, [sp, #44]	; 0x2c
 8007388:	9004      	str	r0, [sp, #16]
 800738a:	e743      	b.n	8007214 <_svfiprintf_r+0x5bc>
 800738c:	2e09      	cmp	r6, #9
 800738e:	d93b      	bls.n	8007408 <_svfiprintf_r+0x7b0>
 8007390:	466b      	mov	r3, sp
 8007392:	3377      	adds	r3, #119	; 0x77
 8007394:	46a2      	mov	sl, r4
 8007396:	1c30      	adds	r0, r6, #0
 8007398:	210a      	movs	r1, #10
 800739a:	1c1c      	adds	r4, r3, #0
 800739c:	f000 ec02 	blx	8007ba4 <__aeabi_uidivmod>
 80073a0:	3130      	adds	r1, #48	; 0x30
 80073a2:	7021      	strb	r1, [r4, #0]
 80073a4:	1c30      	adds	r0, r6, #0
 80073a6:	210a      	movs	r1, #10
 80073a8:	f000 eb7e 	blx	8007aa8 <__aeabi_uidiv>
 80073ac:	1e63      	subs	r3, r4, #1
 80073ae:	1c06      	adds	r6, r0, #0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1f0      	bne.n	8007396 <_svfiprintf_r+0x73e>
 80073b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80073b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b8:	4642      	mov	r2, r8
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	4654      	mov	r4, sl
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	e728      	b.n	8007214 <_svfiprintf_r+0x5bc>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	0800903c 	.word	0x0800903c
 80073c8:	08009050 	.word	0x08009050
 80073cc:	08008ef4 	.word	0x08008ef4
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	d02c      	beq.n	800742e <_svfiprintf_r+0x7d6>
 80073d4:	aa10      	add	r2, sp, #64	; 0x40
 80073d6:	9c02      	ldr	r4, [sp, #8]
 80073d8:	7053      	strb	r3, [r2, #1]
 80073da:	2302      	movs	r3, #2
 80073dc:	2130      	movs	r1, #48	; 0x30
 80073de:	431c      	orrs	r4, r3
 80073e0:	7011      	strb	r1, [r2, #0]
 80073e2:	9402      	str	r4, [sp, #8]
 80073e4:	2101      	movs	r1, #1
 80073e6:	e5dd      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80073e8:	9805      	ldr	r0, [sp, #20]
 80073ea:	4659      	mov	r1, fp
 80073ec:	aa11      	add	r2, sp, #68	; 0x44
 80073ee:	f7ff fb9b 	bl	8006b28 <__ssprint_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d000      	beq.n	80073f8 <_svfiprintf_r+0x7a0>
 80073f6:	e76d      	b.n	80072d4 <_svfiprintf_r+0x67c>
 80073f8:	4647      	mov	r7, r8
 80073fa:	e4e2      	b.n	8006dc2 <_svfiprintf_r+0x16a>
 80073fc:	46bb      	mov	fp, r7
 80073fe:	e769      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007400:	4642      	mov	r2, r8
 8007402:	1a52      	subs	r2, r2, r1
 8007404:	9204      	str	r2, [sp, #16]
 8007406:	e705      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007408:	2377      	movs	r3, #119	; 0x77
 800740a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800740c:	446b      	add	r3, sp
 800740e:	3630      	adds	r6, #48	; 0x30
 8007410:	701e      	strb	r6, [r3, #0]
 8007412:	9004      	str	r0, [sp, #16]
 8007414:	930b      	str	r3, [sp, #44]	; 0x2c
 8007416:	e6fd      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007418:	9c08      	ldr	r4, [sp, #32]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	9c06      	ldr	r4, [sp, #24]
 800741e:	601c      	str	r4, [r3, #0]
 8007420:	9c08      	ldr	r4, [sp, #32]
 8007422:	3404      	adds	r4, #4
 8007424:	9408      	str	r4, [sp, #32]
 8007426:	e43b      	b.n	8006ca0 <_svfiprintf_r+0x48>
 8007428:	9c08      	ldr	r4, [sp, #32]
 800742a:	8826      	ldrh	r6, [r4, #0]
 800742c:	e5a0      	b.n	8006f70 <_svfiprintf_r+0x318>
 800742e:	2100      	movs	r1, #0
 8007430:	2302      	movs	r3, #2
 8007432:	e5b7      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 8007434:	9c08      	ldr	r4, [sp, #32]
 8007436:	8826      	ldrh	r6, [r4, #0]
 8007438:	e5ae      	b.n	8006f98 <_svfiprintf_r+0x340>
 800743a:	9c08      	ldr	r4, [sp, #32]
 800743c:	8826      	ldrh	r6, [r4, #0]
 800743e:	3404      	adds	r4, #4
 8007440:	9408      	str	r4, [sp, #32]
 8007442:	e634      	b.n	80070ae <_svfiprintf_r+0x456>
 8007444:	9c08      	ldr	r4, [sp, #32]
 8007446:	2600      	movs	r6, #0
 8007448:	5fa6      	ldrsh	r6, [r4, r6]
 800744a:	9c08      	ldr	r4, [sp, #32]
 800744c:	3404      	adds	r4, #4
 800744e:	9408      	str	r4, [sp, #32]
 8007450:	2e00      	cmp	r6, #0
 8007452:	db00      	blt.n	8007456 <_svfiprintf_r+0x7fe>
 8007454:	e603      	b.n	800705e <_svfiprintf_r+0x406>
 8007456:	213f      	movs	r1, #63	; 0x3f
 8007458:	232d      	movs	r3, #45	; 0x2d
 800745a:	4469      	add	r1, sp
 800745c:	4276      	negs	r6, r6
 800745e:	700b      	strb	r3, [r1, #0]
 8007460:	1c31      	adds	r1, r6, #0
 8007462:	1e4b      	subs	r3, r1, #1
 8007464:	4199      	sbcs	r1, r3
 8007466:	242d      	movs	r4, #45	; 0x2d
 8007468:	2301      	movs	r3, #1
 800746a:	e5a0      	b.n	8006fae <_svfiprintf_r+0x356>
 800746c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800746e:	f7ff fb53 	bl	8006b18 <strlen>
 8007472:	223f      	movs	r2, #63	; 0x3f
 8007474:	446a      	add	r2, sp
 8007476:	2300      	movs	r3, #0
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	7814      	ldrb	r4, [r2, #0]
 800747c:	9608      	str	r6, [sp, #32]
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	e6ca      	b.n	8007218 <_svfiprintf_r+0x5c0>
 8007482:	46ab      	mov	fp, r5
 8007484:	e726      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	4659      	mov	r1, fp
 800748a:	aa11      	add	r2, sp, #68	; 0x44
 800748c:	f7ff fb4c 	bl	8006b28 <__ssprint_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	d000      	beq.n	8007496 <_svfiprintf_r+0x83e>
 8007494:	e71e      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007496:	4647      	mov	r7, r8
 8007498:	e4ba      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 800749a:	203f      	movs	r0, #63	; 0x3f
 800749c:	4468      	add	r0, sp
 800749e:	464a      	mov	r2, r9
 80074a0:	2300      	movs	r3, #0
 80074a2:	7804      	ldrb	r4, [r0, #0]
 80074a4:	9608      	str	r6, [sp, #32]
 80074a6:	9204      	str	r2, [sp, #16]
 80074a8:	9309      	str	r3, [sp, #36]	; 0x24
 80074aa:	e6b5      	b.n	8007218 <_svfiprintf_r+0x5c0>
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	2140      	movs	r1, #64	; 0x40
 80074b0:	f7fe fb16 	bl	8005ae0 <_malloc_r>
 80074b4:	465a      	mov	r2, fp
 80074b6:	6010      	str	r0, [r2, #0]
 80074b8:	6110      	str	r0, [r2, #16]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d028      	beq.n	8007510 <_svfiprintf_r+0x8b8>
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	6153      	str	r3, [r2, #20]
 80074c2:	f7ff fbdc 	bl	8006c7e <_svfiprintf_r+0x26>
 80074c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80074c8:	4643      	mov	r3, r8
 80074ca:	1a1b      	subs	r3, r3, r0
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	e6a1      	b.n	8007214 <_svfiprintf_r+0x5bc>
 80074d0:	464c      	mov	r4, r9
 80074d2:	9404      	str	r4, [sp, #16]
 80074d4:	2c06      	cmp	r4, #6
 80074d6:	d906      	bls.n	80074e6 <_svfiprintf_r+0x88e>
 80074d8:	2406      	movs	r4, #6
 80074da:	9404      	str	r4, [sp, #16]
 80074dc:	9403      	str	r4, [sp, #12]
 80074de:	4c10      	ldr	r4, [pc, #64]	; (8007520 <_svfiprintf_r+0x8c8>)
 80074e0:	9608      	str	r6, [sp, #32]
 80074e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80074e4:	e425      	b.n	8006d32 <_svfiprintf_r+0xda>
 80074e6:	9c04      	ldr	r4, [sp, #16]
 80074e8:	43e3      	mvns	r3, r4
 80074ea:	17db      	asrs	r3, r3, #31
 80074ec:	401c      	ands	r4, r3
 80074ee:	9403      	str	r4, [sp, #12]
 80074f0:	e7f5      	b.n	80074de <_svfiprintf_r+0x886>
 80074f2:	9c08      	ldr	r4, [sp, #32]
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4691      	mov	r9, r2
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	2a00      	cmp	r2, #0
 8007500:	db01      	blt.n	8007506 <_svfiprintf_r+0x8ae>
 8007502:	f7ff fc01 	bl	8006d08 <_svfiprintf_r+0xb0>
 8007506:	2401      	movs	r4, #1
 8007508:	4264      	negs	r4, r4
 800750a:	46a1      	mov	r9, r4
 800750c:	f7ff fbfc 	bl	8006d08 <_svfiprintf_r+0xb0>
 8007510:	9c05      	ldr	r4, [sp, #20]
 8007512:	230c      	movs	r3, #12
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	2301      	movs	r3, #1
 8007518:	425b      	negs	r3, r3
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	e6e1      	b.n	80072e2 <_svfiprintf_r+0x68a>
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	08009064 	.word	0x08009064

08007524 <_calloc_r>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4351      	muls	r1, r2
 8007528:	f7fe fada 	bl	8005ae0 <_malloc_r>
 800752c:	1e04      	subs	r4, r0, #0
 800752e:	d00e      	beq.n	800754e <_calloc_r+0x2a>
 8007530:	1c23      	adds	r3, r4, #0
 8007532:	3b08      	subs	r3, #8
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	2303      	movs	r3, #3
 8007538:	439a      	bics	r2, r3
 800753a:	3a04      	subs	r2, #4
 800753c:	2a24      	cmp	r2, #36	; 0x24
 800753e:	d816      	bhi.n	800756e <_calloc_r+0x4a>
 8007540:	1c23      	adds	r3, r4, #0
 8007542:	2a13      	cmp	r2, #19
 8007544:	d807      	bhi.n	8007556 <_calloc_r+0x32>
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	605a      	str	r2, [r3, #4]
 800754c:	609a      	str	r2, [r3, #8]
 800754e:	1c20      	adds	r0, r4, #0
 8007550:	bc10      	pop	{r4}
 8007552:	bc02      	pop	{r1}
 8007554:	4708      	bx	r1
 8007556:	2300      	movs	r3, #0
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	2a1b      	cmp	r2, #27
 800755e:	d90b      	bls.n	8007578 <_calloc_r+0x54>
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	60e3      	str	r3, [r4, #12]
 8007564:	2a24      	cmp	r2, #36	; 0x24
 8007566:	d00a      	beq.n	800757e <_calloc_r+0x5a>
 8007568:	1c23      	adds	r3, r4, #0
 800756a:	3310      	adds	r3, #16
 800756c:	e7eb      	b.n	8007546 <_calloc_r+0x22>
 800756e:	1c20      	adds	r0, r4, #0
 8007570:	2100      	movs	r1, #0
 8007572:	f000 f859 	bl	8007628 <memset>
 8007576:	e7ea      	b.n	800754e <_calloc_r+0x2a>
 8007578:	1c23      	adds	r3, r4, #0
 800757a:	3308      	adds	r3, #8
 800757c:	e7e3      	b.n	8007546 <_calloc_r+0x22>
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	6163      	str	r3, [r4, #20]
 8007582:	1c23      	adds	r3, r4, #0
 8007584:	3318      	adds	r3, #24
 8007586:	e7de      	b.n	8007546 <_calloc_r+0x22>

08007588 <memmove>:
 8007588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758a:	4288      	cmp	r0, r1
 800758c:	d910      	bls.n	80075b0 <memmove+0x28>
 800758e:	188d      	adds	r5, r1, r2
 8007590:	42a8      	cmp	r0, r5
 8007592:	d20d      	bcs.n	80075b0 <memmove+0x28>
 8007594:	1886      	adds	r6, r0, r2
 8007596:	1e53      	subs	r3, r2, #1
 8007598:	4251      	negs	r1, r2
 800759a:	2a00      	cmp	r2, #0
 800759c:	d005      	beq.n	80075aa <memmove+0x22>
 800759e:	186a      	adds	r2, r5, r1
 80075a0:	5cd4      	ldrb	r4, [r2, r3]
 80075a2:	1872      	adds	r2, r6, r1
 80075a4:	54d4      	strb	r4, [r2, r3]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	d2f9      	bcs.n	800759e <memmove+0x16>
 80075aa:	bcf0      	pop	{r4, r5, r6, r7}
 80075ac:	bc02      	pop	{r1}
 80075ae:	4708      	bx	r1
 80075b0:	2a0f      	cmp	r2, #15
 80075b2:	d80a      	bhi.n	80075ca <memmove+0x42>
 80075b4:	1c03      	adds	r3, r0, #0
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d0f7      	beq.n	80075aa <memmove+0x22>
 80075ba:	189a      	adds	r2, r3, r2
 80075bc:	780c      	ldrb	r4, [r1, #0]
 80075be:	701c      	strb	r4, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	3101      	adds	r1, #1
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d1f9      	bne.n	80075bc <memmove+0x34>
 80075c8:	e7ef      	b.n	80075aa <memmove+0x22>
 80075ca:	1c0b      	adds	r3, r1, #0
 80075cc:	4303      	orrs	r3, r0
 80075ce:	079c      	lsls	r4, r3, #30
 80075d0:	d125      	bne.n	800761e <memmove+0x96>
 80075d2:	1c13      	adds	r3, r2, #0
 80075d4:	3b10      	subs	r3, #16
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	3301      	adds	r3, #1
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	18cd      	adds	r5, r1, r3
 80075de:	1c04      	adds	r4, r0, #0
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	6026      	str	r6, [r4, #0]
 80075e4:	684e      	ldr	r6, [r1, #4]
 80075e6:	6066      	str	r6, [r4, #4]
 80075e8:	688e      	ldr	r6, [r1, #8]
 80075ea:	60a6      	str	r6, [r4, #8]
 80075ec:	68ce      	ldr	r6, [r1, #12]
 80075ee:	3110      	adds	r1, #16
 80075f0:	60e6      	str	r6, [r4, #12]
 80075f2:	3410      	adds	r4, #16
 80075f4:	428d      	cmp	r5, r1
 80075f6:	d1f3      	bne.n	80075e0 <memmove+0x58>
 80075f8:	240f      	movs	r4, #15
 80075fa:	18c3      	adds	r3, r0, r3
 80075fc:	4014      	ands	r4, r2
 80075fe:	2c03      	cmp	r4, #3
 8007600:	d90f      	bls.n	8007622 <memmove+0x9a>
 8007602:	1f27      	subs	r7, r4, #4
 8007604:	08bf      	lsrs	r7, r7, #2
 8007606:	3701      	adds	r7, #1
 8007608:	00bf      	lsls	r7, r7, #2
 800760a:	19e9      	adds	r1, r5, r7
 800760c:	1c1c      	adds	r4, r3, #0
 800760e:	cd40      	ldmia	r5!, {r6}
 8007610:	c440      	stmia	r4!, {r6}
 8007612:	428d      	cmp	r5, r1
 8007614:	d1fb      	bne.n	800760e <memmove+0x86>
 8007616:	2403      	movs	r4, #3
 8007618:	4022      	ands	r2, r4
 800761a:	19db      	adds	r3, r3, r7
 800761c:	e7cb      	b.n	80075b6 <memmove+0x2e>
 800761e:	1c03      	adds	r3, r0, #0
 8007620:	e7cb      	b.n	80075ba <memmove+0x32>
 8007622:	1c29      	adds	r1, r5, #0
 8007624:	1c22      	adds	r2, r4, #0
 8007626:	e7c6      	b.n	80075b6 <memmove+0x2e>

08007628 <memset>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	0783      	lsls	r3, r0, #30
 800762c:	d042      	beq.n	80076b4 <memset+0x8c>
 800762e:	1e54      	subs	r4, r2, #1
 8007630:	2a00      	cmp	r2, #0
 8007632:	d03c      	beq.n	80076ae <memset+0x86>
 8007634:	060e      	lsls	r6, r1, #24
 8007636:	0e36      	lsrs	r6, r6, #24
 8007638:	1c03      	adds	r3, r0, #0
 800763a:	2503      	movs	r5, #3
 800763c:	e003      	b.n	8007646 <memset+0x1e>
 800763e:	1e62      	subs	r2, r4, #1
 8007640:	2c00      	cmp	r4, #0
 8007642:	d034      	beq.n	80076ae <memset+0x86>
 8007644:	1c14      	adds	r4, r2, #0
 8007646:	701e      	strb	r6, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	422b      	tst	r3, r5
 800764c:	d1f7      	bne.n	800763e <memset+0x16>
 800764e:	2c03      	cmp	r4, #3
 8007650:	d924      	bls.n	800769c <memset+0x74>
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	400a      	ands	r2, r1
 8007656:	0215      	lsls	r5, r2, #8
 8007658:	432a      	orrs	r2, r5
 800765a:	0415      	lsls	r5, r2, #16
 800765c:	432a      	orrs	r2, r5
 800765e:	2c0f      	cmp	r4, #15
 8007660:	d92b      	bls.n	80076ba <memset+0x92>
 8007662:	1c26      	adds	r6, r4, #0
 8007664:	3e10      	subs	r6, #16
 8007666:	0936      	lsrs	r6, r6, #4
 8007668:	3601      	adds	r6, #1
 800766a:	0136      	lsls	r6, r6, #4
 800766c:	199e      	adds	r6, r3, r6
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	609a      	str	r2, [r3, #8]
 8007674:	60da      	str	r2, [r3, #12]
 8007676:	3310      	adds	r3, #16
 8007678:	429e      	cmp	r6, r3
 800767a:	d1f8      	bne.n	800766e <memset+0x46>
 800767c:	230f      	movs	r3, #15
 800767e:	401c      	ands	r4, r3
 8007680:	1c35      	adds	r5, r6, #0
 8007682:	1c33      	adds	r3, r6, #0
 8007684:	2c03      	cmp	r4, #3
 8007686:	d909      	bls.n	800769c <memset+0x74>
 8007688:	1f23      	subs	r3, r4, #4
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	3301      	adds	r3, #1
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	18eb      	adds	r3, r5, r3
 8007692:	c504      	stmia	r5!, {r2}
 8007694:	429d      	cmp	r5, r3
 8007696:	d1fc      	bne.n	8007692 <memset+0x6a>
 8007698:	2203      	movs	r2, #3
 800769a:	4014      	ands	r4, r2
 800769c:	2c00      	cmp	r4, #0
 800769e:	d006      	beq.n	80076ae <memset+0x86>
 80076a0:	060a      	lsls	r2, r1, #24
 80076a2:	0e12      	lsrs	r2, r2, #24
 80076a4:	191c      	adds	r4, r3, r4
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	42a3      	cmp	r3, r4
 80076ac:	d1fb      	bne.n	80076a6 <memset+0x7e>
 80076ae:	bc70      	pop	{r4, r5, r6}
 80076b0:	bc02      	pop	{r1}
 80076b2:	4708      	bx	r1
 80076b4:	1c03      	adds	r3, r0, #0
 80076b6:	1c14      	adds	r4, r2, #0
 80076b8:	e7c9      	b.n	800764e <memset+0x26>
 80076ba:	1c1d      	adds	r5, r3, #0
 80076bc:	e7e4      	b.n	8007688 <memset+0x60>
 80076be:	46c0      	nop			; (mov r8, r8)

080076c0 <_realloc_r>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	465f      	mov	r7, fp
 80076c4:	4644      	mov	r4, r8
 80076c6:	4656      	mov	r6, sl
 80076c8:	464d      	mov	r5, r9
 80076ca:	b4f0      	push	{r4, r5, r6, r7}
 80076cc:	4693      	mov	fp, r2
 80076ce:	b085      	sub	sp, #20
 80076d0:	1c07      	adds	r7, r0, #0
 80076d2:	1c0c      	adds	r4, r1, #0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d100      	bne.n	80076da <_realloc_r+0x1a>
 80076d8:	e103      	b.n	80078e2 <_realloc_r+0x222>
 80076da:	1c26      	adds	r6, r4, #0
 80076dc:	3e08      	subs	r6, #8
 80076de:	f7fe fd15 	bl	800610c <__malloc_lock>
 80076e2:	6873      	ldr	r3, [r6, #4]
 80076e4:	2203      	movs	r2, #3
 80076e6:	1c18      	adds	r0, r3, #0
 80076e8:	465d      	mov	r5, fp
 80076ea:	4390      	bics	r0, r2
 80076ec:	350b      	adds	r5, #11
 80076ee:	4680      	mov	r8, r0
 80076f0:	2d16      	cmp	r5, #22
 80076f2:	d865      	bhi.n	80077c0 <_realloc_r+0x100>
 80076f4:	2110      	movs	r1, #16
 80076f6:	9101      	str	r1, [sp, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2510      	movs	r5, #16
 80076fc:	455d      	cmp	r5, fp
 80076fe:	d200      	bcs.n	8007702 <_realloc_r+0x42>
 8007700:	e0f4      	b.n	80078ec <_realloc_r+0x22c>
 8007702:	2a00      	cmp	r2, #0
 8007704:	d000      	beq.n	8007708 <_realloc_r+0x48>
 8007706:	e0f1      	b.n	80078ec <_realloc_r+0x22c>
 8007708:	9801      	ldr	r0, [sp, #4]
 800770a:	4580      	cmp	r8, r0
 800770c:	da5d      	bge.n	80077ca <_realloc_r+0x10a>
 800770e:	48d4      	ldr	r0, [pc, #848]	; (8007a60 <_realloc_r+0x3a0>)
 8007710:	4641      	mov	r1, r8
 8007712:	6880      	ldr	r0, [r0, #8]
 8007714:	1872      	adds	r2, r6, r1
 8007716:	9002      	str	r0, [sp, #8]
 8007718:	4290      	cmp	r0, r2
 800771a:	d100      	bne.n	800771e <_realloc_r+0x5e>
 800771c:	e0eb      	b.n	80078f6 <_realloc_r+0x236>
 800771e:	6851      	ldr	r1, [r2, #4]
 8007720:	2001      	movs	r0, #1
 8007722:	468a      	mov	sl, r1
 8007724:	4381      	bics	r1, r0
 8007726:	4689      	mov	r9, r1
 8007728:	4491      	add	r9, r2
 800772a:	4684      	mov	ip, r0
 800772c:	4648      	mov	r0, r9
 800772e:	6841      	ldr	r1, [r0, #4]
 8007730:	4660      	mov	r0, ip
 8007732:	4201      	tst	r1, r0
 8007734:	d064      	beq.n	8007800 <_realloc_r+0x140>
 8007736:	2100      	movs	r1, #0
 8007738:	468c      	mov	ip, r1
 800773a:	2200      	movs	r2, #0
 800773c:	07d9      	lsls	r1, r3, #31
 800773e:	d500      	bpl.n	8007742 <_realloc_r+0x82>
 8007740:	e07d      	b.n	800783e <_realloc_r+0x17e>
 8007742:	6833      	ldr	r3, [r6, #0]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	469a      	mov	sl, r3
 8007748:	4651      	mov	r1, sl
 800774a:	6848      	ldr	r0, [r1, #4]
 800774c:	2303      	movs	r3, #3
 800774e:	4398      	bics	r0, r3
 8007750:	1c03      	adds	r3, r0, #0
 8007752:	2a00      	cmp	r2, #0
 8007754:	d100      	bne.n	8007758 <_realloc_r+0x98>
 8007756:	e099      	b.n	800788c <_realloc_r+0x1cc>
 8007758:	9802      	ldr	r0, [sp, #8]
 800775a:	4443      	add	r3, r8
 800775c:	4282      	cmp	r2, r0
 800775e:	d100      	bne.n	8007762 <_realloc_r+0xa2>
 8007760:	e102      	b.n	8007968 <_realloc_r+0x2a8>
 8007762:	4699      	mov	r9, r3
 8007764:	9302      	str	r3, [sp, #8]
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	44e1      	add	r9, ip
 800776a:	4599      	cmp	r9, r3
 800776c:	da00      	bge.n	8007770 <_realloc_r+0xb0>
 800776e:	e08f      	b.n	8007890 <_realloc_r+0x1d0>
 8007770:	6893      	ldr	r3, [r2, #8]
 8007772:	68d1      	ldr	r1, [r2, #12]
 8007774:	60d9      	str	r1, [r3, #12]
 8007776:	608b      	str	r3, [r1, #8]
 8007778:	4650      	mov	r0, sl
 800777a:	68c2      	ldr	r2, [r0, #12]
 800777c:	6883      	ldr	r3, [r0, #8]
 800777e:	60da      	str	r2, [r3, #12]
 8007780:	6093      	str	r3, [r2, #8]
 8007782:	4642      	mov	r2, r8
 8007784:	4656      	mov	r6, sl
 8007786:	3a04      	subs	r2, #4
 8007788:	3608      	adds	r6, #8
 800778a:	2a24      	cmp	r2, #36	; 0x24
 800778c:	d900      	bls.n	8007790 <_realloc_r+0xd0>
 800778e:	e136      	b.n	80079fe <_realloc_r+0x33e>
 8007790:	1c33      	adds	r3, r6, #0
 8007792:	2a13      	cmp	r2, #19
 8007794:	d909      	bls.n	80077aa <_realloc_r+0xea>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	6081      	str	r1, [r0, #8]
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	60c3      	str	r3, [r0, #12]
 800779e:	2a1b      	cmp	r2, #27
 80077a0:	d900      	bls.n	80077a4 <_realloc_r+0xe4>
 80077a2:	e135      	b.n	8007a10 <_realloc_r+0x350>
 80077a4:	4653      	mov	r3, sl
 80077a6:	3310      	adds	r3, #16
 80077a8:	3408      	adds	r4, #8
 80077aa:	6820      	ldr	r0, [r4, #0]
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	6861      	ldr	r1, [r4, #4]
 80077b0:	6059      	str	r1, [r3, #4]
 80077b2:	68a4      	ldr	r4, [r4, #8]
 80077b4:	609c      	str	r4, [r3, #8]
 80077b6:	4652      	mov	r2, sl
 80077b8:	1c34      	adds	r4, r6, #0
 80077ba:	6853      	ldr	r3, [r2, #4]
 80077bc:	4656      	mov	r6, sl
 80077be:	e005      	b.n	80077cc <_realloc_r+0x10c>
 80077c0:	2207      	movs	r2, #7
 80077c2:	4395      	bics	r5, r2
 80077c4:	9501      	str	r5, [sp, #4]
 80077c6:	0fea      	lsrs	r2, r5, #31
 80077c8:	e798      	b.n	80076fc <_realloc_r+0x3c>
 80077ca:	46c1      	mov	r9, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	1b4a      	subs	r2, r1, r5
 80077d0:	2a0f      	cmp	r2, #15
 80077d2:	d823      	bhi.n	800781c <_realloc_r+0x15c>
 80077d4:	2201      	movs	r2, #1
 80077d6:	4013      	ands	r3, r2
 80077d8:	430b      	orrs	r3, r1
 80077da:	6073      	str	r3, [r6, #4]
 80077dc:	444e      	add	r6, r9
 80077de:	6871      	ldr	r1, [r6, #4]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	6072      	str	r2, [r6, #4]
 80077e4:	1c38      	adds	r0, r7, #0
 80077e6:	f7fe fc93 	bl	8006110 <__malloc_unlock>
 80077ea:	46a1      	mov	r9, r4
 80077ec:	4648      	mov	r0, r9
 80077ee:	b005      	add	sp, #20
 80077f0:	bc3c      	pop	{r2, r3, r4, r5}
 80077f2:	4690      	mov	r8, r2
 80077f4:	4699      	mov	r9, r3
 80077f6:	46a2      	mov	sl, r4
 80077f8:	46ab      	mov	fp, r5
 80077fa:	bcf0      	pop	{r4, r5, r6, r7}
 80077fc:	bc02      	pop	{r1}
 80077fe:	4708      	bx	r1
 8007800:	2003      	movs	r0, #3
 8007802:	4651      	mov	r1, sl
 8007804:	4381      	bics	r1, r0
 8007806:	4689      	mov	r9, r1
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	44c1      	add	r9, r8
 800780c:	468c      	mov	ip, r1
 800780e:	4581      	cmp	r9, r0
 8007810:	db94      	blt.n	800773c <_realloc_r+0x7c>
 8007812:	68d1      	ldr	r1, [r2, #12]
 8007814:	6892      	ldr	r2, [r2, #8]
 8007816:	60d1      	str	r1, [r2, #12]
 8007818:	608a      	str	r2, [r1, #8]
 800781a:	e7d7      	b.n	80077cc <_realloc_r+0x10c>
 800781c:	2001      	movs	r0, #1
 800781e:	4003      	ands	r3, r0
 8007820:	1971      	adds	r1, r6, r5
 8007822:	431d      	orrs	r5, r3
 8007824:	1c13      	adds	r3, r2, #0
 8007826:	4303      	orrs	r3, r0
 8007828:	6075      	str	r5, [r6, #4]
 800782a:	604b      	str	r3, [r1, #4]
 800782c:	188a      	adds	r2, r1, r2
 800782e:	6853      	ldr	r3, [r2, #4]
 8007830:	4318      	orrs	r0, r3
 8007832:	6050      	str	r0, [r2, #4]
 8007834:	3108      	adds	r1, #8
 8007836:	1c38      	adds	r0, r7, #0
 8007838:	f7fe f838 	bl	80058ac <_free_r>
 800783c:	e7d2      	b.n	80077e4 <_realloc_r+0x124>
 800783e:	1c38      	adds	r0, r7, #0
 8007840:	4659      	mov	r1, fp
 8007842:	f7fe f94d 	bl	8005ae0 <_malloc_r>
 8007846:	4681      	mov	r9, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d01b      	beq.n	8007884 <_realloc_r+0x1c4>
 800784c:	6873      	ldr	r3, [r6, #4]
 800784e:	1c02      	adds	r2, r0, #0
 8007850:	2101      	movs	r1, #1
 8007852:	1c18      	adds	r0, r3, #0
 8007854:	4388      	bics	r0, r1
 8007856:	3a08      	subs	r2, #8
 8007858:	1831      	adds	r1, r6, r0
 800785a:	428a      	cmp	r2, r1
 800785c:	d100      	bne.n	8007860 <_realloc_r+0x1a0>
 800785e:	e0c8      	b.n	80079f2 <_realloc_r+0x332>
 8007860:	4642      	mov	r2, r8
 8007862:	3a04      	subs	r2, #4
 8007864:	2a24      	cmp	r2, #36	; 0x24
 8007866:	d87a      	bhi.n	800795e <_realloc_r+0x29e>
 8007868:	2a13      	cmp	r2, #19
 800786a:	d851      	bhi.n	8007910 <_realloc_r+0x250>
 800786c:	464b      	mov	r3, r9
 800786e:	1c22      	adds	r2, r4, #0
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	6019      	str	r1, [r3, #0]
 8007874:	6850      	ldr	r0, [r2, #4]
 8007876:	6058      	str	r0, [r3, #4]
 8007878:	6892      	ldr	r2, [r2, #8]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	1c38      	adds	r0, r7, #0
 800787e:	1c21      	adds	r1, r4, #0
 8007880:	f7fe f814 	bl	80058ac <_free_r>
 8007884:	1c38      	adds	r0, r7, #0
 8007886:	f7fe fc43 	bl	8006110 <__malloc_unlock>
 800788a:	e7af      	b.n	80077ec <_realloc_r+0x12c>
 800788c:	4443      	add	r3, r8
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	dbd2      	blt.n	800783e <_realloc_r+0x17e>
 8007898:	4650      	mov	r0, sl
 800789a:	68c2      	ldr	r2, [r0, #12]
 800789c:	6883      	ldr	r3, [r0, #8]
 800789e:	60da      	str	r2, [r3, #12]
 80078a0:	6093      	str	r3, [r2, #8]
 80078a2:	4642      	mov	r2, r8
 80078a4:	4656      	mov	r6, sl
 80078a6:	3a04      	subs	r2, #4
 80078a8:	3608      	adds	r6, #8
 80078aa:	2a24      	cmp	r2, #36	; 0x24
 80078ac:	d83c      	bhi.n	8007928 <_realloc_r+0x268>
 80078ae:	1c33      	adds	r3, r6, #0
 80078b0:	2a13      	cmp	r2, #19
 80078b2:	d909      	bls.n	80078c8 <_realloc_r+0x208>
 80078b4:	6821      	ldr	r1, [r4, #0]
 80078b6:	6081      	str	r1, [r0, #8]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	60c3      	str	r3, [r0, #12]
 80078bc:	2a1b      	cmp	r2, #27
 80078be:	d900      	bls.n	80078c2 <_realloc_r+0x202>
 80078c0:	e0ba      	b.n	8007a38 <_realloc_r+0x378>
 80078c2:	4653      	mov	r3, sl
 80078c4:	3310      	adds	r3, #16
 80078c6:	3408      	adds	r4, #8
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	6018      	str	r0, [r3, #0]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	6059      	str	r1, [r3, #4]
 80078d0:	68a4      	ldr	r4, [r4, #8]
 80078d2:	9802      	ldr	r0, [sp, #8]
 80078d4:	609c      	str	r4, [r3, #8]
 80078d6:	4652      	mov	r2, sl
 80078d8:	1c34      	adds	r4, r6, #0
 80078da:	6853      	ldr	r3, [r2, #4]
 80078dc:	4681      	mov	r9, r0
 80078de:	4656      	mov	r6, sl
 80078e0:	e774      	b.n	80077cc <_realloc_r+0x10c>
 80078e2:	1c11      	adds	r1, r2, #0
 80078e4:	f7fe f8fc 	bl	8005ae0 <_malloc_r>
 80078e8:	4681      	mov	r9, r0
 80078ea:	e77f      	b.n	80077ec <_realloc_r+0x12c>
 80078ec:	230c      	movs	r3, #12
 80078ee:	2200      	movs	r2, #0
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	4691      	mov	r9, r2
 80078f4:	e77a      	b.n	80077ec <_realloc_r+0x12c>
 80078f6:	9902      	ldr	r1, [sp, #8]
 80078f8:	6849      	ldr	r1, [r1, #4]
 80078fa:	2203      	movs	r2, #3
 80078fc:	4391      	bics	r1, r2
 80078fe:	1c0a      	adds	r2, r1, #0
 8007900:	468c      	mov	ip, r1
 8007902:	2110      	movs	r1, #16
 8007904:	4442      	add	r2, r8
 8007906:	1949      	adds	r1, r1, r5
 8007908:	428a      	cmp	r2, r1
 800790a:	da18      	bge.n	800793e <_realloc_r+0x27e>
 800790c:	9a02      	ldr	r2, [sp, #8]
 800790e:	e715      	b.n	800773c <_realloc_r+0x7c>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	4648      	mov	r0, r9
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	6861      	ldr	r1, [r4, #4]
 8007918:	6041      	str	r1, [r0, #4]
 800791a:	2a1b      	cmp	r2, #27
 800791c:	d85d      	bhi.n	80079da <_realloc_r+0x31a>
 800791e:	464b      	mov	r3, r9
 8007920:	1c22      	adds	r2, r4, #0
 8007922:	3308      	adds	r3, #8
 8007924:	3208      	adds	r2, #8
 8007926:	e7a3      	b.n	8007870 <_realloc_r+0x1b0>
 8007928:	1c21      	adds	r1, r4, #0
 800792a:	1c30      	adds	r0, r6, #0
 800792c:	f7ff fe2c 	bl	8007588 <memmove>
 8007930:	9a02      	ldr	r2, [sp, #8]
 8007932:	4651      	mov	r1, sl
 8007934:	1c34      	adds	r4, r6, #0
 8007936:	684b      	ldr	r3, [r1, #4]
 8007938:	4691      	mov	r9, r2
 800793a:	4656      	mov	r6, sl
 800793c:	e746      	b.n	80077cc <_realloc_r+0x10c>
 800793e:	4b48      	ldr	r3, [pc, #288]	; (8007a60 <_realloc_r+0x3a0>)
 8007940:	1971      	adds	r1, r6, r5
 8007942:	6099      	str	r1, [r3, #8]
 8007944:	1b52      	subs	r2, r2, r5
 8007946:	2301      	movs	r3, #1
 8007948:	431a      	orrs	r2, r3
 800794a:	604a      	str	r2, [r1, #4]
 800794c:	6870      	ldr	r0, [r6, #4]
 800794e:	4003      	ands	r3, r0
 8007950:	431d      	orrs	r5, r3
 8007952:	6075      	str	r5, [r6, #4]
 8007954:	1c38      	adds	r0, r7, #0
 8007956:	f7fe fbdb 	bl	8006110 <__malloc_unlock>
 800795a:	46a1      	mov	r9, r4
 800795c:	e746      	b.n	80077ec <_realloc_r+0x12c>
 800795e:	4648      	mov	r0, r9
 8007960:	1c21      	adds	r1, r4, #0
 8007962:	f7ff fe11 	bl	8007588 <memmove>
 8007966:	e789      	b.n	800787c <_realloc_r+0x1bc>
 8007968:	9302      	str	r3, [sp, #8]
 800796a:	4463      	add	r3, ip
 800796c:	1c1a      	adds	r2, r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	1c2b      	adds	r3, r5, #0
 8007972:	3310      	adds	r3, #16
 8007974:	429a      	cmp	r2, r3
 8007976:	db8b      	blt.n	8007890 <_realloc_r+0x1d0>
 8007978:	4653      	mov	r3, sl
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2008      	movs	r0, #8
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	6093      	str	r3, [r2, #8]
 8007984:	4642      	mov	r2, r8
 8007986:	4681      	mov	r9, r0
 8007988:	3a04      	subs	r2, #4
 800798a:	44d1      	add	r9, sl
 800798c:	2a24      	cmp	r2, #36	; 0x24
 800798e:	d872      	bhi.n	8007a76 <_realloc_r+0x3b6>
 8007990:	464b      	mov	r3, r9
 8007992:	2a13      	cmp	r2, #19
 8007994:	d908      	bls.n	80079a8 <_realloc_r+0x2e8>
 8007996:	6821      	ldr	r1, [r4, #0]
 8007998:	4653      	mov	r3, sl
 800799a:	6099      	str	r1, [r3, #8]
 800799c:	6860      	ldr	r0, [r4, #4]
 800799e:	60d8      	str	r0, [r3, #12]
 80079a0:	2a1b      	cmp	r2, #27
 80079a2:	d86d      	bhi.n	8007a80 <_realloc_r+0x3c0>
 80079a4:	3310      	adds	r3, #16
 80079a6:	3408      	adds	r4, #8
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	6018      	str	r0, [r3, #0]
 80079ac:	6861      	ldr	r1, [r4, #4]
 80079ae:	6059      	str	r1, [r3, #4]
 80079b0:	68a4      	ldr	r4, [r4, #8]
 80079b2:	609c      	str	r4, [r3, #8]
 80079b4:	4653      	mov	r3, sl
 80079b6:	195a      	adds	r2, r3, r5
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	1b59      	subs	r1, r3, r5
 80079bc:	2301      	movs	r3, #1
 80079be:	4319      	orrs	r1, r3
 80079c0:	4827      	ldr	r0, [pc, #156]	; (8007a60 <_realloc_r+0x3a0>)
 80079c2:	6051      	str	r1, [r2, #4]
 80079c4:	6082      	str	r2, [r0, #8]
 80079c6:	4650      	mov	r0, sl
 80079c8:	6840      	ldr	r0, [r0, #4]
 80079ca:	4003      	ands	r3, r0
 80079cc:	431d      	orrs	r5, r3
 80079ce:	4651      	mov	r1, sl
 80079d0:	604d      	str	r5, [r1, #4]
 80079d2:	1c38      	adds	r0, r7, #0
 80079d4:	f7fe fb9c 	bl	8006110 <__malloc_unlock>
 80079d8:	e708      	b.n	80077ec <_realloc_r+0x12c>
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	4648      	mov	r0, r9
 80079de:	6083      	str	r3, [r0, #8]
 80079e0:	68e1      	ldr	r1, [r4, #12]
 80079e2:	60c1      	str	r1, [r0, #12]
 80079e4:	2a24      	cmp	r2, #36	; 0x24
 80079e6:	d01e      	beq.n	8007a26 <_realloc_r+0x366>
 80079e8:	464b      	mov	r3, r9
 80079ea:	1c22      	adds	r2, r4, #0
 80079ec:	3310      	adds	r3, #16
 80079ee:	3210      	adds	r2, #16
 80079f0:	e73e      	b.n	8007870 <_realloc_r+0x1b0>
 80079f2:	6852      	ldr	r2, [r2, #4]
 80079f4:	2103      	movs	r1, #3
 80079f6:	438a      	bics	r2, r1
 80079f8:	4691      	mov	r9, r2
 80079fa:	44c1      	add	r9, r8
 80079fc:	e6e6      	b.n	80077cc <_realloc_r+0x10c>
 80079fe:	1c30      	adds	r0, r6, #0
 8007a00:	1c21      	adds	r1, r4, #0
 8007a02:	f7ff fdc1 	bl	8007588 <memmove>
 8007a06:	4650      	mov	r0, sl
 8007a08:	1c34      	adds	r4, r6, #0
 8007a0a:	6843      	ldr	r3, [r0, #4]
 8007a0c:	4656      	mov	r6, sl
 8007a0e:	e6dd      	b.n	80077cc <_realloc_r+0x10c>
 8007a10:	68a0      	ldr	r0, [r4, #8]
 8007a12:	4651      	mov	r1, sl
 8007a14:	6108      	str	r0, [r1, #16]
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	614b      	str	r3, [r1, #20]
 8007a1a:	2a24      	cmp	r2, #36	; 0x24
 8007a1c:	d017      	beq.n	8007a4e <_realloc_r+0x38e>
 8007a1e:	4653      	mov	r3, sl
 8007a20:	3318      	adds	r3, #24
 8007a22:	3410      	adds	r4, #16
 8007a24:	e6c1      	b.n	80077aa <_realloc_r+0xea>
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	6102      	str	r2, [r0, #16]
 8007a2a:	6960      	ldr	r0, [r4, #20]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	1c22      	adds	r2, r4, #0
 8007a30:	6158      	str	r0, [r3, #20]
 8007a32:	3218      	adds	r2, #24
 8007a34:	3318      	adds	r3, #24
 8007a36:	e71b      	b.n	8007870 <_realloc_r+0x1b0>
 8007a38:	68a0      	ldr	r0, [r4, #8]
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	6108      	str	r0, [r1, #16]
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	614b      	str	r3, [r1, #20]
 8007a42:	2a24      	cmp	r2, #36	; 0x24
 8007a44:	d00e      	beq.n	8007a64 <_realloc_r+0x3a4>
 8007a46:	4653      	mov	r3, sl
 8007a48:	3318      	adds	r3, #24
 8007a4a:	3410      	adds	r4, #16
 8007a4c:	e73c      	b.n	80078c8 <_realloc_r+0x208>
 8007a4e:	6920      	ldr	r0, [r4, #16]
 8007a50:	4651      	mov	r1, sl
 8007a52:	6188      	str	r0, [r1, #24]
 8007a54:	6962      	ldr	r2, [r4, #20]
 8007a56:	4653      	mov	r3, sl
 8007a58:	61ca      	str	r2, [r1, #28]
 8007a5a:	3320      	adds	r3, #32
 8007a5c:	3418      	adds	r4, #24
 8007a5e:	e6a4      	b.n	80077aa <_realloc_r+0xea>
 8007a60:	2000054c 	.word	0x2000054c
 8007a64:	6920      	ldr	r0, [r4, #16]
 8007a66:	4651      	mov	r1, sl
 8007a68:	6188      	str	r0, [r1, #24]
 8007a6a:	6962      	ldr	r2, [r4, #20]
 8007a6c:	4653      	mov	r3, sl
 8007a6e:	61ca      	str	r2, [r1, #28]
 8007a70:	3320      	adds	r3, #32
 8007a72:	3418      	adds	r4, #24
 8007a74:	e728      	b.n	80078c8 <_realloc_r+0x208>
 8007a76:	4648      	mov	r0, r9
 8007a78:	1c21      	adds	r1, r4, #0
 8007a7a:	f7ff fd85 	bl	8007588 <memmove>
 8007a7e:	e799      	b.n	80079b4 <_realloc_r+0x2f4>
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	4653      	mov	r3, sl
 8007a84:	6119      	str	r1, [r3, #16]
 8007a86:	68e0      	ldr	r0, [r4, #12]
 8007a88:	6158      	str	r0, [r3, #20]
 8007a8a:	2a24      	cmp	r2, #36	; 0x24
 8007a8c:	d002      	beq.n	8007a94 <_realloc_r+0x3d4>
 8007a8e:	3318      	adds	r3, #24
 8007a90:	3410      	adds	r4, #16
 8007a92:	e789      	b.n	80079a8 <_realloc_r+0x2e8>
 8007a94:	6921      	ldr	r1, [r4, #16]
 8007a96:	6199      	str	r1, [r3, #24]
 8007a98:	6963      	ldr	r3, [r4, #20]
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	61d3      	str	r3, [r2, #28]
 8007a9e:	4653      	mov	r3, sl
 8007aa0:	3320      	adds	r3, #32
 8007aa2:	3418      	adds	r4, #24
 8007aa4:	e780      	b.n	80079a8 <_realloc_r+0x2e8>
 8007aa6:	46c0      	nop			; (mov r8, r8)

08007aa8 <__aeabi_uidiv>:
 8007aa8:	e2512001 	subs	r2, r1, #1
 8007aac:	012fff1e 	bxeq	lr
 8007ab0:	3a000036 	bcc	8007b90 <__aeabi_uidiv+0xe8>
 8007ab4:	e1500001 	cmp	r0, r1
 8007ab8:	9a000022 	bls	8007b48 <__aeabi_uidiv+0xa0>
 8007abc:	e1110002 	tst	r1, r2
 8007ac0:	0a000023 	beq	8007b54 <__aeabi_uidiv+0xac>
 8007ac4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8007ac8:	01a01181 	lsleq	r1, r1, #3
 8007acc:	03a03008 	moveq	r3, #8
 8007ad0:	13a03001 	movne	r3, #1
 8007ad4:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8007ad8:	31510000 	cmpcc	r1, r0
 8007adc:	31a01201 	lslcc	r1, r1, #4
 8007ae0:	31a03203 	lslcc	r3, r3, #4
 8007ae4:	3afffffa 	bcc	8007ad4 <__aeabi_uidiv+0x2c>
 8007ae8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8007aec:	31510000 	cmpcc	r1, r0
 8007af0:	31a01081 	lslcc	r1, r1, #1
 8007af4:	31a03083 	lslcc	r3, r3, #1
 8007af8:	3afffffa 	bcc	8007ae8 <__aeabi_uidiv+0x40>
 8007afc:	e3a02000 	mov	r2, #0
 8007b00:	e1500001 	cmp	r0, r1
 8007b04:	20400001 	subcs	r0, r0, r1
 8007b08:	21822003 	orrcs	r2, r2, r3
 8007b0c:	e15000a1 	cmp	r0, r1, lsr #1
 8007b10:	204000a1 	subcs	r0, r0, r1, lsr #1
 8007b14:	218220a3 	orrcs	r2, r2, r3, lsr #1
 8007b18:	e1500121 	cmp	r0, r1, lsr #2
 8007b1c:	20400121 	subcs	r0, r0, r1, lsr #2
 8007b20:	21822123 	orrcs	r2, r2, r3, lsr #2
 8007b24:	e15001a1 	cmp	r0, r1, lsr #3
 8007b28:	204001a1 	subcs	r0, r0, r1, lsr #3
 8007b2c:	218221a3 	orrcs	r2, r2, r3, lsr #3
 8007b30:	e3500000 	cmp	r0, #0
 8007b34:	11b03223 	lsrsne	r3, r3, #4
 8007b38:	11a01221 	lsrne	r1, r1, #4
 8007b3c:	1affffef 	bne	8007b00 <__aeabi_uidiv+0x58>
 8007b40:	e1a00002 	mov	r0, r2
 8007b44:	e12fff1e 	bx	lr
 8007b48:	03a00001 	moveq	r0, #1
 8007b4c:	13a00000 	movne	r0, #0
 8007b50:	e12fff1e 	bx	lr
 8007b54:	e3510801 	cmp	r1, #65536	; 0x10000
 8007b58:	21a01821 	lsrcs	r1, r1, #16
 8007b5c:	23a02010 	movcs	r2, #16
 8007b60:	33a02000 	movcc	r2, #0
 8007b64:	e3510c01 	cmp	r1, #256	; 0x100
 8007b68:	21a01421 	lsrcs	r1, r1, #8
 8007b6c:	22822008 	addcs	r2, r2, #8
 8007b70:	e3510010 	cmp	r1, #16
 8007b74:	21a01221 	lsrcs	r1, r1, #4
 8007b78:	22822004 	addcs	r2, r2, #4
 8007b7c:	e3510004 	cmp	r1, #4
 8007b80:	82822003 	addhi	r2, r2, #3
 8007b84:	908220a1 	addls	r2, r2, r1, lsr #1
 8007b88:	e1a00230 	lsr	r0, r0, r2
 8007b8c:	e12fff1e 	bx	lr
 8007b90:	e12fff1f 	bx	pc
 8007b94:	e1a00000 	nop			; (mov r0, r0)
 8007b98:	e3500000 	cmp	r0, #0
 8007b9c:	13e00000 	mvnne	r0, #0
 8007ba0:	ea0003c8 	b	8008ac8 <____aeabi_idiv0_from_arm>

08007ba4 <__aeabi_uidivmod>:
 8007ba4:	e3510000 	cmp	r1, #0
 8007ba8:	0afffff8 	beq	8007b90 <__aeabi_uidiv+0xe8>
 8007bac:	e92d4003 	push	{r0, r1, lr}
 8007bb0:	ebffffbc 	bl	8007aa8 <__aeabi_uidiv>
 8007bb4:	e8bd4006 	pop	{r1, r2, lr}
 8007bb8:	e0030092 	mul	r3, r2, r0
 8007bbc:	e0411003 	sub	r1, r1, r3
 8007bc0:	e12fff1e 	bx	lr

08007bc4 <__aeabi_idiv>:
 8007bc4:	e3510000 	cmp	r1, #0
 8007bc8:	0a000043 	beq	8007cdc <.divsi3_skip_div0_test+0x110>

08007bcc <.divsi3_skip_div0_test>:
 8007bcc:	e020c001 	eor	ip, r0, r1
 8007bd0:	42611000 	rsbmi	r1, r1, #0
 8007bd4:	e2512001 	subs	r2, r1, #1
 8007bd8:	0a000027 	beq	8007c7c <.divsi3_skip_div0_test+0xb0>
 8007bdc:	e1b03000 	movs	r3, r0
 8007be0:	42603000 	rsbmi	r3, r0, #0
 8007be4:	e1530001 	cmp	r3, r1
 8007be8:	9a000026 	bls	8007c88 <.divsi3_skip_div0_test+0xbc>
 8007bec:	e1110002 	tst	r1, r2
 8007bf0:	0a000028 	beq	8007c98 <.divsi3_skip_div0_test+0xcc>
 8007bf4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8007bf8:	01a01181 	lsleq	r1, r1, #3
 8007bfc:	03a02008 	moveq	r2, #8
 8007c00:	13a02001 	movne	r2, #1
 8007c04:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8007c08:	31510003 	cmpcc	r1, r3
 8007c0c:	31a01201 	lslcc	r1, r1, #4
 8007c10:	31a02202 	lslcc	r2, r2, #4
 8007c14:	3afffffa 	bcc	8007c04 <.divsi3_skip_div0_test+0x38>
 8007c18:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8007c1c:	31510003 	cmpcc	r1, r3
 8007c20:	31a01081 	lslcc	r1, r1, #1
 8007c24:	31a02082 	lslcc	r2, r2, #1
 8007c28:	3afffffa 	bcc	8007c18 <.divsi3_skip_div0_test+0x4c>
 8007c2c:	e3a00000 	mov	r0, #0
 8007c30:	e1530001 	cmp	r3, r1
 8007c34:	20433001 	subcs	r3, r3, r1
 8007c38:	21800002 	orrcs	r0, r0, r2
 8007c3c:	e15300a1 	cmp	r3, r1, lsr #1
 8007c40:	204330a1 	subcs	r3, r3, r1, lsr #1
 8007c44:	218000a2 	orrcs	r0, r0, r2, lsr #1
 8007c48:	e1530121 	cmp	r3, r1, lsr #2
 8007c4c:	20433121 	subcs	r3, r3, r1, lsr #2
 8007c50:	21800122 	orrcs	r0, r0, r2, lsr #2
 8007c54:	e15301a1 	cmp	r3, r1, lsr #3
 8007c58:	204331a1 	subcs	r3, r3, r1, lsr #3
 8007c5c:	218001a2 	orrcs	r0, r0, r2, lsr #3
 8007c60:	e3530000 	cmp	r3, #0
 8007c64:	11b02222 	lsrsne	r2, r2, #4
 8007c68:	11a01221 	lsrne	r1, r1, #4
 8007c6c:	1affffef 	bne	8007c30 <.divsi3_skip_div0_test+0x64>
 8007c70:	e35c0000 	cmp	ip, #0
 8007c74:	42600000 	rsbmi	r0, r0, #0
 8007c78:	e12fff1e 	bx	lr
 8007c7c:	e13c0000 	teq	ip, r0
 8007c80:	42600000 	rsbmi	r0, r0, #0
 8007c84:	e12fff1e 	bx	lr
 8007c88:	33a00000 	movcc	r0, #0
 8007c8c:	01a00fcc 	asreq	r0, ip, #31
 8007c90:	03800001 	orreq	r0, r0, #1
 8007c94:	e12fff1e 	bx	lr
 8007c98:	e3510801 	cmp	r1, #65536	; 0x10000
 8007c9c:	21a01821 	lsrcs	r1, r1, #16
 8007ca0:	23a02010 	movcs	r2, #16
 8007ca4:	33a02000 	movcc	r2, #0
 8007ca8:	e3510c01 	cmp	r1, #256	; 0x100
 8007cac:	21a01421 	lsrcs	r1, r1, #8
 8007cb0:	22822008 	addcs	r2, r2, #8
 8007cb4:	e3510010 	cmp	r1, #16
 8007cb8:	21a01221 	lsrcs	r1, r1, #4
 8007cbc:	22822004 	addcs	r2, r2, #4
 8007cc0:	e3510004 	cmp	r1, #4
 8007cc4:	82822003 	addhi	r2, r2, #3
 8007cc8:	908220a1 	addls	r2, r2, r1, lsr #1
 8007ccc:	e35c0000 	cmp	ip, #0
 8007cd0:	e1a00233 	lsr	r0, r3, r2
 8007cd4:	42600000 	rsbmi	r0, r0, #0
 8007cd8:	e12fff1e 	bx	lr
 8007cdc:	e12fff1f 	bx	pc
 8007ce0:	e1a00000 	nop			; (mov r0, r0)
 8007ce4:	e3500000 	cmp	r0, #0
 8007ce8:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 8007cec:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 8007cf0:	ea000374 	b	8008ac8 <____aeabi_idiv0_from_arm>

08007cf4 <__aeabi_idivmod>:
 8007cf4:	e3510000 	cmp	r1, #0
 8007cf8:	0afffff7 	beq	8007cdc <.divsi3_skip_div0_test+0x110>
 8007cfc:	e92d4003 	push	{r0, r1, lr}
 8007d00:	ebffffb1 	bl	8007bcc <.divsi3_skip_div0_test>
 8007d04:	e8bd4006 	pop	{r1, r2, lr}
 8007d08:	e0030092 	mul	r3, r2, r0
 8007d0c:	e0411003 	sub	r1, r1, r3
 8007d10:	e12fff1e 	bx	lr

08007d14 <__aeabi_idiv0>:
 8007d14:	4770      	bx	lr
 8007d16:	46c0      	nop			; (mov r8, r8)

08007d18 <__aeabi_drsub>:
 8007d18:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 8007d1c:	ea000000 	b	8007d24 <__adddf3>

08007d20 <__aeabi_dsub>:
 8007d20:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

08007d24 <__adddf3>:
 8007d24:	e92d4030 	push	{r4, r5, lr}
 8007d28:	e1a04081 	lsl	r4, r1, #1
 8007d2c:	e1a05083 	lsl	r5, r3, #1
 8007d30:	e1340005 	teq	r4, r5
 8007d34:	01300002 	teqeq	r0, r2
 8007d38:	1194c000 	orrsne	ip, r4, r0
 8007d3c:	1195c002 	orrsne	ip, r5, r2
 8007d40:	11f0cac4 	mvnsne	ip, r4, asr #21
 8007d44:	11f0cac5 	mvnsne	ip, r5, asr #21
 8007d48:	0a00008c 	beq	8007f80 <__adddf3+0x25c>
 8007d4c:	e1a04aa4 	lsr	r4, r4, #21
 8007d50:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 8007d54:	b2655000 	rsblt	r5, r5, #0
 8007d58:	da000006 	ble	8007d78 <__adddf3+0x54>
 8007d5c:	e0844005 	add	r4, r4, r5
 8007d60:	e0202002 	eor	r2, r0, r2
 8007d64:	e0213003 	eor	r3, r1, r3
 8007d68:	e0220000 	eor	r0, r2, r0
 8007d6c:	e0231001 	eor	r1, r3, r1
 8007d70:	e0202002 	eor	r2, r0, r2
 8007d74:	e0213003 	eor	r3, r1, r3
 8007d78:	e3550036 	cmp	r5, #54	; 0x36
 8007d7c:	88bd4030 	pophi	{r4, r5, lr}
 8007d80:	812fff1e 	bxhi	lr
 8007d84:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8007d88:	e1a01601 	lsl	r1, r1, #12
 8007d8c:	e3a0c601 	mov	ip, #1048576	; 0x100000
 8007d90:	e18c1621 	orr	r1, ip, r1, lsr #12
 8007d94:	0a000001 	beq	8007da0 <__adddf3+0x7c>
 8007d98:	e2700000 	rsbs	r0, r0, #0
 8007d9c:	e2e11000 	rsc	r1, r1, #0
 8007da0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 8007da4:	e1a03603 	lsl	r3, r3, #12
 8007da8:	e18c3623 	orr	r3, ip, r3, lsr #12
 8007dac:	0a000001 	beq	8007db8 <__adddf3+0x94>
 8007db0:	e2722000 	rsbs	r2, r2, #0
 8007db4:	e2e33000 	rsc	r3, r3, #0
 8007db8:	e1340005 	teq	r4, r5
 8007dbc:	0a000069 	beq	8007f68 <__adddf3+0x244>
 8007dc0:	e2444001 	sub	r4, r4, #1
 8007dc4:	e275e020 	rsbs	lr, r5, #32
 8007dc8:	ba000005 	blt	8007de4 <__adddf3+0xc0>
 8007dcc:	e1a0ce12 	lsl	ip, r2, lr
 8007dd0:	e0900532 	adds	r0, r0, r2, lsr r5
 8007dd4:	e2a11000 	adc	r1, r1, #0
 8007dd8:	e0900e13 	adds	r0, r0, r3, lsl lr
 8007ddc:	e0b11553 	adcs	r1, r1, r3, asr r5
 8007de0:	ea000006 	b	8007e00 <__adddf3+0xdc>
 8007de4:	e2455020 	sub	r5, r5, #32
 8007de8:	e28ee020 	add	lr, lr, #32
 8007dec:	e3520001 	cmp	r2, #1
 8007df0:	e1a0ce13 	lsl	ip, r3, lr
 8007df4:	238cc002 	orrcs	ip, ip, #2
 8007df8:	e0900553 	adds	r0, r0, r3, asr r5
 8007dfc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 8007e00:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8007e04:	5a000002 	bpl	8007e14 <__adddf3+0xf0>
 8007e08:	e27cc000 	rsbs	ip, ip, #0
 8007e0c:	e2f00000 	rscs	r0, r0, #0
 8007e10:	e2e11000 	rsc	r1, r1, #0
 8007e14:	e3510601 	cmp	r1, #1048576	; 0x100000
 8007e18:	3a00000f 	bcc	8007e5c <__adddf3+0x138>
 8007e1c:	e3510602 	cmp	r1, #2097152	; 0x200000
 8007e20:	3a000006 	bcc	8007e40 <__adddf3+0x11c>
 8007e24:	e1b010a1 	lsrs	r1, r1, #1
 8007e28:	e1b00060 	rrxs	r0, r0
 8007e2c:	e1a0c06c 	rrx	ip, ip
 8007e30:	e2844001 	add	r4, r4, #1
 8007e34:	e1a02a84 	lsl	r2, r4, #21
 8007e38:	e3720501 	cmn	r2, #4194304	; 0x400000
 8007e3c:	2a00006b 	bcs	8007ff0 <__adddf3+0x2cc>
 8007e40:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 8007e44:	01b0c0a0 	lsrseq	ip, r0, #1
 8007e48:	e2b00000 	adcs	r0, r0, #0
 8007e4c:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8007e50:	e1811005 	orr	r1, r1, r5
 8007e54:	e8bd4030 	pop	{r4, r5, lr}
 8007e58:	e12fff1e 	bx	lr
 8007e5c:	e1b0c08c 	lsls	ip, ip, #1
 8007e60:	e0b00000 	adcs	r0, r0, r0
 8007e64:	e0a11001 	adc	r1, r1, r1
 8007e68:	e3110601 	tst	r1, #1048576	; 0x100000
 8007e6c:	e2444001 	sub	r4, r4, #1
 8007e70:	1afffff2 	bne	8007e40 <__adddf3+0x11c>
 8007e74:	e3310000 	teq	r1, #0
 8007e78:	13a03014 	movne	r3, #20
 8007e7c:	03a03034 	moveq	r3, #52	; 0x34
 8007e80:	01a01000 	moveq	r1, r0
 8007e84:	03a00000 	moveq	r0, #0
 8007e88:	e1a02001 	mov	r2, r1
 8007e8c:	e3520801 	cmp	r2, #65536	; 0x10000
 8007e90:	21a02822 	lsrcs	r2, r2, #16
 8007e94:	22433010 	subcs	r3, r3, #16
 8007e98:	e3520c01 	cmp	r2, #256	; 0x100
 8007e9c:	21a02422 	lsrcs	r2, r2, #8
 8007ea0:	22433008 	subcs	r3, r3, #8
 8007ea4:	e3520010 	cmp	r2, #16
 8007ea8:	21a02222 	lsrcs	r2, r2, #4
 8007eac:	22433004 	subcs	r3, r3, #4
 8007eb0:	e3520004 	cmp	r2, #4
 8007eb4:	22433002 	subcs	r3, r3, #2
 8007eb8:	304330a2 	subcc	r3, r3, r2, lsr #1
 8007ebc:	e04331a2 	sub	r3, r3, r2, lsr #3
 8007ec0:	e2532020 	subs	r2, r3, #32
 8007ec4:	aa000007 	bge	8007ee8 <__adddf3+0x1c4>
 8007ec8:	e292200c 	adds	r2, r2, #12
 8007ecc:	da000004 	ble	8007ee4 <__adddf3+0x1c0>
 8007ed0:	e282c014 	add	ip, r2, #20
 8007ed4:	e262200c 	rsb	r2, r2, #12
 8007ed8:	e1a00c11 	lsl	r0, r1, ip
 8007edc:	e1a01231 	lsr	r1, r1, r2
 8007ee0:	ea000004 	b	8007ef8 <__adddf3+0x1d4>
 8007ee4:	e2822014 	add	r2, r2, #20
 8007ee8:	d262c020 	rsble	ip, r2, #32
 8007eec:	e1a01211 	lsl	r1, r1, r2
 8007ef0:	d1811c30 	orrle	r1, r1, r0, lsr ip
 8007ef4:	d1a00210 	lslle	r0, r0, r2
 8007ef8:	e0544003 	subs	r4, r4, r3
 8007efc:	a0811a04 	addge	r1, r1, r4, lsl #20
 8007f00:	a1811005 	orrge	r1, r1, r5
 8007f04:	a8bd4030 	popge	{r4, r5, lr}
 8007f08:	a12fff1e 	bxge	lr
 8007f0c:	e1e04004 	mvn	r4, r4
 8007f10:	e254401f 	subs	r4, r4, #31
 8007f14:	aa00000f 	bge	8007f58 <__adddf3+0x234>
 8007f18:	e294400c 	adds	r4, r4, #12
 8007f1c:	ca000006 	bgt	8007f3c <__adddf3+0x218>
 8007f20:	e2844014 	add	r4, r4, #20
 8007f24:	e2642020 	rsb	r2, r4, #32
 8007f28:	e1a00430 	lsr	r0, r0, r4
 8007f2c:	e1800211 	orr	r0, r0, r1, lsl r2
 8007f30:	e1851431 	orr	r1, r5, r1, lsr r4
 8007f34:	e8bd4030 	pop	{r4, r5, lr}
 8007f38:	e12fff1e 	bx	lr
 8007f3c:	e264400c 	rsb	r4, r4, #12
 8007f40:	e2642020 	rsb	r2, r4, #32
 8007f44:	e1a00230 	lsr	r0, r0, r2
 8007f48:	e1800411 	orr	r0, r0, r1, lsl r4
 8007f4c:	e1a01005 	mov	r1, r5
 8007f50:	e8bd4030 	pop	{r4, r5, lr}
 8007f54:	e12fff1e 	bx	lr
 8007f58:	e1a00431 	lsr	r0, r1, r4
 8007f5c:	e1a01005 	mov	r1, r5
 8007f60:	e8bd4030 	pop	{r4, r5, lr}
 8007f64:	e12fff1e 	bx	lr
 8007f68:	e3340000 	teq	r4, #0
 8007f6c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 8007f70:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 8007f74:	02844001 	addeq	r4, r4, #1
 8007f78:	12455001 	subne	r5, r5, #1
 8007f7c:	eaffff8f 	b	8007dc0 <__adddf3+0x9c>
 8007f80:	e1f0cac4 	mvns	ip, r4, asr #21
 8007f84:	11f0cac5 	mvnsne	ip, r5, asr #21
 8007f88:	0a00001d 	beq	8008004 <__adddf3+0x2e0>
 8007f8c:	e1340005 	teq	r4, r5
 8007f90:	01300002 	teqeq	r0, r2
 8007f94:	0a000004 	beq	8007fac <__adddf3+0x288>
 8007f98:	e194c000 	orrs	ip, r4, r0
 8007f9c:	01a01003 	moveq	r1, r3
 8007fa0:	01a00002 	moveq	r0, r2
 8007fa4:	e8bd4030 	pop	{r4, r5, lr}
 8007fa8:	e12fff1e 	bx	lr
 8007fac:	e1310003 	teq	r1, r3
 8007fb0:	13a01000 	movne	r1, #0
 8007fb4:	13a00000 	movne	r0, #0
 8007fb8:	18bd4030 	popne	{r4, r5, lr}
 8007fbc:	112fff1e 	bxne	lr
 8007fc0:	e1b0caa4 	lsrs	ip, r4, #21
 8007fc4:	1a000004 	bne	8007fdc <__adddf3+0x2b8>
 8007fc8:	e1b00080 	lsls	r0, r0, #1
 8007fcc:	e0b11001 	adcs	r1, r1, r1
 8007fd0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 8007fd4:	e8bd4030 	pop	{r4, r5, lr}
 8007fd8:	e12fff1e 	bx	lr
 8007fdc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 8007fe0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 8007fe4:	38bd4030 	popcc	{r4, r5, lr}
 8007fe8:	312fff1e 	bxcc	lr
 8007fec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8007ff0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 8007ff4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 8007ff8:	e3a00000 	mov	r0, #0
 8007ffc:	e8bd4030 	pop	{r4, r5, lr}
 8008000:	e12fff1e 	bx	lr
 8008004:	e1f0cac4 	mvns	ip, r4, asr #21
 8008008:	11a01003 	movne	r1, r3
 800800c:	11a00002 	movne	r0, r2
 8008010:	01f0cac5 	mvnseq	ip, r5, asr #21
 8008014:	11a03001 	movne	r3, r1
 8008018:	11a02000 	movne	r2, r0
 800801c:	e1904601 	orrs	r4, r0, r1, lsl #12
 8008020:	01925603 	orrseq	r5, r2, r3, lsl #12
 8008024:	01310003 	teqeq	r1, r3
 8008028:	13811702 	orrne	r1, r1, #524288	; 0x80000
 800802c:	e8bd4030 	pop	{r4, r5, lr}
 8008030:	e12fff1e 	bx	lr

08008034 <__aeabi_ui2d>:
 8008034:	e3300000 	teq	r0, #0
 8008038:	03a01000 	moveq	r1, #0
 800803c:	012fff1e 	bxeq	lr
 8008040:	e92d4030 	push	{r4, r5, lr}
 8008044:	e3a04b01 	mov	r4, #1024	; 0x400
 8008048:	e2844032 	add	r4, r4, #50	; 0x32
 800804c:	e3a05000 	mov	r5, #0
 8008050:	e3a01000 	mov	r1, #0
 8008054:	eaffff86 	b	8007e74 <__adddf3+0x150>

08008058 <__aeabi_i2d>:
 8008058:	e3300000 	teq	r0, #0
 800805c:	03a01000 	moveq	r1, #0
 8008060:	012fff1e 	bxeq	lr
 8008064:	e92d4030 	push	{r4, r5, lr}
 8008068:	e3a04b01 	mov	r4, #1024	; 0x400
 800806c:	e2844032 	add	r4, r4, #50	; 0x32
 8008070:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 8008074:	42600000 	rsbmi	r0, r0, #0
 8008078:	e3a01000 	mov	r1, #0
 800807c:	eaffff7c 	b	8007e74 <__adddf3+0x150>

08008080 <__aeabi_f2d>:
 8008080:	e1b02080 	lsls	r2, r0, #1
 8008084:	e1a011c2 	asr	r1, r2, #3
 8008088:	e1a01061 	rrx	r1, r1
 800808c:	e1a00e02 	lsl	r0, r2, #28
 8008090:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 8008094:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 8008098:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 800809c:	112fff1e 	bxne	lr
 80080a0:	e3320000 	teq	r2, #0
 80080a4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 80080a8:	012fff1e 	bxeq	lr
 80080ac:	e92d4030 	push	{r4, r5, lr}
 80080b0:	e3a04d0e 	mov	r4, #896	; 0x380
 80080b4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 80080b8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 80080bc:	eaffff6c 	b	8007e74 <__adddf3+0x150>

080080c0 <__aeabi_ul2d>:
 80080c0:	e1902001 	orrs	r2, r0, r1
 80080c4:	012fff1e 	bxeq	lr
 80080c8:	e92d4030 	push	{r4, r5, lr}
 80080cc:	e3a05000 	mov	r5, #0
 80080d0:	ea000006 	b	80080f0 <__aeabi_l2d+0x1c>

080080d4 <__aeabi_l2d>:
 80080d4:	e1902001 	orrs	r2, r0, r1
 80080d8:	012fff1e 	bxeq	lr
 80080dc:	e92d4030 	push	{r4, r5, lr}
 80080e0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 80080e4:	5a000001 	bpl	80080f0 <__aeabi_l2d+0x1c>
 80080e8:	e2700000 	rsbs	r0, r0, #0
 80080ec:	e2e11000 	rsc	r1, r1, #0
 80080f0:	e3a04b01 	mov	r4, #1024	; 0x400
 80080f4:	e2844032 	add	r4, r4, #50	; 0x32
 80080f8:	e1b0cb21 	lsrs	ip, r1, #22
 80080fc:	0affff44 	beq	8007e14 <__adddf3+0xf0>
 8008100:	e3a02003 	mov	r2, #3
 8008104:	e1b0c1ac 	lsrs	ip, ip, #3
 8008108:	12822003 	addne	r2, r2, #3
 800810c:	e1b0c1ac 	lsrs	ip, ip, #3
 8008110:	12822003 	addne	r2, r2, #3
 8008114:	e08221ac 	add	r2, r2, ip, lsr #3
 8008118:	e2623020 	rsb	r3, r2, #32
 800811c:	e1a0c310 	lsl	ip, r0, r3
 8008120:	e1a00230 	lsr	r0, r0, r2
 8008124:	e1800311 	orr	r0, r0, r1, lsl r3
 8008128:	e1a01231 	lsr	r1, r1, r2
 800812c:	e0844002 	add	r4, r4, r2
 8008130:	eaffff37 	b	8007e14 <__adddf3+0xf0>

08008134 <__aeabi_dmul>:
 8008134:	e92d4070 	push	{r4, r5, r6, lr}
 8008138:	e3a0c0ff 	mov	ip, #255	; 0xff
 800813c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 8008140:	e01c4a21 	ands	r4, ip, r1, lsr #20
 8008144:	101c5a23 	andsne	r5, ip, r3, lsr #20
 8008148:	1134000c 	teqne	r4, ip
 800814c:	1135000c 	teqne	r5, ip
 8008150:	0b000075 	bleq	800832c <__aeabi_dmul+0x1f8>
 8008154:	e0844005 	add	r4, r4, r5
 8008158:	e0216003 	eor	r6, r1, r3
 800815c:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 8008160:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 8008164:	e1905601 	orrs	r5, r0, r1, lsl #12
 8008168:	11925603 	orrsne	r5, r2, r3, lsl #12
 800816c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8008170:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 8008174:	0a00001d 	beq	80081f0 <__aeabi_dmul+0xbc>
 8008178:	e08ec290 	umull	ip, lr, r0, r2
 800817c:	e3a05000 	mov	r5, #0
 8008180:	e0a5e291 	umlal	lr, r5, r1, r2
 8008184:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 8008188:	e0a5e390 	umlal	lr, r5, r0, r3
 800818c:	e3a06000 	mov	r6, #0
 8008190:	e0a65391 	umlal	r5, r6, r1, r3
 8008194:	e33c0000 	teq	ip, #0
 8008198:	138ee001 	orrne	lr, lr, #1
 800819c:	e24440ff 	sub	r4, r4, #255	; 0xff
 80081a0:	e3560c02 	cmp	r6, #512	; 0x200
 80081a4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 80081a8:	2a000002 	bcs	80081b8 <__aeabi_dmul+0x84>
 80081ac:	e1b0e08e 	lsls	lr, lr, #1
 80081b0:	e0b55005 	adcs	r5, r5, r5
 80081b4:	e0a66006 	adc	r6, r6, r6
 80081b8:	e1821586 	orr	r1, r2, r6, lsl #11
 80081bc:	e1811aa5 	orr	r1, r1, r5, lsr #21
 80081c0:	e1a00585 	lsl	r0, r5, #11
 80081c4:	e1800aae 	orr	r0, r0, lr, lsr #21
 80081c8:	e1a0e58e 	lsl	lr, lr, #11
 80081cc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 80081d0:	835c0c07 	cmphi	ip, #1792	; 0x700
 80081d4:	8a000011 	bhi	8008220 <__aeabi_dmul+0xec>
 80081d8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 80081dc:	01b0e0a0 	lsrseq	lr, r0, #1
 80081e0:	e2b00000 	adcs	r0, r0, #0
 80081e4:	e0a11a04 	adc	r1, r1, r4, lsl #20
 80081e8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80081ec:	e12fff1e 	bx	lr
 80081f0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 80081f4:	e1861001 	orr	r1, r6, r1
 80081f8:	e1800002 	orr	r0, r0, r2
 80081fc:	e0211003 	eor	r1, r1, r3
 8008200:	e05440ac 	subs	r4, r4, ip, lsr #1
 8008204:	c074500c 	rsbsgt	r5, r4, ip
 8008208:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 800820c:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8008210:	c12fff1e 	bxgt	lr
 8008214:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8008218:	e3a0e000 	mov	lr, #0
 800821c:	e2544001 	subs	r4, r4, #1
 8008220:	ca00005d 	bgt	800839c <__aeabi_dmul+0x268>
 8008224:	e3740036 	cmn	r4, #54	; 0x36
 8008228:	d3a00000 	movle	r0, #0
 800822c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 8008230:	d8bd4070 	pople	{r4, r5, r6, lr}
 8008234:	d12fff1e 	bxle	lr
 8008238:	e2644000 	rsb	r4, r4, #0
 800823c:	e2544020 	subs	r4, r4, #32
 8008240:	aa00001a 	bge	80082b0 <__aeabi_dmul+0x17c>
 8008244:	e294400c 	adds	r4, r4, #12
 8008248:	ca00000c 	bgt	8008280 <__aeabi_dmul+0x14c>
 800824c:	e2844014 	add	r4, r4, #20
 8008250:	e2645020 	rsb	r5, r4, #32
 8008254:	e1a03510 	lsl	r3, r0, r5
 8008258:	e1a00430 	lsr	r0, r0, r4
 800825c:	e1800511 	orr	r0, r0, r1, lsl r5
 8008260:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 8008264:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 8008268:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800826c:	e0a21431 	adc	r1, r2, r1, lsr r4
 8008270:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8008274:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 8008278:	e8bd4070 	pop	{r4, r5, r6, lr}
 800827c:	e12fff1e 	bx	lr
 8008280:	e264400c 	rsb	r4, r4, #12
 8008284:	e2645020 	rsb	r5, r4, #32
 8008288:	e1a03410 	lsl	r3, r0, r4
 800828c:	e1a00530 	lsr	r0, r0, r5
 8008290:	e1800411 	orr	r0, r0, r1, lsl r4
 8008294:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8008298:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800829c:	e2a11000 	adc	r1, r1, #0
 80082a0:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80082a4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80082a8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80082ac:	e12fff1e 	bx	lr
 80082b0:	e2645020 	rsb	r5, r4, #32
 80082b4:	e18ee510 	orr	lr, lr, r0, lsl r5
 80082b8:	e1a03430 	lsr	r3, r0, r4
 80082bc:	e1833511 	orr	r3, r3, r1, lsl r5
 80082c0:	e1a00431 	lsr	r0, r1, r4
 80082c4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80082c8:	e1c00431 	bic	r0, r0, r1, lsr r4
 80082cc:	e0800fa3 	add	r0, r0, r3, lsr #31
 80082d0:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80082d4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80082d8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80082dc:	e12fff1e 	bx	lr
 80082e0:	e3340000 	teq	r4, #0
 80082e4:	1a000008 	bne	800830c <__aeabi_dmul+0x1d8>
 80082e8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 80082ec:	e1b00080 	lsls	r0, r0, #1
 80082f0:	e0a11001 	adc	r1, r1, r1
 80082f4:	e3110601 	tst	r1, #1048576	; 0x100000
 80082f8:	02444001 	subeq	r4, r4, #1
 80082fc:	0afffffa 	beq	80082ec <__aeabi_dmul+0x1b8>
 8008300:	e1811006 	orr	r1, r1, r6
 8008304:	e3350000 	teq	r5, #0
 8008308:	112fff1e 	bxne	lr
 800830c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 8008310:	e1b02082 	lsls	r2, r2, #1
 8008314:	e0a33003 	adc	r3, r3, r3
 8008318:	e3130601 	tst	r3, #1048576	; 0x100000
 800831c:	02455001 	subeq	r5, r5, #1
 8008320:	0afffffa 	beq	8008310 <__aeabi_dmul+0x1dc>
 8008324:	e1833006 	orr	r3, r3, r6
 8008328:	e12fff1e 	bx	lr
 800832c:	e134000c 	teq	r4, ip
 8008330:	e00c5a23 	and	r5, ip, r3, lsr #20
 8008334:	1135000c 	teqne	r5, ip
 8008338:	0a000007 	beq	800835c <__aeabi_dmul+0x228>
 800833c:	e1906081 	orrs	r6, r0, r1, lsl #1
 8008340:	11926083 	orrsne	r6, r2, r3, lsl #1
 8008344:	1affffe5 	bne	80082e0 <__aeabi_dmul+0x1ac>
 8008348:	e0211003 	eor	r1, r1, r3
 800834c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8008350:	e3a00000 	mov	r0, #0
 8008354:	e8bd4070 	pop	{r4, r5, r6, lr}
 8008358:	e12fff1e 	bx	lr
 800835c:	e1906081 	orrs	r6, r0, r1, lsl #1
 8008360:	01a00002 	moveq	r0, r2
 8008364:	01a01003 	moveq	r1, r3
 8008368:	11926083 	orrsne	r6, r2, r3, lsl #1
 800836c:	0a000010 	beq	80083b4 <__aeabi_dmul+0x280>
 8008370:	e134000c 	teq	r4, ip
 8008374:	1a000001 	bne	8008380 <__aeabi_dmul+0x24c>
 8008378:	e1906601 	orrs	r6, r0, r1, lsl #12
 800837c:	1a00000c 	bne	80083b4 <__aeabi_dmul+0x280>
 8008380:	e135000c 	teq	r5, ip
 8008384:	1a000003 	bne	8008398 <__aeabi_dmul+0x264>
 8008388:	e1926603 	orrs	r6, r2, r3, lsl #12
 800838c:	11a00002 	movne	r0, r2
 8008390:	11a01003 	movne	r1, r3
 8008394:	1a000006 	bne	80083b4 <__aeabi_dmul+0x280>
 8008398:	e0211003 	eor	r1, r1, r3
 800839c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80083a0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 80083a4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 80083a8:	e3a00000 	mov	r0, #0
 80083ac:	e8bd4070 	pop	{r4, r5, r6, lr}
 80083b0:	e12fff1e 	bx	lr
 80083b4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 80083b8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 80083bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80083c0:	e12fff1e 	bx	lr

080083c4 <__aeabi_ddiv>:
 80083c4:	e92d4070 	push	{r4, r5, r6, lr}
 80083c8:	e3a0c0ff 	mov	ip, #255	; 0xff
 80083cc:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 80083d0:	e01c4a21 	ands	r4, ip, r1, lsr #20
 80083d4:	101c5a23 	andsne	r5, ip, r3, lsr #20
 80083d8:	1134000c 	teqne	r4, ip
 80083dc:	1135000c 	teqne	r5, ip
 80083e0:	0b00005e 	bleq	8008560 <__aeabi_ddiv+0x19c>
 80083e4:	e0444005 	sub	r4, r4, r5
 80083e8:	e021e003 	eor	lr, r1, r3
 80083ec:	e1925603 	orrs	r5, r2, r3, lsl #12
 80083f0:	e1a01601 	lsl	r1, r1, #12
 80083f4:	0a00004c 	beq	800852c <__aeabi_ddiv+0x168>
 80083f8:	e1a03603 	lsl	r3, r3, #12
 80083fc:	e3a05201 	mov	r5, #268435456	; 0x10000000
 8008400:	e1853223 	orr	r3, r5, r3, lsr #4
 8008404:	e1833c22 	orr	r3, r3, r2, lsr #24
 8008408:	e1a02402 	lsl	r2, r2, #8
 800840c:	e1855221 	orr	r5, r5, r1, lsr #4
 8008410:	e1855c20 	orr	r5, r5, r0, lsr #24
 8008414:	e1a06400 	lsl	r6, r0, #8
 8008418:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 800841c:	e1550003 	cmp	r5, r3
 8008420:	01560002 	cmpeq	r6, r2
 8008424:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 8008428:	e2844c03 	add	r4, r4, #768	; 0x300
 800842c:	2a000001 	bcs	8008438 <__aeabi_ddiv+0x74>
 8008430:	e1b030a3 	lsrs	r3, r3, #1
 8008434:	e1a02062 	rrx	r2, r2
 8008438:	e0566002 	subs	r6, r6, r2
 800843c:	e0c55003 	sbc	r5, r5, r3
 8008440:	e1b030a3 	lsrs	r3, r3, #1
 8008444:	e1a02062 	rrx	r2, r2
 8008448:	e3a00601 	mov	r0, #1048576	; 0x100000
 800844c:	e3a0c702 	mov	ip, #524288	; 0x80000
 8008450:	e056e002 	subs	lr, r6, r2
 8008454:	e0d5e003 	sbcs	lr, r5, r3
 8008458:	20466002 	subcs	r6, r6, r2
 800845c:	21a0500e 	movcs	r5, lr
 8008460:	2180000c 	orrcs	r0, r0, ip
 8008464:	e1b030a3 	lsrs	r3, r3, #1
 8008468:	e1a02062 	rrx	r2, r2
 800846c:	e056e002 	subs	lr, r6, r2
 8008470:	e0d5e003 	sbcs	lr, r5, r3
 8008474:	20466002 	subcs	r6, r6, r2
 8008478:	21a0500e 	movcs	r5, lr
 800847c:	218000ac 	orrcs	r0, r0, ip, lsr #1
 8008480:	e1b030a3 	lsrs	r3, r3, #1
 8008484:	e1a02062 	rrx	r2, r2
 8008488:	e056e002 	subs	lr, r6, r2
 800848c:	e0d5e003 	sbcs	lr, r5, r3
 8008490:	20466002 	subcs	r6, r6, r2
 8008494:	21a0500e 	movcs	r5, lr
 8008498:	2180012c 	orrcs	r0, r0, ip, lsr #2
 800849c:	e1b030a3 	lsrs	r3, r3, #1
 80084a0:	e1a02062 	rrx	r2, r2
 80084a4:	e056e002 	subs	lr, r6, r2
 80084a8:	e0d5e003 	sbcs	lr, r5, r3
 80084ac:	20466002 	subcs	r6, r6, r2
 80084b0:	21a0500e 	movcs	r5, lr
 80084b4:	218001ac 	orrcs	r0, r0, ip, lsr #3
 80084b8:	e195e006 	orrs	lr, r5, r6
 80084bc:	0a00000d 	beq	80084f8 <__aeabi_ddiv+0x134>
 80084c0:	e1a05205 	lsl	r5, r5, #4
 80084c4:	e1855e26 	orr	r5, r5, r6, lsr #28
 80084c8:	e1a06206 	lsl	r6, r6, #4
 80084cc:	e1a03183 	lsl	r3, r3, #3
 80084d0:	e1833ea2 	orr	r3, r3, r2, lsr #29
 80084d4:	e1a02182 	lsl	r2, r2, #3
 80084d8:	e1b0c22c 	lsrs	ip, ip, #4
 80084dc:	1affffdb 	bne	8008450 <__aeabi_ddiv+0x8c>
 80084e0:	e3110601 	tst	r1, #1048576	; 0x100000
 80084e4:	1a000006 	bne	8008504 <__aeabi_ddiv+0x140>
 80084e8:	e1811000 	orr	r1, r1, r0
 80084ec:	e3a00000 	mov	r0, #0
 80084f0:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 80084f4:	eaffffd5 	b	8008450 <__aeabi_ddiv+0x8c>
 80084f8:	e3110601 	tst	r1, #1048576	; 0x100000
 80084fc:	01811000 	orreq	r1, r1, r0
 8008500:	03a00000 	moveq	r0, #0
 8008504:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 8008508:	835c0c07 	cmphi	ip, #1792	; 0x700
 800850c:	8affff43 	bhi	8008220 <__aeabi_dmul+0xec>
 8008510:	e055c003 	subs	ip, r5, r3
 8008514:	0056c002 	subseq	ip, r6, r2
 8008518:	01b0c0a0 	lsrseq	ip, r0, #1
 800851c:	e2b00000 	adcs	r0, r0, #0
 8008520:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8008524:	e8bd4070 	pop	{r4, r5, r6, lr}
 8008528:	e12fff1e 	bx	lr
 800852c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 8008530:	e18e1621 	orr	r1, lr, r1, lsr #12
 8008534:	e09440ac 	adds	r4, r4, ip, lsr #1
 8008538:	c074500c 	rsbsgt	r5, r4, ip
 800853c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 8008540:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8008544:	c12fff1e 	bxgt	lr
 8008548:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800854c:	e3a0e000 	mov	lr, #0
 8008550:	e2544001 	subs	r4, r4, #1
 8008554:	eaffff31 	b	8008220 <__aeabi_dmul+0xec>
 8008558:	e185e006 	orr	lr, r5, r6
 800855c:	eaffff2f 	b	8008220 <__aeabi_dmul+0xec>
 8008560:	e00c5a23 	and	r5, ip, r3, lsr #20
 8008564:	e134000c 	teq	r4, ip
 8008568:	0135000c 	teqeq	r5, ip
 800856c:	0affff90 	beq	80083b4 <__aeabi_dmul+0x280>
 8008570:	e134000c 	teq	r4, ip
 8008574:	1a000006 	bne	8008594 <__aeabi_ddiv+0x1d0>
 8008578:	e1904601 	orrs	r4, r0, r1, lsl #12
 800857c:	1affff8c 	bne	80083b4 <__aeabi_dmul+0x280>
 8008580:	e135000c 	teq	r5, ip
 8008584:	1affff83 	bne	8008398 <__aeabi_dmul+0x264>
 8008588:	e1a00002 	mov	r0, r2
 800858c:	e1a01003 	mov	r1, r3
 8008590:	eaffff87 	b	80083b4 <__aeabi_dmul+0x280>
 8008594:	e135000c 	teq	r5, ip
 8008598:	1a000004 	bne	80085b0 <__aeabi_ddiv+0x1ec>
 800859c:	e1925603 	orrs	r5, r2, r3, lsl #12
 80085a0:	0affff68 	beq	8008348 <__aeabi_dmul+0x214>
 80085a4:	e1a00002 	mov	r0, r2
 80085a8:	e1a01003 	mov	r1, r3
 80085ac:	eaffff80 	b	80083b4 <__aeabi_dmul+0x280>
 80085b0:	e1906081 	orrs	r6, r0, r1, lsl #1
 80085b4:	11926083 	orrsne	r6, r2, r3, lsl #1
 80085b8:	1affff48 	bne	80082e0 <__aeabi_dmul+0x1ac>
 80085bc:	e1904081 	orrs	r4, r0, r1, lsl #1
 80085c0:	1affff74 	bne	8008398 <__aeabi_dmul+0x264>
 80085c4:	e1925083 	orrs	r5, r2, r3, lsl #1
 80085c8:	1affff5e 	bne	8008348 <__aeabi_dmul+0x214>
 80085cc:	eaffff78 	b	80083b4 <__aeabi_dmul+0x280>

080085d0 <__gedf2>:
 80085d0:	e3e0c000 	mvn	ip, #0
 80085d4:	ea000002 	b	80085e4 <__cmpdf2+0x4>

080085d8 <__ledf2>:
 80085d8:	e3a0c001 	mov	ip, #1
 80085dc:	ea000000 	b	80085e4 <__cmpdf2+0x4>

080085e0 <__cmpdf2>:
 80085e0:	e3a0c001 	mov	ip, #1
 80085e4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 80085e8:	e1a0c081 	lsl	ip, r1, #1
 80085ec:	e1f0cacc 	mvns	ip, ip, asr #21
 80085f0:	e1a0c083 	lsl	ip, r3, #1
 80085f4:	11f0cacc 	mvnsne	ip, ip, asr #21
 80085f8:	0a00000e 	beq	8008638 <__cmpdf2+0x58>
 80085fc:	e28dd004 	add	sp, sp, #4
 8008600:	e190c081 	orrs	ip, r0, r1, lsl #1
 8008604:	0192c083 	orrseq	ip, r2, r3, lsl #1
 8008608:	11310003 	teqne	r1, r3
 800860c:	01300002 	teqeq	r0, r2
 8008610:	03a00000 	moveq	r0, #0
 8008614:	012fff1e 	bxeq	lr
 8008618:	e3700000 	cmn	r0, #0
 800861c:	e1310003 	teq	r1, r3
 8008620:	51510003 	cmppl	r1, r3
 8008624:	01500002 	cmpeq	r0, r2
 8008628:	21a00fc3 	asrcs	r0, r3, #31
 800862c:	31e00fc3 	mvncc	r0, r3, asr #31
 8008630:	e3800001 	orr	r0, r0, #1
 8008634:	e12fff1e 	bx	lr
 8008638:	e1a0c081 	lsl	ip, r1, #1
 800863c:	e1f0cacc 	mvns	ip, ip, asr #21
 8008640:	1a000001 	bne	800864c <__cmpdf2+0x6c>
 8008644:	e190c601 	orrs	ip, r0, r1, lsl #12
 8008648:	1a000004 	bne	8008660 <__cmpdf2+0x80>
 800864c:	e1a0c083 	lsl	ip, r3, #1
 8008650:	e1f0cacc 	mvns	ip, ip, asr #21
 8008654:	1affffe8 	bne	80085fc <__cmpdf2+0x1c>
 8008658:	e192c603 	orrs	ip, r2, r3, lsl #12
 800865c:	0affffe6 	beq	80085fc <__cmpdf2+0x1c>
 8008660:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 8008664:	e12fff1e 	bx	lr

08008668 <__aeabi_cdrcmple>:
 8008668:	e1a0c000 	mov	ip, r0
 800866c:	e1a00002 	mov	r0, r2
 8008670:	e1a0200c 	mov	r2, ip
 8008674:	e1a0c001 	mov	ip, r1
 8008678:	e1a01003 	mov	r1, r3
 800867c:	e1a0300c 	mov	r3, ip
 8008680:	eaffffff 	b	8008684 <__aeabi_cdcmpeq>

08008684 <__aeabi_cdcmpeq>:
 8008684:	e92d4001 	push	{r0, lr}
 8008688:	ebffffd4 	bl	80085e0 <__cmpdf2>
 800868c:	e3500000 	cmp	r0, #0
 8008690:	43700000 	cmnmi	r0, #0
 8008694:	e8bd4001 	pop	{r0, lr}
 8008698:	e12fff1e 	bx	lr

0800869c <__aeabi_dcmpeq>:
 800869c:	e52de008 	str	lr, [sp, #-8]!
 80086a0:	ebfffff7 	bl	8008684 <__aeabi_cdcmpeq>
 80086a4:	03a00001 	moveq	r0, #1
 80086a8:	13a00000 	movne	r0, #0
 80086ac:	e49de008 	ldr	lr, [sp], #8
 80086b0:	e12fff1e 	bx	lr

080086b4 <__aeabi_dcmplt>:
 80086b4:	e52de008 	str	lr, [sp, #-8]!
 80086b8:	ebfffff1 	bl	8008684 <__aeabi_cdcmpeq>
 80086bc:	33a00001 	movcc	r0, #1
 80086c0:	23a00000 	movcs	r0, #0
 80086c4:	e49de008 	ldr	lr, [sp], #8
 80086c8:	e12fff1e 	bx	lr

080086cc <__aeabi_dcmple>:
 80086cc:	e52de008 	str	lr, [sp, #-8]!
 80086d0:	ebffffeb 	bl	8008684 <__aeabi_cdcmpeq>
 80086d4:	93a00001 	movls	r0, #1
 80086d8:	83a00000 	movhi	r0, #0
 80086dc:	e49de008 	ldr	lr, [sp], #8
 80086e0:	e12fff1e 	bx	lr

080086e4 <__aeabi_dcmpge>:
 80086e4:	e52de008 	str	lr, [sp, #-8]!
 80086e8:	ebffffde 	bl	8008668 <__aeabi_cdrcmple>
 80086ec:	93a00001 	movls	r0, #1
 80086f0:	83a00000 	movhi	r0, #0
 80086f4:	e49de008 	ldr	lr, [sp], #8
 80086f8:	e12fff1e 	bx	lr

080086fc <__aeabi_dcmpgt>:
 80086fc:	e52de008 	str	lr, [sp, #-8]!
 8008700:	ebffffd8 	bl	8008668 <__aeabi_cdrcmple>
 8008704:	33a00001 	movcc	r0, #1
 8008708:	23a00000 	movcs	r0, #0
 800870c:	e49de008 	ldr	lr, [sp], #8
 8008710:	e12fff1e 	bx	lr

08008714 <__aeabi_d2iz>:
 8008714:	e1a02081 	lsl	r2, r1, #1
 8008718:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 800871c:	2a00000c 	bcs	8008754 <__aeabi_d2iz+0x40>
 8008720:	5a000009 	bpl	800874c <__aeabi_d2iz+0x38>
 8008724:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 8008728:	e0532ac2 	subs	r2, r3, r2, asr #21
 800872c:	9a00000a 	bls	800875c <__aeabi_d2iz+0x48>
 8008730:	e1a03581 	lsl	r3, r1, #11
 8008734:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 8008738:	e1833aa0 	orr	r3, r3, r0, lsr #21
 800873c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8008740:	e1a00233 	lsr	r0, r3, r2
 8008744:	12600000 	rsbne	r0, r0, #0
 8008748:	e12fff1e 	bx	lr
 800874c:	e3a00000 	mov	r0, #0
 8008750:	e12fff1e 	bx	lr
 8008754:	e1900601 	orrs	r0, r0, r1, lsl #12
 8008758:	1a000002 	bne	8008768 <__aeabi_d2iz+0x54>
 800875c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 8008760:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 8008764:	e12fff1e 	bx	lr
 8008768:	e3a00000 	mov	r0, #0
 800876c:	e12fff1e 	bx	lr

08008770 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 8008770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008774:	b09b      	sub	sp, #108	; 0x6c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8008776:	f7f7 fe61 	bl	800043c <TIM2_timer_start>

	usart_begin(&Serial3, PB11, PB10, 19200);
 800877a:	f240 220a 	movw	r2, #522	; 0x20a
 800877e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008782:	48ae      	ldr	r0, [pc, #696]	; (8008a3c <main+0x2cc>)
 8008784:	f240 210b 	movw	r1, #523	; 0x20b
 8008788:	f7f8 fad1 	bl	8000d2e <usart_begin>
	usart_print(&Serial3,
 800878c:	48ab      	ldr	r0, [pc, #684]	; (8008a3c <main+0x2cc>)
 800878e:	49ac      	ldr	r1, [pc, #688]	; (8008a40 <main+0x2d0>)
 8008790:	f7f8 fc12 	bl	8000fb8 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial3, "The kingdom of heaven belongs to them!\n");
 8008794:	48a9      	ldr	r0, [pc, #676]	; (8008a3c <main+0x2cc>)
 8008796:	49ab      	ldr	r1, [pc, #684]	; (8008a44 <main+0x2d4>)
 8008798:	f7f8 fc0e 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "How many eyes does Mississipi river have?\n");
 800879c:	48a7      	ldr	r0, [pc, #668]	; (8008a3c <main+0x2cc>)
 800879e:	49aa      	ldr	r1, [pc, #680]	; (8008a48 <main+0x2d8>)
 80087a0:	f7f8 fc0a 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "Quick brown fox jumped over the lazy dog!\n");
 80087a4:	49a9      	ldr	r1, [pc, #676]	; (8008a4c <main+0x2dc>)
 80087a6:	48a5      	ldr	r0, [pc, #660]	; (8008a3c <main+0x2cc>)
 80087a8:	f7f8 fc06 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 80087ac:	48a3      	ldr	r0, [pc, #652]	; (8008a3c <main+0x2cc>)
 80087ae:	f7f8 fc1b 	bl	8000fe8 <usart_flush>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087b2:	f240 400c 	movw	r0, #1036	; 0x40c
 80087b6:	f7f7 fed7 	bl	8000568 <PinPort>
 80087ba:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087bc:	f240 400c 	movw	r0, #1036	; 0x40c
 80087c0:	f7f7 feda 	bl	8000578 <PinBit>
 80087c4:	4605      	mov	r5, r0
 80087c6:	f240 400d 	movw	r0, #1037	; 0x40d
 80087ca:	f7f7 fed5 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087ce:	4328      	orrs	r0, r5
 80087d0:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087d2:	f240 400e 	movw	r0, #1038	; 0x40e
 80087d6:	f7f7 fecf 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087da:	4328      	orrs	r0, r5
 80087dc:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087de:	f240 400f 	movw	r0, #1039	; 0x40f
 80087e2:	f7f7 fec9 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087e6:	2300      	movs	r3, #0
 80087e8:	ea45 0100 	orr.w	r1, r5, r0
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4620      	mov	r0, r4
 80087f0:	9301      	str	r3, [sp, #4]
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 80087f2:	f44f 7403 	mov.w	r4, #524	; 0x20c
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087f6:	b289      	uxth	r1, r1
 80087f8:	2201      	movs	r2, #1
 80087fa:	2302      	movs	r3, #2
 80087fc:	f7f7 ff24 	bl	8000648 <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008800:	f240 230f 	movw	r3, #527	; 0x20f
 8008804:	f240 220e 	movw	r2, #526	; 0x20e
 8008808:	9400      	str	r4, [sp, #0]
 800880a:	4891      	ldr	r0, [pc, #580]	; (8008a50 <main+0x2e0>)
 800880c:	f240 210d 	movw	r1, #525	; 0x20d
 8008810:	f7f8 f920 	bl	8000a54 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008814:	4620      	mov	r0, r4
 8008816:	2101      	movs	r1, #1
 8008818:	f7f7 fede 	bl	80005d8 <digitalWrite>

	usart_print(&Serial3, "Begin I2C1.\n");
 800881c:	498d      	ldr	r1, [pc, #564]	; (8008a54 <main+0x2e4>)
 800881e:	4887      	ldr	r0, [pc, #540]	; (8008a3c <main+0x2cc>)
 8008820:	f7f8 fbca 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 8008824:	4885      	ldr	r0, [pc, #532]	; (8008a3c <main+0x2cc>)
 8008826:	f7f8 fbdf 	bl	8000fe8 <usart_flush>
	i2c_begin(&Wire1, 100000);
 800882a:	498b      	ldr	r1, [pc, #556]	; (8008a58 <main+0x2e8>)
 800882c:	488b      	ldr	r0, [pc, #556]	; (8008a5c <main+0x2ec>)
 800882e:	f7f7 ff67 	bl	8000700 <i2c_begin>
	usart_print(&Serial3, "Init st7032i.\n");
 8008832:	498b      	ldr	r1, [pc, #556]	; (8008a60 <main+0x2f0>)
 8008834:	4881      	ldr	r0, [pc, #516]	; (8008a3c <main+0x2cc>)
 8008836:	f7f8 fbbf 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800883a:	4880      	ldr	r0, [pc, #512]	; (8008a3c <main+0x2cc>)
 800883c:	f7f8 fbd4 	bl	8000fe8 <usart_flush>
	ST7032i_init(&lcd, &Wire1);
 8008840:	4986      	ldr	r1, [pc, #536]	; (8008a5c <main+0x2ec>)
 8008842:	4888      	ldr	r0, [pc, #544]	; (8008a64 <main+0x2f4>)
 8008844:	f7f7 fca0 	bl	8000188 <ST7032i_init>
	ST7032i_begin(&lcd);
 8008848:	4886      	ldr	r0, [pc, #536]	; (8008a64 <main+0x2f4>)
 800884a:	f7f7 fd4b 	bl	80002e4 <ST7032i_begin>
	usart_print(&Serial3, "st7032i has started.\n");
 800884e:	4986      	ldr	r1, [pc, #536]	; (8008a68 <main+0x2f8>)
 8008850:	487a      	ldr	r0, [pc, #488]	; (8008a3c <main+0x2cc>)
 8008852:	f7f8 fbb1 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 8008856:	4879      	ldr	r0, [pc, #484]	; (8008a3c <main+0x2cc>)
 8008858:	f7f8 fbc6 	bl	8000fe8 <usart_flush>
	ST7032i_setContrast(&lcd, 40);
 800885c:	4881      	ldr	r0, [pc, #516]	; (8008a64 <main+0x2f4>)
 800885e:	2128      	movs	r1, #40	; 0x28
 8008860:	f7f7 fcd2 	bl	8000208 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 8008864:	4981      	ldr	r1, [pc, #516]	; (8008a6c <main+0x2fc>)
 8008866:	487f      	ldr	r0, [pc, #508]	; (8008a64 <main+0x2f4>)
 8008868:	f7f7 fcbf 	bl	80001ea <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 800886c:	4880      	ldr	r0, [pc, #512]	; (8008a70 <main+0x300>)
 800886e:	f7f8 fdef 	bl	8001450 <GPIO_ReadOutputData>
 8008872:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008874:	f240 400d 	movw	r0, #1037	; 0x40d
 8008878:	f7f7 fe7e 	bl	8000578 <PinBit>
 800887c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8008880:	ea40 0104 	orr.w	r1, r0, r4
 8008884:	b289      	uxth	r1, r1
 8008886:	487a      	ldr	r0, [pc, #488]	; (8008a70 <main+0x300>)
 8008888:	f7f7 ff38 	bl	80006fc <GPIOWrite>
	delay_ms(intval);
 800888c:	2028      	movs	r0, #40	; 0x28
 800888e:	f7f7 fe2f 	bl	80004f0 <delay_ms>
	tnow = millis() / 1000;
 8008892:	f7f7 fe27 	bl	80004e4 <millis>
 8008896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800889a:	fbb0 f4f3 	udiv	r4, r0, r3
	while (tnow == millis() / 1000)
 800889e:	461d      	mov	r5, r3
 80088a0:	f7f7 fe20 	bl	80004e4 <millis>
 80088a4:	fbb0 f0f5 	udiv	r0, r0, r5
 80088a8:	4284      	cmp	r4, r0
 80088aa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80088ae:	d0f7      	beq.n	80088a0 <main+0x130>
		;
	tnow = millis() / 1000;
 80088b0:	f7f7 fe18 	bl	80004e4 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 80088b4:	46b9      	mov	r9, r7
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 80088b6:	fbb0 f6f7 	udiv	r6, r0, r7
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;

		sprintf(tmp, "%04ld", millis());
 80088ba:	ad03      	add	r5, sp, #12
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 80088bc:	486c      	ldr	r0, [pc, #432]	; (8008a70 <main+0x300>)
 80088be:	f7f8 fdc7 	bl	8001450 <GPIO_ReadOutputData>
 80088c2:	4604      	mov	r4, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80088c4:	f240 400d 	movw	r0, #1037	; 0x40d
 80088c8:	f7f7 fe56 	bl	8000578 <PinBit>
 80088cc:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80088d0:	b2a4      	uxth	r4, r4
 80088d2:	ea44 0100 	orr.w	r1, r4, r0
 80088d6:	b289      	uxth	r1, r1
 80088d8:	4865      	ldr	r0, [pc, #404]	; (8008a70 <main+0x300>)
 80088da:	f7f7 ff0f 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 80088de:	2028      	movs	r0, #40	; 0x28
 80088e0:	f7f7 fe06 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 80088e4:	f240 400e 	movw	r0, #1038	; 0x40e
 80088e8:	f7f7 fe46 	bl	8000578 <PinBit>
 80088ec:	ea44 0100 	orr.w	r1, r4, r0
 80088f0:	b289      	uxth	r1, r1
 80088f2:	485f      	ldr	r0, [pc, #380]	; (8008a70 <main+0x300>)
 80088f4:	f7f7 ff02 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 80088f8:	2028      	movs	r0, #40	; 0x28
 80088fa:	f7f7 fdf9 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 80088fe:	f240 400f 	movw	r0, #1039	; 0x40f
 8008902:	f7f7 fe39 	bl	8000578 <PinBit>
 8008906:	ea44 0100 	orr.w	r1, r4, r0
 800890a:	b289      	uxth	r1, r1
 800890c:	4858      	ldr	r0, [pc, #352]	; (8008a70 <main+0x300>)
 800890e:	f7f7 fef5 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 8008912:	2028      	movs	r0, #40	; 0x28
 8008914:	f7f7 fdec 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8008918:	f240 400c 	movw	r0, #1036	; 0x40c
 800891c:	f7f7 fe2c 	bl	8000578 <PinBit>
 8008920:	ea44 0100 	orr.w	r1, r4, r0
 8008924:	b289      	uxth	r1, r1
 8008926:	4852      	ldr	r0, [pc, #328]	; (8008a70 <main+0x300>)
 8008928:	f7f7 fee8 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800892c:	2028      	movs	r0, #40	; 0x28
 800892e:	f7f7 fddf 	bl	80004f0 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 8008932:	233c      	movs	r3, #60	; 0x3c
 8008934:	fbb6 f2f3 	udiv	r2, r6, r3
 8008938:	fb03 6312 	mls	r3, r3, r2, r6
 800893c:	220f      	movs	r2, #15
 800893e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008942:	2b02      	cmp	r3, #2
 8008944:	d00a      	beq.n	800895c <main+0x1ec>
 8008946:	2b03      	cmp	r3, #3
 8008948:	d002      	beq.n	8008950 <main+0x1e0>
 800894a:	2b01      	cmp	r3, #1
 800894c:	d112      	bne.n	8008974 <main+0x204>
 800894e:	e00b      	b.n	8008968 <main+0x1f8>
		case 3:
			bits |= PinBit(PD12);
 8008950:	f240 400c 	movw	r0, #1036	; 0x40c
 8008954:	f7f7 fe10 	bl	8000578 <PinBit>
 8008958:	4320      	orrs	r0, r4
 800895a:	b284      	uxth	r4, r0
		case 2:
			bits |= PinBit(PD15);
 800895c:	f240 400f 	movw	r0, #1039	; 0x40f
 8008960:	f7f7 fe0a 	bl	8000578 <PinBit>
 8008964:	4320      	orrs	r0, r4
 8008966:	b284      	uxth	r4, r0
		case 1:
			bits |= PinBit(PD14);
 8008968:	f240 400e 	movw	r0, #1038	; 0x40e
 800896c:	f7f7 fe04 	bl	8000578 <PinBit>
 8008970:	4320      	orrs	r0, r4
 8008972:	b284      	uxth	r4, r0
		case 0:
		default:
			bits |= PinBit(PD13);
 8008974:	f240 400d 	movw	r0, #1037	; 0x40d
 8008978:	f7f7 fdfe 	bl	8000578 <PinBit>
 800897c:	ea40 0104 	orr.w	r1, r0, r4
			break;
		}
		GPIOWrite(GPIOD, bits);
 8008980:	b289      	uxth	r1, r1
 8008982:	483b      	ldr	r0, [pc, #236]	; (8008a70 <main+0x300>)
 8008984:	f7f7 feba 	bl	80006fc <GPIOWrite>

		while (tnow == millis() / 1000);
 8008988:	f7f7 fdac 	bl	80004e4 <millis>
 800898c:	fbb0 f0f7 	udiv	r0, r0, r7
 8008990:	4286      	cmp	r6, r0
 8008992:	d0f9      	beq.n	8008988 <main+0x218>
		tnow = millis() / 1000;
 8008994:	f7f7 fda6 	bl	80004e4 <millis>
 8008998:	fbb0 f6f9 	udiv	r6, r0, r9

		sprintf(tmp, "%04ld", millis());
 800899c:	f7f7 fda2 	bl	80004e4 <millis>
 80089a0:	4934      	ldr	r1, [pc, #208]	; (8008a74 <main+0x304>)
 80089a2:	4602      	mov	r2, r0
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7fa fcc7 	bl	8003338 <sprintf>
		usart_print(&Serial3, tmp);
 80089aa:	4824      	ldr	r0, [pc, #144]	; (8008a3c <main+0x2cc>)
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7f8 fb03 	bl	8000fb8 <usart_print>
		usart_print(&Serial3, "\n");
 80089b2:	4822      	ldr	r0, [pc, #136]	; (8008a3c <main+0x2cc>)
 80089b4:	4930      	ldr	r1, [pc, #192]	; (8008a78 <main+0x308>)
 80089b6:	f7f8 faff 	bl	8000fb8 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 80089ba:	2201      	movs	r2, #1
 80089bc:	4829      	ldr	r0, [pc, #164]	; (8008a64 <main+0x2f4>)
 80089be:	2100      	movs	r1, #0
 80089c0:	f7f7 fc5f 	bl	8000282 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 80089c4:	4629      	mov	r1, r5
 80089c6:	4827      	ldr	r0, [pc, #156]	; (8008a64 <main+0x2f4>)
 80089c8:	f7f7 fc0f 	bl	80001ea <ST7032i_print>

		digitalWrite(PB12, LOW);
 80089cc:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80089d0:	2100      	movs	r1, #0
 80089d2:	f7f7 fe01 	bl	80005d8 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 80089d6:	481e      	ldr	r0, [pc, #120]	; (8008a50 <main+0x2e0>)
 80089d8:	4629      	mov	r1, r5
 80089da:	2208      	movs	r2, #8
 80089dc:	f7f8 f8f0 	bl	8000bc0 <spi_transfer>
		digitalWrite(PB12, HIGH);
 80089e0:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80089e4:	2101      	movs	r1, #1
 80089e6:	f7f7 fdf7 	bl	80005d8 <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 80089ea:	4814      	ldr	r0, [pc, #80]	; (8008a3c <main+0x2cc>)
 80089ec:	f7f8 fb18 	bl	8001020 <usart_available>
 80089f0:	b930      	cbnz	r0, 8008a00 <main+0x290>
 80089f2:	e763      	b.n	80088bc <main+0x14c>
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
 80089f4:	4811      	ldr	r0, [pc, #68]	; (8008a3c <main+0x2cc>)
 80089f6:	f7f8 faed 	bl	8000fd4 <usart_read>
 80089fa:	5528      	strb	r0, [r5, r4]
 80089fc:	3401      	adds	r4, #1
 80089fe:	e000      	b.n	8008a02 <main+0x292>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 8008a00:	2400      	movs	r4, #0
			while (usart_available(&Serial3) > 0 && i < 92) {
 8008a02:	480e      	ldr	r0, [pc, #56]	; (8008a3c <main+0x2cc>)
 8008a04:	fa1f f884 	uxth.w	r8, r4
 8008a08:	f7f8 fb0a 	bl	8001020 <usart_available>
 8008a0c:	b110      	cbz	r0, 8008a14 <main+0x2a4>
 8008a0e:	2c5c      	cmp	r4, #92	; 0x5c
 8008a10:	d1f0      	bne.n	80089f4 <main+0x284>
 8008a12:	46a0      	mov	r8, r4
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 8008a14:	aa1a      	add	r2, sp, #104	; 0x68
 8008a16:	eb02 0308 	add.w	r3, r2, r8
			usart_print(&Serial3, "> ");
 8008a1a:	4808      	ldr	r0, [pc, #32]	; (8008a3c <main+0x2cc>)
 8008a1c:	4917      	ldr	r1, [pc, #92]	; (8008a7c <main+0x30c>)
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f803 2c5c 	strb.w	r2, [r3, #-92]
			usart_print(&Serial3, "> ");
 8008a24:	f7f8 fac8 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, tmp);
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4804      	ldr	r0, [pc, #16]	; (8008a3c <main+0x2cc>)
 8008a2c:	f7f8 fac4 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, "\n");
 8008a30:	4802      	ldr	r0, [pc, #8]	; (8008a3c <main+0x2cc>)
 8008a32:	4911      	ldr	r1, [pc, #68]	; (8008a78 <main+0x308>)
 8008a34:	f7f8 fac0 	bl	8000fb8 <usart_print>
 8008a38:	e740      	b.n	80088bc <main+0x14c>
 8008a3a:	bf00      	nop
 8008a3c:	20001018 	.word	0x20001018
 8008a40:	08008f14 	.word	0x08008f14
 8008a44:	08008f4a 	.word	0x08008f4a
 8008a48:	08008f72 	.word	0x08008f72
 8008a4c:	08008f9d 	.word	0x08008f9d
 8008a50:	40003800 	.word	0x40003800
 8008a54:	08008fc8 	.word	0x08008fc8
 8008a58:	000186a0 	.word	0x000186a0
 8008a5c:	200009ac 	.word	0x200009ac
 8008a60:	08008fd5 	.word	0x08008fd5
 8008a64:	2000167c 	.word	0x2000167c
 8008a68:	08008fe4 	.word	0x08008fe4
 8008a6c:	08008ffa 	.word	0x08008ffa
 8008a70:	40020c00 	.word	0x40020c00
 8008a74:	08009004 	.word	0x08009004
 8008a78:	08008f48 	.word	0x08008f48
 8008a7c:	0800900a 	.word	0x0800900a

08008a80 <Reset_Handler>:
 8008a80:	2100      	movs	r1, #0
 8008a82:	e003      	b.n	8008a8c <LoopCopyDataInit>

08008a84 <CopyDataInit>:
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <LoopFillZerobss+0x10>)
 8008a86:	585b      	ldr	r3, [r3, r1]
 8008a88:	5043      	str	r3, [r0, r1]
 8008a8a:	3104      	adds	r1, #4

08008a8c <LoopCopyDataInit>:
 8008a8c:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <LoopFillZerobss+0x14>)
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <LoopFillZerobss+0x18>)
 8008a90:	1842      	adds	r2, r0, r1
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d3f6      	bcc.n	8008a84 <CopyDataInit>
 8008a96:	4a09      	ldr	r2, [pc, #36]	; (8008abc <LoopFillZerobss+0x1c>)
 8008a98:	e002      	b.n	8008aa0 <LoopFillZerobss>

08008a9a <FillZerobss>:
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f842 3b04 	str.w	r3, [r2], #4

08008aa0 <LoopFillZerobss>:
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <LoopFillZerobss+0x20>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d3f9      	bcc.n	8008a9a <FillZerobss>
 8008aa6:	f7fa faef 	bl	8003088 <SystemInit>
 8008aaa:	f7ff fe61 	bl	8008770 <main>
 8008aae:	4770      	bx	lr
 8008ab0:	08009090 	.word	0x08009090
 8008ab4:	20000000 	.word	0x20000000
 8008ab8:	2000095c 	.word	0x2000095c
 8008abc:	2000095c 	.word	0x2000095c
 8008ac0:	20001690 	.word	0x20001690

08008ac4 <ADC_IRQHandler>:
 8008ac4:	e7fe      	b.n	8008ac4 <ADC_IRQHandler>
	...

08008ac8 <____aeabi_idiv0_from_arm>:
 8008ac8:	e51ff004 	ldr	pc, [pc, #-4]	; 8008acc <____aeabi_idiv0_from_arm+0x4>
 8008acc:	08007d15 	.word	0x08007d15
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	00000040 	.word	0x00000040
 8008ad8:	00000014 	.word	0x00000014
 8008adc:	00000054 	.word	0x00000054
 8008ae0:	08003db2 	.word	0x08003db2
 8008ae4:	0800346e 	.word	0x0800346e
 8008ae8:	0800346e 	.word	0x0800346e
 8008aec:	08003dc8 	.word	0x08003dc8
 8008af0:	0800346e 	.word	0x0800346e
 8008af4:	0800346e 	.word	0x0800346e
 8008af8:	0800346e 	.word	0x0800346e
 8008afc:	0800346e 	.word	0x0800346e
 8008b00:	0800346e 	.word	0x0800346e
 8008b04:	0800346e 	.word	0x0800346e
 8008b08:	08003580 	.word	0x08003580
 8008b0c:	08003dd4 	.word	0x08003dd4
 8008b10:	0800346e 	.word	0x0800346e
 8008b14:	08003596 	.word	0x08003596
 8008b18:	08003ea2 	.word	0x08003ea2
 8008b1c:	0800346e 	.word	0x0800346e
 8008b20:	08003d18 	.word	0x08003d18
 8008b24:	08003d24 	.word	0x08003d24
 8008b28:	08003d24 	.word	0x08003d24
 8008b2c:	08003d24 	.word	0x08003d24
 8008b30:	08003d24 	.word	0x08003d24
 8008b34:	08003d24 	.word	0x08003d24
 8008b38:	08003d24 	.word	0x08003d24
 8008b3c:	08003d24 	.word	0x08003d24
 8008b40:	08003d24 	.word	0x08003d24
 8008b44:	08003d24 	.word	0x08003d24
 8008b48:	0800346e 	.word	0x0800346e
 8008b4c:	0800346e 	.word	0x0800346e
 8008b50:	0800346e 	.word	0x0800346e
 8008b54:	0800346e 	.word	0x0800346e
 8008b58:	0800346e 	.word	0x0800346e
 8008b5c:	0800346e 	.word	0x0800346e
 8008b60:	0800346e 	.word	0x0800346e
 8008b64:	0800346e 	.word	0x0800346e
 8008b68:	0800346e 	.word	0x0800346e
 8008b6c:	0800346e 	.word	0x0800346e
 8008b70:	08003556 	.word	0x08003556
 8008b74:	08003cb0 	.word	0x08003cb0
 8008b78:	0800346e 	.word	0x0800346e
 8008b7c:	08003cb0 	.word	0x08003cb0
 8008b80:	0800346e 	.word	0x0800346e
 8008b84:	0800346e 	.word	0x0800346e
 8008b88:	0800346e 	.word	0x0800346e
 8008b8c:	0800346e 	.word	0x0800346e
 8008b90:	08003d4a 	.word	0x08003d4a
 8008b94:	0800346e 	.word	0x0800346e
 8008b98:	0800346e 	.word	0x0800346e
 8008b9c:	0800352a 	.word	0x0800352a
 8008ba0:	0800346e 	.word	0x0800346e
 8008ba4:	0800346e 	.word	0x0800346e
 8008ba8:	0800346e 	.word	0x0800346e
 8008bac:	0800346e 	.word	0x0800346e
 8008bb0:	0800346e 	.word	0x0800346e
 8008bb4:	0800349e 	.word	0x0800349e
 8008bb8:	0800346e 	.word	0x0800346e
 8008bbc:	0800346e 	.word	0x0800346e
 8008bc0:	08003d56 	.word	0x08003d56
 8008bc4:	0800346e 	.word	0x0800346e
 8008bc8:	0800346e 	.word	0x0800346e
 8008bcc:	0800346e 	.word	0x0800346e
 8008bd0:	0800346e 	.word	0x0800346e
 8008bd4:	0800346e 	.word	0x0800346e
 8008bd8:	0800346e 	.word	0x0800346e
 8008bdc:	0800346e 	.word	0x0800346e
 8008be0:	0800346e 	.word	0x0800346e
 8008be4:	0800346e 	.word	0x0800346e
 8008be8:	0800346e 	.word	0x0800346e
 8008bec:	08003d7e 	.word	0x08003d7e
 8008bf0:	0800355e 	.word	0x0800355e
 8008bf4:	08003cb0 	.word	0x08003cb0
 8008bf8:	08003cb0 	.word	0x08003cb0
 8008bfc:	08003cb0 	.word	0x08003cb0
 8008c00:	08003e8c 	.word	0x08003e8c
 8008c04:	0800355e 	.word	0x0800355e
 8008c08:	0800346e 	.word	0x0800346e
 8008c0c:	0800346e 	.word	0x0800346e
 8008c10:	08003e98 	.word	0x08003e98
 8008c14:	0800346e 	.word	0x0800346e
 8008c18:	08003d90 	.word	0x08003d90
 8008c1c:	08003532 	.word	0x08003532
 8008c20:	08003e34 	.word	0x08003e34
 8008c24:	08003e64 	.word	0x08003e64
 8008c28:	0800346e 	.word	0x0800346e
 8008c2c:	08003dde 	.word	0x08003dde
 8008c30:	0800346e 	.word	0x0800346e
 8008c34:	080034a6 	.word	0x080034a6
 8008c38:	0800346e 	.word	0x0800346e
 8008c3c:	0800346e 	.word	0x0800346e
 8008c40:	08003e6e 	.word	0x08003e6e

08008c44 <blanks.6718>:
 8008c44:	20202020 20202020 20202020 20202020                     

08008c54 <zeroes.6719>:
 8008c54:	30303030 30303030 30303030 30303030     0000000000000000

08008c64 <_global_impure_ptr>:
 8008c64:	200000a8                                ... 

08008c68 <p05.5240>:
 8008c68:	00000005 00000019 0000007d 00000000     ........}.......

08008c78 <__mprec_tens>:
 8008c78:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008c88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008c98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008ca8:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008cb8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008cc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8008cd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8008ce8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008cf8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008d08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008d18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008d28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008d38:	79d99db4 44ea7843                       ...yCx.D

08008d40 <__mprec_tinytens>:
 8008d40:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8008d50:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8008d60:	64ac6f43 0ac80628                       Co.d(...

08008d68 <__mprec_bigtens>:
 8008d68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008d78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008d88:	7f73bf3c 75154fdd 080071ee 08006d16     <.s..O.u.q...m..
 8008d98:	08006d16 080071e4 08006d16 08006d16     .m...q...m...m..
 8008da8:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008db8:	08007010 0800717e 08006d16 08007028     .p..~q...m..(p..
 8008dc8:	08007146 08006d16 080071b0 08007192     Fq...m...q...q..
 8008dd8:	08007192 08007192 08007192 08007192     .q...q...q...q..
 8008de8:	08007192 08007192 08007192 08007192     .q...q...q...q..
 8008df8:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e08:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e18:	08006d16 08006d16 08007182 08006d16     .m...m...q...m..
 8008e28:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e38:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e48:	08006d16 08006f56 08006d16 08006d16     .m..Vo...m...m..
 8008e58:	08006d16 08006d16 08006d16 08006f7e     .m...m...m..~o..
 8008e68:	08006d16 08006d16 0800708e 08006d16     .m...m...p...m..
 8008e78:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e88:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e98:	08006d16 0800706e 0800703c 08006d16     .m..np..<p...m..
 8008ea8:	08006d16 08006d16 080070cc 0800703c     .m...m...p..<p..
 8008eb8:	08006d16 08006d16 08006f4e 08006d16     .m...m..No...m..
 8008ec8:	080070d6 08006f5e 080071ba 08006f4e     .p..^o...q..No..
 8008ed8:	08006d16 080070fc 08006d16 08006f86     .m...p...m...o..
 8008ee8:	08006d16 08006d16 080070c0              .m...m...p..

08008ef4 <blanks.6662>:
 8008ef4:	20202020 20202020 20202020 20202020                     

08008f04 <zeroes.6663>:
 8008f04:	30303030 30303030 30303030 30303030     0000000000000000
 8008f14:	70706148 72612079 68742065 2065736f     Happy are those 
 8008f24:	206f6877 776f6e6b 65687420 72612079     who know they ar
 8008f34:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 8008f44:	203b726f 6854000a 696b2065 6f64676e     or; ..The kingdo
 8008f54:	666f206d 61656820 206e6576 6f6c6562     m of heaven belo
 8008f64:	2073676e 74206f74 216d6568 6f48000a     ngs to them!..Ho
 8008f74:	616d2077 6520796e 20736579 73656f64     w many eyes does
 8008f84:	73694d20 73736973 20697069 65766972      Mississipi rive
 8008f94:	61682072 0a3f6576 69755100 62206b63     r have?..Quick b
 8008fa4:	6e776f72 786f6620 6d756a20 20646570     rown fox jumped 
 8008fb4:	7265766f 65687420 7a616c20 6f642079     over the lazy do
 8008fc4:	000a2167 69676542 3249206e 0a2e3143     g!..Begin I2C1..
 8008fd4:	696e4900 74732074 32333037 000a2e69     .Init st7032i...
 8008fe4:	30377473 20693233 20736168 72617473     st7032i has star
 8008ff4:	2e646574 6948000a 65687420 00216572     ted...Hi there!.
 8009004:	6c343025 203e0064 61654800 6e612070     %04ld.> .Heap an
 8009014:	74732064 206b6361 6c6c6f63 6f697369     d stack collisio
 8009024:	65000a6e 00746978 00464e49 00666e69     n..exit.INF.inf.
 8009034:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 8009044:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 8009054:	37363534 62613938 66656463 00000000     456789abcdef....
 8009064:	6c756e28 0000296c 00000030 69666e49     (null)..0...Infi
 8009074:	7974696e 00000000 004e614e 00000043     nity....NaN.C...
 8009084:	49534f50 00000058 0000002e              POSIX.......
>>>>>>> origin/@home
