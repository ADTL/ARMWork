
out/demo.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <memcpy>:
 8000188:	2a0f      	cmp	r2, #15
 800018a:	b4f0      	push	{r4, r5, r6, r7}
 800018c:	d940      	bls.n	8000210 <memcpy+0x88>
 800018e:	ea41 0300 	orr.w	r3, r1, r0
 8000192:	079b      	lsls	r3, r3, #30
 8000194:	d13e      	bne.n	8000214 <memcpy+0x8c>
 8000196:	460c      	mov	r4, r1
 8000198:	4603      	mov	r3, r0
 800019a:	4615      	mov	r5, r2
 800019c:	6826      	ldr	r6, [r4, #0]
 800019e:	3d10      	subs	r5, #16
 80001a0:	601e      	str	r6, [r3, #0]
 80001a2:	6866      	ldr	r6, [r4, #4]
 80001a4:	605e      	str	r6, [r3, #4]
 80001a6:	68a6      	ldr	r6, [r4, #8]
 80001a8:	609e      	str	r6, [r3, #8]
 80001aa:	68e6      	ldr	r6, [r4, #12]
 80001ac:	3410      	adds	r4, #16
 80001ae:	60de      	str	r6, [r3, #12]
 80001b0:	3310      	adds	r3, #16
 80001b2:	2d0f      	cmp	r5, #15
 80001b4:	d8f2      	bhi.n	800019c <memcpy+0x14>
 80001b6:	f1a2 0510 	sub.w	r5, r2, #16
 80001ba:	f002 040f 	and.w	r4, r2, #15
 80001be:	f025 050f 	bic.w	r5, r5, #15
 80001c2:	3510      	adds	r5, #16
 80001c4:	2c03      	cmp	r4, #3
 80001c6:	eb00 0305 	add.w	r3, r0, r5
 80001ca:	4429      	add	r1, r5
 80001cc:	d924      	bls.n	8000218 <memcpy+0x90>
 80001ce:	f1a4 0c04 	sub.w	ip, r4, #4
 80001d2:	461d      	mov	r5, r3
 80001d4:	460c      	mov	r4, r1
 80001d6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80001da:	eb01 078c 	add.w	r7, r1, ip, lsl #2
 80001de:	3704      	adds	r7, #4
 80001e0:	f854 6b04 	ldr.w	r6, [r4], #4
 80001e4:	42bc      	cmp	r4, r7
 80001e6:	f845 6b04 	str.w	r6, [r5], #4
 80001ea:	d1f9      	bne.n	80001e0 <memcpy+0x58>
 80001ec:	f10c 0401 	add.w	r4, ip, #1
 80001f0:	f002 0203 	and.w	r2, r2, #3
 80001f4:	00a4      	lsls	r4, r4, #2
 80001f6:	1909      	adds	r1, r1, r4
 80001f8:	191b      	adds	r3, r3, r4
 80001fa:	b13a      	cbz	r2, 800020c <memcpy+0x84>
 80001fc:	3901      	subs	r1, #1
 80001fe:	189a      	adds	r2, r3, r2
 8000200:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000204:	f803 4b01 	strb.w	r4, [r3], #1
 8000208:	4293      	cmp	r3, r2
 800020a:	d1f9      	bne.n	8000200 <memcpy+0x78>
 800020c:	bcf0      	pop	{r4, r5, r6, r7}
 800020e:	4770      	bx	lr
 8000210:	4603      	mov	r3, r0
 8000212:	e7f2      	b.n	80001fa <memcpy+0x72>
 8000214:	4603      	mov	r3, r0
 8000216:	e7f1      	b.n	80001fc <memcpy+0x74>
 8000218:	4622      	mov	r2, r4
 800021a:	e7ee      	b.n	80001fa <memcpy+0x72>

0800021c <memset>:
 800021c:	b470      	push	{r4, r5, r6}
 800021e:	0784      	lsls	r4, r0, #30
 8000220:	4603      	mov	r3, r0
 8000222:	d044      	beq.n	80002ae <memset+0x92>
 8000224:	1e54      	subs	r4, r2, #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d03f      	beq.n	80002aa <memset+0x8e>
 800022a:	b2ce      	uxtb	r6, r1
 800022c:	e002      	b.n	8000234 <memset+0x18>
 800022e:	2c00      	cmp	r4, #0
 8000230:	d03b      	beq.n	80002aa <memset+0x8e>
 8000232:	4614      	mov	r4, r2
 8000234:	f803 6b01 	strb.w	r6, [r3], #1
 8000238:	f013 0f03 	tst.w	r3, #3
 800023c:	461d      	mov	r5, r3
 800023e:	f104 32ff 	add.w	r2, r4, #4294967295
 8000242:	d1f4      	bne.n	800022e <memset+0x12>
 8000244:	2c03      	cmp	r4, #3
 8000246:	d929      	bls.n	800029c <memset+0x80>
 8000248:	b2ca      	uxtb	r2, r1
 800024a:	2c0f      	cmp	r4, #15
 800024c:	bf84      	itt	hi
 800024e:	462b      	movhi	r3, r5
 8000250:	4626      	movhi	r6, r4
 8000252:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8000256:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800025a:	d911      	bls.n	8000280 <memset+0x64>
 800025c:	3e10      	subs	r6, #16
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	3310      	adds	r3, #16
 8000268:	2e0f      	cmp	r6, #15
 800026a:	d8f7      	bhi.n	800025c <memset+0x40>
 800026c:	f1a4 0310 	sub.w	r3, r4, #16
 8000270:	f004 040f 	and.w	r4, r4, #15
 8000274:	f023 030f 	bic.w	r3, r3, #15
 8000278:	3310      	adds	r3, #16
 800027a:	2c03      	cmp	r4, #3
 800027c:	441d      	add	r5, r3
 800027e:	d90d      	bls.n	800029c <memset+0x80>
 8000280:	462e      	mov	r6, r5
 8000282:	4623      	mov	r3, r4
 8000284:	3b04      	subs	r3, #4
 8000286:	f846 2b04 	str.w	r2, [r6], #4
 800028a:	2b03      	cmp	r3, #3
 800028c:	d8fa      	bhi.n	8000284 <memset+0x68>
 800028e:	1f23      	subs	r3, r4, #4
 8000290:	f004 0403 	and.w	r4, r4, #3
 8000294:	f023 0303 	bic.w	r3, r3, #3
 8000298:	3304      	adds	r3, #4
 800029a:	18ed      	adds	r5, r5, r3
 800029c:	b12c      	cbz	r4, 80002aa <memset+0x8e>
 800029e:	b2c9      	uxtb	r1, r1
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f805 1b01 	strb.w	r1, [r5], #1
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d1fb      	bne.n	80002a2 <memset+0x86>
 80002aa:	bc70      	pop	{r4, r5, r6}
 80002ac:	4770      	bx	lr
 80002ae:	4605      	mov	r5, r0
 80002b0:	4614      	mov	r4, r2
 80002b2:	e7c7      	b.n	8000244 <memset+0x28>

080002b4 <strcpy>:
 80002b4:	ea80 0201 	eor.w	r2, r0, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	f012 0f03 	tst.w	r2, #3
 80002be:	d14f      	bne.n	8000360 <strcpy+0xac>
 80002c0:	f011 0f03 	tst.w	r1, #3
 80002c4:	d132      	bne.n	800032c <strcpy+0x78>
 80002c6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80002ca:	f011 0f04 	tst.w	r1, #4
 80002ce:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d2:	d00b      	beq.n	80002ec <strcpy+0x38>
 80002d4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80002d8:	439a      	bics	r2, r3
 80002da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80002de:	bf04      	itt	eq
 80002e0:	f84c 3b04 	streq.w	r3, [ip], #4
 80002e4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80002e8:	d116      	bne.n	8000318 <strcpy+0x64>
 80002ea:	bf00      	nop
 80002ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80002f0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80002f4:	439a      	bics	r2, r3
 80002f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80002fa:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80002fe:	d10b      	bne.n	8000318 <strcpy+0x64>
 8000300:	f84c 3b04 	str.w	r3, [ip], #4
 8000304:	43a2      	bics	r2, r4
 8000306:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800030a:	bf04      	itt	eq
 800030c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000310:	f84c 4b04 	streq.w	r4, [ip], #4
 8000314:	d0ea      	beq.n	80002ec <strcpy+0x38>
 8000316:	4623      	mov	r3, r4
 8000318:	f80c 3b01 	strb.w	r3, [ip], #1
 800031c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000320:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000324:	d1f8      	bne.n	8000318 <strcpy+0x64>
 8000326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	f011 0f01 	tst.w	r1, #1
 8000330:	d006      	beq.n	8000340 <strcpy+0x8c>
 8000332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000336:	f80c 2b01 	strb.w	r2, [ip], #1
 800033a:	2a00      	cmp	r2, #0
 800033c:	bf08      	it	eq
 800033e:	4770      	bxeq	lr
 8000340:	f011 0f02 	tst.w	r1, #2
 8000344:	d0bf      	beq.n	80002c6 <strcpy+0x12>
 8000346:	f831 2b02 	ldrh.w	r2, [r1], #2
 800034a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800034e:	bf16      	itet	ne
 8000350:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000354:	f88c 2000 	strbeq.w	r2, [ip]
 8000358:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800035c:	d1b3      	bne.n	80002c6 <strcpy+0x12>
 800035e:	4770      	bx	lr
 8000360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000364:	f80c 2b01 	strb.w	r2, [ip], #1
 8000368:	2a00      	cmp	r2, #0
 800036a:	d1f9      	bne.n	8000360 <strcpy+0xac>
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	f020 0103 	bic.w	r1, r0, #3
 8000374:	f010 0003 	ands.w	r0, r0, #3
 8000378:	f1c0 0000 	rsb	r0, r0, #0
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f100 0c04 	add.w	ip, r0, #4
 8000384:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000388:	f06f 0200 	mvn.w	r2, #0
 800038c:	bf1c      	itt	ne
 800038e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8000392:	4313      	orrne	r3, r2
 8000394:	f04f 0c01 	mov.w	ip, #1
 8000398:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800039c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80003a0:	eba3 020c 	sub.w	r2, r3, ip
 80003a4:	ea22 0203 	bic.w	r2, r2, r3
 80003a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80003ac:	bf04      	itt	eq
 80003ae:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003b2:	3004      	addeq	r0, #4
 80003b4:	d0f4      	beq.n	80003a0 <strlen+0x30>
 80003b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80003ba:	bf1f      	itttt	ne
 80003bc:	3001      	addne	r0, #1
 80003be:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80003c2:	3001      	addne	r0, #1
 80003c4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80003c8:	bf18      	it	ne
 80003ca:	3001      	addne	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003d2:	f000 b804 	b.w	80003de <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 80003d8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003da:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003dc:	3104      	adds	r1, #4

080003de <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 80003e2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003e4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003e6:	f4ff aff6 	bcc.w	80003d6 <CopyDataInit>
  ldr  r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 80003ec:	f000 b803 	b.w	80003f6 <LoopFillZerobss>

080003f0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003f0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003f2:	f842 3b04 	str.w	r3, [r2], #4

080003f6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 80003f8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003fa:	f4ff aff9 	bcc.w	80003f0 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003fe:	f002 fdb9 	bl	8002f74 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8000402:	f001 fa0b 	bl	800181c <main>
  bx  lr    
 8000406:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000408:	08003094 	.word	0x08003094
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000410:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000414:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000418:	20000588 	.word	0x20000588

0800041c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800041c:	f7ff bffe 	b.w	800041c <ADC_IRQHandler>

08000420 <disk_initialize>:
/* Inidialize a Drive                                                    */

DSTATUS disk_initialize (
        BYTE drv                                /* Physical drive nmuber (0..) */
)
{
 8000420:	b508      	push	{r3, lr}
        SD_Error  Status;

//	printf("disk_initialize %d\n", drv);

 	/* Supports only single drive */
        if (drv)
 8000422:	b928      	cbnz	r0, 8000430 <disk_initialize+0x10>
        {
                return STA_NOINIT;
        }
/*-------------------------- SD Init ----------------------------- */
  Status = SD_Init();
 8000424:	f002 f8f8 	bl	8002618 <SD_Init>
//	printf("disk_initialize %d\n", drv);

 	/* Supports only single drive */
        if (drv)
        {
                return STA_NOINIT;
 8000428:	3000      	adds	r0, #0
 800042a:	bf18      	it	ne
 800042c:	2001      	movne	r0, #1
 800042e:	bd08      	pop	{r3, pc}
 8000430:	2001      	movs	r0, #1
        {

                return RES_OK;
        }

}
 8000432:	bd08      	pop	{r3, pc}

08000434 <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status (
        BYTE drv                /* Physical drive nmuber (0..) */
)
{
 8000434:	b508      	push	{r3, lr}
	DSTATUS stat = 0;
	
	if (SD_Detect() != SD_PRESENT)
 8000436:	f001 fda5 	bl	8001f84 <SD_Detect>

	// STA_NOTINIT - Subsystem not initailized
	// STA_PROTECTED - Write protected, MMC/SD switch if available
	
	return(stat);
}
 800043a:	2801      	cmp	r0, #1
 800043c:	bf14      	ite	ne
 800043e:	2002      	movne	r0, #2
 8000440:	2000      	moveq	r0, #0
 8000442:	bd08      	pop	{r3, pc}

08000444 <disk_read>:
        BYTE drv,               /* Physical drive nmuber (0..) */
        BYTE *buff,             /* Data buffer to store read data */
        DWORD sector,   				/* Sector address (LBA) */
        BYTE count              /* Number of sectors to read (1..255) */
)
{
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800044a:	4607      	mov	r7, r0
 800044c:	460c      	mov	r4, r1
 800044e:	4616      	mov	r6, r2
 8000450:	461d      	mov	r5, r3
	SD_Error Status;

//	printf("disk_read %d %p %10d %d\n",drv,buff,sector,count);

	if (SD_Detect() != SD_PRESENT)
 8000452:	f001 fd97 	bl	8001f84 <SD_Detect>
 8000456:	2801      	cmp	r0, #1
 8000458:	d131      	bne.n	80004be <disk_read+0x7a>
		return(RES_NOTRDY);

	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
 800045a:	07a3      	lsls	r3, r4, #30
 800045c:	d018      	beq.n	8000490 <disk_read+0x4c>


/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */

DRESULT disk_read (
 800045e:	19ad      	adds	r5, r5, r6
//	printf("disk_read %d %p %10d %d\n",drv,buff,sector,count);

	if (SD_Detect() != SD_PRESENT)
		return(RES_NOTRDY);

	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
 8000460:	4632      	mov	r2, r6
	{
		DRESULT res = RES_OK;
		DWORD scratch[BLOCK_SIZE / 4]; // Alignment assured, you'll need a sufficiently big stack

		while(count--)
 8000462:	b2ed      	uxtb	r5, r5
 8000464:	e00f      	b.n	8000486 <disk_read+0x42>
		{
			res = disk_read(drv, (void *)scratch, sector++, 1);
 8000466:	4638      	mov	r0, r7
 8000468:	4669      	mov	r1, sp
 800046a:	2301      	movs	r3, #1
 800046c:	1c56      	adds	r6, r2, #1
 800046e:	f7ff ffe9 	bl	8000444 <disk_read>

			if (res != RES_OK)
 8000472:	bb28      	cbnz	r0, 80004c0 <disk_read+0x7c>
				break;

			memcpy(buff, scratch, BLOCK_SIZE);
 8000474:	4620      	mov	r0, r4
 8000476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800047a:	4669      	mov	r1, sp
 800047c:	f7ff fe84 	bl	8000188 <memcpy>

			buff += BLOCK_SIZE;
 8000480:	f504 7400 	add.w	r4, r4, #512	; 0x200
		DRESULT res = RES_OK;
		DWORD scratch[BLOCK_SIZE / 4]; // Alignment assured, you'll need a sufficiently big stack

		while(count--)
		{
			res = disk_read(drv, (void *)scratch, sector++, 1);
 8000484:	4632      	mov	r2, r6
	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
	{
		DRESULT res = RES_OK;
		DWORD scratch[BLOCK_SIZE / 4]; // Alignment assured, you'll need a sufficiently big stack

		while(count--)
 8000486:	b2d3      	uxtb	r3, r2
 8000488:	429d      	cmp	r5, r3
 800048a:	d1ec      	bne.n	8000466 <disk_read+0x22>
 800048c:	2000      	movs	r0, #0
 800048e:	e017      	b.n	80004c0 <disk_read+0x7c>
		}

		return(res);
	}

  Status = SD_ReadMultiBlocksFIXED(buff, sector, BLOCK_SIZE, count); // 4GB Compliant
 8000490:	4620      	mov	r0, r4
 8000492:	4631      	mov	r1, r6
 8000494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000498:	462b      	mov	r3, r5
 800049a:	f002 f8ff 	bl	800269c <SD_ReadMultiBlocksFIXED>

	if (Status == SD_OK)
 800049e:	b108      	cbz	r0, 80004a4 <disk_read+0x60>
			return(RES_ERROR);
		else
			return(RES_OK);
	}
	else
		return(RES_ERROR);
 80004a0:	2001      	movs	r0, #1
 80004a2:	e00d      	b.n	80004c0 <disk_read+0x7c>

	if (Status == SD_OK)
	{
		SDTransferState State;

		Status = SD_WaitReadOperation(); // Check if the Transfer is finished
 80004a4:	f002 fa54 	bl	8002950 <SD_WaitReadOperation>
 80004a8:	4604      	mov	r4, r0

		while((State = SD_GetStatus()) == SD_TRANSFER_BUSY); // BUSY, OK (DONE), ERROR (FAIL)
 80004aa:	f002 fac7 	bl	8002a3c <SD_GetStatus>
 80004ae:	2801      	cmp	r0, #1
 80004b0:	d0fb      	beq.n	80004aa <disk_read+0x66>

		if ((State == SD_TRANSFER_ERROR) || (Status != SD_OK))
 80004b2:	2802      	cmp	r0, #2
 80004b4:	d0f4      	beq.n	80004a0 <disk_read+0x5c>
	SD_Error Status;

//	printf("disk_read %d %p %10d %d\n",drv,buff,sector,count);

	if (SD_Detect() != SD_PRESENT)
		return(RES_NOTRDY);
 80004b6:	1c20      	adds	r0, r4, #0
 80004b8:	bf18      	it	ne
 80004ba:	2001      	movne	r0, #1
 80004bc:	e000      	b.n	80004c0 <disk_read+0x7c>
 80004be:	2003      	movs	r0, #3
		else
			return(RES_OK);
	}
	else
		return(RES_ERROR);
}
 80004c0:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004c6 <disk_write>:
        BYTE drv,                       /* Physical drive nmuber (0..) */
        const BYTE *buff,       /* Data to be written */
        DWORD sector,           /* Sector address (LBA) */
        BYTE count                      /* Number of sectors to write (1..255) */
)
{
 80004c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80004ce:	4607      	mov	r7, r0
 80004d0:	460c      	mov	r4, r1
 80004d2:	4615      	mov	r5, r2
 80004d4:	461e      	mov	r6, r3
	SD_Error Status;

//	printf("disk_write %d %p %10d %d\n",drv,buff,sector,count);

	if (SD_Detect() != SD_PRESENT)
 80004d6:	f001 fd55 	bl	8001f84 <SD_Detect>
 80004da:	2801      	cmp	r0, #1
 80004dc:	d132      	bne.n	8000544 <disk_write+0x7e>
		return(RES_NOTRDY);

	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
 80004de:	07a2      	lsls	r2, r4, #30
 80004e0:	d019      	beq.n	8000516 <disk_write+0x50>

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */

#if _READONLY == 0
DRESULT disk_write (
 80004e2:	1976      	adds	r6, r6, r5
	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
	{
		DRESULT res = RES_OK;
		DWORD scratch[BLOCK_SIZE / 4]; // Alignment assured, you'll need a sufficiently big stack

		while(count--)
 80004e4:	b2f6      	uxtb	r6, r6
 80004e6:	e011      	b.n	800050c <disk_write+0x46>
		{
			memcpy(scratch, buff, BLOCK_SIZE);
 80004e8:	4621      	mov	r1, r4
 80004ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ee:	4668      	mov	r0, sp
 80004f0:	f7ff fe4a 	bl	8000188 <memcpy>

			res = disk_write(drv, (void *)scratch, sector++, 1);
 80004f4:	4638      	mov	r0, r7
 80004f6:	4669      	mov	r1, sp
 80004f8:	462a      	mov	r2, r5
 80004fa:	2301      	movs	r3, #1
 80004fc:	f105 0801 	add.w	r8, r5, #1
 8000500:	f7ff ffe1 	bl	80004c6 <disk_write>

			if (res != RES_OK)
 8000504:	b9f8      	cbnz	r0, 8000546 <disk_write+0x80>
				break;

			buff += BLOCK_SIZE;
 8000506:	f504 7400 	add.w	r4, r4, #512	; 0x200

		while(count--)
		{
			memcpy(scratch, buff, BLOCK_SIZE);

			res = disk_write(drv, (void *)scratch, sector++, 1);
 800050a:	4645      	mov	r5, r8
	if ((DWORD)buff & 3) // DMA Alignment failure, do single up to aligned buffer
	{
		DRESULT res = RES_OK;
		DWORD scratch[BLOCK_SIZE / 4]; // Alignment assured, you'll need a sufficiently big stack

		while(count--)
 800050c:	b2eb      	uxtb	r3, r5
 800050e:	429e      	cmp	r6, r3
 8000510:	d1ea      	bne.n	80004e8 <disk_write+0x22>
 8000512:	2000      	movs	r0, #0
 8000514:	e017      	b.n	8000546 <disk_write+0x80>
		}

		return(res);
	}

  Status = SD_WriteMultiBlocksFIXED(buff, sector, BLOCK_SIZE, count); // 4GB Compliant
 8000516:	4620      	mov	r0, r4
 8000518:	4629      	mov	r1, r5
 800051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051e:	4633      	mov	r3, r6
 8000520:	f002 f92a 	bl	8002778 <SD_WriteMultiBlocksFIXED>

	if (Status == SD_OK)
 8000524:	b108      	cbz	r0, 800052a <disk_write+0x64>
			return(RES_ERROR);
		else
			return(RES_OK);
	}
	else
		return(RES_ERROR);
 8000526:	2001      	movs	r0, #1
 8000528:	e00d      	b.n	8000546 <disk_write+0x80>

	if (Status == SD_OK)
	{
		SDTransferState State;

		Status = SD_WaitWriteOperation(); // Check if the Transfer is finished
 800052a:	f002 f9d1 	bl	80028d0 <SD_WaitWriteOperation>
 800052e:	4604      	mov	r4, r0

		while((State = SD_GetStatus()) == SD_TRANSFER_BUSY); // BUSY, OK (DONE), ERROR (FAIL)
 8000530:	f002 fa84 	bl	8002a3c <SD_GetStatus>
 8000534:	2801      	cmp	r0, #1
 8000536:	d0fb      	beq.n	8000530 <disk_write+0x6a>

		if ((State == SD_TRANSFER_ERROR) || (Status != SD_OK))
 8000538:	2802      	cmp	r0, #2
 800053a:	d0f4      	beq.n	8000526 <disk_write+0x60>
	SD_Error Status;

//	printf("disk_write %d %p %10d %d\n",drv,buff,sector,count);

	if (SD_Detect() != SD_PRESENT)
		return(RES_NOTRDY);
 800053c:	1c20      	adds	r0, r4, #0
 800053e:	bf18      	it	ne
 8000540:	2001      	movne	r0, #1
 8000542:	e000      	b.n	8000546 <disk_write+0x80>
 8000544:	2003      	movs	r0, #3
		else
			return(RES_OK);
	}
	else
		return(RES_ERROR);
}
 8000546:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 800054a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800054e <disk_ioctl>:
        BYTE ctrl,              /* Control code */
        void *buff              /* Buffer to send/receive control data */
)
{
        return RES_OK;
}
 800054e:	2000      	movs	r0, #0
 8000550:	4770      	bx	lr

08000552 <get_fattime>:
/*-----------------------------------------------------------------------*/
/* Get current time                                                      */
/*-----------------------------------------------------------------------*/
DWORD get_fattime(void){
        return 0;
}
 8000552:	2000      	movs	r0, #0
 8000554:	4770      	bx	lr

08000556 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000556:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8000558:	2300      	movs	r3, #0
 800055a:	e002      	b.n	8000562 <mem_cpy+0xc>
		*d++ = *s++;
 800055c:	5ccc      	ldrb	r4, [r1, r3]
 800055e:	54c4      	strb	r4, [r0, r3]
 8000560:	3301      	adds	r3, #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8000562:	4293      	cmp	r3, r2
 8000564:	d1fa      	bne.n	800055c <mem_cpy+0x6>
		*d++ = *s++;
}
 8000566:	bd10      	pop	{r4, pc}

08000568 <get_fileinfo>:
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
 8000568:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 800056a:	b530      	push	{r4, r5, lr}
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
 800056c:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
 8000570:	2b00      	cmp	r3, #0
 8000572:	d037      	beq.n	80005e4 <get_fileinfo+0x7c>
		dir = dj->dir;
 8000574:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8000576:	2500      	movs	r5, #0
 8000578:	4610      	mov	r0, r2
			c = dir[i];
 800057a:	5d5c      	ldrb	r4, [r3, r5]
			if (c == ' ') break;
 800057c:	2c20      	cmp	r4, #32
 800057e:	4602      	mov	r2, r0
 8000580:	d008      	beq.n	8000594 <get_fileinfo+0x2c>
			if (c == NDDE) c = (TCHAR)DDE;
 8000582:	2c05      	cmp	r4, #5
 8000584:	bf08      	it	eq
 8000586:	24e5      	moveq	r4, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8000588:	f800 4b01 	strb.w	r4, [r0], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 800058c:	3501      	adds	r5, #1
 800058e:	2d08      	cmp	r5, #8
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8000590:	4602      	mov	r2, r0

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8000592:	d1f2      	bne.n	800057a <get_fileinfo+0x12>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 8000594:	7a1c      	ldrb	r4, [r3, #8]
 8000596:	2c20      	cmp	r4, #32
 8000598:	d00d      	beq.n	80005b6 <get_fileinfo+0x4e>
			*p++ = '.';
 800059a:	222e      	movs	r2, #46	; 0x2e
 800059c:	f800 2b01 	strb.w	r2, [r0], #1
			for (i = 8; i < 11; i++) {
 80005a0:	2408      	movs	r4, #8
				c = dir[i];
 80005a2:	5d1d      	ldrb	r5, [r3, r4]
				if (c == ' ') break;
 80005a4:	2d20      	cmp	r5, #32
 80005a6:	4602      	mov	r2, r0
 80005a8:	d005      	beq.n	80005b6 <get_fileinfo+0x4e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80005aa:	f800 5b01 	strb.w	r5, [r0], #1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 80005ae:	3401      	adds	r4, #1
 80005b0:	2c0b      	cmp	r4, #11
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80005b2:	4602      	mov	r2, r0
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 80005b4:	d1f5      	bne.n	80005a2 <get_fileinfo+0x3a>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80005b6:	7ad8      	ldrb	r0, [r3, #11]
 80005b8:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 80005ba:	7f98      	ldrb	r0, [r3, #30]
 80005bc:	7fdc      	ldrb	r4, [r3, #31]
 80005be:	0400      	lsls	r0, r0, #16
 80005c0:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80005c4:	7f1c      	ldrb	r4, [r3, #28]
 80005c6:	4320      	orrs	r0, r4
 80005c8:	7f5c      	ldrb	r4, [r3, #29]
 80005ca:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80005ce:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 80005d0:	7e5c      	ldrb	r4, [r3, #25]
 80005d2:	7e18      	ldrb	r0, [r3, #24]
 80005d4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80005d8:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 80005da:	7dd8      	ldrb	r0, [r3, #23]
 80005dc:	7d9b      	ldrb	r3, [r3, #22]
 80005de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80005e2:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
 80005e4:	2300      	movs	r3, #0
 80005e6:	7013      	strb	r3, [r2, #0]
 80005e8:	bd30      	pop	{r4, r5, pc}

080005ea <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80005ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
 80005ee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 80005f0:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80005f2:	4604      	mov	r4, r0
 80005f4:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 80005f6:	d102      	bne.n	80005fe <move_window+0x14>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
 80005f8:	2000      	movs	r0, #0
 80005fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80005fe:	7903      	ldrb	r3, [r0, #4]
 8000600:	b913      	cbnz	r3, 8000608 <move_window+0x1e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8000602:	2e00      	cmp	r6, #0
 8000604:	d0f8      	beq.n	80005f8 <move_window+0xe>
 8000606:	e020      	b.n	800064a <move_window+0x60>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8000608:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800060c:	4641      	mov	r1, r8
 800060e:	7840      	ldrb	r0, [r0, #1]
 8000610:	462a      	mov	r2, r5
 8000612:	2301      	movs	r3, #1
 8000614:	f7ff ff57 	bl	80004c6 <disk_write>
 8000618:	b110      	cbz	r0, 8000620 <move_window+0x36>
				return FR_DISK_ERR;
 800061a:	2001      	movs	r0, #1
 800061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8000620:	69e2      	ldr	r2, [r4, #28]
 8000622:	6a23      	ldr	r3, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8000624:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	429d      	cmp	r5, r3
 800062a:	d2ea      	bcs.n	8000602 <move_window+0x18>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800062c:	78e7      	ldrb	r7, [r4, #3]
 800062e:	e009      	b.n	8000644 <move_window+0x5a>
					wsect += fs->fsize;
 8000630:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000632:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8000634:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8000636:	4641      	mov	r1, r8
 8000638:	462a      	mov	r2, r5
 800063a:	2301      	movs	r3, #1
 800063c:	f7ff ff43 	bl	80004c6 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000640:	3f01      	subs	r7, #1
 8000642:	b2ff      	uxtb	r7, r7
 8000644:	2f01      	cmp	r7, #1
 8000646:	d8f3      	bhi.n	8000630 <move_window+0x46>
 8000648:	e7db      	b.n	8000602 <move_window+0x18>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800064a:	7860      	ldrb	r0, [r4, #1]
 800064c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000650:	4632      	mov	r2, r6
 8000652:	2301      	movs	r3, #1
 8000654:	f7ff fef6 	bl	8000444 <disk_read>
 8000658:	2800      	cmp	r0, #0
 800065a:	d1de      	bne.n	800061a <move_window+0x30>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800065c:	62e6      	str	r6, [r4, #44]	; 0x2c
		}
	}

	return FR_OK;
}
 800065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000662 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8000662:	b510      	push	{r4, lr}
	FRESULT res;


	res = move_window(fs, 0);
 8000664:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8000666:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
 8000668:	f7ff ffbf 	bl	80005ea <move_window>
 800066c:	4603      	mov	r3, r0
	if (res == FR_OK) {
 800066e:	2800      	cmp	r0, #0
 8000670:	d151      	bne.n	8000716 <sync+0xb4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8000672:	7823      	ldrb	r3, [r4, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d146      	bne.n	8000706 <sync+0xa4>
 8000678:	7963      	ldrb	r3, [r4, #5]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d043      	beq.n	8000706 <sync+0xa4>
			fs->winsect = 0;
 800067e:	62e0      	str	r0, [r4, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 8000680:	f104 0130 	add.w	r1, r4, #48	; 0x30
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8000684:	4603      	mov	r3, r0
 8000686:	540b      	strb	r3, [r1, r0]
 8000688:	3001      	adds	r0, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800068a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800068e:	d1fa      	bne.n	8000686 <sync+0x24>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8000690:	2355      	movs	r3, #85	; 0x55
 8000692:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
 8000696:	23aa      	movs	r3, #170	; 0xaa
 8000698:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 800069c:	2352      	movs	r3, #82	; 0x52
 800069e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80006a2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 80006a6:	2361      	movs	r3, #97	; 0x61
 80006a8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80006ac:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80006b0:	6923      	ldr	r3, [r4, #16]
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80006b2:	2241      	movs	r2, #65	; 0x41
 80006b4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80006b8:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80006bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80006c0:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
 80006c4:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
 80006c8:	0c1a      	lsrs	r2, r3, #16
 80006ca:	0e1b      	lsrs	r3, r3, #24
 80006cc:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80006d0:	68e3      	ldr	r3, [r4, #12]
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80006d2:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80006d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80006da:	2072      	movs	r0, #114	; 0x72
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80006dc:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 80006e0:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
 80006e4:	0c1a      	lsrs	r2, r3, #16
 80006e6:	0e1b      	lsrs	r3, r3, #24
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80006e8:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
 80006ec:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80006f0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
 80006f4:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80006f8:	7860      	ldrb	r0, [r4, #1]
 80006fa:	6962      	ldr	r2, [r4, #20]
 80006fc:	2301      	movs	r3, #1
 80006fe:	f7ff fee2 	bl	80004c6 <disk_write>
			fs->fsi_flag = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	7163      	strb	r3, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	7860      	ldrb	r0, [r4, #1]
 800070a:	460a      	mov	r2, r1
 800070c:	f7ff ff1f 	bl	800054e <disk_ioctl>
 8000710:	1c03      	adds	r3, r0, #0
 8000712:	bf18      	it	ne
 8000714:	2301      	movne	r3, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd10      	pop	{r4, pc}

0800071a <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 800071a:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
 800071c:	b168      	cbz	r0, 800073a <validate+0x20>
 800071e:	7803      	ldrb	r3, [r0, #0]
 8000720:	b15b      	cbz	r3, 800073a <validate+0x20>
 8000722:	88c3      	ldrh	r3, [r0, #6]
 8000724:	428b      	cmp	r3, r1
 8000726:	d108      	bne.n	800073a <validate+0x20>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8000728:	7840      	ldrb	r0, [r0, #1]
 800072a:	f7ff fe83 	bl	8000434 <disk_status>
 800072e:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;
 8000732:	bf0c      	ite	eq
 8000734:	2000      	moveq	r0, #0
 8000736:	2003      	movne	r0, #3
 8000738:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
 800073a:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 800073c:	bd08      	pop	{r3, pc}
	...

08000740 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8000740:	b510      	push	{r4, lr}
 8000742:	4604      	mov	r4, r0
 8000744:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8000746:	7840      	ldrb	r0, [r0, #1]
 8000748:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800074c:	2301      	movs	r3, #1
 800074e:	f7ff fe79 	bl	8000444 <disk_read>
 8000752:	bb80      	cbnz	r0, 80007b6 <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8000754:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8000758:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 800075c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <check_fs+0x80>)
 8000762:	b212      	sxth	r2, r2
 8000764:	429a      	cmp	r2, r3
 8000766:	d128      	bne.n	80007ba <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8000768:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800076c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8000770:	0412      	lsls	r2, r2, #16
 8000772:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000776:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800077a:	431a      	orrs	r2, r3
 800077c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8000780:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <check_fs+0x84>)
 8000786:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800078a:	429a      	cmp	r2, r3
 800078c:	d016      	beq.n	80007bc <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 800078e:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8000792:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
 8000796:	0400      	lsls	r0, r0, #16
 8000798:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800079c:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 80007a0:	4310      	orrs	r0, r2
 80007a2:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
 80007a6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80007aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 0;
 80007ae:	1ac0      	subs	r0, r0, r3
 80007b0:	bf18      	it	ne
 80007b2:	2001      	movne	r0, #1
 80007b4:	bd10      	pop	{r4, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 80007b6:	2003      	movs	r0, #3
 80007b8:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 80007ba:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	ffffaa55 	.word	0xffffaa55
 80007c4:	00544146 	.word	0x00544146

080007c8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 80007c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 80007cc:	6803      	ldr	r3, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 80007ce:	4615      	mov	r5, r2
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	3a30      	subs	r2, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 80007d4:	2a09      	cmp	r2, #9
 80007d6:	d904      	bls.n	80007e2 <chk_mounted+0x1a>
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 80007d8:	4bb8      	ldr	r3, [pc, #736]	; (8000abc <chk_mounted+0x2f4>)
 80007da:	681c      	ldr	r4, [r3, #0]
 80007dc:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80007de:	b94c      	cbnz	r4, 80007f4 <chk_mounted+0x2c>
 80007e0:	e15a      	b.n	8000a98 <chk_mounted+0x2d0>
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 80007e2:	785c      	ldrb	r4, [r3, #1]
 80007e4:	2c3a      	cmp	r4, #58	; 0x3a
 80007e6:	d1f7      	bne.n	80007d8 <chk_mounted+0x10>
		p += 2; *path = p;				/* Return pointer to the path name */
 80007e8:	3302      	adds	r3, #2
 80007ea:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	f040 8156 	bne.w	8000a9e <chk_mounted+0x2d6>
 80007f2:	e7f1      	b.n	80007d8 <chk_mounted+0x10>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 80007f4:	7823      	ldrb	r3, [r4, #0]
 80007f6:	b183      	cbz	r3, 800081a <chk_mounted+0x52>
		stat = disk_status(fs->drv);
 80007f8:	7860      	ldrb	r0, [r4, #1]
 80007fa:	f7ff fe1b 	bl	8000434 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80007fe:	07c1      	lsls	r1, r0, #31
 8000800:	d40b      	bmi.n	800081a <chk_mounted+0x52>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 8000802:	2d00      	cmp	r5, #0
 8000804:	f000 814e 	beq.w	8000aa4 <chk_mounted+0x2dc>
 8000808:	f000 0004 	and.w	r0, r0, #4
 800080c:	b2c0      	uxtb	r0, r0
				return FR_WRITE_PROTECTED;
 800080e:	2800      	cmp	r0, #0
 8000810:	bf14      	ite	ne
 8000812:	200a      	movne	r0, #10
 8000814:	2000      	moveq	r0, #0
 8000816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800081a:	2000      	movs	r0, #0
 800081c:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800081e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 8000820:	f7ff fdfe 	bl	8000420 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8000824:	07c2      	lsls	r2, r0, #31
 8000826:	f100 8140 	bmi.w	8000aaa <chk_mounted+0x2e2>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800082a:	b12d      	cbz	r5, 8000838 <chk_mounted+0x70>
 800082c:	f000 0004 	and.w	r0, r0, #4
 8000830:	b2c0      	uxtb	r0, r0
 8000832:	2800      	cmp	r0, #0
 8000834:	f040 813c 	bne.w	8000ab0 <chk_mounted+0x2e8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8000838:	2100      	movs	r1, #0
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff ff80 	bl	8000740 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8000840:	2801      	cmp	r0, #1
 8000842:	d118      	bne.n	8000876 <chk_mounted+0xae>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
 8000844:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
 8000848:	b913      	cbnz	r3, 8000850 <chk_mounted+0x88>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800084a:	200d      	movs	r0, #13
 800084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 8000850:	f894 61f8 	ldrb.w	r6, [r4, #504]	; 0x1f8
 8000854:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
 8000858:	0436      	lsls	r6, r6, #16
 800085a:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 800085e:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
 8000862:	431e      	orrs	r6, r3
 8000864:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
 8000868:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
 800086c:	4620      	mov	r0, r4
 800086e:	4631      	mov	r1, r6
 8000870:	f7ff ff66 	bl	8000740 <check_fs>
 8000874:	e000      	b.n	8000878 <chk_mounted+0xb0>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8000876:	2600      	movs	r6, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8000878:	2803      	cmp	r0, #3
 800087a:	f000 811c 	beq.w	8000ab6 <chk_mounted+0x2ee>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800087e:	2800      	cmp	r0, #0
 8000880:	d1e3      	bne.n	800084a <chk_mounted+0x82>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8000882:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8000886:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800088a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800088e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000892:	d1da      	bne.n	800084a <chk_mounted+0x82>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8000894:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8000898:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 800089c:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
 80008a0:	d10d      	bne.n	80008be <chk_mounted+0xf6>
 80008a2:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 80008a6:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 80008aa:	0409      	lsls	r1, r1, #16
 80008ac:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80008b0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80008b4:	4319      	orrs	r1, r3
 80008b6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80008ba:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80008be:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
 80008c2:	61e1      	str	r1, [r4, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 80008c4:	1e6b      	subs	r3, r5, #1
 80008c6:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80008c8:	70e5      	strb	r5, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 80008ca:	d8be      	bhi.n	800084a <chk_mounted+0x82>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 80008cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80008d0:	70a2      	strb	r2, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d0b9      	beq.n	800084a <chk_mounted+0x82>
 80008d6:	1e53      	subs	r3, r2, #1
 80008d8:	4213      	tst	r3, r2
 80008da:	d1b6      	bne.n	800084a <chk_mounted+0x82>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80008dc:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 80008e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80008e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80008e8:	b298      	uxth	r0, r3
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 80008ea:	071b      	lsls	r3, r3, #28
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80008ec:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 80008ee:	d1ac      	bne.n	800084a <chk_mounted+0x82>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 80008f0:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80008f4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 80008f8:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
 80008fc:	d10d      	bne.n	800091a <chk_mounted+0x152>
 80008fe:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8000902:	f894 7053 	ldrb.w	r7, [r4, #83]	; 0x53
 8000906:	041b      	lsls	r3, r3, #16
 8000908:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800090c:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
 8000910:	433b      	orrs	r3, r7
 8000912:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 8000916:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 800091a:	f894 803f 	ldrb.w	r8, [r4, #63]	; 0x3f
 800091e:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8000922:	ea57 2808 	orrs.w	r8, r7, r8, lsl #8
 8000926:	d090      	beq.n	800084a <chk_mounted+0x82>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
 8000928:	fb05 fc01 	mul.w	ip, r5, r1

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800092c:	eb08 1710 	add.w	r7, r8, r0, lsr #4
 8000930:	4467      	add	r7, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8000932:	42bb      	cmp	r3, r7
 8000934:	d389      	bcc.n	800084a <chk_mounted+0x82>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8000936:	1bdb      	subs	r3, r3, r7
 8000938:	fbb3 f3f2 	udiv	r3, r3, r2
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800093c:	2b00      	cmp	r3, #0
 800093e:	d084      	beq.n	800084a <chk_mounted+0x82>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8000940:	f640 72f5 	movw	r2, #4085	; 0xff5
 8000944:	4293      	cmp	r3, r2
 8000946:	d906      	bls.n	8000956 <chk_mounted+0x18e>
 8000948:	f64f 75f5 	movw	r5, #65525	; 0xfff5
 800094c:	42ab      	cmp	r3, r5
 800094e:	bf8c      	ite	hi
 8000950:	2503      	movhi	r5, #3
 8000952:	2502      	movls	r5, #2
 8000954:	e000      	b.n	8000958 <chk_mounted+0x190>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
 8000956:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8000958:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
 800095a:	19bf      	adds	r7, r7, r6
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800095c:	eb06 0208 	add.w	r2, r6, r8
	if (fmt == FS_FAT32) {
 8000960:	2d03      	cmp	r5, #3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8000962:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8000964:	62a7      	str	r7, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8000966:	6222      	str	r2, [r4, #32]
	if (fmt == FS_FAT32) {
 8000968:	d113      	bne.n	8000992 <chk_mounted+0x1ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800096a:	2800      	cmp	r0, #0
 800096c:	f47f af6d 	bne.w	800084a <chk_mounted+0x82>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8000970:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8000974:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
 8000978:	0412      	lsls	r2, r2, #16
 800097a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800097e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8000982:	4302      	orrs	r2, r0
 8000984:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8000988:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800098c:	6262      	str	r2, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	e00e      	b.n	80009b0 <chk_mounted+0x1e8>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8000992:	2800      	cmp	r0, #0
 8000994:	f43f af59 	beq.w	800084a <chk_mounted+0x82>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8000998:	4462      	add	r2, ip
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800099a:	2d02      	cmp	r5, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800099c:	6262      	str	r2, [r4, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800099e:	d101      	bne.n	80009a4 <chk_mounted+0x1dc>
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	e005      	b.n	80009b0 <chk_mounted+0x1e8>
 80009a4:	2203      	movs	r2, #3
 80009a6:	435a      	muls	r2, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 80009b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80009b4:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80009b8:	f4ff af47 	bcc.w	800084a <chk_mounted+0x82>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
 80009c2:	2300      	movs	r3, #0

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80009c4:	2d03      	cmp	r5, #3
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;
 80009c6:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80009c8:	d15a      	bne.n	8000a80 <chk_mounted+0x2b8>
	 	fs->fsi_flag = 0;
 80009ca:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80009cc:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80009d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80009d4:	7860      	ldrb	r0, [r4, #1]
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80009d6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80009da:	18b2      	adds	r2, r6, r2
 80009dc:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80009de:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009e2:	2301      	movs	r3, #1
 80009e4:	f7ff fd2e 	bl	8000444 <disk_read>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d149      	bne.n	8000a80 <chk_mounted+0x2b8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80009ec:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80009f0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80009f4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <chk_mounted+0x2f8>)
 80009fa:	b212      	sxth	r2, r2
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d13f      	bne.n	8000a80 <chk_mounted+0x2b8>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8000a00:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8000a04:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8000a08:	0412      	lsls	r2, r2, #16
 8000a0a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000a0e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000a12:	431a      	orrs	r2, r3
 8000a14:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000a18:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <chk_mounted+0x2fc>)
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d12e      	bne.n	8000a80 <chk_mounted+0x2b8>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8000a22:	f894 2216 	ldrb.w	r2, [r4, #534]	; 0x216
 8000a26:	f894 3217 	ldrb.w	r3, [r4, #535]	; 0x217
 8000a2a:	0412      	lsls	r2, r2, #16
 8000a2c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000a30:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 8000a34:	431a      	orrs	r2, r3
 8000a36:	f894 3215 	ldrb.w	r3, [r4, #533]	; 0x215
 8000a3a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <chk_mounted+0x300>)
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d11d      	bne.n	8000a80 <chk_mounted+0x2b8>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8000a44:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8000a48:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 8000a4c:	041b      	lsls	r3, r3, #16
 8000a4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a52:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 8000a56:	4313      	orrs	r3, r2
 8000a58:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 8000a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a60:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8000a62:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8000a66:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
 8000a6a:	041b      	lsls	r3, r3, #16
 8000a6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a70:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
 8000a74:	4313      	orrs	r3, r2
 8000a76:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 8000a7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a7e:	6123      	str	r3, [r4, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <chk_mounted+0x304>)
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8000a82:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8000a84:	8813      	ldrh	r3, [r2, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29b      	uxth	r3, r3
	fs->winsect = 0;		/* Invalidate sector cache */
 8000a8a:	2000      	movs	r0, #0
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
 8000a8c:	8013      	strh	r3, [r2, #0]
 8000a8e:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8000a90:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
 8000a92:	7120      	strb	r0, [r4, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8000a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8000a98:	200c      	movs	r0, #12
 8000a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 8000aaa:	2003      	movs	r0, #3
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8000ab6:	2001      	movs	r0, #1
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8000ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	ffffaa55 	.word	0xffffaa55
 8000ac4:	41615252 	.word	0x41615252
 8000ac8:	61417272 	.word	0x61417272
 8000acc:	20000000 	.word	0x20000000

08000ad0 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8000ad0:	6983      	ldr	r3, [r0, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8000ad2:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8000ad4:	3b02      	subs	r3, #2
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d204      	bcs.n	8000ae4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8000ada:	7882      	ldrb	r2, [r0, #2]
 8000adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ade:	fb02 3001 	mla	r0, r2, r1, r3
 8000ae2:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8000ae4:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 8000ae6:	4770      	bx	lr

08000ae8 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8000ae8:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8000aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aec:	4604      	mov	r4, r0
 8000aee:	460d      	mov	r5, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8000af0:	d95c      	bls.n	8000bac <get_fat+0xc4>
 8000af2:	6983      	ldr	r3, [r0, #24]
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d259      	bcs.n	8000bac <get_fat+0xc4>
		return 1;

	switch (fs->fs_type) {
 8000af8:	7803      	ldrb	r3, [r0, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d028      	beq.n	8000b50 <get_fat+0x68>
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d037      	beq.n	8000b72 <get_fat+0x8a>
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d14f      	bne.n	8000ba6 <get_fat+0xbe>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8000b06:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000b0a:	6a01      	ldr	r1, [r0, #32]
 8000b0c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8000b10:	f7ff fd6b 	bl	80005ea <move_window>
 8000b14:	b100      	cbz	r0, 8000b18 <get_fat+0x30>
 8000b16:	e046      	b.n	8000ba6 <get_fat+0xbe>
		wc = fs->win[bc % SS(fs)]; bc++;
 8000b18:	05f3      	lsls	r3, r6, #23
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000b1a:	6a21      	ldr	r1, [r4, #32]

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 8000b1c:	eb04 53d3 	add.w	r3, r4, r3, lsr #23
 8000b20:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000b22:	4620      	mov	r0, r4
 8000b24:	eb01 2156 	add.w	r1, r1, r6, lsr #9

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 8000b28:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000b2c:	f7ff fd5d 	bl	80005ea <move_window>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d138      	bne.n	8000ba6 <get_fat+0xbe>
		wc |= fs->win[bc % SS(fs)] << 8;
 8000b34:	05f6      	lsls	r6, r6, #23
 8000b36:	eb04 54d6 	add.w	r4, r4, r6, lsr #23
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000b3a:	07eb      	lsls	r3, r5, #31
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
 8000b3c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8000b40:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000b44:	d501      	bpl.n	8000b4a <get_fat+0x62>
 8000b46:	0900      	lsrs	r0, r0, #4
 8000b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4a:	0500      	lsls	r0, r0, #20
 8000b4c:	0d00      	lsrs	r0, r0, #20
 8000b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000b50:	6a01      	ldr	r1, [r0, #32]
 8000b52:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8000b56:	f7ff fd48 	bl	80005ea <move_window>
 8000b5a:	bb20      	cbnz	r0, 8000ba6 <get_fat+0xbe>
		p = &fs->win[clst * 2 % SS(fs)];
 8000b5c:	062d      	lsls	r5, r5, #24
 8000b5e:	0ded      	lsrs	r5, r5, #23
		return LD_WORD(p);
 8000b60:	1963      	adds	r3, r4, r5
 8000b62:	1964      	adds	r4, r4, r5
 8000b64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b68:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8000b6c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000b72:	6a01      	ldr	r1, [r0, #32]
 8000b74:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8000b78:	f7ff fd37 	bl	80005ea <move_window>
 8000b7c:	b998      	cbnz	r0, 8000ba6 <get_fat+0xbe>
		p = &fs->win[clst * 4 % SS(fs)];
 8000b7e:	066d      	lsls	r5, r5, #25
 8000b80:	0ded      	lsrs	r5, r5, #23
 8000b82:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8000b86:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
 8000b88:	1964      	adds	r4, r4, r5
 8000b8a:	78d8      	ldrb	r0, [r3, #3]
 8000b8c:	789a      	ldrb	r2, [r3, #2]
 8000b8e:	785b      	ldrb	r3, [r3, #1]
 8000b90:	0600      	lsls	r0, r0, #24
 8000b92:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000b96:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000b9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000b9e:	4318      	orrs	r0, r3
 8000ba0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8000ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8000baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
 8000bac:	2001      	movs	r0, #1
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
 8000bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bb0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8000bb6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
 8000bb8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8000bba:	2901      	cmp	r1, #1
 8000bbc:	d101      	bne.n	8000bc2 <dir_sdi+0x12>
		return FR_INT_ERR;
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8000bc2:	6803      	ldr	r3, [r0, #0]
 8000bc4:	699a      	ldr	r2, [r3, #24]
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d2f9      	bcs.n	8000bbe <dir_sdi+0xe>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8000bca:	b971      	cbnz	r1, 8000bea <dir_sdi+0x3a>
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	2a03      	cmp	r2, #3
 8000bd0:	d101      	bne.n	8000bd6 <dir_sdi+0x26>
		clst = dj->fs->dirbase;
 8000bd2:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8000bd4:	b949      	cbnz	r1, 8000bea <dir_sdi+0x3a>
		dj->clust = clst;
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8000bda:	891a      	ldrh	r2, [r3, #8]
 8000bdc:	42aa      	cmp	r2, r5
 8000bde:	d9ee      	bls.n	8000bbe <dir_sdi+0xe>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	eb03 1315 	add.w	r3, r3, r5, lsr #4
 8000be6:	6123      	str	r3, [r4, #16]
 8000be8:	e019      	b.n	8000c1e <dir_sdi+0x6e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8000bea:	789e      	ldrb	r6, [r3, #2]
 8000bec:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8000bee:	e00d      	b.n	8000c0c <dir_sdi+0x5c>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f7ff ff79 	bl	8000ae8 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8000bf6:	1c42      	adds	r2, r0, #1
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8000bf8:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8000bfa:	d019      	beq.n	8000c30 <dir_sdi+0x80>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8000bfc:	2801      	cmp	r0, #1
 8000bfe:	d9de      	bls.n	8000bbe <dir_sdi+0xe>
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d2da      	bcs.n	8000bbe <dir_sdi+0xe>
				return FR_INT_ERR;
			idx -= ic;
 8000c08:	1bad      	subs	r5, r5, r6
 8000c0a:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8000c0c:	42b5      	cmp	r5, r6
 8000c0e:	d2ef      	bcs.n	8000bf0 <dir_sdi+0x40>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8000c10:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8000c12:	6820      	ldr	r0, [r4, #0]
 8000c14:	f7ff ff5c 	bl	8000ad0 <clust2sect>
 8000c18:	eb00 1015 	add.w	r0, r0, r5, lsr #4
 8000c1c:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8000c1e:	f005 050f 	and.w	r5, r5, #15
 8000c22:	016d      	lsls	r5, r5, #5
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	3530      	adds	r5, #48	; 0x30
 8000c28:	195b      	adds	r3, r3, r5
 8000c2a:	6163      	str	r3, [r4, #20]

	return FR_OK;	/* Seek succeeded */
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8000c30:	2001      	movs	r0, #1
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <put_fat>:
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000c34:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8000c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c38:	4604      	mov	r4, r0
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000c3e:	d970      	bls.n	8000d22 <put_fat+0xee>
 8000c40:	6983      	ldr	r3, [r0, #24]
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d26d      	bcs.n	8000d22 <put_fat+0xee>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 8000c46:	7803      	ldrb	r3, [r0, #0]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d03a      	beq.n	8000cc2 <put_fat+0x8e>
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d049      	beq.n	8000ce4 <put_fat+0xb0>
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d162      	bne.n	8000d1a <put_fat+0xe6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8000c54:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000c58:	6a01      	ldr	r1, [r0, #32]
 8000c5a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8000c5e:	f7ff fcc4 	bl	80005ea <move_window>
			if (res != FR_OK) break;
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d15a      	bne.n	8000d1c <put_fat+0xe8>
			p = &fs->win[bc % SS(fs)];
 8000c66:	05fa      	lsls	r2, r7, #23
 8000c68:	0dd2      	lsrs	r2, r2, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8000c6a:	f015 0501 	ands.w	r5, r5, #1
 8000c6e:	b2f3      	uxtb	r3, r6
 8000c70:	d007      	beq.n	8000c82 <put_fat+0x4e>
 8000c72:	18a1      	adds	r1, r4, r2
 8000c74:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8000c78:	f001 010f 	and.w	r1, r1, #15
 8000c7c:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	18a2      	adds	r2, r4, r2
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000c84:	6a21      	ldr	r1, [r4, #32]
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8000c86:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
			bc++;
 8000c8a:	3701      	adds	r7, #1
			fs->wflag = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000c90:	4620      	mov	r0, r4
 8000c92:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8000c96:	f7ff fca8 	bl	80005ea <move_window>
			if (res != FR_OK) break;
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d13e      	bne.n	8000d1c <put_fat+0xe8>
			p = &fs->win[bc % SS(fs)];
 8000c9e:	05ff      	lsls	r7, r7, #23
 8000ca0:	0dff      	lsrs	r7, r7, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000ca2:	b115      	cbz	r5, 8000caa <put_fat+0x76>
 8000ca4:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8000ca8:	e007      	b.n	8000cba <put_fat+0x86>
 8000caa:	19e3      	adds	r3, r4, r7
 8000cac:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8000cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cb4:	f023 030f 	bic.w	r3, r3, #15
 8000cb8:	431e      	orrs	r6, r3
 8000cba:	19e7      	adds	r7, r4, r7
 8000cbc:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
 8000cc0:	e02c      	b.n	8000d1c <put_fat+0xe8>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8000cc2:	6a01      	ldr	r1, [r0, #32]
 8000cc4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8000cc8:	f7ff fc8f 	bl	80005ea <move_window>
			if (res != FR_OK) break;
 8000ccc:	bb30      	cbnz	r0, 8000d1c <put_fat+0xe8>
			p = &fs->win[clst * 2 % SS(fs)];
 8000cce:	062d      	lsls	r5, r5, #24
 8000cd0:	0ded      	lsrs	r5, r5, #23
			ST_WORD(p, (WORD)val);
 8000cd2:	1963      	adds	r3, r4, r5
 8000cd4:	461d      	mov	r5, r3
 8000cd6:	f883 6030 	strb.w	r6, [r3, #48]	; 0x30
 8000cda:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8000cde:	f883 6031 	strb.w	r6, [r3, #49]	; 0x31
 8000ce2:	e01b      	b.n	8000d1c <put_fat+0xe8>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8000ce4:	6a01      	ldr	r1, [r0, #32]
 8000ce6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8000cea:	f7ff fc7e 	bl	80005ea <move_window>
			if (res != FR_OK) break;
 8000cee:	b9a8      	cbnz	r0, 8000d1c <put_fat+0xe8>
			p = &fs->win[clst * 4 % SS(fs)];
 8000cf0:	066d      	lsls	r5, r5, #25
 8000cf2:	0ded      	lsrs	r5, r5, #23
 8000cf4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8000cf8:	18e3      	adds	r3, r4, r3
			val |= LD_DWORD(p) & 0xF0000000;
 8000cfa:	1965      	adds	r5, r4, r5
 8000cfc:	78da      	ldrb	r2, [r3, #3]
 8000cfe:	0612      	lsls	r2, r2, #24
 8000d00:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8000d04:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 8000d06:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8000d0a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 8000d0e:	705a      	strb	r2, [r3, #1]
 8000d10:	0c32      	lsrs	r2, r6, #16
 8000d12:	0e36      	lsrs	r6, r6, #24
 8000d14:	709a      	strb	r2, [r3, #2]
 8000d16:	70de      	strb	r6, [r3, #3]
 8000d18:	e000      	b.n	8000d1c <put_fat+0xe8>
			break;

		default :
			res = FR_INT_ERR;
 8000d1a:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	7123      	strb	r3, [r4, #4]
 8000d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8000d22:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8000d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d26 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8000d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d28:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8000d2a:	460f      	mov	r7, r1
 8000d2c:	b931      	cbnz	r1, 8000d3c <create_chain+0x16>
		scl = fs->last_clust;			/* Get suggested start point */
 8000d2e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000d30:	b176      	cbz	r6, 8000d50 <create_chain+0x2a>
 8000d32:	6983      	ldr	r3, [r0, #24]
 8000d34:	429e      	cmp	r6, r3
 8000d36:	bf28      	it	cs
 8000d38:	2601      	movcs	r6, #1
 8000d3a:	e00a      	b.n	8000d52 <create_chain+0x2c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8000d3c:	f7ff fed4 	bl	8000ae8 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8000d40:	2801      	cmp	r0, #1
 8000d42:	d800      	bhi.n	8000d46 <create_chain+0x20>
 8000d44:	e03b      	b.n	8000dbe <create_chain+0x98>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8000d46:	69ab      	ldr	r3, [r5, #24]
 8000d48:	4298      	cmp	r0, r3
 8000d4a:	d339      	bcc.n	8000dc0 <create_chain+0x9a>
 8000d4c:	463e      	mov	r6, r7
 8000d4e:	e000      	b.n	8000d52 <create_chain+0x2c>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000d50:	2601      	movs	r6, #1
 8000d52:	4634      	mov	r4, r6
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8000d54:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8000d56:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d304      	bcc.n	8000d66 <create_chain+0x40>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8000d5c:	2e01      	cmp	r6, #1
 8000d5e:	d801      	bhi.n	8000d64 <create_chain+0x3e>
 8000d60:	2000      	movs	r0, #0
 8000d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
 8000d64:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8000d66:	4628      	mov	r0, r5
 8000d68:	4621      	mov	r1, r4
 8000d6a:	f7ff febd 	bl	8000ae8 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8000d6e:	b148      	cbz	r0, 8000d84 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d102      	bne.n	8000d7a <create_chain+0x54>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8000d7a:	2801      	cmp	r0, #1
 8000d7c:	d01f      	beq.n	8000dbe <create_chain+0x98>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8000d7e:	42b4      	cmp	r4, r6
 8000d80:	d1e8      	bne.n	8000d54 <create_chain+0x2e>
 8000d82:	e7ed      	b.n	8000d60 <create_chain+0x3a>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8000d84:	4628      	mov	r0, r5
 8000d86:	4621      	mov	r1, r4
 8000d88:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000d8c:	f7ff ff52 	bl	8000c34 <put_fat>
	if (res == FR_OK && clst != 0) {
 8000d90:	b998      	cbnz	r0, 8000dba <create_chain+0x94>
 8000d92:	b927      	cbnz	r7, 8000d9e <create_chain+0x78>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 8000d94:	692b      	ldr	r3, [r5, #16]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
 8000d96:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8000d98:	1c59      	adds	r1, r3, #1
 8000d9a:	d108      	bne.n	8000dae <create_chain+0x88>
 8000d9c:	e00b      	b.n	8000db6 <create_chain+0x90>
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8000d9e:	4628      	mov	r0, r5
 8000da0:	4639      	mov	r1, r7
 8000da2:	4622      	mov	r2, r4
 8000da4:	f7ff ff46 	bl	8000c34 <put_fat>
	}
	if (res == FR_OK) {
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d0f3      	beq.n	8000d94 <create_chain+0x6e>
 8000dac:	e005      	b.n	8000dba <create_chain+0x94>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
 8000dae:	3b01      	subs	r3, #1
 8000db0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	716b      	strb	r3, [r5, #5]
 8000db6:	4620      	mov	r0, r4
 8000db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8000dba:	2801      	cmp	r0, #1
 8000dbc:	d0da      	beq.n	8000d74 <create_chain+0x4e>
 8000dbe:	2001      	movs	r0, #1
	}

	return ncl;		/* Return new cluster number or error code */
}
 8000dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000dc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8000dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8000dc6:	88c6      	ldrh	r6, [r0, #6]
 8000dc8:	3601      	adds	r6, #1
 8000dca:	b2b6      	uxth	r6, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460f      	mov	r7, r1
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8000dd0:	b916      	cbnz	r6, 8000dd8 <dir_next+0x16>
		return FR_NO_FILE;
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8000dd8:	6903      	ldr	r3, [r0, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <dir_next+0x10>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8000dde:	f016 080f 	ands.w	r8, r6, #15
 8000de2:	d15d      	bne.n	8000ea0 <dir_next+0xde>
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
 8000de4:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
 8000de6:	3301      	adds	r3, #1
 8000de8:	6103      	str	r3, [r0, #16]
 8000dea:	6800      	ldr	r0, [r0, #0]

		if (dj->clust == 0) {	/* Static table */
 8000dec:	b919      	cbnz	r1, 8000df6 <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8000dee:	8903      	ldrh	r3, [r0, #8]
 8000df0:	42b3      	cmp	r3, r6
 8000df2:	d9ee      	bls.n	8000dd2 <dir_next+0x10>
 8000df4:	e054      	b.n	8000ea0 <dir_next+0xde>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8000df6:	7882      	ldrb	r2, [r0, #2]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	ea12 1216 	ands.w	r2, r2, r6, lsr #4
 8000dfe:	d14f      	bne.n	8000ea0 <dir_next+0xde>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8000e00:	f7ff fe72 	bl	8000ae8 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8000e04:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8000e06:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8000e08:	d802      	bhi.n	8000e10 <dir_next+0x4e>
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000e10:	1c41      	adds	r1, r0, #1
 8000e12:	d102      	bne.n	8000e1a <dir_next+0x58>
 8000e14:	2001      	movs	r0, #1
 8000e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	6983      	ldr	r3, [r0, #24]
 8000e1e:	429d      	cmp	r5, r3
 8000e20:	d338      	bcc.n	8000e94 <dir_next+0xd2>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8000e22:	2f00      	cmp	r7, #0
 8000e24:	d0d5      	beq.n	8000dd2 <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8000e26:	68e1      	ldr	r1, [r4, #12]
 8000e28:	f7ff ff7d 	bl	8000d26 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d041      	beq.n	8000eb6 <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;
 8000e32:	2801      	cmp	r0, #1
 8000e34:	d0e9      	beq.n	8000e0a <dir_next+0x48>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000e36:	1c42      	adds	r2, r0, #1
 8000e38:	d0ec      	beq.n	8000e14 <dir_next+0x52>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8000e3a:	6820      	ldr	r0, [r4, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f7ff fbd4 	bl	80005ea <move_window>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d1e6      	bne.n	8000e14 <dir_next+0x52>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8000e46:	6823      	ldr	r3, [r4, #0]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8000e48:	4602      	mov	r2, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8000e4a:	3330      	adds	r3, #48	; 0x30
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8000e4c:	541a      	strb	r2, [r3, r0]
 8000e4e:	3001      	adds	r0, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8000e50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e54:	d1fa      	bne.n	8000e4c <dir_next+0x8a>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8000e56:	6827      	ldr	r7, [r4, #0]
 8000e58:	4629      	mov	r1, r5
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	f7ff fe38 	bl	8000ad0 <clust2sect>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
 8000e60:	f04f 0901 	mov.w	r9, #1
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8000e64:	62f8      	str	r0, [r7, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000e66:	2700      	movs	r7, #0
 8000e68:	e00d      	b.n	8000e86 <dir_next+0xc4>
						dj->fs->wflag = 1;
 8000e6a:	f883 9004 	strb.w	r9, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	2100      	movs	r1, #0
 8000e72:	f7ff fbba 	bl	80005ea <move_window>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d1cc      	bne.n	8000e14 <dir_next+0x52>
						dj->fs->winsect++;
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000e7e:	3701      	adds	r7, #1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8000e80:	3201      	adds	r2, #1
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000e84:	b2ff      	uxtb	r7, r7
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	789a      	ldrb	r2, [r3, #2]
 8000e8a:	42ba      	cmp	r2, r7
 8000e8c:	d8ed      	bhi.n	8000e6a <dir_next+0xa8>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8000e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e90:	1bd7      	subs	r7, r2, r7
 8000e92:	62df      	str	r7, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8000e94:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8000e96:	6820      	ldr	r0, [r4, #0]
 8000e98:	4629      	mov	r1, r5
 8000e9a:	f7ff fe19 	bl	8000ad0 <clust2sect>
 8000e9e:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8000ea0:	6823      	ldr	r3, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 8000ea2:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8000ea4:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8000ea8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8000eac:	4443      	add	r3, r8
 8000eae:	6163      	str	r3, [r4, #20]

	return FR_OK;
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8000eb6:	2007      	movs	r0, #7

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
 8000eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ebc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8000ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8000ec0:	780b      	ldrb	r3, [r1, #0]
 8000ec2:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	460e      	mov	r6, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8000ec8:	d001      	beq.n	8000ece <follow_path+0x12>
 8000eca:	2b5c      	cmp	r3, #92	; 0x5c
 8000ecc:	d100      	bne.n	8000ed0 <follow_path+0x14>
		path++;
 8000ece:	3601      	adds	r6, #1
	dj->sclust = 0;						/* Start from the root dir */
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	60a5      	str	r5, [r4, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8000ed4:	7833      	ldrb	r3, [r6, #0]
 8000ed6:	2b1f      	cmp	r3, #31
 8000ed8:	d806      	bhi.n	8000ee8 <follow_path+0x2c>
		res = dir_sdi(dj, 0);
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff fe67 	bl	8000bb0 <dir_sdi>
		dj->dir = 0;
 8000ee2:	6165      	str	r5, [r4, #20]
 8000ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8000ee8:	2720      	movs	r7, #32
 8000eea:	4632      	mov	r2, r6
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8000eec:	7813      	ldrb	r3, [r2, #0]
 8000eee:	4616      	mov	r6, r2
 8000ef0:	3201      	adds	r2, #1
 8000ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef4:	d0fa      	beq.n	8000eec <follow_path+0x30>
 8000ef6:	2b5c      	cmp	r3, #92	; 0x5c
 8000ef8:	d0f8      	beq.n	8000eec <follow_path+0x30>
	sfn = dj->fn;
 8000efa:	69a5      	ldr	r5, [r4, #24]
 8000efc:	2300      	movs	r3, #0
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8000efe:	54ef      	strb	r7, [r5, r3]
 8000f00:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8000f02:	2b0b      	cmp	r3, #11
 8000f04:	d1fb      	bne.n	8000efe <follow_path+0x42>
 8000f06:	2200      	movs	r2, #0
 8000f08:	4690      	mov	r8, r2
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e000      	b.n	8000f12 <follow_path+0x56>
 8000f10:	46e0      	mov	r8, ip
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8000f12:	f816 3008 	ldrb.w	r3, [r6, r8]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8000f16:	2b20      	cmp	r3, #32
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8000f18:	f108 0c01 	add.w	ip, r8, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8000f1c:	d955      	bls.n	8000fca <follow_path+0x10e>
 8000f1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f20:	d053      	beq.n	8000fca <follow_path+0x10e>
 8000f22:	2b5c      	cmp	r3, #92	; 0x5c
 8000f24:	d051      	beq.n	8000fca <follow_path+0x10e>
		if (c == '.' || i >= ni) {
 8000f26:	2b2e      	cmp	r3, #46	; 0x2e
 8000f28:	f000 80c0 	beq.w	80010ac <follow_path+0x1f0>
 8000f2c:	428a      	cmp	r2, r1
 8000f2e:	f080 80b4 	bcs.w	800109a <follow_path+0x1de>
 8000f32:	e004      	b.n	8000f3e <follow_path+0x82>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
 8000f34:	0080      	lsls	r0, r0, #2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8000f36:	460a      	mov	r2, r1
			b <<= 2; continue;
 8000f38:	b2c0      	uxtb	r0, r0
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8000f3a:	210b      	movs	r1, #11
 8000f3c:	e7e8      	b.n	8000f10 <follow_path+0x54>
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8000f3e:	f103 097f 	add.w	r9, r3, #127	; 0x7f
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
 8000f42:	f013 0f80 	tst.w	r3, #128	; 0x80
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8000f46:	fa5f f989 	uxtb.w	r9, r9
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
			b |= 3;						/* Eliminate NT flag */
 8000f4a:	bf18      	it	ne
 8000f4c:	f040 0003 	orrne.w	r0, r0, #3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8000f50:	f1b9 0f1e 	cmp.w	r9, #30
 8000f54:	d906      	bls.n	8000f64 <follow_path+0xa8>
 8000f56:	f103 0920 	add.w	r9, r3, #32
 8000f5a:	fa5f f989 	uxtb.w	r9, r9
 8000f5e:	f1b9 0f1c 	cmp.w	r9, #28
 8000f62:	d819      	bhi.n	8000f98 <follow_path+0xdc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8000f64:	f816 900c 	ldrb.w	r9, [r6, ip]
 8000f68:	f108 0c02 	add.w	ip, r8, #2
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 8000f6c:	f1a9 0840 	sub.w	r8, r9, #64	; 0x40
 8000f70:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8000f74:	d905      	bls.n	8000f82 <follow_path+0xc6>
 8000f76:	f089 0880 	eor.w	r8, r9, #128	; 0x80
 8000f7a:	f1b8 0f7c 	cmp.w	r8, #124	; 0x7c
 8000f7e:	f200 808c 	bhi.w	800109a <follow_path+0x1de>
 8000f82:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f86:	4542      	cmp	r2, r8
 8000f88:	f080 8087 	bcs.w	800109a <follow_path+0x1de>
				return FR_INVALID_NAME;
			sfn[i++] = c;
 8000f8c:	54ab      	strb	r3, [r5, r2]
			sfn[i++] = d;
 8000f8e:	18ab      	adds	r3, r5, r2
 8000f90:	3202      	adds	r2, #2
 8000f92:	f883 9001 	strb.w	r9, [r3, #1]
 8000f96:	e7bb      	b.n	8000f10 <follow_path+0x54>
 8000f98:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80010b8 <follow_path+0x1fc>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 8000f9c:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 8000fa0:	f1b8 0f00 	cmp.w	r8, #0
 8000fa4:	d07c      	beq.n	80010a0 <follow_path+0x1e4>
 8000fa6:	4598      	cmp	r8, r3
 8000fa8:	d1f8      	bne.n	8000f9c <follow_path+0xe0>
 8000faa:	e076      	b.n	800109a <follow_path+0x1de>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
 8000fac:	f040 0002 	orr.w	r0, r0, #2
 8000fb0:	e008      	b.n	8000fc4 <follow_path+0x108>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8000fb2:	f1a3 0861 	sub.w	r8, r3, #97	; 0x61
 8000fb6:	f1b8 0f19 	cmp.w	r8, #25
 8000fba:	d803      	bhi.n	8000fc4 <follow_path+0x108>
					b |= 1; c -= 0x20;
 8000fbc:	3b20      	subs	r3, #32
 8000fbe:	f040 0001 	orr.w	r0, r0, #1
 8000fc2:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
 8000fc4:	54ab      	strb	r3, [r5, r2]
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	e7a2      	b.n	8000f10 <follow_path+0x54>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8000fca:	4466      	add	r6, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8000fcc:	2b20      	cmp	r3, #32
 8000fce:	bf94      	ite	ls
 8000fd0:	2304      	movls	r3, #4
 8000fd2:	2300      	movhi	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d060      	beq.n	800109a <follow_path+0x1de>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 8000fd8:	782a      	ldrb	r2, [r5, #0]
 8000fda:	2ae5      	cmp	r2, #229	; 0xe5
 8000fdc:	d101      	bne.n	8000fe2 <follow_path+0x126>
 8000fde:	2205      	movs	r2, #5
 8000fe0:	702a      	strb	r2, [r5, #0]

	if (ni == 8) b <<= 2;
 8000fe2:	2908      	cmp	r1, #8
 8000fe4:	d101      	bne.n	8000fea <follow_path+0x12e>
 8000fe6:	0080      	lsls	r0, r0, #2
 8000fe8:	b2c0      	uxtb	r0, r0
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8000fea:	f000 0203 	and.w	r2, r0, #3
 8000fee:	2a01      	cmp	r2, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8000ff0:	f000 000c 	and.w	r0, r0, #12

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8000ff4:	bf08      	it	eq
 8000ff6:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8000ffa:	2804      	cmp	r0, #4
 8000ffc:	bf08      	it	eq
 8000ffe:	f043 0308 	orreq.w	r3, r3, #8

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8001002:	72eb      	strb	r3, [r5, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8001004:	4620      	mov	r0, r4
 8001006:	2100      	movs	r1, #0
 8001008:	f7ff fdd2 	bl	8000bb0 <dir_sdi>
	if (res != FR_OK) return res;
 800100c:	b9f0      	cbnz	r0, 800104c <follow_path+0x190>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	6921      	ldr	r1, [r4, #16]
 8001012:	f7ff faea 	bl	80005ea <move_window>
		if (res != FR_OK) break;
 8001016:	b9c8      	cbnz	r0, 800104c <follow_path+0x190>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8001018:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800101a:	7813      	ldrb	r3, [r2, #0]
 800101c:	b1ab      	cbz	r3, 800104a <follow_path+0x18e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 800101e:	7ad3      	ldrb	r3, [r2, #11]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b95b      	cbnz	r3, 8001040 <follow_path+0x184>
 8001028:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800102c:	4603      	mov	r3, r0
 800102e:	e001      	b.n	8001034 <follow_path+0x178>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001030:	2b0b      	cmp	r3, #11
 8001032:	d00b      	beq.n	800104c <follow_path+0x190>
 8001034:	5cd5      	ldrb	r5, [r2, r3]
 8001036:	f81c 1003 	ldrb.w	r1, [ip, r3]
 800103a:	3301      	adds	r3, #1
 800103c:	428d      	cmp	r5, r1
 800103e:	d0f7      	beq.n	8001030 <follow_path+0x174>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8001040:	4620      	mov	r0, r4
 8001042:	2100      	movs	r1, #0
 8001044:	f7ff febd 	bl	8000dc2 <dir_next>
 8001048:	e7e0      	b.n	800100c <follow_path+0x150>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800104a:	2004      	movs	r0, #4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
 800104c:	69a3      	ldr	r3, [r4, #24]
 800104e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8001050:	b150      	cbz	r0, 8001068 <follow_path+0x1ac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8001052:	2804      	cmp	r0, #4
 8001054:	d12e      	bne.n	80010b4 <follow_path+0x1f8>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8001056:	f003 0004 	and.w	r0, r3, #4
 800105a:	b2c0      	uxtb	r0, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	bf14      	ite	ne
 8001060:	2004      	movne	r0, #4
 8001062:	2005      	moveq	r0, #5
 8001064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	bb0b      	cbnz	r3, 80010b4 <follow_path+0x1f8>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8001070:	6963      	ldr	r3, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8001072:	7ada      	ldrb	r2, [r3, #11]
 8001074:	f002 0210 	and.w	r2, r2, #16
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	b15a      	cbz	r2, 8001094 <follow_path+0x1d8>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
 800107c:	7d59      	ldrb	r1, [r3, #21]
 800107e:	7d1a      	ldrb	r2, [r3, #20]
 8001080:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001084:	7ed9      	ldrb	r1, [r3, #27]
 8001086:	7e9b      	ldrb	r3, [r3, #26]
 8001088:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800108c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001090:	60a3      	str	r3, [r4, #8]
		}
 8001092:	e72a      	b.n	8000eea <follow_path+0x2e>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 8001094:	2005      	movs	r0, #5
 8001096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800109a:	2006      	movs	r0, #6
 800109c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
 80010a0:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
 80010a4:	f1b8 0f19 	cmp.w	r8, #25
 80010a8:	d980      	bls.n	8000fac <follow_path+0xf0>
 80010aa:	e782      	b.n	8000fb2 <follow_path+0xf6>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80010ac:	2908      	cmp	r1, #8
 80010ae:	f43f af41 	beq.w	8000f34 <follow_path+0x78>
 80010b2:	e7f2      	b.n	800109a <follow_path+0x1de>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
 80010b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010b8:	0800305f 	.word	0x0800305f

080010bc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80010bc:	b538      	push	{r3, r4, r5, lr}
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 80010be:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80010c0:	4605      	mov	r5, r0
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 80010c2:	f7ff fd75 	bl	8000bb0 <dir_sdi>
	if (res == FR_OK) {
 80010c6:	4604      	mov	r4, r0
 80010c8:	bb28      	cbnz	r0, 8001116 <dir_register+0x5a>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 80010ca:	6828      	ldr	r0, [r5, #0]
 80010cc:	6929      	ldr	r1, [r5, #16]
 80010ce:	f7ff fa8c 	bl	80005ea <move_window>
			if (res != FR_OK) break;
 80010d2:	4604      	mov	r4, r0
 80010d4:	b9f8      	cbnz	r0, 8001116 <dir_register+0x5a>
			c = *dj->dir;
 80010d6:	696b      	ldr	r3, [r5, #20]
 80010d8:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 80010da:	2be5      	cmp	r3, #229	; 0xe5
 80010dc:	d014      	beq.n	8001108 <dir_register+0x4c>
 80010de:	b19b      	cbz	r3, 8001108 <dir_register+0x4c>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
 80010e0:	4628      	mov	r0, r5
 80010e2:	2101      	movs	r1, #1
 80010e4:	f7ff fe6d 	bl	8000dc2 <dir_next>
 80010e8:	e7ed      	b.n	80010c6 <dir_register+0xa>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
 80010ea:	6968      	ldr	r0, [r5, #20]
 80010ec:	4623      	mov	r3, r4
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80010ee:	4622      	mov	r2, r4
 80010f0:	54c2      	strb	r2, [r0, r3]
 80010f2:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d1fb      	bne.n	80010f0 <dir_register+0x34>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 80010f8:	220b      	movs	r2, #11
 80010fa:	69a9      	ldr	r1, [r5, #24]
 80010fc:	f7ff fa2b 	bl	8000556 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	711a      	strb	r2, [r3, #4]
 8001106:	e006      	b.n	8001116 <dir_register+0x5a>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
 8001108:	6828      	ldr	r0, [r5, #0]
 800110a:	6929      	ldr	r1, [r5, #16]
 800110c:	f7ff fa6d 	bl	80005ea <move_window>
		if (res == FR_OK) {
 8001110:	4604      	mov	r4, r0
 8001112:	2800      	cmp	r0, #0
 8001114:	d0e9      	beq.n	80010ea <dir_register+0x2e>
			dj->fs->wflag = 1;
		}
	}

	return res;
}
 8001116:	4620      	mov	r0, r4
 8001118:	bd38      	pop	{r3, r4, r5, pc}

0800111a <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 800111a:	b510      	push	{r4, lr}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800111c:	2304      	movs	r3, #4
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 800111e:	4604      	mov	r4, r0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8001120:	e015      	b.n	800114e <dir_read+0x34>
		res = move_window(dj->fs, dj->sect);
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	f7ff fa61 	bl	80005ea <move_window>
		if (res != FR_OK) break;
 8001128:	b9d8      	cbnz	r0, 8001162 <dir_read+0x48>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 800112a:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
 800112c:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800112e:	b1bb      	cbz	r3, 8001160 <dir_read+0x46>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 8001130:	2be5      	cmp	r3, #229	; 0xe5
 8001132:	d006      	beq.n	8001142 <dir_read+0x28>
 8001134:	2b2e      	cmp	r3, #46	; 0x2e
 8001136:	d004      	beq.n	8001142 <dir_read+0x28>
 8001138:	7ad3      	ldrb	r3, [r2, #11]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b18b      	cbz	r3, 8001166 <dir_read+0x4c>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
 8001142:	4620      	mov	r0, r4
 8001144:	2100      	movs	r1, #0
 8001146:	f7ff fe3c 	bl	8000dc2 <dir_next>
 800114a:	4603      	mov	r3, r0
		if (res != FR_OK) break;
 800114c:	b948      	cbnz	r0, 8001162 <dir_read+0x48>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 800114e:	6921      	ldr	r1, [r4, #16]
 8001150:	2900      	cmp	r1, #0
 8001152:	d1e6      	bne.n	8001122 <dir_read+0x8>
 8001154:	4618      	mov	r0, r3
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
 8001156:	b133      	cbz	r3, 8001166 <dir_read+0x4c>
 8001158:	2200      	movs	r2, #0
 800115a:	6122      	str	r2, [r4, #16]
 800115c:	4618      	mov	r0, r3
 800115e:	bd10      	pop	{r4, pc}
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001160:	2004      	movs	r0, #4
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8001162:	4603      	mov	r3, r0
 8001164:	e7f8      	b.n	8001158 <dir_read+0x3e>
	}

	if (res != FR_OK) dj->sect = 0;

	return res;
}
 8001166:	bd10      	pop	{r4, pc}

08001168 <remove_chain>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001168:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800116a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001170:	d924      	bls.n	80011bc <remove_chain+0x54>
 8001172:	6983      	ldr	r3, [r0, #24]
 8001174:	4299      	cmp	r1, r3
 8001176:	d221      	bcs.n	80011bc <remove_chain+0x54>
 8001178:	e019      	b.n	80011ae <remove_chain+0x46>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff fcb3 	bl	8000ae8 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8001182:	4606      	mov	r6, r0
 8001184:	b908      	cbnz	r0, 800118a <remove_chain+0x22>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8001186:	2000      	movs	r0, #0
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800118a:	2801      	cmp	r0, #1
 800118c:	d016      	beq.n	80011bc <remove_chain+0x54>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800118e:	1c41      	adds	r1, r0, #1
 8001190:	d012      	beq.n	80011b8 <remove_chain+0x50>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	2200      	movs	r2, #0
 8001198:	f7ff fd4c 	bl	8000c34 <put_fat>
			if (res != FR_OK) break;
 800119c:	b978      	cbnz	r0, 80011be <remove_chain+0x56>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 800119e:	6923      	ldr	r3, [r4, #16]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	d002      	beq.n	80011aa <remove_chain+0x42>
				fs->free_clust++;
 80011a4:	3301      	adds	r3, #1
 80011a6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
 80011a8:	7167      	strb	r7, [r4, #5]
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80011aa:	4635      	mov	r5, r6
 80011ac:	e000      	b.n	80011b0 <remove_chain+0x48>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
 80011ae:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80011b0:	69a3      	ldr	r3, [r4, #24]
 80011b2:	429d      	cmp	r5, r3
 80011b4:	d3e1      	bcc.n	800117a <remove_chain+0x12>
 80011b6:	e7e6      	b.n	8001186 <remove_chain+0x1e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80011b8:	2001      	movs	r0, #1
 80011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 80011bc:	2002      	movs	r0, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 80011be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011c0 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80011c0:	b948      	cbnz	r0, 80011d6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <f_mount+0x1c>)
 80011c4:	6813      	ldr	r3, [r2, #0]

	if (rfs) {
 80011c6:	b103      	cbz	r3, 80011ca <f_mount+0xa>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80011c8:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 80011ca:	b109      	cbz	r1, 80011d0 <f_mount+0x10>
		fs->fs_type = 0;		/* Clear new fs object */
 80011cc:	2300      	movs	r3, #0
 80011ce:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 80011d0:	6011      	str	r1, [r2, #0]

	return FR_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 80011d6:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000004 	.word	0x20000004

080011e0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80011e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e4:	b08c      	sub	sp, #48	; 0x30
 80011e6:	4605      	mov	r5, r0
 80011e8:	a80c      	add	r0, sp, #48	; 0x30
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 80011ea:	2300      	movs	r3, #0
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80011ec:	f840 1d2c 	str.w	r1, [r0, #-44]!
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 80011f0:	602b      	str	r3, [r5, #0]
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80011f2:	4617      	mov	r7, r2


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80011f4:	f002 061f 	and.w	r6, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 80011f8:	a905      	add	r1, sp, #20
 80011fa:	f002 021e 	and.w	r2, r2, #30
 80011fe:	f7ff fae3 	bl	80007c8 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 8001202:	ab02      	add	r3, sp, #8
 8001204:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK)
 8001206:	b918      	cbnz	r0, 8001210 <f_open+0x30>
		res = follow_path(&dj, path);	/* Follow the file path */
 8001208:	a805      	add	r0, sp, #20
 800120a:	9901      	ldr	r1, [sp, #4]
 800120c:	f7ff fe56 	bl	8000ebc <follow_path>
	dir = dj.dir;
 8001210:	9c0a      	ldr	r4, [sp, #40]	; 0x28

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8001212:	b918      	cbnz	r0, 800121c <f_open+0x3c>
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
 8001214:	2c00      	cmp	r4, #0
 8001216:	bf0c      	ite	eq
 8001218:	2006      	moveq	r0, #6
 800121a:	2000      	movne	r0, #0
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800121c:	f017 0f1c 	tst.w	r7, #28
 8001220:	d049      	beq.n	80012b6 <f_open+0xd6>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8001222:	b148      	cbz	r0, 8001238 <f_open+0x58>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8001224:	2804      	cmp	r0, #4
 8001226:	d102      	bne.n	800122e <f_open+0x4e>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8001228:	a805      	add	r0, sp, #20
 800122a:	f7ff ff47 	bl	80010bc <dir_register>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 800122e:	f046 0608 	orr.w	r6, r6, #8
			dir = dj.dir;					/* New entry */
 8001232:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001234:	b148      	cbz	r0, 800124a <f_open+0x6a>
 8001236:	e079      	b.n	800132c <f_open+0x14c>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8001238:	7ae3      	ldrb	r3, [r4, #11]
 800123a:	f013 0f11 	tst.w	r3, #17
 800123e:	d174      	bne.n	800132a <f_open+0x14a>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8001240:	f007 0704 	and.w	r7, r7, #4
 8001244:	b2ff      	uxtb	r7, r7
 8001246:	2f00      	cmp	r7, #0
 8001248:	d16b      	bne.n	8001322 <f_open+0x142>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800124a:	f006 0308 	and.w	r3, r6, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d03e      	beq.n	80012d2 <f_open+0xf2>
			dw = get_fattime();					/* Created time */
 8001254:	f7ff f97d 	bl	8000552 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
 8001258:	7d22      	ldrb	r2, [r4, #20]
 800125a:	7d67      	ldrb	r7, [r4, #21]
 800125c:	7ee1      	ldrb	r1, [r4, #27]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
 800125e:	73a0      	strb	r0, [r4, #14]
 8001260:	f3c0 2307 	ubfx	r3, r0, #8, #8
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
 8001264:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8001268:	7ea2      	ldrb	r2, [r4, #26]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
 800126a:	73e3      	strb	r3, [r4, #15]
 800126c:	0c03      	lsrs	r3, r0, #16
 800126e:	0e00      	lsrs	r0, r0, #24
 8001270:	7423      	strb	r3, [r4, #16]
 8001272:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8001274:	2300      	movs	r3, #0
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
 8001276:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
 800127a:	9805      	ldr	r0, [sp, #20]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
 800127c:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 800127e:	7723      	strb	r3, [r4, #28]
 8001280:	7763      	strb	r3, [r4, #29]
 8001282:	77a3      	strb	r3, [r4, #30]
 8001284:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8001286:	76a3      	strb	r3, [r4, #26]
 8001288:	76e3      	strb	r3, [r4, #27]
 800128a:	7523      	strb	r3, [r4, #20]
 800128c:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
 800128e:	2301      	movs	r3, #1
			if (cl) {							/* Remove the cluster chain if exist */
 8001290:	ea52 4707 	orrs.w	r7, r2, r7, lsl #16
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
 8001294:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8001296:	d01c      	beq.n	80012d2 <f_open+0xf2>
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
 8001298:	4639      	mov	r1, r7
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
 800129a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
 800129e:	f7ff ff63 	bl	8001168 <remove_chain>
				if (res == FR_OK) {
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d142      	bne.n	800132c <f_open+0x14c>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80012a6:	9805      	ldr	r0, [sp, #20]
 80012a8:	3f01      	subs	r7, #1
 80012aa:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
 80012ac:	4641      	mov	r1, r8
 80012ae:	f7ff f99c 	bl	80005ea <move_window>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
 80012b2:	b170      	cbz	r0, 80012d2 <f_open+0xf2>
 80012b4:	e03a      	b.n	800132c <f_open+0x14c>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d138      	bne.n	800132c <f_open+0x14c>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 80012ba:	7ae3      	ldrb	r3, [r4, #11]
 80012bc:	f003 0210 	and.w	r2, r3, #16
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d12f      	bne.n	8001326 <f_open+0x146>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80012c6:	f007 0702 	and.w	r7, r7, #2
 80012ca:	b2ff      	uxtb	r7, r7
 80012cc:	b10f      	cbz	r7, 80012d2 <f_open+0xf2>
 80012ce:	07d8      	lsls	r0, r3, #31
 80012d0:	d42b      	bmi.n	800132a <f_open+0x14a>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 80012d2:	f006 0308 	and.w	r3, r6, #8
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	b10b      	cbz	r3, 80012de <f_open+0xfe>
			mode |= FA__WRITTEN;
 80012da:	f046 0620 	orr.w	r6, r6, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80012de:	9b05      	ldr	r3, [sp, #20]
 80012e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
 80012e2:	71ae      	strb	r6, [r5, #6]
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80012e4:	61ea      	str	r2, [r5, #28]
		fp->dir_ptr = dir;
 80012e6:	622c      	str	r4, [r5, #32]
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 80012e8:	7d22      	ldrb	r2, [r4, #20]
 80012ea:	7d61      	ldrb	r1, [r4, #21]
 80012ec:	7ee0      	ldrb	r0, [r4, #27]
 80012ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80012f2:	7ea2      	ldrb	r2, [r4, #26]
 80012f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80012f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012fc:	612a      	str	r2, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 80012fe:	7fa2      	ldrb	r2, [r4, #30]
 8001300:	7fe1      	ldrb	r1, [r4, #31]
 8001302:	0412      	lsls	r2, r2, #16
 8001304:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001308:	7f21      	ldrb	r1, [r4, #28]
 800130a:	430a      	orrs	r2, r1
 800130c:	7f61      	ldrb	r1, [r4, #29]
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	88db      	ldrh	r3, [r3, #6]

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
		fp->fptr = 0;						/* File pointer */
 8001312:	2000      	movs	r0, #0
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8001314:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001318:	60ea      	str	r2, [r5, #12]
		fp->fptr = 0;						/* File pointer */
 800131a:	60a8      	str	r0, [r5, #8]
		fp->dsect = 0;
 800131c:	61a8      	str	r0, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 800131e:	80ab      	strh	r3, [r5, #4]
 8001320:	e004      	b.n	800132c <f_open+0x14c>
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
 8001322:	2008      	movs	r0, #8
 8001324:	e002      	b.n	800132c <f_open+0x14c>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
 8001326:	2004      	movs	r0, #4
 8001328:	e000      	b.n	800132c <f_open+0x14c>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
 800132a:	2007      	movs	r0, #7
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
 800132c:	b00c      	add	sp, #48	; 0x30
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001332 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8001332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001336:	4604      	mov	r4, r0
 8001338:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
 800133a:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 800133c:	4688      	mov	r8, r1
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
 800133e:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp->fs, fp->id);				/* Check validity */
 8001342:	6800      	ldr	r0, [r0, #0]
 8001344:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8001346:	4617      	mov	r7, r2
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
 8001348:	f7ff f9e7 	bl	800071a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800134c:	4605      	mov	r5, r0
 800134e:	2800      	cmp	r0, #0
 8001350:	f040 80a2 	bne.w	8001498 <f_read+0x166>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8001354:	79a3      	ldrb	r3, [r4, #6]
 8001356:	0619      	lsls	r1, r3, #24
 8001358:	f100 809b 	bmi.w	8001492 <f_read+0x160>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800135c:	07da      	lsls	r2, r3, #31
 800135e:	f140 809a 	bpl.w	8001496 <f_read+0x164>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8001362:	68e0      	ldr	r0, [r4, #12]
 8001364:	68a3      	ldr	r3, [r4, #8]
 8001366:	1ac6      	subs	r6, r0, r3
 8001368:	42b7      	cmp	r7, r6
 800136a:	bf38      	it	cc
 800136c:	463e      	movcc	r6, r7
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 800136e:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8001372:	e08a      	b.n	800148a <f_read+0x158>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8001374:	68a3      	ldr	r3, [r4, #8]
 8001376:	05da      	lsls	r2, r3, #23
 8001378:	d16f      	bne.n	800145a <f_read+0x128>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800137a:	6820      	ldr	r0, [r4, #0]
 800137c:	7882      	ldrb	r2, [r0, #2]
 800137e:	3a01      	subs	r2, #1
 8001380:	ea02 2253 	and.w	r2, r2, r3, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8001384:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8001388:	d10e      	bne.n	80013a8 <f_read+0x76>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800138a:	b90b      	cbnz	r3, 8001390 <f_read+0x5e>
					clst = fp->sclust;			/* Follow from the origin */
 800138c:	6920      	ldr	r0, [r4, #16]
 800138e:	e004      	b.n	800139a <f_read+0x68>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8001390:	6961      	ldr	r1, [r4, #20]
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	f7ff fba8 	bl	8000ae8 <get_fat>
 8001398:	9a00      	ldr	r2, [sp, #0]
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800139a:	2801      	cmp	r0, #1
 800139c:	d800      	bhi.n	80013a0 <f_read+0x6e>
 800139e:	e00d      	b.n	80013bc <f_read+0x8a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	d100      	bne.n	80013a6 <f_read+0x74>
 80013a4:	e052      	b.n	800144c <f_read+0x11a>
				fp->clust = clst;				/* Update current cluster */
 80013a6:	6160      	str	r0, [r4, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	6961      	ldr	r1, [r4, #20]
 80013ac:	4618      	mov	r0, r3
 80013ae:	e88d 000c 	stmia.w	sp, {r2, r3}
 80013b2:	f7ff fb8d 	bl	8000ad0 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80013b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80013ba:	b920      	cbnz	r0, 80013c6 <f_read+0x94>
 80013bc:	79a3      	ldrb	r3, [r4, #6]
 80013be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c2:	71a3      	strb	r3, [r4, #6]
 80013c4:	e065      	b.n	8001492 <f_read+0x160>
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
 80013c6:	ea5f 2b56 	movs.w	fp, r6, lsr #9
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 80013ca:	eb00 0702 	add.w	r7, r0, r2
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
 80013ce:	d022      	beq.n	8001416 <f_read+0xe4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80013d0:	7899      	ldrb	r1, [r3, #2]
 80013d2:	eb0b 0002 	add.w	r0, fp, r2
 80013d6:	4288      	cmp	r0, r1
					cc = fp->fs->csize - csect;
 80013d8:	bf88      	it	hi
 80013da:	ebc2 0b01 	rsbhi	fp, r2, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 80013de:	7858      	ldrb	r0, [r3, #1]
 80013e0:	4641      	mov	r1, r8
 80013e2:	fa5f f38b 	uxtb.w	r3, fp
 80013e6:	463a      	mov	r2, r7
 80013e8:	f7ff f82c 	bl	8000444 <disk_read>
 80013ec:	79a3      	ldrb	r3, [r4, #6]
 80013ee:	b100      	cbz	r0, 80013f2 <f_read+0xc0>
 80013f0:	e02d      	b.n	800144e <f_read+0x11c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80013f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	b153      	cbz	r3, 8001410 <f_read+0xde>
 80013fa:	69a3      	ldr	r3, [r4, #24]
 80013fc:	1bd8      	subs	r0, r3, r7
 80013fe:	4558      	cmp	r0, fp
 8001400:	d206      	bcs.n	8001410 <f_read+0xde>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8001402:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8001406:	4651      	mov	r1, sl
 8001408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140c:	f7ff f8a3 	bl	8000556 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8001410:	ea4f 274b 	mov.w	r7, fp, lsl #9
				continue;
 8001414:	e02f      	b.n	8001476 <f_read+0x144>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8001416:	69a2      	ldr	r2, [r4, #24]
 8001418:	42ba      	cmp	r2, r7
 800141a:	d01d      	beq.n	8001458 <f_read+0x126>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800141c:	79a1      	ldrb	r1, [r4, #6]
 800141e:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001422:	b2c9      	uxtb	r1, r1
 8001424:	b151      	cbz	r1, 800143c <f_read+0x10a>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001426:	7858      	ldrb	r0, [r3, #1]
 8001428:	4651      	mov	r1, sl
 800142a:	2301      	movs	r3, #1
 800142c:	f7ff f84b 	bl	80004c6 <disk_write>
 8001430:	79a3      	ldrb	r3, [r4, #6]
 8001432:	b100      	cbz	r0, 8001436 <f_read+0x104>
 8001434:	e00b      	b.n	800144e <f_read+0x11c>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
 8001436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800143a:	71a3      	strb	r3, [r4, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	4651      	mov	r1, sl
 8001440:	7858      	ldrb	r0, [r3, #1]
 8001442:	463a      	mov	r2, r7
 8001444:	2301      	movs	r3, #1
 8001446:	f7fe fffd 	bl	8000444 <disk_read>
 800144a:	b128      	cbz	r0, 8001458 <f_read+0x126>
					ABORT(fp->fs, FR_DISK_ERR);
 800144c:	79a3      	ldrb	r3, [r4, #6]
 800144e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001452:	71a3      	strb	r3, [r4, #6]
 8001454:	2501      	movs	r5, #1
 8001456:	e01f      	b.n	8001498 <f_read+0x166>
			}
#endif
			fp->dsect = sect;
 8001458:	61a7      	str	r7, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800145a:	68a1      	ldr	r1, [r4, #8]
 800145c:	05c9      	lsls	r1, r1, #23
 800145e:	0dc9      	lsrs	r1, r1, #23
 8001460:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
 8001464:	42be      	cmp	r6, r7
 8001466:	bf38      	it	cc
 8001468:	4637      	movcc	r7, r6
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800146a:	1861      	adds	r1, r4, r1
 800146c:	4640      	mov	r0, r8
 800146e:	3124      	adds	r1, #36	; 0x24
 8001470:	463a      	mov	r2, r7
 8001472:	f7ff f870 	bl	8000556 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8001476:	68a3      	ldr	r3, [r4, #8]
 8001478:	19db      	adds	r3, r3, r7
 800147a:	60a3      	str	r3, [r4, #8]
 800147c:	f8d9 3000 	ldr.w	r3, [r9]
 8001480:	19db      	adds	r3, r3, r7
 8001482:	44b8      	add	r8, r7
 8001484:	f8c9 3000 	str.w	r3, [r9]
 8001488:	1bf6      	subs	r6, r6, r7
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800148a:	2e00      	cmp	r6, #0
 800148c:	f47f af72 	bne.w	8001374 <f_read+0x42>
 8001490:	e002      	b.n	8001498 <f_read+0x166>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8001492:	2502      	movs	r5, #2
 8001494:	e000      	b.n	8001498 <f_read+0x166>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8001496:	2507      	movs	r5, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8001498:	4628      	mov	r0, r5
 800149a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800149e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 800149e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a2:	4604      	mov	r4, r0
 80014a4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
 80014a6:	2300      	movs	r3, #0
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80014a8:	4688      	mov	r8, r1
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
 80014aa:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp->fs, fp->id);			/* Check validity */
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80014b2:	4616      	mov	r6, r2
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
 80014b4:	f7ff f931 	bl	800071a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80014b8:	4605      	mov	r5, r0
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 80c4 	bne.w	8001648 <f_write+0x1aa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 80014c0:	79a3      	ldrb	r3, [r4, #6]
 80014c2:	061a      	lsls	r2, r3, #24
 80014c4:	d453      	bmi.n	800156e <f_write+0xd0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80ba 	beq.w	8001646 <f_write+0x1a8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 80014d2:	68e3      	ldr	r3, [r4, #12]
 80014d4:	42de      	cmn	r6, r3
 80014d6:	bf28      	it	cs
 80014d8:	2600      	movcs	r6, #0
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80014da:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80014de:	e0a8      	b.n	8001632 <f_write+0x194>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80014e0:	68a3      	ldr	r3, [r4, #8]
 80014e2:	05da      	lsls	r2, r3, #23
 80014e4:	f040 8089 	bne.w	80015fa <f_write+0x15c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	f890 b002 	ldrb.w	fp, [r0, #2]
 80014ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80014f2:	ea0b 2b53 	and.w	fp, fp, r3, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80014f6:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 80014fa:	d11a      	bne.n	8001532 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80014fc:	b933      	cbnz	r3, 800150c <f_write+0x6e>
					clst = fp->sclust;		/* Follow from the origin */
 80014fe:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 8001500:	b979      	cbnz	r1, 8001522 <f_write+0x84>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8001502:	f7ff fc10 	bl	8000d26 <create_chain>
 8001506:	4601      	mov	r1, r0
 8001508:	6120      	str	r0, [r4, #16]
 800150a:	e003      	b.n	8001514 <f_write+0x76>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800150c:	6961      	ldr	r1, [r4, #20]
 800150e:	f7ff fc0a 	bl	8000d26 <create_chain>
 8001512:	4601      	mov	r1, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8001514:	b929      	cbnz	r1, 8001522 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	68e2      	ldr	r2, [r4, #12]
 800151a:	4293      	cmp	r3, r2
 800151c:	f200 808d 	bhi.w	800163a <f_write+0x19c>
 8001520:	e08c      	b.n	800163c <f_write+0x19e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8001522:	2901      	cmp	r1, #1
 8001524:	79a3      	ldrb	r3, [r4, #6]
 8001526:	d100      	bne.n	800152a <f_write+0x8c>
 8001528:	e01e      	b.n	8001568 <f_write+0xca>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800152a:	1c48      	adds	r0, r1, #1
 800152c:	d100      	bne.n	8001530 <f_write+0x92>
 800152e:	e05e      	b.n	80015ee <f_write+0x150>
				fp->clust = clst;			/* Update current cluster */
 8001530:	6161      	str	r1, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8001532:	79a3      	ldrb	r3, [r4, #6]
 8001534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b163      	cbz	r3, 8001556 <f_write+0xb8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	69a2      	ldr	r2, [r4, #24]
 8001540:	7858      	ldrb	r0, [r3, #1]
 8001542:	4651      	mov	r1, sl
 8001544:	2301      	movs	r3, #1
 8001546:	f7fe ffbe 	bl	80004c6 <disk_write>
 800154a:	79a3      	ldrb	r3, [r4, #6]
 800154c:	b100      	cbz	r0, 8001550 <f_write+0xb2>
 800154e:	e04e      	b.n	80015ee <f_write+0x150>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8001550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001554:	71a3      	strb	r3, [r4, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	6961      	ldr	r1, [r4, #20]
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fab7 	bl	8000ad0 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	b928      	cbnz	r0, 8001572 <f_write+0xd4>
 8001566:	79a3      	ldrb	r3, [r4, #6]
 8001568:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156c:	71a3      	strb	r3, [r4, #6]
 800156e:	2502      	movs	r5, #2
 8001570:	e06a      	b.n	8001648 <f_write+0x1aa>
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 8001572:	ea5f 2c56 	movs.w	ip, r6, lsr #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 8001576:	eb00 070b 	add.w	r7, r0, fp
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 800157a:	d029      	beq.n	80015d0 <f_write+0x132>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800157c:	789a      	ldrb	r2, [r3, #2]
					cc = fp->fs->csize - csect;
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 800157e:	7858      	ldrb	r0, [r3, #1]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8001580:	eb0c 010b 	add.w	r1, ip, fp
 8001584:	4291      	cmp	r1, r2
					cc = fp->fs->csize - csect;
 8001586:	bf88      	it	hi
 8001588:	ebcb 0c02 	rsbhi	ip, fp, r2
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 800158c:	fa5f f38c 	uxtb.w	r3, ip
 8001590:	4641      	mov	r1, r8
 8001592:	463a      	mov	r2, r7
 8001594:	f8cd c004 	str.w	ip, [sp, #4]
 8001598:	f7fe ff95 	bl	80004c6 <disk_write>
 800159c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80015a0:	b100      	cbz	r0, 80015a4 <f_write+0x106>
 80015a2:	e023      	b.n	80015ec <f_write+0x14e>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80015a4:	69a3      	ldr	r3, [r4, #24]
 80015a6:	1bd9      	subs	r1, r3, r7
 80015a8:	4561      	cmp	r1, ip
 80015aa:	d20e      	bcs.n	80015ca <f_write+0x12c>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80015ac:	4650      	mov	r0, sl
 80015ae:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	f8cd c004 	str.w	ip, [sp, #4]
 80015ba:	f7fe ffcc 	bl	8000556 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80015be:	79a3      	ldrb	r3, [r4, #6]
 80015c0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80015c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c8:	71a3      	strb	r3, [r4, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80015ca:	ea4f 274c 	mov.w	r7, ip, lsl #9
				continue;
 80015ce:	e026      	b.n	800161e <f_write+0x180>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80015d0:	69a2      	ldr	r2, [r4, #24]
 80015d2:	42ba      	cmp	r2, r7
 80015d4:	d010      	beq.n	80015f8 <f_write+0x15a>
				if (fp->fptr < fp->fsize &&
 80015d6:	68a1      	ldr	r1, [r4, #8]
 80015d8:	68e2      	ldr	r2, [r4, #12]
 80015da:	4291      	cmp	r1, r2
 80015dc:	d20c      	bcs.n	80015f8 <f_write+0x15a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80015de:	7858      	ldrb	r0, [r3, #1]
 80015e0:	4651      	mov	r1, sl
 80015e2:	463a      	mov	r2, r7
 80015e4:	2301      	movs	r3, #1
 80015e6:	f7fe ff2d 	bl	8000444 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 80015ea:	b128      	cbz	r0, 80015f8 <f_write+0x15a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80015ec:	79a3      	ldrb	r3, [r4, #6]
 80015ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f2:	71a3      	strb	r3, [r4, #6]
 80015f4:	2501      	movs	r5, #1
 80015f6:	e027      	b.n	8001648 <f_write+0x1aa>
			}
#endif
			fp->dsect = sect;
 80015f8:	61a7      	str	r7, [r4, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80015fa:	68a0      	ldr	r0, [r4, #8]
 80015fc:	05c0      	lsls	r0, r0, #23
 80015fe:	0dc0      	lsrs	r0, r0, #23
 8001600:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
 8001604:	42be      	cmp	r6, r7
 8001606:	bf38      	it	cc
 8001608:	4637      	movcc	r7, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800160a:	1820      	adds	r0, r4, r0
 800160c:	3024      	adds	r0, #36	; 0x24
 800160e:	4641      	mov	r1, r8
 8001610:	463a      	mov	r2, r7
 8001612:	f7fe ffa0 	bl	8000556 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8001616:	79a3      	ldrb	r3, [r4, #6]
 8001618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800161c:	71a3      	strb	r3, [r4, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800161e:	68a3      	ldr	r3, [r4, #8]
 8001620:	19db      	adds	r3, r3, r7
 8001622:	60a3      	str	r3, [r4, #8]
 8001624:	f8d9 3000 	ldr.w	r3, [r9]
 8001628:	19db      	adds	r3, r3, r7
 800162a:	44b8      	add	r8, r7
 800162c:	f8c9 3000 	str.w	r3, [r9]
 8001630:	1bf6      	subs	r6, r6, r7
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 8001632:	2e00      	cmp	r6, #0
 8001634:	f47f af54 	bne.w	80014e0 <f_write+0x42>
 8001638:	e76d      	b.n	8001516 <f_write+0x78>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800163a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800163c:	79a3      	ldrb	r3, [r4, #6]
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8001644:	e000      	b.n	8001648 <f_write+0x1aa>
	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8001646:	2507      	movs	r5, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 8001648:	4628      	mov	r0, r5
 800164a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800164e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 800164e:	b538      	push	{r3, r4, r5, lr}
 8001650:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8001652:	6800      	ldr	r0, [r0, #0]
 8001654:	88a1      	ldrh	r1, [r4, #4]
 8001656:	f7ff f860 	bl	800071a <validate>
	if (res == FR_OK) {
 800165a:	2800      	cmp	r0, #0
 800165c:	d14c      	bne.n	80016f8 <f_sync+0xaa>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800165e:	79a3      	ldrb	r3, [r4, #6]
 8001660:	f003 0220 	and.w	r2, r3, #32
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	2a00      	cmp	r2, #0
 8001668:	d046      	beq.n	80016f8 <f_sync+0xaa>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b16b      	cbz	r3, 800168e <f_sync+0x40>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001672:	4621      	mov	r1, r4
 8001674:	69a2      	ldr	r2, [r4, #24]
 8001676:	f851 3b24 	ldr.w	r3, [r1], #36
 800167a:	7858      	ldrb	r0, [r3, #1]
 800167c:	2301      	movs	r3, #1
 800167e:	f7fe ff22 	bl	80004c6 <disk_write>
 8001682:	2800      	cmp	r0, #0
 8001684:	d137      	bne.n	80016f6 <f_sync+0xa8>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8001686:	79a3      	ldrb	r3, [r4, #6]
 8001688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800168c:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	69e1      	ldr	r1, [r4, #28]
 8001692:	f7fe ffaa 	bl	80005ea <move_window>
			if (res == FR_OK) {
 8001696:	2800      	cmp	r0, #0
 8001698:	d12e      	bne.n	80016f8 <f_sync+0xaa>
				dir = fp->dir_ptr;
 800169a:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800169c:	7aeb      	ldrb	r3, [r5, #11]
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 80016a4:	68e3      	ldr	r3, [r4, #12]
 80016a6:	772b      	strb	r3, [r5, #28]
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	776b      	strb	r3, [r5, #29]
 80016ae:	89e3      	ldrh	r3, [r4, #14]
 80016b0:	77ab      	strb	r3, [r5, #30]
 80016b2:	7be3      	ldrb	r3, [r4, #15]
 80016b4:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 80016b6:	6923      	ldr	r3, [r4, #16]
 80016b8:	76ab      	strb	r3, [r5, #26]
 80016ba:	8a23      	ldrh	r3, [r4, #16]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	76eb      	strb	r3, [r5, #27]
 80016c0:	8a63      	ldrh	r3, [r4, #18]
 80016c2:	752b      	strb	r3, [r5, #20]
 80016c4:	8a63      	ldrh	r3, [r4, #18]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
 80016ca:	f7fe ff42 	bl	8000552 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
 80016ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80016d2:	75a8      	strb	r0, [r5, #22]
 80016d4:	75eb      	strb	r3, [r5, #23]
 80016d6:	0c03      	lsrs	r3, r0, #16
 80016d8:	0e00      	lsrs	r0, r0, #24
 80016da:	762b      	strb	r3, [r5, #24]
 80016dc:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 80016de:	79a3      	ldrb	r3, [r4, #6]
 80016e0:	f023 0320 	bic.w	r3, r3, #32
 80016e4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 80016ec:	6820      	ldr	r0, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80016ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync(fp->fs);
 80016f2:	f7fe bfb6 	b.w	8000662 <sync>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80016f6:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80016f8:	bd38      	pop	{r3, r4, r5, pc}

080016fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80016fa:	b510      	push	{r4, lr}
 80016fc:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
 80016fe:	f7ff ffa6 	bl	800164e <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8001702:	b900      	cbnz	r0, 8001706 <f_close+0xc>
 8001704:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
 8001706:	bd10      	pop	{r4, pc}

08001708 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
 8001708:	b510      	push	{r4, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	4604      	mov	r4, r0
 800170e:	a806      	add	r0, sp, #24
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
 8001710:	2200      	movs	r2, #0

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
 8001712:	f840 1d14 	str.w	r1, [r0, #-20]!
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f856 	bl	80007c8 <chk_mounted>
	if (res == FR_OK) {
 800171c:	bb38      	cbnz	r0, 800176e <f_opendir+0x66>
		INIT_BUF(*dj);
 800171e:	ab03      	add	r3, sp, #12
 8001720:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8001722:	4620      	mov	r0, r4
 8001724:	9901      	ldr	r1, [sp, #4]
 8001726:	f7ff fbc9 	bl	8000ebc <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800172a:	b990      	cbnz	r0, 8001752 <f_opendir+0x4a>
			if (dj->dir) {						/* It is not the root dir */
 800172c:	6963      	ldr	r3, [r4, #20]
 800172e:	b1b3      	cbz	r3, 800175e <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8001730:	7ada      	ldrb	r2, [r3, #11]
 8001732:	f002 0210 	and.w	r2, r2, #16
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	b17a      	cbz	r2, 800175a <f_opendir+0x52>
					dj->sclust = LD_CLUST(dj->dir);
 800173a:	7d59      	ldrb	r1, [r3, #21]
 800173c:	7d1a      	ldrb	r2, [r3, #20]
 800173e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001742:	7ed9      	ldrb	r1, [r3, #27]
 8001744:	7e9b      	ldrb	r3, [r3, #26]
 8001746:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800174a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800174e:	60a3      	str	r3, [r4, #8]
 8001750:	e005      	b.n	800175e <f_opendir+0x56>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8001752:	2804      	cmp	r0, #4
 8001754:	bf08      	it	eq
 8001756:	2005      	moveq	r0, #5
 8001758:	e009      	b.n	800176e <f_opendir+0x66>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 800175a:	2005      	movs	r0, #5
 800175c:	e007      	b.n	800176e <f_opendir+0x66>
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8001762:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 8001764:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8001766:	2100      	movs	r1, #0
 8001768:	f7ff fa22 	bl	8000bb0 <dir_sdi>
 800176c:	e7f1      	b.n	8001752 <f_opendir+0x4a>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 800176e:	b006      	add	sp, #24
 8001770:	bd10      	pop	{r4, pc}

08001772 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8001772:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001774:	4604      	mov	r4, r0
 8001776:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 8001778:	6800      	ldr	r0, [r0, #0]
 800177a:	88a1      	ldrh	r1, [r4, #4]
 800177c:	f7fe ffcd 	bl	800071a <validate>
	if (res == FR_OK) {
 8001780:	4605      	mov	r5, r0
 8001782:	b9e8      	cbnz	r0, 80017c0 <f_readdir+0x4e>
		if (!fno) {
 8001784:	b926      	cbnz	r6, 8001790 <f_readdir+0x1e>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7ff fa11 	bl	8000bb0 <dir_sdi>
 800178e:	e016      	b.n	80017be <f_readdir+0x4c>
		} else {
			INIT_BUF(*dj);
 8001790:	ab01      	add	r3, sp, #4
 8001792:	61a3      	str	r3, [r4, #24]
			res = dir_read(dj);				/* Read an directory item */
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff fcc0 	bl	800111a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
 800179a:	2804      	cmp	r0, #4
 800179c:	d101      	bne.n	80017a2 <f_readdir+0x30>
				dj->sect = 0;
 800179e:	6125      	str	r5, [r4, #16]
 80017a0:	e000      	b.n	80017a4 <f_readdir+0x32>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80017a2:	b960      	cbnz	r0, 80017be <f_readdir+0x4c>
				get_fileinfo(dj, fno);		/* Get the object information */
 80017a4:	4620      	mov	r0, r4
 80017a6:	4631      	mov	r1, r6
 80017a8:	f7fe fede 	bl	8000568 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
 80017ac:	2100      	movs	r1, #0
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fb07 	bl	8000dc2 <dir_next>
				if (res == FR_NO_FILE) {
 80017b4:	2804      	cmp	r0, #4
 80017b6:	d102      	bne.n	80017be <f_readdir+0x4c>
					dj->sect = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	6123      	str	r3, [r4, #16]
 80017bc:	e000      	b.n	80017c0 <f_readdir+0x4e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
 80017be:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
 80017c0:	4628      	mov	r0, r5
 80017c2:	b004      	add	sp, #16
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080017c8 <dec32>:
//******************************************************************************

char *dec32(unsigned long i)
{
  static char str[16];
  char *s = str + sizeof(str);
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <dec32+0x28>)

  *--s = 0;
 80017ca:	2200      	movs	r2, #0
#endif

//******************************************************************************

char *dec32(unsigned long i)
{
 80017cc:	b510      	push	{r4, lr}

  *--s = 0;

  do
  {
    *--s = '0' + (char)(i % 10);
 80017ce:	210a      	movs	r1, #10
char *dec32(unsigned long i)
{
  static char str[16];
  char *s = str + sizeof(str);

  *--s = 0;
 80017d0:	73da      	strb	r2, [r3, #15]
    fno.lfsize = sizeof lfn;
#endif

//******************************************************************************

char *dec32(unsigned long i)
 80017d2:	330e      	adds	r3, #14

  *--s = 0;

  do
  {
    *--s = '0' + (char)(i % 10);
 80017d4:	fbb0 f2f1 	udiv	r2, r0, r1
 80017d8:	fb01 0012 	mls	r0, r1, r2, r0
 80017dc:	3030      	adds	r0, #48	; 0x30
 80017de:	461c      	mov	r4, r3
 80017e0:	f803 0901 	strb.w	r0, [r3], #-1
    i /= 10;
  }
  while(i);
 80017e4:	4610      	mov	r0, r2
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d1f4      	bne.n	80017d4 <dec32+0xc>

  return(s);
}
 80017ea:	4620      	mov	r0, r4
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008

080017f4 <NVIC_Configuration>:
}

//******************************************************************************

void NVIC_Configuration(void)
{
 80017f4:	b507      	push	{r0, r1, r2, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Configure the NVIC Preemption Priority Bits */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 80017f6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80017fa:	f000 f8ff 	bl	80019fc <NVIC_PriorityGroupConfig>

  NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
 80017fe:	2331      	movs	r3, #49	; 0x31
 8001800:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	f88d 3005 	strb.w	r3, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800180a:	f88d 3006 	strb.w	r3, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 800180e:	a801      	add	r0, sp, #4
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

  NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001810:	2301      	movs	r3, #1
 8001812:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001816:	f000 f8fb 	bl	8001a10 <NVIC_Init>
}
 800181a:	bd0e      	pop	{r1, r2, r3, pc}

0800181c <main>:
}

//******************************************************************************

int main(void)
{
 800181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001820:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
       file (startup_stm32f2xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f2xx.c file
     */

  NVIC_Configuration(); /* Interrupt Config */
 8001824:	f7ff ffe6 	bl	80017f4 <NVIC_Configuration>

//	puts("FsFAT Testing");

	memset(&fs32, 0, sizeof(FATFS));
 8001828:	f44f 720c 	mov.w	r2, #560	; 0x230
 800182c:	2100      	movs	r1, #0
 800182e:	4868      	ldr	r0, [pc, #416]	; (80019d0 <main+0x1b4>)

	res = f_mount(0, &fs32);
 8001830:	4c68      	ldr	r4, [pc, #416]	; (80019d4 <main+0x1b8>)

  NVIC_Configuration(); /* Interrupt Config */

//	puts("FsFAT Testing");

	memset(&fs32, 0, sizeof(FATFS));
 8001832:	f7fe fcf3 	bl	800021c <memset>

	res = f_mount(0, &fs32);
 8001836:	4966      	ldr	r1, [pc, #408]	; (80019d0 <main+0x1b4>)
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fcc1 	bl	80011c0 <f_mount>

//	if (res != FR_OK)
//		printf("res = %d f_mount\n", res);

	res = f_open(&fil, "MESSAGE.TXT", FA_READ);
 800183e:	4966      	ldr	r1, [pc, #408]	; (80019d8 <main+0x1bc>)

//	puts("FsFAT Testing");

	memset(&fs32, 0, sizeof(FATFS));

	res = f_mount(0, &fs32);
 8001840:	7020      	strb	r0, [r4, #0]

//	if (res != FR_OK)
//		printf("res = %d f_mount\n", res);

	res = f_open(&fil, "MESSAGE.TXT", FA_READ);
 8001842:	2201      	movs	r2, #1
 8001844:	4865      	ldr	r0, [pc, #404]	; (80019dc <main+0x1c0>)
 8001846:	f7ff fccb 	bl	80011e0 <f_open>
 800184a:	7020      	strb	r0, [r4, #0]

//	if (res != FR_OK)
//		printf("res = %d f_open MESSAGE.TXT\n", res);

	if (res == FR_OK)
 800184c:	2800      	cmp	r0, #0
 800184e:	d13d      	bne.n	80018cc <main+0xb0>
 8001850:	4605      	mov	r5, r0
			Total += BytesRead;

//			for(i=0; i<BytesRead; i++)
//				putchar(Buffer[i]);

			if (BytesRead < sizeof(Buffer))
 8001852:	f240 16ff 	movw	r6, #511	; 0x1ff
		{
			BYTE Buffer[512];
			UINT BytesRead;
			UINT i;

			res = f_read(&fil, Buffer, sizeof(Buffer), &BytesRead);
 8001856:	4861      	ldr	r0, [pc, #388]	; (80019dc <main+0x1c0>)
 8001858:	a902      	add	r1, sp, #8
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	ab01      	add	r3, sp, #4
 8001860:	f7ff fd67 	bl	8001332 <f_read>
 8001864:	7020      	strb	r0, [r4, #0]

//			if (res != FR_OK)
//				printf("res = %d f_read MESSAGE.TXT\n", res);

			if (res != FR_OK)
 8001866:	b918      	cbnz	r0, 8001870 <main+0x54>
				break;

			Total += BytesRead;
 8001868:	9b01      	ldr	r3, [sp, #4]

//			for(i=0; i<BytesRead; i++)
//				putchar(Buffer[i]);

			if (BytesRead < sizeof(Buffer))
 800186a:	42b3      	cmp	r3, r6
//				printf("res = %d f_read MESSAGE.TXT\n", res);

			if (res != FR_OK)
				break;

			Total += BytesRead;
 800186c:	441d      	add	r5, r3

//			for(i=0; i<BytesRead; i++)
//				putchar(Buffer[i]);

			if (BytesRead < sizeof(Buffer))
 800186e:	d8f2      	bhi.n	8001856 <main+0x3a>
				break;
		}

		res = f_close(&fil); // MESSAGE.TXT
 8001870:	485a      	ldr	r0, [pc, #360]	; (80019dc <main+0x1c0>)
 8001872:	4c58      	ldr	r4, [pc, #352]	; (80019d4 <main+0x1b8>)
 8001874:	f7ff ff41 	bl	80016fa <f_close>
//		if (res != FR_OK)
//			printf("res = %d f_close MESSAGE.TXT\n", res);

//		printf("Total = %d\n", Total);

    res = f_open(&fil, "LENGTH.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 8001878:	4959      	ldr	r1, [pc, #356]	; (80019e0 <main+0x1c4>)

			if (BytesRead < sizeof(Buffer))
				break;
		}

		res = f_close(&fil); // MESSAGE.TXT
 800187a:	7020      	strb	r0, [r4, #0]
//		if (res != FR_OK)
//			printf("res = %d f_close MESSAGE.TXT\n", res);

//		printf("Total = %d\n", Total);

    res = f_open(&fil, "LENGTH.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 800187c:	220a      	movs	r2, #10
 800187e:	4857      	ldr	r0, [pc, #348]	; (80019dc <main+0x1c0>)
 8001880:	f7ff fcae 	bl	80011e0 <f_open>
 8001884:	7020      	strb	r0, [r4, #0]

    if (res == FR_OK)
 8001886:	bb08      	cbnz	r0, 80018cc <main+0xb0>
    {
      UINT BytesWritten;
      char crlf[] = "\r\n";
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <main+0x1c8>)
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	f8ad 2008 	strh.w	r2, [sp, #8]
      char *s = dec32(Total);
 8001892:	4628      	mov	r0, r5
    res = f_open(&fil, "LENGTH.TXT", FA_CREATE_ALWAYS | FA_WRITE);

    if (res == FR_OK)
    {
      UINT BytesWritten;
      char crlf[] = "\r\n";
 8001894:	f88d 300a 	strb.w	r3, [sp, #10]
      char *s = dec32(Total);
 8001898:	f7ff ff96 	bl	80017c8 <dec32>
 800189c:	4605      	mov	r5, r0

      res = f_write(&fil, s, strlen(s), &BytesWritten);
 800189e:	f7fe fd67 	bl	8000370 <strlen>
 80018a2:	4629      	mov	r1, r5
 80018a4:	4602      	mov	r2, r0
 80018a6:	ab01      	add	r3, sp, #4
 80018a8:	484c      	ldr	r0, [pc, #304]	; (80019dc <main+0x1c0>)
 80018aa:	f7ff fdf8 	bl	800149e <f_write>
 80018ae:	7020      	strb	r0, [r4, #0]

      res = f_write(&fil, crlf, strlen(crlf), &BytesWritten);
 80018b0:	a802      	add	r0, sp, #8
 80018b2:	f7fe fd5d 	bl	8000370 <strlen>
 80018b6:	a902      	add	r1, sp, #8
 80018b8:	4602      	mov	r2, r0
 80018ba:	ab01      	add	r3, sp, #4
 80018bc:	4847      	ldr	r0, [pc, #284]	; (80019dc <main+0x1c0>)
 80018be:	f7ff fdee 	bl	800149e <f_write>
 80018c2:	7020      	strb	r0, [r4, #0]

  		res = f_close(&fil); // LENGTH.TXT
 80018c4:	4845      	ldr	r0, [pc, #276]	; (80019dc <main+0x1c0>)
 80018c6:	f7ff ff18 	bl	80016fa <f_close>
 80018ca:	7020      	strb	r0, [r4, #0]
//  		if (res != FR_OK)
//	  		printf("res = %d f_close LENGTH.TXT\n", res);
    }
	}

  res = f_open(&fil, "DIR.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 80018cc:	4843      	ldr	r0, [pc, #268]	; (80019dc <main+0x1c0>)
 80018ce:	4946      	ldr	r1, [pc, #280]	; (80019e8 <main+0x1cc>)
 80018d0:	4c40      	ldr	r4, [pc, #256]	; (80019d4 <main+0x1b8>)
 80018d2:	220a      	movs	r2, #10
 80018d4:	f7ff fc84 	bl	80011e0 <f_open>
 80018d8:	7020      	strb	r0, [r4, #0]

  if (res == FR_OK)
 80018da:	2800      	cmp	r0, #0
 80018dc:	d176      	bne.n	80019cc <main+0x1b0>
  {
    UINT BytesWritten;

  	path = "";
 80018de:	4943      	ldr	r1, [pc, #268]	; (80019ec <main+0x1d0>)
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <main+0x1d4>)

	  res = f_opendir(&dir, path);
 80018e2:	4844      	ldr	r0, [pc, #272]	; (80019f4 <main+0x1d8>)

  if (res == FR_OK)
  {
    UINT BytesWritten;

  	path = "";
 80018e4:	6019      	str	r1, [r3, #0]

	  res = f_opendir(&dir, path);
 80018e6:	f7ff ff0f 	bl	8001708 <f_opendir>
 80018ea:	7020      	strb	r0, [r4, #0]

//	  if (res != FR_OK)
//		  printf("res = %d f_opendir\n", res);

    if (res == FR_OK)
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d16a      	bne.n	80019c6 <main+0x1aa>
		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');

        *s++ = ' ';
 80018f0:	f10d 050d 	add.w	r5, sp, #13
  		{
        char str[256];
        char *s = str;
	  		char *fn;

  			res = f_readdir(&dir, &fno);
 80018f4:	4c40      	ldr	r4, [pc, #256]	; (80019f8 <main+0x1dc>)
 80018f6:	483f      	ldr	r0, [pc, #252]	; (80019f4 <main+0x1d8>)
 80018f8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80019d4 <main+0x1b8>
 80018fc:	4621      	mov	r1, r4
 80018fe:	f7ff ff38 	bl	8001772 <f_readdir>
 8001902:	4680      	mov	r8, r0
 8001904:	f889 0000 	strb.w	r0, [r9]

//	  		if (res != FR_OK)
//		  		printf("res = %d f_readdir\n", res);

			  if ((res != FR_OK) || (fno.fname[0] == 0))
 8001908:	2800      	cmp	r0, #0
 800190a:	d15c      	bne.n	80019c6 <main+0x1aa>
 800190c:	7a63      	ldrb	r3, [r4, #9]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d059      	beq.n	80019c6 <main+0x1aa>
        fn = *fno.lfname ? fno.lfname : fno.fname;
#else
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
 8001912:	7a23      	ldrb	r3, [r4, #8]
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');

        *s++ = ' ';

        strcpy(s, dec32(fno.fsize));
 8001914:	6820      	ldr	r0, [r4, #0]
        fn = *fno.lfname ? fno.lfname : fno.fname;
#else
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
 8001916:	f003 0210 	and.w	r2, r3, #16
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	2a00      	cmp	r2, #0
 800191e:	bf0c      	ite	eq
 8001920:	222d      	moveq	r2, #45	; 0x2d
 8001922:	2244      	movne	r2, #68	; 0x44
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
 8001924:	f013 0f01 	tst.w	r3, #1
        fn = *fno.lfname ? fno.lfname : fno.fname;
#else
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
 8001928:	f88d 2008 	strb.w	r2, [sp, #8]
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
 800192c:	bf0c      	ite	eq
 800192e:	222d      	moveq	r2, #45	; 0x2d
 8001930:	2252      	movne	r2, #82	; 0x52
 8001932:	f88d 2009 	strb.w	r2, [sp, #9]
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
 8001936:	f003 0204 	and.w	r2, r3, #4
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');
 800193a:	f003 0302 	and.w	r3, r3, #2
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
 800193e:	b2d2      	uxtb	r2, r2
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');
 8001940:	b2db      	uxtb	r3, r3
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
 8001942:	2a00      	cmp	r2, #0
 8001944:	bf0c      	ite	eq
 8001946:	222d      	moveq	r2, #45	; 0x2d
 8001948:	2253      	movne	r2, #83	; 0x53
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf0c      	ite	eq
 800194e:	232d      	moveq	r3, #45	; 0x2d
 8001950:	2348      	movne	r3, #72	; 0x48

        *s++ = ' ';
 8001952:	2620      	movs	r6, #32
        fn = fno.fname;
#endif

		  	*s++ = ((fno.fattrib & AM_DIR) ? 'D' : '-');
				*s++ = ((fno.fattrib & AM_RDO) ? 'R' : '-');
  			*s++ = ((fno.fattrib & AM_SYS) ? 'S' : '-');
 8001954:	f88d 200a 	strb.w	r2, [sp, #10]
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');
 8001958:	f88d 300b 	strb.w	r3, [sp, #11]

        *s++ = ' ';
 800195c:	f88d 600c 	strb.w	r6, [sp, #12]

        strcpy(s, dec32(fno.fsize));
 8001960:	f7ff ff32 	bl	80017c8 <dec32>
 8001964:	4601      	mov	r1, r0
 8001966:	4628      	mov	r0, r5
 8001968:	f7fe fca4 	bl	80002b4 <strcpy>
        s += strlen(s);
 800196c:	4628      	mov	r0, r5
 800196e:	f7fe fcff 	bl	8000370 <strlen>

        *s++ = ' ';

        strcpy(s, path);
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <main+0x1d4>)
        *s++ = ' ';

        strcpy(s, dec32(fno.fsize));
        s += strlen(s);

        *s++ = ' ';
 8001974:	542e      	strb	r6, [r5, r0]
	  		*s++ = ((fno.fattrib & AM_HID) ? 'H' : '-');

        *s++ = ' ';

        strcpy(s, dec32(fno.fsize));
        s += strlen(s);
 8001976:	182f      	adds	r7, r5, r0

        *s++ = ' ';
 8001978:	3701      	adds	r7, #1

        strcpy(s, path);
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4638      	mov	r0, r7
 800197e:	f7fe fc99 	bl	80002b4 <strcpy>
        s += strlen(s);
 8001982:	4638      	mov	r0, r7
 8001984:	f7fe fcf4 	bl	8000370 <strlen>
 8001988:	183e      	adds	r6, r7, r0

        *s++ = '/';
 800198a:	232f      	movs	r3, #47	; 0x2f
 800198c:	3601      	adds	r6, #1
 800198e:	543b      	strb	r3, [r7, r0]

        strcpy(s, fn);
 8001990:	f104 0109 	add.w	r1, r4, #9
 8001994:	4630      	mov	r0, r6
 8001996:	f7fe fc8d 	bl	80002b4 <strcpy>
        s += strlen(s);
 800199a:	4630      	mov	r0, r6
 800199c:	f7fe fce8 	bl	8000370 <strlen>

        *s++ = 0x0D;
 80019a0:	220d      	movs	r2, #13
        s += strlen(s);

        *s++ = '/';

        strcpy(s, fn);
        s += strlen(s);
 80019a2:	1833      	adds	r3, r6, r0

        *s++ = 0x0D;
 80019a4:	5432      	strb	r2, [r6, r0]
        *s++ = 0x0A;
 80019a6:	220a      	movs	r2, #10
 80019a8:	705a      	strb	r2, [r3, #1]
        *s++ = 0;
 80019aa:	f883 8002 	strb.w	r8, [r3, #2]

        res = f_write(&fil, str, strlen(str), &BytesWritten);
 80019ae:	a802      	add	r0, sp, #8
 80019b0:	f7fe fcde 	bl	8000370 <strlen>
 80019b4:	a902      	add	r1, sp, #8
 80019b6:	4602      	mov	r2, r0
 80019b8:	ab01      	add	r3, sp, #4
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <main+0x1c0>)
 80019bc:	f7ff fd6f 	bl	800149e <f_write>
 80019c0:	f889 0000 	strb.w	r0, [r9]
  		}
 80019c4:	e796      	b.n	80018f4 <main+0xd8>
    }

  	res = f_close(&fil); // DIR.TXT
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <main+0x1c0>)
 80019c8:	f7ff fe97 	bl	80016fa <f_close>
 80019cc:	e7fe      	b.n	80019cc <main+0x1b0>
 80019ce:	bf00      	nop
 80019d0:	20000054 	.word	0x20000054
 80019d4:	200002b8 	.word	0x200002b8
 80019d8:	0800306f 	.word	0x0800306f
 80019dc:	200002bc 	.word	0x200002bc
 80019e0:	0800307b 	.word	0x0800307b
 80019e4:	0800308e 	.word	0x0800308e
 80019e8:	08003086 	.word	0x08003086
 80019ec:	08003090 	.word	0x08003090
 80019f0:	20000050 	.word	0x20000050
 80019f4:	2000029c 	.word	0x2000029c
 80019f8:	20000284 	.word	0x20000284

080019fc <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80019fc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <NVIC_PriorityGroupConfig+0x10>)
 8001a02:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001a06:	60d8      	str	r0, [r3, #12]
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001a10:	78c3      	ldrb	r3, [r0, #3]
 8001a12:	b313      	cbz	r3, 8001a5a <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001a16:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8001a20:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001a30:	7881      	ldrb	r1, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001a32:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001a34:	400b      	ands	r3, r1
 8001a36:	431a      	orrs	r2, r3

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001a38:	7803      	ldrb	r3, [r0, #0]
 8001a3a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a3e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001a46:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001a4a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001a4c:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001a4e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	e007      	b.n	8001a6a <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001a5a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001a5c:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001a5e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001a68:	3120      	adds	r1, #32
 8001a6a:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <NVIC_Init+0x68>)
 8001a6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 8001a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 8001a80:	4c2e      	ldr	r4, [pc, #184]	; (8001b3c <SD_LowLevel_Init+0xc0>)
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 8001a82:	4f2f      	ldr	r7, [pc, #188]	; (8001b40 <SD_LowLevel_Init+0xc4>)
void SD_LowLevel_Init(void)
{
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 8001a84:	200c      	movs	r0, #12
 8001a86:	2101      	movs	r1, #1
 8001a88:	f001 f994 	bl	8002db4 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	2108      	movs	r1, #8
 8001a90:	220c      	movs	r2, #12
 8001a92:	f001 f977 	bl	8002d84 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 8001a96:	4620      	mov	r0, r4
 8001a98:	2109      	movs	r1, #9
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	f001 f972 	bl	8002d84 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	210a      	movs	r1, #10
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	f001 f96d 	bl	8002d84 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	210b      	movs	r1, #11
 8001aae:	220c      	movs	r2, #12
 8001ab0:	f001 f968 	bl	8002d84 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 8001ab4:	210c      	movs	r1, #12
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	460a      	mov	r2, r1
 8001aba:	f001 f963 	bl	8002d84 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	f001 f95e 	bl	8002d84 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8001ac8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8001acc:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ace:	2600      	movs	r6, #0
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8001ad0:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ad2:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ad4:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ad6:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ad8:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001adc:	f04f 0804 	mov.w	r8, #4
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8001ae0:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ae4:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ae8:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001aec:	f001 f8ff 	bl	8002cee <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001af0:	4638      	mov	r0, r7
 8001af2:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001af4:	f8cd 8000 	str.w	r8, [sp]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001af8:	f001 f8f9 	bl	8002cee <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b00:	4620      	mov	r0, r4
 8001b02:	4669      	mov	r1, sp
  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001b04:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b06:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b0a:	f001 f8f0 	bl	8002cee <GPIO_Init>

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8001b12:	f8cd 8000 	str.w	r8, [sp]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b16:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b1a:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8001b1e:	f001 f8e6 	bl	8002cee <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 8001b22:	4629      	mov	r1, r5
 8001b24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b28:	f001 f950 	bl	8002dcc <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 8001b2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001b30:	4629      	mov	r1, r5
 8001b32:	f001 f93f 	bl	8002db4 <RCC_AHB1PeriphClockCmd>
}
 8001b36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 8001b44:	b530      	push	{r4, r5, lr}
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8001b46:	4c22      	ldr	r4, [pc, #136]	; (8001bd0 <SD_LowLevel_DMA_TxConfig+0x8c>)
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 8001b48:	b091      	sub	sp, #68	; 0x44
 8001b4a:	4605      	mov	r5, r0
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8001b4c:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8001b50:	4620      	mov	r0, r4
 8001b52:	f001 f895 	bl	8002c80 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8001b56:	2100      	movs	r1, #0
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f001 f87f 	bl	8002c5c <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f000 ffc4 	bl	8002aec <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8001b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b68:	9301      	str	r3, [sp, #4]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <SD_LowLevel_DMA_TxConfig+0x90>)
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 8001b6c:	9503      	str	r5, [sp, #12]

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001b6e:	9302      	str	r3, [sp, #8]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	9304      	str	r3, [sp, #16]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	9305      	str	r3, [sp, #20]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001b78:	9306      	str	r3, [sp, #24]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001b7a:	930a      	str	r3, [sp, #40]	; 0x28
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001b7c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b80:	930b      	str	r3, [sp, #44]	; 0x2c
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8001b82:	2304      	movs	r3, #4
 8001b84:	930c      	str	r3, [sp, #48]	; 0x30
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001b8a:	2303      	movs	r3, #3
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001b8c:	9207      	str	r2, [sp, #28]
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001b8e:	930d      	str	r3, [sp, #52]	; 0x34
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001b94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001b98:	9208      	str	r2, [sp, #32]
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001b9a:	930e      	str	r3, [sp, #56]	; 0x38
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001b9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001ba0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	a901      	add	r1, sp, #4
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001baa:	9209      	str	r2, [sp, #36]	; 0x24
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001bac:	f001 f82c 	bl	8002c08 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f001 f87b 	bl	8002cb0 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8001bba:	4620      	mov	r0, r4
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	f001 f856 	bl	8002c6e <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	f001 f849 	bl	8002c5c <DMA_Cmd>

}
 8001bca:	b011      	add	sp, #68	; 0x44
 8001bcc:	bd30      	pop	{r4, r5, pc}
 8001bce:	bf00      	nop
 8001bd0:	40026458 	.word	0x40026458
 8001bd4:	40012c80 	.word	0x40012c80

08001bd8 <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8001bd8:	b530      	push	{r4, r5, lr}
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8001bda:	4c21      	ldr	r4, [pc, #132]	; (8001c60 <SD_LowLevel_DMA_RxConfig+0x88>)
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8001bdc:	b091      	sub	sp, #68	; 0x44
 8001bde:	4605      	mov	r5, r0
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8001be0:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8001be4:	4620      	mov	r0, r4
 8001be6:	f001 f84b 	bl	8002c80 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8001bea:	2100      	movs	r1, #0
 8001bec:	4620      	mov	r0, r4
 8001bee:	f001 f835 	bl	8002c5c <DMA_Cmd>

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 ff7a 	bl	8002aec <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8001bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bfc:	9301      	str	r3, [sp, #4]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <SD_LowLevel_DMA_RxConfig+0x8c>)
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 8001c00:	9503      	str	r5, [sp, #12]

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001c02:	9302      	str	r3, [sp, #8]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001c04:	2300      	movs	r3, #0
 8001c06:	9304      	str	r3, [sp, #16]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8001c08:	9305      	str	r3, [sp, #20]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001c0a:	9306      	str	r3, [sp, #24]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001c0c:	930a      	str	r3, [sp, #40]	; 0x28
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001c0e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c12:	930b      	str	r3, [sp, #44]	; 0x2c
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8001c14:	2304      	movs	r3, #4
 8001c16:	930c      	str	r3, [sp, #48]	; 0x30
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001c1c:	2303      	movs	r3, #3
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001c1e:	9207      	str	r2, [sp, #28]
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001c20:	930d      	str	r3, [sp, #52]	; 0x34
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001c26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001c2a:	9208      	str	r2, [sp, #32]
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001c2c:	930e      	str	r3, [sp, #56]	; 0x38
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001c32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001c36:	4620      	mov	r0, r4
 8001c38:	a901      	add	r1, sp, #4
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001c3a:	930f      	str	r3, [sp, #60]	; 0x3c
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001c3c:	9209      	str	r2, [sp, #36]	; 0x24
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001c3e:	f000 ffe3 	bl	8002c08 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8001c42:	4620      	mov	r0, r4
 8001c44:	2110      	movs	r1, #16
 8001c46:	2201      	movs	r2, #1
 8001c48:	f001 f832 	bl	8002cb0 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	2120      	movs	r1, #32
 8001c50:	f001 f80d 	bl	8002c6e <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8001c54:	4620      	mov	r0, r4
 8001c56:	2101      	movs	r1, #1
 8001c58:	f001 f800 	bl	8002c5c <DMA_Cmd>
}
 8001c5c:	b011      	add	sp, #68	; 0x44
 8001c5e:	bd30      	pop	{r4, r5, pc}
 8001c60:	40026458 	.word	0x40026458
 8001c64:	40012c80 	.word	0x40012c80

08001c68 <CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp2Error(void)
{
 8001c68:	b510      	push	{r4, lr}
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <CmdResp2Error+0x38>)

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
  {
    status = SDIO->STA;
 8001c6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8001c6e:	f010 0f45 	tst.w	r0, #69	; 0x45
 8001c72:	d0fb      	beq.n	8001c6c <CmdResp2Error+0x4>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8001c74:	0743      	lsls	r3, r0, #29
 8001c76:	d504      	bpl.n	8001c82 <CmdResp2Error+0x1a>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f001 f959 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 8001c7e:	2003      	movs	r0, #3
 8001c80:	bd10      	pop	{r4, pc}
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8001c82:	f010 0401 	ands.w	r4, r0, #1
 8001c86:	d004      	beq.n	8001c92 <CmdResp2Error+0x2a>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f001 f951 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	bd10      	pop	{r4, pc}
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001c92:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001c96:	f001 f94b 	bl	8002f30 <SDIO_ClearFlag>

  return(errorstatus);
 8001c9a:	4620      	mov	r0, r4
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40012c00 	.word	0x40012c00

08001ca4 <CmdResp1Error>:
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 8001ca4:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <CmdResp1Error+0xec>)
  * @brief  Checks for error conditions for R1 response.
  * @param  cmd: The sent command index.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error CmdResp1Error(uint8_t cmd)
{
 8001ca6:	b538      	push	{r3, r4, r5, lr}
 8001ca8:	4605      	mov	r5, r0

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
  {
    status = SDIO->STA;
 8001caa:	6b53      	ldr	r3, [r2, #52]	; 0x34
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8001cac:	f013 0f45 	tst.w	r3, #69	; 0x45
 8001cb0:	d0fb      	beq.n	8001caa <CmdResp1Error+0x6>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8001cb2:	0759      	lsls	r1, r3, #29
 8001cb4:	d504      	bpl.n	8001cc0 <CmdResp1Error+0x1c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8001cb6:	2004      	movs	r0, #4
 8001cb8:	f001 f93a 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8001cc0:	f013 0401 	ands.w	r4, r3, #1
 8001cc4:	d004      	beq.n	8001cd0 <CmdResp1Error+0x2c>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f001 f932 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 8001cd0:	f001 f8e4 	bl	8002e9c <SDIO_GetCommandResponse>
 8001cd4:	42a8      	cmp	r0, r5
 8001cd6:	d158      	bne.n	8001d8a <CmdResp1Error+0xe6>
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001cd8:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001cdc:	f001 f928 	bl	8002f30 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f001 f8e1 	bl	8002ea8 <SDIO_GetResponse>

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <CmdResp1Error+0xf0>)
 8001ce8:	4003      	ands	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d029      	beq.n	8001d42 <CmdResp1Error+0x9e>
  {
    return(errorstatus);
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	db29      	blt.n	8001d46 <CmdResp1Error+0xa2>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
 8001cf2:	0042      	lsls	r2, r0, #1
 8001cf4:	d429      	bmi.n	8001d4a <CmdResp1Error+0xa6>
  {
    return(SD_ADDR_MISALIGNED);
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
 8001cf6:	0083      	lsls	r3, r0, #2
 8001cf8:	d429      	bmi.n	8001d4e <CmdResp1Error+0xaa>
  {
    return(SD_BLOCK_LEN_ERR);
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
 8001cfa:	00c1      	lsls	r1, r0, #3
 8001cfc:	d429      	bmi.n	8001d52 <CmdResp1Error+0xae>
  {
    return(SD_ERASE_SEQ_ERR);
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
 8001cfe:	0102      	lsls	r2, r0, #4
 8001d00:	d429      	bmi.n	8001d56 <CmdResp1Error+0xb2>
  {
    return(SD_BAD_ERASE_PARAM);
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
 8001d02:	0143      	lsls	r3, r0, #5
 8001d04:	d429      	bmi.n	8001d5a <CmdResp1Error+0xb6>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
 8001d06:	01c1      	lsls	r1, r0, #7
 8001d08:	d429      	bmi.n	8001d5e <CmdResp1Error+0xba>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
 8001d0a:	0202      	lsls	r2, r0, #8
 8001d0c:	d429      	bmi.n	8001d62 <CmdResp1Error+0xbe>
  {
    return(SD_COM_CRC_FAILED);
  }

  if (response_r1 & SD_OCR_ILLEGAL_CMD)
 8001d0e:	0243      	lsls	r3, r0, #9
 8001d10:	d43b      	bmi.n	8001d8a <CmdResp1Error+0xe6>
  {
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
 8001d12:	0281      	lsls	r1, r0, #10
 8001d14:	d427      	bmi.n	8001d66 <CmdResp1Error+0xc2>
  {
    return(SD_CARD_ECC_FAILED);
  }

  if (response_r1 & SD_OCR_CC_ERROR)
 8001d16:	02c2      	lsls	r2, r0, #11
 8001d18:	d427      	bmi.n	8001d6a <CmdResp1Error+0xc6>
  {
    return(SD_CC_ERROR);
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 8001d1a:	0303      	lsls	r3, r0, #12
 8001d1c:	d427      	bmi.n	8001d6e <CmdResp1Error+0xca>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
 8001d1e:	0341      	lsls	r1, r0, #13
 8001d20:	d427      	bmi.n	8001d72 <CmdResp1Error+0xce>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
 8001d22:	0382      	lsls	r2, r0, #14
 8001d24:	d427      	bmi.n	8001d76 <CmdResp1Error+0xd2>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
 8001d26:	03c3      	lsls	r3, r0, #15
 8001d28:	d427      	bmi.n	8001d7a <CmdResp1Error+0xd6>
  {
    return(SD_CID_CSD_OVERWRITE);
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
 8001d2a:	0401      	lsls	r1, r0, #16
 8001d2c:	d427      	bmi.n	8001d7e <CmdResp1Error+0xda>
  {
    return(SD_WP_ERASE_SKIP);
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
 8001d2e:	0442      	lsls	r2, r0, #17
 8001d30:	d427      	bmi.n	8001d82 <CmdResp1Error+0xde>
  {
    return(SD_CARD_ECC_DISABLED);
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
 8001d32:	0483      	lsls	r3, r0, #18
 8001d34:	d427      	bmi.n	8001d86 <CmdResp1Error+0xe2>
    return(SD_ERASE_RESET);
  }

  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
  {
    return(SD_AKE_SEQ_ERROR);
 8001d36:	f010 0f08 	tst.w	r0, #8
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2000      	moveq	r0, #0
 8001d3e:	201a      	movne	r0, #26
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
  /*!< We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
  {
    return(errorstatus);
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8001d46:	201c      	movs	r0, #28
 8001d48:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 8001d4a:	2009      	movs	r0, #9
 8001d4c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 8001d52:	200b      	movs	r0, #11
 8001d54:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 8001d56:	200c      	movs	r0, #12
 8001d58:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 8001d5a:	200d      	movs	r0, #13
 8001d5c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8001d5e:	200e      	movs	r0, #14
 8001d60:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 8001d62:	200f      	movs	r0, #15
 8001d64:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 8001d66:	2011      	movs	r0, #17
 8001d68:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 8001d6a:	2012      	movs	r0, #18
 8001d6c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8001d6e:	2013      	movs	r0, #19
 8001d70:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 8001d72:	2014      	movs	r0, #20
 8001d74:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8001d76:	2015      	movs	r0, #21
 8001d78:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
  {
    return(SD_CID_CSD_OVERWRITE);
 8001d7a:	2016      	movs	r0, #22
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 8001d7e:	2017      	movs	r0, #23
 8001d80:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 8001d82:	2018      	movs	r0, #24
 8001d84:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 8001d86:	2019      	movs	r0, #25
 8001d88:	bd38      	pop	{r3, r4, r5, pc}

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
  {
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
 8001d8a:	2010      	movs	r0, #16
  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
  {
    return(SD_AKE_SEQ_ERROR);
  }
  return(errorstatus);
}
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	fdffe008 	.word	0xfdffe008

08001d98 <SDEnWideBus>:
  * @param  NewState: new state of the SDIO wide bus mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error SDEnWideBus(FunctionalState NewState)
{
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	4681      	mov	r9, r0
 8001d9e:	b085      	sub	sp, #20
  SD_Error errorstatus = SD_OK;

  uint32_t scr[2] = {0, 0};

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f001 f881 	bl	8002ea8 <SDIO_GetResponse>
 8001da6:	f010 7600 	ands.w	r6, r0, #33554432	; 0x2000000
 8001daa:	f040 80db 	bne.w	8001f64 <SDEnWideBus+0x1cc>
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 8001dae:	4d71      	ldr	r5, [pc, #452]	; (8001f74 <SDEnWideBus+0x1dc>)
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
  uint32_t index = 0;
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};
 8001db0:	9602      	str	r6, [sp, #8]

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8001db2:	2410      	movs	r4, #16
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001db4:	4628      	mov	r0, r5
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 8001db6:	f04f 0a08 	mov.w	sl, #8
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001dba:	f04f 0840 	mov.w	r8, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001dbe:	f44f 6780 	mov.w	r7, #1024	; 0x400
  uint32_t tempscr[2] = {0, 0};

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8001dc2:	606c      	str	r4, [r5, #4]
  */
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
  uint32_t index = 0;
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};
 8001dc4:	9603      	str	r6, [sp, #12]

  /*!< Set Block Size To 8 Bytes */
  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 8001dc6:	f8c5 a000 	str.w	sl, [r5]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001dca:	f8c5 8008 	str.w	r8, [r5, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001dce:	60ee      	str	r6, [r5, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001dd0:	612f      	str	r7, [r5, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001dd2:	f001 f84d 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ff64 	bl	8001ca4 <CmdResp1Error>
 8001ddc:	4604      	mov	r4, r0

  if (errorstatus != SD_OK)
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d172      	bne.n	8001ec8 <SDEnWideBus+0x130>
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001de2:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <SDEnWideBus+0x1e0>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001de4:	60e8      	str	r0, [r5, #12]
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001de6:	6812      	ldr	r2, [r2, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001de8:	f8c5 8008 	str.w	r8, [r5, #8]
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001dec:	0412      	lsls	r2, r2, #16
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001dee:	2637      	movs	r6, #55	; 0x37
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001df0:	4628      	mov	r0, r5
  {
    return(errorstatus);
  }

  /*!< Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001df2:	602a      	str	r2, [r5, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001df4:	606e      	str	r6, [r5, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001df6:	612f      	str	r7, [r5, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001df8:	9401      	str	r4, [sp, #4]
 8001dfa:	f001 f839 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7ff ff50 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001e04:	9b01      	ldr	r3, [sp, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8001e06:	4604      	mov	r4, r0
 8001e08:	4683      	mov	fp, r0

  if (errorstatus != SD_OK)
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d15f      	bne.n	8001ece <SDEnWideBus+0x136>
  {
    return(errorstatus);
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001e0e:	485b      	ldr	r0, [pc, #364]	; (8001f7c <SDEnWideBus+0x1e4>)
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
  SDIO_DataInitStructure.SDIO_DataLength = 8;
 8001e14:	e880 0404 	stmia.w	r0, {r2, sl}
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 8001e18:	2230      	movs	r2, #48	; 0x30
 8001e1a:	6082      	str	r2, [r0, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	60c2      	str	r2, [r0, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8001e20:	2201      	movs	r2, #1
 8001e22:	6142      	str	r2, [r0, #20]
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 8;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001e24:	6104      	str	r4, [r0, #16]
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
 8001e26:	2633      	movs	r6, #51	; 0x33
  SDIO_DataInitStructure.SDIO_DataLength = 8;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8001e28:	f001 f84a 	bl	8002ec0 <SDIO_DataConfig>
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001e2c:	4628      	mov	r0, r5
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001e2e:	602c      	str	r4, [r5, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001e30:	60ec      	str	r4, [r5, #12]
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
 8001e32:	606e      	str	r6, [r5, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001e34:	f8c5 8008 	str.w	r8, [r5, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001e38:	612f      	str	r7, [r5, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001e3a:	f001 f819 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f7ff ff30 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001e44:	4604      	mov	r4, r0
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d140      	bne.n	8001ecc <SDEnWideBus+0x134>
  * @brief  Enables or disables the SDIO wide bus mode.
  * @param  NewState: new state of the SDIO wide bus mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval SD_Error: SD Card Error code.
  */
static SD_Error SDEnWideBus(FunctionalState NewState)
 8001e4a:	ad01      	add	r5, sp, #4
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 8001e4c:	4e4c      	ldr	r6, [pc, #304]	; (8001f80 <SDEnWideBus+0x1e8>)
 8001e4e:	e008      	b.n	8001e62 <SDEnWideBus+0xca>
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 8001e50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e54:	f001 f862 	bl	8002f1c <SDIO_GetFlagStatus>
 8001e58:	b118      	cbz	r0, 8001e62 <SDEnWideBus+0xca>
    {
      *(tempscr + index) = SDIO_ReadData();
 8001e5a:	f001 f847 	bl	8002eec <SDIO_ReadData>
 8001e5e:	f845 0f04 	str.w	r0, [r5, #4]!
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 8001e62:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8001e64:	f240 632a 	movw	r3, #1578	; 0x62a
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <SDEnWideBus+0xb8>
      *(tempscr + index) = SDIO_ReadData();
      index++;
    }
  }

  if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8001e6e:	2008      	movs	r0, #8
 8001e70:	f001 f854 	bl	8002f1c <SDIO_GetFlagStatus>
 8001e74:	b120      	cbz	r0, 8001e80 <SDEnWideBus+0xe8>
  {
    SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8001e76:	2008      	movs	r0, #8
 8001e78:	f001 f85a 	bl	8002f30 <SDIO_ClearFlag>
    errorstatus = SD_DATA_TIMEOUT;
    return(errorstatus);
 8001e7c:	2404      	movs	r4, #4
 8001e7e:	e074      	b.n	8001f6a <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8001e80:	2002      	movs	r0, #2
 8001e82:	f001 f84b 	bl	8002f1c <SDIO_GetFlagStatus>
 8001e86:	b120      	cbz	r0, 8001e92 <SDEnWideBus+0xfa>
  {
    SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f001 f851 	bl	8002f30 <SDIO_ClearFlag>
    errorstatus = SD_DATA_CRC_FAIL;
    return(errorstatus);
 8001e8e:	2402      	movs	r4, #2
 8001e90:	e06b      	b.n	8001f6a <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 8001e92:	2020      	movs	r0, #32
 8001e94:	f001 f842 	bl	8002f1c <SDIO_GetFlagStatus>
 8001e98:	b120      	cbz	r0, 8001ea4 <SDEnWideBus+0x10c>
  {
    SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 8001e9a:	2020      	movs	r0, #32
 8001e9c:	f001 f848 	bl	8002f30 <SDIO_ClearFlag>
    errorstatus = SD_RX_OVERRUN;
    return(errorstatus);
 8001ea0:	2406      	movs	r4, #6
 8001ea2:	e062      	b.n	8001f6a <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8001ea4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ea8:	f001 f838 	bl	8002f1c <SDIO_GetFlagStatus>
 8001eac:	b128      	cbz	r0, 8001eba <SDEnWideBus+0x122>
  {
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8001eae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eb2:	f001 f83d 	bl	8002f30 <SDIO_ClearFlag>
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
 8001eb6:	2407      	movs	r4, #7
 8001eb8:	e057      	b.n	8001f6a <SDEnWideBus+0x1d2>
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001eba:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001ebe:	f001 f837 	bl	8002f30 <SDIO_ClearFlag>
 8001ec2:	9b02      	ldr	r3, [sp, #8]
 8001ec4:	ba1b      	rev	r3, r3
 8001ec6:	e004      	b.n	8001ed2 <SDEnWideBus+0x13a>
  */
static SD_Error SDEnWideBus(FunctionalState NewState)
{
  SD_Error errorstatus = SD_OK;

  uint32_t scr[2] = {0, 0};
 8001ec8:	4633      	mov	r3, r6
 8001eca:	e000      	b.n	8001ece <SDEnWideBus+0x136>
 8001ecc:	465b      	mov	r3, fp
  }

  /*!< Get SCR Register */
  errorstatus = FindSCR(RCA, scr);

  if (errorstatus != SD_OK)
 8001ece:	2c00      	cmp	r4, #0
 8001ed0:	d14b      	bne.n	8001f6a <SDEnWideBus+0x1d2>
  {
    return(errorstatus);
  }

  /*!< If wide bus operation to be enabled */
  if (NewState == ENABLE)
 8001ed2:	f1b9 0f01 	cmp.w	r9, #1
 8001ed6:	d11c      	bne.n	8001f12 <SDEnWideBus+0x17a>
  {
    /*!< If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8001ed8:	035b      	lsls	r3, r3, #13
 8001eda:	d545      	bpl.n	8001f68 <SDEnWideBus+0x1d0>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <SDEnWideBus+0x1e0>)
 8001ede:	4d25      	ldr	r5, [pc, #148]	; (8001f74 <SDEnWideBus+0x1dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001ee2:	60ec      	str	r4, [r5, #12]
  {
    /*!< If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001ee4:	041b      	lsls	r3, r3, #16
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001ee6:	2637      	movs	r6, #55	; 0x37
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001ee8:	4628      	mov	r0, r5
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001eea:	f04f 0840 	mov.w	r8, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001eee:	f44f 6780 	mov.w	r7, #1024	; 0x400
  {
    /*!< If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001ef2:	602b      	str	r3, [r5, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001ef4:	606e      	str	r6, [r5, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001ef6:	f8c5 8008 	str.w	r8, [r5, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001efa:	612f      	str	r7, [r5, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001efc:	f000 ffb8 	bl	8002e70 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8001f00:	4630      	mov	r0, r6
 8001f02:	f7ff fecf 	bl	8001ca4 <CmdResp1Error>

      if (errorstatus != SD_OK)
 8001f06:	4604      	mov	r4, r0
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d12e      	bne.n	8001f6a <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	602b      	str	r3, [r5, #0]
 8001f10:	e019      	b.n	8001f46 <SDEnWideBus+0x1ae>
    }
  }   /*!< If wide bus operation to be disabled */
  else
  {
    /*!< If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8001f12:	03d8      	lsls	r0, r3, #15
 8001f14:	d528      	bpl.n	8001f68 <SDEnWideBus+0x1d0>
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <SDEnWideBus+0x1e0>)
 8001f18:	4d16      	ldr	r5, [pc, #88]	; (8001f74 <SDEnWideBus+0x1dc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001f1c:	60ec      	str	r4, [r5, #12]
  {
    /*!< If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001f1e:	041b      	lsls	r3, r3, #16
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001f20:	2637      	movs	r6, #55	; 0x37
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001f22:	4628      	mov	r0, r5
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f24:	f04f 0840 	mov.w	r8, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f28:	f44f 6780 	mov.w	r7, #1024	; 0x400
  {
    /*!< If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001f2c:	602b      	str	r3, [r5, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001f2e:	606e      	str	r6, [r5, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f30:	f8c5 8008 	str.w	r8, [r5, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f34:	612f      	str	r7, [r5, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001f36:	f000 ff9b 	bl	8002e70 <SDIO_SendCommand>


      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	f7ff feb2 	bl	8001ca4 <CmdResp1Error>

      if (errorstatus != SD_OK)
 8001f40:	4604      	mov	r4, r0
 8001f42:	b990      	cbnz	r0, 8001f6a <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8001f44:	6028      	str	r0, [r5, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 8001f46:	2606      	movs	r6, #6
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001f48:	4628      	mov	r0, r5
        return(errorstatus);
      }

      /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 8001f4a:	606e      	str	r6, [r5, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f4c:	f8c5 8008 	str.w	r8, [r5, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001f50:	60ec      	str	r4, [r5, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f52:	612f      	str	r7, [r5, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001f54:	f000 ff8c 	bl	8002e70 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 8001f58:	4630      	mov	r0, r6
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
      return(errorstatus);
    }
  }
}
 8001f5a:	b005      	add	sp, #20
 8001f5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);

      errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
 8001f60:	f7ff bea0 	b.w	8001ca4 <CmdResp1Error>
  uint32_t scr[2] = {0, 0};

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001f64:	240e      	movs	r4, #14
 8001f66:	e000      	b.n	8001f6a <SDEnWideBus+0x1d2>
      return(errorstatus);
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
      return(errorstatus);
 8001f68:	2425      	movs	r4, #37	; 0x25
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
      return(errorstatus);
    }
  }
}
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	b005      	add	sp, #20
 8001f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f72:	bf00      	nop
 8001f74:	200004e8 	.word	0x200004e8
 8001f78:	20000044 	.word	0x20000044
 8001f7c:	20000570 	.word	0x20000570
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <SD_Detect>:
 * @brief  Detect if SD card is correctly plugged in the memory slot.
 * @param  None
 * @retval Return if SD is detected or not
 */
uint8_t SD_Detect(void)
{
 8001f84:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8001f86:	2301      	movs	r3, #1

  /*!< Check GPIO to detect SD */
  if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
 8001f88:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <SD_Detect+0x20>)
 * @param  None
 * @retval Return if SD is detected or not
 */
uint8_t SD_Detect(void)
{
  __IO uint8_t status = SD_PRESENT;
 8001f8a:	f88d 3007 	strb.w	r3, [sp, #7]

  /*!< Check GPIO to detect SD */
  if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
 8001f8e:	2104      	movs	r1, #4
 8001f90:	f000 fef2 	bl	8002d78 <GPIO_ReadInputDataBit>
 8001f94:	b110      	cbz	r0, 8001f9c <SD_Detect+0x18>
  {
    status = SD_NOT_PRESENT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return status;
 8001f9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001fa0:	bd0e      	pop	{r1, r2, r3, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <SD_PowerON>:
  *   clock controls.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_PowerON(void)
{
 8001fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /*!< Power ON Sequence -----------------------------------------------------*/
  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  /*!< SDIO_CK for initialization should not exceed 400 KHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
 8001fac:	4879      	ldr	r0, [pc, #484]	; (8002194 <SD_PowerON+0x1ec>)
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_PowerON(void)
{
  __IO SD_Error errorstatus = SD_OK;
 8001fae:	2400      	movs	r4, #0
  /*!< Power ON Sequence -----------------------------------------------------*/
  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  /*!< SDIO_CK for initialization should not exceed 400 KHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
 8001fb0:	2376      	movs	r3, #118	; 0x76
 8001fb2:	7503      	strb	r3, [r0, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8001fb4:	6004      	str	r4, [r0, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8001fb6:	6044      	str	r4, [r0, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8001fb8:	6084      	str	r4, [r0, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8001fba:	60c4      	str	r4, [r0, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8001fbc:	6104      	str	r4, [r0, #16]
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_PowerON(void)
{
  __IO SD_Error errorstatus = SD_OK;
 8001fbe:	f88d 4007 	strb.w	r4, [sp, #7]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
  SDIO_Init(&SDIO_InitStructure);
 8001fc2:	f000 ff29 	bl	8002e18 <SDIO_Init>

  /*!< Set Power State to ON */
  SDIO_SetPowerState(SDIO_PowerState_ON);
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f000 ff44 	bl	8002e54 <SDIO_SetPowerState>

  /*!< Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f000 ff3b 	bl	8002e48 <SDIO_ClockCmd>

  /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
  /*!< No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001fd2:	4871      	ldr	r0, [pc, #452]	; (8002198 <SD_PowerON+0x1f0>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  /*!< Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);

  /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
  /*!< No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001fd8:	6004      	str	r4, [r0, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
 8001fda:	6044      	str	r4, [r0, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 8001fdc:	6084      	str	r4, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001fde:	60c4      	str	r4, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001fe0:	6103      	str	r3, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001fe2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001fe6:	f000 ff43 	bl	8002e70 <SDIO_SendCommand>
 8001fea:	e001      	b.n	8001ff0 <SD_PowerON+0x48>
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 8001fec:	3c01      	subs	r4, #1
 8001fee:	d005      	beq.n	8001ffc <SD_PowerON+0x54>
 8001ff0:	2080      	movs	r0, #128	; 0x80
 8001ff2:	f000 ff93 	bl	8002f1c <SDIO_GetFlagStatus>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0f8      	beq.n	8001fec <SD_PowerON+0x44>
 8001ffa:	e0c2      	b.n	8002182 <SD_PowerON+0x1da>
  }

  if (timeout == 0)
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    return(errorstatus);
 8001ffc:	2303      	movs	r3, #3
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdError();
 8001ffe:	f88d 3007 	strb.w	r3, [sp, #7]

  if (errorstatus != SD_OK)
 8002002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002006:	b103      	cbz	r3, 800200a <SD_PowerON+0x62>
 8002008:	e0b8      	b.n	800217c <SD_PowerON+0x1d4>
  /*!< Send CMD8 to verify SD card interface operating condition */
  /*!< Argument: - [31:12]: Reserved (shall be set to '0')
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /*!< CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 800200a:	4863      	ldr	r0, [pc, #396]	; (8002198 <SD_PowerON+0x1f0>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800200c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002010:	2208      	movs	r2, #8
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002012:	60c3      	str	r3, [r0, #12]
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /*!< CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002014:	2440      	movs	r4, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /*!< CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800201a:	e880 0016 	stmia.w	r0, {r1, r2, r4}
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800201e:	6103      	str	r3, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002020:	f000 ff26 	bl	8002e70 <SDIO_SendCommand>
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;
 8002024:	495d      	ldr	r1, [pc, #372]	; (800219c <SD_PowerON+0x1f4>)
  */
static SD_Error CmdResp7Error(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;
 8002026:	f44f 3280 	mov.w	r2, #65536	; 0x10000

  status = SDIO->STA;
 800202a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800202c:	e001      	b.n	8002032 <SD_PowerON+0x8a>

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
  {
    timeout--;
    status = SDIO->STA;
 800202e:	6b4b      	ldr	r3, [r1, #52]	; 0x34

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
  {
    timeout--;
 8002030:	3a01      	subs	r2, #1
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 8002032:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002036:	d102      	bne.n	800203e <SD_PowerON+0x96>
 8002038:	2a00      	cmp	r2, #0
 800203a:	d1f8      	bne.n	800202e <SD_PowerON+0x86>
 800203c:	e003      	b.n	8002046 <SD_PowerON+0x9e>
  {
    timeout--;
    status = SDIO->STA;
  }

  if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
 800203e:	b112      	cbz	r2, 8002046 <SD_PowerON+0x9e>
 8002040:	f013 0404 	ands.w	r4, r3, #4
 8002044:	d004      	beq.n	8002050 <SD_PowerON+0xa8>
  {
    /*!< Card is not V2.0 complient or card does not support the set voltage range */
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8002046:	2004      	movs	r0, #4
 8002048:	f000 ff72 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <SD_PowerON+0xb6>
  }

  if (status & SDIO_FLAG_CMDREND)
 8002050:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002054:	d003      	beq.n	800205e <SD_PowerON+0xb6>
  {
    /*!< Card is SD V2.0 compliant */
    errorstatus = SD_OK;
    SDIO_ClearFlag(SDIO_FLAG_CMDREND);
 8002056:	2040      	movs	r0, #64	; 0x40
 8002058:	f000 ff6a 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 800205c:	4623      	mov	r3, r4
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp7Error();
 800205e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (errorstatus == SD_OK)
 8002062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002066:	b92b      	cbnz	r3, 8002074 <SD_PowerON+0xcc>
  {
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
 8002068:	4b4d      	ldr	r3, [pc, #308]	; (80021a0 <SD_PowerON+0x1f8>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    SDType = SD_HIGH_CAPACITY;
 800206e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002072:	e011      	b.n	8002098 <SD_PowerON+0xf0>
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8002074:	4848      	ldr	r0, [pc, #288]	; (8002198 <SD_PowerON+0x1f0>)
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	6082      	str	r2, [r0, #8]
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 800207a:	2400      	movs	r4, #0
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8002080:	2537      	movs	r5, #55	; 0x37
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002082:	6102      	str	r2, [r0, #16]
  }
  else
  {
    /*!< CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8002084:	e880 0030 	stmia.w	r0, {r4, r5}
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002088:	60c4      	str	r4, [r0, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 800208a:	f000 fef1 	bl	8002e70 <SDIO_SendCommand>
    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 800208e:	4628      	mov	r0, r5
 8002090:	f7ff fe08 	bl	8001ca4 <CmdResp1Error>
 8002094:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  /*!< CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8002098:	483f      	ldr	r0, [pc, #252]	; (8002198 <SD_PowerON+0x1f0>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 800209a:	2200      	movs	r2, #0
 800209c:	2537      	movs	r5, #55	; 0x37
 800209e:	e880 0024 	stmia.w	r0, {r2, r5}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80020a2:	2140      	movs	r1, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80020a4:	60c2      	str	r2, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80020a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
  }
  /*!< CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80020aa:	6081      	str	r1, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80020ac:	6102      	str	r2, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80020ae:	f000 fedf 	bl	8002e70 <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7ff fdf6 	bl	8001ca4 <CmdResp1Error>
 80020b8:	f88d 0007 	strb.w	r0, [sp, #7]

  /*!< If errorstatus is Command TimeOut, it is a MMC card */
  /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 80020bc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80020c0:	2d00      	cmp	r5, #0
 80020c2:	d042      	beq.n	800214a <SD_PowerON+0x1a2>
 80020c4:	e05a      	b.n	800217c <SD_PowerON+0x1d4>
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /*!< SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 80020c6:	4c34      	ldr	r4, [pc, #208]	; (8002198 <SD_PowerON+0x1f0>)
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80020c8:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80020cc:	4620      	mov	r0, r4
    {

      /*!< SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80020ce:	f04f 0a40 	mov.w	sl, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80020d2:	f44f 6780 	mov.w	r7, #1024	; 0x400
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /*!< SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 80020d6:	6025      	str	r5, [r4, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80020d8:	f8c4 b004 	str.w	fp, [r4, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80020dc:	f8c4 a008 	str.w	sl, [r4, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80020e0:	60e5      	str	r5, [r4, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80020e2:	6127      	str	r7, [r4, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80020e4:	f000 fec4 	bl	8002e70 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 80020e8:	4658      	mov	r0, fp
 80020ea:	f7ff fddb 	bl	8001ca4 <CmdResp1Error>
 80020ee:	f88d 0007 	strb.w	r0, [sp, #7]

      if (errorstatus != SD_OK)
 80020f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020f6:	b103      	cbz	r3, 80020fa <SD_PowerON+0x152>
 80020f8:	e040      	b.n	800217c <SD_PowerON+0x1d4>
      {
        return(errorstatus);
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
 80020fa:	2329      	movs	r3, #41	; 0x29
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80020fc:	4620      	mov	r0, r4

      if (errorstatus != SD_OK)
      {
        return(errorstatus);
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 80020fe:	f8c4 9000 	str.w	r9, [r4]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
 8002102:	6063      	str	r3, [r4, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002104:	f8c4 a008 	str.w	sl, [r4, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002108:	60e5      	str	r5, [r4, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800210a:	6127      	str	r7, [r4, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 800210c:	f000 feb0 	bl	8002e70 <SDIO_SendCommand>
static SD_Error CmdResp3Error(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;
 8002110:	4a22      	ldr	r2, [pc, #136]	; (800219c <SD_PowerON+0x1f4>)

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
  {
    status = SDIO->STA;
 8002112:	6b53      	ldr	r3, [r2, #52]	; 0x34
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8002114:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002118:	d0fb      	beq.n	8002112 <SD_PowerON+0x16a>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 800211a:	f013 0404 	ands.w	r4, r3, #4
 800211e:	d004      	beq.n	800212a <SD_PowerON+0x182>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8002120:	2004      	movs	r0, #4
 8002122:	f000 ff05 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <SD_PowerON+0x18c>
  }
  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 800212a:	f240 50ff 	movw	r0, #1535	; 0x5ff
 800212e:	f000 feff 	bl	8002f30 <SDIO_ClearFlag>
  return(errorstatus);
 8002132:	4623      	mov	r3, r4
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);

      errorstatus = CmdResp3Error();
 8002134:	f88d 3007 	strb.w	r3, [sp, #7]
      if (errorstatus != SD_OK)
 8002138:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800213c:	b100      	cbz	r0, 8002140 <SD_PowerON+0x198>
 800213e:	e01d      	b.n	800217c <SD_PowerON+0x1d4>
      {
        return(errorstatus);
      }

      response = SDIO_GetResponse(SDIO_RESP1);
 8002140:	f000 feb2 	bl	8002ea8 <SDIO_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      count++;
 8002144:	3601      	adds	r6, #1
      {
        return(errorstatus);
      }

      response = SDIO_GetResponse(SDIO_RESP1);
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8002146:	0fc5      	lsrs	r5, r0, #31
 8002148:	e007      	b.n	800215a <SD_PowerON+0x1b2>

      if (errorstatus != SD_OK)
      {
        return(errorstatus);
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 800214a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);

  /*!< If errorstatus is Command TimeOut, it is a MMC card */
  /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 800214e:	462e      	mov	r6, r5
 8002150:	4628      	mov	r0, r5
 8002152:	f64f 78ff 	movw	r8, #65535	; 0xffff

      if (errorstatus != SD_OK)
      {
        return(errorstatus);
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 8002156:	f444 1980 	orr.w	r9, r4, #1048576	; 0x100000
     or SD card 1.x */
  if (errorstatus == SD_OK)
  {
    /*!< SD CARD */
    /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800215a:	b915      	cbnz	r5, 8002162 <SD_PowerON+0x1ba>
 800215c:	4546      	cmp	r6, r8
 800215e:	d1b2      	bne.n	80020c6 <SD_PowerON+0x11e>
 8002160:	e003      	b.n	800216a <SD_PowerON+0x1c2>

      response = SDIO_GetResponse(SDIO_RESP1);
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      count++;
    }
    if (count >= SD_MAX_VOLT_TRIAL)
 8002162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002166:	429e      	cmp	r6, r3
 8002168:	d103      	bne.n	8002172 <SD_PowerON+0x1ca>
    {
      errorstatus = SD_INVALID_VOLTRANGE;
 800216a:	231b      	movs	r3, #27
 800216c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002170:	e004      	b.n	800217c <SD_PowerON+0x1d4>
      return(errorstatus);
    }

    if (response &= SD_HIGH_CAPACITY)
 8002172:	0042      	lsls	r2, r0, #1
 8002174:	d502      	bpl.n	800217c <SD_PowerON+0x1d4>
    {
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <SD_PowerON+0x1f8>)
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
    }

  }/*!< else MMC Card */

  return(errorstatus);
 800217c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002180:	e005      	b.n	800218e <SD_PowerON+0x1e6>
    errorstatus = SD_CMD_RSP_TIMEOUT;
    return(errorstatus);
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8002182:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8002186:	f000 fed3 	bl	8002f30 <SDIO_ClearFlag>

  return(errorstatus);
 800218a:	2300      	movs	r3, #0
 800218c:	e737      	b.n	8001ffe <SD_PowerON+0x56>
    }

  }/*!< else MMC Card */

  return(errorstatus);
}
 800218e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	20000558 	.word	0x20000558
 8002198:	200004e8 	.word	0x200004e8
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	2000002c 	.word	0x2000002c

080021a4 <SD_InitializeCards>:
  *         into standby state.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_InitializeCards(void)
{
 80021a4:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;
  uint16_t rca = 0x01;

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 80021a6:	f000 fe5b 	bl	8002e60 <SDIO_GetPowerState>
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f000 8090 	beq.w	80022d0 <SD_InitializeCards+0x12c>
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <SD_InitializeCards+0x144>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d022      	beq.n	80021fe <SD_InitializeCards+0x5a>
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80021b8:	484c      	ldr	r0, [pc, #304]	; (80022ec <SD_InitializeCards+0x148>)
 80021ba:	2300      	movs	r3, #0
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
 80021bc:	2202      	movs	r2, #2
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80021be:	6003      	str	r3, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
 80021c0:	6042      	str	r2, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80021c2:	60c3      	str	r3, [r0, #12]
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 80021c4:	22c0      	movs	r2, #192	; 0xc0
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    /*!< Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 80021ca:	6082      	str	r2, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80021cc:	6103      	str	r3, [r0, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 80021ce:	f000 fe4f 	bl	8002e70 <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 80021d2:	f7ff fd49 	bl	8001c68 <CmdResp2Error>

    if (SD_OK != errorstatus)
 80021d6:	4604      	mov	r4, r0
 80021d8:	2800      	cmp	r0, #0
 80021da:	f040 8082 	bne.w	80022e2 <SD_InitializeCards+0x13e>
    {
      return(errorstatus);
    }

    CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 80021de:	f000 fe63 	bl	8002ea8 <SDIO_GetResponse>
 80021e2:	4c43      	ldr	r4, [pc, #268]	; (80022f0 <SD_InitializeCards+0x14c>)
 80021e4:	6020      	str	r0, [r4, #0]
    CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 80021e6:	2004      	movs	r0, #4
 80021e8:	f000 fe5e 	bl	8002ea8 <SDIO_GetResponse>
 80021ec:	6060      	str	r0, [r4, #4]
    CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 80021ee:	2008      	movs	r0, #8
 80021f0:	f000 fe5a 	bl	8002ea8 <SDIO_GetResponse>
 80021f4:	60a0      	str	r0, [r4, #8]
    CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 80021f6:	200c      	movs	r0, #12
 80021f8:	f000 fe56 	bl	8002ea8 <SDIO_GetResponse>
 80021fc:	60e0      	str	r0, [r4, #12]
  }
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
 80021fe:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <SD_InitializeCards+0x144>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d903      	bls.n	800220e <SD_InitializeCards+0x6a>
 8002206:	2b06      	cmp	r3, #6
 8002208:	d001      	beq.n	800220e <SD_InitializeCards+0x6a>
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 800220a:	2b02      	cmp	r3, #2
 800220c:	d136      	bne.n	800227c <SD_InitializeCards+0xd8>
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 800220e:	4837      	ldr	r0, [pc, #220]	; (80022ec <SD_InitializeCards+0x148>)
 8002210:	2300      	movs	r3, #0
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
 8002212:	2203      	movs	r2, #3
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8002214:	6003      	str	r3, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
 8002216:	6042      	str	r2, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002218:	60c3      	str	r3, [r0, #12]
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800221a:	2240      	movs	r2, #64	; 0x40
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002220:	6103      	str	r3, [r0, #16]
  {
    /*!< Send CMD3 SET_REL_ADDR with argument 0 */
    /*!< SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002222:	6082      	str	r2, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002224:	f000 fe24 	bl	8002e70 <SDIO_SendCommand>
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <SD_InitializeCards+0x150>)

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
  {
    status = SDIO->STA;
 800222a:	6b58      	ldr	r0, [r3, #52]	; 0x34
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 800222c:	f010 0f45 	tst.w	r0, #69	; 0x45
 8002230:	d0fb      	beq.n	800222a <SD_InitializeCards+0x86>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8002232:	0744      	lsls	r4, r0, #29
 8002234:	d504      	bpl.n	8002240 <SD_InitializeCards+0x9c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8002236:	2004      	movs	r0, #4
 8002238:	f000 fe7a 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 800223c:	2403      	movs	r4, #3
 800223e:	e050      	b.n	80022e2 <SD_InitializeCards+0x13e>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8002240:	f010 0401 	ands.w	r4, r0, #1
 8002244:	d004      	beq.n	8002250 <SD_InitializeCards+0xac>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 fe72 	bl	8002f30 <SDIO_ClearFlag>
    return(errorstatus);
 800224c:	2401      	movs	r4, #1
 800224e:	e048      	b.n	80022e2 <SD_InitializeCards+0x13e>
  }

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 8002250:	f000 fe24 	bl	8002e9c <SDIO_GetCommandResponse>
 8002254:	2803      	cmp	r0, #3
 8002256:	d13f      	bne.n	80022d8 <SD_InitializeCards+0x134>
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8002258:	f240 50ff 	movw	r0, #1535	; 0x5ff
 800225c:	f000 fe68 	bl	8002f30 <SDIO_ClearFlag>

  /*!< We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8002260:	4620      	mov	r0, r4
 8002262:	f000 fe21 	bl	8002ea8 <SDIO_GetResponse>

  if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
 8002266:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 800226a:	d101      	bne.n	8002270 <SD_InitializeCards+0xcc>
  {
    *prca = (uint16_t) (response_r1 >> 16);
 800226c:	0c03      	lsrs	r3, r0, #16
 800226e:	e006      	b.n	800227e <SD_InitializeCards+0xda>
    return(errorstatus);
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
 8002270:	0481      	lsls	r1, r0, #18
 8002272:	d433      	bmi.n	80022dc <SD_InitializeCards+0x138>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }

  if (response_r1 & SD_R6_ILLEGAL_CMD)
 8002274:	0442      	lsls	r2, r0, #17
 8002276:	d42f      	bmi.n	80022d8 <SD_InitializeCards+0x134>
  {
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_R6_COM_CRC_FAILED)
 8002278:	0403      	lsls	r3, r0, #16
 800227a:	d431      	bmi.n	80022e0 <SD_InitializeCards+0x13c>
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_InitializeCards(void)
{
  SD_Error errorstatus = SD_OK;
  uint16_t rca = 0x01;
 800227c:	2301      	movs	r3, #1
    {
      return(errorstatus);
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 800227e:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <SD_InitializeCards+0x144>)
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	2a04      	cmp	r2, #4
 8002284:	d026      	beq.n	80022d4 <SD_InitializeCards+0x130>
  {
    RCA = rca;
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <SD_InitializeCards+0x154>)

    /*!< Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 8002288:	4818      	ldr	r0, [pc, #96]	; (80022ec <SD_InitializeCards+0x148>)
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    RCA = rca;
 800228a:	6013      	str	r3, [r2, #0]

    /*!< Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	6003      	str	r3, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
 8002290:	2309      	movs	r3, #9
 8002292:	6043      	str	r3, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	6083      	str	r3, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002298:	2300      	movs	r3, #0
 800229a:	60c3      	str	r3, [r0, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	6103      	str	r3, [r0, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 80022a2:	f000 fde5 	bl	8002e70 <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 80022a6:	f7ff fcdf 	bl	8001c68 <CmdResp2Error>

    if (SD_OK != errorstatus)
 80022aa:	4604      	mov	r4, r0
 80022ac:	b9c8      	cbnz	r0, 80022e2 <SD_InitializeCards+0x13e>
    {
      return(errorstatus);
    }

    CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 80022ae:	f000 fdfb 	bl	8002ea8 <SDIO_GetResponse>
 80022b2:	4d12      	ldr	r5, [pc, #72]	; (80022fc <SD_InitializeCards+0x158>)
 80022b4:	6028      	str	r0, [r5, #0]
    CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 80022b6:	2004      	movs	r0, #4
 80022b8:	f000 fdf6 	bl	8002ea8 <SDIO_GetResponse>
 80022bc:	6068      	str	r0, [r5, #4]
    CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 80022be:	2008      	movs	r0, #8
 80022c0:	f000 fdf2 	bl	8002ea8 <SDIO_GetResponse>
 80022c4:	60a8      	str	r0, [r5, #8]
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 80022c6:	200c      	movs	r0, #12
 80022c8:	f000 fdee 	bl	8002ea8 <SDIO_GetResponse>
 80022cc:	60e8      	str	r0, [r5, #12]
 80022ce:	e008      	b.n	80022e2 <SD_InitializeCards+0x13e>
  uint16_t rca = 0x01;

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
 80022d0:	2425      	movs	r4, #37	; 0x25
 80022d2:	e006      	b.n	80022e2 <SD_InitializeCards+0x13e>
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
  }

  errorstatus = SD_OK; /*!< All cards get intialized */

  return(errorstatus);
 80022d4:	2400      	movs	r4, #0
 80022d6:	e004      	b.n	80022e2 <SD_InitializeCards+0x13e>

  /*!< Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
  {
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
 80022d8:	2410      	movs	r4, #16
 80022da:	e002      	b.n	80022e2 <SD_InitializeCards+0x13e>
    return(errorstatus);
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80022dc:	2413      	movs	r4, #19
 80022de:	e000      	b.n	80022e2 <SD_InitializeCards+0x13e>
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_R6_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 80022e0:	240f      	movs	r4, #15
  }

  errorstatus = SD_OK; /*!< All cards get intialized */

  return(errorstatus);
}
 80022e2:	4620      	mov	r0, r4
 80022e4:	bd38      	pop	{r3, r4, r5, pc}
 80022e6:	bf00      	nop
 80022e8:	2000002c 	.word	0x2000002c
 80022ec:	200004e8 	.word	0x200004e8
 80022f0:	20000030 	.word	0x20000030
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	20000044 	.word	0x20000044
 80022fc:	2000001c 	.word	0x2000001c

08002300 <SD_GetCardInfo>:
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
 8002300:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <SD_GetCardInfo+0x278>)
  * @param  cardinfo: pointer to a SD_CardInfo structure that contains all SD card
  *         information.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
 8002302:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
 8002304:	681d      	ldr	r5, [r3, #0]
  cardinfo->RCA = (uint16_t)RCA;
 8002306:	4b9d      	ldr	r3, [pc, #628]	; (800257c <SD_GetCardInfo+0x27c>)

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8002308:	4c9d      	ldr	r4, [pc, #628]	; (8002580 <SD_GetCardInfo+0x280>)
{
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
  cardinfo->RCA = (uint16_t)RCA;
 800230a:	681b      	ldr	r3, [r3, #0]
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
 800230c:	f880 5056 	strb.w	r5, [r0, #86]	; 0x56
  cardinfo->RCA = (uint16_t)RCA;
 8002310:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8002314:	6823      	ldr	r3, [r4, #0]
  * @param  cardinfo: pointer to a SD_CardInfo structure that contains all SD card
  *         information.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
 8002316:	4601      	mov	r1, r0

  cardinfo->CardType = (uint8_t)CardType;
  cardinfo->RCA = (uint16_t)RCA;

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8002318:	0e1a      	lsrs	r2, r3, #24
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 800231a:	0990      	lsrs	r0, r2, #6
 800231c:	7008      	strb	r0, [r1, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 800231e:	f3c2 0083 	ubfx	r0, r2, #2, #4
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8002322:	f002 0203 	and.w	r2, r2, #3
  cardinfo->RCA = (uint16_t)RCA;

  /*!< Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8002326:	7048      	strb	r0, [r1, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8002328:	708a      	strb	r2, [r1, #2]

  /*!< Byte 1 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 800232a:	f3c3 4207 	ubfx	r2, r3, #16, #8
  cardinfo->SD_csd.TAAC = tmp;
 800232e:	70ca      	strb	r2, [r1, #3]

  /*!< Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 8002330:	f3c3 2207 	ubfx	r2, r3, #8, #8
  cardinfo->SD_csd.NSAC = tmp;

  /*!< Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 8002334:	b2db      	uxtb	r3, r3
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.TAAC = tmp;

  /*!< Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.NSAC = tmp;
 8002336:	710a      	strb	r2, [r1, #4]

  /*!< Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 8002338:	714b      	strb	r3, [r1, #5]

  /*!< Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 800233a:	6863      	ldr	r3, [r4, #4]
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 800233c:	0e1a      	lsrs	r2, r3, #24
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	80ca      	strh	r2, [r1, #6]

  /*!< Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8002342:	88c8      	ldrh	r0, [r1, #6]
  /*!< Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CardComdClasses = tmp << 4;

  /*!< Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 8002344:	f3c3 4207 	ubfx	r2, r3, #16, #8
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8002348:	b280      	uxth	r0, r0
 800234a:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 800234e:	f002 020f 	and.w	r2, r2, #15
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CardComdClasses = tmp << 4;

  /*!< Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8002352:	80c8      	strh	r0, [r1, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 8002354:	720a      	strb	r2, [r1, #8]

  /*!< Byte 6 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 8002356:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800235a:	b2d0      	uxtb	r0, r2
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 800235c:	09c6      	lsrs	r6, r0, #7
 800235e:	724e      	strb	r6, [r1, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 8002360:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002364:	728e      	strb	r6, [r1, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 8002366:	f3c2 1640 	ubfx	r6, r2, #5, #1
 800236a:	72ce      	strb	r6, [r1, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 800236c:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8002370:	730e      	strb	r6, [r1, #12]
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 8002372:	2600      	movs	r6, #0

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8002374:	2d01      	cmp	r5, #1
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 8002376:	734e      	strb	r6, [r1, #13]

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8002378:	d83c      	bhi.n	80023f4 <SD_GetCardInfo+0xf4>
  {
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0292      	lsls	r2, r2, #10
 8002380:	610a      	str	r2, [r1, #16]

    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8002382:	690a      	ldr	r2, [r1, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8002384:	68a0      	ldr	r0, [r4, #8]
  {
    NumberOfBytes >>= 1;
    count++;
  }
  return(count);
}
 8002386:	b2db      	uxtb	r3, r3
  {
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;

    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8002388:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 800238c:	610b      	str	r3, [r1, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 800238e:	690a      	ldr	r2, [r1, #16]
    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8002390:	0e03      	lsrs	r3, r0, #24
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8002392:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 8002396:	610a      	str	r2, [r1, #16]

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8002398:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800239c:	f003 0307 	and.w	r3, r3, #7

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80023a0:	750a      	strb	r2, [r1, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80023a2:	754b      	strb	r3, [r1, #21]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 80023a4:	f3c0 4307 	ubfx	r3, r0, #16, #8
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80023a8:	095a      	lsrs	r2, r3, #5
 80023aa:	758a      	strb	r2, [r1, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80023ac:	f3c3 0282 	ubfx	r2, r3, #2, #3
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	005b      	lsls	r3, r3, #1
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80023b6:	75ca      	strb	r2, [r1, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 80023b8:	760b      	strb	r3, [r1, #24]
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80023ba:	7e0b      	ldrb	r3, [r1, #24]
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 80023bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80023c0:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80023c4:	760b      	strb	r3, [r1, #24]

    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 80023c6:	690e      	ldr	r6, [r1, #16]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80023c8:	7e0a      	ldrb	r2, [r1, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 80023ca:	7a0c      	ldrb	r4, [r1, #8]
 80023cc:	2301      	movs	r3, #1
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;

    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80023ce:	3202      	adds	r2, #2
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 80023d0:	fa03 f404 	lsl.w	r4, r3, r4
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;

    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80023d4:	fa03 f202 	lsl.w	r2, r3, r2
 80023d8:	17d5      	asrs	r5, r2, #31
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;

    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 80023da:	3601      	adds	r6, #1
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 80023dc:	fba2 2304 	umull	r2, r3, r2, r4
 80023e0:	fb04 3305 	mla	r3, r4, r5, r3
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 80023e4:	650c      	str	r4, [r1, #80]	; 0x50
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 80023e6:	fba2 4506 	umull	r4, r5, r2, r6
 80023ea:	fb06 5503 	mla	r5, r6, r3, r5
 80023ee:	e9c1 4512 	strd	r4, r5, [r1, #72]	; 0x48
 80023f2:	e01b      	b.n	800242c <SD_GetCardInfo+0x12c>
  }
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80023f4:	2d02      	cmp	r5, #2
 80023f6:	d119      	bne.n	800242c <SD_GetCardInfo+0x12c>
  {
    /*!< Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80023f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	610b      	str	r3, [r1, #16]

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8002400:	68a0      	ldr	r0, [r4, #8]

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 8002402:	690b      	ldr	r3, [r1, #16]
  {
    NumberOfBytes >>= 1;
    count++;
  }
  return(count);
}
 8002404:	0e02      	lsrs	r2, r0, #24
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;

    /*!< Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 8002406:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800240a:	610b      	str	r3, [r1, #16]

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);

    cardinfo->SD_csd.DeviceSize |= (tmp);
 800240c:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);

    /*!< Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 800240e:	f3c0 4207 	ubfx	r2, r0, #16, #8

    cardinfo->SD_csd.DeviceSize |= (tmp);
 8002412:	4313      	orrs	r3, r2
 8002414:	610b      	str	r3, [r1, #16]

    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);

    cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * (uint64_t)(512 * 1024);
 8002416:	690b      	ldr	r3, [r1, #16]
 8002418:	3301      	adds	r3, #1
 800241a:	0b5a      	lsrs	r2, r3, #13
 800241c:	04db      	lsls	r3, r3, #19
 800241e:	648b      	str	r3, [r1, #72]	; 0x48
    cardinfo->CardBlockSize = 512;
 8002420:	f44f 7300 	mov.w	r3, #512	; 0x200
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);

    cardinfo->SD_csd.DeviceSize |= (tmp);

    /*!< Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8002424:	f3c0 2007 	ubfx	r0, r0, #8, #8

    cardinfo->CardCapacity = (uint64_t)(cardinfo->SD_csd.DeviceSize + 1) * (uint64_t)(512 * 1024);
 8002428:	64ca      	str	r2, [r1, #76]	; 0x4c
    cardinfo->CardBlockSize = 512;
 800242a:	650b      	str	r3, [r1, #80]	; 0x50
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800242c:	f3c0 1380 	ubfx	r3, r0, #6, #1
 8002430:	764b      	strb	r3, [r1, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8002432:	f000 003f 	and.w	r0, r0, #63	; 0x3f

  /*!< Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <SD_GetCardInfo+0x280>)
    cardinfo->CardBlockSize = 512;
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8002438:	0040      	lsls	r0, r0, #1
 800243a:	7688      	strb	r0, [r1, #26]

  /*!< Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 800243c:	689a      	ldr	r2, [r3, #8]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 800243e:	7e8c      	ldrb	r4, [r1, #26]
 8002440:	f3c2 10c0 	ubfx	r0, r2, #7, #1
 8002444:	4320      	orrs	r0, r4
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8002446:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;

  /*!< Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 800244a:	7688      	strb	r0, [r1, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800244c:	76ca      	strb	r2, [r1, #27]

  /*!< Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	0e13      	lsrs	r3, r2, #24
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8002452:	09d8      	lsrs	r0, r3, #7
 8002454:	7708      	strb	r0, [r1, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 8002456:	f3c3 1041 	ubfx	r0, r3, #5, #2
 800245a:	7748      	strb	r0, [r1, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 800245c:	f3c3 0082 	ubfx	r0, r3, #2, #3
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2

  /*!< Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8002466:	7788      	strb	r0, [r1, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8002468:	77cb      	strb	r3, [r1, #31]

  /*!< Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 800246a:	7fc8      	ldrb	r0, [r1, #31]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;

  /*!< Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 800246c:	f3c2 4307 	ubfx	r3, r2, #16, #8
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8002470:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
 8002474:	77c8      	strb	r0, [r1, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8002476:	f3c3 1040 	ubfx	r0, r3, #5, #1
 800247a:	f881 0020 	strb.w	r0, [r1, #32]
  cardinfo->SD_csd.Reserved3 = 0;
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 800247e:	f003 0301 	and.w	r3, r3, #1

  /*!< Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.Reserved3 = 0;
 8002482:	2000      	movs	r0, #0
 8002484:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8002488:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22

  /*!< Byte 14 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 800248c:	f3c2 2307 	ubfx	r3, r2, #8, #8
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8002490:	09dc      	lsrs	r4, r3, #7
 8002492:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 8002496:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800249a:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 800249e:	f3c3 1440 	ubfx	r4, r3, #5, #1
 80024a2:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 80024a6:	f3c3 1400 	ubfx	r4, r3, #4, #1
 80024aa:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 80024ae:	f3c3 0481 	ubfx	r4, r3, #2, #2
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 80024b2:	f003 0303 	and.w	r3, r3, #3
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 80024b6:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 80024ba:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
  cardinfo->SD_csd.Reserved4 = 1;


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <SD_GetCardInfo+0x284>)
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
  cardinfo->SD_csd.ECC = (tmp & 0x03);

  /*!< Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 80024c0:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80024c4:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  cardinfo->SD_csd.Reserved4 = 1;


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 80024c8:	681a      	ldr	r2, [r3, #0]
  cardinfo->SD_csd.ECC = (tmp & 0x03);

  /*!< Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
  cardinfo->SD_csd.Reserved4 = 1;
 80024ca:	2401      	movs	r4, #1


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 80024cc:	0e15      	lsrs	r5, r2, #24
  cardinfo->SD_csd.ECC = (tmp & 0x03);

  /*!< Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
  cardinfo->SD_csd.Reserved4 = 1;
 80024ce:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a


  /*!< Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ManufacturerID = tmp;
 80024d2:	f881 502c 	strb.w	r5, [r1, #44]	; 0x2c

  /*!< Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
 80024d6:	f3c2 4507 	ubfx	r5, r2, #16, #8
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 80024da:	022d      	lsls	r5, r5, #8
 80024dc:	85cd      	strh	r5, [r1, #46]	; 0x2e

  /*!< Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 80024de:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
  /*!< Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;

  /*!< Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
 80024e0:	f3c2 2607 	ubfx	r6, r2, #8, #8
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 80024e4:	b2ad      	uxth	r5, r5
 80024e6:	4335      	orrs	r5, r6

  /*!< Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 80024e8:	0612      	lsls	r2, r2, #24
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;

  /*!< Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 80024ea:	85cd      	strh	r5, [r1, #46]	; 0x2e

  /*!< Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 80024ec:	630a      	str	r2, [r1, #48]	; 0x30

  /*!< Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 80024ee:	685a      	ldr	r2, [r3, #4]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 80024f0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  {
    NumberOfBytes >>= 1;
    count++;
  }
  return(count);
}
 80024f2:	0e16      	lsrs	r6, r2, #24
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
  cardinfo->SD_cid.ProdName1 = tmp << 24;

  /*!< Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 80024f4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80024f8:	630d      	str	r5, [r1, #48]	; 0x30

  /*!< Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 80024fa:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /*!< Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdName1 |= tmp << 16;

  /*!< Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
 80024fc:	f3c2 4607 	ubfx	r6, r2, #16, #8
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 8002500:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8002504:	630d      	str	r5, [r1, #48]	; 0x30

  /*!< Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdName1 |= tmp;
 8002506:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /*!< Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;

  /*!< Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
 8002508:	f3c2 2607 	ubfx	r6, r2, #8, #8
  cardinfo->SD_cid.ProdName1 |= tmp;
 800250c:	4335      	orrs	r5, r6

  /*!< Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 800250e:	b2d2      	uxtb	r2, r2
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;

  /*!< Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdName1 |= tmp;
 8002510:	630d      	str	r5, [r1, #48]	; 0x30

  /*!< Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
  cardinfo->SD_cid.ProdName2 = tmp;
 8002512:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34

  /*!< Byte 8 */
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 8002516:	689a      	ldr	r2, [r3, #8]
  /*!< Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
  cardinfo->SD_cid.ProdSN |= tmp << 8;

  /*!< Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 8002518:	68db      	ldr	r3, [r3, #12]
  /*!< Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
  cardinfo->SD_cid.ProdName2 = tmp;

  /*!< Byte 8 */
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 800251a:	0e15      	lsrs	r5, r2, #24
  cardinfo->SD_cid.ProdRev = tmp;
 800251c:	f881 5035 	strb.w	r5, [r1, #53]	; 0x35

  /*!< Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 8002520:	f3c2 4507 	ubfx	r5, r2, #16, #8
  cardinfo->SD_cid.ProdSN = tmp << 24;
 8002524:	062d      	lsls	r5, r5, #24
 8002526:	638d      	str	r5, [r1, #56]	; 0x38

  /*!< Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8002528:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /*!< Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdSN = tmp << 24;

  /*!< Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
 800252a:	f3c2 2607 	ubfx	r6, r2, #8, #8
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 800252e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8002532:	638d      	str	r5, [r1, #56]	; 0x38

  /*!< Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8002534:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  {
    NumberOfBytes >>= 1;
    count++;
  }
  return(count);
}
 8002536:	b2d2      	uxtb	r2, r2
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdSN |= tmp << 16;

  /*!< Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8002538:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 800253c:	638a      	str	r2, [r1, #56]	; 0x38

  /*!< Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdSN |= tmp;
 800253e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8002540:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8002544:	638a      	str	r2, [r1, #56]	; 0x38

  /*!< Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8002546:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
  /*!< Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdSN |= tmp;

  /*!< Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 800254a:	f3c3 4207 	ubfx	r2, r3, #16, #8
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 800254e:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8002552:	f002 020f 	and.w	r2, r2, #15
 8002556:	0212      	lsls	r2, r2, #8
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdSN |= tmp;

  /*!< Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8002558:	f881 503c 	strb.w	r5, [r1, #60]	; 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800255c:	87ca      	strh	r2, [r1, #62]	; 0x3e

  /*!< Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ManufactDate |= tmp;
 800255e:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;

  /*!< Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
 8002560:	f3c3 2507 	ubfx	r5, r3, #8, #8
  cardinfo->SD_cid.ManufactDate |= tmp;
 8002564:	b292      	uxth	r2, r2
 8002566:	432a      	orrs	r2, r5

  /*!< Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8002568:	f3c3 0346 	ubfx	r3, r3, #1, #7
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;

  /*!< Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ManufactDate |= tmp;
 800256c:	87ca      	strh	r2, [r1, #62]	; 0x3e

  /*!< Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 800256e:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 8002572:	f881 4041 	strb.w	r4, [r1, #65]	; 0x41

  return(errorstatus);
}
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	2000002c 	.word	0x2000002c
 800257c:	20000044 	.word	0x20000044
 8002580:	2000001c 	.word	0x2000001c
 8002584:	20000030 	.word	0x20000030

08002588 <SD_EnableWideBusOperation>:
  *     @arg SDIO_BusWide_4b: 4-bit data transfer
  *     @arg SDIO_BusWide_1b: 1-bit data transfer
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 8002588:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;

  /*!< MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <SD_EnableWideBusOperation+0x5c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
  *     @arg SDIO_BusWide_4b: 4-bit data transfer
  *     @arg SDIO_BusWide_1b: 1-bit data transfer
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 8002590:	4605      	mov	r5, r0
  SD_Error errorstatus = SD_OK;

  /*!< MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8002592:	d024      	beq.n	80025de <SD_EnableWideBusOperation+0x56>
  {
    errorstatus = SD_UNSUPPORTED_FEATURE;
    return(errorstatus);
  }
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8002594:	2b02      	cmp	r3, #2
 8002596:	d820      	bhi.n	80025da <SD_EnableWideBusOperation+0x52>
  {
    if (SDIO_BusWide_8b == WideMode)
 8002598:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800259c:	d01f      	beq.n	80025de <SD_EnableWideBusOperation+0x56>
    {
      errorstatus = SD_UNSUPPORTED_FEATURE;
      return(errorstatus);
    }
    else if (SDIO_BusWide_4b == WideMode)
 800259e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80025a2:	d10b      	bne.n	80025bc <SD_EnableWideBusOperation+0x34>
    {
      errorstatus = SDEnWideBus(ENABLE);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7ff fbf7 	bl	8001d98 <SDEnWideBus>

      if (SD_OK == errorstatus)
 80025aa:	4604      	mov	r4, r0
 80025ac:	b9c0      	cbnz	r0, 80025e0 <SD_EnableWideBusOperation+0x58>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 80025ae:	480e      	ldr	r0, [pc, #56]	; (80025e8 <SD_EnableWideBusOperation+0x60>)
 80025b0:	7504      	strb	r4, [r0, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80025b2:	6004      	str	r4, [r0, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 80025b4:	6044      	str	r4, [r0, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80025b6:	6084      	str	r4, [r0, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 80025b8:	60c5      	str	r5, [r0, #12]
 80025ba:	e00a      	b.n	80025d2 <SD_EnableWideBusOperation+0x4a>
        SDIO_Init(&SDIO_InitStructure);
      }
    }
    else
    {
      errorstatus = SDEnWideBus(DISABLE);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fbeb 	bl	8001d98 <SDEnWideBus>

      if (SD_OK == errorstatus)
 80025c2:	4604      	mov	r4, r0
 80025c4:	b960      	cbnz	r0, 80025e0 <SD_EnableWideBusOperation+0x58>
      {
        /*!< Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 80025c6:	4808      	ldr	r0, [pc, #32]	; (80025e8 <SD_EnableWideBusOperation+0x60>)
 80025c8:	7504      	strb	r4, [r0, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 80025ca:	6004      	str	r4, [r0, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 80025cc:	6044      	str	r4, [r0, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80025ce:	6084      	str	r4, [r0, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 80025d0:	60c4      	str	r4, [r0, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80025d2:	6104      	str	r4, [r0, #16]
        SDIO_Init(&SDIO_InitStructure);
 80025d4:	f000 fc20 	bl	8002e18 <SDIO_Init>
 80025d8:	e002      	b.n	80025e0 <SD_EnableWideBusOperation+0x58>
  *     @arg SDIO_BusWide_1b: 1-bit data transfer
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
  SD_Error errorstatus = SD_OK;
 80025da:	2400      	movs	r4, #0
 80025dc:	e000      	b.n	80025e0 <SD_EnableWideBusOperation+0x58>

  /*!< MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
  {
    errorstatus = SD_UNSUPPORTED_FEATURE;
    return(errorstatus);
 80025de:	2427      	movs	r4, #39	; 0x27
      }
    }
  }

  return(errorstatus);
}
 80025e0:	4620      	mov	r0, r4
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	2000002c 	.word	0x2000002c
 80025e8:	20000558 	.word	0x20000558

080025ec <SD_SelectDeselect>:
SD_Error SD_SelectDeselect(uint32_t addr)
{
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <SD_SelectDeselect+0x28>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80025ee:	2240      	movs	r2, #64	; 0x40
  * @brief  Selects od Deselects the corresponding card.
  * @param  addr: Address of the Card to be selected.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SelectDeselect(uint32_t addr)
{
 80025f0:	b510      	push	{r4, lr}
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80025f2:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80025f4:	2200      	movs	r2, #0
SD_Error SD_SelectDeselect(uint32_t addr)
{
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 80025f6:	6018      	str	r0, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
 80025f8:	2407      	movs	r4, #7
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80025fa:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80025fc:	4618      	mov	r0, r3
  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80025fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
{
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
 8002602:	605c      	str	r4, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002604:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002606:	f000 fc33 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
 800260a:	4620      	mov	r0, r4

  return(errorstatus);
}
 800260c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
 8002610:	f7ff bb48 	b.w	8001ca4 <CmdResp1Error>
 8002614:	200004e8 	.word	0x200004e8

08002618 <SD_Init>:
  *         transfer).
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_Init(void)
{
 8002618:	b513      	push	{r0, r1, r4, lr}
  __IO SD_Error errorstatus = SD_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f88d 3007 	strb.w	r3, [sp, #7]

  /* SDIO Peripheral Low Level Init */
  SD_LowLevel_Init();
 8002620:	f7ff fa2c 	bl	8001a7c <SD_LowLevel_Init>

  SDIO_DeInit();
 8002624:	f000 fbea 	bl	8002dfc <SDIO_DeInit>

  errorstatus = SD_PowerON();
 8002628:	f7ff fcbe 	bl	8001fa8 <SD_PowerON>
 800262c:	f88d 0007 	strb.w	r0, [sp, #7]

  if (errorstatus != SD_OK)
 8002630:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002634:	b103      	cbz	r3, 8002638 <SD_Init+0x20>
 8002636:	e029      	b.n	800268c <SD_Init+0x74>
  {
    /*!< CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
  }

  errorstatus = SD_InitializeCards();
 8002638:	f7ff fdb4 	bl	80021a4 <SD_InitializeCards>
 800263c:	f88d 0007 	strb.w	r0, [sp, #7]

  if (errorstatus != SD_OK)
 8002640:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002644:	b102      	cbz	r2, 8002648 <SD_Init+0x30>
 8002646:	e021      	b.n	800268c <SD_Init+0x74>
  }

  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8002648:	4812      	ldr	r0, [pc, #72]	; (8002694 <SD_Init+0x7c>)
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
  SDIO_Init(&SDIO_InitStructure);

  /*----------------- Read CSD/CID MSD registers ------------------*/
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 800264a:	4c13      	ldr	r4, [pc, #76]	; (8002698 <SD_Init+0x80>)
  }

  /*!< Configure the SDIO peripheral */
  /*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
  /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 800264c:	7502      	strb	r2, [r0, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800264e:	6002      	str	r2, [r0, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8002650:	6042      	str	r2, [r0, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8002652:	6082      	str	r2, [r0, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8002654:	60c2      	str	r2, [r0, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8002656:	6102      	str	r2, [r0, #16]
  SDIO_Init(&SDIO_InitStructure);
 8002658:	f000 fbde 	bl	8002e18 <SDIO_Init>

  /*----------------- Read CSD/CID MSD registers ------------------*/
  errorstatus = SD_GetCardInfo(&SDCardInfo);
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fe4f 	bl	8002300 <SD_GetCardInfo>
 8002662:	f88d 0007 	strb.w	r0, [sp, #7]

  if (errorstatus == SD_OK)
 8002666:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800266a:	b933      	cbnz	r3, 800267a <SD_Init+0x62>
  {
    /*----------------- Select Card --------------------------------*/
    errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
 800266c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8002670:	0400      	lsls	r0, r0, #16
 8002672:	f7ff ffbb 	bl	80025ec <SD_SelectDeselect>
 8002676:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  if (errorstatus == SD_OK)
 800267a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800267e:	b92b      	cbnz	r3, 800268c <SD_Init+0x74>
  {
    errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
 8002680:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002684:	f7ff ff80 	bl	8002588 <SD_EnableWideBusOperation>
 8002688:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return(errorstatus);
 800268c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002690:	bd1c      	pop	{r2, r3, r4, pc}
 8002692:	bf00      	nop
 8002694:	20000558 	.word	0x20000558
 8002698:	20000500 	.word	0x20000500

0800269c <SD_ReadMultiBlocksFIXED>:
}

// FIXED Version where ReadAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_ReadMultiBlocksFIXED(uint8_t *readbuff, uint32_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 800269c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a0:	4688      	mov	r8, r1
  SD_Error errorstatus = SD_OK;
  TransferError = SD_OK;
 80026a2:	492e      	ldr	r1, [pc, #184]	; (800275c <SD_ReadMultiBlocksFIXED+0xc0>)
}

// FIXED Version where ReadAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_ReadMultiBlocksFIXED(uint8_t *readbuff, uint32_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 80026a4:	9001      	str	r0, [sp, #4]
 80026a6:	4617      	mov	r7, r2
  SD_Error errorstatus = SD_OK;
  TransferError = SD_OK;
 80026a8:	2200      	movs	r2, #0
 80026aa:	700a      	strb	r2, [r1, #0]
  TransferEnd = 0;
 80026ac:	492c      	ldr	r1, [pc, #176]	; (8002760 <SD_ReadMultiBlocksFIXED+0xc4>)
    BlockSize = 512;
  else
    ReadAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80026ae:	4c2d      	ldr	r4, [pc, #180]	; (8002764 <SD_ReadMultiBlocksFIXED+0xc8>)

SD_Error SD_ReadMultiBlocksFIXED(uint8_t *readbuff, uint32_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
  SD_Error errorstatus = SD_OK;
  TransferError = SD_OK;
  TransferEnd = 0;
 80026b0:	600a      	str	r2, [r1, #0]
  StopCondition = 1;
 80026b2:	492d      	ldr	r1, [pc, #180]	; (8002768 <SD_ReadMultiBlocksFIXED+0xcc>)
 80026b4:	2001      	movs	r0, #1
 80026b6:	6008      	str	r0, [r1, #0]

  SDIO->DCTRL = 0x0;
 80026b8:	492c      	ldr	r1, [pc, #176]	; (800276c <SD_ReadMultiBlocksFIXED+0xd0>)
 80026ba:	62ca      	str	r2, [r1, #44]	; 0x2c

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80026bc:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <SD_ReadMultiBlocksFIXED+0xd4>)
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	2a02      	cmp	r2, #2
    BlockSize = 512;
 80026c2:	bf0c      	ite	eq
 80026c4:	f44f 7700 	moveq.w	r7, #512	; 0x200
  else
    ReadAddr *= BlockSize; // Convert to Bytes for NON SDHC
 80026c8:	fb07 f808 	mulne.w	r8, r7, r8
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80026cc:	4620      	mov	r0, r4

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80026ce:	2200      	movs	r2, #0
  else
    ReadAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80026d0:	2510      	movs	r5, #16
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80026d2:	f04f 0a40 	mov.w	sl, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80026d6:	f44f 6980 	mov.w	r9, #1024	; 0x400
}

// FIXED Version where ReadAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_ReadMultiBlocksFIXED(uint8_t *readbuff, uint32_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 80026da:	469b      	mov	fp, r3

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80026dc:	60e2      	str	r2, [r4, #12]
    BlockSize = 512;
  else
    ReadAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /*!< Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80026de:	6027      	str	r7, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80026e0:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80026e2:	f8c4 a008 	str.w	sl, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80026e6:	f8c4 9010 	str.w	r9, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80026ea:	f000 fbc1 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7ff fad8 	bl	8001ca4 <CmdResp1Error>

  if (SD_OK != errorstatus)
 80026f4:	4606      	mov	r6, r0
 80026f6:	bb70      	cbnz	r0, 8002756 <SD_ReadMultiBlocksFIXED+0xba>
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80026f8:	481e      	ldr	r0, [pc, #120]	; (8002774 <SD_ReadMultiBlocksFIXED+0xd8>)
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 80026fa:	2390      	movs	r3, #144	; 0x90
  if (SD_OK != errorstatus)
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8002700:	6083      	str	r3, [r0, #8]
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8002702:	fb0b f707 	mul.w	r7, fp, r7
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8002706:	2302      	movs	r3, #2
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8002708:	f04f 0b01 	mov.w	fp, #1
  if (SD_OK != errorstatus)
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800270c:	6002      	str	r2, [r0, #0]
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 800270e:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8002710:	6106      	str	r6, [r0, #16]
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8002712:	6047      	str	r7, [r0, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8002714:	f8c0 b014 	str.w	fp, [r0, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);

  /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8002718:	2512      	movs	r5, #18
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 800271a:	f000 fbd1 	bl	8002ec0 <SDIO_DataConfig>
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800271e:	4620      	mov	r0, r4

  /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002720:	60e6      	str	r6, [r4, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);

  /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
 8002722:	f8c4 8000 	str.w	r8, [r4]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8002726:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002728:	f8c4 a008 	str.w	sl, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800272c:	f8c4 9010 	str.w	r9, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002730:	f000 fb9e 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
 8002734:	4628      	mov	r0, r5
 8002736:	f7ff fab5 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 800273a:	4606      	mov	r6, r0
 800273c:	b958      	cbnz	r0, 8002756 <SD_ReadMultiBlocksFIXED+0xba>
  {
    return(errorstatus);
  }

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 800273e:	4659      	mov	r1, fp
 8002740:	f240 302a 	movw	r0, #810	; 0x32a
 8002744:	f000 fbde 	bl	8002f04 <SDIO_ITConfig>
  SDIO_DMACmd(ENABLE);
 8002748:	4658      	mov	r0, fp
 800274a:	f000 fbd5 	bl	8002ef8 <SDIO_DMACmd>
  SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
 800274e:	9801      	ldr	r0, [sp, #4]
 8002750:	4639      	mov	r1, r7
 8002752:	f7ff fa41 	bl	8001bd8 <SD_LowLevel_DMA_RxConfig>

  return(errorstatus);
}
 8002756:	4630      	mov	r0, r6
 8002758:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800275c:	20000018 	.word	0x20000018
 8002760:	20000048 	.word	0x20000048
 8002764:	200004e8 	.word	0x200004e8
 8002768:	2000004c 	.word	0x2000004c
 800276c:	40012c00 	.word	0x40012c00
 8002770:	2000002c 	.word	0x2000002c
 8002774:	20000570 	.word	0x20000570

08002778 <SD_WriteMultiBlocksFIXED>:
}

// FIXED Version where WriteAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_WriteMultiBlocksFIXED(uint8_t *writebuff, uint32_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8002778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800277c:	4616      	mov	r6, r2
  SD_Error errorstatus = SD_OK;

  TransferError = SD_OK;
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <SD_WriteMultiBlocksFIXED+0x10c>)
    BlockSize = 512;
  else
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /* Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8002780:	4c41      	ldr	r4, [pc, #260]	; (8002888 <SD_WriteMultiBlocksFIXED+0x110>)
}

// FIXED Version where WriteAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_WriteMultiBlocksFIXED(uint8_t *writebuff, uint32_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8002782:	4699      	mov	r9, r3
  SD_Error errorstatus = SD_OK;

  TransferError = SD_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	7013      	strb	r3, [r2, #0]
  TransferEnd = 0;
 8002788:	4a40      	ldr	r2, [pc, #256]	; (800288c <SD_WriteMultiBlocksFIXED+0x114>)
 800278a:	6013      	str	r3, [r2, #0]
  StopCondition = 1;
 800278c:	4a40      	ldr	r2, [pc, #256]	; (8002890 <SD_WriteMultiBlocksFIXED+0x118>)
}

// FIXED Version where WriteAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_WriteMultiBlocksFIXED(uint8_t *writebuff, uint32_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 800278e:	468b      	mov	fp, r1
  SD_Error errorstatus = SD_OK;

  TransferError = SD_OK;
  TransferEnd = 0;
  StopCondition = 1;
 8002790:	2101      	movs	r1, #1
 8002792:	6011      	str	r1, [r2, #0]

  SDIO->DCTRL = 0x0;
 8002794:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <SD_WriteMultiBlocksFIXED+0x11c>)
 8002796:	62d3      	str	r3, [r2, #44]	; 0x2c

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <SD_WriteMultiBlocksFIXED+0x120>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
    BlockSize = 512;
 800279e:	bf0c      	ite	eq
 80027a0:	f44f 7600 	moveq.w	r6, #512	; 0x200
  else
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC
 80027a4:	fb06 fb0b 	mulne.w	fp, r6, fp
}

// FIXED Version where WriteAddr is in BLOCKS NOT BYTES, permits SDHC media >4GB

SD_Error SD_WriteMultiBlocksFIXED(uint8_t *writebuff, uint32_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 80027a8:	4682      	mov	sl, r0
  else
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /* Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80027aa:	2510      	movs	r5, #16
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80027ac:	2300      	movs	r3, #0
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80027ae:	4620      	mov	r0, r4
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /* Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80027b0:	f04f 0840 	mov.w	r8, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80027b4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  else
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /* Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80027b8:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80027ba:	60e3      	str	r3, [r4, #12]
    BlockSize = 512;
  else
    WriteAddr *= BlockSize; // Convert to Bytes for NON SDHC

  /* Set Block Size for Card */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80027bc:	6026      	str	r6, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80027be:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80027c2:	6127      	str	r7, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80027c4:	f000 fb54 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
 80027c8:	4628      	mov	r0, r5
 80027ca:	f7ff fa6b 	bl	8001ca4 <CmdResp1Error>

  if (SD_OK != errorstatus)
 80027ce:	4605      	mov	r5, r0
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d153      	bne.n	800287c <SD_WriteMultiBlocksFIXED+0x104>
  {
    return(errorstatus);
  }

  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <SD_WriteMultiBlocksFIXED+0x124>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80027d6:	60e0      	str	r0, [r4, #12]
  {
    return(errorstatus);
  }

  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 80027d8:	681b      	ldr	r3, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80027da:	f8c4 8008 	str.w	r8, [r4, #8]
  {
    return(errorstatus);
  }

  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	6023      	str	r3, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80027e2:	4620      	mov	r0, r4
    return(errorstatus);
  }

  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80027e4:	2337      	movs	r3, #55	; 0x37
 80027e6:	6063      	str	r3, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80027e8:	9301      	str	r3, [sp, #4]
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80027ea:	6127      	str	r7, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80027ec:	f000 fb40 	bl	8002e70 <SDIO_SendCommand>


  errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
 80027f0:	9b01      	ldr	r3, [sp, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fa56 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 80027f8:	4605      	mov	r5, r0
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d13e      	bne.n	800287c <SD_WriteMultiBlocksFIXED+0x104>
  {
    return(errorstatus);
  }
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
 80027fe:	2317      	movs	r3, #23
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002800:	60e0      	str	r0, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002802:	4620      	mov	r0, r4
  {
    return(errorstatus);
  }
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
 8002804:	6063      	str	r3, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002806:	9301      	str	r3, [sp, #4]
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }
  /*!< To improve performance */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 8002808:	f8c4 9000 	str.w	r9, [r4]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800280c:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002810:	6127      	str	r7, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002812:	f000 fb2d 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
 8002816:	9b01      	ldr	r3, [sp, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fa43 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 800281e:	4605      	mov	r5, r0
 8002820:	bb60      	cbnz	r0, 800287c <SD_WriteMultiBlocksFIXED+0x104>
    return(errorstatus);
  }


  /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
 8002822:	f8c4 b000 	str.w	fp, [r4]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002826:	60e0      	str	r0, [r4, #12]
  }


  /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8002828:	f04f 0b19 	mov.w	fp, #25
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800282c:	4620      	mov	r0, r4
  }


  /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 800282e:	f8c4 b004 	str.w	fp, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002832:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002836:	6127      	str	r7, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8002838:	f000 fb1a 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
 800283c:	4658      	mov	r0, fp
 800283e:	f7ff fa31 	bl	8001ca4 <CmdResp1Error>

  if (SD_OK != errorstatus)
 8002842:	4605      	mov	r5, r0
 8002844:	b9d0      	cbnz	r0, 800287c <SD_WriteMultiBlocksFIXED+0x104>
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8002846:	4816      	ldr	r0, [pc, #88]	; (80028a0 <SD_WriteMultiBlocksFIXED+0x128>)
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 800284e:	2701      	movs	r7, #1
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8002850:	2390      	movs	r3, #144	; 0x90
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8002852:	fb09 f606 	mul.w	r6, r9, r6
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
 8002856:	6083      	str	r3, [r0, #8]
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8002858:	6046      	str	r6, [r0, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800285a:	60c5      	str	r5, [r0, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 800285c:	6105      	str	r5, [r0, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 800285e:	6147      	str	r7, [r0, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8002860:	f000 fb2e 	bl	8002ec0 <SDIO_DataConfig>

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 8002864:	4639      	mov	r1, r7
 8002866:	f240 302a 	movw	r0, #810	; 0x32a
 800286a:	f000 fb4b 	bl	8002f04 <SDIO_ITConfig>
  SDIO_DMACmd(ENABLE);
 800286e:	4638      	mov	r0, r7
 8002870:	f000 fb42 	bl	8002ef8 <SDIO_DMACmd>
  SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
 8002874:	4650      	mov	r0, sl
 8002876:	4631      	mov	r1, r6
 8002878:	f7ff f964 	bl	8001b44 <SD_LowLevel_DMA_TxConfig>

  return(errorstatus);
}
 800287c:	4628      	mov	r0, r5
 800287e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002882:	bf00      	nop
 8002884:	20000018 	.word	0x20000018
 8002888:	200004e8 	.word	0x200004e8
 800288c:	20000048 	.word	0x20000048
 8002890:	2000004c 	.word	0x2000004c
 8002894:	40012c00 	.word	0x40012c00
 8002898:	2000002c 	.word	0x2000002c
 800289c:	20000044 	.word	0x20000044
 80028a0:	20000570 	.word	0x20000570

080028a4 <SD_StopTransfer>:
SD_Error SD_StopTransfer(void)
{
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <SD_StopTransfer+0x28>)
  * @brief  Aborts an ongoing data transfer.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_StopTransfer(void)
{
 80028a6:	b510      	push	{r4, lr}
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
 80028a8:	2200      	movs	r2, #0
 80028aa:	240c      	movs	r4, #12
 80028ac:	e880 0014 	stmia.w	r0, {r2, r4}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80028b0:	2140      	movs	r1, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80028b2:	60c2      	str	r2, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80028b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  SD_Error errorstatus = SD_OK;

  /*!< Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80028b8:	6081      	str	r1, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80028ba:	6102      	str	r2, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80028bc:	f000 fad8 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
 80028c0:	4620      	mov	r0, r4

  return(errorstatus);
}
 80028c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
 80028c6:	f7ff b9ed 	b.w	8001ca4 <CmdResp1Error>
 80028ca:	bf00      	nop
 80028cc:	200004e8 	.word	0x200004e8

080028d0 <SD_WaitWriteOperation>:
  *         card are already transferred by the DMA controller.
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitWriteOperation(void)
{
 80028d0:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 80028d2:	4a1a      	ldr	r2, [pc, #104]	; (800293c <SD_WaitWriteOperation+0x6c>)
 80028d4:	491a      	ldr	r1, [pc, #104]	; (8002940 <SD_WaitWriteOperation+0x70>)
 80028d6:	481b      	ldr	r0, [pc, #108]	; (8002944 <SD_WaitWriteOperation+0x74>)
SD_Error SD_WaitWriteOperation(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 80028dc:	e000      	b.n	80028e0 <SD_WaitWriteOperation+0x10>
  {
    timeout--;
 80028de:	3b01      	subs	r3, #1
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 80028e0:	6814      	ldr	r4, [r2, #0]
 80028e2:	b92c      	cbnz	r4, 80028f0 <SD_WaitWriteOperation+0x20>
 80028e4:	680c      	ldr	r4, [r1, #0]
 80028e6:	b91c      	cbnz	r4, 80028f0 <SD_WaitWriteOperation+0x20>
 80028e8:	7804      	ldrb	r4, [r0, #0]
 80028ea:	b90c      	cbnz	r4, 80028f0 <SD_WaitWriteOperation+0x20>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f6      	bne.n	80028de <SD_WaitWriteOperation+0xe>
  {
    timeout--;
  }

  DMAEndOfTransfer = 0x00;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <SD_WaitWriteOperation+0x6c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 80028f6:	f04f 35ff 	mov.w	r5, #4294967295

  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <SD_WaitWriteOperation+0x78>)
 80028fc:	e000      	b.n	8002900 <SD_WaitWriteOperation+0x30>
  {
    timeout--;
 80028fe:	3d01      	subs	r5, #1

  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;

  while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
 8002900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002902:	04d2      	lsls	r2, r2, #19
 8002904:	d501      	bpl.n	800290a <SD_WaitWriteOperation+0x3a>
 8002906:	2d00      	cmp	r5, #0
 8002908:	d1f9      	bne.n	80028fe <SD_WaitWriteOperation+0x2e>
  {
    timeout--;
  }

  if (StopCondition == 1)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <SD_WaitWriteOperation+0x7c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10e      	bne.n	8002930 <SD_WaitWriteOperation+0x60>
  {
    errorstatus = SD_StopTransfer();
 8002912:	f7ff ffc7 	bl	80028a4 <SD_StopTransfer>
 8002916:	4604      	mov	r4, r0
  }

  if ((timeout == 0) && (errorstatus == SD_OK))
 8002918:	b90d      	cbnz	r5, 800291e <SD_WaitWriteOperation+0x4e>
 800291a:	b900      	cbnz	r0, 800291e <SD_WaitWriteOperation+0x4e>
  {
    errorstatus = SD_DATA_TIMEOUT;
 800291c:	2404      	movs	r4, #4
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 800291e:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8002922:	f000 fb05 	bl	8002f30 <SDIO_ClearFlag>

  if (TransferError != SD_OK)
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <SD_WaitWriteOperation+0x74>)
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	b12a      	cbz	r2, 8002938 <SD_WaitWriteOperation+0x68>
  {
    return(TransferError);
 800292c:	781c      	ldrb	r4, [r3, #0]
 800292e:	e003      	b.n	8002938 <SD_WaitWriteOperation+0x68>
  if (StopCondition == 1)
  {
    errorstatus = SD_StopTransfer();
  }

  if ((timeout == 0) && (errorstatus == SD_OK))
 8002930:	2d00      	cmp	r5, #0
 8002932:	d0f3      	beq.n	800291c <SD_WaitWriteOperation+0x4c>
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitWriteOperation(void)
{
  SD_Error errorstatus = SD_OK;
 8002934:	2400      	movs	r4, #0
 8002936:	e7f2      	b.n	800291e <SD_WaitWriteOperation+0x4e>
  }
  else
  {
    return(errorstatus);
  }
}
 8002938:	4620      	mov	r0, r4
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	20000040 	.word	0x20000040
 8002940:	20000048 	.word	0x20000048
 8002944:	20000018 	.word	0x20000018
 8002948:	40012c00 	.word	0x40012c00
 800294c:	2000004c 	.word	0x2000004c

08002950 <SD_WaitReadOperation>:
  *         the DMA controller.
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitReadOperation(void)
{
 8002950:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <SD_WaitReadOperation+0x6c>)
 8002954:	491a      	ldr	r1, [pc, #104]	; (80029c0 <SD_WaitReadOperation+0x70>)
 8002956:	481b      	ldr	r0, [pc, #108]	; (80029c4 <SD_WaitReadOperation+0x74>)
SD_Error SD_WaitReadOperation(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 800295c:	e000      	b.n	8002960 <SD_WaitReadOperation+0x10>
  {
    timeout--;
 800295e:	3b01      	subs	r3, #1
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SD_DATATIMEOUT;

  while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
 8002960:	6814      	ldr	r4, [r2, #0]
 8002962:	b92c      	cbnz	r4, 8002970 <SD_WaitReadOperation+0x20>
 8002964:	680c      	ldr	r4, [r1, #0]
 8002966:	b91c      	cbnz	r4, 8002970 <SD_WaitReadOperation+0x20>
 8002968:	7804      	ldrb	r4, [r0, #0]
 800296a:	b90c      	cbnz	r4, 8002970 <SD_WaitReadOperation+0x20>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f6      	bne.n	800295e <SD_WaitReadOperation+0xe>
  {
    timeout--;
  }

  DMAEndOfTransfer = 0x00;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <SD_WaitReadOperation+0x6c>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

  timeout = SD_DATATIMEOUT;
 8002976:	f04f 35ff 	mov.w	r5, #4294967295

  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <SD_WaitReadOperation+0x78>)
 800297c:	e000      	b.n	8002980 <SD_WaitReadOperation+0x30>
  {
    timeout--;
 800297e:	3d01      	subs	r5, #1

  DMAEndOfTransfer = 0x00;

  timeout = SD_DATATIMEOUT;

  while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	0491      	lsls	r1, r2, #18
 8002984:	d501      	bpl.n	800298a <SD_WaitReadOperation+0x3a>
 8002986:	2d00      	cmp	r5, #0
 8002988:	d1f9      	bne.n	800297e <SD_WaitReadOperation+0x2e>
  {
    timeout--;
  }

  if (StopCondition == 1)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <SD_WaitReadOperation+0x7c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10e      	bne.n	80029b0 <SD_WaitReadOperation+0x60>
  {
    errorstatus = SD_StopTransfer();
 8002992:	f7ff ff87 	bl	80028a4 <SD_StopTransfer>
 8002996:	4604      	mov	r4, r0
  }

  if ((timeout == 0) && (errorstatus == SD_OK))
 8002998:	b90d      	cbnz	r5, 800299e <SD_WaitReadOperation+0x4e>
 800299a:	b900      	cbnz	r0, 800299e <SD_WaitReadOperation+0x4e>
  {
    errorstatus = SD_DATA_TIMEOUT;
 800299c:	2404      	movs	r4, #4
  }

  /*!< Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 800299e:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80029a2:	f000 fac5 	bl	8002f30 <SDIO_ClearFlag>

  if (TransferError != SD_OK)
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <SD_WaitReadOperation+0x74>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	b12a      	cbz	r2, 80029b8 <SD_WaitReadOperation+0x68>
  {
    return(TransferError);
 80029ac:	781c      	ldrb	r4, [r3, #0]
 80029ae:	e003      	b.n	80029b8 <SD_WaitReadOperation+0x68>
  if (StopCondition == 1)
  {
    errorstatus = SD_StopTransfer();
  }

  if ((timeout == 0) && (errorstatus == SD_OK))
 80029b0:	2d00      	cmp	r5, #0
 80029b2:	d0f3      	beq.n	800299c <SD_WaitReadOperation+0x4c>
  * @param  None.
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_WaitReadOperation(void)
{
  SD_Error errorstatus = SD_OK;
 80029b4:	2400      	movs	r4, #0
 80029b6:	e7f2      	b.n	800299e <SD_WaitReadOperation+0x4e>
  }
  else
  {
    return(errorstatus);
  }
}
 80029b8:	4620      	mov	r0, r4
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	20000040 	.word	0x20000040
 80029c0:	20000048 	.word	0x20000048
 80029c4:	20000018 	.word	0x20000018
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	2000004c 	.word	0x2000004c

080029d0 <SD_SendStatus>:
  * @param  pcardstatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register).
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_SendStatus(uint32_t *pcardstatus)
{
 80029d0:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;

  if (pcardstatus == NULL)
 80029d2:	4604      	mov	r4, r0
 80029d4:	b1c0      	cbz	r0, 8002a08 <SD_SendStatus+0x38>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <SD_SendStatus+0x40>)
 80029d8:	480e      	ldr	r0, [pc, #56]	; (8002a14 <SD_SendStatus+0x44>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	6002      	str	r2, [r0, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	6082      	str	r2, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80029e4:	2200      	movs	r2, #0
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
 80029e6:	250d      	movs	r5, #13
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80029e8:	60c2      	str	r2, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80029ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
 80029ee:	6045      	str	r5, [r0, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80029f0:	6102      	str	r2, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80029f2:	f000 fa3d 	bl	8002e70 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
 80029f6:	4628      	mov	r0, r5
 80029f8:	f7ff f954 	bl	8001ca4 <CmdResp1Error>

  if (errorstatus != SD_OK)
 80029fc:	4605      	mov	r5, r0
 80029fe:	b920      	cbnz	r0, 8002a0a <SD_SendStatus+0x3a>
  {
    return(errorstatus);
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
 8002a00:	f000 fa52 	bl	8002ea8 <SDIO_GetResponse>
 8002a04:	6020      	str	r0, [r4, #0]

  return(errorstatus);
 8002a06:	e000      	b.n	8002a0a <SD_SendStatus+0x3a>
  SD_Error errorstatus = SD_OK;

  if (pcardstatus == NULL)
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
 8002a08:	2526      	movs	r5, #38	; 0x26
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);

  return(errorstatus);
}
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	bd38      	pop	{r3, r4, r5, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000044 	.word	0x20000044
 8002a14:	200004e8 	.word	0x200004e8

08002a18 <SD_GetState>:
  * @brief  Returns the current card's state.
  * @param  None
  * @retval SDCardState: SD Card Error or SD Card Current State.
  */
SDCardState SD_GetState(void)
{
 8002a18:	b507      	push	{r0, r1, r2, lr}
  uint32_t resp1 = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9301      	str	r3, [sp, #4]

  if(SD_Detect()== SD_PRESENT)
 8002a1e:	f7ff fab1 	bl	8001f84 <SD_Detect>
 8002a22:	2801      	cmp	r0, #1
 8002a24:	d001      	beq.n	8002a2a <SD_GetState+0x12>
      return (SDCardState)((resp1 >> 9) & 0x0F);
    }
  }
  else
  {
    return SD_CARD_ERROR;
 8002a26:	20ff      	movs	r0, #255	; 0xff
 8002a28:	e007      	b.n	8002a3a <SD_GetState+0x22>
{
  uint32_t resp1 = 0;

  if(SD_Detect()== SD_PRESENT)
  {
    if (SD_SendStatus(&resp1) != SD_OK)
 8002a2a:	a801      	add	r0, sp, #4
 8002a2c:	f7ff ffd0 	bl	80029d0 <SD_SendStatus>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1f8      	bne.n	8002a26 <SD_GetState+0xe>
    {
      return SD_CARD_ERROR;
    }
    else
    {
      return (SDCardState)((resp1 >> 9) & 0x0F);
 8002a34:	9801      	ldr	r0, [sp, #4]
 8002a36:	f3c0 2043 	ubfx	r0, r0, #9, #4
  }
  else
  {
    return SD_CARD_ERROR;
  }
}
 8002a3a:	bd0e      	pop	{r1, r2, r3, pc}

08002a3c <SD_GetStatus>:
  *   This value can be:
  *        - SD_TRANSFER_OK: No data transfer is acting
  *        - SD_TRANSFER_BUSY: Data transfer is acting
  */
SDTransferState SD_GetStatus(void)
{
 8002a3c:	b508      	push	{r3, lr}
  SDCardState cardstate =  SD_CARD_TRANSFER;

  cardstate = SD_GetState();
 8002a3e:	f7ff ffeb 	bl	8002a18 <SD_GetState>

  if (cardstate == SD_CARD_TRANSFER)
 8002a42:	2804      	cmp	r0, #4
 8002a44:	d004      	beq.n	8002a50 <SD_GetStatus+0x14>
  {
    return(SD_TRANSFER_OK);
  }
  else if(cardstate == SD_CARD_ERROR)
  {
    return (SD_TRANSFER_ERROR);
 8002a46:	28ff      	cmp	r0, #255	; 0xff
 8002a48:	bf14      	ite	ne
 8002a4a:	2001      	movne	r0, #1
 8002a4c:	2002      	moveq	r0, #2
 8002a4e:	bd08      	pop	{r3, pc}

  cardstate = SD_GetState();

  if (cardstate == SD_CARD_TRANSFER)
  {
    return(SD_TRANSFER_OK);
 8002a50:	2000      	movs	r0, #0
  }
  else
  {
    return(SD_TRANSFER_BUSY);
  }
}
 8002a52:	bd08      	pop	{r3, pc}

08002a54 <SD_ProcessIRQSrc>:
  * @brief  Allows to process all the interrupts that are high.
  * @param  None
  * @retval SD_Error: SD Card Error code.
  */
SD_Error SD_ProcessIRQSrc(void)
{
 8002a54:	b510      	push	{r4, lr}
  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
 8002a56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a5a:	f000 fa6f 	bl	8002f3c <SDIO_GetITStatus>
 8002a5e:	4c21      	ldr	r4, [pc, #132]	; (8002ae4 <SD_ProcessIRQSrc+0x90>)
 8002a60:	b148      	cbz	r0, 8002a76 <SD_ProcessIRQSrc+0x22>
  {
    TransferError = SD_OK;
 8002a62:	2300      	movs	r3, #0
    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 8002a64:	f44f 7080 	mov.w	r0, #256	; 0x100
  */
SD_Error SD_ProcessIRQSrc(void)
{
  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
  {
    TransferError = SD_OK;
 8002a68:	7023      	strb	r3, [r4, #0]
    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 8002a6a:	f000 fa71 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferEnd = 1;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <SD_ProcessIRQSrc+0x94>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e02e      	b.n	8002ad4 <SD_ProcessIRQSrc+0x80>
  }
  else if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
 8002a76:	2002      	movs	r0, #2
 8002a78:	f000 fa60 	bl	8002f3c <SDIO_GetITStatus>
 8002a7c:	b120      	cbz	r0, 8002a88 <SD_ProcessIRQSrc+0x34>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f000 fa66 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_CRC_FAIL;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e024      	b.n	8002ad2 <SD_ProcessIRQSrc+0x7e>
  }
  else if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
 8002a88:	2008      	movs	r0, #8
 8002a8a:	f000 fa57 	bl	8002f3c <SDIO_GetITStatus>
 8002a8e:	b120      	cbz	r0, 8002a9a <SD_ProcessIRQSrc+0x46>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
 8002a90:	2008      	movs	r0, #8
 8002a92:	f000 fa5d 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferError = SD_DATA_TIMEOUT;
 8002a96:	2304      	movs	r3, #4
 8002a98:	e01b      	b.n	8002ad2 <SD_ProcessIRQSrc+0x7e>
  }
  else if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
 8002a9a:	2020      	movs	r0, #32
 8002a9c:	f000 fa4e 	bl	8002f3c <SDIO_GetITStatus>
 8002aa0:	b120      	cbz	r0, 8002aac <SD_ProcessIRQSrc+0x58>
  {
    SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
 8002aa2:	2020      	movs	r0, #32
 8002aa4:	f000 fa54 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferError = SD_RX_OVERRUN;
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	e012      	b.n	8002ad2 <SD_ProcessIRQSrc+0x7e>
  }
  else if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
 8002aac:	2010      	movs	r0, #16
 8002aae:	f000 fa45 	bl	8002f3c <SDIO_GetITStatus>
 8002ab2:	b120      	cbz	r0, 8002abe <SD_ProcessIRQSrc+0x6a>
  {
    SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
 8002ab4:	2010      	movs	r0, #16
 8002ab6:	f000 fa4b 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferError = SD_TX_UNDERRUN;
 8002aba:	2305      	movs	r3, #5
 8002abc:	e009      	b.n	8002ad2 <SD_ProcessIRQSrc+0x7e>
  }
  else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
 8002abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ac2:	f000 fa3b 	bl	8002f3c <SDIO_GetITStatus>
 8002ac6:	b128      	cbz	r0, 8002ad4 <SD_ProcessIRQSrc+0x80>
  {
    SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
 8002ac8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002acc:	f000 fa40 	bl	8002f50 <SDIO_ClearITPendingBit>
    TransferError = SD_START_BIT_ERR;
 8002ad0:	2307      	movs	r3, #7
 8002ad2:	7023      	strb	r3, [r4, #0]
  }

  SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 8002ad4:	f24c 303a 	movw	r0, #49978	; 0xc33a
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f000 fa13 	bl	8002f04 <SDIO_ITConfig>
                SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
  return(TransferError);
 8002ade:	4b01      	ldr	r3, [pc, #4]	; (8002ae4 <SD_ProcessIRQSrc+0x90>)
 8002ae0:	7818      	ldrb	r0, [r3, #0]
}
 8002ae2:	bd10      	pop	{r4, pc}
 8002ae4:	20000018 	.word	0x20000018
 8002ae8:	20000048 	.word	0x20000048

08002aec <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002aec:	6803      	ldr	r3, [r0, #0]
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002af8:	6043      	str	r3, [r0, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002afa:	6083      	str	r3, [r0, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002afc:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002afe:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 8002b00:	2321      	movs	r3, #33	; 0x21
 8002b02:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <DMA_DeInit+0xd0>)
 8002b06:	4298      	cmp	r0, r3
 8002b08:	d100      	bne.n	8002b0c <DMA_DeInit+0x20>
 8002b0a:	e01e      	b.n	8002b4a <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <DMA_DeInit+0xd4>)
 8002b0e:	4298      	cmp	r0, r3
 8002b10:	d100      	bne.n	8002b14 <DMA_DeInit+0x28>
 8002b12:	e021      	b.n	8002b58 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <DMA_DeInit+0xd8>)
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d100      	bne.n	8002b1c <DMA_DeInit+0x30>
 8002b1a:	e025      	b.n	8002b68 <DMA_DeInit+0x7c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <DMA_DeInit+0xdc>)
 8002b1e:	4298      	cmp	r0, r3
 8002b20:	d100      	bne.n	8002b24 <DMA_DeInit+0x38>
 8002b22:	e029      	b.n	8002b78 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <DMA_DeInit+0xe0>)
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d100      	bne.n	8002b2c <DMA_DeInit+0x40>
 8002b2a:	e02d      	b.n	8002b88 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <DMA_DeInit+0xe4>)
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	d100      	bne.n	8002b34 <DMA_DeInit+0x48>
 8002b32:	e030      	b.n	8002b96 <DMA_DeInit+0xaa>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <DMA_DeInit+0xe8>)
 8002b36:	4298      	cmp	r0, r3
 8002b38:	d100      	bne.n	8002b3c <DMA_DeInit+0x50>
 8002b3a:	e033      	b.n	8002ba4 <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <DMA_DeInit+0xec>)
 8002b3e:	4298      	cmp	r0, r3
 8002b40:	d100      	bne.n	8002b44 <DMA_DeInit+0x58>
 8002b42:	e036      	b.n	8002bb2 <DMA_DeInit+0xc6>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <DMA_DeInit+0xf0>)
 8002b46:	4298      	cmp	r0, r3
 8002b48:	d103      	bne.n	8002b52 <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002b4a:	223d      	movs	r2, #61	; 0x3d
 8002b4c:	f843 2c08 	str.w	r2, [r3, #-8]
 8002b50:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <DMA_DeInit+0xf4>)
 8002b54:	4298      	cmp	r0, r3
 8002b56:	d104      	bne.n	8002b62 <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002b58:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002b5c:	f843 2c20 	str.w	r2, [r3, #-32]
 8002b60:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <DMA_DeInit+0xf8>)
 8002b64:	4298      	cmp	r0, r3
 8002b66:	d104      	bne.n	8002b72 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002b68:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002b6c:	f843 2c38 	str.w	r2, [r3, #-56]
 8002b70:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <DMA_DeInit+0xfc>)
 8002b74:	4298      	cmp	r0, r3
 8002b76:	d104      	bne.n	8002b82 <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002b78:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002b7c:	f843 2c50 	str.w	r2, [r3, #-80]
 8002b80:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <DMA_DeInit+0x100>)
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d103      	bne.n	8002b90 <DMA_DeInit+0xa4>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <DMA_DeInit+0x104>)
 8002b8a:	f843 2c64 	str.w	r2, [r3, #-100]
 8002b8e:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <DMA_DeInit+0x108>)
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d103      	bne.n	8002b9e <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <DMA_DeInit+0x10c>)
 8002b98:	f843 2c7c 	str.w	r2, [r3, #-124]
 8002b9c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <DMA_DeInit+0x110>)
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	d103      	bne.n	8002bac <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <DMA_DeInit+0x114>)
 8002ba6:	f843 2c94 	str.w	r2, [r3, #-148]
 8002baa:	4770      	bx	lr
  }
  else
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <DMA_DeInit+0x118>)
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d103      	bne.n	8002bba <DMA_DeInit+0xce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002bb2:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002bb6:	f843 2cac 	str.w	r2, [r3, #-172]
 8002bba:	4770      	bx	lr
 8002bbc:	40026010 	.word	0x40026010
 8002bc0:	40026028 	.word	0x40026028
 8002bc4:	40026040 	.word	0x40026040
 8002bc8:	40026058 	.word	0x40026058
 8002bcc:	40026070 	.word	0x40026070
 8002bd0:	40026088 	.word	0x40026088
 8002bd4:	400260a0 	.word	0x400260a0
 8002bd8:	400260b8 	.word	0x400260b8
 8002bdc:	40026410 	.word	0x40026410
 8002be0:	40026428 	.word	0x40026428
 8002be4:	40026440 	.word	0x40026440
 8002be8:	40026458 	.word	0x40026458
 8002bec:	40026470 	.word	0x40026470
 8002bf0:	2000003d 	.word	0x2000003d
 8002bf4:	40026488 	.word	0x40026488
 8002bf8:	20000f40 	.word	0x20000f40
 8002bfc:	400264a0 	.word	0x400264a0
 8002c00:	203d0000 	.word	0x203d0000
 8002c04:	400264b8 	.word	0x400264b8

08002c08 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002c08:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002c0c:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0e:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c10:	68cc      	ldr	r4, [r1, #12]
 8002c12:	680a      	ldr	r2, [r1, #0]
 8002c14:	4314      	orrs	r4, r2
 8002c16:	694a      	ldr	r2, [r1, #20]
 8002c18:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002c1a:	698a      	ldr	r2, [r1, #24]
 8002c1c:	4314      	orrs	r4, r2
 8002c1e:	69ca      	ldr	r2, [r1, #28]
 8002c20:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002c22:	6a0a      	ldr	r2, [r1, #32]
 8002c24:	4314      	orrs	r4, r2
 8002c26:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002c28:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002c2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002c2c:	4314      	orrs	r4, r2
 8002c2e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8002c30:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002c32:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8002c34:	4322      	orrs	r2, r4
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c36:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002c38:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002c3a:	6944      	ldr	r4, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002c3c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002c3e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c40:	f024 0407 	bic.w	r4, r4, #7

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002c44:	4313      	orrs	r3, r2
 8002c46:	4323      	orrs	r3, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002c48:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002c4a:	690b      	ldr	r3, [r1, #16]
 8002c4c:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002c4e:	684b      	ldr	r3, [r1, #4]
 8002c50:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002c52:	688b      	ldr	r3, [r1, #8]
 8002c54:	60c3      	str	r3, [r0, #12]
 8002c56:	bd10      	pop	{r4, pc}
 8002c58:	f01c803f 	.word	0xf01c803f

08002c5c <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002c5c:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c5e:	b111      	cbz	r1, 8002c66 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	e001      	b.n	8002c6a <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6003      	str	r3, [r0, #0]
 8002c6c:	4770      	bx	lr

08002c6e <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;
 8002c6e:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8002c70:	b111      	cbz	r1, 8002c78 <DMA_FlowControllerConfig+0xa>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	e001      	b.n	8002c7c <DMA_FlowControllerConfig+0xe>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;
 8002c78:	f023 0320 	bic.w	r3, r3, #32
 8002c7c:	6003      	str	r3, [r0, #0]
 8002c7e:	4770      	bx	lr

08002c80 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002c80:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <DMA_ClearFlag+0x24>)
 8002c84:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <DMA_ClearFlag+0x28>)
 8002c86:	4c09      	ldr	r4, [pc, #36]	; (8002cac <DMA_ClearFlag+0x2c>)
 8002c88:	42a0      	cmp	r0, r4
 8002c8a:	bf8c      	ite	hi
 8002c8c:	4610      	movhi	r0, r2
 8002c8e:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2;
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c90:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8002c94:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c98:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8002c9c:	bf14      	ite	ne
 8002c9e:	60c1      	strne	r1, [r0, #12]
  }
  else
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002ca0:	6081      	streq	r1, [r0, #8]
 8002ca2:	bd10      	pop	{r4, pc}
 8002ca4:	40026000 	.word	0x40026000
 8002ca8:	40026400 	.word	0x40026400
 8002cac:	4002640f 	.word	0x4002640f

08002cb0 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8002cb0:	060b      	lsls	r3, r1, #24
 8002cb2:	d511      	bpl.n	8002cd8 <DMA_ITConfig+0x28>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002cb4:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8002cb6:	b14a      	cbz	r2, 8002ccc <DMA_ITConfig+0x1c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002cbc:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002cbe:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002cc0:	d014      	beq.n	8002cec <DMA_ITConfig+0x3c>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	f001 011e 	and.w	r1, r1, #30
 8002cc8:	4319      	orrs	r1, r3
 8002cca:	e00e      	b.n	8002cea <DMA_ITConfig+0x3a>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }
    else
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;
 8002ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002cd0:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }
    else
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;
 8002cd2:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002cd4:	d104      	bne.n	8002ce0 <DMA_ITConfig+0x30>
 8002cd6:	4770      	bx	lr
 8002cd8:	2980      	cmp	r1, #128	; 0x80
 8002cda:	d007      	beq.n	8002cec <DMA_ITConfig+0x3c>
  {
    if (NewState != DISABLE)
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	d1f0      	bne.n	8002cc2 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	f001 011e 	and.w	r1, r1, #30
 8002ce6:	ea23 0101 	bic.w	r1, r3, r1
 8002cea:	6001      	str	r1, [r0, #0]
 8002cec:	4770      	bx	lr

08002cee <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002cf2:	680f      	ldr	r7, [r1, #0]
//  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
//  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002cf4:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002cf6:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002cfa:	f04f 0803 	mov.w	r8, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002cfe:	fa0c f203 	lsl.w	r2, ip, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002d02:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 8002d06:	4295      	cmp	r5, r2
 8002d08:	d131      	bne.n	8002d6e <GPIO_Init+0x80>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8002d0a:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002d0c:	6806      	ldr	r6, [r0, #0]
 8002d0e:	fa08 f402 	lsl.w	r4, r8, r2
 8002d12:	43e4      	mvns	r4, r4
 8002d14:	4026      	ands	r6, r4
 8002d16:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002d18:	790e      	ldrb	r6, [r1, #4]
 8002d1a:	f8d0 9000 	ldr.w	r9, [r0]
 8002d1e:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002d22:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002d24:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002d28:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002d2a:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002d2e:	d815      	bhi.n	8002d5c <GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
//        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002d30:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002d32:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
//        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002d36:	4026      	ands	r6, r4
 8002d38:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002d3a:	6886      	ldr	r6, [r0, #8]
 8002d3c:	fa09 f902 	lsl.w	r9, r9, r2
 8002d40:	ea49 0606 	orr.w	r6, r9, r6
 8002d44:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
//        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002d46:	6846      	ldr	r6, [r0, #4]
 8002d48:	ea26 0505 	bic.w	r5, r6, r5
 8002d4c:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d4e:	798d      	ldrb	r5, [r1, #6]
 8002d50:	6846      	ldr	r6, [r0, #4]
 8002d52:	fa05 f503 	lsl.w	r5, r5, r3

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8002d56:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
//        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d58:	4335      	orrs	r5, r6
 8002d5a:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002d5c:	68c5      	ldr	r5, [r0, #12]
 8002d5e:	402c      	ands	r4, r5
 8002d60:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002d62:	79cd      	ldrb	r5, [r1, #7]
 8002d64:	68c4      	ldr	r4, [r0, #12]
 8002d66:	fa05 f202 	lsl.w	r2, r5, r2
 8002d6a:	4322      	orrs	r2, r4
 8002d6c:	60c2      	str	r2, [r0, #12]
//  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
//  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d6e:	3301      	adds	r3, #1
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d1c4      	bne.n	8002cfe <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d78 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002d78:	6903      	ldr	r3, [r0, #16]
 8002d7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2000      	moveq	r0, #0
 8002d80:	2001      	movne	r0, #1
 8002d82:	4770      	bx	lr

08002d84 <GPIO_PinAFConfig>:
  /* Check the parameters */
//  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
//  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
//  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d84:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d88:	08c9      	lsrs	r1, r1, #3
 8002d8a:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002d8c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
//  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
//  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
//  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d8e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d90:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8002d94:	240f      	movs	r4, #15
 8002d96:	fa04 f403 	lsl.w	r4, r4, r3
 8002d9a:	ea25 0404 	bic.w	r4, r5, r4
 8002d9e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002da2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
//  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
//  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
//  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002da6:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002daa:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002dac:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8002db0:	bd30      	pop	{r4, r5, pc}
	...

08002db4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <RCC_AHB1PeriphClockCmd+0x14>)
//  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

//  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
//  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

//  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002db8:	b109      	cbz	r1, 8002dbe <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002dba:	4310      	orrs	r0, r2
 8002dbc:	e001      	b.n	8002dc2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002dbe:	ea22 0000 	bic.w	r0, r2, r0
 8002dc2:	6318      	str	r0, [r3, #48]	; 0x30
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002dd0:	b109      	cbz	r1, 8002dd6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002dd2:	4310      	orrs	r0, r2
 8002dd4:	e001      	b.n	8002dda <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002dd6:	ea22 0000 	bic.w	r0, r2, r0
 8002dda:	6458      	str	r0, [r3, #68]	; 0x44
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002de8:	b109      	cbz	r1, 8002dee <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002dea:	4310      	orrs	r0, r2
 8002dec:	e001      	b.n	8002df2 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002dee:	ea22 0000 	bic.w	r0, r2, r0
 8002df2:	6258      	str	r0, [r3, #36]	; 0x24
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8002dfc:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e04:	f7ff ffee 	bl	8002de4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8002e08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e0c:	2100      	movs	r1, #0
}
 8002e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8002e12:	f7ff bfe7 	b.w	8002de4 <RCC_APB2PeriphResetCmd>
	...

08002e18 <SDIO_Init>:
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e18:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl));

/*---------------------------- SDIO CLKCR Configuration ------------------------*/
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SDIO_Init+0x2c>)
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8002e1c:	b510      	push	{r4, lr}
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e1e:	6844      	ldr	r4, [r0, #4]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl));

/*---------------------------- SDIO CLKCR Configuration ------------------------*/
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8002e20:	6853      	ldr	r3, [r2, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e22:	430c      	orrs	r4, r1
 8002e24:	68c1      	ldr	r1, [r0, #12]
 8002e26:	430c      	orrs	r4, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8002e28:	6801      	ldr	r1, [r0, #0]
 8002e2a:	430c      	orrs	r4, r1
 8002e2c:	6901      	ldr	r1, [r0, #16]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e2e:	7d00      	ldrb	r0, [r0, #20]
/*---------------------------- SDIO CLKCR Configuration ------------------------*/
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;

  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8002e30:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8002e34:	4321      	orrs	r1, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;

  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8002e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl);
 8002e3a:	430b      	orrs	r3, r1
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e3c:	4303      	orrs	r3, r0
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl);

  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8002e3e:	6053      	str	r3, [r2, #4]
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8002e48:	4b01      	ldr	r3, [pc, #4]	; (8002e50 <SDIO_ClockCmd+0x8>)
 8002e4a:	6018      	str	r0, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	422580a0 	.word	0x422580a0

08002e54 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));

  SDIO->POWER = SDIO_PowerState;
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <SDIO_SetPowerState+0x8>)
 8002e56:	6018      	str	r0, [r3, #0]
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40012c00 	.word	0x40012c00

08002e60 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <SDIO_GetPowerState+0xc>)
 8002e62:	6818      	ldr	r0, [r3, #0]
}
 8002e64:	f000 0003 	and.w	r0, r0, #3
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00

08002e70 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));

/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8002e70:	6802      	ldr	r2, [r0, #0]
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <SDIO_SendCommand+0x28>)
  *         structure that contains the configuration information for the SDIO
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8002e74:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));

/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8002e76:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002e78:	6841      	ldr	r1, [r0, #4]
 8002e7a:	6884      	ldr	r4, [r0, #8]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;

/*---------------------------- SDIO CMD Configuration ------------------------*/
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8002e7c:	68da      	ldr	r2, [r3, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002e7e:	430c      	orrs	r4, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002e80:	68c1      	ldr	r1, [r0, #12]
 8002e82:	6900      	ldr	r0, [r0, #16]

/*---------------------------- SDIO CMD Configuration ------------------------*/
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8002e84:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002e88:	4321      	orrs	r1, r4

/*---------------------------- SDIO CMD Configuration ------------------------*/
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8002e8a:	f022 0207 	bic.w	r2, r2, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002e8e:	4301      	orrs	r1, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002e90:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;

  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00

08002e9c <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <SDIO_GetCommandResponse+0x8>)
 8002e9e:	6918      	ldr	r0, [r3, #16]
}
 8002ea0:	b2c0      	uxtb	r0, r0
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00

08002ea8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8002ea8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <SDIO_GetResponse+0x14>)
 8002eb0:	18c3      	adds	r3, r0, r3
 8002eb2:	9301      	str	r3, [sp, #4]

  return (*(__IO uint32_t *) tmp);
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
}
 8002eb8:	b002      	add	sp, #8
 8002eba:	4770      	bx	lr
 8002ebc:	40012c14 	.word	0x40012c14

08002ec0 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8002ec0:	6802      	ldr	r2, [r0, #0]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8002ec4:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8002ec8:	6842      	ldr	r2, [r0, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002ecc:	68c2      	ldr	r2, [r0, #12]
 8002ece:	6881      	ldr	r1, [r0, #8]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8002ed0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002ed2:	4311      	orrs	r1, r2
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8002ed4:	6902      	ldr	r2, [r0, #16]
 8002ed6:	6940      	ldr	r0, [r0, #20]
 8002ed8:	430a      	orrs	r2, r1

/*---------------------------- SDIO DCTRL Configuration ----------------------*/
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8002eda:	f024 04f7 	bic.w	r4, r4, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8002ede:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002ee0:	4322      	orrs	r2, r4
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee4:	bd10      	pop	{r4, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40012c00 	.word	0x40012c00

08002eec <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{
  return SDIO->FIFO;
 8002eec:	4b01      	ldr	r3, [pc, #4]	; (8002ef4 <SDIO_ReadData+0x8>)
 8002eee:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00

08002ef8 <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8002ef8:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <SDIO_DMACmd+0x8>)
 8002efa:	6018      	str	r0, [r3, #0]
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	4225858c 	.word	0x4225858c

08002f04 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f08:	b109      	cbz	r1, 8002f0e <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8002f0a:	4310      	orrs	r0, r2
 8002f0c:	e001      	b.n	8002f12 <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8002f0e:	ea22 0000 	bic.w	r0, r2, r0
 8002f12:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00

08002f1c <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));

  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <SDIO_GetFlagStatus+0x10>)
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002f22:	bf0c      	ite	eq
 8002f24:	2000      	moveq	r0, #0
 8002f26:	2001      	movne	r0, #1
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40012c00 	.word	0x40012c00

08002f30 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));

  SDIO->ICR = SDIO_FLAG;
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <SDIO_ClearFlag+0x8>)
 8002f32:	6398      	str	r0, [r3, #56]	; 0x38
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40012c00 	.word	0x40012c00

08002f3c <SDIO_GetITStatus>:
{
  ITStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <SDIO_GetITStatus+0x10>)
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002f42:	bf0c      	ite	eq
 8002f44:	2000      	moveq	r0, #0
 8002f46:	2001      	movne	r0, #1
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00

08002f50 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));

  SDIO->ICR = SDIO_IT;
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <SDIO_ClearITPendingBit+0x8>)
 8002f52:	6398      	str	r0, [r3, #56]	; 0x38
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002f5c:	4770      	bx	lr

08002f5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002f5e:	e7fe      	b.n	8002f5e <HardFault_Handler>

08002f60 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002f60:	e7fe      	b.n	8002f60 <MemManage_Handler>

08002f62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002f62:	e7fe      	b.n	8002f62 <BusFault_Handler>

08002f64 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002f64:	e7fe      	b.n	8002f64 <UsageFault_Handler>

08002f66 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002f66:	4770      	bx	lr

08002f68 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002f68:	4770      	bx	lr

08002f6a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002f6a:	4770      	bx	lr

08002f6c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002f6c:	4770      	bx	lr

08002f6e <SDIO_IRQHandler>:
  * @retval None
  */
void SDIO_IRQHandler(void)
{
  /* Process All SDIO Interrupt Sources */
  SD_ProcessIRQSrc();
 8002f6e:	f7ff bd71 	b.w	8002a54 <SD_ProcessIRQSrc>
	...

08002f74 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <SystemInit+0xd4>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8002f88:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f8c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f8e:	492f      	ldr	r1, [pc, #188]	; (800304c <SystemInit+0xd8>)
 8002f90:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f92:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f94:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f96:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002f9a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f9c:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002f9e:	9200      	str	r2, [sp, #0]
 8002fa0:	9201      	str	r2, [sp, #4]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002fb0:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8002fb2:	9a00      	ldr	r2, [sp, #0]
 8002fb4:	3201      	adds	r2, #1
 8002fb6:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002fb8:	9a01      	ldr	r2, [sp, #4]
 8002fba:	b91a      	cbnz	r2, 8002fc4 <SystemInit+0x50>
 8002fbc:	9a00      	ldr	r2, [sp, #0]
 8002fbe:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002fc2:	d1f2      	bne.n	8002faa <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <SystemInit+0xd4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8002fcc:	bf18      	it	ne
 8002fce:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002fd0:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002fd2:	9b01      	ldr	r3, [sp, #4]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d004      	beq.n	8002fe2 <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <SystemInit+0xdc>)
 8002fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e02f      	b.n	8003042 <SystemInit+0xce>
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <SystemInit+0xd4>)
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <SystemInit+0xe0>)
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002ff4:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	609a      	str	r2, [r3, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003000:	609a      	str	r2, [r3, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003008:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <SystemInit+0xe4>)
 800300c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003014:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <SystemInit+0xd4>)
 800301a:	0189      	lsls	r1, r1, #6
 800301c:	d5fb      	bpl.n	8003016 <SystemInit+0xa2>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <SystemInit+0xe8>)
 8003020:	f240 6105 	movw	r1, #1541	; 0x605
 8003024:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003026:	6893      	ldr	r3, [r2, #8]
 8003028:	f023 0303 	bic.w	r3, r3, #3
 800302c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800302e:	6893      	ldr	r3, [r2, #8]
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003036:	6893      	ldr	r3, [r2, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d1fa      	bne.n	8003036 <SystemInit+0xc2>
 8003040:	e7ca      	b.n	8002fd8 <SystemInit+0x64>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8003042:	b002      	add	sp, #8
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	24003010 	.word	0x24003010
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	40007000 	.word	0x40007000
 8003058:	07405408 	.word	0x07405408
 800305c:	40023c00 	.word	0x40023c00
 8003060:	2c2b2a22 	.word	0x2c2b2a22
 8003064:	3d3c3b3a 	.word	0x3d3c3b3a
 8003068:	5d5b3f3e 	.word	0x5d5b3f3e
 800306c:	7f7c      	.short	0x7f7c
 800306e:	00          	.byte	0x00
 800306f:	4d          	.byte	0x4d
 8003070:	41535345 	.word	0x41535345
 8003074:	542e4547 	.word	0x542e4547
 8003078:	4c005458 	.word	0x4c005458
 800307c:	54474e45 	.word	0x54474e45
 8003080:	58542e48 	.word	0x58542e48
 8003084:	49440054 	.word	0x49440054
 8003088:	58542e52 	.word	0x58542e52
 800308c:	0a0d0054 	.word	0x0a0d0054
 8003090:	00000000 	.word	0x00000000
