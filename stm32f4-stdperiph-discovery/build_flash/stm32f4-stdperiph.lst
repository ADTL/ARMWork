
stm32f4-stdperiph.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8000188:	2302      	movs	r3, #2
 800018a:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 800018c:	2310      	movs	r3, #16
 800018e:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8000190:	2300      	movs	r3, #0
 8000192:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8000194:	233e      	movs	r3, #62	; 0x3e
 8000196:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8000198:	232a      	movs	r3, #42	; 0x2a
 800019a:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 800019c:	23ff      	movs	r3, #255	; 0xff
 800019e:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 80001a0:	6081      	str	r1, [r0, #8]
 80001a2:	4770      	bx	lr

080001a4 <ST7032i_command>:
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 80001a4:	b507      	push	{r0, r1, r2, lr}
 80001a6:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 80001a8:	2200      	movs	r2, #0
 80001aa:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value;
 80001ae:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80001b2:	aa01      	add	r2, sp, #4
 80001b4:	7b59      	ldrb	r1, [r3, #13]
 80001b6:	6880      	ldr	r0, [r0, #8]
 80001b8:	2302      	movs	r3, #2
 80001ba:	f000 fc0f 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001be:	2032      	movs	r0, #50	; 0x32
 80001c0:	f000 f9a6 	bl	8000510 <delay_us>
}
 80001c4:	bd0e      	pop	{r1, r2, r3, pc}

080001c6 <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 80001c6:	b507      	push	{r0, r1, r2, lr}
 80001c8:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = 0b01000000;
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value & 0xff;
 80001d0:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80001d4:	aa01      	add	r2, sp, #4
 80001d6:	7b59      	ldrb	r1, [r3, #13]
 80001d8:	6880      	ldr	r0, [r0, #8]
 80001da:	2302      	movs	r3, #2
 80001dc:	f000 fbfe 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 f995 	bl	8000510 <delay_us>
	return 1; // assume success
}
 80001e6:	2001      	movs	r0, #1
 80001e8:	bd0e      	pop	{r1, r2, r3, pc}

080001ea <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 80001ea:	b570      	push	{r4, r5, r6, lr}
 80001ec:	4606      	mov	r6, r0
 80001ee:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001f0:	2400      	movs	r4, #0
 80001f2:	e004      	b.n	80001fe <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 80001f4:	4630      	mov	r0, r6
 80001f6:	f7ff ffe6 	bl	80001c6 <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001fa:	3401      	adds	r4, #1
 80001fc:	b2a4      	uxth	r4, r4
 80001fe:	5d29      	ldrb	r1, [r5, r4]
 8000200:	2900      	cmp	r1, #0
 8000202:	d1f7      	bne.n	80001f4 <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8000204:	4620      	mov	r0, r4
 8000206:	bd70      	pop	{r4, r5, r6, pc}

08000208 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8000208:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 800020c:	b510      	push	{r4, lr}
 800020e:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8000210:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8000212:	2138      	movs	r1, #56	; 0x38
 8000214:	f7ff ffc6 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8000218:	4620      	mov	r0, r4
 800021a:	2139      	movs	r1, #57	; 0x39
 800021c:	f7ff ffc2 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000220:	2002      	movs	r0, #2
 8000222:	f000 f965 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000226:	7b21      	ldrb	r1, [r4, #12]
 8000228:	f001 010f 	and.w	r1, r1, #15
 800022c:	4620      	mov	r0, r4
 800022e:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000232:	f7ff ffb7 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 f95a 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800023c:	7b21      	ldrb	r1, [r4, #12]
 800023e:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000242:	4620      	mov	r0, r4
 8000244:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000248:	f7ff ffac 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 800024c:	4620      	mov	r0, r4
 800024e:	2138      	movs	r1, #56	; 0x38
 8000250:	f7ff ffa8 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000254:	2002      	movs	r0, #2
}
 8000256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 800025a:	f000 b949 	b.w	80004f0 <delay_ms>

0800025e <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 800025e:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8000260:	2101      	movs	r1, #1
 8000262:	f7ff ff9f 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000266:	20c8      	movs	r0, #200	; 0xc8
}
 8000268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800026c:	f000 b940 	b.w	80004f0 <delay_ms>

08000270 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8000270:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8000272:	2102      	movs	r1, #2
 8000274:	f7ff ff96 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000278:	20c8      	movs	r0, #200	; 0xc8
}
 800027a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800027e:	f000 b937 	b.w	80004f0 <delay_ms>

08000282 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000282:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <ST7032i_setCursor+0x42>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000286:	4605      	mov	r5, r0
 8000288:	4614      	mov	r4, r2
 800028a:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 800028e:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	af04      	add	r7, sp, #16
 8000292:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8000296:	792b      	ldrb	r3, [r5, #4]
 8000298:	429c      	cmp	r4, r3
 800029a:	d304      	bcc.n	80002a6 <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 800029c:	fbb4 f2f3 	udiv	r2, r4, r3
 80002a0:	fb03 4412 	mls	r4, r3, r2, r4
 80002a4:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002ac:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 80002ae:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80002b2:	1871      	adds	r1, r6, r1
 80002b4:	b2c9      	uxtb	r1, r1
 80002b6:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 80002bc:	b005      	add	sp, #20
 80002be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002c2:	e76f      	b.n	80001a4 <ST7032i_command>
 80002c4:	08008ad0 	.word	0x08008ad0

080002c8 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 80002c8:	7841      	ldrb	r1, [r0, #1]
 80002ca:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80002ce:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002d0:	f041 0108 	orr.w	r1, r1, #8
 80002d4:	e766      	b.n	80001a4 <ST7032i_command>

080002d6 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002d6:	7841      	ldrb	r1, [r0, #1]
 80002d8:	f041 0204 	orr.w	r2, r1, #4
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002dc:	f041 010c 	orr.w	r1, r1, #12
	this->_displaycontrol &= ~LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002e0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002e2:	e75f      	b.n	80001a4 <ST7032i_command>

080002e4 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e4:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002e6:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e8:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002ea:	f7ff ff5b 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 80002ee:	4620      	mov	r0, r4
 80002f0:	2139      	movs	r1, #57	; 0x39
 80002f2:	f7ff ff57 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 80002f6:	2002      	movs	r0, #2
 80002f8:	f000 f8fa 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 80002fc:	4620      	mov	r0, r4
 80002fe:	2114      	movs	r1, #20
 8000300:	f7ff ff50 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000304:	7b21      	ldrb	r1, [r4, #12]
 8000306:	f001 010f 	and.w	r1, r1, #15
 800030a:	4620      	mov	r0, r4
 800030c:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000310:	f7ff ff48 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 f8eb 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800031a:	7b21      	ldrb	r1, [r4, #12]
 800031c:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000320:	4620      	mov	r0, r4
 8000322:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000326:	f7ff ff3d 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800032a:	4620      	mov	r0, r4
 800032c:	216c      	movs	r1, #108	; 0x6c
 800032e:	f7ff ff39 	bl	80001a4 <ST7032i_command>
	delay_ms(300);
 8000332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000336:	f000 f8db 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800033a:	4620      	mov	r0, r4
 800033c:	2138      	movs	r1, #56	; 0x38
 800033e:	f7ff ff31 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8000342:	4620      	mov	r0, r4
 8000344:	210c      	movs	r1, #12
 8000346:	f7ff ff2d 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 800034a:	2002      	movs	r0, #2
 800034c:	f000 f8d0 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8000350:	4620      	mov	r0, r4
 8000352:	2101      	movs	r1, #1
 8000354:	f7ff ff26 	bl	80001a4 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8000358:	2002      	movs	r0, #2
 800035a:	f000 f8c9 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 800035e:	4620      	mov	r0, r4
 8000360:	2102      	movs	r1, #2
 8000362:	f7ff ff1f 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 f8c2 	bl	80004f0 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 800036c:	7821      	ldrb	r1, [r4, #0]
 800036e:	4620      	mov	r0, r4
 8000370:	f041 0120 	orr.w	r1, r1, #32
 8000374:	f7ff ff16 	bl	80001a4 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000378:	2304      	movs	r3, #4
 800037a:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 800037c:	4620      	mov	r0, r4
 800037e:	f7ff ffaa 	bl	80002d6 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 8000382:	4620      	mov	r0, r4
 8000384:	f7ff ff6b 	bl	800025e <ST7032i_clear>
	ST7032i_home(lcd);
 8000388:	4620      	mov	r0, r4
 800038a:	f7ff ff71 	bl	8000270 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800038e:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8000390:	4620      	mov	r0, r4
 8000392:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000394:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 8000396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 800039a:	e703      	b.n	80001a4 <ST7032i_command>

0800039c <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 800039c:	7841      	ldrb	r1, [r0, #1]
 800039e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80003a2:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003a4:	f041 0108 	orr.w	r1, r1, #8
 80003a8:	e6fc      	b.n	80001a4 <ST7032i_command>

080003aa <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003aa:	7841      	ldrb	r1, [r0, #1]
 80003ac:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b0:	f041 0109 	orr.w	r1, r1, #9
	this->_displaycontrol &= ~LCD_BLINKON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003b4:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b6:	e6f5      	b.n	80001a4 <ST7032i_command>

080003b8 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80003b8:	7841      	ldrb	r1, [r0, #1]
 80003ba:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003be:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003c0:	f041 0108 	orr.w	r1, r1, #8
 80003c4:	e6ee      	b.n	80001a4 <ST7032i_command>

080003c6 <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003c6:	7841      	ldrb	r1, [r0, #1]
 80003c8:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003cc:	f041 010a 	orr.w	r1, r1, #10
	this->_displaycontrol &= ~LCD_CURSORON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003d0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003d2:	e6e7      	b.n	80001a4 <ST7032i_command>

080003d4 <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003d4:	2118      	movs	r1, #24
 80003d6:	e6e5      	b.n	80001a4 <ST7032i_command>

080003d8 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80003d8:	211c      	movs	r1, #28
 80003da:	e6e3      	b.n	80001a4 <ST7032i_command>

080003dc <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003dc:	7881      	ldrb	r1, [r0, #2]
 80003de:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e2:	f041 0106 	orr.w	r1, r1, #6
void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003e6:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e8:	e6dc      	b.n	80001a4 <ST7032i_command>

080003ea <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 80003ea:	7881      	ldrb	r1, [r0, #2]
 80003ec:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003f0:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003f2:	f041 0104 	orr.w	r1, r1, #4
 80003f6:	e6d5      	b.n	80001a4 <ST7032i_command>

080003f8 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 80003f8:	7881      	ldrb	r1, [r0, #2]
 80003fa:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003fe:	f041 0105 	orr.w	r1, r1, #5
	this->_displaymode &= ~LCD_ENTRYLEFT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8000402:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8000404:	e6ce      	b.n	80001a4 <ST7032i_command>

08000406 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8000406:	7881      	ldrb	r1, [r0, #2]
 8000408:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800040c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 800040e:	f041 0104 	orr.w	r1, r1, #4
 8000412:	e6c7      	b.n	80001a4 <ST7032i_command>

08000414 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000414:	f001 0107 	and.w	r1, r1, #7
 8000418:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 800041a:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800041c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8000420:	4606      	mov	r6, r0
 8000422:	4615      	mov	r5, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000424:	f7ff febe 	bl	80001a4 <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8000428:	2400      	movs	r4, #0
		ST7032i_write(this, charmap[i]);
 800042a:	5d29      	ldrb	r1, [r5, r4]
 800042c:	4630      	mov	r0, r6

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 800042e:	3401      	adds	r4, #1
		ST7032i_write(this, charmap[i]);
 8000430:	f7ff fec9 	bl	80001c6 <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8000434:	2c08      	cmp	r4, #8
 8000436:	d1f8      	bne.n	800042a <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	bf00      	nop

0800043c <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000440:	a804      	add	r0, sp, #16
 8000442:	f001 fad1 	bl	80019e8 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000446:	9b04      	ldr	r3, [sp, #16]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <TIM2_timer_start+0x84>)
 800044a:	085b      	lsrs	r3, r3, #1
 800044c:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000450:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000452:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000454:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000456:	f8ad 3004 	strh.w	r3, [sp, #4]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 800045a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800045e:	9302      	str	r3, [sp, #8]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000460:	f8ad 4006 	strh.w	r4, [sp, #6]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000464:	f8ad 400c 	strh.w	r4, [sp, #12]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 8000468:	f88d 400e 	strb.w	r4, [sp, #14]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800046c:	f001 fb4e 	bl	8001b0c <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8000470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000474:	a901      	add	r1, sp, #4
 8000476:	f001 feaf 	bl	80021d8 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 800047a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800047e:	4621      	mov	r1, r4
 8000480:	f001 fefc 	bl	800227c <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000484:	2101      	movs	r1, #1
 8000486:	460a      	mov	r2, r1
 8000488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800048c:	f002 fa67 	bl	800295e <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000490:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000492:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000494:	4668      	mov	r0, sp
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000496:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800049a:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800049e:	f88d 5002 	strb.w	r5, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004a2:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 80004a6:	f000 fea1 	bl	80011ec <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80004aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004ae:	4629      	mov	r1, r5
 80004b0:	f001 ff27 	bl	8002302 <TIM_Cmd>

	__counter_micros = 0;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <TIM2_timer_start+0x88>)
 80004b6:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <TIM2_timer_start+0x8c>)
 80004ba:	601c      	str	r4, [r3, #0]
}
 80004bc:	b009      	add	sp, #36	; 0x24
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	000f4240 	.word	0x000f4240
 80004c4:	200009a4 	.word	0x200009a4
 80004c8:	200009a8 	.word	0x200009a8

080004cc <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 80004ce:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004d4:	681c      	ldr	r4, [r3, #0]
 80004d6:	f001 fed5 	bl	8002284 <TIM_GetCounter>
}
 80004da:	1900      	adds	r0, r0, r4
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	bf00      	nop
 80004e0:	200009a4 	.word	0x200009a4

080004e4 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <millis+0x8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200009a8 	.word	0x200009a8

080004f0 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <delay_ms+0x1c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 80004f4:	1880      	adds	r0, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f6:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
 80004f8:	4290      	cmp	r0, r2
 80004fa:	d202      	bcs.n	8000502 <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004fc:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 80004fe:	4282      	cmp	r2, r0
 8000500:	d2fc      	bcs.n	80004fc <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000502:	4a02      	ldr	r2, [pc, #8]	; (800050c <delay_ms+0x1c>)
 8000504:	6813      	ldr	r3, [r2, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 8000506:	4283      	cmp	r3, r0
 8000508:	d3fc      	bcc.n	8000504 <delay_ms+0x14>
		;
}
 800050a:	4770      	bx	lr
 800050c:	200009a8 	.word	0x200009a8

08000510 <delay_us>:

void delay_us(uint32_t w) {
 8000510:	b510      	push	{r4, lr}
 8000512:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000514:	f7ff ffda 	bl	80004cc <micros>
 8000518:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 800051a:	f7ff ffd7 	bl	80004cc <micros>
 800051e:	4284      	cmp	r4, r0
 8000520:	d203      	bcs.n	800052a <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 8000522:	f7ff ffd3 	bl	80004cc <micros>
 8000526:	42a0      	cmp	r0, r4
 8000528:	d2fb      	bcs.n	8000522 <delay_us+0x12>
	}
	while (micros() < wtill)
 800052a:	f7ff ffcf 	bl	80004cc <micros>
 800052e:	42a0      	cmp	r0, r4
 8000530:	d3fb      	bcc.n	800052a <delay_us+0x1a>
		;
}
 8000532:	bd10      	pop	{r4, pc}

08000534 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000534:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800053a:	2101      	movs	r1, #1
 800053c:	f002 fa24 	bl	8002988 <TIM_GetITStatus>
 8000540:	b168      	cbz	r0, 800055e <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000542:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000546:	2101      	movs	r1, #1
 8000548:	f002 fa29 	bl	800299e <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <TIM2_IRQHandler+0x2c>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000554:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <TIM2_IRQHandler+0x30>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	3201      	adds	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	bd08      	pop	{r3, pc}
 8000560:	200009a4 	.word	0x200009a4
 8000564:	200009a8 	.word	0x200009a8

08000568 <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 800056a:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 800056e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000

08000578 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000578:	2301      	movs	r3, #1
 800057a:	f000 000f 	and.w	r0, r0, #15
 800057e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8000582:	b280      	uxth	r0, r0
 8000584:	4770      	bx	lr

08000586 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000586:	f000 000f 	and.w	r0, r0, #15
 800058a:	4770      	bx	lr

0800058c <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800058c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800058e:	4c11      	ldr	r4, [pc, #68]	; (80005d4 <pinMode+0x48>)
 8000590:	f3c0 2503 	ubfx	r5, r0, #8, #4
 8000594:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000598:	460f      	mov	r7, r1
 800059a:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800059c:	2101      	movs	r1, #1
 800059e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005a0:	f001 fa90 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005a4:	f006 060f 	and.w	r6, r6, #15
 80005a8:	2301      	movs	r3, #1
 80005aa:	fa03 f606 	lsl.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005ae:	2300      	movs	r3, #0

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80005b0:	b2b6      	uxth	r6, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005b2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80005be:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005c2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80005c4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005cc:	f000 fed2 	bl	8001374 <GPIO_Init>
}
 80005d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000

080005d8 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80005d8:	0a02      	lsrs	r2, r0, #8
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005dc:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e0:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80005e4:	b131      	cbz	r1, 80005f4 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005ee:	b289      	uxth	r1, r1
 80005f0:	f000 bf31 	b.w	8001456 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005f4:	2101      	movs	r1, #1
 80005f6:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005fc:	b289      	uxth	r1, r1
 80005fe:	f000 bf2c 	b.w	800145a <GPIO_ResetBits>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000608:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800060c:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <digitalRead+0x3c>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000610:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000612:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800061a:	2301      	movs	r3, #1
 800061c:	fa03 f101 	lsl.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000620:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000622:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <digitalRead+0x30>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000632:	f000 ff07 	bl	8001444 <GPIO_ReadOutputDataBit>
 8000636:	e001      	b.n	800063c <digitalRead+0x34>
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000638:	f000 fefb 	bl	8001432 <GPIO_ReadInputDataBit>
 800063c:	3000      	adds	r0, #0
 800063e:	bf18      	it	ne
 8000640:	2001      	movne	r0, #1
}
 8000642:	bd08      	pop	{r3, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800064a:	461d      	mov	r5, r3
	if ( port == GPIOB ) {
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <GPIOMode+0x90>)
 800064e:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000650:	4604      	mov	r4, r0
 8000652:	460f      	mov	r7, r1
 8000654:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000656:	bf08      	it	eq
 8000658:	2002      	moveq	r0, #2
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
 800065a:	d022      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <GPIOMode+0x94>)
 800065e:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000660:	bf08      	it	eq
 8000662:	2004      	moveq	r0, #4

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 8000664:	d01d      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <GPIOMode+0x98>)
 8000668:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800066a:	bf08      	it	eq
 800066c:	2008      	moveq	r0, #8
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 800066e:	d018      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <GPIOMode+0x9c>)
 8000672:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000674:	bf08      	it	eq
 8000676:	2010      	moveq	r0, #16
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000678:	d013      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <GPIOMode+0xa0>)
 800067c:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800067e:	bf08      	it	eq
 8000680:	2020      	moveq	r0, #32
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 8000682:	d00e      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <GPIOMode+0xa4>)
 8000686:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000688:	bf08      	it	eq
 800068a:	2040      	moveq	r0, #64	; 0x40
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 800068c:	d009      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <GPIOMode+0xa8>)
 8000690:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000692:	bf08      	it	eq
 8000694:	2080      	moveq	r0, #128	; 0x80
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000696:	d004      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <GPIOMode+0xac>)
 800069a:	429c      	cmp	r4, r3
 800069c:	d103      	bne.n	80006a6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800069e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a2:	2101      	movs	r1, #1
 80006a4:	e004      	b.n	80006b0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <GPIOMode+0xb0>)
 80006a8:	429c      	cmp	r4, r3
 80006aa:	d103      	bne.n	80006b4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006ac:	2001      	movs	r0, #1
 80006ae:	4601      	mov	r1, r0
 80006b0:	f001 fa08 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80006b8:	9700      	str	r7, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006ba:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006be:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80006c2:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006c6:	4620      	mov	r0, r4
 80006c8:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006ca:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80006ce:	f88d 5005 	strb.w	r5, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006d2:	f000 fe4f 	bl	8001374 <GPIO_Init>
}
 80006d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000
 80006f8:	40020000 	.word	0x40020000

080006fc <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80006fc:	f000 beb4 	b.w	8001468 <GPIO_Write>

08000700 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <i2c_begin+0xdc>)
 8000704:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 8000706:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800070a:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 800070c:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 800070e:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000712:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8000714:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000716:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000718:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800071c:	2101      	movs	r1, #1
 800071e:	f001 f9f5 	bl	8001b0c <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000722:	88e0      	ldrh	r0, [r4, #6]
 8000724:	f7ff ff20 	bl	8000568 <PinPort>
 8000728:	4607      	mov	r7, r0
 800072a:	88e0      	ldrh	r0, [r4, #6]
 800072c:	f7ff ff24 	bl	8000578 <PinBit>
 8000730:	2601      	movs	r6, #1
 8000732:	2202      	movs	r2, #2
 8000734:	4601      	mov	r1, r0
 8000736:	4613      	mov	r3, r2
 8000738:	4638      	mov	r0, r7
 800073a:	9600      	str	r6, [sp, #0]
 800073c:	9601      	str	r6, [sp, #4]
 800073e:	f7ff ff83 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000742:	88a0      	ldrh	r0, [r4, #4]
 8000744:	f7ff ff10 	bl	8000568 <PinPort>
 8000748:	4607      	mov	r7, r0
 800074a:	88a0      	ldrh	r0, [r4, #4]
 800074c:	f7ff ff14 	bl	8000578 <PinBit>
 8000750:	2202      	movs	r2, #2
 8000752:	4613      	mov	r3, r2
 8000754:	4601      	mov	r1, r0
 8000756:	9600      	str	r6, [sp, #0]
 8000758:	9601      	str	r6, [sp, #4]
 800075a:	4638      	mov	r0, r7
 800075c:	f7ff ff74 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8000760:	88e0      	ldrh	r0, [r4, #6]
 8000762:	f7ff ff01 	bl	8000568 <PinPort>
 8000766:	4606      	mov	r6, r0
 8000768:	88e0      	ldrh	r0, [r4, #6]
 800076a:	f7ff ff0c 	bl	8000586 <PinSource>
 800076e:	2204      	movs	r2, #4
 8000770:	4601      	mov	r1, r0
 8000772:	4630      	mov	r0, r6
 8000774:	f000 fe7e 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 8000778:	88a0      	ldrh	r0, [r4, #4]
 800077a:	f7ff fef5 	bl	8000568 <PinPort>
 800077e:	4606      	mov	r6, r0
 8000780:	88a0      	ldrh	r0, [r4, #4]
 8000782:	f7ff ff00 	bl	8000586 <PinSource>
 8000786:	2204      	movs	r2, #4
 8000788:	4601      	mov	r1, r0
 800078a:	4630      	mov	r0, r6
 800078c:	f000 fe72 	bl	8001474 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <i2c_begin+0xe0>)
 8000792:	429d      	cmp	r5, r3
 8000794:	d004      	beq.n	80007a0 <i2c_begin+0xa0>
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <i2c_begin+0xe4>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000798:	4295      	cmp	r5, r2
 800079a:	bf0c      	ite	eq
 800079c:	4615      	moveq	r5, r2
 800079e:	461d      	movne	r5, r3
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007a0:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80007a2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80007a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007ae:	2600      	movs	r6, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007b4:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007bc:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007be:	f8ad 3014 	strh.w	r3, [sp, #20]
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007c2:	f8ad 600c 	strh.w	r6, [sp, #12]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007c6:	f000 fe99 	bl	80014fc <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 80007ca:	6820      	ldr	r0, [r4, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	f000 ff0b 	bl	80015e8 <I2C_Cmd>

	wirex->status = NOT_READY;
 80007d2:	20ff      	movs	r0, #255	; 0xff
 80007d4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80007d6:	72a6      	strb	r6, [r4, #10]

	return true;
}
 80007d8:	b007      	add	sp, #28
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007e8:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 80007ea:	b570      	push	{r4, r5, r6, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007f0:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 80007f2:	2506      	movs	r5, #6
 80007f4:	e008      	b.n	8000808 <i2c_start+0x20>
 80007f6:	3d01      	subs	r5, #1
 80007f8:	b2ad      	uxth	r5, r5
		if (wc == 0)
 80007fa:	b90d      	cbnz	r5, 8000800 <i2c_start+0x18>
			return false;
 80007fc:	2000      	movs	r0, #0
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(667);
 8000800:	f240 209b 	movw	r0, #667	; 0x29b
 8000804:	f7ff fe84 	bl	8000510 <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800080e:	f001 f802 	bl	8001816 <I2C_GetFlagStatus>
 8000812:	2800      	cmp	r0, #0
 8000814:	d1ef      	bne.n	80007f6 <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 8000816:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8000818:	2101      	movs	r1, #1
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	f000 fef0 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000820:	2506      	movs	r5, #6
 8000822:	e007      	b.n	8000834 <i2c_start+0x4c>
 8000824:	3d01      	subs	r5, #1
 8000826:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0e7      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 800082c:	f240 209b 	movw	r0, #667	; 0x29b
 8000830:	f7ff fe6e 	bl	8000510 <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	4911      	ldr	r1, [pc, #68]	; (800087c <i2c_start+0x94>)
 8000838:	f000 ffd9 	bl	80017ee <I2C_CheckEvent>
 800083c:	2800      	cmp	r0, #0
 800083e:	d0f1      	beq.n	8000824 <i2c_start+0x3c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000840:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000842:	fa06 f103 	lsl.w	r1, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000846:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000848:	6820      	ldr	r0, [r4, #0]
 800084a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800084e:	2200      	movs	r2, #0
 8000850:	f000 feee 	bl	8001630 <I2C_Send7bitAddress>
 8000854:	2506      	movs	r5, #6
 8000856:	e007      	b.n	8000868 <i2c_start+0x80>
 8000858:	3d01      	subs	r5, #1
 800085a:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 800085c:	2d00      	cmp	r5, #0
 800085e:	d0cd      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 8000860:	f240 209b 	movw	r0, #667	; 0x29b
 8000864:	f7ff fe54 	bl	8000510 <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <i2c_start+0x98>)
 800086c:	f000 ffbf 	bl	80017ee <I2C_CheckEvent>
 8000870:	2800      	cmp	r0, #0
 8000872:	d0f1      	beq.n	8000858 <i2c_start+0x70>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 8000874:	2302      	movs	r3, #2
 8000876:	7263      	strb	r3, [r4, #9]
	return true;
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	00030001 	.word	0x00030001
 8000880:	00070082 	.word	0x00070082

08000884 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000888:	461d      	mov	r5, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 800088a:	2302      	movs	r3, #2
 800088c:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800088e:	4604      	mov	r4, r0
 8000890:	4688      	mov	r8, r1
 8000892:	4616      	mov	r6, r2
 8000894:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 8000898:	f7ff ffa6 	bl	80007e8 <i2c_start>
 800089c:	b910      	cbnz	r0, 80008a4 <i2c_receive+0x20>
		return false;
 800089e:	2000      	movs	r0, #0
 80008a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80008a4:	4631      	mov	r1, r6
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f000 ff45 	bl	8001736 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80008ac:	2304      	movs	r3, #4
 80008ae:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008b0:	2606      	movs	r6, #6
 80008b2:	e007      	b.n	80008c4 <i2c_receive+0x40>
 80008b4:	3e01      	subs	r6, #1
 80008b6:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d0f0      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008bc:	f240 209b 	movw	r0, #667	; 0x29b
 80008c0:	f7ff fe26 	bl	8000510 <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008c4:	6820      	ldr	r0, [r4, #0]
 80008c6:	4941      	ldr	r1, [pc, #260]	; (80009cc <i2c_receive+0x148>)
 80008c8:	f000 ff91 	bl	80017ee <I2C_CheckEvent>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0f1      	beq.n	80008b4 <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 80008d0:	2606      	movs	r6, #6
 80008d2:	7266      	strb	r6, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	f000 fe92 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008dc:	e007      	b.n	80008ee <i2c_receive+0x6a>
 80008de:	3e01      	subs	r6, #1
 80008e0:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0db      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008e6:	f240 209b 	movw	r0, #667	; 0x29b
 80008ea:	f7ff fe11 	bl	8000510 <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008ee:	6820      	ldr	r0, [r4, #0]
 80008f0:	4937      	ldr	r1, [pc, #220]	; (80009d0 <i2c_receive+0x14c>)
 80008f2:	f000 ff7c 	bl	80017ee <I2C_CheckEvent>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d0f1      	beq.n	80008de <i2c_receive+0x5a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 80008fa:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 80008fc:	ea4f 0148 	mov.w	r1, r8, lsl #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8000900:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8000902:	6820      	ldr	r0, [r4, #0]
 8000904:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000908:	2201      	movs	r2, #1
 800090a:	f000 fe91 	bl	8001630 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 800090e:	2606      	movs	r6, #6
 8000910:	e007      	b.n	8000922 <i2c_receive+0x9e>
 8000912:	3e01      	subs	r6, #1
 8000914:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000916:	2e00      	cmp	r6, #0
 8000918:	d0c1      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 800091a:	f240 209b 	movw	r0, #667	; 0x29b
 800091e:	f7ff fdf7 	bl	8000510 <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8000922:	6820      	ldr	r0, [r4, #0]
 8000924:	492b      	ldr	r1, [pc, #172]	; (80009d4 <i2c_receive+0x150>)
 8000926:	f000 ff62 	bl	80017ee <I2C_CheckEvent>
 800092a:	2800      	cmp	r0, #0
 800092c:	d0f1      	beq.n	8000912 <i2c_receive+0x8e>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 800092e:	2303      	movs	r3, #3
 8000930:	7263      	strb	r3, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000932:	f1c5 0801 	rsb	r8, r5, #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8000936:	e018      	b.n	800096a <i2c_receive+0xe6>
		wirex->status = RECEIVE_BYTE_READY;
 8000938:	2308      	movs	r3, #8
 800093a:	7263      	strb	r3, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800093c:	2606      	movs	r6, #6
 800093e:	e007      	b.n	8000950 <i2c_receive+0xcc>
 8000940:	3e01      	subs	r6, #1
 8000942:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0aa      	beq.n	800089e <i2c_receive+0x1a>
				return false;
			delay_us(667);
 8000948:	f240 209b 	movw	r0, #667	; 0x29b
 800094c:	f7ff fde0 	bl	8000510 <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	4921      	ldr	r1, [pc, #132]	; (80009d8 <i2c_receive+0x154>)
 8000954:	f000 ff4b 	bl	80017ee <I2C_CheckEvent>
 8000958:	2800      	cmp	r0, #0
 800095a:	d0f1      	beq.n	8000940 <i2c_receive+0xbc>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f000 feec 	bl	800173a <I2C_ReceiveData>
		wirex->status = BYTE_RECEIVED;
 8000962:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8000964:	f805 0b01 	strb.w	r0, [r5], #1
		wirex->status = BYTE_RECEIVED;
 8000968:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800096a:	eb05 0308 	add.w	r3, r5, r8
 800096e:	b29b      	uxth	r3, r3
 8000970:	42bb      	cmp	r3, r7
 8000972:	d3e1      	bcc.n	8000938 <i2c_receive+0xb4>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 8000974:	230a      	movs	r3, #10
 8000976:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 8000978:	6820      	ldr	r0, [r4, #0]
 800097a:	2100      	movs	r1, #0
 800097c:	f000 fe60 	bl	8001640 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	f000 fe48 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 8000988:	230b      	movs	r3, #11
 800098a:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800098c:	2606      	movs	r6, #6
 800098e:	e007      	b.n	80009a0 <i2c_receive+0x11c>
 8000990:	3e01      	subs	r6, #1
 8000992:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000994:	2e00      	cmp	r6, #0
 8000996:	d082      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 8000998:	f240 209b 	movw	r0, #667	; 0x29b
 800099c:	f7ff fdb8 	bl	8000510 <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <i2c_receive+0x154>)
 80009a4:	f000 ff23 	bl	80017ee <I2C_CheckEvent>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d0f1      	beq.n	8000990 <i2c_receive+0x10c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f000 fec4 	bl	800173a <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b2:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009b4:	7028      	strb	r0, [r5, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009b6:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b8:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	f000 fe40 	bl	8001640 <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 80009c0:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c2:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 80009c4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c6:	72a3      	strb	r3, [r4, #10]

	return true;
}
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009cc:	00070084 	.word	0x00070084
 80009d0:	00030001 	.word	0x00030001
 80009d4:	00030002 	.word	0x00030002
 80009d8:	00030040 	.word	0x00030040

080009dc <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e0:	461f      	mov	r7, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 80009e2:	2301      	movs	r3, #1
 80009e4:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009e6:	4604      	mov	r4, r0
 80009e8:	4690      	mov	r8, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 80009ea:	f7ff fefd 	bl	80007e8 <i2c_start>
 80009ee:	b9e8      	cbnz	r0, 8000a2c <i2c_transmit+0x50>
		return false;
 80009f0:	2000      	movs	r0, #0
 80009f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	f818 1005 	ldrb.w	r1, [r8, r5]
 80009fc:	f000 fe9b 	bl	8001736 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a00:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a02:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a06:	e007      	b.n	8000a18 <i2c_transmit+0x3c>
 8000a08:	3e01      	subs	r6, #1
 8000a0a:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d0ef      	beq.n	80009f0 <i2c_transmit+0x14>
				return false;
			delay_us(667);
 8000a10:	f240 209b 	movw	r0, #667	; 0x29b
 8000a14:	f7ff fd7c 	bl	8000510 <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <i2c_transmit+0x74>)
 8000a1c:	f000 fee7 	bl	80017ee <I2C_CheckEvent>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0f1      	beq.n	8000a08 <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 8000a24:	2305      	movs	r3, #5
 8000a26:	7263      	strb	r3, [r4, #9]
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e002      	b.n	8000a32 <i2c_transmit+0x56>
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8000a2c:	2500      	movs	r5, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a2e:	f04f 0904 	mov.w	r9, #4
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8000a32:	b2ab      	uxth	r3, r5
 8000a34:	42bb      	cmp	r3, r7
 8000a36:	d3de      	bcc.n	80009f6 <i2c_transmit+0x1a>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000a3c:	6820      	ldr	r0, [r4, #0]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	f000 fdea 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 8000a44:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a46:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 8000a48:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a4a:	72a3      	strb	r3, [r4, #10]

	return true;
}
 8000a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a50:	00070084 	.word	0x00070084

08000a54 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4698      	mov	r8, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a5c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a60:	4607      	mov	r7, r0
 8000a62:	468a      	mov	sl, r1
 8000a64:	4691      	mov	r9, r2
 8000a66:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a6a:	d105      	bne.n	8000a78 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a70:	2101      	movs	r1, #1
 8000a72:	f001 f857 	bl	8001b24 <RCC_APB2PeriphClockCmd>
 8000a76:	e007      	b.n	8000a88 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <spi_begin+0x168>)
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d106      	bne.n	8000a8c <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a82:	2101      	movs	r1, #1
 8000a84:	f001 f842 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000a88:	2605      	movs	r6, #5
 8000a8a:	e005      	b.n	8000a98 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a90:	2101      	movs	r1, #1
 8000a92:	f001 f877 	bl	8001b84 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000a96:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000a98:	4650      	mov	r0, sl
 8000a9a:	f7ff fd65 	bl	8000568 <PinPort>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4650      	mov	r0, sl
 8000aa2:	9303      	str	r3, [sp, #12]
 8000aa4:	f7ff fd68 	bl	8000578 <PinBit>
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	2401      	movs	r4, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	4601      	mov	r1, r0
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	9500      	str	r5, [sp, #0]
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	9401      	str	r4, [sp, #4]
 8000aba:	f7ff fdc5 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000abe:	4648      	mov	r0, r9
 8000ac0:	f7ff fd52 	bl	8000568 <PinPort>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4648      	mov	r0, r9
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	f7ff fd55 	bl	8000578 <PinBit>
 8000ace:	9b03      	ldr	r3, [sp, #12]
 8000ad0:	9500      	str	r5, [sp, #0]
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	9401      	str	r4, [sp, #4]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f7ff fdb4 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	f7ff fd41 	bl	8000568 <PinPort>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4640      	mov	r0, r8
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	f7ff fd44 	bl	8000578 <PinBit>
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	9500      	str	r5, [sp, #0]
 8000af4:	4601      	mov	r1, r0
 8000af6:	2202      	movs	r2, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	9401      	str	r4, [sp, #4]
 8000afc:	4623      	mov	r3, r4
 8000afe:	f7ff fda3 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8000b02:	4650      	mov	r0, sl
 8000b04:	f7ff fd30 	bl	8000568 <PinPort>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4650      	mov	r0, sl
 8000b0c:	9303      	str	r3, [sp, #12]
 8000b0e:	f7ff fd3a 	bl	8000586 <PinSource>
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	4601      	mov	r1, r0
 8000b16:	4632      	mov	r2, r6
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fcab 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000b1e:	4648      	mov	r0, r9
 8000b20:	f7ff fd22 	bl	8000568 <PinPort>
 8000b24:	4682      	mov	sl, r0
 8000b26:	4648      	mov	r0, r9
 8000b28:	f7ff fd2d 	bl	8000586 <PinSource>
 8000b2c:	4632      	mov	r2, r6
 8000b2e:	4601      	mov	r1, r0
 8000b30:	4650      	mov	r0, sl
 8000b32:	f000 fc9f 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8000b36:	4640      	mov	r0, r8
 8000b38:	f7ff fd16 	bl	8000568 <PinPort>
 8000b3c:	4681      	mov	r9, r0
 8000b3e:	4640      	mov	r0, r8
 8000b40:	f7ff fd21 	bl	8000586 <PinSource>
 8000b44:	4632      	mov	r2, r6
 8000b46:	4601      	mov	r1, r0
 8000b48:	4648      	mov	r0, r9
 8000b4a:	f000 fc93 	bl	8001474 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000b4e:	4658      	mov	r0, fp
 8000b50:	f7ff fd0a 	bl	8000568 <PinPort>
 8000b54:	4606      	mov	r6, r0
 8000b56:	4658      	mov	r0, fp
 8000b58:	f7ff fd0e 	bl	8000578 <PinBit>
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4623      	mov	r3, r4
 8000b60:	4601      	mov	r1, r0
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	4630      	mov	r0, r6
 8000b66:	9401      	str	r4, [sp, #4]
 8000b68:	f7ff fd6e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000b6c:	4658      	mov	r0, fp
 8000b6e:	4621      	mov	r1, r4
 8000b70:	f7ff fd32 	bl	80005d8 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000b74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b78:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b84:	4638      	mov	r0, r7
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b86:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b88:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000b8a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000b8e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000b92:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000b96:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000b9e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000ba2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000ba6:	f001 f8c1 	bl	8001d2c <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 8000baa:	4638      	mov	r0, r7
 8000bac:	4621      	mov	r1, r4
 8000bae:	f001 f95a 	bl	8001e66 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000bb2:	b00b      	add	sp, #44	; 0x2c
 8000bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bc8:	e016      	b.n	8000bf8 <spi_transfer+0x38>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	f001 f9fd 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d0f9      	beq.n	8000bca <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	7871      	ldrb	r1, [r6, #1]
 8000bda:	f001 f9c2 	bl	8001f62 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000bde:	4620      	mov	r0, r4
 8000be0:	2101      	movs	r1, #1
 8000be2:	f001 f9f3 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d0f9      	beq.n	8000bde <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f001 f9b6 	bl	8001f5c <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf0:	3d01      	subs	r5, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bf2:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1e6      	bne.n	8000bca <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop

08000c00 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <SysTick_Handler+0xc>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	3201      	adds	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200009d0 	.word	0x200009d0

08000c10 <SysTick_delay>:
}

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SysTick_delay+0x10>)
 8000c12:	6819      	ldr	r1, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	d3fb      	bcc.n	8000c14 <SysTick_delay+0x4>
		;
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200009d0 	.word	0x200009d0

08000c24 <SysTick_Start>:

void SysTick_Start(void) {
 8000c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000c26:	4668      	mov	r0, sp
 8000c28:	f000 fede 	bl	80019e8 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c32:	fbb3 f3f2 	udiv	r3, r3, r2
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Start+0x2c>)
 8000c3a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SysTick_Start+0x30>)
 8000c3e:	21f0      	movs	r1, #240	; 0xf0
 8000c40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000c4c:	b005      	add	sp, #20
 8000c4e:	bd00      	pop	{pc}
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <SysTick_count+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200009d0 	.word	0x200009d0

08000c64 <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000c6a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000c6e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
 8000c72:	4770      	bx	lr

08000c74 <buffer_count>:
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000c74:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000c78:	4770      	bx	lr

08000c7a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000c7a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000c7e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d105      	bne.n	8000c92 <buffer_is_full+0x18>
 8000c86:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
		return 1;
 8000c8a:	3000      	adds	r0, #0
 8000c8c:	bf18      	it	ne
 8000c8e:	2001      	movne	r0, #1
 8000c90:	4770      	bx	lr
	}
	return 0;
 8000c92:	2000      	movs	r0, #0
}
 8000c94:	4770      	bx	lr

08000c96 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000c96:	b538      	push	{r3, r4, r5, lr}
 8000c98:	4604      	mov	r4, r0
 8000c9a:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 8000c9c:	f7ff ffed 	bl	8000c7a <buffer_is_full>
 8000ca0:	b9b0      	cbnz	r0, 8000cd0 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000ca2:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 8000cae:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000cb2:	3201      	adds	r2, #1
 8000cb4:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <buffer_enque+0x42>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da03      	bge.n	8000cca <buffer_enque+0x34>
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8000cce:	e001      	b.n	8000cd4 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000cd0:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	8000007f 	.word	0x8000007f

08000cdc <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000cdc:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000ce0:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8000ce2:	b1a1      	cbz	r1, 8000d0e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000ce4:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000ce8:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cea:	b218      	sxth	r0, r3
 8000cec:	3301      	adds	r3, #1
	r->count--;
 8000cee:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000cf2:	b219      	sxth	r1, r3
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cf6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <buffer_deque+0x2c>
 8000d00:	3b01      	subs	r3, #1
 8000d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d06:	3301      	adds	r3, #1
 8000d08:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	return w;
 8000d0c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000d12:	4770      	bx	lr
 8000d14:	8000007f 	.word	0x8000007f

08000d18 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000d18:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000d1c:	b123      	cbz	r3, 8000d28 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8000d1e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000d22:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000d26:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000d2c:	4770      	bx	lr

08000d2e <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d32:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d34:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <usart_begin+0x1ca>)
 8000d36:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d38:	b089      	sub	sp, #36	; 0x24
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	4690      	mov	r8, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d40:	d10d      	bne.n	8000d5e <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d42:	2010      	movs	r0, #16
 8000d44:	2101      	movs	r1, #1
 8000d46:	f000 feed 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <usart_begin+0x1ce>)
 8000d50:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <usart_begin+0x1d2>)
 8000d54:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8000d58:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000d5a:	60e3      	str	r3, [r4, #12]
 8000d5c:	e010      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8000d5e:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <usart_begin+0x1da>)
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d10f      	bne.n	8000d84 <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d68:	2101      	movs	r1, #1
 8000d6a:	f000 fecf 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8000d72:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <usart_begin+0x1de>)
 8000d74:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8000d76:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <usart_begin+0x1e2>)
 8000d78:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8000d7c:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000d7e:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000d80:	2607      	movs	r6, #7
 8000d82:	e043      	b.n	8000e0c <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000d84:	4b64      	ldr	r3, [pc, #400]	; (8000f18 <usart_begin+0x1ea>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d10e      	bne.n	8000da8 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000d8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f000 febc 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000d94:	2302      	movs	r3, #2
 8000d96:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8000d98:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <usart_begin+0x1ee>)
 8000d9a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <usart_begin+0x1f2>)
 8000d9e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000da2:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000da4:	60e3      	str	r3, [r4, #12]
 8000da6:	e7eb      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8000da8:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <usart_begin+0x1fa>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d10e      	bne.n	8000dcc <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000dae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000db2:	2101      	movs	r1, #1
 8000db4:	f000 feaa 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000db8:	2303      	movs	r3, #3
 8000dba:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <usart_begin+0x1fe>)
 8000dbe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <usart_begin+0x202>)
 8000dc2:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000dc6:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000dc8:	60e3      	str	r3, [r4, #12]
 8000dca:	e01e      	b.n	8000e0a <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <usart_begin+0x20a>)
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d10e      	bne.n	8000df0 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000dd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f000 fe98 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <usart_begin+0x20e>)
 8000de2:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <usart_begin+0x212>)
 8000de6:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000dea:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000dec:	60e3      	str	r3, [r4, #12]
 8000dee:	e00c      	b.n	8000e0a <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000df0:	2020      	movs	r0, #32
 8000df2:	2101      	movs	r1, #1
 8000df4:	f000 fe96 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8000dfc:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <usart_begin+0x21a>)
 8000dfe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <usart_begin+0x21e>)
 8000e02:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000e06:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000e08:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000e0a:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e0c:	4648      	mov	r0, r9
 8000e0e:	f7ff fbab 	bl	8000568 <PinPort>
 8000e12:	4683      	mov	fp, r0
 8000e14:	4648      	mov	r0, r9
 8000e16:	f7ff fbaf 	bl	8000578 <PinBit>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4601      	mov	r1, r0
 8000e20:	4613      	mov	r3, r2
 8000e22:	4658      	mov	r0, fp
 8000e24:	9500      	str	r5, [sp, #0]
 8000e26:	9501      	str	r5, [sp, #4]
 8000e28:	f7ff fc0e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f7ff fb9b 	bl	8000568 <PinPort>
 8000e32:	4683      	mov	fp, r0
 8000e34:	4640      	mov	r0, r8
 8000e36:	f7ff fb9f 	bl	8000578 <PinBit>
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	4601      	mov	r1, r0
 8000e40:	9500      	str	r5, [sp, #0]
 8000e42:	4658      	mov	r0, fp
 8000e44:	9501      	str	r5, [sp, #4]
 8000e46:	f7ff fbff 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	f7ff fb8c 	bl	8000568 <PinPort>
 8000e50:	4683      	mov	fp, r0
 8000e52:	4648      	mov	r0, r9
 8000e54:	f7ff fb97 	bl	8000586 <PinSource>
 8000e58:	4632      	mov	r2, r6
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	4658      	mov	r0, fp
 8000e5e:	f000 fb09 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000e62:	4640      	mov	r0, r8
 8000e64:	f7ff fb80 	bl	8000568 <PinPort>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	4640      	mov	r0, r8
 8000e6c:	f7ff fb8b 	bl	8000586 <PinSource>
 8000e70:	4632      	mov	r2, r6
 8000e72:	4601      	mov	r1, r0
 8000e74:	4648      	mov	r0, r9
 8000e76:	f000 fafd 	bl	8001474 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7a:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e7c:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7e:	f8ad 301a 	strh.w	r3, [sp, #26]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e82:	a904      	add	r1, sp, #16
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000e84:	f8cd a010 	str.w	sl, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000e88:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000e8c:	f8ad 5016 	strh.w	r5, [sp, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000e90:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000e94:	f8ad 501c 	strh.w	r5, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e98:	f001 fe98 	bl	8002bcc <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000e9c:	6860      	ldr	r0, [r4, #4]
 8000e9e:	f240 5125 	movw	r1, #1317	; 0x525
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f001 ffce 	bl	8002e44 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000ea8:	6860      	ldr	r0, [r4, #4]
 8000eaa:	f240 7127 	movw	r1, #1831	; 0x727
 8000eae:	462a      	mov	r2, r5
 8000eb0:	f001 ffc8 	bl	8002e44 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000eb4:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000eb6:	a803      	add	r0, sp, #12
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000eb8:	f88d 700c 	strb.w	r7, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000ebc:	f88d 500d 	strb.w	r5, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000ec0:	f88d 500e 	strb.w	r5, [sp, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000ec4:	f88d 600f 	strb.w	r6, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000ec8:	f000 f990 	bl	80011ec <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000ecc:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ece:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ed0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ed4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ed8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000edc:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ede:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ee0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ee4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ee8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000eec:	f001 fee9 	bl	8002cc2 <USART_Cmd>
}
 8000ef0:	b009      	add	sp, #36	; 0x24
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001008 	.word	0x20001008
 8000efc:	40011000 	.word	0x40011000
 8000f00:	20001038 	.word	0x20001038
 8000f04:	200009e4 	.word	0x200009e4
 8000f08:	2000166c 	.word	0x2000166c
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	2000113e 	.word	0x2000113e
 8000f14:	20000aea 	.word	0x20000aea
 8000f18:	20001018 	.word	0x20001018
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	20001244 	.word	0x20001244
 8000f24:	20000bf0 	.word	0x20000bf0
 8000f28:	2000165c 	.word	0x2000165c
 8000f2c:	40004c00 	.word	0x40004c00
 8000f30:	2000134a 	.word	0x2000134a
 8000f34:	20000cf6 	.word	0x20000cf6
 8000f38:	200009d4 	.word	0x200009d4
 8000f3c:	40005000 	.word	0x40005000
 8000f40:	20001450 	.word	0x20001450
 8000f44:	20000dfc 	.word	0x20000dfc
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	20001556 	.word	0x20001556
 8000f50:	20000f02 	.word	0x20000f02

08000f54 <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000f5a:	6860      	ldr	r0, [r4, #4]
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f001 ff89 	bl	8002e74 <USART_GetFlagStatus>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d0f9      	beq.n	8000f5a <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000f66:	6860      	ldr	r0, [r4, #4]
 8000f68:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000f6e:	f001 bed5 	b.w	8002d1c <USART_SendData>

08000f72 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	4604      	mov	r4, r0
 8000f76:	460e      	mov	r6, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f78:	2504      	movs	r5, #4
 8000f7a:	e003      	b.n	8000f84 <usart_write+0x12>
		delay_us(667);
 8000f7c:	f240 209b 	movw	r0, #667	; 0x29b
 8000f80:	f7ff fac6 	bl	8000510 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f84:	68e0      	ldr	r0, [r4, #12]
 8000f86:	f7ff fe78 	bl	8000c7a <buffer_is_full>
 8000f8a:	b118      	cbz	r0, 8000f94 <usart_write+0x22>
 8000f8c:	3d01      	subs	r5, #1
 8000f8e:	b2ad      	uxth	r5, r5
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f3      	bne.n	8000f7c <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000f94:	6860      	ldr	r0, [r4, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f240 7127 	movw	r1, #1831	; 0x727
 8000f9c:	f001 ff52 	bl	8002e44 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	68e0      	ldr	r0, [r4, #12]
 8000fa4:	f7ff fe77 	bl	8000c96 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fa8:	6860      	ldr	r0, [r4, #4]
 8000faa:	f240 7127 	movw	r1, #1831	; 0x727
 8000fae:	2201      	movs	r2, #1
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fb4:	f001 bf46 	b.w	8002e44 <USART_ITConfig>

08000fb8 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	1e4c      	subs	r4, r1, #1
	while (*s)
 8000fbe:	e002      	b.n	8000fc6 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff ffd6 	bl	8000f72 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000fc6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d1f8      	bne.n	8000fc0 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000fd0:	f001 bea8 	b.w	8002d24 <USART_ReceiveData>

08000fd4 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000fd4:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000fd6:	6880      	ldr	r0, [r0, #8]
 8000fd8:	f7ff fe80 	bl	8000cdc <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	bf08      	it	eq
 8000fe4:	2000      	moveq	r0, #0
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <usart_flush>:

void usart_flush(Serial * usx) {
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000fec:	f7ff fa7a 	bl	80004e4 <millis>
 8000ff0:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000ff4:	e00c      	b.n	8001010 <usart_flush+0x28>
		if (millis() > wtill)
 8000ff6:	f7ff fa75 	bl	80004e4 <millis>
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d908      	bls.n	8001010 <usart_flush+0x28>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000ffe:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8001000:	2200      	movs	r2, #0
 8001002:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8001006:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 800100a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800100e:	bd38      	pop	{r3, r4, r5, pc}
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001010:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8001012:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ed      	bne.n	8000ff6 <usart_flush+0xe>
 800101a:	e7f0      	b.n	8000ffe <usart_flush+0x16>

0800101c <usart_peek>:
}

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 800101c:	6880      	ldr	r0, [r0, #8]
 800101e:	e67b      	b.n	8000d18 <buffer_peek>

08001020 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001020:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8001022:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8001026:	4770      	bx	lr

08001028 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001028:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <USART1_IRQHandler+0x64>)
 800102c:	f240 5125 	movw	r1, #1317	; 0x525
 8001030:	f001 ff2a 	bl	8002e88 <USART_GetITStatus>
 8001034:	b140      	cbz	r0, 8001048 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <USART1_IRQHandler+0x68>)
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <USART1_IRQHandler+0x64>)
 800103a:	689c      	ldr	r4, [r3, #8]
 800103c:	f001 fe72 	bl	8002d24 <USART_ReceiveData>
 8001040:	4601      	mov	r1, r0
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff fe27 	bl	8000c96 <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <USART1_IRQHandler+0x64>)
 800104a:	f240 7127 	movw	r1, #1831	; 0x727
 800104e:	f001 ff1b 	bl	8002e88 <USART_GetITStatus>
 8001052:	2800      	cmp	r0, #0
 8001054:	d019      	beq.n	800108a <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <USART1_IRQHandler+0x68>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 800105e:	b95a      	cbnz	r2, 8001078 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <USART1_IRQHandler+0x64>)
 8001062:	f240 7127 	movw	r1, #1831	; 0x727
 8001066:	f001 feed 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <USART1_IRQHandler+0x64>)
 800106c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8001070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8001074:	f001 bf28 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001078:	68d8      	ldr	r0, [r3, #12]
 800107a:	f7ff fe2f 	bl	8000cdc <buffer_deque>
 800107e:	4601      	mov	r1, r0
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x64>)
		}
	}
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001086:	f001 be49 	b.w	8002d1c <USART_SendData>
 800108a:	bd10      	pop	{r4, pc}
 800108c:	40011000 	.word	0x40011000
 8001090:	20001008 	.word	0x20001008

08001094 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8001094:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <USART2_IRQHandler+0x64>)
 8001098:	f240 5125 	movw	r1, #1317	; 0x525
 800109c:	f001 fef4 	bl	8002e88 <USART_GetITStatus>
 80010a0:	b140      	cbz	r0, 80010b4 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <USART2_IRQHandler+0x68>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010a6:	689c      	ldr	r4, [r3, #8]
 80010a8:	f001 fe3c 	bl	8002d24 <USART_ReceiveData>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff fdf1 	bl	8000c96 <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010b6:	f240 7127 	movw	r1, #1831	; 0x727
 80010ba:	f001 fee5 	bl	8002e88 <USART_GetITStatus>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d018      	beq.n	80010f4 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <USART2_IRQHandler+0x68>)
 80010c4:	68d8      	ldr	r0, [r3, #12]
 80010c6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80010ca:	b95a      	cbnz	r2, 80010e4 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010ce:	f240 7127 	movw	r1, #1831	; 0x727
 80010d2:	f001 feb7 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010d8:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 80010dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010e0:	f001 bef2 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010e4:	f7ff fdfa 	bl	8000cdc <buffer_deque>
 80010e8:	4601      	mov	r1, r0
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <USART2_IRQHandler+0x64>)
		}
	}
}
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010f0:	f001 be14 	b.w	8002d1c <USART_SendData>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	2000166c 	.word	0x2000166c

08001100 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8001100:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <USART3_IRQHandler+0x64>)
 8001104:	f240 5125 	movw	r1, #1317	; 0x525
 8001108:	f001 febe 	bl	8002e88 <USART_GetITStatus>
 800110c:	b140      	cbz	r0, 8001120 <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <USART3_IRQHandler+0x68>)
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <USART3_IRQHandler+0x64>)
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	f001 fe06 	bl	8002d24 <USART_ReceiveData>
 8001118:	4601      	mov	r1, r0
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fdbb 	bl	8000c96 <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <USART3_IRQHandler+0x64>)
 8001122:	f240 7127 	movw	r1, #1831	; 0x727
 8001126:	f001 feaf 	bl	8002e88 <USART_GetITStatus>
 800112a:	2800      	cmp	r0, #0
 800112c:	d018      	beq.n	8001160 <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <USART3_IRQHandler+0x68>)
 8001130:	68d8      	ldr	r0, [r3, #12]
 8001132:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8001136:	b95a      	cbnz	r2, 8001150 <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <USART3_IRQHandler+0x64>)
 800113a:	f240 7127 	movw	r1, #1831	; 0x727
 800113e:	f001 fe81 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <USART3_IRQHandler+0x64>)
 8001144:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800114c:	f001 bebc 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8001150:	f7ff fdc4 	bl	8000cdc <buffer_deque>
 8001154:	4601      	mov	r1, r0
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 800115c:	f001 bdde 	b.w	8002d1c <USART_SendData>
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40004800 	.word	0x40004800
 8001168:	20001018 	.word	0x20001018

0800116c <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 800116c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <UART4_IRQHandler+0x64>)
 8001170:	f240 5125 	movw	r1, #1317	; 0x525
 8001174:	f001 fe88 	bl	8002e88 <USART_GetITStatus>
 8001178:	b140      	cbz	r0, 800118c <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <UART4_IRQHandler+0x68>)
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <UART4_IRQHandler+0x64>)
 800117e:	689c      	ldr	r4, [r3, #8]
 8001180:	f001 fdd0 	bl	8002d24 <USART_ReceiveData>
 8001184:	4601      	mov	r1, r0
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fd85 	bl	8000c96 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <UART4_IRQHandler+0x64>)
 800118e:	f240 7127 	movw	r1, #1831	; 0x727
 8001192:	f001 fe79 	bl	8002e88 <USART_GetITStatus>
 8001196:	2800      	cmp	r0, #0
 8001198:	d018      	beq.n	80011cc <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <UART4_IRQHandler+0x68>)
 800119c:	68d8      	ldr	r0, [r3, #12]
 800119e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80011a2:	b95a      	cbnz	r2, 80011bc <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011a6:	f240 7127 	movw	r1, #1831	; 0x727
 80011aa:	f001 fe4b 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011b0:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 80011b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011b8:	f001 be86 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011bc:	f7ff fd8e 	bl	8000cdc <buffer_deque>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <UART4_IRQHandler+0x64>)
		}
	}
}
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011c8:	f001 bda8 	b.w	8002d1c <USART_SendData>
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	bf00      	nop
 80011d0:	40004c00 	.word	0x40004c00
 80011d4:	2000165c 	.word	0x2000165c

080011d8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80011d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <NVIC_PriorityGroupConfig+0x10>)
 80011de:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80011e2:	60d8      	str	r0, [r3, #12]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011ec:	78c3      	ldrb	r3, [r0, #3]
 80011ee:	b313      	cbz	r3, 8001236 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011f2:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80011fc:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001206:	210f      	movs	r1, #15
 8001208:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800120c:	7881      	ldrb	r1, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800120e:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001214:	7803      	ldrb	r3, [r0, #0]
 8001216:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800121a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001222:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001226:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001228:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800122a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	e007      	b.n	8001246 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001236:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001238:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800123a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001244:	3120      	adds	r1, #32
 8001246:	4a03      	ldr	r2, [pc, #12]	; (8001254 <NVIC_Init+0x68>)
 8001248:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	e000e100 	.word	0xe000e100

08001258 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001258:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800125c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <NVIC_SetVectorTable+0x10>)
 8001262:	4308      	orrs	r0, r1
 8001264:	6098      	str	r0, [r3, #8]
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800126e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001270:	b109      	cbz	r1, 8001276 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8001272:	4310      	orrs	r0, r2
 8001274:	e001      	b.n	800127a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001276:	ea22 0000 	bic.w	r0, r2, r0
 800127a:	6118      	str	r0, [r3, #16]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001286:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001288:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800128a:	bf0c      	ite	eq
 800128c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001290:	f022 0204 	bicne.w	r2, r2, #4
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4770      	bx	lr
 8001298:	e000e010 	.word	0xe000e010

0800129c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800129c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <GPIO_DeInit+0xb4>)
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d105      	bne.n	80012b0 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80012a4:	2001      	movs	r0, #1
 80012a6:	4601      	mov	r1, r0
 80012a8:	f000 fc48 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80012ac:	2001      	movs	r0, #1
 80012ae:	e048      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <GPIO_DeInit+0xb8>)
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d105      	bne.n	80012c2 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012b6:	2002      	movs	r0, #2
 80012b8:	2101      	movs	r1, #1
 80012ba:	f000 fc3f 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80012be:	2002      	movs	r0, #2
 80012c0:	e03f      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <GPIO_DeInit+0xbc>)
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d105      	bne.n	80012d4 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012c8:	2004      	movs	r0, #4
 80012ca:	2101      	movs	r1, #1
 80012cc:	f000 fc36 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80012d0:	2004      	movs	r0, #4
 80012d2:	e036      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <GPIO_DeInit+0xc0>)
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d105      	bne.n	80012e6 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80012da:	2008      	movs	r0, #8
 80012dc:	2101      	movs	r1, #1
 80012de:	f000 fc2d 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80012e2:	2008      	movs	r0, #8
 80012e4:	e02d      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <GPIO_DeInit+0xc4>)
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d105      	bne.n	80012f8 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80012ec:	2010      	movs	r0, #16
 80012ee:	2101      	movs	r1, #1
 80012f0:	f000 fc24 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80012f4:	2010      	movs	r0, #16
 80012f6:	e024      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <GPIO_DeInit+0xc8>)
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d105      	bne.n	800130a <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80012fe:	2020      	movs	r0, #32
 8001300:	2101      	movs	r1, #1
 8001302:	f000 fc1b 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001306:	2020      	movs	r0, #32
 8001308:	e01b      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <GPIO_DeInit+0xcc>)
 800130c:	4298      	cmp	r0, r3
 800130e:	d105      	bne.n	800131c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001310:	2040      	movs	r0, #64	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	f000 fc12 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	e012      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <GPIO_DeInit+0xd0>)
 800131e:	4298      	cmp	r0, r3
 8001320:	d105      	bne.n	800132e <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001322:	2080      	movs	r0, #128	; 0x80
 8001324:	2101      	movs	r1, #1
 8001326:	f000 fc09 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800132a:	2080      	movs	r0, #128	; 0x80
 800132c:	e009      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <GPIO_DeInit+0xd4>)
 8001330:	4298      	cmp	r0, r3
 8001332:	d10b      	bne.n	800134c <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001334:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001338:	2101      	movs	r1, #1
 800133a:	f000 fbff 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800133e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001342:	2100      	movs	r1, #0
    }
  }
}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001348:	f000 bbf8 	b.w	8001b3c <RCC_AHB1PeriphResetCmd>
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40022000 	.word	0x40022000

08001374 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001378:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800137a:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 800137c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001380:	f04f 0803 	mov.w	r8, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001384:	fa0c f203 	lsl.w	r2, ip, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001388:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 800138c:	4295      	cmp	r5, r2
 800138e:	d130      	bne.n	80013f2 <GPIO_Init+0x7e>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8001390:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001392:	6806      	ldr	r6, [r0, #0]
 8001394:	fa08 f402 	lsl.w	r4, r8, r2
 8001398:	43e4      	mvns	r4, r4
 800139a:	4026      	ands	r6, r4
 800139c:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800139e:	790e      	ldrb	r6, [r1, #4]
 80013a0:	f8d0 9000 	ldr.w	r9, [r0]
 80013a4:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013a8:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013aa:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013ae:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013b0:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013b4:	d814      	bhi.n	80013e0 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013b6:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013b8:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013bc:	4026      	ands	r6, r4
 80013be:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013c0:	6886      	ldr	r6, [r0, #8]
 80013c2:	fa09 f902 	lsl.w	r9, r9, r2
 80013c6:	ea49 0606 	orr.w	r6, r9, r6
 80013ca:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013cc:	6846      	ldr	r6, [r0, #4]
 80013ce:	ea26 0505 	bic.w	r5, r6, r5
 80013d2:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013d4:	798d      	ldrb	r5, [r1, #6]
 80013d6:	6846      	ldr	r6, [r0, #4]
 80013d8:	409d      	lsls	r5, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80013da:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013dc:	4335      	orrs	r5, r6
 80013de:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80013e0:	68c5      	ldr	r5, [r0, #12]
 80013e2:	402c      	ands	r4, r5
 80013e4:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013e6:	79cd      	ldrb	r5, [r1, #7]
 80013e8:	68c4      	ldr	r4, [r0, #12]
 80013ea:	fa05 f202 	lsl.w	r2, r5, r2
 80013ee:	4322      	orrs	r2, r4
 80013f0:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013f2:	3301      	adds	r3, #1
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d1c5      	bne.n	8001384 <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80013f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080013fc <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001402:	2300      	movs	r3, #0
 8001404:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001406:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001408:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800140a:	71c3      	strb	r3, [r0, #7]
 800140c:	4770      	bx	lr

0800140e <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001416:	9b01      	ldr	r3, [sp, #4]
 8001418:	430b      	orrs	r3, r1
 800141a:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800141c:	9b01      	ldr	r3, [sp, #4]
 800141e:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001420:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001426:	69c3      	ldr	r3, [r0, #28]
 8001428:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800142a:	69c3      	ldr	r3, [r0, #28]
 800142c:	9301      	str	r3, [sp, #4]
}
 800142e:	b002      	add	sp, #8
 8001430:	4770      	bx	lr

08001432 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001432:	6903      	ldr	r3, [r0, #16]
 8001434:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001436:	bf0c      	ite	eq
 8001438:	2000      	moveq	r0, #0
 800143a:	2001      	movne	r0, #1
 800143c:	4770      	bx	lr

0800143e <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800143e:	6900      	ldr	r0, [r0, #16]
}
 8001440:	b280      	uxth	r0, r0
 8001442:	4770      	bx	lr

08001444 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001444:	6943      	ldr	r3, [r0, #20]
 8001446:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001448:	bf0c      	ite	eq
 800144a:	2000      	moveq	r0, #0
 800144c:	2001      	movne	r0, #1
 800144e:	4770      	bx	lr

08001450 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001450:	6940      	ldr	r0, [r0, #20]
}
 8001452:	b280      	uxth	r0, r0
 8001454:	4770      	bx	lr

08001456 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001456:	8301      	strh	r1, [r0, #24]
 8001458:	4770      	bx	lr

0800145a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800145a:	8341      	strh	r1, [r0, #26]
 800145c:	4770      	bx	lr

0800145e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800145e:	b10a      	cbz	r2, 8001464 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001460:	8301      	strh	r1, [r0, #24]
 8001462:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001464:	8341      	strh	r1, [r0, #26]
 8001466:	4770      	bx	lr

08001468 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001468:	6141      	str	r1, [r0, #20]
 800146a:	4770      	bx	lr

0800146c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800146c:	6943      	ldr	r3, [r0, #20]
 800146e:	4059      	eors	r1, r3
 8001470:	6141      	str	r1, [r0, #20]
 8001472:	4770      	bx	lr

08001474 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001474:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001478:	08c9      	lsrs	r1, r1, #3
 800147a:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800147c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800147e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001480:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001484:	240f      	movs	r4, #15
 8001486:	409c      	lsls	r4, r3
 8001488:	ea25 0404 	bic.w	r4, r5, r4
 800148c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001490:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001494:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001496:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001498:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 800149c:	bd30      	pop	{r4, r5, pc}
 800149e:	bf00      	nop

080014a0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80014a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <I2C_DeInit+0x50>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d107      	bne.n	80014b8 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80014a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014ac:	2101      	movs	r1, #1
 80014ae:	f000 fb69 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80014b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014b6:	e014      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <I2C_DeInit+0x54>)
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d107      	bne.n	80014ce <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80014be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014c2:	2101      	movs	r1, #1
 80014c4:	f000 fb5e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80014c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014cc:	e009      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <I2C_DeInit+0x58>)
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d10b      	bne.n	80014ec <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80014d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014d8:	2101      	movs	r1, #1
 80014da:	f000 fb53 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014e2:	2100      	movs	r1, #0
    }
  }
}
 80014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014e8:	f000 bb4c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40005800 	.word	0x40005800
 80014f8:	40005c00 	.word	0x40005c00

080014fc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001502:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001504:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001506:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001508:	f000 fa6e 	bl	80019e8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800150c:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <I2C_Init+0xc8>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001510:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001512:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001516:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001518:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800151c:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800151e:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 8001520:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001522:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001524:	8822      	ldrh	r2, [r4, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	0412      	lsls	r2, r2, #16
 800152c:	0c12      	lsrs	r2, r2, #16
 800152e:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <I2C_Init+0xcc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d80a      	bhi.n	800154c <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800153c:	3701      	adds	r7, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800153e:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001540:	b2bf      	uxth	r7, r7
 8001542:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001544:	2b03      	cmp	r3, #3
 8001546:	bf98      	it	ls
 8001548:	2304      	movls	r3, #4
 800154a:	e021      	b.n	8001590 <I2C_Init+0x94>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800154c:	88ee      	ldrh	r6, [r5, #6]
 800154e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001552:	4296      	cmp	r6, r2
 8001554:	d104      	bne.n	8001560 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001556:	2203      	movs	r2, #3
 8001558:	4353      	muls	r3, r2
 800155a:	fbb1 f3f3 	udiv	r3, r1, r3
 800155e:	e005      	b.n	800156c <I2C_Init+0x70>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001560:	2219      	movs	r2, #25
 8001562:	4353      	muls	r3, r2
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	b29b      	uxth	r3, r3
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800156e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001572:	b90a      	cbnz	r2, 8001578 <I2C_Init+0x7c>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001574:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001578:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157c:	4350      	muls	r0, r2
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	fb90 f0f2 	sdiv	r0, r0, r2
 8001586:	3001      	adds	r0, #1
 8001588:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800158a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800158e:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001590:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001592:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001594:	8969      	ldrh	r1, [r5, #10]
 8001596:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001598:	b29b      	uxth	r3, r3
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80015a0:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015a2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015ac:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015ae:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80015b4:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80015b6:	892a      	ldrh	r2, [r5, #8]
 80015b8:	89ab      	ldrh	r3, [r5, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8123      	strh	r3, [r4, #8]
}
 80015c0:	b005      	add	sp, #20
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	000f4240 	.word	0x000f4240
 80015c8:	000186a0 	.word	0x000186a0

080015cc <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80015cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d0:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80015d2:	2300      	movs	r3, #0
 80015d4:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80015da:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80015dc:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015e2:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015e4:	8183      	strh	r3, [r0, #12]
 80015e6:	4770      	bx	lr

080015e8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015e8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015ea:	b119      	cbz	r1, 80015f4 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	e003      	b.n	80015fc <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	8003      	strh	r3, [r0, #0]
 80015fe:	4770      	bx	lr

08001600 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001600:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001602:	b119      	cbz	r1, 800160c <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001604:	b29b      	uxth	r3, r3
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	e003      	b.n	8001614 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	8003      	strh	r3, [r0, #0]
 8001616:	4770      	bx	lr

08001618 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001618:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800161a:	b119      	cbz	r1, 8001624 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800161c:	b29b      	uxth	r3, r3
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	e003      	b.n	800162c <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	8003      	strh	r3, [r0, #0]
 800162e:	4770      	bx	lr

08001630 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001630:	b112      	cbz	r2, 8001638 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001632:	f041 0101 	orr.w	r1, r1, #1
 8001636:	e001      	b.n	800163c <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001638:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800163c:	8201      	strh	r1, [r0, #16]
 800163e:	4770      	bx	lr

08001640 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001640:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001642:	b119      	cbz	r1, 800164c <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001644:	b29b      	uxth	r3, r3
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	e003      	b.n	8001654 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800164c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	0c1b      	lsrs	r3, r3, #16
 8001654:	8003      	strh	r3, [r0, #0]
 8001656:	4770      	bx	lr

08001658 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8001658:	8983      	ldrh	r3, [r0, #12]
 800165a:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800165c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001660:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001664:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8001666:	8183      	strh	r3, [r0, #12]
 8001668:	4770      	bx	lr

0800166a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166c:	b119      	cbz	r1, 8001676 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166e:	b29b      	uxth	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	e003      	b.n	800167e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	8183      	strh	r3, [r0, #12]
 8001680:	4770      	bx	lr

08001682 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001682:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001684:	b119      	cbz	r1, 800168e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001686:	b29b      	uxth	r3, r3
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	e003      	b.n	8001696 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800168e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	8003      	strh	r3, [r0, #0]
 8001698:	4770      	bx	lr

0800169a <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169a:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800169c:	b129      	cbz	r1, 80016aa <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	e001      	b.n	80016ae <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80016aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ae:	8003      	strh	r3, [r0, #0]
 80016b0:	4770      	bx	lr

080016b2 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b2:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80016b4:	b919      	cbnz	r1, 80016be <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	e003      	b.n	80016c6 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80016be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	8003      	strh	r3, [r0, #0]
 80016c8:	4770      	bx	lr

080016ca <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016ca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016ce:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016d0:	d004      	beq.n	80016dc <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	e002      	b.n	80016e2 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	8383      	strh	r3, [r0, #28]
 80016e4:	4770      	bx	lr

080016e6 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016e6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ea:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016ec:	d103      	bne.n	80016f6 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f4:	e003      	b.n	80016fe <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80016f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fa:	041b      	lsls	r3, r3, #16
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	8003      	strh	r3, [r0, #0]
 8001700:	4770      	bx	lr

08001702 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001702:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001706:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001708:	d103      	bne.n	8001712 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800170a:	b29b      	uxth	r3, r3
 800170c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001710:	e003      	b.n	800171a <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	8003      	strh	r3, [r0, #0]
 800171c:	4770      	bx	lr

0800171e <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800171e:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001720:	b119      	cbz	r1, 800172a <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001722:	b29b      	uxth	r3, r3
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	e003      	b.n	8001732 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800172a:	f023 0310 	bic.w	r3, r3, #16
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	8003      	strh	r3, [r0, #0]
 8001734:	4770      	bx	lr

08001736 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001736:	8201      	strh	r1, [r0, #16]
 8001738:	4770      	bx	lr

0800173a <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800173a:	8a00      	ldrh	r0, [r0, #16]
}
 800173c:	b2c0      	uxtb	r0, r0
 800173e:	4770      	bx	lr

08001740 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001740:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001742:	b119      	cbz	r1, 800174c <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001744:	b29b      	uxth	r3, r3
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	e003      	b.n	8001754 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800174c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	0c1b      	lsrs	r3, r3, #16
 8001754:	8003      	strh	r3, [r0, #0]
 8001756:	4770      	bx	lr

08001758 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001758:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800175c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800175e:	d103      	bne.n	8001768 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001760:	b29b      	uxth	r3, r3
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	e003      	b.n	8001770 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	8003      	strh	r3, [r0, #0]
 8001772:	4770      	bx	lr

08001774 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001774:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001776:	b119      	cbz	r1, 8001780 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001778:	b29b      	uxth	r3, r3
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	e003      	b.n	8001788 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001780:	f023 0320 	bic.w	r3, r3, #32
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	8003      	strh	r3, [r0, #0]
 800178a:	4770      	bx	lr

0800178c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800178c:	8b00      	ldrh	r0, [r0, #24]
}
 800178e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001792:	4770      	bx	lr

08001794 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001794:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001796:	b119      	cbz	r1, 80017a0 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001798:	b29b      	uxth	r3, r3
 800179a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179e:	e003      	b.n	80017a8 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80017a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	8083      	strh	r3, [r0, #4]
 80017aa:	4770      	bx	lr

080017ac <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017ac:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017ae:	b119      	cbz	r1, 80017b8 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b6:	e003      	b.n	80017c0 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80017b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	8083      	strh	r3, [r0, #4]
 80017c2:	4770      	bx	lr

080017c4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80017c4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80017ca:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	18c9      	adds	r1, r1, r3
 80017d0:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	8818      	ldrh	r0, [r3, #0]
}
 80017d6:	b280      	uxth	r0, r0
 80017d8:	b002      	add	sp, #8
 80017da:	4770      	bx	lr

080017dc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017dc:	8883      	ldrh	r3, [r0, #4]
 80017de:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80017e0:	b10a      	cbz	r2, 80017e6 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017e2:	4319      	orrs	r1, r3
 80017e4:	e001      	b.n	80017ea <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80017e6:	ea23 0101 	bic.w	r1, r3, r1
 80017ea:	8081      	strh	r1, [r0, #4]
 80017ec:	4770      	bx	lr

080017ee <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017ee:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80017f0:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017f2:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80017f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80017f8:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80017fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80017fe:	1a43      	subs	r3, r0, r1
 8001800:	4258      	negs	r0, r3
 8001802:	4158      	adcs	r0, r3
 8001804:	4770      	bx	lr

08001806 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001806:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001808:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800180a:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800180c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001814:	4770      	bx	lr

08001816 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001816:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800181e:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001820:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001822:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001824:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001826:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800182a:	b113      	cbz	r3, 8001832 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	3314      	adds	r3, #20
 8001830:	e002      	b.n	8001838 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001832:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001834:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001836:	3318      	adds	r3, #24
 8001838:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001840:	bf0c      	ite	eq
 8001842:	2000      	moveq	r0, #0
 8001844:	2001      	movne	r0, #1
 8001846:	b002      	add	sp, #8
 8001848:	4770      	bx	lr

0800184a <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800184a:	43c9      	mvns	r1, r1
 800184c:	b289      	uxth	r1, r1
 800184e:	8281      	strh	r1, [r0, #20]
 8001850:	4770      	bx	lr

08001852 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001852:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001854:	8a80      	ldrh	r0, [r0, #20]
 8001856:	b280      	uxth	r0, r0
 8001858:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185a:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800185c:	d006      	beq.n	800186c <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185e:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001862:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001866:	bf0c      	ite	eq
 8001868:	2000      	moveq	r0, #0
 800186a:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800186c:	4770      	bx	lr

0800186e <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800186e:	43c9      	mvns	r1, r1
 8001870:	b289      	uxth	r1, r1
 8001872:	8281      	strh	r1, [r0, #20]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <RCC_DeInit+0x2c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800188c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001890:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <RCC_DeInit+0x30>)
 8001894:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800189c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	24003010 	.word	0x24003010

080018ac <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <RCC_HSEConfig+0xc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80018b2:	7018      	strb	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023802 	.word	0x40023802

080018bc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <RCC_AdjustHSICalibrationValue+0x10>)
 80018be:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80018c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80018c4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80018c8:	6018      	str	r0, [r3, #0]
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800

080018d0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <RCC_HSICmd+0x8>)
 80018d2:	6018      	str	r0, [r3, #0]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	42470000 	.word	0x42470000

080018dc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <RCC_LSEConfig+0x1c>)
 80018de:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e6:	d002      	beq.n	80018ee <RCC_LSEConfig+0x12>
 80018e8:	2804      	cmp	r0, #4
 80018ea:	d104      	bne.n	80018f6 <RCC_LSEConfig+0x1a>
 80018ec:	e001      	b.n	80018f2 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80018ee:	7018      	strb	r0, [r3, #0]
      break;
 80018f0:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80018f2:	2205      	movs	r2, #5
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	4770      	bx	lr
 80018f8:	40023870 	.word	0x40023870

080018fc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <RCC_LSICmd+0x8>)
 80018fe:	6018      	str	r0, [r3, #0]
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	42470e80 	.word	0x42470e80

08001908 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001908:	b510      	push	{r4, lr}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800190a:	9c02      	ldr	r4, [sp, #8]
 800190c:	4301      	orrs	r1, r0
 800190e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800191a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800191e:	4b01      	ldr	r3, [pc, #4]	; (8001924 <RCC_PLLConfig+0x1c>)
 8001920:	605c      	str	r4, [r3, #4]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <RCC_PLLCmd+0x8>)
 800192a:	6018      	str	r0, [r3, #0]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	42470060 	.word	0x42470060

08001934 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001934:	0180      	lsls	r0, r0, #6
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RCC_PLLI2SConfig+0x10>)
 8001938:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 800193c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <RCC_PLLI2SCmd+0x8>)
 800194a:	6018      	str	r0, [r3, #0]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	42470068 	.word	0x42470068

08001954 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <RCC_ClockSecuritySystemCmd+0x8>)
 8001956:	6018      	str	r0, [r3, #0]
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	4247004c 	.word	0x4247004c

08001960 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <RCC_MCO1Config+0x10>)
 8001962:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001964:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001968:	4310      	orrs	r0, r2
 800196a:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800196c:	6099      	str	r1, [r3, #8]
 800196e:	4770      	bx	lr
 8001970:	40023800 	.word	0x40023800

08001974 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <RCC_MCO2Config+0x10>)
 8001976:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001978:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800197c:	4310      	orrs	r0, r2
 800197e:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001980:	6099      	str	r1, [r3, #8]
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800

08001988 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <RCC_SYSCLKConfig+0x10>)
 800198a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800198c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001990:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001992:	6098      	str	r0, [r3, #8]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <RCC_GetSYSCLKSource+0xc>)
 800199e:	6898      	ldr	r0, [r3, #8]
}
 80019a0:	f000 000c 	and.w	r0, r0, #12
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <RCC_HCLKConfig+0x10>)
 80019ae:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019b4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019b6:	6098      	str	r0, [r3, #8]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <RCC_PCLK1Config+0x10>)
 80019c2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80019c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019c8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ca:	6098      	str	r0, [r3, #8]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <RCC_PCLK2Config+0x10>)
 80019d6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80019d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80019dc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019e0:	6098      	str	r0, [r3, #8]
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800

080019e8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80019f0:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80019f2:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80019f4:	d003      	beq.n	80019fe <RCC_GetClocksFreq+0x16>
 80019f6:	2a08      	cmp	r2, #8
 80019f8:	d003      	beq.n	8001a02 <RCC_GetClocksFreq+0x1a>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <RCC_GetClocksFreq+0x7c>)
 80019fc:	e018      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <RCC_GetClocksFreq+0x80>)
 8001a00:	e016      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001a02:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a04:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001a06:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	bf14      	ite	ne
 8001a0e:	4b16      	ldrne	r3, [pc, #88]	; (8001a68 <RCC_GetClocksFreq+0x80>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a10:	4b14      	ldreq	r3, [pc, #80]	; (8001a64 <RCC_GetClocksFreq+0x7c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a16:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 8001a1c:	6852      	ldr	r2, [r2, #4]
 8001a1e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a22:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a26:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a28:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a2a:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a2c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <RCC_GetClocksFreq+0x78>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a32:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a34:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <RCC_GetClocksFreq+0x84>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8001a38:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001a3c:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001a3e:	6803      	ldr	r3, [r0, #0]
 8001a40:	40e3      	lsrs	r3, r4
 8001a42:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001a44:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8001a46:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001a4a:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a4c:	fa23 f404 	lsr.w	r4, r3, r4
 8001a50:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001a52:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8001a54:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001a58:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a5a:	40d3      	lsrs	r3, r2
 8001a5c:	60c3      	str	r3, [r0, #12]
 8001a5e:	bd10      	pop	{r4, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	20000074 	.word	0x20000074

08001a70 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001a70:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <RCC_RTCCLKConfig+0x2c>)
 8001a7a:	d108      	bne.n	8001a8e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001a7c:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a7e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001a82:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a8a:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001a8c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a90:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001a94:	4310      	orrs	r0, r2
 8001a96:	6718      	str	r0, [r3, #112]	; 0x70
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001aa0:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <RCC_RTCCLKCmd+0x8>)
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	42470e3c 	.word	0x42470e3c

08001aac <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <RCC_BackupResetCmd+0x8>)
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	42470e40 	.word	0x42470e40

08001ab8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <RCC_I2SCLKConfig+0x8>)
 8001aba:	6018      	str	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	4247015c 	.word	0x4247015c

08001ac4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	b109      	cbz	r1, 8001ace <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001aca:	4310      	orrs	r0, r2
 8001acc:	e001      	b.n	8001ad2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001ace:	ea22 0000 	bic.w	r0, r2, r0
 8001ad2:	6318      	str	r0, [r3, #48]	; 0x30
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ae0:	b109      	cbz	r1, 8001ae6 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ae2:	4310      	orrs	r0, r2
 8001ae4:	e001      	b.n	8001aea <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001ae6:	ea22 0000 	bic.w	r0, r2, r0
 8001aea:	6358      	str	r0, [r3, #52]	; 0x34
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001af8:	b109      	cbz	r1, 8001afe <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001afa:	4310      	orrs	r0, r2
 8001afc:	e001      	b.n	8001b02 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001afe:	ea22 0000 	bic.w	r0, r2, r0
 8001b02:	6398      	str	r0, [r3, #56]	; 0x38
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b10:	b109      	cbz	r1, 8001b16 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b12:	4310      	orrs	r0, r2
 8001b14:	e001      	b.n	8001b1a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001b16:	ea22 0000 	bic.w	r0, r2, r0
 8001b1a:	6418      	str	r0, [r3, #64]	; 0x40
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b28:	b109      	cbz	r1, 8001b2e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b2a:	4310      	orrs	r0, r2
 8001b2c:	e001      	b.n	8001b32 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b2e:	ea22 0000 	bic.w	r0, r2, r0
 8001b32:	6458      	str	r0, [r3, #68]	; 0x44
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b3e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b40:	b109      	cbz	r1, 8001b46 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b42:	4310      	orrs	r0, r2
 8001b44:	e001      	b.n	8001b4a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001b46:	ea22 0000 	bic.w	r0, r2, r0
 8001b4a:	6118      	str	r0, [r3, #16]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b56:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b58:	b109      	cbz	r1, 8001b5e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b5a:	4310      	orrs	r0, r2
 8001b5c:	e001      	b.n	8001b62 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001b5e:	ea22 0000 	bic.w	r0, r2, r0
 8001b62:	6158      	str	r0, [r3, #20]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b6e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b70:	b109      	cbz	r1, 8001b76 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b72:	4310      	orrs	r0, r2
 8001b74:	e001      	b.n	8001b7a <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001b76:	ea22 0000 	bic.w	r0, r2, r0
 8001b7a:	6198      	str	r0, [r3, #24]
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b86:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b88:	b109      	cbz	r1, 8001b8e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	e001      	b.n	8001b92 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001b8e:	ea22 0000 	bic.w	r0, r2, r0
 8001b92:	6218      	str	r0, [r3, #32]
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ba0:	b109      	cbz	r1, 8001ba6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ba2:	4310      	orrs	r0, r2
 8001ba4:	e001      	b.n	8001baa <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ba6:	ea22 0000 	bic.w	r0, r2, r0
 8001baa:	6258      	str	r0, [r3, #36]	; 0x24
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bb8:	b109      	cbz	r1, 8001bbe <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bba:	4310      	orrs	r0, r2
 8001bbc:	e001      	b.n	8001bc2 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001bbe:	ea22 0000 	bic.w	r0, r2, r0
 8001bc2:	6518      	str	r0, [r3, #80]	; 0x50
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bd0:	b109      	cbz	r1, 8001bd6 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bd2:	4310      	orrs	r0, r2
 8001bd4:	e001      	b.n	8001bda <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001bd6:	ea22 0000 	bic.w	r0, r2, r0
 8001bda:	6558      	str	r0, [r3, #84]	; 0x54
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001be8:	b109      	cbz	r1, 8001bee <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001bea:	4310      	orrs	r0, r2
 8001bec:	e001      	b.n	8001bf2 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001bee:	ea22 0000 	bic.w	r0, r2, r0
 8001bf2:	6598      	str	r0, [r3, #88]	; 0x58
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c00:	b109      	cbz	r1, 8001c06 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001c02:	4310      	orrs	r0, r2
 8001c04:	e001      	b.n	8001c0a <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001c06:	ea22 0000 	bic.w	r0, r2, r0
 8001c0a:	6618      	str	r0, [r3, #96]	; 0x60
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c18:	b109      	cbz	r1, 8001c1e <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c1a:	4310      	orrs	r0, r2
 8001c1c:	e001      	b.n	8001c22 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001c1e:	ea22 0000 	bic.w	r0, r2, r0
 8001c22:	6658      	str	r0, [r3, #100]	; 0x64
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c2e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c30:	b109      	cbz	r1, 8001c36 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c32:	4310      	orrs	r0, r2
 8001c34:	e001      	b.n	8001c3a <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001c36:	ea22 0000 	bic.w	r0, r2, r0
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	4002380d 	.word	0x4002380d

08001c44 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001c44:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <RCC_GetFlagStatus+0x24>)
 8001c4a:	d101      	bne.n	8001c50 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	e003      	b.n	8001c58 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001c50:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001c52:	bf0c      	ite	eq
 8001c54:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001c56:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001c58:	f000 001f 	and.w	r0, r0, #31
 8001c5c:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001c60:	f000 0001 	and.w	r0, r0, #1
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001c6c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001c72:	2031      	movs	r0, #49	; 0x31
 8001c74:	f7ff ffe6 	bl	8001c44 <RCC_GetFlagStatus>
    startupcounter++;
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c84:	d001      	beq.n	8001c8a <RCC_WaitForHSEStartUp+0x1e>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0f3      	beq.n	8001c72 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	2031      	movs	r0, #49	; 0x31
 8001c8c:	f7ff ffda 	bl	8001c44 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001c90:	3000      	adds	r0, #0
 8001c92:	bf18      	it	ne
 8001c94:	2001      	movne	r0, #1
 8001c96:	bd0e      	pop	{r1, r2, r3, pc}

08001c98 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <RCC_ClearFlag+0xc>)
 8001c9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <RCC_GetITStatus+0x10>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001cae:	bf0c      	ite	eq
 8001cb0:	2000      	moveq	r0, #0
 8001cb2:	2001      	movne	r0, #1
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <RCC_ClearITPendingBit+0x8>)
 8001cbe:	7018      	strb	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	4002380e 	.word	0x4002380e

08001cc8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001cc8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <SPI_I2S_DeInit+0x58>)
 8001ccc:	4298      	cmp	r0, r3
 8001cce:	d10b      	bne.n	8001ce8 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001cd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f7ff ff61 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cde:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001ce4:	f7ff bf5a 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <SPI_I2S_DeInit+0x5c>)
 8001cea:	4298      	cmp	r0, r3
 8001cec:	d107      	bne.n	8001cfe <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001cee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f7ff ff46 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cfc:	e009      	b.n	8001d12 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <SPI_I2S_DeInit+0x60>)
 8001d00:	4298      	cmp	r0, r3
 8001d02:	d10b      	bne.n	8001d1c <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001d04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d08:	2101      	movs	r1, #1
 8001d0a:	f7ff ff3b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d12:	2100      	movs	r1, #0
    }
  }
}
 8001d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d18:	f7ff bf34 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 8001d1c:	bd08      	pop	{r3, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013000 	.word	0x40013000
 8001d24:	40003800 	.word	0x40003800
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d2c:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001d2e:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001d30:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d32:	884c      	ldrh	r4, [r1, #2]
 8001d34:	4323      	orrs	r3, r4
 8001d36:	888c      	ldrh	r4, [r1, #4]
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	88cc      	ldrh	r4, [r1, #6]
 8001d3c:	4323      	orrs	r3, r4
 8001d3e:	890c      	ldrh	r4, [r1, #8]
 8001d40:	4323      	orrs	r3, r4
 8001d42:	894c      	ldrh	r4, [r1, #10]
 8001d44:	4323      	orrs	r3, r4
 8001d46:	898c      	ldrh	r4, [r1, #12]
 8001d48:	4323      	orrs	r3, r4
 8001d4a:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001d4c:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d50:	4323      	orrs	r3, r4
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001d56:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001d58:	8b83      	ldrh	r3, [r0, #28]
 8001d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001d64:	8a0b      	ldrh	r3, [r1, #16]
 8001d66:	8203      	strh	r3, [r0, #16]
 8001d68:	bd10      	pop	{r4, pc}

08001d6a <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d6a:	8b83      	ldrh	r3, [r0, #28]
 8001d6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d70:	f023 030f 	bic.w	r3, r3, #15
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d7e:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d82:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d84:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d86:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d88:	d038      	beq.n	8001dfc <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <I2S_Init+0xca>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001d8c:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8e:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2602      	movne	r6, #2
 8001d96:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d98:	0224      	lsls	r4, r4, #8
 8001d9a:	d503      	bpl.n	8001da4 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001d9c:	6894      	ldr	r4, [r2, #8]
 8001d9e:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001da2:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001da4:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001da8:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001dac:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dae:	f8df c088 	ldr.w	ip, [pc, #136]	; 8001e38 <I2S_Init+0xce>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001db6:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001dba:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dbe:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001dc0:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dc4:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001dc8:	88ca      	ldrh	r2, [r1, #6]
 8001dca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dce:	bf18      	it	ne
 8001dd0:	0176      	lslne	r6, r6, #5
 8001dd2:	f04f 020a 	mov.w	r2, #10
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dd6:	bf0c      	ite	eq
 8001dd8:	0a24      	lsreq	r4, r4, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dda:	fbb4 f4f6 	udivne	r4, r4, r6
 8001dde:	4362      	muls	r2, r4
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001de6:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001de8:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001dea:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001dee:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df2:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001df4:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	e000      	b.n	8001dfe <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001dfc:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001dfe:	1e9c      	subs	r4, r3, #2
 8001e00:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e02:	2cfe      	cmp	r4, #254	; 0xfe
 8001e04:	bf28      	it	cs
 8001e06:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e08:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e0a:	bf28      	it	cs
 8001e0c:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4323      	orrs	r3, r4
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e12:	880a      	ldrh	r2, [r1, #0]
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e18:	ea45 0302 	orr.w	r3, r5, r2

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e1c:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e22:	4313      	orrs	r3, r2
 8001e24:	888a      	ldrh	r2, [r1, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	898a      	ldrh	r2, [r1, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001e2e:	8383      	strh	r3, [r0, #28]
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001e40:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001e42:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001e44:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001e46:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001e48:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001e4a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001e4c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	8203      	strh	r3, [r0, #16]
 8001e52:	4770      	bx	lr

08001e54 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e54:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e56:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e58:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001e5a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001e5c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001e5e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e60:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001e62:	8183      	strh	r3, [r0, #12]
 8001e64:	4770      	bx	lr

08001e66 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e66:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e68:	b119      	cbz	r1, 8001e72 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e70:	e003      	b.n	8001e7a <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	8003      	strh	r3, [r0, #0]
 8001e7c:	4770      	bx	lr

08001e7e <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e7e:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e80:	b119      	cbz	r1, 8001e8a <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e88:	e003      	b.n	8001e92 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	8383      	strh	r3, [r0, #28]
 8001e94:	4770      	bx	lr

08001e96 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001e96:	8803      	ldrh	r3, [r0, #0]
 8001e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001ea2:	8803      	ldrh	r3, [r0, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4319      	orrs	r1, r3
 8001ea8:	8001      	strh	r1, [r0, #0]
 8001eaa:	4770      	bx	lr

08001eac <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eb2:	d103      	bne.n	8001ebc <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	e003      	b.n	8001ec4 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	8003      	strh	r3, [r0, #0]
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ec8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001ecc:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ece:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ed0:	d003      	beq.n	8001eda <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	e003      	b.n	8001ee2 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	8003      	strh	r3, [r0, #0]
 8001ee4:	4770      	bx	lr

08001ee6 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001ee6:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ee8:	b119      	cbz	r1, 8001ef2 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	e003      	b.n	8001efa <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	8083      	strh	r3, [r0, #4]
 8001efc:	4770      	bx	lr

08001efe <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001efe:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f00:	b119      	cbz	r1, 8001f0a <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	e003      	b.n	8001f12 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001f0a:	f023 0310 	bic.w	r3, r3, #16
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	8083      	strh	r3, [r0, #4]
 8001f14:	4770      	bx	lr

08001f16 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f16:	8b83      	ldrh	r3, [r0, #28]
 8001f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001f26:	2302      	movs	r3, #2
 8001f28:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2a:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f2c:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001f32:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f34:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f36:	d102      	bne.n	8001f3e <I2S_FullDuplexConfig+0x28>
  {
    tmp = I2S_Mode_SlaveRx;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	e002      	b.n	8001f44 <I2S_FullDuplexConfig+0x2e>
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0fa      	beq.n	8001f38 <I2S_FullDuplexConfig+0x22>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
    {
      tmp = I2S_Mode_SlaveTx;
 8001f42:	2300      	movs	r3, #0
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f44:	884c      	ldrh	r4, [r1, #2]
 8001f46:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f48:	888c      	ldrh	r4, [r1, #4]
 8001f4a:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f50:	4322      	orrs	r2, r4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	b292      	uxth	r2, r2
 8001f56:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001f58:	8383      	strh	r3, [r0, #28]
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001f5c:	8980      	ldrh	r0, [r0, #12]
}
 8001f5e:	b280      	uxth	r0, r0
 8001f60:	4770      	bx	lr

08001f62 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001f62:	8181      	strh	r1, [r0, #12]
 8001f64:	4770      	bx	lr

08001f66 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f66:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f68:	b119      	cbz	r1, 8001f72 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f70:	e003      	b.n	8001f7a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	8003      	strh	r3, [r0, #0]
 8001f7c:	4770      	bx	lr

08001f7e <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001f7e:	8803      	ldrh	r3, [r0, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f86:	8003      	strh	r3, [r0, #0]
 8001f88:	4770      	bx	lr

08001f8a <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001f8a:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001f8c:	bf14      	ite	ne
 8001f8e:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001f90:	8a80      	ldrheq	r0, [r0, #20]
 8001f92:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001f94:	4770      	bx	lr

08001f96 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001f96:	8a00      	ldrh	r0, [r0, #16]
}
 8001f98:	b280      	uxth	r0, r0
 8001f9a:	4770      	bx	lr

08001f9c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001f9c:	8883      	ldrh	r3, [r0, #4]
 8001f9e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001fa0:	b10a      	cbz	r2, 8001fa6 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	e001      	b.n	8001faa <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001fa6:	ea23 0101 	bic.w	r1, r3, r1
 8001faa:	8081      	strh	r1, [r0, #4]
 8001fac:	4770      	bx	lr

08001fae <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001fae:	0909      	lsrs	r1, r1, #4
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	408b      	lsls	r3, r1
 8001fb4:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001fb6:	b11a      	cbz	r2, 8001fc0 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001fb8:	8882      	ldrh	r2, [r0, #4]
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	e003      	b.n	8001fc8 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001fc0:	8882      	ldrh	r2, [r0, #4]
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	ea22 0303 	bic.w	r3, r2, r3
 8001fc8:	8083      	strh	r3, [r0, #4]
 8001fca:	4770      	bx	lr

08001fcc <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001fcc:	8903      	ldrh	r3, [r0, #8]
 8001fce:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2000      	moveq	r0, #0
 8001fd4:	2001      	movne	r0, #1
 8001fd6:	4770      	bx	lr

08001fd8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001fd8:	43c9      	mvns	r1, r1
 8001fda:	b289      	uxth	r1, r1
 8001fdc:	8101      	strh	r1, [r0, #8]
 8001fde:	4770      	bx	lr

08001fe0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001fe0:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001fe2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fe4:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fe6:	f001 020f 	and.w	r2, r1, #15
 8001fea:	2301      	movs	r3, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fec:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fee:	fa03 f202 	lsl.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff2:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ff4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff6:	d005      	beq.n	8002004 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001ff8:	0909      	lsrs	r1, r1, #4
 8001ffa:	408b      	lsls	r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ffc:	421c      	tst	r4, r3
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001ffe:	bf0c      	ite	eq
 8002000:	2000      	moveq	r0, #0
 8002002:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002004:	bd10      	pop	{r4, pc}

08002006 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002006:	f001 010f 	and.w	r1, r1, #15
 800200a:	2301      	movs	r3, #1
 800200c:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800200e:	43db      	mvns	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	8103      	strh	r3, [r0, #8]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002018:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800201a:	8c04      	ldrh	r4, [r0, #32]
 800201c:	f024 0401 	bic.w	r4, r4, #1
 8002020:	0424      	lsls	r4, r4, #16
 8002022:	0c24      	lsrs	r4, r4, #16
 8002024:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002026:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002028:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 800202a:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800202c:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002030:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002032:	432a      	orrs	r2, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002034:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002038:	ea42 1303 	orr.w	r3, r2, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800203c:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002040:	b29d      	uxth	r5, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002042:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002044:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8002046:	8401      	strh	r1, [r0, #32]
 8002048:	bd30      	pop	{r4, r5, pc}

0800204a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800204a:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800204c:	8c04      	ldrh	r4, [r0, #32]
 800204e:	f024 0410 	bic.w	r4, r4, #16
 8002052:	0424      	lsls	r4, r4, #16
 8002054:	0c24      	lsrs	r4, r4, #16
 8002056:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002058:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800205a:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800205c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002060:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002062:	0524      	lsls	r4, r4, #20
 8002064:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002066:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800206a:	f045 0510 	orr.w	r5, r5, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800206e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002072:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002076:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800207a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800207c:	b28d      	uxth	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800207e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002080:	8405      	strh	r5, [r0, #32]
 8002082:	bd30      	pop	{r4, r5, pc}

08002084 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002084:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <TIM_DeInit+0x120>)
 8002088:	4298      	cmp	r0, r3
 800208a:	d105      	bne.n	8002098 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800208c:	2001      	movs	r0, #1
 800208e:	4601      	mov	r1, r0
 8002090:	f7ff fd84 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002094:	2001      	movs	r0, #1
 8002096:	e03d      	b.n	8002114 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8002098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800209c:	d105      	bne.n	80020aa <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800209e:	2001      	movs	r0, #1
 80020a0:	4601      	mov	r1, r0
 80020a2:	f7ff fd6f 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80020a6:	2001      	movs	r0, #1
 80020a8:	e076      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <TIM_DeInit+0x124>)
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d105      	bne.n	80020bc <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80020b0:	2002      	movs	r0, #2
 80020b2:	2101      	movs	r1, #1
 80020b4:	f7ff fd66 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80020b8:	2002      	movs	r0, #2
 80020ba:	e06d      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <TIM_DeInit+0x128>)
 80020be:	4298      	cmp	r0, r3
 80020c0:	d105      	bne.n	80020ce <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80020c2:	2004      	movs	r0, #4
 80020c4:	2101      	movs	r1, #1
 80020c6:	f7ff fd5d 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80020ca:	2004      	movs	r0, #4
 80020cc:	e064      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <TIM_DeInit+0x12c>)
 80020d0:	4298      	cmp	r0, r3
 80020d2:	d105      	bne.n	80020e0 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80020d4:	2008      	movs	r0, #8
 80020d6:	2101      	movs	r1, #1
 80020d8:	f7ff fd54 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80020dc:	2008      	movs	r0, #8
 80020de:	e05b      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <TIM_DeInit+0x130>)
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d105      	bne.n	80020f2 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80020e6:	2010      	movs	r0, #16
 80020e8:	2101      	movs	r1, #1
 80020ea:	f7ff fd4b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80020ee:	2010      	movs	r0, #16
 80020f0:	e052      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <TIM_DeInit+0x134>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d105      	bne.n	8002104 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80020f8:	2020      	movs	r0, #32
 80020fa:	2101      	movs	r1, #1
 80020fc:	f7ff fd42 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002100:	2020      	movs	r0, #32
 8002102:	e049      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <TIM_DeInit+0x138>)
 8002106:	4298      	cmp	r0, r3
 8002108:	d109      	bne.n	800211e <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800210a:	2002      	movs	r0, #2
 800210c:	2101      	movs	r1, #1
 800210e:	f7ff fd45 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002112:	2002      	movs	r0, #2
 8002114:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800211a:	f7ff bd3f 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <TIM_DeInit+0x13c>)
 8002120:	4298      	cmp	r0, r3
 8002122:	d107      	bne.n	8002134 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002124:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002128:	2101      	movs	r1, #1
 800212a:	f7ff fd37 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800212e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002132:	e7ef      	b.n	8002114 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <TIM_DeInit+0x140>)
 8002136:	4298      	cmp	r0, r3
 8002138:	d107      	bne.n	800214a <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800213a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800213e:	2101      	movs	r1, #1
 8002140:	f7ff fd2c 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002144:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002148:	e7e4      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <TIM_DeInit+0x144>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d107      	bne.n	8002160 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002154:	2101      	movs	r1, #1
 8002156:	f7ff fd21 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800215a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800215e:	e7d9      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <TIM_DeInit+0x148>)
 8002162:	4298      	cmp	r0, r3
 8002164:	d105      	bne.n	8002172 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002166:	2040      	movs	r0, #64	; 0x40
 8002168:	2101      	movs	r1, #1
 800216a:	f7ff fd0b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800216e:	2040      	movs	r0, #64	; 0x40
 8002170:	e012      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <TIM_DeInit+0x14c>)
 8002174:	4298      	cmp	r0, r3
 8002176:	d105      	bne.n	8002184 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002178:	2080      	movs	r0, #128	; 0x80
 800217a:	2101      	movs	r1, #1
 800217c:	f7ff fd02 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002180:	2080      	movs	r0, #128	; 0x80
 8002182:	e009      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <TIM_DeInit+0x150>)
 8002186:	4298      	cmp	r0, r3
 8002188:	d10b      	bne.n	80021a2 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800218a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800218e:	2101      	movs	r1, #1
 8002190:	f7ff fcf8 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002194:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002198:	2100      	movs	r1, #0
    }   
  }
}
 800219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800219e:	f7ff bcf1 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80021a2:	bd08      	pop	{r3, pc}
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40001000 	.word	0x40001000
 80021b8:	40001400 	.word	0x40001400
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800
 80021cc:	40001800 	.word	0x40001800
 80021d0:	40001c00 	.word	0x40001c00
 80021d4:	40002000 	.word	0x40002000

080021d8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021da:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021dc:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021de:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021e0:	d012      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d00e      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ee:	d00b      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80021f0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80021f4:	4290      	cmp	r0, r2
 80021f6:	d007      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d003      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002204:	4290      	cmp	r0, r2
 8002206:	d103      	bne.n	8002210 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002208:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800220e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <TIM_TimeBaseInit+0x78>)
 8002212:	4290      	cmp	r0, r2
 8002214:	d008      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
 8002216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221a:	4290      	cmp	r0, r2
 800221c:	d004      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002222:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002224:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002226:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002228:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800222a:	684b      	ldr	r3, [r1, #4]
 800222c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800222e:	880b      	ldrh	r3, [r1, #0]
 8002230:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <TIM_TimeBaseInit+0x74>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d003      	beq.n	8002240 <TIM_TimeBaseInit+0x68>
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	4298      	cmp	r0, r3
 800223e:	d101      	bne.n	8002244 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002240:	7a8b      	ldrb	r3, [r1, #10]
 8002242:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002244:	2301      	movs	r3, #1
 8002246:	8283      	strh	r3, [r0, #20]
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40001000 	.word	0x40001000

08002254 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002258:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800225a:	2300      	movs	r3, #0
 800225c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800225e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002260:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002262:	7283      	strb	r3, [r0, #10]
 8002264:	4770      	bx	lr

08002266 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002266:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002268:	8282      	strh	r2, [r0, #20]
 800226a:	4770      	bx	lr

0800226c <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800226c:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002276:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002278:	8001      	strh	r1, [r0, #0]
 800227a:	4770      	bx	lr

0800227c <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800227c:	6241      	str	r1, [r0, #36]	; 0x24
 800227e:	4770      	bx	lr

08002280 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002280:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002282:	4770      	bx	lr

08002284 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002284:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002286:	4770      	bx	lr

08002288 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002288:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800228a:	b280      	uxth	r0, r0
 800228c:	4770      	bx	lr

0800228e <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800228e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002290:	b119      	cbz	r1, 800229a <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002292:	b29b      	uxth	r3, r3
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	e003      	b.n	80022a2 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800229a:	f023 0302 	bic.w	r3, r3, #2
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	8003      	strh	r3, [r0, #0]
 80022a4:	4770      	bx	lr

080022a6 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022a6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80022a8:	b119      	cbz	r1, 80022b2 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	e003      	b.n	80022ba <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	8003      	strh	r3, [r0, #0]
 80022bc:	4770      	bx	lr

080022be <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022be:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022c0:	b119      	cbz	r1, 80022ca <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	e003      	b.n	80022d2 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80022ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	8003      	strh	r3, [r0, #0]
 80022d4:	4770      	bx	lr

080022d6 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80022d6:	8803      	ldrh	r3, [r0, #0]
 80022d8:	f023 0308 	bic.w	r3, r3, #8
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80022e2:	8803      	ldrh	r3, [r0, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4319      	orrs	r1, r3
 80022e8:	8001      	strh	r1, [r0, #0]
 80022ea:	4770      	bx	lr

080022ec <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80022ec:	8803      	ldrh	r3, [r0, #0]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80022f8:	8803      	ldrh	r3, [r0, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4319      	orrs	r1, r3
 80022fe:	8001      	strh	r1, [r0, #0]
 8002300:	4770      	bx	lr

08002302 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002302:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002304:	b119      	cbz	r1, 800230e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002306:	b29b      	uxth	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	e003      	b.n	8002316 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	8003      	strh	r3, [r0, #0]
 8002318:	4770      	bx	lr

0800231a <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800231a:	8c03      	ldrh	r3, [r0, #32]
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002326:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002328:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800232c:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800232e:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002330:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002332:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002336:	0412      	lsls	r2, r2, #16
 8002338:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800233a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800233c:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002344:	4335      	orrs	r5, r6
 8002346:	b2ad      	uxth	r5, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002348:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800234a:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800234c:	4d0e      	ldr	r5, [pc, #56]	; (8002388 <TIM_OC1Init+0x6e>)
 800234e:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002352:	d003      	beq.n	800235c <TIM_OC1Init+0x42>
 8002354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002358:	42a8      	cmp	r0, r5
 800235a:	d10e      	bne.n	800237a <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800235c:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800235e:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002360:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002364:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002366:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002368:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800236c:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800236e:	8a0d      	ldrh	r5, [r1, #16]
 8002370:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002372:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002376:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002378:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800237c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800237e:	688a      	ldr	r2, [r1, #8]
 8002380:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	8403      	strh	r3, [r0, #32]
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000

0800238c <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800238c:	8c03      	ldrh	r3, [r0, #32]
 800238e:	f023 0310 	bic.w	r3, r3, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002398:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239a:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800239c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023a0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80023a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80023a6:	0424      	lsls	r4, r4, #16
 80023a8:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023aa:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b2:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b4:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b6:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023bc:	884d      	ldrh	r5, [r1, #2]
 80023be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023c2:	4d13      	ldr	r5, [pc, #76]	; (8002410 <TIM_OC2Init+0x84>)
 80023c4:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c6:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023c8:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023ca:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023cc:	d003      	beq.n	80023d6 <TIM_OC2Init+0x4a>
 80023ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023d2:	42a8      	cmp	r0, r5
 80023d4:	d115      	bne.n	8002402 <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023d6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80023d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023dc:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80023e2:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 80023e6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023e8:	888b      	ldrh	r3, [r1, #4]
 80023ea:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023ee:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80023f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023f4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80023f8:	8a4d      	ldrh	r5, [r1, #18]
 80023fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023fe:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002400:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002402:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002404:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002406:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002408:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	8403      	strh	r3, [r0, #32]
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002414:	8c03      	ldrh	r3, [r0, #32]
 8002416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002422:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002424:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800242a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800242e:	0424      	lsls	r4, r4, #16
 8002430:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002432:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002436:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002438:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243a:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800243c:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002442:	884d      	ldrh	r5, [r1, #2]
 8002444:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002448:	4d12      	ldr	r5, [pc, #72]	; (8002494 <TIM_OC3Init+0x80>)
 800244a:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800244e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002450:	d003      	beq.n	800245a <TIM_OC3Init+0x46>
 8002452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002456:	42a8      	cmp	r0, r5
 8002458:	d115      	bne.n	8002486 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800245a:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800245c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002460:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002462:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002466:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800246a:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800246c:	888b      	ldrh	r3, [r1, #4]
 800246e:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002472:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002474:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002478:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800247c:	8a4d      	ldrh	r5, [r1, #18]
 800247e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002482:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002484:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002486:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002488:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248a:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800248c:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248e:	8403      	strh	r3, [r0, #32]
 8002490:	bd30      	pop	{r4, r5, pc}
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000

08002498 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002498:	8c03      	ldrh	r3, [r0, #32]
 800249a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a4:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024a6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024aa:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ac:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80024ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80024b2:	0412      	lsls	r2, r2, #16
 80024b4:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024be:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c0:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024c2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024c8:	884d      	ldrh	r5, [r1, #2]
 80024ca:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024ce:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <TIM_OC4Init+0x64>)
 80024d0:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d2:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024d4:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024d6:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024d8:	d003      	beq.n	80024e2 <TIM_OC4Init+0x4a>
 80024da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024de:	42a8      	cmp	r0, r5
 80024e0:	d105      	bne.n	80024ee <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e2:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80024e4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80024ec:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024f0:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80024f2:	688a      	ldr	r2, [r1, #8]
 80024f4:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f6:	8403      	strh	r3, [r0, #32]
 80024f8:	bd30      	pop	{r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000

08002500 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002500:	2300      	movs	r3, #0
 8002502:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002504:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002506:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002508:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800250a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800250c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800250e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002510:	8243      	strh	r3, [r0, #18]
 8002512:	4770      	bx	lr

08002514 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002514:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002516:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002518:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251a:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800251c:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251e:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002522:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002526:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002528:	b109      	cbz	r1, 800252e <TIM_SelectOCxM+0x1a>
 800252a:	2908      	cmp	r1, #8
 800252c:	d107      	bne.n	800253e <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 800252e:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002530:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8002534:	58cc      	ldr	r4, [r1, r3]
 8002536:	4020      	ands	r0, r4
 8002538:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800253a:	58c8      	ldr	r0, [r1, r3]
 800253c:	e00a      	b.n	8002554 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800253e:	3904      	subs	r1, #4
 8002540:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002544:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8002548:	58cc      	ldr	r4, [r1, r3]
 800254a:	4020      	ands	r0, r4
 800254c:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	58c8      	ldr	r0, [r1, r3]
 8002552:	b292      	uxth	r2, r2
 8002554:	4302      	orrs	r2, r0
 8002556:	50ca      	str	r2, [r1, r3]
 8002558:	bd30      	pop	{r4, r5, pc}

0800255a <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800255a:	6341      	str	r1, [r0, #52]	; 0x34
 800255c:	4770      	bx	lr

0800255e <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800255e:	6381      	str	r1, [r0, #56]	; 0x38
 8002560:	4770      	bx	lr

08002562 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002562:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002564:	4770      	bx	lr

08002566 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002566:	6401      	str	r1, [r0, #64]	; 0x40
 8002568:	4770      	bx	lr

0800256a <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800256a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002574:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002576:	8301      	strh	r1, [r0, #24]
 8002578:	4770      	bx	lr

0800257a <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800257a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002584:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002588:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800258a:	8303      	strh	r3, [r0, #24]
 800258c:	4770      	bx	lr

0800258e <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800258e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002598:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800259a:	8381      	strh	r1, [r0, #28]
 800259c:	4770      	bx	lr

0800259e <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800259e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80025a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025ac:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ae:	8383      	strh	r3, [r0, #28]
 80025b0:	4770      	bx	lr

080025b2 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025b2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80025b4:	f023 0308 	bic.w	r3, r3, #8
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80025bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025be:	8301      	strh	r1, [r0, #24]
 80025c0:	4770      	bx	lr

080025c2 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025c2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80025c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80025cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025d0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	8303      	strh	r3, [r0, #24]
 80025d4:	4770      	bx	lr

080025d6 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025d6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80025d8:	f023 0308 	bic.w	r3, r3, #8
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80025e0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025e2:	8381      	strh	r1, [r0, #28]
 80025e4:	4770      	bx	lr

080025e6 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025e6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80025e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80025f0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025f4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025f6:	8383      	strh	r3, [r0, #28]
 80025f8:	4770      	bx	lr

080025fa <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002604:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002606:	8301      	strh	r1, [r0, #24]
 8002608:	4770      	bx	lr

0800260a <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800260a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800260c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002614:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002618:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800261a:	8303      	strh	r3, [r0, #24]
 800261c:	4770      	bx	lr

0800261e <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800261e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002628:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800262a:	8381      	strh	r1, [r0, #28]
 800262c:	4770      	bx	lr

0800262e <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800262e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002638:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800263c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800263e:	8383      	strh	r3, [r0, #28]
 8002640:	4770      	bx	lr

08002642 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002642:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800264c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800264e:	8301      	strh	r1, [r0, #24]
 8002650:	4770      	bx	lr

08002652 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002652:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002654:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002658:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800265c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800265e:	8303      	strh	r3, [r0, #24]
 8002660:	4770      	bx	lr

08002662 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002662:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800266c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800266e:	8381      	strh	r1, [r0, #28]
 8002670:	4770      	bx	lr

08002672 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002672:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002674:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002678:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800267c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800267e:	8383      	strh	r3, [r0, #28]
 8002680:	4770      	bx	lr

08002682 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002682:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002684:	f023 0302 	bic.w	r3, r3, #2
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800268c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800268e:	8401      	strh	r1, [r0, #32]
 8002690:	4770      	bx	lr

08002692 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002692:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002694:	f023 0308 	bic.w	r3, r3, #8
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 800269c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800269e:	8401      	strh	r1, [r0, #32]
 80026a0:	4770      	bx	lr

080026a2 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026a2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80026a4:	f023 0320 	bic.w	r3, r3, #32
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80026ac:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026b0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026b2:	8403      	strh	r3, [r0, #32]
 80026b4:	4770      	bx	lr

080026b6 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80026b6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80026b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80026c0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026c4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026c6:	8403      	strh	r3, [r0, #32]
 80026c8:	4770      	bx	lr

080026ca <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026ca:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80026cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80026d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026d8:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026da:	8403      	strh	r3, [r0, #32]
 80026dc:	4770      	bx	lr

080026de <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80026de:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80026e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80026e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026ec:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026ee:	8403      	strh	r3, [r0, #32]
 80026f0:	4770      	bx	lr

080026f2 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026f2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80026fc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8002700:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002702:	8403      	strh	r3, [r0, #32]
 8002704:	4770      	bx	lr

08002706 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002706:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002708:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270a:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800270c:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002710:	ea24 0303 	bic.w	r3, r4, r3
 8002714:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002716:	8c03      	ldrh	r3, [r0, #32]
 8002718:	408a      	lsls	r2, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	8403      	strh	r3, [r0, #32]
 8002720:	bd10      	pop	{r4, pc}

08002722 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002722:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002724:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002726:	2304      	movs	r3, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002728:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800272a:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800272c:	ea24 0303 	bic.w	r3, r4, r3
 8002730:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002732:	8c03      	ldrh	r3, [r0, #32]
 8002734:	408a      	lsls	r2, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	8403      	strh	r3, [r0, #32]
 800273c:	bd10      	pop	{r4, pc}

0800273e <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800273e:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002740:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002742:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002744:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002746:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002748:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800274a:	8103      	strh	r3, [r0, #8]
 800274c:	4770      	bx	lr

0800274e <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800274e:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002750:	4770      	bx	lr

08002752 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002752:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002754:	4770      	bx	lr

08002756 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002756:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002758:	4770      	bx	lr

0800275a <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800275a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800275c:	4770      	bx	lr

0800275e <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800275e:	8b03      	ldrh	r3, [r0, #24]
 8002760:	f023 030c 	bic.w	r3, r3, #12
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800276a:	8b03      	ldrh	r3, [r0, #24]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4319      	orrs	r1, r3
 8002770:	8301      	strh	r1, [r0, #24]
 8002772:	4770      	bx	lr

08002774 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002774:	8b03      	ldrh	r3, [r0, #24]
 8002776:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002780:	8b03      	ldrh	r3, [r0, #24]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002788:	b28b      	uxth	r3, r1
 800278a:	8303      	strh	r3, [r0, #24]
 800278c:	4770      	bx	lr

0800278e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002792:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002794:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002796:	f8b4 e000 	ldrh.w	lr, [r4]
 800279a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800279c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800279e:	2900      	cmp	r1, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2702      	moveq	r7, #2
 80027a4:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2601      	movne	r6, #1
 80027ac:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027ae:	f1be 0f00 	cmp.w	lr, #0
 80027b2:	d110      	bne.n	80027d6 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027b4:	f7ff fc30 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027b8:	4628      	mov	r0, r5
 80027ba:	88e1      	ldrh	r1, [r4, #6]
 80027bc:	f7ff ffcf 	bl	800275e <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027c0:	4628      	mov	r0, r5
 80027c2:	4639      	mov	r1, r7
 80027c4:	4632      	mov	r2, r6
 80027c6:	8923      	ldrh	r3, [r4, #8]
 80027c8:	f7ff fc3f 	bl	800204a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027cc:	88e1      	ldrh	r1, [r4, #6]
 80027ce:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d4:	e7ce      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027d6:	f7ff fc38 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027da:	4628      	mov	r0, r5
 80027dc:	88e1      	ldrh	r1, [r4, #6]
 80027de:	f7ff ffc9 	bl	8002774 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027e2:	4628      	mov	r0, r5
 80027e4:	4639      	mov	r1, r7
 80027e6:	4632      	mov	r2, r6
 80027e8:	8923      	ldrh	r3, [r4, #8]
 80027ea:	f7ff fc15 	bl	8002018 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027ee:	88e1      	ldrh	r1, [r4, #6]
 80027f0:	4628      	mov	r0, r5
  }
}
 80027f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027f6:	e7b2      	b.n	800275e <TIM_SetIC1Prescaler>

080027f8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80027f8:	8b83      	ldrh	r3, [r0, #28]
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002804:	8b83      	ldrh	r3, [r0, #28]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4319      	orrs	r1, r3
 800280a:	8381      	strh	r1, [r0, #28]
 800280c:	4770      	bx	lr

0800280e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800280e:	8b83      	ldrh	r3, [r0, #28]
 8002810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800281a:	8b83      	ldrh	r3, [r0, #28]
 800281c:	b29b      	uxth	r3, r3
 800281e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002822:	b28b      	uxth	r3, r1
 8002824:	8383      	strh	r3, [r0, #28]
 8002826:	4770      	bx	lr

08002828 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800282c:	880b      	ldrh	r3, [r1, #0]
 800282e:	88aa      	ldrh	r2, [r5, #4]
 8002830:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002832:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002834:	b93b      	cbnz	r3, 8002846 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002836:	892b      	ldrh	r3, [r5, #8]
 8002838:	f7ff fbee 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800283c:	88e9      	ldrh	r1, [r5, #6]
 800283e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002844:	e78b      	b.n	800275e <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800284a:	892b      	ldrh	r3, [r5, #8]
 800284c:	f7ff fbfd 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002850:	88e9      	ldrh	r1, [r5, #6]
 8002852:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002858:	e78c      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800285a:	2b08      	cmp	r3, #8
 800285c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002860:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002862:	d11d      	bne.n	80028a0 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002864:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002868:	043f      	lsls	r7, r7, #16
 800286a:	0c3f      	lsrs	r7, r7, #16
 800286c:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800286e:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002870:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8002872:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8002874:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002876:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800287a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800287e:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002882:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002886:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800288a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800288c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002890:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002894:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002896:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002898:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800289e:	e7ab      	b.n	80027f8 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80028a0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80028a4:	043f      	lsls	r7, r7, #16
 80028a6:	0c3f      	lsrs	r7, r7, #16
 80028a8:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028aa:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80028ac:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ae:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028b6:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b8:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ba:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028bc:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80028be:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028c2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028c6:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028ca:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028cc:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028ce:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028d4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80028d6:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80028d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028dc:	e797      	b.n	800280e <TIM_SetIC4Prescaler>

080028de <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80028de:	884a      	ldrh	r2, [r1, #2]
 80028e0:	880b      	ldrh	r3, [r1, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	888a      	ldrh	r2, [r1, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	88ca      	ldrh	r2, [r1, #6]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	890a      	ldrh	r2, [r1, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	894a      	ldrh	r2, [r1, #10]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	898a      	ldrh	r2, [r1, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80028fe:	4770      	bx	lr

08002900 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002900:	2300      	movs	r3, #0
 8002902:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002904:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002906:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002908:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800290a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800290c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800290e:	8183      	strh	r3, [r0, #12]
 8002910:	4770      	bx	lr

08002912 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002912:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002916:	b129      	cbz	r1, 8002924 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002920:	b29b      	uxth	r3, r3
 8002922:	e001      	b.n	8002928 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002928:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800292c:	4770      	bx	lr

0800292e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800292e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002930:	b119      	cbz	r1, 800293a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	e003      	b.n	8002942 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	8083      	strh	r3, [r0, #4]
 8002944:	4770      	bx	lr

08002946 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002946:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002948:	b119      	cbz	r1, 8002952 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800294a:	b29b      	uxth	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	e003      	b.n	800295a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	8083      	strh	r3, [r0, #4]
 800295c:	4770      	bx	lr

0800295e <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800295e:	8983      	ldrh	r3, [r0, #12]
 8002960:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002962:	b10a      	cbz	r2, 8002968 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002964:	4319      	orrs	r1, r3
 8002966:	e001      	b.n	800296c <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002968:	ea23 0101 	bic.w	r1, r3, r1
 800296c:	8181      	strh	r1, [r0, #12]
 800296e:	4770      	bx	lr

08002970 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002970:	8281      	strh	r1, [r0, #20]
 8002972:	4770      	bx	lr

08002974 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002974:	8a03      	ldrh	r3, [r0, #16]
 8002976:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002978:	bf0c      	ite	eq
 800297a:	2000      	moveq	r0, #0
 800297c:	2001      	movne	r0, #1
 800297e:	4770      	bx	lr

08002980 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002980:	43c9      	mvns	r1, r1
 8002982:	b289      	uxth	r1, r1
 8002984:	8201      	strh	r1, [r0, #16]
 8002986:	4770      	bx	lr

08002988 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002988:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800298a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800298c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002990:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002992:	d003      	beq.n	800299c <TIM_GetITStatus+0x14>
 8002994:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002996:	bf0c      	ite	eq
 8002998:	2000      	moveq	r0, #0
 800299a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800299c:	4770      	bx	lr

0800299e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800299e:	43c9      	mvns	r1, r1
 80029a0:	b289      	uxth	r1, r1
 80029a2:	8201      	strh	r1, [r0, #16]
 80029a4:	4770      	bx	lr

080029a6 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80029a6:	430a      	orrs	r2, r1
 80029a8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80029ac:	4770      	bx	lr

080029ae <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029ae:	8983      	ldrh	r3, [r0, #12]
 80029b0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029b2:	b10a      	cbz	r2, 80029b8 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029b4:	4319      	orrs	r1, r3
 80029b6:	e001      	b.n	80029bc <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80029b8:	ea23 0101 	bic.w	r1, r3, r1
 80029bc:	8181      	strh	r1, [r0, #12]
 80029be:	4770      	bx	lr

080029c0 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029c2:	b119      	cbz	r1, 80029cc <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	e003      	b.n	80029d4 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80029cc:	f023 0308 	bic.w	r3, r3, #8
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	8083      	strh	r3, [r0, #4]
 80029d6:	4770      	bx	lr

080029d8 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80029d8:	8903      	ldrh	r3, [r0, #8]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	8103      	strh	r3, [r0, #8]
 80029e4:	4770      	bx	lr

080029e6 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e6:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029f0:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f2:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80029f4:	8903      	ldrh	r3, [r0, #8]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	8103      	strh	r3, [r0, #8]
 80029fe:	4770      	bx	lr

08002a00 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a04:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a06:	4611      	mov	r1, r2
 8002a08:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a0a:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a0e:	d102      	bne.n	8002a16 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a10:	f7ff fb1b 	bl	800204a <TI2_Config>
 8002a14:	e001      	b.n	8002a1a <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a16:	f7ff faff 	bl	8002018 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1a:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a24:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	8123      	strh	r3, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002a28:	8923      	ldrh	r3, [r4, #8]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	8123      	strh	r3, [r4, #8]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}

08002a34 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a3e:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a40:	8101      	strh	r1, [r0, #8]
 8002a42:	4770      	bx	lr

08002a44 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002a44:	8883      	ldrh	r3, [r0, #4]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002a50:	8883      	ldrh	r3, [r0, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4319      	orrs	r1, r3
 8002a56:	8081      	strh	r1, [r0, #4]
 8002a58:	4770      	bx	lr

08002a5a <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002a5a:	8903      	ldrh	r3, [r0, #8]
 8002a5c:	f023 0307 	bic.w	r3, r3, #7
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002a66:	8903      	ldrh	r3, [r0, #8]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	8101      	strh	r1, [r0, #8]
 8002a6e:	4770      	bx	lr

08002a70 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002a70:	8903      	ldrh	r3, [r0, #8]
 8002a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002a7c:	8903      	ldrh	r3, [r0, #8]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4319      	orrs	r1, r3
 8002a82:	8101      	strh	r1, [r0, #8]
 8002a84:	4770      	bx	lr

08002a86 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a86:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002a88:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002a8a:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002a8c:	4321      	orrs	r1, r4
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002a94:	b29c      	uxth	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	8104      	strh	r4, [r0, #8]
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a9e:	f7ff fff2 	bl	8002a86 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002aa2:	8923      	ldrh	r3, [r4, #8]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aaa:	8123      	strh	r3, [r4, #8]
 8002aac:	bd10      	pop	{r4, pc}

08002aae <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002ab2:	f7ff ffe8 	bl	8002a86 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab6:	8923      	ldrh	r3, [r4, #8]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002ab8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8002ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	8123      	strh	r3, [r4, #8]
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aca:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad0:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad4:	b2b6      	uxth	r6, r6
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad6:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002ada:	f026 0622 	bic.w	r6, r6, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ade:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae2:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002ae4:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ae6:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae8:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002aea:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002aec:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002af0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002af4:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002af6:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002afa:	b29e      	uxth	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b00:	8406      	strh	r6, [r0, #32]
 8002b02:	bd70      	pop	{r4, r5, r6, pc}

08002b04 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b04:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b06:	b119      	cbz	r1, 8002b10 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	e003      	b.n	8002b18 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	8083      	strh	r3, [r0, #4]
 8002b1a:	4770      	bx	lr

08002b1c <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002b1c:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002b24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <USART_DeInit+0x90>)
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	d105      	bne.n	8002b38 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002b2c:	2010      	movs	r0, #16
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f7ff f834 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002b34:	2010      	movs	r0, #16
 8002b36:	e037      	b.n	8002ba8 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <USART_DeInit+0x94>)
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d107      	bne.n	8002b4e <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002b3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b42:	2101      	movs	r1, #1
 8002b44:	f7ff f81e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002b48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b4c:	e009      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <USART_DeInit+0x98>)
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d10b      	bne.n	8002b6c <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002b54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b58:	2101      	movs	r1, #1
 8002b5a:	f7ff f813 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b62:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b68:	f7ff b80c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <USART_DeInit+0x9c>)
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	d107      	bne.n	8002b82 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b76:	2101      	movs	r1, #1
 8002b78:	f7ff f804 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002b7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b80:	e7ef      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <USART_DeInit+0xa0>)
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d107      	bne.n	8002b98 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	f7fe fff9 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002b92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b96:	e7e4      	b.n	8002b62 <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <USART_DeInit+0xa4>)
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	d109      	bne.n	8002bb2 <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b9e:	2020      	movs	r0, #32
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f7fe fffb 	bl	8001b9c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	2100      	movs	r1, #0
    }
  }
}
 8002baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002bae:	f7fe bff5 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
 8002bb2:	bd08      	pop	{r3, pc}
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004800 	.word	0x40004800
 8002bc0:	40004c00 	.word	0x40004c00
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40011400 	.word	0x40011400

08002bcc <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bcc:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002bce:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bd0:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bd6:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bd8:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bda:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bdc:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002bde:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be0:	8909      	ldrh	r1, [r1, #8]
 8002be2:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002be4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be8:	430a      	orrs	r2, r1
 8002bea:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bec:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf0:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf2:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf4:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf6:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002bfc:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002bfe:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002c00:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c06:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c08:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c0a:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c0c:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002c0e:	4668      	mov	r0, sp
 8002c10:	f7fe feea 	bl	80019e8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <USART_Init+0xb0>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d003      	beq.n	8002c22 <USART_Init+0x56>
 8002c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d101      	bne.n	8002c26 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	e000      	b.n	8002c28 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002c26:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c28:	89a2      	ldrh	r2, [r4, #12]
 8002c2a:	b212      	sxth	r2, r2
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	682a      	ldr	r2, [r5, #0]
 8002c30:	f04f 0119 	mov.w	r1, #25
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c34:	bfb4      	ite	lt
 8002c36:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c38:	0092      	lslge	r2, r2, #2
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c3a:	4359      	muls	r1, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c3c:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002c40:	2364      	movs	r3, #100	; 0x64
 8002c42:	fbb1 f2f3 	udiv	r2, r1, r3
 8002c46:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002c48:	0910      	lsrs	r0, r2, #4
 8002c4a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c4e:	89a0      	ldrh	r0, [r4, #12]
 8002c50:	b200      	sxth	r0, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	da06      	bge.n	8002c64 <USART_Init+0x98>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002c56:	00c9      	lsls	r1, r1, #3
 8002c58:	3132      	adds	r1, #50	; 0x32
 8002c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	e005      	b.n	8002c70 <USART_Init+0xa4>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002c64:	0109      	lsls	r1, r1, #4
 8002c66:	3132      	adds	r1, #50	; 0x32
 8002c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002c72:	b292      	uxth	r2, r2
 8002c74:	8122      	strh	r2, [r4, #8]
}
 8002c76:	b005      	add	sp, #20
 8002c78:	bd30      	pop	{r4, r5, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40011000 	.word	0x40011000

08002c80 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002c80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c84:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c86:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002c8c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002c8e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c90:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002c92:	8183      	strh	r3, [r0, #12]
 8002c94:	4770      	bx	lr

08002c96 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c96:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c98:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002c9a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c9c:	884c      	ldrh	r4, [r1, #2]
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	888c      	ldrh	r4, [r1, #4]
 8002ca2:	88c9      	ldrh	r1, [r1, #6]
 8002ca4:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002ca6:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ca8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002caa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002cae:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	8203      	strh	r3, [r0, #16]
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002cba:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002cbc:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002cbe:	80c3      	strh	r3, [r0, #6]
 8002cc0:	4770      	bx	lr

08002cc2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cc4:	b119      	cbz	r1, 8002cce <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ccc:	e003      	b.n	8002cd6 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	8183      	strh	r3, [r0, #12]
 8002cd8:	4770      	bx	lr

08002cda <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002cda:	8b03      	ldrh	r3, [r0, #24]
 8002cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ce0:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002ce2:	8b03      	ldrh	r3, [r0, #24]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4319      	orrs	r1, r3
 8002ce8:	8301      	strh	r1, [r0, #24]
 8002cea:	4770      	bx	lr

08002cec <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cec:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cee:	b129      	cbz	r1, 8002cfc <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	e001      	b.n	8002d00 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d00:	8183      	strh	r3, [r0, #12]
 8002d02:	4770      	bx	lr

08002d04 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d04:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d06:	b119      	cbz	r1, 8002d10 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0e:	e003      	b.n	8002d18 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	8283      	strh	r3, [r0, #20]
 8002d1a:	4770      	bx	lr

08002d1c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002d1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d20:	8081      	strh	r1, [r0, #4]
 8002d22:	4770      	bx	lr

08002d24 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002d24:	8880      	ldrh	r0, [r0, #4]
}
 8002d26:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002d2a:	4770      	bx	lr

08002d2c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002d2c:	8a03      	ldrh	r3, [r0, #16]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002d38:	8a03      	ldrh	r3, [r0, #16]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	8201      	strh	r1, [r0, #16]
 8002d40:	4770      	bx	lr

08002d42 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d42:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002d44:	b119      	cbz	r1, 8002d4e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	e003      	b.n	8002d56 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002d4e:	f023 0302 	bic.w	r3, r3, #2
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	8183      	strh	r3, [r0, #12]
 8002d58:	4770      	bx	lr

08002d5a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002d5a:	8983      	ldrh	r3, [r0, #12]
 8002d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002d66:	8983      	ldrh	r3, [r0, #12]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4319      	orrs	r1, r3
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	4770      	bx	lr

08002d70 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002d70:	8a03      	ldrh	r3, [r0, #16]
 8002d72:	f023 0320 	bic.w	r3, r3, #32
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002d7c:	8a03      	ldrh	r3, [r0, #16]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4319      	orrs	r1, r3
 8002d82:	8201      	strh	r1, [r0, #16]
 8002d84:	4770      	bx	lr

08002d86 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d86:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d88:	b119      	cbz	r1, 8002d92 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	e003      	b.n	8002d9a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	8203      	strh	r3, [r0, #16]
 8002d9c:	4770      	bx	lr

08002d9e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002d9e:	8983      	ldrh	r3, [r0, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	8183      	strh	r3, [r0, #12]
 8002da8:	4770      	bx	lr

08002daa <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002daa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002dac:	b119      	cbz	r1, 8002db6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	e003      	b.n	8002dbe <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002db6:	f023 0308 	bic.w	r3, r3, #8
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	8283      	strh	r3, [r0, #20]
 8002dc0:	4770      	bx	lr

08002dc2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002dc2:	8b03      	ldrh	r3, [r0, #24]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002dc8:	8b03      	ldrh	r3, [r0, #24]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002dd0:	8301      	strh	r1, [r0, #24]
 8002dd2:	4770      	bx	lr

08002dd4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dd6:	b119      	cbz	r1, 8002de0 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	e003      	b.n	8002de8 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002de0:	f023 0320 	bic.w	r3, r3, #32
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	8283      	strh	r3, [r0, #20]
 8002dea:	4770      	bx	lr

08002dec <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002dec:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dee:	b119      	cbz	r1, 8002df8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	e003      	b.n	8002e00 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8283      	strh	r3, [r0, #20]
 8002e02:	4770      	bx	lr

08002e04 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002e04:	8a83      	ldrh	r3, [r0, #20]
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002e10:	8a83      	ldrh	r3, [r0, #20]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4319      	orrs	r1, r3
 8002e16:	8281      	strh	r1, [r0, #20]
 8002e18:	4770      	bx	lr

08002e1a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002e1c:	b119      	cbz	r1, 8002e26 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	e003      	b.n	8002e2e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	8283      	strh	r3, [r0, #20]
 8002e30:	4770      	bx	lr

08002e32 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e32:	8a83      	ldrh	r3, [r0, #20]
 8002e34:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002e36:	b10a      	cbz	r2, 8002e3c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e38:	4319      	orrs	r1, r3
 8002e3a:	e001      	b.n	8002e40 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002e3c:	ea23 0101 	bic.w	r1, r3, r1
 8002e40:	8281      	strh	r1, [r0, #20]
 8002e42:	4770      	bx	lr

08002e44 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e44:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002e48:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e4a:	2401      	movs	r4, #1
 8002e4c:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e50:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e52:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e56:	d101      	bne.n	8002e5c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002e58:	300c      	adds	r0, #12
 8002e5a:	e003      	b.n	8002e64 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002e5c:	2b02      	cmp	r3, #2
  {
    usartxbase += 0x10;
 8002e5e:	bf0c      	ite	eq
 8002e60:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002e62:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e64:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002e66:	b10a      	cbz	r2, 8002e6c <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e68:	4319      	orrs	r1, r3
 8002e6a:	e001      	b.n	8002e70 <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002e6c:	ea23 0101 	bic.w	r1, r3, r1
 8002e70:	6001      	str	r1, [r0, #0]
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002e74:	8803      	ldrh	r3, [r0, #0]
 8002e76:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002e78:	bf0c      	ite	eq
 8002e7a:	2000      	moveq	r0, #0
 8002e7c:	2001      	movne	r0, #1
 8002e7e:	4770      	bx	lr

08002e80 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e80:	43c9      	mvns	r1, r1
 8002e82:	b289      	uxth	r1, r1
 8002e84:	8001      	strh	r1, [r0, #0]
 8002e86:	4770      	bx	lr

08002e88 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e88:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e8a:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e8e:	f001 031f 	and.w	r3, r1, #31
 8002e92:	2201      	movs	r2, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e94:	2c01      	cmp	r4, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e96:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e9a:	d101      	bne.n	8002ea0 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8002e9c:	8983      	ldrh	r3, [r0, #12]
 8002e9e:	e003      	b.n	8002ea8 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002ea0:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002ea2:	bf0c      	ite	eq
 8002ea4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002ea6:	8a83      	ldrhne	r3, [r0, #20]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002eac:	8802      	ldrh	r2, [r0, #0]
 8002eae:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eb0:	b143      	cbz	r3, 8002ec4 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	0a09      	lsrs	r1, r1, #8
 8002eb6:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eba:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2000      	moveq	r0, #0
 8002ec0:	2001      	movne	r0, #1
 8002ec2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002ec4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002ec8:	0a09      	lsrs	r1, r1, #8
 8002eca:	2301      	movs	r3, #1
 8002ecc:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8003      	strh	r3, [r0, #0]
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	4770      	bx	lr

08002ede <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002ede:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_execve+0xe>)
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000168c 	.word	0x2000168c

08002ef0 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <_fork+0xc>)
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efa:	4770      	bx	lr
 8002efc:	2000168c 	.word	0x2000168c

08002f00 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f04:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	4770      	bx	lr

08002f0a <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	4770      	bx	lr

08002f0e <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d904      	bls.n	8002f1c <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <_isatty+0x12>)
 8002f14:	2209      	movs	r2, #9
 8002f16:	601a      	str	r2, [r3, #0]
		return 0;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f1c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f1e:	4770      	bx	lr
 8002f20:	2000168c 	.word	0x2000168c

08002f24 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_kill+0xc>)
 8002f26:	2216      	movs	r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2e:	4770      	bx	lr
 8002f30:	2000168c 	.word	0x2000168c

08002f34 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_link+0xc>)
 8002f36:	221f      	movs	r2, #31
 8002f38:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3e:	4770      	bx	lr
 8002f40:	2000168c 	.word	0x2000168c

08002f44 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr

08002f48 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f48:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f4a:	b138      	cbz	r0, 8002f5c <_read+0x14>
 8002f4c:	e00d      	b.n	8002f6a <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f4e:	881d      	ldrh	r5, [r3, #0]
 8002f50:	06ad      	lsls	r5, r5, #26
 8002f52:	d5fc      	bpl.n	8002f4e <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f54:	88a5      	ldrh	r5, [r4, #4]
 8002f56:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f58:	3001      	adds	r0, #1
 8002f5a:	e001      	b.n	8002f60 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <_read+0x30>)
 8002f5e:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f60:	4290      	cmp	r0, r2
 8002f62:	dbf4      	blt.n	8002f4e <_read+0x6>
 8002f64:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f68:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <_read+0x34>)
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	601a      	str	r2, [r3, #0]
				return -1;
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	40011000 	.word	0x40011000
 8002f7c:	2000168c 	.word	0x2000168c

08002f80 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f84:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	4770      	bx	lr

08002f8a <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8e:	4770      	bx	lr

08002f90 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <_unlink+0xc>)
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9a:	4770      	bx	lr
 8002f9c:	2000168c 	.word	0x2000168c

08002fa0 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <_wait+0xc>)
 8002fa2:	220a      	movs	r2, #10
 8002fa4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002faa:	4770      	bx	lr
 8002fac:	2000168c 	.word	0x2000168c

08002fb0 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fb0:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002fb2:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002fb4:	d009      	beq.n	8002fca <_write+0x1a>
 8002fb6:	2802      	cmp	r0, #2
 8002fb8:	d11a      	bne.n	8002ff0 <_write+0x40>
 8002fba:	e013      	b.n	8002fe4 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fbc:	8805      	ldrh	r5, [r0, #0]
 8002fbe:	066d      	lsls	r5, r5, #25
 8002fc0:	d5fc      	bpl.n	8002fbc <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc2:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fc4:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc6:	80a5      	strh	r5, [r4, #4]
 8002fc8:	e002      	b.n	8002fd0 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fca:	480d      	ldr	r0, [pc, #52]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fcc:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fce:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	dbf3      	blt.n	8002fbc <_write+0xc>
 8002fd4:	e011      	b.n	8002ffa <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fd6:	8805      	ldrh	r5, [r0, #0]
 8002fd8:	066d      	lsls	r5, r5, #25
 8002fda:	d5fc      	bpl.n	8002fd6 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fdc:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fde:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fe0:	80a5      	strh	r5, [r4, #4]
 8002fe2:	e002      	b.n	8002fea <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe4:	4806      	ldr	r0, [pc, #24]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fe6:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe8:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fea:	4293      	cmp	r3, r2
 8002fec:	dbf3      	blt.n	8002fd6 <_write+0x26>
 8002fee:	e004      	b.n	8002ffa <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <_write+0x54>)
 8002ff2:	2209      	movs	r2, #9
 8002ff4:	601a      	str	r2, [r3, #0]
				return -1;
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	bd30      	pop	{r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	40011000 	.word	0x40011000
 8003004:	2000168c 	.word	0x2000168c

08003008 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8003008:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <_sbrk+0x38>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	b90a      	cbnz	r2, 8003014 <_sbrk+0xc>
		heap_end = &_ebss;
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <_sbrk+0x3c>)
 8003012:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003014:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003016:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800301a:	1818      	adds	r0, r3, r0
 800301c:	4290      	cmp	r0, r2
 800301e:	d90a      	bls.n	8003036 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8003020:	2219      	movs	r2, #25
 8003022:	2002      	movs	r0, #2
 8003024:	4908      	ldr	r1, [pc, #32]	; (8003048 <_sbrk+0x40>)
 8003026:	f7ff ffc3 	bl	8002fb0 <_write>
		errno = ENOMEM;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x44>)
 800302c:	220c      	movs	r2, #12
 800302e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003034:	e001      	b.n	800303a <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8003036:	4a02      	ldr	r2, [pc, #8]	; (8003040 <_sbrk+0x38>)
 8003038:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 800303a:	4618      	mov	r0, r3
 800303c:	bd08      	pop	{r3, pc}
 800303e:	bf00      	nop
 8003040:	2000095c 	.word	0x2000095c
 8003044:	20001690 	.word	0x20001690
 8003048:	0800900d 	.word	0x0800900d
 800304c:	2000168c 	.word	0x2000168c

08003050 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8003050:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8003052:	2001      	movs	r0, #1
 8003054:	4902      	ldr	r1, [pc, #8]	; (8003060 <_exit+0x10>)
 8003056:	2204      	movs	r2, #4
 8003058:	f7ff ffaa 	bl	8002fb0 <_write>
 800305c:	e7fe      	b.n	800305c <_exit+0xc>
 800305e:	bf00      	nop
 8003060:	08009027 	.word	0x08009027
 8003064:	08009090 	.word	0x08009090
 8003068:	20000000 	.word	0x20000000
 800306c:	2000095c 	.word	0x2000095c
 8003070:	2000095c 	.word	0x2000095c
 8003074:	20001690 	.word	0x20001690

08003078 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003078:	4770      	bx	lr

0800307a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800307a:	e7fe      	b.n	800307a <HardFault_Handler>

0800307c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800307c:	e7fe      	b.n	800307c <MemManage_Handler>

0800307e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800307e:	e7fe      	b.n	800307e <BusFault_Handler>

08003080 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler>

08003082 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003082:	4770      	bx	lr

08003084 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003084:	4770      	bx	lr

08003086 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003086:	4770      	bx	lr

08003088 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <SystemInit+0xd4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800309c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80030a0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030a2:	492f      	ldr	r1, [pc, #188]	; (8003160 <SystemInit+0xd8>)
 80030a4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030a6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030aa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030ae:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030b0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030b2:	9200      	str	r2, [sp, #0]
 80030b4:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030bc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030c4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80030c6:	9a00      	ldr	r2, [sp, #0]
 80030c8:	3201      	adds	r2, #1
 80030ca:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030cc:	9a01      	ldr	r2, [sp, #4]
 80030ce:	b91a      	cbnz	r2, 80030d8 <SystemInit+0x50>
 80030d0:	9a00      	ldr	r2, [sp, #0]
 80030d2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80030d6:	d1f2      	bne.n	80030be <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <SystemInit+0xd4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80030e0:	bf18      	it	ne
 80030e2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030e4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d004      	beq.n	80030f6 <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <SystemInit+0xdc>)
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e02f      	b.n	8003156 <SystemInit+0xce>
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <SystemInit+0xd4>)
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <SystemInit+0xe0>)
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003108:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003114:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800311c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <SystemInit+0xe4>)
 8003120:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003128:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <SystemInit+0xd4>)
 800312e:	0189      	lsls	r1, r1, #6
 8003130:	d5fb      	bpl.n	800312a <SystemInit+0xa2>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <SystemInit+0xe8>)
 8003134:	f240 6105 	movw	r1, #1541	; 0x605
 8003138:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800313a:	6893      	ldr	r3, [r2, #8]
 800313c:	f023 0303 	bic.w	r3, r3, #3
 8003140:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003142:	6893      	ldr	r3, [r2, #8]
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800314a:	6893      	ldr	r3, [r2, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d1fa      	bne.n	800314a <SystemInit+0xc2>
 8003154:	e7ca      	b.n	80030ec <SystemInit+0x64>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8003156:	b002      	add	sp, #8
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	24003010 	.word	0x24003010
 8003164:	e000ed00 	.word	0xe000ed00
 8003168:	40007000 	.word	0x40007000
 800316c:	07405419 	.word	0x07405419
 8003170:	40023c00 	.word	0x40023c00

08003174 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <SystemCoreClockUpdate+0x68>)
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 800317e:	2904      	cmp	r1, #4
 8003180:	d003      	beq.n	800318a <SystemCoreClockUpdate+0x16>
 8003182:	2908      	cmp	r1, #8
 8003184:	d003      	beq.n	800318e <SystemCoreClockUpdate+0x1a>
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <SystemCoreClockUpdate+0x6c>)
 8003188:	e019      	b.n	80031be <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <SystemCoreClockUpdate+0x70>)
 800318c:	e017      	b.n	80031be <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800318e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003192:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	bf14      	ite	ne
 800319a:	4b12      	ldrne	r3, [pc, #72]	; (80031e4 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800319c:	4b10      	ldreq	r3, [pc, #64]	; (80031e0 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031a8:	6852      	ldr	r2, [r2, #4]
 80031aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031b2:	3201      	adds	r2, #1
 80031b4:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031b6:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80031b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031be:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031ca:	189a      	adds	r2, r3, r2
 80031cc:	7911      	ldrb	r1, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	40ca      	lsrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	20000088 	.word	0x20000088
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <cleanup_glue>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	1c0c      	adds	r4, r1, #0
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	1c05      	adds	r5, r0, #0
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d001      	beq.n	80031f8 <cleanup_glue+0x10>
 80031f4:	f7ff fff8 	bl	80031e8 <cleanup_glue>
 80031f8:	1c28      	adds	r0, r5, #0
 80031fa:	1c21      	adds	r1, r4, #0
 80031fc:	f002 fb56 	bl	80058ac <_free_r>
 8003200:	bc38      	pop	{r3, r4, r5}
 8003202:	bc01      	pop	{r0}
 8003204:	4700      	bx	r0
 8003206:	46c0      	nop			; (mov r8, r8)

08003208 <_reclaim_reent>:
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <_reclaim_reent+0x9c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	1c05      	adds	r5, r0, #0
 8003210:	4298      	cmp	r0, r3
 8003212:	d037      	beq.n	8003284 <_reclaim_reent+0x7c>
 8003214:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003216:	2a00      	cmp	r2, #0
 8003218:	d014      	beq.n	8003244 <_reclaim_reent+0x3c>
 800321a:	2300      	movs	r3, #0
 800321c:	2600      	movs	r6, #0
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	5899      	ldr	r1, [r3, r2]
 8003222:	2900      	cmp	r1, #0
 8003224:	d006      	beq.n	8003234 <_reclaim_reent+0x2c>
 8003226:	680c      	ldr	r4, [r1, #0]
 8003228:	1c28      	adds	r0, r5, #0
 800322a:	f002 fb3f 	bl	80058ac <_free_r>
 800322e:	1e21      	subs	r1, r4, #0
 8003230:	d1f9      	bne.n	8003226 <_reclaim_reent+0x1e>
 8003232:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003234:	3601      	adds	r6, #1
 8003236:	1c33      	adds	r3, r6, #0
 8003238:	2e20      	cmp	r6, #32
 800323a:	d1f0      	bne.n	800321e <_reclaim_reent+0x16>
 800323c:	1c28      	adds	r0, r5, #0
 800323e:	1c11      	adds	r1, r2, #0
 8003240:	f002 fb34 	bl	80058ac <_free_r>
 8003244:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003246:	2900      	cmp	r1, #0
 8003248:	d002      	beq.n	8003250 <_reclaim_reent+0x48>
 800324a:	1c28      	adds	r0, r5, #0
 800324c:	f002 fb2e 	bl	80058ac <_free_r>
 8003250:	23a4      	movs	r3, #164	; 0xa4
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	58e9      	ldr	r1, [r5, r3]
 8003256:	2900      	cmp	r1, #0
 8003258:	d00b      	beq.n	8003272 <_reclaim_reent+0x6a>
 800325a:	23a6      	movs	r3, #166	; 0xa6
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	18ee      	adds	r6, r5, r3
 8003260:	42b1      	cmp	r1, r6
 8003262:	d006      	beq.n	8003272 <_reclaim_reent+0x6a>
 8003264:	680c      	ldr	r4, [r1, #0]
 8003266:	1c28      	adds	r0, r5, #0
 8003268:	f002 fb20 	bl	80058ac <_free_r>
 800326c:	1c21      	adds	r1, r4, #0
 800326e:	42a6      	cmp	r6, r4
 8003270:	d1f8      	bne.n	8003264 <_reclaim_reent+0x5c>
 8003272:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003274:	2900      	cmp	r1, #0
 8003276:	d002      	beq.n	800327e <_reclaim_reent+0x76>
 8003278:	1c28      	adds	r0, r5, #0
 800327a:	f002 fb17 	bl	80058ac <_free_r>
 800327e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <_reclaim_reent+0x82>
 8003284:	bc70      	pop	{r4, r5, r6}
 8003286:	bc01      	pop	{r0}
 8003288:	4700      	bx	r0
 800328a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800328c:	1c28      	adds	r0, r5, #0
 800328e:	f000 f831 	bl	80032f4 <_wrapup_reent+0x4c>
 8003292:	23b8      	movs	r3, #184	; 0xb8
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	58e9      	ldr	r1, [r5, r3]
 8003298:	2900      	cmp	r1, #0
 800329a:	d0f3      	beq.n	8003284 <_reclaim_reent+0x7c>
 800329c:	1c28      	adds	r0, r5, #0
 800329e:	f7ff ffa3 	bl	80031e8 <cleanup_glue>
 80032a2:	e7ef      	b.n	8003284 <_reclaim_reent+0x7c>
 80032a4:	200000a0 	.word	0x200000a0

080032a8 <_wrapup_reent>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	1e07      	subs	r7, r0, #0
 80032ac:	d01c      	beq.n	80032e8 <_wrapup_reent+0x40>
 80032ae:	23a4      	movs	r3, #164	; 0xa4
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	58fe      	ldr	r6, [r7, r3]
 80032b4:	2e00      	cmp	r6, #0
 80032b6:	d00e      	beq.n	80032d6 <_wrapup_reent+0x2e>
 80032b8:	6873      	ldr	r3, [r6, #4]
 80032ba:	1e5c      	subs	r4, r3, #1
 80032bc:	d408      	bmi.n	80032d0 <_wrapup_reent+0x28>
 80032be:	1c5d      	adds	r5, r3, #1
 80032c0:	00ad      	lsls	r5, r5, #2
 80032c2:	1975      	adds	r5, r6, r5
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	f000 f815 	bl	80032f4 <_wrapup_reent+0x4c>
 80032ca:	3d04      	subs	r5, #4
 80032cc:	3c01      	subs	r4, #1
 80032ce:	d2f9      	bcs.n	80032c4 <_wrapup_reent+0x1c>
 80032d0:	6836      	ldr	r6, [r6, #0]
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d1f0      	bne.n	80032b8 <_wrapup_reent+0x10>
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <_wrapup_reent+0x3a>
 80032dc:	1c38      	adds	r0, r7, #0
 80032de:	f000 f809 	bl	80032f4 <_wrapup_reent+0x4c>
 80032e2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e4:	bc01      	pop	{r0}
 80032e6:	4700      	bx	r0
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <_wrapup_reent+0x48>)
 80032ea:	681f      	ldr	r7, [r3, #0]
 80032ec:	e7df      	b.n	80032ae <_wrapup_reent+0x6>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200000a0 	.word	0x200000a0
 80032f4:	4718      	bx	r3
 80032f6:	46c0      	nop			; (mov r8, r8)

080032f8 <_sprintf_r>:
 80032f8:	b40c      	push	{r2, r3}
 80032fa:	b510      	push	{r4, lr}
 80032fc:	b09c      	sub	sp, #112	; 0x70
 80032fe:	9102      	str	r1, [sp, #8]
 8003300:	9106      	str	r1, [sp, #24]
 8003302:	490c      	ldr	r1, [pc, #48]	; (8003334 <_sprintf_r+0x3c>)
 8003304:	ab1e      	add	r3, sp, #120	; 0x78
 8003306:	9104      	str	r1, [sp, #16]
 8003308:	9107      	str	r1, [sp, #28]
 800330a:	2482      	movs	r4, #130	; 0x82
 800330c:	2101      	movs	r1, #1
 800330e:	cb04      	ldmia	r3!, {r2}
 8003310:	00a4      	lsls	r4, r4, #2
 8003312:	aa02      	add	r2, sp, #8
 8003314:	4249      	negs	r1, r1
 8003316:	8194      	strh	r4, [r2, #12]
 8003318:	81d1      	strh	r1, [r2, #14]
 800331a:	1c11      	adds	r1, r2, #0
 800331c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f000 f82e 	bl	8003380 <_svfprintf_r>
 8003324:	9a02      	ldr	r2, [sp, #8]
 8003326:	2300      	movs	r3, #0
 8003328:	7013      	strb	r3, [r2, #0]
 800332a:	b01c      	add	sp, #112	; 0x70
 800332c:	bc10      	pop	{r4}
 800332e:	bc08      	pop	{r3}
 8003330:	b002      	add	sp, #8
 8003332:	4718      	bx	r3
 8003334:	7fffffff 	.word	0x7fffffff

08003338 <sprintf>:
 8003338:	b40e      	push	{r1, r2, r3}
 800333a:	b500      	push	{lr}
 800333c:	b09c      	sub	sp, #112	; 0x70
 800333e:	ab1d      	add	r3, sp, #116	; 0x74
 8003340:	cb04      	ldmia	r3!, {r2}
 8003342:	2282      	movs	r2, #130	; 0x82
 8003344:	a902      	add	r1, sp, #8
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	818a      	strh	r2, [r1, #12]
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <sprintf+0x3c>)
 800334c:	608a      	str	r2, [r1, #8]
 800334e:	614a      	str	r2, [r1, #20]
 8003350:	2201      	movs	r2, #1
 8003352:	4252      	negs	r2, r2
 8003354:	81ca      	strh	r2, [r1, #14]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <sprintf+0x40>)
 8003358:	9002      	str	r0, [sp, #8]
 800335a:	6108      	str	r0, [r1, #16]
 800335c:	6810      	ldr	r0, [r2, #0]
 800335e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f000 f80d 	bl	8003380 <_svfprintf_r>
 8003366:	9a02      	ldr	r2, [sp, #8]
 8003368:	2300      	movs	r3, #0
 800336a:	7013      	strb	r3, [r2, #0]
 800336c:	b01c      	add	sp, #112	; 0x70
 800336e:	bc08      	pop	{r3}
 8003370:	b003      	add	sp, #12
 8003372:	4718      	bx	r3
 8003374:	7fffffff 	.word	0x7fffffff
 8003378:	200000a0 	.word	0x200000a0
 800337c:	00000000 	.word	0x00000000

08003380 <_svfprintf_r>:
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	464d      	mov	r5, r9
 8003384:	4644      	mov	r4, r8
 8003386:	465f      	mov	r7, fp
 8003388:	4656      	mov	r6, sl
 800338a:	b4f0      	push	{r4, r5, r6, r7}
 800338c:	b0c5      	sub	sp, #276	; 0x114
 800338e:	4689      	mov	r9, r1
 8003390:	9310      	str	r3, [sp, #64]	; 0x40
 8003392:	1c14      	adds	r4, r2, #0
 8003394:	900b      	str	r0, [sp, #44]	; 0x2c
 8003396:	f002 fb89 	bl	8005aac <_localeconv_r>
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	9017      	str	r0, [sp, #92]	; 0x5c
 800339e:	f003 fbbb 	bl	8006b18 <strlen>
 80033a2:	901a      	str	r0, [sp, #104]	; 0x68
 80033a4:	2000      	movs	r0, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	9018      	str	r0, [sp, #96]	; 0x60
 80033aa:	9119      	str	r1, [sp, #100]	; 0x64
 80033ac:	4649      	mov	r1, r9
 80033ae:	898b      	ldrh	r3, [r1, #12]
 80033b0:	061a      	lsls	r2, r3, #24
 80033b2:	d504      	bpl.n	80033be <_svfprintf_r+0x3e>
 80033b4:	690b      	ldr	r3, [r1, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <_svfprintf_r+0x3e>
 80033ba:	f000 ffa2 	bl	8004302 <_svfprintf_r+0xf82>
 80033be:	2200      	movs	r2, #0
 80033c0:	9215      	str	r2, [sp, #84]	; 0x54
 80033c2:	466a      	mov	r2, sp
 80033c4:	2300      	movs	r3, #0
 80033c6:	a934      	add	r1, sp, #208	; 0xd0
 80033c8:	ae27      	add	r6, sp, #156	; 0x9c
 80033ca:	32cf      	adds	r2, #207	; 0xcf
 80033cc:	af34      	add	r7, sp, #208	; 0xd0
 80033ce:	9108      	str	r1, [sp, #32]
 80033d0:	9127      	str	r1, [sp, #156]	; 0x9c
 80033d2:	60b3      	str	r3, [r6, #8]
 80033d4:	6073      	str	r3, [r6, #4]
 80033d6:	931c      	str	r3, [sp, #112]	; 0x70
 80033d8:	2000      	movs	r0, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	1abb      	subs	r3, r7, r2
 80033de:	901b      	str	r0, [sp, #108]	; 0x6c
 80033e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80033e2:	9207      	str	r2, [sp, #28]
 80033e4:	931d      	str	r3, [sp, #116]	; 0x74
 80033e6:	1c25      	adds	r5, r4, #0
 80033e8:	46cb      	mov	fp, r9
 80033ea:	782b      	ldrb	r3, [r5, #0]
 80033ec:	1c2c      	adds	r4, r5, #0
 80033ee:	2b25      	cmp	r3, #37	; 0x25
 80033f0:	d01c      	beq.n	800342c <_svfprintf_r+0xac>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <_svfprintf_r+0x7c>
 80033f6:	e019      	b.n	800342c <_svfprintf_r+0xac>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <_svfprintf_r+0x84>
 80033fc:	3401      	adds	r4, #1
 80033fe:	7823      	ldrb	r3, [r4, #0]
 8003400:	2b25      	cmp	r3, #37	; 0x25
 8003402:	d1f9      	bne.n	80033f8 <_svfprintf_r+0x78>
 8003404:	1b60      	subs	r0, r4, r5
 8003406:	4680      	mov	r8, r0
 8003408:	d010      	beq.n	800342c <_svfprintf_r+0xac>
 800340a:	68b1      	ldr	r1, [r6, #8]
 800340c:	1c0b      	adds	r3, r1, #0
 800340e:	4443      	add	r3, r8
 8003410:	603d      	str	r5, [r7, #0]
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	60b3      	str	r3, [r6, #8]
 8003416:	6873      	ldr	r3, [r6, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	6073      	str	r3, [r6, #4]
 800341c:	2b07      	cmp	r3, #7
 800341e:	dd00      	ble.n	8003422 <_svfprintf_r+0xa2>
 8003420:	e346      	b.n	8003ab0 <_svfprintf_r+0x730>
 8003422:	3708      	adds	r7, #8
 8003424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003426:	1c13      	adds	r3, r2, #0
 8003428:	4443      	add	r3, r8
 800342a:	930f      	str	r3, [sp, #60]	; 0x3c
 800342c:	7823      	ldrb	r3, [r4, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <_svfprintf_r+0xb6>
 8003432:	f000 fdb6 	bl	8003fa2 <_svfprintf_r+0xc22>
 8003436:	207b      	movs	r0, #123	; 0x7b
 8003438:	2201      	movs	r2, #1
 800343a:	2300      	movs	r3, #0
 800343c:	4468      	add	r0, sp
 800343e:	4252      	negs	r2, r2
 8003440:	7003      	strb	r3, [r0, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	4692      	mov	sl, r2
 8003448:	2200      	movs	r2, #0
 800344a:	9111      	str	r1, [sp, #68]	; 0x44
 800344c:	920a      	str	r2, [sp, #40]	; 0x28
 800344e:	4699      	mov	r9, r3
 8003450:	2208      	movs	r2, #8
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	49ce      	ldr	r1, [pc, #824]	; (8003790 <_svfprintf_r+0x410>)
 8003456:	1c65      	adds	r5, r4, #1
 8003458:	2010      	movs	r0, #16
 800345a:	4690      	mov	r8, r2
 800345c:	469c      	mov	ip, r3
 800345e:	242b      	movs	r4, #43	; 0x2b
 8003460:	782b      	ldrb	r3, [r5, #0]
 8003462:	930c      	str	r3, [sp, #48]	; 0x30
 8003464:	3501      	adds	r5, #1
 8003466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003468:	3b20      	subs	r3, #32
 800346a:	2b58      	cmp	r3, #88	; 0x58
 800346c:	d914      	bls.n	8003498 <_svfprintf_r+0x118>
 800346e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003470:	2900      	cmp	r1, #0
 8003472:	d101      	bne.n	8003478 <_svfprintf_r+0xf8>
 8003474:	f000 fd95 	bl	8003fa2 <_svfprintf_r+0xc22>
 8003478:	ab2a      	add	r3, sp, #168	; 0xa8
 800347a:	7019      	strb	r1, [r3, #0]
 800347c:	207b      	movs	r0, #123	; 0x7b
 800347e:	2200      	movs	r2, #0
 8003480:	4468      	add	r0, sp
 8003482:	7002      	strb	r2, [r0, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	2201      	movs	r2, #1
 8003488:	910d      	str	r1, [sp, #52]	; 0x34
 800348a:	920e      	str	r2, [sp, #56]	; 0x38
 800348c:	9313      	str	r3, [sp, #76]	; 0x4c
 800348e:	2200      	movs	r2, #0
 8003490:	2300      	movs	r3, #0
 8003492:	9214      	str	r2, [sp, #80]	; 0x50
 8003494:	9316      	str	r3, [sp, #88]	; 0x58
 8003496:	e0a3      	b.n	80035e0 <_svfprintf_r+0x260>
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	58cb      	ldr	r3, [r1, r3]
 800349c:	469f      	mov	pc, r3
 800349e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034a0:	2310      	movs	r3, #16
 80034a2:	4319      	orrs	r1, r3
 80034a4:	910a      	str	r1, [sp, #40]	; 0x28
 80034a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a8:	06d2      	lsls	r2, r2, #27
 80034aa:	d400      	bmi.n	80034ae <_svfprintf_r+0x12e>
 80034ac:	e3dc      	b.n	8003c68 <_svfprintf_r+0x8e8>
 80034ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	3004      	adds	r0, #4
 80034b6:	1c21      	adds	r1, r4, #0
 80034b8:	9010      	str	r0, [sp, #64]	; 0x40
 80034ba:	1e4b      	subs	r3, r1, #1
 80034bc:	4199      	sbcs	r1, r3
 80034be:	2301      	movs	r3, #1
 80034c0:	207b      	movs	r0, #123	; 0x7b
 80034c2:	2200      	movs	r2, #0
 80034c4:	4468      	add	r0, sp
 80034c6:	7002      	strb	r2, [r0, #0]
 80034c8:	4652      	mov	r2, sl
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	db03      	blt.n	80034d6 <_svfprintf_r+0x156>
 80034ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	4390      	bics	r0, r2
 80034d4:	900a      	str	r0, [sp, #40]	; 0x28
 80034d6:	4652      	mov	r2, sl
 80034d8:	2a00      	cmp	r2, #0
 80034da:	d101      	bne.n	80034e0 <_svfprintf_r+0x160>
 80034dc:	2900      	cmp	r1, #0
 80034de:	d05f      	beq.n	80035a0 <_svfprintf_r+0x220>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d100      	bne.n	80034e6 <_svfprintf_r+0x166>
 80034e4:	e377      	b.n	8003bd6 <_svfprintf_r+0x856>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d100      	bne.n	80034ec <_svfprintf_r+0x16c>
 80034ea:	e362      	b.n	8003bb2 <_svfprintf_r+0x832>
 80034ec:	466b      	mov	r3, sp
 80034ee:	33cf      	adds	r3, #207	; 0xcf
 80034f0:	2107      	movs	r1, #7
 80034f2:	1c0a      	adds	r2, r1, #0
 80034f4:	4022      	ands	r2, r4
 80034f6:	3230      	adds	r2, #48	; 0x30
 80034f8:	1c18      	adds	r0, r3, #0
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	08e4      	lsrs	r4, r4, #3
 80034fe:	3b01      	subs	r3, #1
 8003500:	2c00      	cmp	r4, #0
 8003502:	d1f6      	bne.n	80034f2 <_svfprintf_r+0x172>
 8003504:	9013      	str	r0, [sp, #76]	; 0x4c
 8003506:	1c01      	adds	r1, r0, #0
 8003508:	980a      	ldr	r0, [sp, #40]	; 0x28
 800350a:	07c0      	lsls	r0, r0, #31
 800350c:	d400      	bmi.n	8003510 <_svfprintf_r+0x190>
 800350e:	e3c3      	b.n	8003c98 <_svfprintf_r+0x918>
 8003510:	2a30      	cmp	r2, #48	; 0x30
 8003512:	d101      	bne.n	8003518 <_svfprintf_r+0x198>
 8003514:	f000 ff68 	bl	80043e8 <_svfprintf_r+0x1068>
 8003518:	9313      	str	r3, [sp, #76]	; 0x4c
 800351a:	3901      	subs	r1, #1
 800351c:	2330      	movs	r3, #48	; 0x30
 800351e:	700b      	strb	r3, [r1, #0]
 8003520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003522:	9908      	ldr	r1, [sp, #32]
 8003524:	1a89      	subs	r1, r1, r2
 8003526:	910e      	str	r1, [sp, #56]	; 0x38
 8003528:	e048      	b.n	80035bc <_svfprintf_r+0x23c>
 800352a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800352c:	2310      	movs	r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	920a      	str	r2, [sp, #40]	; 0x28
 8003532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003534:	06db      	lsls	r3, r3, #27
 8003536:	d500      	bpl.n	800353a <_svfprintf_r+0x1ba>
 8003538:	e3a4      	b.n	8003c84 <_svfprintf_r+0x904>
 800353a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800353c:	0649      	lsls	r1, r1, #25
 800353e:	d401      	bmi.n	8003544 <_svfprintf_r+0x1c4>
 8003540:	f000 fe2a 	bl	8004198 <_svfprintf_r+0xe18>
 8003544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003546:	8814      	ldrh	r4, [r2, #0]
 8003548:	3204      	adds	r2, #4
 800354a:	1c21      	adds	r1, r4, #0
 800354c:	1e4b      	subs	r3, r1, #1
 800354e:	4199      	sbcs	r1, r3
 8003550:	9210      	str	r2, [sp, #64]	; 0x40
 8003552:	2300      	movs	r3, #0
 8003554:	e7b4      	b.n	80034c0 <_svfprintf_r+0x140>
 8003556:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003558:	2310      	movs	r3, #16
 800355a:	4318      	orrs	r0, r3
 800355c:	900a      	str	r0, [sp, #40]	; 0x28
 800355e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003560:	06c9      	lsls	r1, r1, #27
 8003562:	d400      	bmi.n	8003566 <_svfprintf_r+0x1e6>
 8003564:	e375      	b.n	8003c52 <_svfprintf_r+0x8d2>
 8003566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003568:	6814      	ldr	r4, [r2, #0]
 800356a:	3204      	adds	r2, #4
 800356c:	9210      	str	r2, [sp, #64]	; 0x40
 800356e:	2c00      	cmp	r4, #0
 8003570:	da01      	bge.n	8003576 <_svfprintf_r+0x1f6>
 8003572:	f000 fde9 	bl	8004148 <_svfprintf_r+0xdc8>
 8003576:	1c21      	adds	r1, r4, #0
 8003578:	1e4b      	subs	r3, r1, #1
 800357a:	4199      	sbcs	r1, r3
 800357c:	2301      	movs	r3, #1
 800357e:	e7a3      	b.n	80034c8 <_svfprintf_r+0x148>
 8003580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3204      	adds	r2, #4
 8003588:	9311      	str	r3, [sp, #68]	; 0x44
 800358a:	9210      	str	r2, [sp, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	db00      	blt.n	8003592 <_svfprintf_r+0x212>
 8003590:	e766      	b.n	8003460 <_svfprintf_r+0xe0>
 8003592:	425b      	negs	r3, r3
 8003594:	9311      	str	r3, [sp, #68]	; 0x44
 8003596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003598:	2304      	movs	r3, #4
 800359a:	431a      	orrs	r2, r3
 800359c:	920a      	str	r2, [sp, #40]	; 0x28
 800359e:	e75f      	b.n	8003460 <_svfprintf_r+0xe0>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d000      	beq.n	80035a6 <_svfprintf_r+0x226>
 80035a4:	e27f      	b.n	8003aa6 <_svfprintf_r+0x726>
 80035a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035a8:	07c9      	lsls	r1, r1, #31
 80035aa:	d400      	bmi.n	80035ae <_svfprintf_r+0x22e>
 80035ac:	e2fc      	b.n	8003ba8 <_svfprintf_r+0x828>
 80035ae:	22cf      	movs	r2, #207	; 0xcf
 80035b0:	2330      	movs	r3, #48	; 0x30
 80035b2:	446a      	add	r2, sp
 80035b4:	7013      	strb	r3, [r2, #0]
 80035b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80035b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80035ba:	930e      	str	r3, [sp, #56]	; 0x38
 80035bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035be:	910d      	str	r1, [sp, #52]	; 0x34
 80035c0:	4551      	cmp	r1, sl
 80035c2:	da01      	bge.n	80035c8 <_svfprintf_r+0x248>
 80035c4:	4653      	mov	r3, sl
 80035c6:	930d      	str	r3, [sp, #52]	; 0x34
 80035c8:	207b      	movs	r0, #123	; 0x7b
 80035ca:	4468      	add	r0, sp
 80035cc:	7803      	ldrb	r3, [r0, #0]
 80035ce:	4652      	mov	r2, sl
 80035d0:	2000      	movs	r0, #0
 80035d2:	9214      	str	r2, [sp, #80]	; 0x50
 80035d4:	9016      	str	r0, [sp, #88]	; 0x58
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <_svfprintf_r+0x260>
 80035da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035dc:	3301      	adds	r3, #1
 80035de:	930d      	str	r3, [sp, #52]	; 0x34
 80035e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035e2:	2302      	movs	r3, #2
 80035e4:	4018      	ands	r0, r3
 80035e6:	9012      	str	r0, [sp, #72]	; 0x48
 80035e8:	d002      	beq.n	80035f0 <_svfprintf_r+0x270>
 80035ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ec:	3102      	adds	r1, #2
 80035ee:	910d      	str	r1, [sp, #52]	; 0x34
 80035f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035f2:	2384      	movs	r3, #132	; 0x84
 80035f4:	401a      	ands	r2, r3
 80035f6:	4692      	mov	sl, r2
 80035f8:	d13d      	bne.n	8003676 <_svfprintf_r+0x2f6>
 80035fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035fe:	1a1c      	subs	r4, r3, r0
 8003600:	2c00      	cmp	r4, #0
 8003602:	dd38      	ble.n	8003676 <_svfprintf_r+0x2f6>
 8003604:	2c10      	cmp	r4, #16
 8003606:	dc01      	bgt.n	800360c <_svfprintf_r+0x28c>
 8003608:	f000 fec4 	bl	8004394 <_svfprintf_r+0x1014>
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <_svfprintf_r+0x414>)
 800360e:	2310      	movs	r3, #16
 8003610:	4699      	mov	r9, r3
 8003612:	46a8      	mov	r8, r5
 8003614:	1c3b      	adds	r3, r7, #0
 8003616:	1c15      	adds	r5, r2, #0
 8003618:	465f      	mov	r7, fp
 800361a:	e003      	b.n	8003624 <_svfprintf_r+0x2a4>
 800361c:	3c10      	subs	r4, #16
 800361e:	3308      	adds	r3, #8
 8003620:	2c10      	cmp	r4, #16
 8003622:	dd16      	ble.n	8003652 <_svfprintf_r+0x2d2>
 8003624:	68b2      	ldr	r2, [r6, #8]
 8003626:	4648      	mov	r0, r9
 8003628:	3210      	adds	r2, #16
 800362a:	601d      	str	r5, [r3, #0]
 800362c:	6058      	str	r0, [r3, #4]
 800362e:	60b2      	str	r2, [r6, #8]
 8003630:	6872      	ldr	r2, [r6, #4]
 8003632:	3201      	adds	r2, #1
 8003634:	6072      	str	r2, [r6, #4]
 8003636:	2a07      	cmp	r2, #7
 8003638:	ddf0      	ble.n	800361c <_svfprintf_r+0x29c>
 800363a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800363c:	1c39      	adds	r1, r7, #0
 800363e:	1c32      	adds	r2, r6, #0
 8003640:	f003 fa72 	bl	8006b28 <__ssprint_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	d000      	beq.n	800364a <_svfprintf_r+0x2ca>
 8003648:	e15f      	b.n	800390a <_svfprintf_r+0x58a>
 800364a:	3c10      	subs	r4, #16
 800364c:	ab34      	add	r3, sp, #208	; 0xd0
 800364e:	2c10      	cmp	r4, #16
 8003650:	dce8      	bgt.n	8003624 <_svfprintf_r+0x2a4>
 8003652:	46bb      	mov	fp, r7
 8003654:	1c1f      	adds	r7, r3, #0
 8003656:	1c2b      	adds	r3, r5, #0
 8003658:	4645      	mov	r5, r8
 800365a:	4698      	mov	r8, r3
 800365c:	68b2      	ldr	r2, [r6, #8]
 800365e:	6873      	ldr	r3, [r6, #4]
 8003660:	607c      	str	r4, [r7, #4]
 8003662:	4641      	mov	r1, r8
 8003664:	1914      	adds	r4, r2, r4
 8003666:	3301      	adds	r3, #1
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	60b4      	str	r4, [r6, #8]
 800366c:	6073      	str	r3, [r6, #4]
 800366e:	2b07      	cmp	r3, #7
 8003670:	dd00      	ble.n	8003674 <_svfprintf_r+0x2f4>
 8003672:	e2cb      	b.n	8003c0c <_svfprintf_r+0x88c>
 8003674:	3708      	adds	r7, #8
 8003676:	207b      	movs	r0, #123	; 0x7b
 8003678:	4468      	add	r0, sp
 800367a:	7803      	ldrb	r3, [r0, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00c      	beq.n	800369a <_svfprintf_r+0x31a>
 8003680:	2301      	movs	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	3301      	adds	r3, #1
 8003688:	6038      	str	r0, [r7, #0]
 800368a:	60b3      	str	r3, [r6, #8]
 800368c:	6873      	ldr	r3, [r6, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	6073      	str	r3, [r6, #4]
 8003692:	2b07      	cmp	r3, #7
 8003694:	dd00      	ble.n	8003698 <_svfprintf_r+0x318>
 8003696:	e21d      	b.n	8003ad4 <_svfprintf_r+0x754>
 8003698:	3708      	adds	r7, #8
 800369a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800369c:	2900      	cmp	r1, #0
 800369e:	d00d      	beq.n	80036bc <_svfprintf_r+0x33c>
 80036a0:	ab1f      	add	r3, sp, #124	; 0x7c
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	2302      	movs	r3, #2
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	68b3      	ldr	r3, [r6, #8]
 80036aa:	3302      	adds	r3, #2
 80036ac:	60b3      	str	r3, [r6, #8]
 80036ae:	6873      	ldr	r3, [r6, #4]
 80036b0:	3301      	adds	r3, #1
 80036b2:	6073      	str	r3, [r6, #4]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dd00      	ble.n	80036ba <_svfprintf_r+0x33a>
 80036b8:	e215      	b.n	8003ae6 <_svfprintf_r+0x766>
 80036ba:	3708      	adds	r7, #8
 80036bc:	4652      	mov	r2, sl
 80036be:	2a80      	cmp	r2, #128	; 0x80
 80036c0:	d100      	bne.n	80036c4 <_svfprintf_r+0x344>
 80036c2:	e134      	b.n	800392e <_svfprintf_r+0x5ae>
 80036c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80036c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036c8:	1a44      	subs	r4, r0, r1
 80036ca:	2c00      	cmp	r4, #0
 80036cc:	dd3b      	ble.n	8003746 <_svfprintf_r+0x3c6>
 80036ce:	2c10      	cmp	r4, #16
 80036d0:	dc01      	bgt.n	80036d6 <_svfprintf_r+0x356>
 80036d2:	f000 fd7c 	bl	80041ce <_svfprintf_r+0xe4e>
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <_svfprintf_r+0x414>)
 80036d8:	2010      	movs	r0, #16
 80036da:	4698      	mov	r8, r3
 80036dc:	4682      	mov	sl, r0
 80036de:	1c3b      	adds	r3, r7, #0
 80036e0:	44c2      	add	sl, r8
 80036e2:	465f      	mov	r7, fp
 80036e4:	4681      	mov	r9, r0
 80036e6:	46ab      	mov	fp, r5
 80036e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036ea:	e003      	b.n	80036f4 <_svfprintf_r+0x374>
 80036ec:	3c10      	subs	r4, #16
 80036ee:	3308      	adds	r3, #8
 80036f0:	2c10      	cmp	r4, #16
 80036f2:	dd17      	ble.n	8003724 <_svfprintf_r+0x3a4>
 80036f4:	4652      	mov	r2, sl
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68b2      	ldr	r2, [r6, #8]
 80036fa:	4648      	mov	r0, r9
 80036fc:	3210      	adds	r2, #16
 80036fe:	6058      	str	r0, [r3, #4]
 8003700:	60b2      	str	r2, [r6, #8]
 8003702:	6872      	ldr	r2, [r6, #4]
 8003704:	3201      	adds	r2, #1
 8003706:	6072      	str	r2, [r6, #4]
 8003708:	2a07      	cmp	r2, #7
 800370a:	ddef      	ble.n	80036ec <_svfprintf_r+0x36c>
 800370c:	1c28      	adds	r0, r5, #0
 800370e:	1c39      	adds	r1, r7, #0
 8003710:	1c32      	adds	r2, r6, #0
 8003712:	f003 fa09 	bl	8006b28 <__ssprint_r>
 8003716:	2800      	cmp	r0, #0
 8003718:	d000      	beq.n	800371c <_svfprintf_r+0x39c>
 800371a:	e0f6      	b.n	800390a <_svfprintf_r+0x58a>
 800371c:	3c10      	subs	r4, #16
 800371e:	ab34      	add	r3, sp, #208	; 0xd0
 8003720:	2c10      	cmp	r4, #16
 8003722:	dce7      	bgt.n	80036f4 <_svfprintf_r+0x374>
 8003724:	465d      	mov	r5, fp
 8003726:	46bb      	mov	fp, r7
 8003728:	1c1f      	adds	r7, r3, #0
 800372a:	4643      	mov	r3, r8
 800372c:	3310      	adds	r3, #16
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	68b1      	ldr	r1, [r6, #8]
 8003732:	6873      	ldr	r3, [r6, #4]
 8003734:	607c      	str	r4, [r7, #4]
 8003736:	3301      	adds	r3, #1
 8003738:	190c      	adds	r4, r1, r4
 800373a:	60b4      	str	r4, [r6, #8]
 800373c:	6073      	str	r3, [r6, #4]
 800373e:	2b07      	cmp	r3, #7
 8003740:	dd00      	ble.n	8003744 <_svfprintf_r+0x3c4>
 8003742:	e1be      	b.n	8003ac2 <_svfprintf_r+0x742>
 8003744:	3708      	adds	r7, #8
 8003746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003748:	05d2      	lsls	r2, r2, #23
 800374a:	d500      	bpl.n	800374e <_svfprintf_r+0x3ce>
 800374c:	e07e      	b.n	800384c <_svfprintf_r+0x4cc>
 800374e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003752:	68b1      	ldr	r1, [r6, #8]
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	180b      	adds	r3, r1, r0
 800375a:	60b3      	str	r3, [r6, #8]
 800375c:	6873      	ldr	r3, [r6, #4]
 800375e:	3301      	adds	r3, #1
 8003760:	6073      	str	r3, [r6, #4]
 8003762:	2b07      	cmp	r3, #7
 8003764:	dc68      	bgt.n	8003838 <_svfprintf_r+0x4b8>
 8003766:	3708      	adds	r7, #8
 8003768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800376a:	075b      	lsls	r3, r3, #29
 800376c:	d545      	bpl.n	80037fa <_svfprintf_r+0x47a>
 800376e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003770:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003772:	1a44      	subs	r4, r0, r1
 8003774:	2c00      	cmp	r4, #0
 8003776:	dd40      	ble.n	80037fa <_svfprintf_r+0x47a>
 8003778:	2c10      	cmp	r4, #16
 800377a:	dc01      	bgt.n	8003780 <_svfprintf_r+0x400>
 800377c:	f000 fe3a 	bl	80043f4 <_svfprintf_r+0x1074>
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <_svfprintf_r+0x414>)
 8003782:	2010      	movs	r0, #16
 8003784:	46aa      	mov	sl, r5
 8003786:	4698      	mov	r8, r3
 8003788:	4681      	mov	r9, r0
 800378a:	465d      	mov	r5, fp
 800378c:	e008      	b.n	80037a0 <_svfprintf_r+0x420>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	08008ae0 	.word	0x08008ae0
 8003794:	08008c44 	.word	0x08008c44
 8003798:	3c10      	subs	r4, #16
 800379a:	3708      	adds	r7, #8
 800379c:	2c10      	cmp	r4, #16
 800379e:	dd18      	ble.n	80037d2 <_svfprintf_r+0x452>
 80037a0:	68b3      	ldr	r3, [r6, #8]
 80037a2:	4641      	mov	r1, r8
 80037a4:	3310      	adds	r3, #16
 80037a6:	464a      	mov	r2, r9
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	60b3      	str	r3, [r6, #8]
 80037ae:	6873      	ldr	r3, [r6, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	6073      	str	r3, [r6, #4]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	ddef      	ble.n	8003798 <_svfprintf_r+0x418>
 80037b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037ba:	1c29      	adds	r1, r5, #0
 80037bc:	1c32      	adds	r2, r6, #0
 80037be:	f003 f9b3 	bl	8006b28 <__ssprint_r>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d001      	beq.n	80037ca <_svfprintf_r+0x44a>
 80037c6:	f000 fc0e 	bl	8003fe6 <_svfprintf_r+0xc66>
 80037ca:	3c10      	subs	r4, #16
 80037cc:	af34      	add	r7, sp, #208	; 0xd0
 80037ce:	2c10      	cmp	r4, #16
 80037d0:	dce6      	bgt.n	80037a0 <_svfprintf_r+0x420>
 80037d2:	46ab      	mov	fp, r5
 80037d4:	4655      	mov	r5, sl
 80037d6:	4643      	mov	r3, r8
 80037d8:	c718      	stmia	r7!, {r3, r4}
 80037da:	68b0      	ldr	r0, [r6, #8]
 80037dc:	6873      	ldr	r3, [r6, #4]
 80037de:	1824      	adds	r4, r4, r0
 80037e0:	3301      	adds	r3, #1
 80037e2:	60b4      	str	r4, [r6, #8]
 80037e4:	6073      	str	r3, [r6, #4]
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	dd08      	ble.n	80037fc <_svfprintf_r+0x47c>
 80037ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037ec:	4659      	mov	r1, fp
 80037ee:	1c32      	adds	r2, r6, #0
 80037f0:	f003 f99a 	bl	8006b28 <__ssprint_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d000      	beq.n	80037fa <_svfprintf_r+0x47a>
 80037f8:	e153      	b.n	8003aa2 <_svfprintf_r+0x722>
 80037fa:	68b4      	ldr	r4, [r6, #8]
 80037fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003800:	428b      	cmp	r3, r1
 8003802:	da00      	bge.n	8003806 <_svfprintf_r+0x486>
 8003804:	1c0b      	adds	r3, r1, #0
 8003806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003808:	18d2      	adds	r2, r2, r3
 800380a:	920f      	str	r2, [sp, #60]	; 0x3c
 800380c:	2c00      	cmp	r4, #0
 800380e:	d000      	beq.n	8003812 <_svfprintf_r+0x492>
 8003810:	e13f      	b.n	8003a92 <_svfprintf_r+0x712>
 8003812:	2300      	movs	r3, #0
 8003814:	6073      	str	r3, [r6, #4]
 8003816:	af34      	add	r7, sp, #208	; 0xd0
 8003818:	e5e7      	b.n	80033ea <_svfprintf_r+0x6a>
 800381a:	465d      	mov	r5, fp
 800381c:	46bb      	mov	fp, r7
 800381e:	1c1f      	adds	r7, r3, #0
 8003820:	4643      	mov	r3, r8
 8003822:	3310      	adds	r3, #16
 8003824:	68b1      	ldr	r1, [r6, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	607c      	str	r4, [r7, #4]
 800382a:	190c      	adds	r4, r1, r4
 800382c:	6873      	ldr	r3, [r6, #4]
 800382e:	3301      	adds	r3, #1
 8003830:	60b4      	str	r4, [r6, #8]
 8003832:	6073      	str	r3, [r6, #4]
 8003834:	2b07      	cmp	r3, #7
 8003836:	dd96      	ble.n	8003766 <_svfprintf_r+0x3e6>
 8003838:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800383a:	4659      	mov	r1, fp
 800383c:	1c32      	adds	r2, r6, #0
 800383e:	f003 f973 	bl	8006b28 <__ssprint_r>
 8003842:	2800      	cmp	r0, #0
 8003844:	d000      	beq.n	8003848 <_svfprintf_r+0x4c8>
 8003846:	e12c      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003848:	af34      	add	r7, sp, #208	; 0xd0
 800384a:	e78d      	b.n	8003768 <_svfprintf_r+0x3e8>
 800384c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800384e:	2a65      	cmp	r2, #101	; 0x65
 8003850:	dc00      	bgt.n	8003854 <_svfprintf_r+0x4d4>
 8003852:	e0ae      	b.n	80039b2 <_svfprintf_r+0x632>
 8003854:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003856:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003858:	4bd0      	ldr	r3, [pc, #832]	; (8003b9c <_svfprintf_r+0x81c>)
 800385a:	4acf      	ldr	r2, [pc, #828]	; (8003b98 <_svfprintf_r+0x818>)
 800385c:	f004 ef1e 	blx	800869c <__aeabi_dcmpeq>
 8003860:	2800      	cmp	r0, #0
 8003862:	d100      	bne.n	8003866 <_svfprintf_r+0x4e6>
 8003864:	e148      	b.n	8003af8 <_svfprintf_r+0x778>
 8003866:	4bce      	ldr	r3, [pc, #824]	; (8003ba0 <_svfprintf_r+0x820>)
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	2301      	movs	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	68b3      	ldr	r3, [r6, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	60b3      	str	r3, [r6, #8]
 8003874:	6873      	ldr	r3, [r6, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	6073      	str	r3, [r6, #4]
 800387a:	2b07      	cmp	r3, #7
 800387c:	dd00      	ble.n	8003880 <_svfprintf_r+0x500>
 800387e:	e336      	b.n	8003eee <_svfprintf_r+0xb6e>
 8003880:	3708      	adds	r7, #8
 8003882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003884:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003886:	4283      	cmp	r3, r0
 8003888:	db03      	blt.n	8003892 <_svfprintf_r+0x512>
 800388a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800388c:	07c9      	lsls	r1, r1, #31
 800388e:	d400      	bmi.n	8003892 <_svfprintf_r+0x512>
 8003890:	e76a      	b.n	8003768 <_svfprintf_r+0x3e8>
 8003892:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003894:	68b1      	ldr	r1, [r6, #8]
 8003896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	185b      	adds	r3, r3, r1
 800389c:	603a      	str	r2, [r7, #0]
 800389e:	60b3      	str	r3, [r6, #8]
 80038a0:	6873      	ldr	r3, [r6, #4]
 80038a2:	3301      	adds	r3, #1
 80038a4:	6073      	str	r3, [r6, #4]
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	dd01      	ble.n	80038ae <_svfprintf_r+0x52e>
 80038aa:	f000 fd1b 	bl	80042e4 <_svfprintf_r+0xf64>
 80038ae:	3708      	adds	r7, #8
 80038b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80038b2:	3c01      	subs	r4, #1
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	dc00      	bgt.n	80038ba <_svfprintf_r+0x53a>
 80038b8:	e756      	b.n	8003768 <_svfprintf_r+0x3e8>
 80038ba:	2c10      	cmp	r4, #16
 80038bc:	dc01      	bgt.n	80038c2 <_svfprintf_r+0x542>
 80038be:	f000 fecf 	bl	8004660 <_svfprintf_r+0x12e0>
 80038c2:	4bb8      	ldr	r3, [pc, #736]	; (8003ba4 <_svfprintf_r+0x824>)
 80038c4:	2010      	movs	r0, #16
 80038c6:	4698      	mov	r8, r3
 80038c8:	4682      	mov	sl, r0
 80038ca:	1c3b      	adds	r3, r7, #0
 80038cc:	44c2      	add	sl, r8
 80038ce:	465f      	mov	r7, fp
 80038d0:	4681      	mov	r9, r0
 80038d2:	46ab      	mov	fp, r5
 80038d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80038d6:	e003      	b.n	80038e0 <_svfprintf_r+0x560>
 80038d8:	3308      	adds	r3, #8
 80038da:	3c10      	subs	r4, #16
 80038dc:	2c10      	cmp	r4, #16
 80038de:	dd9c      	ble.n	800381a <_svfprintf_r+0x49a>
 80038e0:	4652      	mov	r2, sl
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	68b2      	ldr	r2, [r6, #8]
 80038e6:	4648      	mov	r0, r9
 80038e8:	3210      	adds	r2, #16
 80038ea:	6058      	str	r0, [r3, #4]
 80038ec:	60b2      	str	r2, [r6, #8]
 80038ee:	6872      	ldr	r2, [r6, #4]
 80038f0:	3201      	adds	r2, #1
 80038f2:	6072      	str	r2, [r6, #4]
 80038f4:	2a07      	cmp	r2, #7
 80038f6:	ddef      	ble.n	80038d8 <_svfprintf_r+0x558>
 80038f8:	1c28      	adds	r0, r5, #0
 80038fa:	1c39      	adds	r1, r7, #0
 80038fc:	1c32      	adds	r2, r6, #0
 80038fe:	f003 f913 	bl	8006b28 <__ssprint_r>
 8003902:	2800      	cmp	r0, #0
 8003904:	d101      	bne.n	800390a <_svfprintf_r+0x58a>
 8003906:	ab34      	add	r3, sp, #208	; 0xd0
 8003908:	e7e7      	b.n	80038da <_svfprintf_r+0x55a>
 800390a:	46b9      	mov	r9, r7
 800390c:	4648      	mov	r0, r9
 800390e:	8983      	ldrh	r3, [r0, #12]
 8003910:	0659      	lsls	r1, r3, #25
 8003912:	d502      	bpl.n	800391a <_svfprintf_r+0x59a>
 8003914:	2301      	movs	r3, #1
 8003916:	425b      	negs	r3, r3
 8003918:	930f      	str	r3, [sp, #60]	; 0x3c
 800391a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800391c:	b045      	add	sp, #276	; 0x114
 800391e:	bc3c      	pop	{r2, r3, r4, r5}
 8003920:	4690      	mov	r8, r2
 8003922:	4699      	mov	r9, r3
 8003924:	46a2      	mov	sl, r4
 8003926:	46ab      	mov	fp, r5
 8003928:	bcf0      	pop	{r4, r5, r6, r7}
 800392a:	bc02      	pop	{r1}
 800392c:	4708      	bx	r1
 800392e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003930:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003932:	1a1c      	subs	r4, r3, r0
 8003934:	2c00      	cmp	r4, #0
 8003936:	dc00      	bgt.n	800393a <_svfprintf_r+0x5ba>
 8003938:	e6c4      	b.n	80036c4 <_svfprintf_r+0x344>
 800393a:	2c10      	cmp	r4, #16
 800393c:	dc01      	bgt.n	8003942 <_svfprintf_r+0x5c2>
 800393e:	f000 fe02 	bl	8004546 <_svfprintf_r+0x11c6>
 8003942:	4a98      	ldr	r2, [pc, #608]	; (8003ba4 <_svfprintf_r+0x824>)
 8003944:	2310      	movs	r3, #16
 8003946:	469a      	mov	sl, r3
 8003948:	4690      	mov	r8, r2
 800394a:	4699      	mov	r9, r3
 800394c:	44c2      	add	sl, r8
 800394e:	1c3b      	adds	r3, r7, #0
 8003950:	465f      	mov	r7, fp
 8003952:	46ab      	mov	fp, r5
 8003954:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003956:	e003      	b.n	8003960 <_svfprintf_r+0x5e0>
 8003958:	3c10      	subs	r4, #16
 800395a:	3308      	adds	r3, #8
 800395c:	2c10      	cmp	r4, #16
 800395e:	dd16      	ble.n	800398e <_svfprintf_r+0x60e>
 8003960:	464a      	mov	r2, r9
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	68b2      	ldr	r2, [r6, #8]
 8003966:	4651      	mov	r1, sl
 8003968:	3210      	adds	r2, #16
 800396a:	6019      	str	r1, [r3, #0]
 800396c:	60b2      	str	r2, [r6, #8]
 800396e:	6872      	ldr	r2, [r6, #4]
 8003970:	3201      	adds	r2, #1
 8003972:	6072      	str	r2, [r6, #4]
 8003974:	2a07      	cmp	r2, #7
 8003976:	ddef      	ble.n	8003958 <_svfprintf_r+0x5d8>
 8003978:	1c28      	adds	r0, r5, #0
 800397a:	1c39      	adds	r1, r7, #0
 800397c:	1c32      	adds	r2, r6, #0
 800397e:	f003 f8d3 	bl	8006b28 <__ssprint_r>
 8003982:	2800      	cmp	r0, #0
 8003984:	d1c1      	bne.n	800390a <_svfprintf_r+0x58a>
 8003986:	3c10      	subs	r4, #16
 8003988:	ab34      	add	r3, sp, #208	; 0xd0
 800398a:	2c10      	cmp	r4, #16
 800398c:	dce8      	bgt.n	8003960 <_svfprintf_r+0x5e0>
 800398e:	465d      	mov	r5, fp
 8003990:	46bb      	mov	fp, r7
 8003992:	1c1f      	adds	r7, r3, #0
 8003994:	4643      	mov	r3, r8
 8003996:	3310      	adds	r3, #16
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	68b3      	ldr	r3, [r6, #8]
 800399c:	607c      	str	r4, [r7, #4]
 800399e:	191c      	adds	r4, r3, r4
 80039a0:	6873      	ldr	r3, [r6, #4]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60b4      	str	r4, [r6, #8]
 80039a6:	6073      	str	r3, [r6, #4]
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	dd00      	ble.n	80039ae <_svfprintf_r+0x62e>
 80039ac:	e3c1      	b.n	8004132 <_svfprintf_r+0xdb2>
 80039ae:	3708      	adds	r7, #8
 80039b0:	e688      	b.n	80036c4 <_svfprintf_r+0x344>
 80039b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	dc00      	bgt.n	80039ba <_svfprintf_r+0x63a>
 80039b8:	e39c      	b.n	80040f4 <_svfprintf_r+0xd74>
 80039ba:	2301      	movs	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	68b3      	ldr	r3, [r6, #8]
 80039c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80039c2:	3301      	adds	r3, #1
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	60b3      	str	r3, [r6, #8]
 80039c8:	6873      	ldr	r3, [r6, #4]
 80039ca:	3301      	adds	r3, #1
 80039cc:	6073      	str	r3, [r6, #4]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	dd00      	ble.n	80039d4 <_svfprintf_r+0x654>
 80039d2:	e3a4      	b.n	800411e <_svfprintf_r+0xd9e>
 80039d4:	3708      	adds	r7, #8
 80039d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80039d8:	68b1      	ldr	r1, [r6, #8]
 80039da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	185b      	adds	r3, r3, r1
 80039e0:	603a      	str	r2, [r7, #0]
 80039e2:	60b3      	str	r3, [r6, #8]
 80039e4:	6873      	ldr	r3, [r6, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	6073      	str	r3, [r6, #4]
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	dd00      	ble.n	80039f0 <_svfprintf_r+0x670>
 80039ee:	e38c      	b.n	800410a <_svfprintf_r+0xd8a>
 80039f0:	3708      	adds	r7, #8
 80039f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80039f4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80039f6:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <_svfprintf_r+0x81c>)
 80039f8:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <_svfprintf_r+0x818>)
 80039fa:	f004 ee50 	blx	800869c <__aeabi_dcmpeq>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d100      	bne.n	8003a04 <_svfprintf_r+0x684>
 8003a02:	e10d      	b.n	8003c20 <_svfprintf_r+0x8a0>
 8003a04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003a06:	3c01      	subs	r4, #1
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	dd3b      	ble.n	8003a84 <_svfprintf_r+0x704>
 8003a0c:	2c10      	cmp	r4, #16
 8003a0e:	dc01      	bgt.n	8003a14 <_svfprintf_r+0x694>
 8003a10:	f000 fe19 	bl	8004646 <_svfprintf_r+0x12c6>
 8003a14:	4863      	ldr	r0, [pc, #396]	; (8003ba4 <_svfprintf_r+0x824>)
 8003a16:	2110      	movs	r1, #16
 8003a18:	4680      	mov	r8, r0
 8003a1a:	468a      	mov	sl, r1
 8003a1c:	1c3b      	adds	r3, r7, #0
 8003a1e:	44c2      	add	sl, r8
 8003a20:	465f      	mov	r7, fp
 8003a22:	4689      	mov	r9, r1
 8003a24:	46ab      	mov	fp, r5
 8003a26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a28:	e003      	b.n	8003a32 <_svfprintf_r+0x6b2>
 8003a2a:	3c10      	subs	r4, #16
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2c10      	cmp	r4, #16
 8003a30:	dd17      	ble.n	8003a62 <_svfprintf_r+0x6e2>
 8003a32:	68b2      	ldr	r2, [r6, #8]
 8003a34:	4650      	mov	r0, sl
 8003a36:	3210      	adds	r2, #16
 8003a38:	4649      	mov	r1, r9
 8003a3a:	6018      	str	r0, [r3, #0]
 8003a3c:	6059      	str	r1, [r3, #4]
 8003a3e:	60b2      	str	r2, [r6, #8]
 8003a40:	6872      	ldr	r2, [r6, #4]
 8003a42:	3201      	adds	r2, #1
 8003a44:	6072      	str	r2, [r6, #4]
 8003a46:	2a07      	cmp	r2, #7
 8003a48:	ddef      	ble.n	8003a2a <_svfprintf_r+0x6aa>
 8003a4a:	1c28      	adds	r0, r5, #0
 8003a4c:	1c39      	adds	r1, r7, #0
 8003a4e:	1c32      	adds	r2, r6, #0
 8003a50:	f003 f86a 	bl	8006b28 <__ssprint_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d000      	beq.n	8003a5a <_svfprintf_r+0x6da>
 8003a58:	e757      	b.n	800390a <_svfprintf_r+0x58a>
 8003a5a:	3c10      	subs	r4, #16
 8003a5c:	ab34      	add	r3, sp, #208	; 0xd0
 8003a5e:	2c10      	cmp	r4, #16
 8003a60:	dce7      	bgt.n	8003a32 <_svfprintf_r+0x6b2>
 8003a62:	465d      	mov	r5, fp
 8003a64:	46bb      	mov	fp, r7
 8003a66:	1c1f      	adds	r7, r3, #0
 8003a68:	4643      	mov	r3, r8
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	68b2      	ldr	r2, [r6, #8]
 8003a70:	6873      	ldr	r3, [r6, #4]
 8003a72:	607c      	str	r4, [r7, #4]
 8003a74:	3301      	adds	r3, #1
 8003a76:	1914      	adds	r4, r2, r4
 8003a78:	60b4      	str	r4, [r6, #8]
 8003a7a:	6073      	str	r3, [r6, #4]
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	dd00      	ble.n	8003a82 <_svfprintf_r+0x702>
 8003a80:	e0dd      	b.n	8003c3e <_svfprintf_r+0x8be>
 8003a82:	3708      	adds	r7, #8
 8003a84:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003a86:	68b2      	ldr	r2, [r6, #8]
 8003a88:	ab23      	add	r3, sp, #140	; 0x8c
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	6079      	str	r1, [r7, #4]
 8003a8e:	1853      	adds	r3, r2, r1
 8003a90:	e663      	b.n	800375a <_svfprintf_r+0x3da>
 8003a92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a94:	4659      	mov	r1, fp
 8003a96:	1c32      	adds	r2, r6, #0
 8003a98:	f003 f846 	bl	8006b28 <__ssprint_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d100      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003aa0:	e6b7      	b.n	8003812 <_svfprintf_r+0x492>
 8003aa2:	46d9      	mov	r9, fp
 8003aa4:	e732      	b.n	800390c <_svfprintf_r+0x58c>
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	aa34      	add	r2, sp, #208	; 0xd0
 8003aaa:	910e      	str	r1, [sp, #56]	; 0x38
 8003aac:	9213      	str	r2, [sp, #76]	; 0x4c
 8003aae:	e585      	b.n	80035bc <_svfprintf_r+0x23c>
 8003ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	1c32      	adds	r2, r6, #0
 8003ab6:	f003 f837 	bl	8006b28 <__ssprint_r>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1f1      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003abe:	af34      	add	r7, sp, #208	; 0xd0
 8003ac0:	e4b0      	b.n	8003424 <_svfprintf_r+0xa4>
 8003ac2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	1c32      	adds	r2, r6, #0
 8003ac8:	f003 f82e 	bl	8006b28 <__ssprint_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d1e8      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003ad0:	af34      	add	r7, sp, #208	; 0xd0
 8003ad2:	e638      	b.n	8003746 <_svfprintf_r+0x3c6>
 8003ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ad6:	4659      	mov	r1, fp
 8003ad8:	1c32      	adds	r2, r6, #0
 8003ada:	f003 f825 	bl	8006b28 <__ssprint_r>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d1df      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003ae2:	af34      	add	r7, sp, #208	; 0xd0
 8003ae4:	e5d9      	b.n	800369a <_svfprintf_r+0x31a>
 8003ae6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ae8:	4659      	mov	r1, fp
 8003aea:	1c32      	adds	r2, r6, #0
 8003aec:	f003 f81c 	bl	8006b28 <__ssprint_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfprintf_r+0x722>
 8003af4:	af34      	add	r7, sp, #208	; 0xd0
 8003af6:	e5e1      	b.n	80036bc <_svfprintf_r+0x33c>
 8003af8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	dc00      	bgt.n	8003b00 <_svfprintf_r+0x780>
 8003afe:	e200      	b.n	8003f02 <_svfprintf_r+0xb82>
 8003b00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003b06:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003b08:	18d2      	adds	r2, r2, r3
 8003b0a:	920c      	str	r2, [sp, #48]	; 0x30
 8003b0c:	1a14      	subs	r4, r2, r0
 8003b0e:	428c      	cmp	r4, r1
 8003b10:	dd00      	ble.n	8003b14 <_svfprintf_r+0x794>
 8003b12:	1c0c      	adds	r4, r1, #0
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	dd0d      	ble.n	8003b34 <_svfprintf_r+0x7b4>
 8003b18:	68b0      	ldr	r0, [r6, #8]
 8003b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b1c:	1903      	adds	r3, r0, r4
 8003b1e:	603a      	str	r2, [r7, #0]
 8003b20:	607c      	str	r4, [r7, #4]
 8003b22:	60b3      	str	r3, [r6, #8]
 8003b24:	6873      	ldr	r3, [r6, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	6073      	str	r3, [r6, #4]
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	dd01      	ble.n	8003b32 <_svfprintf_r+0x7b2>
 8003b2e:	f000 fc35 	bl	800439c <_svfprintf_r+0x101c>
 8003b32:	3708      	adds	r7, #8
 8003b34:	43e3      	mvns	r3, r4
 8003b36:	17db      	asrs	r3, r3, #31
 8003b38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003b3a:	401c      	ands	r4, r3
 8003b3c:	1b0c      	subs	r4, r1, r4
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	dc00      	bgt.n	8003b44 <_svfprintf_r+0x7c4>
 8003b42:	e274      	b.n	800402e <_svfprintf_r+0xcae>
 8003b44:	2c10      	cmp	r4, #16
 8003b46:	dc01      	bgt.n	8003b4c <_svfprintf_r+0x7cc>
 8003b48:	f000 fd8e 	bl	8004668 <_svfprintf_r+0x12e8>
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <_svfprintf_r+0x824>)
 8003b4e:	2010      	movs	r0, #16
 8003b50:	4698      	mov	r8, r3
 8003b52:	4682      	mov	sl, r0
 8003b54:	1c3b      	adds	r3, r7, #0
 8003b56:	44c2      	add	sl, r8
 8003b58:	465f      	mov	r7, fp
 8003b5a:	4681      	mov	r9, r0
 8003b5c:	46ab      	mov	fp, r5
 8003b5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b60:	e004      	b.n	8003b6c <_svfprintf_r+0x7ec>
 8003b62:	3308      	adds	r3, #8
 8003b64:	3c10      	subs	r4, #16
 8003b66:	2c10      	cmp	r4, #16
 8003b68:	dc00      	bgt.n	8003b6c <_svfprintf_r+0x7ec>
 8003b6a:	e24f      	b.n	800400c <_svfprintf_r+0xc8c>
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	68b2      	ldr	r2, [r6, #8]
 8003b72:	4648      	mov	r0, r9
 8003b74:	3210      	adds	r2, #16
 8003b76:	6058      	str	r0, [r3, #4]
 8003b78:	60b2      	str	r2, [r6, #8]
 8003b7a:	6872      	ldr	r2, [r6, #4]
 8003b7c:	3201      	adds	r2, #1
 8003b7e:	6072      	str	r2, [r6, #4]
 8003b80:	2a07      	cmp	r2, #7
 8003b82:	ddee      	ble.n	8003b62 <_svfprintf_r+0x7e2>
 8003b84:	1c28      	adds	r0, r5, #0
 8003b86:	1c39      	adds	r1, r7, #0
 8003b88:	1c32      	adds	r2, r6, #0
 8003b8a:	f002 ffcd 	bl	8006b28 <__ssprint_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d000      	beq.n	8003b94 <_svfprintf_r+0x814>
 8003b92:	e6ba      	b.n	800390a <_svfprintf_r+0x58a>
 8003b94:	ab34      	add	r3, sp, #208	; 0xd0
 8003b96:	e7e5      	b.n	8003b64 <_svfprintf_r+0x7e4>
	...
 8003ba0:	0800906c 	.word	0x0800906c
 8003ba4:	08008c44 	.word	0x08008c44
 8003ba8:	2300      	movs	r3, #0
 8003baa:	a834      	add	r0, sp, #208	; 0xd0
 8003bac:	930e      	str	r3, [sp, #56]	; 0x38
 8003bae:	9013      	str	r0, [sp, #76]	; 0x4c
 8003bb0:	e504      	b.n	80035bc <_svfprintf_r+0x23c>
 8003bb2:	466b      	mov	r3, sp
 8003bb4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8003bb6:	33cf      	adds	r3, #207	; 0xcf
 8003bb8:	220f      	movs	r2, #15
 8003bba:	1c19      	adds	r1, r3, #0
 8003bbc:	1c13      	adds	r3, r2, #0
 8003bbe:	4023      	ands	r3, r4
 8003bc0:	5cc3      	ldrb	r3, [r0, r3]
 8003bc2:	0924      	lsrs	r4, r4, #4
 8003bc4:	700b      	strb	r3, [r1, #0]
 8003bc6:	1e4b      	subs	r3, r1, #1
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	d1f6      	bne.n	8003bba <_svfprintf_r+0x83a>
 8003bcc:	9808      	ldr	r0, [sp, #32]
 8003bce:	1a40      	subs	r0, r0, r1
 8003bd0:	9113      	str	r1, [sp, #76]	; 0x4c
 8003bd2:	900e      	str	r0, [sp, #56]	; 0x38
 8003bd4:	e4f2      	b.n	80035bc <_svfprintf_r+0x23c>
 8003bd6:	2c09      	cmp	r4, #9
 8003bd8:	d962      	bls.n	8003ca0 <_svfprintf_r+0x920>
 8003bda:	466b      	mov	r3, sp
 8003bdc:	33cf      	adds	r3, #207	; 0xcf
 8003bde:	46a8      	mov	r8, r5
 8003be0:	1c20      	adds	r0, r4, #0
 8003be2:	210a      	movs	r1, #10
 8003be4:	1c1d      	adds	r5, r3, #0
 8003be6:	f003 efde 	blx	8007ba4 <__aeabi_uidivmod>
 8003bea:	3130      	adds	r1, #48	; 0x30
 8003bec:	7029      	strb	r1, [r5, #0]
 8003bee:	1c20      	adds	r0, r4, #0
 8003bf0:	210a      	movs	r1, #10
 8003bf2:	f003 ef5a 	blx	8007aa8 <__aeabi_uidiv>
 8003bf6:	1e6b      	subs	r3, r5, #1
 8003bf8:	1c04      	adds	r4, r0, #0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d1f0      	bne.n	8003be0 <_svfprintf_r+0x860>
 8003bfe:	9513      	str	r5, [sp, #76]	; 0x4c
 8003c00:	9a08      	ldr	r2, [sp, #32]
 8003c02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c04:	1ad2      	subs	r2, r2, r3
 8003c06:	4645      	mov	r5, r8
 8003c08:	920e      	str	r2, [sp, #56]	; 0x38
 8003c0a:	e4d7      	b.n	80035bc <_svfprintf_r+0x23c>
 8003c0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c0e:	4659      	mov	r1, fp
 8003c10:	1c32      	adds	r2, r6, #0
 8003c12:	f002 ff89 	bl	8006b28 <__ssprint_r>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d000      	beq.n	8003c1c <_svfprintf_r+0x89c>
 8003c1a:	e742      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003c1c:	af34      	add	r7, sp, #208	; 0xd0
 8003c1e:	e52a      	b.n	8003676 <_svfprintf_r+0x2f6>
 8003c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c22:	3301      	adds	r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c28:	68b2      	ldr	r2, [r6, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	60b3      	str	r3, [r6, #8]
 8003c32:	6873      	ldr	r3, [r6, #4]
 8003c34:	3301      	adds	r3, #1
 8003c36:	6073      	str	r3, [r6, #4]
 8003c38:	2b07      	cmp	r3, #7
 8003c3a:	dc00      	bgt.n	8003c3e <_svfprintf_r+0x8be>
 8003c3c:	e721      	b.n	8003a82 <_svfprintf_r+0x702>
 8003c3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c40:	4659      	mov	r1, fp
 8003c42:	1c32      	adds	r2, r6, #0
 8003c44:	f002 ff70 	bl	8006b28 <__ssprint_r>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d000      	beq.n	8003c4e <_svfprintf_r+0x8ce>
 8003c4c:	e729      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003c4e:	af34      	add	r7, sp, #208	; 0xd0
 8003c50:	e718      	b.n	8003a84 <_svfprintf_r+0x704>
 8003c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c54:	065b      	lsls	r3, r3, #25
 8003c56:	d400      	bmi.n	8003c5a <_svfprintf_r+0x8da>
 8003c58:	e485      	b.n	8003566 <_svfprintf_r+0x1e6>
 8003c5a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003c5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c5e:	3104      	adds	r1, #4
 8003c60:	2400      	movs	r4, #0
 8003c62:	5f04      	ldrsh	r4, [r0, r4]
 8003c64:	9110      	str	r1, [sp, #64]	; 0x40
 8003c66:	e482      	b.n	800356e <_svfprintf_r+0x1ee>
 8003c68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c6a:	0649      	lsls	r1, r1, #25
 8003c6c:	d400      	bmi.n	8003c70 <_svfprintf_r+0x8f0>
 8003c6e:	e41e      	b.n	80034ae <_svfprintf_r+0x12e>
 8003c70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c72:	8814      	ldrh	r4, [r2, #0]
 8003c74:	3204      	adds	r2, #4
 8003c76:	1c21      	adds	r1, r4, #0
 8003c78:	1e4b      	subs	r3, r1, #1
 8003c7a:	4199      	sbcs	r1, r3
 8003c7c:	9210      	str	r2, [sp, #64]	; 0x40
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f7ff fc1e 	bl	80034c0 <_svfprintf_r+0x140>
 8003c84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003c86:	6804      	ldr	r4, [r0, #0]
 8003c88:	3004      	adds	r0, #4
 8003c8a:	1c21      	adds	r1, r4, #0
 8003c8c:	1e4b      	subs	r3, r1, #1
 8003c8e:	4199      	sbcs	r1, r3
 8003c90:	9010      	str	r0, [sp, #64]	; 0x40
 8003c92:	2300      	movs	r3, #0
 8003c94:	f7ff fc14 	bl	80034c0 <_svfprintf_r+0x140>
 8003c98:	9a08      	ldr	r2, [sp, #32]
 8003c9a:	1a51      	subs	r1, r2, r1
 8003c9c:	910e      	str	r1, [sp, #56]	; 0x38
 8003c9e:	e48d      	b.n	80035bc <_svfprintf_r+0x23c>
 8003ca0:	23cf      	movs	r3, #207	; 0xcf
 8003ca2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003ca4:	446b      	add	r3, sp
 8003ca6:	3430      	adds	r4, #48	; 0x30
 8003ca8:	701c      	strb	r4, [r3, #0]
 8003caa:	900e      	str	r0, [sp, #56]	; 0x38
 8003cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8003cae:	e485      	b.n	80035bc <_svfprintf_r+0x23c>
 8003cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	1c1a      	adds	r2, r3, #0
 8003cba:	3208      	adds	r2, #8
 8003cbc:	9210      	str	r2, [sp, #64]	; 0x40
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	1c02      	adds	r2, r0, #0
 8003cc4:	1c0b      	adds	r3, r1, #0
 8003cc6:	4681      	mov	r9, r0
 8003cc8:	4688      	mov	r8, r1
 8003cca:	9218      	str	r2, [sp, #96]	; 0x60
 8003ccc:	9319      	str	r3, [sp, #100]	; 0x64
 8003cce:	f002 fed7 	bl	8006a80 <__fpclassifyd>
 8003cd2:	2801      	cmp	r0, #1
 8003cd4:	d000      	beq.n	8003cd8 <_svfprintf_r+0x958>
 8003cd6:	e242      	b.n	800415e <_svfprintf_r+0xdde>
 8003cd8:	4648      	mov	r0, r9
 8003cda:	4641      	mov	r1, r8
 8003cdc:	4bc5      	ldr	r3, [pc, #788]	; (8003ff4 <_svfprintf_r+0xc74>)
 8003cde:	4ac4      	ldr	r2, [pc, #784]	; (8003ff0 <_svfprintf_r+0xc70>)
 8003ce0:	f004 ece8 	blx	80086b4 <__aeabi_dcmplt>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d001      	beq.n	8003cec <_svfprintf_r+0x96c>
 8003ce8:	f000 fc27 	bl	800453a <_svfprintf_r+0x11ba>
 8003cec:	227b      	movs	r2, #123	; 0x7b
 8003cee:	446a      	add	r2, sp
 8003cf0:	7813      	ldrb	r3, [r2, #0]
 8003cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cf4:	2947      	cmp	r1, #71	; 0x47
 8003cf6:	dd00      	ble.n	8003cfa <_svfprintf_r+0x97a>
 8003cf8:	e300      	b.n	80042fc <_svfprintf_r+0xf7c>
 8003cfa:	4abf      	ldr	r2, [pc, #764]	; (8003ff8 <_svfprintf_r+0xc78>)
 8003cfc:	9213      	str	r2, [sp, #76]	; 0x4c
 8003cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	4391      	bics	r1, r2
 8003d04:	2203      	movs	r2, #3
 8003d06:	910a      	str	r1, [sp, #40]	; 0x28
 8003d08:	920d      	str	r2, [sp, #52]	; 0x34
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2200      	movs	r2, #0
 8003d10:	900e      	str	r0, [sp, #56]	; 0x38
 8003d12:	9114      	str	r1, [sp, #80]	; 0x50
 8003d14:	9216      	str	r2, [sp, #88]	; 0x58
 8003d16:	e45e      	b.n	80035d6 <_svfprintf_r+0x256>
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	4662      	mov	r2, ip
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d20:	f7ff fb9e 	bl	8003460 <_svfprintf_r+0xe0>
 8003d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d26:	9709      	str	r7, [sp, #36]	; 0x24
 8003d28:	2200      	movs	r2, #0
 8003d2a:	3b30      	subs	r3, #48	; 0x30
 8003d2c:	0097      	lsls	r7, r2, #2
 8003d2e:	18ba      	adds	r2, r7, r2
 8003d30:	782f      	ldrb	r7, [r5, #0]
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	18d2      	adds	r2, r2, r3
 8003d36:	1c3b      	adds	r3, r7, #0
 8003d38:	3b30      	subs	r3, #48	; 0x30
 8003d3a:	3501      	adds	r5, #1
 8003d3c:	2b09      	cmp	r3, #9
 8003d3e:	d9f5      	bls.n	8003d2c <_svfprintf_r+0x9ac>
 8003d40:	970c      	str	r7, [sp, #48]	; 0x30
 8003d42:	9211      	str	r2, [sp, #68]	; 0x44
 8003d44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d46:	f7ff fb8e 	bl	8003466 <_svfprintf_r+0xe6>
 8003d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	930a      	str	r3, [sp, #40]	; 0x28
 8003d52:	f7ff fb85 	bl	8003460 <_svfprintf_r+0xe0>
 8003d56:	4aa9      	ldr	r2, [pc, #676]	; (8003ffc <_svfprintf_r+0xc7c>)
 8003d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d5a:	921c      	str	r2, [sp, #112]	; 0x70
 8003d5c:	06db      	lsls	r3, r3, #27
 8003d5e:	d400      	bmi.n	8003d62 <_svfprintf_r+0x9e2>
 8003d60:	e08b      	b.n	8003e7a <_svfprintf_r+0xafa>
 8003d62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d64:	6804      	ldr	r4, [r0, #0]
 8003d66:	3004      	adds	r0, #4
 8003d68:	9010      	str	r0, [sp, #64]	; 0x40
 8003d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d6c:	07c0      	lsls	r0, r0, #31
 8003d6e:	d500      	bpl.n	8003d72 <_svfprintf_r+0x9f2>
 8003d70:	e122      	b.n	8003fb8 <_svfprintf_r+0xc38>
 8003d72:	1c21      	adds	r1, r4, #0
 8003d74:	1e4b      	subs	r3, r1, #1
 8003d76:	4199      	sbcs	r1, r3
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f7ff fba1 	bl	80034c0 <_svfprintf_r+0x140>
 8003d7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d80:	1c13      	adds	r3, r2, #0
 8003d82:	3304      	adds	r3, #4
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	9310      	str	r3, [sp, #64]	; 0x40
 8003d88:	ab2a      	add	r3, sp, #168	; 0xa8
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	f7ff fb76 	bl	800347c <_svfprintf_r+0xfc>
 8003d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d92:	06db      	lsls	r3, r3, #27
 8003d94:	d500      	bpl.n	8003d98 <_svfprintf_r+0xa18>
 8003d96:	e11e      	b.n	8003fd6 <_svfprintf_r+0xc56>
 8003d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d9a:	0652      	lsls	r2, r2, #25
 8003d9c:	d400      	bmi.n	8003da0 <_svfprintf_r+0xa20>
 8003d9e:	e11a      	b.n	8003fd6 <_svfprintf_r+0xc56>
 8003da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003da2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003da8:	3204      	adds	r2, #4
 8003daa:	8019      	strh	r1, [r3, #0]
 8003dac:	9210      	str	r2, [sp, #64]	; 0x40
 8003dae:	f7ff fb1c 	bl	80033ea <_svfprintf_r+0x6a>
 8003db2:	227b      	movs	r2, #123	; 0x7b
 8003db4:	446a      	add	r2, sp
 8003db6:	7813      	ldrb	r3, [r2, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <_svfprintf_r+0xa40>
 8003dbc:	f7ff fb50 	bl	8003460 <_svfprintf_r+0xe0>
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	7013      	strb	r3, [r2, #0]
 8003dc4:	f7ff fb4c 	bl	8003460 <_svfprintf_r+0xe0>
 8003dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dca:	2301      	movs	r3, #1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	920a      	str	r2, [sp, #40]	; 0x28
 8003dd0:	f7ff fb46 	bl	8003460 <_svfprintf_r+0xe0>
 8003dd4:	237b      	movs	r3, #123	; 0x7b
 8003dd6:	446b      	add	r3, sp
 8003dd8:	701c      	strb	r4, [r3, #0]
 8003dda:	f7ff fb41 	bl	8003460 <_svfprintf_r+0xe0>
 8003dde:	217b      	movs	r1, #123	; 0x7b
 8003de0:	2300      	movs	r3, #0
 8003de2:	4469      	add	r1, sp
 8003de4:	700b      	strb	r3, [r1, #0]
 8003de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003de8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	3404      	adds	r4, #4
 8003dee:	9213      	str	r2, [sp, #76]	; 0x4c
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d100      	bne.n	8003df6 <_svfprintf_r+0xa76>
 8003df4:	e31c      	b.n	8004430 <_svfprintf_r+0x10b0>
 8003df6:	4652      	mov	r2, sl
 8003df8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	da00      	bge.n	8003e00 <_svfprintf_r+0xa80>
 8003dfe:	e2c5      	b.n	800438c <_svfprintf_r+0x100c>
 8003e00:	2100      	movs	r1, #0
 8003e02:	f002 f8fb 	bl	8005ffc <memchr>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d100      	bne.n	8003e0c <_svfprintf_r+0xa8c>
 8003e0a:	e3a0      	b.n	800454e <_svfprintf_r+0x11ce>
 8003e0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003e0e:	1a40      	subs	r0, r0, r1
 8003e10:	900e      	str	r0, [sp, #56]	; 0x38
 8003e12:	4550      	cmp	r0, sl
 8003e14:	dc00      	bgt.n	8003e18 <_svfprintf_r+0xa98>
 8003e16:	e1de      	b.n	80041d6 <_svfprintf_r+0xe56>
 8003e18:	4652      	mov	r2, sl
 8003e1a:	207b      	movs	r0, #123	; 0x7b
 8003e1c:	4653      	mov	r3, sl
 8003e1e:	4468      	add	r0, sp
 8003e20:	920e      	str	r2, [sp, #56]	; 0x38
 8003e22:	2100      	movs	r1, #0
 8003e24:	2200      	movs	r2, #0
 8003e26:	930d      	str	r3, [sp, #52]	; 0x34
 8003e28:	9410      	str	r4, [sp, #64]	; 0x40
 8003e2a:	7803      	ldrb	r3, [r0, #0]
 8003e2c:	9114      	str	r1, [sp, #80]	; 0x50
 8003e2e:	9216      	str	r2, [sp, #88]	; 0x58
 8003e30:	f7ff fbd1 	bl	80035d6 <_svfprintf_r+0x256>
 8003e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	1c19      	adds	r1, r3, #0
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	3104      	adds	r1, #4
 8003e42:	ab1f      	add	r3, sp, #124	; 0x7c
 8003e44:	920a      	str	r2, [sp, #40]	; 0x28
 8003e46:	2230      	movs	r2, #48	; 0x30
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	9110      	str	r1, [sp, #64]	; 0x40
 8003e4c:	2278      	movs	r2, #120	; 0x78
 8003e4e:	1c21      	adds	r1, r4, #0
 8003e50:	705a      	strb	r2, [r3, #1]
 8003e52:	1e4b      	subs	r3, r1, #1
 8003e54:	4199      	sbcs	r1, r3
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <_svfprintf_r+0xc80>)
 8003e58:	2078      	movs	r0, #120	; 0x78
 8003e5a:	931c      	str	r3, [sp, #112]	; 0x70
 8003e5c:	900c      	str	r0, [sp, #48]	; 0x30
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f7ff fb2e 	bl	80034c0 <_svfprintf_r+0x140>
 8003e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e66:	4302      	orrs	r2, r0
 8003e68:	920a      	str	r2, [sp, #40]	; 0x28
 8003e6a:	f7ff faf9 	bl	8003460 <_svfprintf_r+0xe0>
 8003e6e:	4964      	ldr	r1, [pc, #400]	; (8004000 <_svfprintf_r+0xc80>)
 8003e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e72:	911c      	str	r1, [sp, #112]	; 0x70
 8003e74:	06db      	lsls	r3, r3, #27
 8003e76:	d500      	bpl.n	8003e7a <_svfprintf_r+0xafa>
 8003e78:	e773      	b.n	8003d62 <_svfprintf_r+0x9e2>
 8003e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e7c:	0649      	lsls	r1, r1, #25
 8003e7e:	d400      	bmi.n	8003e82 <_svfprintf_r+0xb02>
 8003e80:	e195      	b.n	80041ae <_svfprintf_r+0xe2e>
 8003e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e84:	8814      	ldrh	r4, [r2, #0]
 8003e86:	3204      	adds	r2, #4
 8003e88:	9210      	str	r2, [sp, #64]	; 0x40
 8003e8a:	e76e      	b.n	8003d6a <_svfprintf_r+0x9ea>
 8003e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e8e:	464a      	mov	r2, r9
 8003e90:	4313      	orrs	r3, r2
 8003e92:	930a      	str	r3, [sp, #40]	; 0x28
 8003e94:	f7ff fae4 	bl	8003460 <_svfprintf_r+0xe0>
 8003e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e9a:	4303      	orrs	r3, r0
 8003e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e9e:	f7ff fadf 	bl	8003460 <_svfprintf_r+0xe0>
 8003ea2:	782a      	ldrb	r2, [r5, #0]
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	920c      	str	r2, [sp, #48]	; 0x30
 8003ea8:	2a2a      	cmp	r2, #42	; 0x2a
 8003eaa:	d101      	bne.n	8003eb0 <_svfprintf_r+0xb30>
 8003eac:	f000 fc05 	bl	80046ba <_svfprintf_r+0x133a>
 8003eb0:	1c13      	adds	r3, r2, #0
 8003eb2:	3b30      	subs	r3, #48	; 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4692      	mov	sl, r2
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d901      	bls.n	8003ec0 <_svfprintf_r+0xb40>
 8003ebc:	f7ff fad3 	bl	8003466 <_svfprintf_r+0xe6>
 8003ec0:	46ba      	mov	sl, r7
 8003ec2:	0097      	lsls	r7, r2, #2
 8003ec4:	18ba      	adds	r2, r7, r2
 8003ec6:	782f      	ldrb	r7, [r5, #0]
 8003ec8:	0052      	lsls	r2, r2, #1
 8003eca:	189a      	adds	r2, r3, r2
 8003ecc:	1c3b      	adds	r3, r7, #0
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	3501      	adds	r5, #1
 8003ed2:	2b09      	cmp	r3, #9
 8003ed4:	d9f5      	bls.n	8003ec2 <_svfprintf_r+0xb42>
 8003ed6:	970c      	str	r7, [sp, #48]	; 0x30
 8003ed8:	4657      	mov	r7, sl
 8003eda:	4692      	mov	sl, r2
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	db01      	blt.n	8003ee4 <_svfprintf_r+0xb64>
 8003ee0:	f7ff fac1 	bl	8003466 <_svfprintf_r+0xe6>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	425b      	negs	r3, r3
 8003ee8:	469a      	mov	sl, r3
 8003eea:	f7ff fabc 	bl	8003466 <_svfprintf_r+0xe6>
 8003eee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	1c32      	adds	r2, r6, #0
 8003ef4:	f002 fe18 	bl	8006b28 <__ssprint_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d000      	beq.n	8003efe <_svfprintf_r+0xb7e>
 8003efc:	e5d1      	b.n	8003aa2 <_svfprintf_r+0x722>
 8003efe:	af34      	add	r7, sp, #208	; 0xd0
 8003f00:	e4bf      	b.n	8003882 <_svfprintf_r+0x502>
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <_svfprintf_r+0xc84>)
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	68b3      	ldr	r3, [r6, #8]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60b3      	str	r3, [r6, #8]
 8003f10:	6873      	ldr	r3, [r6, #4]
 8003f12:	3301      	adds	r3, #1
 8003f14:	6073      	str	r3, [r6, #4]
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	dd00      	ble.n	8003f1c <_svfprintf_r+0xb9c>
 8003f1a:	e203      	b.n	8004324 <_svfprintf_r+0xfa4>
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	d107      	bne.n	8003f32 <_svfprintf_r+0xbb2>
 8003f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d104      	bne.n	8003f32 <_svfprintf_r+0xbb2>
 8003f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2a:	07db      	lsls	r3, r3, #31
 8003f2c:	d401      	bmi.n	8003f32 <_svfprintf_r+0xbb2>
 8003f2e:	f7ff fc1b 	bl	8003768 <_svfprintf_r+0x3e8>
 8003f32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f34:	68b2      	ldr	r2, [r6, #8]
 8003f36:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003f38:	188b      	adds	r3, r1, r2
 8003f3a:	6038      	str	r0, [r7, #0]
 8003f3c:	6079      	str	r1, [r7, #4]
 8003f3e:	60b3      	str	r3, [r6, #8]
 8003f40:	6873      	ldr	r3, [r6, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	6073      	str	r3, [r6, #4]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	dd00      	ble.n	8003f4c <_svfprintf_r+0xbcc>
 8003f4a:	e30d      	b.n	8004568 <_svfprintf_r+0x11e8>
 8003f4c:	1c3b      	adds	r3, r7, #0
 8003f4e:	3308      	adds	r3, #8
 8003f50:	4264      	negs	r4, r4
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	dc00      	bgt.n	8003f58 <_svfprintf_r+0xbd8>
 8003f56:	e207      	b.n	8004368 <_svfprintf_r+0xfe8>
 8003f58:	2c10      	cmp	r4, #16
 8003f5a:	dc00      	bgt.n	8003f5e <_svfprintf_r+0xbde>
 8003f5c:	e3aa      	b.n	80046b4 <_svfprintf_r+0x1334>
 8003f5e:	492a      	ldr	r1, [pc, #168]	; (8004008 <_svfprintf_r+0xc88>)
 8003f60:	2210      	movs	r2, #16
 8003f62:	4688      	mov	r8, r1
 8003f64:	4691      	mov	r9, r2
 8003f66:	46aa      	mov	sl, r5
 8003f68:	44c1      	add	r9, r8
 8003f6a:	2710      	movs	r7, #16
 8003f6c:	465d      	mov	r5, fp
 8003f6e:	e004      	b.n	8003f7a <_svfprintf_r+0xbfa>
 8003f70:	3308      	adds	r3, #8
 8003f72:	3c10      	subs	r4, #16
 8003f74:	2c10      	cmp	r4, #16
 8003f76:	dc00      	bgt.n	8003f7a <_svfprintf_r+0xbfa>
 8003f78:	e1e6      	b.n	8004348 <_svfprintf_r+0xfc8>
 8003f7a:	68b2      	ldr	r2, [r6, #8]
 8003f7c:	4648      	mov	r0, r9
 8003f7e:	3210      	adds	r2, #16
 8003f80:	6018      	str	r0, [r3, #0]
 8003f82:	605f      	str	r7, [r3, #4]
 8003f84:	60b2      	str	r2, [r6, #8]
 8003f86:	6872      	ldr	r2, [r6, #4]
 8003f88:	3201      	adds	r2, #1
 8003f8a:	6072      	str	r2, [r6, #4]
 8003f8c:	2a07      	cmp	r2, #7
 8003f8e:	ddef      	ble.n	8003f70 <_svfprintf_r+0xbf0>
 8003f90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f92:	1c29      	adds	r1, r5, #0
 8003f94:	1c32      	adds	r2, r6, #0
 8003f96:	f002 fdc7 	bl	8006b28 <__ssprint_r>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d123      	bne.n	8003fe6 <_svfprintf_r+0xc66>
 8003f9e:	ab34      	add	r3, sp, #208	; 0xd0
 8003fa0:	e7e7      	b.n	8003f72 <_svfprintf_r+0xbf2>
 8003fa2:	68b3      	ldr	r3, [r6, #8]
 8003fa4:	46d9      	mov	r9, fp
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d100      	bne.n	8003fac <_svfprintf_r+0xc2c>
 8003faa:	e4af      	b.n	800390c <_svfprintf_r+0x58c>
 8003fac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fae:	4659      	mov	r1, fp
 8003fb0:	1c32      	adds	r2, r6, #0
 8003fb2:	f002 fdb9 	bl	8006b28 <__ssprint_r>
 8003fb6:	e4a9      	b.n	800390c <_svfprintf_r+0x58c>
 8003fb8:	2c00      	cmp	r4, #0
 8003fba:	d100      	bne.n	8003fbe <_svfprintf_r+0xc3e>
 8003fbc:	e0cb      	b.n	8004156 <_svfprintf_r+0xdd6>
 8003fbe:	ab1f      	add	r3, sp, #124	; 0x7c
 8003fc0:	2230      	movs	r2, #48	; 0x30
 8003fc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc8:	7059      	strb	r1, [r3, #1]
 8003fca:	2302      	movs	r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	920a      	str	r2, [sp, #40]	; 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	f7ff fa75 	bl	80034c0 <_svfprintf_r+0x140>
 8003fd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	3004      	adds	r0, #4
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	9010      	str	r0, [sp, #64]	; 0x40
 8003fe2:	f7ff fa02 	bl	80033ea <_svfprintf_r+0x6a>
 8003fe6:	46a9      	mov	r9, r5
 8003fe8:	e490      	b.n	800390c <_svfprintf_r+0x58c>
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46c0      	nop			; (mov r8, r8)
	...
 8003ff8:	0800902c 	.word	0x0800902c
 8003ffc:	0800903c 	.word	0x0800903c
 8004000:	08009050 	.word	0x08009050
 8004004:	0800906c 	.word	0x0800906c
 8004008:	08008c44 	.word	0x08008c44
 800400c:	465d      	mov	r5, fp
 800400e:	46bb      	mov	fp, r7
 8004010:	1c1f      	adds	r7, r3, #0
 8004012:	4643      	mov	r3, r8
 8004014:	3310      	adds	r3, #16
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	68b1      	ldr	r1, [r6, #8]
 800401a:	6873      	ldr	r3, [r6, #4]
 800401c:	607c      	str	r4, [r7, #4]
 800401e:	3301      	adds	r3, #1
 8004020:	190c      	adds	r4, r1, r4
 8004022:	60b4      	str	r4, [r6, #8]
 8004024:	6073      	str	r3, [r6, #4]
 8004026:	2b07      	cmp	r3, #7
 8004028:	dd00      	ble.n	800402c <_svfprintf_r+0xcac>
 800402a:	e1e7      	b.n	80043fc <_svfprintf_r+0x107c>
 800402c:	3708      	adds	r7, #8
 800402e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004030:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004032:	4690      	mov	r8, r2
 8004034:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004036:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004038:	4490      	add	r8, r2
 800403a:	4283      	cmp	r3, r0
 800403c:	db4b      	blt.n	80040d6 <_svfprintf_r+0xd56>
 800403e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004040:	07c9      	lsls	r1, r1, #31
 8004042:	d448      	bmi.n	80040d6 <_svfprintf_r+0xd56>
 8004044:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004046:	4641      	mov	r1, r8
 8004048:	1a42      	subs	r2, r0, r1
 800404a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800404c:	1ac3      	subs	r3, r0, r3
 800404e:	1c1c      	adds	r4, r3, #0
 8004050:	4293      	cmp	r3, r2
 8004052:	dd00      	ble.n	8004056 <_svfprintf_r+0xcd6>
 8004054:	1c14      	adds	r4, r2, #0
 8004056:	2c00      	cmp	r4, #0
 8004058:	dd0c      	ble.n	8004074 <_svfprintf_r+0xcf4>
 800405a:	68b0      	ldr	r0, [r6, #8]
 800405c:	4641      	mov	r1, r8
 800405e:	1902      	adds	r2, r0, r4
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	607c      	str	r4, [r7, #4]
 8004064:	60b2      	str	r2, [r6, #8]
 8004066:	6872      	ldr	r2, [r6, #4]
 8004068:	3201      	adds	r2, #1
 800406a:	6072      	str	r2, [r6, #4]
 800406c:	2a07      	cmp	r2, #7
 800406e:	dd00      	ble.n	8004072 <_svfprintf_r+0xcf2>
 8004070:	e1a0      	b.n	80043b4 <_svfprintf_r+0x1034>
 8004072:	3708      	adds	r7, #8
 8004074:	43e2      	mvns	r2, r4
 8004076:	17d2      	asrs	r2, r2, #31
 8004078:	4014      	ands	r4, r2
 800407a:	1b1c      	subs	r4, r3, r4
 800407c:	2c00      	cmp	r4, #0
 800407e:	dc01      	bgt.n	8004084 <_svfprintf_r+0xd04>
 8004080:	f7ff fb72 	bl	8003768 <_svfprintf_r+0x3e8>
 8004084:	2c10      	cmp	r4, #16
 8004086:	dc00      	bgt.n	800408a <_svfprintf_r+0xd0a>
 8004088:	e30e      	b.n	80046a8 <_svfprintf_r+0x1328>
 800408a:	48e5      	ldr	r0, [pc, #916]	; (8004420 <_svfprintf_r+0x10a0>)
 800408c:	2110      	movs	r1, #16
 800408e:	4680      	mov	r8, r0
 8004090:	468a      	mov	sl, r1
 8004092:	1c3b      	adds	r3, r7, #0
 8004094:	44c2      	add	sl, r8
 8004096:	465f      	mov	r7, fp
 8004098:	4689      	mov	r9, r1
 800409a:	46ab      	mov	fp, r5
 800409c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800409e:	e004      	b.n	80040aa <_svfprintf_r+0xd2a>
 80040a0:	3308      	adds	r3, #8
 80040a2:	3c10      	subs	r4, #16
 80040a4:	2c10      	cmp	r4, #16
 80040a6:	dc00      	bgt.n	80040aa <_svfprintf_r+0xd2a>
 80040a8:	e086      	b.n	80041b8 <_svfprintf_r+0xe38>
 80040aa:	68b2      	ldr	r2, [r6, #8]
 80040ac:	4650      	mov	r0, sl
 80040ae:	3210      	adds	r2, #16
 80040b0:	4649      	mov	r1, r9
 80040b2:	6018      	str	r0, [r3, #0]
 80040b4:	6059      	str	r1, [r3, #4]
 80040b6:	60b2      	str	r2, [r6, #8]
 80040b8:	6872      	ldr	r2, [r6, #4]
 80040ba:	3201      	adds	r2, #1
 80040bc:	6072      	str	r2, [r6, #4]
 80040be:	2a07      	cmp	r2, #7
 80040c0:	ddee      	ble.n	80040a0 <_svfprintf_r+0xd20>
 80040c2:	1c28      	adds	r0, r5, #0
 80040c4:	1c39      	adds	r1, r7, #0
 80040c6:	1c32      	adds	r2, r6, #0
 80040c8:	f002 fd2e 	bl	8006b28 <__ssprint_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d000      	beq.n	80040d2 <_svfprintf_r+0xd52>
 80040d0:	e41b      	b.n	800390a <_svfprintf_r+0x58a>
 80040d2:	ab34      	add	r3, sp, #208	; 0xd0
 80040d4:	e7e5      	b.n	80040a2 <_svfprintf_r+0xd22>
 80040d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80040d8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80040da:	68b1      	ldr	r1, [r6, #8]
 80040dc:	603a      	str	r2, [r7, #0]
 80040de:	1842      	adds	r2, r0, r1
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	60b2      	str	r2, [r6, #8]
 80040e4:	6872      	ldr	r2, [r6, #4]
 80040e6:	3201      	adds	r2, #1
 80040e8:	6072      	str	r2, [r6, #4]
 80040ea:	2a07      	cmp	r2, #7
 80040ec:	dd00      	ble.n	80040f0 <_svfprintf_r+0xd70>
 80040ee:	e16f      	b.n	80043d0 <_svfprintf_r+0x1050>
 80040f0:	3708      	adds	r7, #8
 80040f2:	e7a7      	b.n	8004044 <_svfprintf_r+0xcc4>
 80040f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040f6:	2301      	movs	r3, #1
 80040f8:	4203      	tst	r3, r0
 80040fa:	d000      	beq.n	80040fe <_svfprintf_r+0xd7e>
 80040fc:	e45d      	b.n	80039ba <_svfprintf_r+0x63a>
 80040fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	68b3      	ldr	r3, [r6, #8]
 8004104:	6038      	str	r0, [r7, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	e592      	b.n	8003c30 <_svfprintf_r+0x8b0>
 800410a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800410c:	4659      	mov	r1, fp
 800410e:	1c32      	adds	r2, r6, #0
 8004110:	f002 fd0a 	bl	8006b28 <__ssprint_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	d000      	beq.n	800411a <_svfprintf_r+0xd9a>
 8004118:	e4c3      	b.n	8003aa2 <_svfprintf_r+0x722>
 800411a:	af34      	add	r7, sp, #208	; 0xd0
 800411c:	e469      	b.n	80039f2 <_svfprintf_r+0x672>
 800411e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004120:	4659      	mov	r1, fp
 8004122:	1c32      	adds	r2, r6, #0
 8004124:	f002 fd00 	bl	8006b28 <__ssprint_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	d000      	beq.n	800412e <_svfprintf_r+0xdae>
 800412c:	e4b9      	b.n	8003aa2 <_svfprintf_r+0x722>
 800412e:	af34      	add	r7, sp, #208	; 0xd0
 8004130:	e451      	b.n	80039d6 <_svfprintf_r+0x656>
 8004132:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004134:	4659      	mov	r1, fp
 8004136:	1c32      	adds	r2, r6, #0
 8004138:	f002 fcf6 	bl	8006b28 <__ssprint_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	d000      	beq.n	8004142 <_svfprintf_r+0xdc2>
 8004140:	e4af      	b.n	8003aa2 <_svfprintf_r+0x722>
 8004142:	af34      	add	r7, sp, #208	; 0xd0
 8004144:	f7ff fabe 	bl	80036c4 <_svfprintf_r+0x344>
 8004148:	207b      	movs	r0, #123	; 0x7b
 800414a:	232d      	movs	r3, #45	; 0x2d
 800414c:	4468      	add	r0, sp
 800414e:	4264      	negs	r4, r4
 8004150:	7003      	strb	r3, [r0, #0]
 8004152:	f7ff fa10 	bl	8003576 <_svfprintf_r+0x1f6>
 8004156:	2100      	movs	r1, #0
 8004158:	2302      	movs	r3, #2
 800415a:	f7ff f9b1 	bl	80034c0 <_svfprintf_r+0x140>
 800415e:	4648      	mov	r0, r9
 8004160:	4641      	mov	r1, r8
 8004162:	f002 fc8d 	bl	8006a80 <__fpclassifyd>
 8004166:	2800      	cmp	r0, #0
 8004168:	d144      	bne.n	80041f4 <_svfprintf_r+0xe74>
 800416a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800416c:	2b47      	cmp	r3, #71	; 0x47
 800416e:	dc00      	bgt.n	8004172 <_svfprintf_r+0xdf2>
 8004170:	e0d5      	b.n	800431e <_svfprintf_r+0xf9e>
 8004172:	49ac      	ldr	r1, [pc, #688]	; (8004424 <_svfprintf_r+0x10a4>)
 8004174:	9113      	str	r1, [sp, #76]	; 0x4c
 8004176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	207b      	movs	r0, #123	; 0x7b
 800417c:	439a      	bics	r2, r3
 800417e:	4468      	add	r0, sp
 8004180:	2103      	movs	r1, #3
 8004182:	920a      	str	r2, [sp, #40]	; 0x28
 8004184:	7803      	ldrb	r3, [r0, #0]
 8004186:	910d      	str	r1, [sp, #52]	; 0x34
 8004188:	2203      	movs	r2, #3
 800418a:	2000      	movs	r0, #0
 800418c:	2100      	movs	r1, #0
 800418e:	920e      	str	r2, [sp, #56]	; 0x38
 8004190:	9014      	str	r0, [sp, #80]	; 0x50
 8004192:	9116      	str	r1, [sp, #88]	; 0x58
 8004194:	f7ff fa1f 	bl	80035d6 <_svfprintf_r+0x256>
 8004198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800419a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800419c:	681c      	ldr	r4, [r3, #0]
 800419e:	3004      	adds	r0, #4
 80041a0:	1c21      	adds	r1, r4, #0
 80041a2:	1e4b      	subs	r3, r1, #1
 80041a4:	4199      	sbcs	r1, r3
 80041a6:	9010      	str	r0, [sp, #64]	; 0x40
 80041a8:	2300      	movs	r3, #0
 80041aa:	f7ff f989 	bl	80034c0 <_svfprintf_r+0x140>
 80041ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	3304      	adds	r3, #4
 80041b4:	9310      	str	r3, [sp, #64]	; 0x40
 80041b6:	e5d8      	b.n	8003d6a <_svfprintf_r+0x9ea>
 80041b8:	465d      	mov	r5, fp
 80041ba:	46bb      	mov	fp, r7
 80041bc:	1c1f      	adds	r7, r3, #0
 80041be:	4643      	mov	r3, r8
 80041c0:	68b2      	ldr	r2, [r6, #8]
 80041c2:	3310      	adds	r3, #16
 80041c4:	607c      	str	r4, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	1914      	adds	r4, r2, r4
 80041ca:	f7ff fb2f 	bl	800382c <_svfprintf_r+0x4ac>
 80041ce:	4a94      	ldr	r2, [pc, #592]	; (8004420 <_svfprintf_r+0x10a0>)
 80041d0:	4690      	mov	r8, r2
 80041d2:	f7ff faaa 	bl	800372a <_svfprintf_r+0x3aa>
 80041d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80041d8:	43c3      	mvns	r3, r0
 80041da:	17db      	asrs	r3, r3, #31
 80041dc:	4018      	ands	r0, r3
 80041de:	217b      	movs	r1, #123	; 0x7b
 80041e0:	900d      	str	r0, [sp, #52]	; 0x34
 80041e2:	4469      	add	r1, sp
 80041e4:	2200      	movs	r2, #0
 80041e6:	2000      	movs	r0, #0
 80041e8:	780b      	ldrb	r3, [r1, #0]
 80041ea:	9410      	str	r4, [sp, #64]	; 0x40
 80041ec:	9214      	str	r2, [sp, #80]	; 0x50
 80041ee:	9016      	str	r0, [sp, #88]	; 0x58
 80041f0:	f7ff f9f1 	bl	80035d6 <_svfprintf_r+0x256>
 80041f4:	4652      	mov	r2, sl
 80041f6:	2320      	movs	r3, #32
 80041f8:	3201      	adds	r2, #1
 80041fa:	d100      	bne.n	80041fe <_svfprintf_r+0xe7e>
 80041fc:	e09e      	b.n	800433c <_svfprintf_r+0xfbc>
 80041fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004200:	439a      	bics	r2, r3
 8004202:	9209      	str	r2, [sp, #36]	; 0x24
 8004204:	2a47      	cmp	r2, #71	; 0x47
 8004206:	d104      	bne.n	8004212 <_svfprintf_r+0xe92>
 8004208:	4653      	mov	r3, sl
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <_svfprintf_r+0xe92>
 800420e:	2001      	movs	r0, #1
 8004210:	4682      	mov	sl, r0
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4319      	orrs	r1, r3
 800421a:	2000      	movs	r0, #0
 800421c:	4643      	mov	r3, r8
 800421e:	9112      	str	r1, [sp, #72]	; 0x48
 8004220:	9014      	str	r0, [sp, #80]	; 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	da00      	bge.n	8004228 <_svfprintf_r+0xea8>
 8004226:	e1ab      	b.n	8004580 <_svfprintf_r+0x1200>
 8004228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422a:	3b46      	subs	r3, #70	; 0x46
 800422c:	4258      	negs	r0, r3
 800422e:	4158      	adcs	r0, r3
 8004230:	900d      	str	r0, [sp, #52]	; 0x34
 8004232:	2800      	cmp	r0, #0
 8004234:	d000      	beq.n	8004238 <_svfprintf_r+0xeb8>
 8004236:	e117      	b.n	8004468 <_svfprintf_r+0x10e8>
 8004238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800423a:	2945      	cmp	r1, #69	; 0x45
 800423c:	d000      	beq.n	8004240 <_svfprintf_r+0xec0>
 800423e:	e1a5      	b.n	800458c <_svfprintf_r+0x120c>
 8004240:	2302      	movs	r3, #2
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	ab20      	add	r3, sp, #128	; 0x80
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	4654      	mov	r4, sl
 800424a:	ab21      	add	r3, sp, #132	; 0x84
 800424c:	3401      	adds	r4, #1
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	ab22      	add	r3, sp, #136	; 0x88
 8004252:	9401      	str	r4, [sp, #4]
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004258:	464a      	mov	r2, r9
 800425a:	4643      	mov	r3, r8
 800425c:	f000 fb0c 	bl	8004878 <_dtoa_r>
 8004260:	9013      	str	r0, [sp, #76]	; 0x4c
 8004262:	1904      	adds	r4, r0, r4
 8004264:	4648      	mov	r0, r9
 8004266:	4641      	mov	r1, r8
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <_svfprintf_r+0x109c>)
 800426a:	4a6b      	ldr	r2, [pc, #428]	; (8004418 <_svfprintf_r+0x1098>)
 800426c:	f004 ea16 	blx	800869c <__aeabi_dcmpeq>
 8004270:	2800      	cmp	r0, #0
 8004272:	d109      	bne.n	8004288 <_svfprintf_r+0xf08>
 8004274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004276:	429c      	cmp	r4, r3
 8004278:	d800      	bhi.n	800427c <_svfprintf_r+0xefc>
 800427a:	e244      	b.n	8004706 <_svfprintf_r+0x1386>
 800427c:	2230      	movs	r2, #48	; 0x30
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	9322      	str	r3, [sp, #136]	; 0x88
 8004284:	42a3      	cmp	r3, r4
 8004286:	d1fa      	bne.n	800427e <_svfprintf_r+0xefe>
 8004288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800428a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428c:	1ae4      	subs	r4, r4, r3
 800428e:	9415      	str	r4, [sp, #84]	; 0x54
 8004290:	2847      	cmp	r0, #71	; 0x47
 8004292:	d100      	bne.n	8004296 <_svfprintf_r+0xf16>
 8004294:	e11d      	b.n	80044d2 <_svfprintf_r+0x1152>
 8004296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004298:	2b65      	cmp	r3, #101	; 0x65
 800429a:	dc00      	bgt.n	800429e <_svfprintf_r+0xf1e>
 800429c:	e226      	b.n	80046ec <_svfprintf_r+0x136c>
 800429e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042a2:	2a66      	cmp	r2, #102	; 0x66
 80042a4:	d100      	bne.n	80042a8 <_svfprintf_r+0xf28>
 80042a6:	e182      	b.n	80045ae <_svfprintf_r+0x122e>
 80042a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80042aa:	428b      	cmp	r3, r1
 80042ac:	da00      	bge.n	80042b0 <_svfprintf_r+0xf30>
 80042ae:	e16f      	b.n	8004590 <_svfprintf_r+0x1210>
 80042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042b2:	07d2      	lsls	r2, r2, #31
 80042b4:	d500      	bpl.n	80042b8 <_svfprintf_r+0xf38>
 80042b6:	e1ca      	b.n	800464e <_svfprintf_r+0x12ce>
 80042b8:	43da      	mvns	r2, r3
 80042ba:	17d2      	asrs	r2, r2, #31
 80042bc:	401a      	ands	r2, r3
 80042be:	2067      	movs	r0, #103	; 0x67
 80042c0:	920d      	str	r2, [sp, #52]	; 0x34
 80042c2:	930e      	str	r3, [sp, #56]	; 0x38
 80042c4:	900c      	str	r0, [sp, #48]	; 0x30
 80042c6:	9316      	str	r3, [sp, #88]	; 0x58
 80042c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d100      	bne.n	80042d0 <_svfprintf_r+0xf50>
 80042ce:	e0c2      	b.n	8004456 <_svfprintf_r+0x10d6>
 80042d0:	207b      	movs	r0, #123	; 0x7b
 80042d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80042d4:	232d      	movs	r3, #45	; 0x2d
 80042d6:	4468      	add	r0, sp
 80042d8:	2200      	movs	r2, #0
 80042da:	7003      	strb	r3, [r0, #0]
 80042dc:	910a      	str	r1, [sp, #40]	; 0x28
 80042de:	9214      	str	r2, [sp, #80]	; 0x50
 80042e0:	f7ff f97b 	bl	80035da <_svfprintf_r+0x25a>
 80042e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042e6:	4659      	mov	r1, fp
 80042e8:	1c32      	adds	r2, r6, #0
 80042ea:	f002 fc1d 	bl	8006b28 <__ssprint_r>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d001      	beq.n	80042f6 <_svfprintf_r+0xf76>
 80042f2:	f7ff fbd6 	bl	8003aa2 <_svfprintf_r+0x722>
 80042f6:	af34      	add	r7, sp, #208	; 0xd0
 80042f8:	f7ff fada 	bl	80038b0 <_svfprintf_r+0x530>
 80042fc:	484a      	ldr	r0, [pc, #296]	; (8004428 <_svfprintf_r+0x10a8>)
 80042fe:	9013      	str	r0, [sp, #76]	; 0x4c
 8004300:	e4fd      	b.n	8003cfe <_svfprintf_r+0x97e>
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004306:	f001 fbeb 	bl	8005ae0 <_malloc_r>
 800430a:	4649      	mov	r1, r9
 800430c:	6008      	str	r0, [r1, #0]
 800430e:	6108      	str	r0, [r1, #16]
 8004310:	2800      	cmp	r0, #0
 8004312:	d100      	bne.n	8004316 <_svfprintf_r+0xf96>
 8004314:	e1ef      	b.n	80046f6 <_svfprintf_r+0x1376>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	614b      	str	r3, [r1, #20]
 800431a:	f7ff f850 	bl	80033be <_svfprintf_r+0x3e>
 800431e:	4843      	ldr	r0, [pc, #268]	; (800442c <_svfprintf_r+0x10ac>)
 8004320:	9013      	str	r0, [sp, #76]	; 0x4c
 8004322:	e728      	b.n	8004176 <_svfprintf_r+0xdf6>
 8004324:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004326:	4659      	mov	r1, fp
 8004328:	1c32      	adds	r2, r6, #0
 800432a:	f002 fbfd 	bl	8006b28 <__ssprint_r>
 800432e:	2800      	cmp	r0, #0
 8004330:	d001      	beq.n	8004336 <_svfprintf_r+0xfb6>
 8004332:	f7ff fbb6 	bl	8003aa2 <_svfprintf_r+0x722>
 8004336:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004338:	af34      	add	r7, sp, #208	; 0xd0
 800433a:	e5f0      	b.n	8003f1e <_svfprintf_r+0xb9e>
 800433c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800433e:	2106      	movs	r1, #6
 8004340:	4398      	bics	r0, r3
 8004342:	9009      	str	r0, [sp, #36]	; 0x24
 8004344:	468a      	mov	sl, r1
 8004346:	e764      	b.n	8004212 <_svfprintf_r+0xe92>
 8004348:	46ab      	mov	fp, r5
 800434a:	4655      	mov	r5, sl
 800434c:	4642      	mov	r2, r8
 800434e:	3210      	adds	r2, #16
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	68b1      	ldr	r1, [r6, #8]
 8004354:	6872      	ldr	r2, [r6, #4]
 8004356:	605c      	str	r4, [r3, #4]
 8004358:	3201      	adds	r2, #1
 800435a:	190c      	adds	r4, r1, r4
 800435c:	60b4      	str	r4, [r6, #8]
 800435e:	6072      	str	r2, [r6, #4]
 8004360:	2a07      	cmp	r2, #7
 8004362:	dd00      	ble.n	8004366 <_svfprintf_r+0xfe6>
 8004364:	e12e      	b.n	80045c4 <_svfprintf_r+0x1244>
 8004366:	3308      	adds	r3, #8
 8004368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800436a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800436c:	68b1      	ldr	r1, [r6, #8]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	180a      	adds	r2, r1, r0
 8004372:	6058      	str	r0, [r3, #4]
 8004374:	60b2      	str	r2, [r6, #8]
 8004376:	6872      	ldr	r2, [r6, #4]
 8004378:	3201      	adds	r2, #1
 800437a:	6072      	str	r2, [r6, #4]
 800437c:	2a07      	cmp	r2, #7
 800437e:	dd01      	ble.n	8004384 <_svfprintf_r+0x1004>
 8004380:	f7ff fa5a 	bl	8003838 <_svfprintf_r+0x4b8>
 8004384:	1c1f      	adds	r7, r3, #0
 8004386:	3708      	adds	r7, #8
 8004388:	f7ff f9ee 	bl	8003768 <_svfprintf_r+0x3e8>
 800438c:	f002 fbc4 	bl	8006b18 <strlen>
 8004390:	900e      	str	r0, [sp, #56]	; 0x38
 8004392:	e721      	b.n	80041d8 <_svfprintf_r+0xe58>
 8004394:	4922      	ldr	r1, [pc, #136]	; (8004420 <_svfprintf_r+0x10a0>)
 8004396:	4688      	mov	r8, r1
 8004398:	f7ff f960 	bl	800365c <_svfprintf_r+0x2dc>
 800439c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800439e:	4659      	mov	r1, fp
 80043a0:	1c32      	adds	r2, r6, #0
 80043a2:	f002 fbc1 	bl	8006b28 <__ssprint_r>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d001      	beq.n	80043ae <_svfprintf_r+0x102e>
 80043aa:	f7ff fb7a 	bl	8003aa2 <_svfprintf_r+0x722>
 80043ae:	af34      	add	r7, sp, #208	; 0xd0
 80043b0:	f7ff fbc0 	bl	8003b34 <_svfprintf_r+0x7b4>
 80043b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043b6:	4659      	mov	r1, fp
 80043b8:	1c32      	adds	r2, r6, #0
 80043ba:	f002 fbb5 	bl	8006b28 <__ssprint_r>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d001      	beq.n	80043c6 <_svfprintf_r+0x1046>
 80043c2:	f7ff fb6e 	bl	8003aa2 <_svfprintf_r+0x722>
 80043c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80043c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043ca:	af34      	add	r7, sp, #208	; 0xd0
 80043cc:	1a8b      	subs	r3, r1, r2
 80043ce:	e651      	b.n	8004074 <_svfprintf_r+0xcf4>
 80043d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043d2:	4659      	mov	r1, fp
 80043d4:	1c32      	adds	r2, r6, #0
 80043d6:	f002 fba7 	bl	8006b28 <__ssprint_r>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d001      	beq.n	80043e2 <_svfprintf_r+0x1062>
 80043de:	f7ff fb60 	bl	8003aa2 <_svfprintf_r+0x722>
 80043e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043e4:	af34      	add	r7, sp, #208	; 0xd0
 80043e6:	e62d      	b.n	8004044 <_svfprintf_r+0xcc4>
 80043e8:	9b08      	ldr	r3, [sp, #32]
 80043ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80043ec:	1a1b      	subs	r3, r3, r0
 80043ee:	930e      	str	r3, [sp, #56]	; 0x38
 80043f0:	f7ff f8e4 	bl	80035bc <_svfprintf_r+0x23c>
 80043f4:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <_svfprintf_r+0x10a0>)
 80043f6:	4690      	mov	r8, r2
 80043f8:	f7ff f9ed 	bl	80037d6 <_svfprintf_r+0x456>
 80043fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043fe:	4659      	mov	r1, fp
 8004400:	1c32      	adds	r2, r6, #0
 8004402:	f002 fb91 	bl	8006b28 <__ssprint_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	d001      	beq.n	800440e <_svfprintf_r+0x108e>
 800440a:	f7ff fb4a 	bl	8003aa2 <_svfprintf_r+0x722>
 800440e:	af34      	add	r7, sp, #208	; 0xd0
 8004410:	e60d      	b.n	800402e <_svfprintf_r+0xcae>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46c0      	nop			; (mov r8, r8)
	...
 8004420:	08008c44 	.word	0x08008c44
 8004424:	08009038 	.word	0x08009038
 8004428:	08009030 	.word	0x08009030
 800442c:	08009034 	.word	0x08009034
 8004430:	4650      	mov	r0, sl
 8004432:	900e      	str	r0, [sp, #56]	; 0x38
 8004434:	2806      	cmp	r0, #6
 8004436:	d908      	bls.n	800444a <_svfprintf_r+0x10ca>
 8004438:	2106      	movs	r1, #6
 800443a:	2206      	movs	r2, #6
 800443c:	910e      	str	r1, [sp, #56]	; 0x38
 800443e:	920d      	str	r2, [sp, #52]	; 0x34
 8004440:	49b5      	ldr	r1, [pc, #724]	; (8004718 <_svfprintf_r+0x1398>)
 8004442:	9410      	str	r4, [sp, #64]	; 0x40
 8004444:	9113      	str	r1, [sp, #76]	; 0x4c
 8004446:	f7ff f822 	bl	800348e <_svfprintf_r+0x10e>
 800444a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800444c:	43c3      	mvns	r3, r0
 800444e:	17db      	asrs	r3, r3, #31
 8004450:	4018      	ands	r0, r3
 8004452:	900d      	str	r0, [sp, #52]	; 0x34
 8004454:	e7f4      	b.n	8004440 <_svfprintf_r+0x10c0>
 8004456:	207b      	movs	r0, #123	; 0x7b
 8004458:	9912      	ldr	r1, [sp, #72]	; 0x48
 800445a:	4468      	add	r0, sp
 800445c:	2200      	movs	r2, #0
 800445e:	7803      	ldrb	r3, [r0, #0]
 8004460:	910a      	str	r1, [sp, #40]	; 0x28
 8004462:	9214      	str	r2, [sp, #80]	; 0x50
 8004464:	f7ff f8b7 	bl	80035d6 <_svfprintf_r+0x256>
 8004468:	2303      	movs	r3, #3
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	ab20      	add	r3, sp, #128	; 0x80
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	ab21      	add	r3, sp, #132	; 0x84
 8004472:	4652      	mov	r2, sl
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	ab22      	add	r3, sp, #136	; 0x88
 8004478:	9201      	str	r2, [sp, #4]
 800447a:	9304      	str	r3, [sp, #16]
 800447c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800447e:	4643      	mov	r3, r8
 8004480:	464a      	mov	r2, r9
 8004482:	f000 f9f9 	bl	8004878 <_dtoa_r>
 8004486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004488:	9013      	str	r0, [sp, #76]	; 0x4c
 800448a:	2b47      	cmp	r3, #71	; 0x47
 800448c:	d102      	bne.n	8004494 <_svfprintf_r+0x1114>
 800448e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004490:	07c0      	lsls	r0, r0, #31
 8004492:	d51a      	bpl.n	80044ca <_svfprintf_r+0x114a>
 8004494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004496:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004498:	1c1c      	adds	r4, r3, #0
 800449a:	4454      	add	r4, sl
 800449c:	2800      	cmp	r0, #0
 800449e:	d100      	bne.n	80044a2 <_svfprintf_r+0x1122>
 80044a0:	e6e0      	b.n	8004264 <_svfprintf_r+0xee4>
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d002      	beq.n	80044ae <_svfprintf_r+0x112e>
 80044a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044aa:	18e4      	adds	r4, r4, r3
 80044ac:	e6da      	b.n	8004264 <_svfprintf_r+0xee4>
 80044ae:	4648      	mov	r0, r9
 80044b0:	4641      	mov	r1, r8
 80044b2:	4b98      	ldr	r3, [pc, #608]	; (8004714 <_svfprintf_r+0x1394>)
 80044b4:	4a96      	ldr	r2, [pc, #600]	; (8004710 <_svfprintf_r+0x1390>)
 80044b6:	f004 e8f2 	blx	800869c <__aeabi_dcmpeq>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d1f4      	bne.n	80044a8 <_svfprintf_r+0x1128>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	9320      	str	r3, [sp, #128]	; 0x80
 80044c6:	18e4      	adds	r4, r4, r3
 80044c8:	e6cc      	b.n	8004264 <_svfprintf_r+0xee4>
 80044ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80044cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044ce:	1a89      	subs	r1, r1, r2
 80044d0:	9115      	str	r1, [sp, #84]	; 0x54
 80044d2:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80044d4:	1c23      	adds	r3, r4, #0
 80044d6:	1ce1      	adds	r1, r4, #3
 80044d8:	db02      	blt.n	80044e0 <_svfprintf_r+0x1160>
 80044da:	45a2      	cmp	sl, r4
 80044dc:	db00      	blt.n	80044e0 <_svfprintf_r+0x1160>
 80044de:	e6e3      	b.n	80042a8 <_svfprintf_r+0xf28>
 80044e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044e2:	3a02      	subs	r2, #2
 80044e4:	920c      	str	r2, [sp, #48]	; 0x30
 80044e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044e8:	a823      	add	r0, sp, #140	; 0x8c
 80044ea:	3c01      	subs	r4, #1
 80044ec:	9420      	str	r4, [sp, #128]	; 0x80
 80044ee:	4681      	mov	r9, r0
 80044f0:	7001      	strb	r1, [r0, #0]
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	da00      	bge.n	80044f8 <_svfprintf_r+0x1178>
 80044f6:	e0c5      	b.n	8004684 <_svfprintf_r+0x1304>
 80044f8:	466b      	mov	r3, sp
 80044fa:	222b      	movs	r2, #43	; 0x2b
 80044fc:	338d      	adds	r3, #141	; 0x8d
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	2c09      	cmp	r4, #9
 8004502:	dc6a      	bgt.n	80045da <_svfprintf_r+0x125a>
 8004504:	466b      	mov	r3, sp
 8004506:	338e      	adds	r3, #142	; 0x8e
 8004508:	2230      	movs	r2, #48	; 0x30
 800450a:	3430      	adds	r4, #48	; 0x30
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	705c      	strb	r4, [r3, #1]
 8004510:	ab24      	add	r3, sp, #144	; 0x90
 8004512:	464a      	mov	r2, r9
 8004514:	1a9a      	subs	r2, r3, r2
 8004516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004518:	9815      	ldr	r0, [sp, #84]	; 0x54
 800451a:	189b      	adds	r3, r3, r2
 800451c:	921b      	str	r2, [sp, #108]	; 0x6c
 800451e:	930e      	str	r3, [sp, #56]	; 0x38
 8004520:	2801      	cmp	r0, #1
 8004522:	dc00      	bgt.n	8004526 <_svfprintf_r+0x11a6>
 8004524:	e0b4      	b.n	8004690 <_svfprintf_r+0x1310>
 8004526:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004528:	3001      	adds	r0, #1
 800452a:	43c3      	mvns	r3, r0
 800452c:	17db      	asrs	r3, r3, #31
 800452e:	900e      	str	r0, [sp, #56]	; 0x38
 8004530:	2100      	movs	r1, #0
 8004532:	4018      	ands	r0, r3
 8004534:	900d      	str	r0, [sp, #52]	; 0x34
 8004536:	9116      	str	r1, [sp, #88]	; 0x58
 8004538:	e6c6      	b.n	80042c8 <_svfprintf_r+0xf48>
 800453a:	207b      	movs	r0, #123	; 0x7b
 800453c:	232d      	movs	r3, #45	; 0x2d
 800453e:	4468      	add	r0, sp
 8004540:	7003      	strb	r3, [r0, #0]
 8004542:	f7ff fbd6 	bl	8003cf2 <_svfprintf_r+0x972>
 8004546:	4975      	ldr	r1, [pc, #468]	; (800471c <_svfprintf_r+0x139c>)
 8004548:	4688      	mov	r8, r1
 800454a:	f7ff fa23 	bl	8003994 <_svfprintf_r+0x614>
 800454e:	4650      	mov	r0, sl
 8004550:	217b      	movs	r1, #123	; 0x7b
 8004552:	900d      	str	r0, [sp, #52]	; 0x34
 8004554:	4469      	add	r1, sp
 8004556:	900e      	str	r0, [sp, #56]	; 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	2000      	movs	r0, #0
 800455c:	780b      	ldrb	r3, [r1, #0]
 800455e:	9410      	str	r4, [sp, #64]	; 0x40
 8004560:	9214      	str	r2, [sp, #80]	; 0x50
 8004562:	9016      	str	r0, [sp, #88]	; 0x58
 8004564:	f7ff f837 	bl	80035d6 <_svfprintf_r+0x256>
 8004568:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800456a:	4659      	mov	r1, fp
 800456c:	1c32      	adds	r2, r6, #0
 800456e:	f002 fadb 	bl	8006b28 <__ssprint_r>
 8004572:	2800      	cmp	r0, #0
 8004574:	d001      	beq.n	800457a <_svfprintf_r+0x11fa>
 8004576:	f7ff fa94 	bl	8003aa2 <_svfprintf_r+0x722>
 800457a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800457c:	ab34      	add	r3, sp, #208	; 0xd0
 800457e:	e4e7      	b.n	8003f50 <_svfprintf_r+0xbd0>
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	0609      	lsls	r1, r1, #24
 8004584:	222d      	movs	r2, #45	; 0x2d
 8004586:	4488      	add	r8, r1
 8004588:	9214      	str	r2, [sp, #80]	; 0x50
 800458a:	e64d      	b.n	8004228 <_svfprintf_r+0xea8>
 800458c:	2302      	movs	r3, #2
 800458e:	e76c      	b.n	800446a <_svfprintf_r+0x10ea>
 8004590:	2201      	movs	r2, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	dc00      	bgt.n	8004598 <_svfprintf_r+0x1218>
 8004596:	e08a      	b.n	80046ae <_svfprintf_r+0x132e>
 8004598:	9815      	ldr	r0, [sp, #84]	; 0x54
 800459a:	1812      	adds	r2, r2, r0
 800459c:	920e      	str	r2, [sp, #56]	; 0x38
 800459e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045a0:	43d2      	mvns	r2, r2
 80045a2:	17d2      	asrs	r2, r2, #31
 80045a4:	4011      	ands	r1, r2
 80045a6:	2267      	movs	r2, #103	; 0x67
 80045a8:	910d      	str	r1, [sp, #52]	; 0x34
 80045aa:	920c      	str	r2, [sp, #48]	; 0x30
 80045ac:	e68b      	b.n	80042c6 <_svfprintf_r+0xf46>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	dd5d      	ble.n	800466e <_svfprintf_r+0x12ee>
 80045b2:	4650      	mov	r0, sl
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d13c      	bne.n	8004632 <_svfprintf_r+0x12b2>
 80045b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045ba:	07c9      	lsls	r1, r1, #31
 80045bc:	d439      	bmi.n	8004632 <_svfprintf_r+0x12b2>
 80045be:	930d      	str	r3, [sp, #52]	; 0x34
 80045c0:	930e      	str	r3, [sp, #56]	; 0x38
 80045c2:	e680      	b.n	80042c6 <_svfprintf_r+0xf46>
 80045c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045c6:	4659      	mov	r1, fp
 80045c8:	1c32      	adds	r2, r6, #0
 80045ca:	f002 faad 	bl	8006b28 <__ssprint_r>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d001      	beq.n	80045d6 <_svfprintf_r+0x1256>
 80045d2:	f7ff fa66 	bl	8003aa2 <_svfprintf_r+0x722>
 80045d6:	ab34      	add	r3, sp, #208	; 0xd0
 80045d8:	e6c6      	b.n	8004368 <_svfprintf_r+0xfe8>
 80045da:	466b      	mov	r3, sp
 80045dc:	339a      	adds	r3, #154	; 0x9a
 80045de:	1c20      	adds	r0, r4, #0
 80045e0:	210a      	movs	r1, #10
 80045e2:	4698      	mov	r8, r3
 80045e4:	f003 eb86 	blx	8007cf4 <__aeabi_idivmod>
 80045e8:	4642      	mov	r2, r8
 80045ea:	3130      	adds	r1, #48	; 0x30
 80045ec:	7011      	strb	r1, [r2, #0]
 80045ee:	1c20      	adds	r0, r4, #0
 80045f0:	210a      	movs	r1, #10
 80045f2:	f003 eae8 	blx	8007bc4 <__aeabi_idiv>
 80045f6:	4643      	mov	r3, r8
 80045f8:	1c04      	adds	r4, r0, #0
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2809      	cmp	r0, #9
 80045fe:	dcee      	bgt.n	80045de <_svfprintf_r+0x125e>
 8004600:	1c01      	adds	r1, r0, #0
 8004602:	3130      	adds	r1, #48	; 0x30
 8004604:	0609      	lsls	r1, r1, #24
 8004606:	4668      	mov	r0, sp
 8004608:	0e09      	lsrs	r1, r1, #24
 800460a:	309b      	adds	r0, #155	; 0x9b
 800460c:	7019      	strb	r1, [r3, #0]
 800460e:	4298      	cmp	r0, r3
 8004610:	d96e      	bls.n	80046f0 <_svfprintf_r+0x1370>
 8004612:	466a      	mov	r2, sp
 8004614:	4643      	mov	r3, r8
 8004616:	328e      	adds	r2, #142	; 0x8e
 8004618:	e001      	b.n	800461e <_svfprintf_r+0x129e>
 800461a:	7819      	ldrb	r1, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	7011      	strb	r1, [r2, #0]
 8004620:	3201      	adds	r2, #1
 8004622:	4298      	cmp	r0, r3
 8004624:	d1f9      	bne.n	800461a <_svfprintf_r+0x129a>
 8004626:	4640      	mov	r0, r8
 8004628:	218e      	movs	r1, #142	; 0x8e
 800462a:	1a33      	subs	r3, r6, r0
 800462c:	4469      	add	r1, sp
 800462e:	18cb      	adds	r3, r1, r3
 8004630:	e76f      	b.n	8004512 <_svfprintf_r+0x1192>
 8004632:	4652      	mov	r2, sl
 8004634:	3201      	adds	r2, #1
 8004636:	189a      	adds	r2, r3, r2
 8004638:	920e      	str	r2, [sp, #56]	; 0x38
 800463a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800463c:	43d2      	mvns	r2, r2
 800463e:	17d2      	asrs	r2, r2, #31
 8004640:	4010      	ands	r0, r2
 8004642:	900d      	str	r0, [sp, #52]	; 0x34
 8004644:	e63f      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <_svfprintf_r+0x139c>)
 8004648:	4698      	mov	r8, r3
 800464a:	f7ff fa0d 	bl	8003a68 <_svfprintf_r+0x6e8>
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	43ca      	mvns	r2, r1
 8004652:	17d2      	asrs	r2, r2, #31
 8004654:	910e      	str	r1, [sp, #56]	; 0x38
 8004656:	4011      	ands	r1, r2
 8004658:	2267      	movs	r2, #103	; 0x67
 800465a:	910d      	str	r1, [sp, #52]	; 0x34
 800465c:	920c      	str	r2, [sp, #48]	; 0x30
 800465e:	e632      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004660:	4a2e      	ldr	r2, [pc, #184]	; (800471c <_svfprintf_r+0x139c>)
 8004662:	4690      	mov	r8, r2
 8004664:	f7ff f8dc 	bl	8003820 <_svfprintf_r+0x4a0>
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <_svfprintf_r+0x139c>)
 800466a:	4690      	mov	r8, r2
 800466c:	e4d1      	b.n	8004012 <_svfprintf_r+0xc92>
 800466e:	4651      	mov	r1, sl
 8004670:	2900      	cmp	r1, #0
 8004672:	d133      	bne.n	80046dc <_svfprintf_r+0x135c>
 8004674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004676:	07d2      	lsls	r2, r2, #31
 8004678:	d430      	bmi.n	80046dc <_svfprintf_r+0x135c>
 800467a:	2001      	movs	r0, #1
 800467c:	2101      	movs	r1, #1
 800467e:	900d      	str	r0, [sp, #52]	; 0x34
 8004680:	910e      	str	r1, [sp, #56]	; 0x38
 8004682:	e620      	b.n	80042c6 <_svfprintf_r+0xf46>
 8004684:	466b      	mov	r3, sp
 8004686:	222d      	movs	r2, #45	; 0x2d
 8004688:	338d      	adds	r3, #141	; 0x8d
 800468a:	4264      	negs	r4, r4
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e737      	b.n	8004500 <_svfprintf_r+0x1180>
 8004690:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004692:	07c9      	lsls	r1, r1, #31
 8004694:	d500      	bpl.n	8004698 <_svfprintf_r+0x1318>
 8004696:	e746      	b.n	8004526 <_svfprintf_r+0x11a6>
 8004698:	43db      	mvns	r3, r3
 800469a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800469c:	17db      	asrs	r3, r3, #31
 800469e:	401a      	ands	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	920d      	str	r2, [sp, #52]	; 0x34
 80046a4:	9316      	str	r3, [sp, #88]	; 0x58
 80046a6:	e60f      	b.n	80042c8 <_svfprintf_r+0xf48>
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <_svfprintf_r+0x139c>)
 80046aa:	4698      	mov	r8, r3
 80046ac:	e587      	b.n	80041be <_svfprintf_r+0xe3e>
 80046ae:	2202      	movs	r2, #2
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	e771      	b.n	8004598 <_svfprintf_r+0x1218>
 80046b4:	4819      	ldr	r0, [pc, #100]	; (800471c <_svfprintf_r+0x139c>)
 80046b6:	4680      	mov	r8, r0
 80046b8:	e648      	b.n	800434c <_svfprintf_r+0xfcc>
 80046ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046bc:	3204      	adds	r2, #4
 80046be:	9209      	str	r2, [sp, #36]	; 0x24
 80046c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c6:	469a      	mov	sl, r3
 80046c8:	9210      	str	r2, [sp, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db01      	blt.n	80046d2 <_svfprintf_r+0x1352>
 80046ce:	f7fe fec7 	bl	8003460 <_svfprintf_r+0xe0>
 80046d2:	2301      	movs	r3, #1
 80046d4:	425b      	negs	r3, r3
 80046d6:	469a      	mov	sl, r3
 80046d8:	f7fe fec2 	bl	8003460 <_svfprintf_r+0xe0>
 80046dc:	4650      	mov	r0, sl
 80046de:	3002      	adds	r0, #2
 80046e0:	43c2      	mvns	r2, r0
 80046e2:	17d2      	asrs	r2, r2, #31
 80046e4:	900e      	str	r0, [sp, #56]	; 0x38
 80046e6:	4010      	ands	r0, r2
 80046e8:	900d      	str	r0, [sp, #52]	; 0x34
 80046ea:	e5ec      	b.n	80042c6 <_svfprintf_r+0xf46>
 80046ec:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80046ee:	e6fa      	b.n	80044e6 <_svfprintf_r+0x1166>
 80046f0:	466b      	mov	r3, sp
 80046f2:	338e      	adds	r3, #142	; 0x8e
 80046f4:	e70d      	b.n	8004512 <_svfprintf_r+0x1192>
 80046f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046f8:	230c      	movs	r3, #12
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	930f      	str	r3, [sp, #60]	; 0x3c
 8004702:	f7ff f90a 	bl	800391a <_svfprintf_r+0x59a>
 8004706:	1c1c      	adds	r4, r3, #0
 8004708:	e5be      	b.n	8004288 <_svfprintf_r+0xf08>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46c0      	nop			; (mov r8, r8)
	...
 8004718:	08009064 	.word	0x08009064
 800471c:	08008c44 	.word	0x08008c44

08004720 <quorem>:
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	464d      	mov	r5, r9
 8004724:	4644      	mov	r4, r8
 8004726:	465f      	mov	r7, fp
 8004728:	4656      	mov	r6, sl
 800472a:	b4f0      	push	{r4, r5, r6, r7}
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	690b      	ldr	r3, [r1, #16]
 8004732:	4641      	mov	r1, r8
 8004734:	6909      	ldr	r1, [r1, #16]
 8004736:	b083      	sub	sp, #12
 8004738:	2000      	movs	r0, #0
 800473a:	428b      	cmp	r3, r1
 800473c:	dd00      	ble.n	8004740 <quorem+0x20>
 800473e:	e092      	b.n	8004866 <quorem+0x146>
 8004740:	1e5d      	subs	r5, r3, #1
 8004742:	3303      	adds	r3, #3
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4648      	mov	r0, r9
 8004748:	4641      	mov	r1, r8
 800474a:	18c2      	adds	r2, r0, r3
 800474c:	3114      	adds	r1, #20
 800474e:	9101      	str	r1, [sp, #4]
 8004750:	6851      	ldr	r1, [r2, #4]
 8004752:	4443      	add	r3, r8
 8004754:	3101      	adds	r1, #1
 8004756:	6858      	ldr	r0, [r3, #4]
 8004758:	1d17      	adds	r7, r2, #4
 800475a:	f003 e9a6 	blx	8007aa8 <__aeabi_uidiv>
 800475e:	464c      	mov	r4, r9
 8004760:	3414      	adds	r4, #20
 8004762:	1e06      	subs	r6, r0, #0
 8004764:	d043      	beq.n	80047ee <quorem+0xce>
 8004766:	2100      	movs	r1, #0
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	46ab      	mov	fp, r5
 800476c:	46ba      	mov	sl, r7
 800476e:	1c22      	adds	r2, r4, #0
 8004770:	1c37      	adds	r7, r6, #0
 8004772:	46a4      	mov	ip, r4
 8004774:	1c0d      	adds	r5, r1, #0
 8004776:	1c0e      	adds	r6, r1, #0
 8004778:	ca02      	ldmia	r2!, {r1}
 800477a:	040c      	lsls	r4, r1, #16
 800477c:	0c24      	lsrs	r4, r4, #16
 800477e:	437c      	muls	r4, r7
 8004780:	0c09      	lsrs	r1, r1, #16
 8004782:	4379      	muls	r1, r7
 8004784:	1934      	adds	r4, r6, r4
 8004786:	0c20      	lsrs	r0, r4, #16
 8004788:	1840      	adds	r0, r0, r1
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	0409      	lsls	r1, r1, #16
 800478e:	0c09      	lsrs	r1, r1, #16
 8004790:	0424      	lsls	r4, r4, #16
 8004792:	194d      	adds	r5, r1, r5
 8004794:	0c24      	lsrs	r4, r4, #16
 8004796:	1b2c      	subs	r4, r5, r4
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	0c06      	lsrs	r6, r0, #16
 800479c:	0400      	lsls	r0, r0, #16
 800479e:	0c29      	lsrs	r1, r5, #16
 80047a0:	0c00      	lsrs	r0, r0, #16
 80047a2:	1425      	asrs	r5, r4, #16
 80047a4:	1a09      	subs	r1, r1, r0
 80047a6:	1949      	adds	r1, r1, r5
 80047a8:	0424      	lsls	r4, r4, #16
 80047aa:	140d      	asrs	r5, r1, #16
 80047ac:	0c24      	lsrs	r4, r4, #16
 80047ae:	0409      	lsls	r1, r1, #16
 80047b0:	4321      	orrs	r1, r4
 80047b2:	c302      	stmia	r3!, {r1}
 80047b4:	4592      	cmp	sl, r2
 80047b6:	d2df      	bcs.n	8004778 <quorem+0x58>
 80047b8:	465d      	mov	r5, fp
 80047ba:	1d2b      	adds	r3, r5, #4
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4443      	add	r3, r8
 80047c0:	6858      	ldr	r0, [r3, #4]
 80047c2:	1c3e      	adds	r6, r7, #0
 80047c4:	4664      	mov	r4, ip
 80047c6:	4657      	mov	r7, sl
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d110      	bne.n	80047ee <quorem+0xce>
 80047cc:	9901      	ldr	r1, [sp, #4]
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d20b      	bcs.n	80047ea <quorem+0xca>
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d108      	bne.n	80047ea <quorem+0xca>
 80047d8:	1c0a      	adds	r2, r1, #0
 80047da:	e002      	b.n	80047e2 <quorem+0xc2>
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	2800      	cmp	r0, #0
 80047e0:	d103      	bne.n	80047ea <quorem+0xca>
 80047e2:	3b04      	subs	r3, #4
 80047e4:	3d01      	subs	r5, #1
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3f8      	bcc.n	80047dc <quorem+0xbc>
 80047ea:	4641      	mov	r1, r8
 80047ec:	610d      	str	r5, [r1, #16]
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f001 ff2f 	bl	8006654 <__mcmp>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	db34      	blt.n	8004864 <quorem+0x144>
 80047fa:	2200      	movs	r2, #0
 80047fc:	4694      	mov	ip, r2
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	1c2a      	adds	r2, r5, #0
 8004802:	3601      	adds	r6, #1
 8004804:	1c3d      	adds	r5, r7, #0
 8004806:	4667      	mov	r7, ip
 8004808:	4694      	mov	ip, r2
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	cc01      	ldmia	r4!, {r0}
 800480e:	0411      	lsls	r1, r2, #16
 8004810:	0c09      	lsrs	r1, r1, #16
 8004812:	19cf      	adds	r7, r1, r7
 8004814:	0401      	lsls	r1, r0, #16
 8004816:	0c09      	lsrs	r1, r1, #16
 8004818:	1a79      	subs	r1, r7, r1
 800481a:	0c12      	lsrs	r2, r2, #16
 800481c:	0c00      	lsrs	r0, r0, #16
 800481e:	140f      	asrs	r7, r1, #16
 8004820:	1a12      	subs	r2, r2, r0
 8004822:	19d2      	adds	r2, r2, r7
 8004824:	0409      	lsls	r1, r1, #16
 8004826:	1417      	asrs	r7, r2, #16
 8004828:	0c09      	lsrs	r1, r1, #16
 800482a:	0412      	lsls	r2, r2, #16
 800482c:	430a      	orrs	r2, r1
 800482e:	c304      	stmia	r3!, {r2}
 8004830:	42a5      	cmp	r5, r4
 8004832:	d2ea      	bcs.n	800480a <quorem+0xea>
 8004834:	4665      	mov	r5, ip
 8004836:	1d2b      	adds	r3, r5, #4
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4443      	add	r3, r8
 800483c:	6858      	ldr	r0, [r3, #4]
 800483e:	2800      	cmp	r0, #0
 8004840:	d110      	bne.n	8004864 <quorem+0x144>
 8004842:	9901      	ldr	r1, [sp, #4]
 8004844:	4299      	cmp	r1, r3
 8004846:	d20b      	bcs.n	8004860 <quorem+0x140>
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	2a00      	cmp	r2, #0
 800484c:	d108      	bne.n	8004860 <quorem+0x140>
 800484e:	1c0a      	adds	r2, r1, #0
 8004850:	e002      	b.n	8004858 <quorem+0x138>
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	2800      	cmp	r0, #0
 8004856:	d103      	bne.n	8004860 <quorem+0x140>
 8004858:	3b04      	subs	r3, #4
 800485a:	3d01      	subs	r5, #1
 800485c:	429a      	cmp	r2, r3
 800485e:	d3f8      	bcc.n	8004852 <quorem+0x132>
 8004860:	4641      	mov	r1, r8
 8004862:	610d      	str	r5, [r1, #16]
 8004864:	1c30      	adds	r0, r6, #0
 8004866:	b003      	add	sp, #12
 8004868:	bc3c      	pop	{r2, r3, r4, r5}
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	46a2      	mov	sl, r4
 8004870:	46ab      	mov	fp, r5
 8004872:	bcf0      	pop	{r4, r5, r6, r7}
 8004874:	bc02      	pop	{r1}
 8004876:	4708      	bx	r1

08004878 <_dtoa_r>:
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	4656      	mov	r6, sl
 800487c:	4644      	mov	r4, r8
 800487e:	465f      	mov	r7, fp
 8004880:	464d      	mov	r5, r9
 8004882:	b4f0      	push	{r4, r5, r6, r7}
 8004884:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004886:	b09d      	sub	sp, #116	; 0x74
 8004888:	1c04      	adds	r4, r0, #0
 800488a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800488c:	9202      	str	r2, [sp, #8]
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	2900      	cmp	r1, #0
 8004892:	d008      	beq.n	80048a6 <_dtoa_r+0x2e>
 8004894:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004896:	2201      	movs	r2, #1
 8004898:	409a      	lsls	r2, r3
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	608a      	str	r2, [r1, #8]
 800489e:	f001 fc65 	bl	800616c <_Bfree>
 80048a2:	2300      	movs	r3, #0
 80048a4:	6423      	str	r3, [r4, #64]	; 0x40
 80048a6:	9d03      	ldr	r5, [sp, #12]
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	db37      	blt.n	800491c <_dtoa_r+0xa4>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <_dtoa_r+0xb8>)
 80048b2:	1c2a      	adds	r2, r5, #0
 80048b4:	401a      	ands	r2, r3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d01d      	beq.n	80048f6 <_dtoa_r+0x7e>
 80048ba:	9e02      	ldr	r6, [sp, #8]
 80048bc:	9f03      	ldr	r7, [sp, #12]
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <_dtoa_r+0xb4>)
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <_dtoa_r+0xb0>)
 80048c2:	1c30      	adds	r0, r6, #0
 80048c4:	1c39      	adds	r1, r7, #0
 80048c6:	f003 eeea 	blx	800869c <__aeabi_dcmpeq>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d038      	beq.n	8004940 <_dtoa_r+0xc8>
 80048ce:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80048d0:	2301      	movs	r3, #1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	d100      	bne.n	80048dc <_dtoa_r+0x64>
 80048da:	e21f      	b.n	8004d1c <_dtoa_r+0x4a4>
 80048dc:	4f15      	ldr	r7, [pc, #84]	; (8004934 <_dtoa_r+0xbc>)
 80048de:	602f      	str	r7, [r5, #0]
 80048e0:	3f01      	subs	r7, #1
 80048e2:	1c38      	adds	r0, r7, #0
 80048e4:	b01d      	add	sp, #116	; 0x74
 80048e6:	bc3c      	pop	{r2, r3, r4, r5}
 80048e8:	4690      	mov	r8, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	46a2      	mov	sl, r4
 80048ee:	46ab      	mov	fp, r5
 80048f0:	bcf0      	pop	{r4, r5, r6, r7}
 80048f2:	bc02      	pop	{r1}
 80048f4:	4708      	bx	r1
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <_dtoa_r+0xc0>)
 80048f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80048fa:	9a02      	ldr	r2, [sp, #8]
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d100      	bne.n	8004904 <_dtoa_r+0x8c>
 8004902:	e1bb      	b.n	8004c7c <_dtoa_r+0x404>
 8004904:	4f0d      	ldr	r7, [pc, #52]	; (800493c <_dtoa_r+0xc4>)
 8004906:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8004908:	2d00      	cmp	r5, #0
 800490a:	d0ea      	beq.n	80048e2 <_dtoa_r+0x6a>
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	1cfb      	adds	r3, r7, #3
 8004910:	2a00      	cmp	r2, #0
 8004912:	d000      	beq.n	8004916 <_dtoa_r+0x9e>
 8004914:	3305      	adds	r3, #5
 8004916:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	e7e2      	b.n	80048e2 <_dtoa_r+0x6a>
 800491c:	2301      	movs	r3, #1
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	006b      	lsls	r3, r5, #1
 8004922:	085d      	lsrs	r5, r3, #1
 8004924:	9503      	str	r5, [sp, #12]
 8004926:	e7c3      	b.n	80048b0 <_dtoa_r+0x38>
	...
 8004930:	7ff00000 	.word	0x7ff00000
 8004934:	0800906d 	.word	0x0800906d
 8004938:	0000270f 	.word	0x0000270f
 800493c:	0800907c 	.word	0x0800907c
 8004940:	ab1b      	add	r3, sp, #108	; 0x6c
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	ab1a      	add	r3, sp, #104	; 0x68
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	1c32      	adds	r2, r6, #0
 800494a:	1c3b      	adds	r3, r7, #0
 800494c:	1c20      	adds	r0, r4, #0
 800494e:	f001 ff8d 	bl	800686c <__d2b>
 8004952:	006b      	lsls	r3, r5, #1
 8004954:	900b      	str	r0, [sp, #44]	; 0x2c
 8004956:	0d5a      	lsrs	r2, r3, #21
 8004958:	d100      	bne.n	800495c <_dtoa_r+0xe4>
 800495a:	e1c5      	b.n	8004ce8 <_dtoa_r+0x470>
 800495c:	4ddc      	ldr	r5, [pc, #880]	; (8004cd0 <_dtoa_r+0x458>)
 800495e:	033b      	lsls	r3, r7, #12
 8004960:	0b1b      	lsrs	r3, r3, #12
 8004962:	1c29      	adds	r1, r5, #0
 8004964:	4319      	orrs	r1, r3
 8004966:	4bdb      	ldr	r3, [pc, #876]	; (8004cd4 <_dtoa_r+0x45c>)
 8004968:	18d5      	adds	r5, r2, r3
 800496a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800496c:	2300      	movs	r3, #0
 800496e:	9316      	str	r3, [sp, #88]	; 0x58
 8004970:	1c30      	adds	r0, r6, #0
 8004972:	4690      	mov	r8, r2
 8004974:	4bc5      	ldr	r3, [pc, #788]	; (8004c8c <_dtoa_r+0x414>)
 8004976:	4ac4      	ldr	r2, [pc, #784]	; (8004c88 <_dtoa_r+0x410>)
 8004978:	f003 e9d2 	blx	8007d20 <__aeabi_dsub>
 800497c:	4ac4      	ldr	r2, [pc, #784]	; (8004c90 <_dtoa_r+0x418>)
 800497e:	4bc5      	ldr	r3, [pc, #788]	; (8004c94 <_dtoa_r+0x41c>)
 8004980:	f003 ebd8 	blx	8008134 <__aeabi_dmul>
 8004984:	4ac4      	ldr	r2, [pc, #784]	; (8004c98 <_dtoa_r+0x420>)
 8004986:	4bc5      	ldr	r3, [pc, #788]	; (8004c9c <_dtoa_r+0x424>)
 8004988:	f003 e9cc 	blx	8007d24 <__adddf3>
 800498c:	1c06      	adds	r6, r0, #0
 800498e:	1c28      	adds	r0, r5, #0
 8004990:	1c0f      	adds	r7, r1, #0
 8004992:	f003 eb62 	blx	8008058 <__aeabi_i2d>
 8004996:	4ac2      	ldr	r2, [pc, #776]	; (8004ca0 <_dtoa_r+0x428>)
 8004998:	4bc2      	ldr	r3, [pc, #776]	; (8004ca4 <_dtoa_r+0x42c>)
 800499a:	f003 ebcc 	blx	8008134 <__aeabi_dmul>
 800499e:	1c02      	adds	r2, r0, #0
 80049a0:	1c0b      	adds	r3, r1, #0
 80049a2:	1c30      	adds	r0, r6, #0
 80049a4:	1c39      	adds	r1, r7, #0
 80049a6:	f003 e9be 	blx	8007d24 <__adddf3>
 80049aa:	1c06      	adds	r6, r0, #0
 80049ac:	1c0f      	adds	r7, r1, #0
 80049ae:	f003 eeb2 	blx	8008714 <__aeabi_d2iz>
 80049b2:	1c39      	adds	r1, r7, #0
 80049b4:	9007      	str	r0, [sp, #28]
 80049b6:	4abc      	ldr	r2, [pc, #752]	; (8004ca8 <_dtoa_r+0x430>)
 80049b8:	4bbc      	ldr	r3, [pc, #752]	; (8004cac <_dtoa_r+0x434>)
 80049ba:	1c30      	adds	r0, r6, #0
 80049bc:	f003 ee7a 	blx	80086b4 <__aeabi_dcmplt>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d000      	beq.n	80049c6 <_dtoa_r+0x14e>
 80049c4:	e359      	b.n	800507a <_dtoa_r+0x802>
 80049c6:	9a07      	ldr	r2, [sp, #28]
 80049c8:	2101      	movs	r1, #1
 80049ca:	910e      	str	r1, [sp, #56]	; 0x38
 80049cc:	2a16      	cmp	r2, #22
 80049ce:	d810      	bhi.n	80049f2 <_dtoa_r+0x17a>
 80049d0:	00d3      	lsls	r3, r2, #3
 80049d2:	4ac1      	ldr	r2, [pc, #772]	; (8004cd8 <_dtoa_r+0x460>)
 80049d4:	18d3      	adds	r3, r2, r3
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	9a02      	ldr	r2, [sp, #8]
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	f003 ee8e 	blx	80086fc <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d100      	bne.n	80049e8 <_dtoa_r+0x170>
 80049e6:	e35b      	b.n	80050a0 <_dtoa_r+0x828>
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	2000      	movs	r0, #0
 80049ec:	3b01      	subs	r3, #1
 80049ee:	9307      	str	r3, [sp, #28]
 80049f0:	900e      	str	r0, [sp, #56]	; 0x38
 80049f2:	4642      	mov	r2, r8
 80049f4:	1b55      	subs	r5, r2, r5
 80049f6:	3d01      	subs	r5, #1
 80049f8:	d500      	bpl.n	80049fc <_dtoa_r+0x184>
 80049fa:	e339      	b.n	8005070 <_dtoa_r+0x7f8>
 80049fc:	46aa      	mov	sl, r5
 80049fe:	2500      	movs	r5, #0
 8004a00:	950a      	str	r5, [sp, #40]	; 0x28
 8004a02:	9d07      	ldr	r5, [sp, #28]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	da00      	bge.n	8004a0a <_dtoa_r+0x192>
 8004a08:	e313      	b.n	8005032 <_dtoa_r+0x7ba>
 8004a0a:	44aa      	add	sl, r5
 8004a0c:	9511      	str	r5, [sp, #68]	; 0x44
 8004a0e:	2500      	movs	r5, #0
 8004a10:	950f      	str	r5, [sp, #60]	; 0x3c
 8004a12:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004a14:	2809      	cmp	r0, #9
 8004a16:	d900      	bls.n	8004a1a <_dtoa_r+0x1a2>
 8004a18:	e182      	b.n	8004d20 <_dtoa_r+0x4a8>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	2805      	cmp	r0, #5
 8004a1e:	dd02      	ble.n	8004a26 <_dtoa_r+0x1ae>
 8004a20:	3804      	subs	r0, #4
 8004a22:	9026      	str	r0, [sp, #152]	; 0x98
 8004a24:	2300      	movs	r3, #0
 8004a26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004a28:	2903      	cmp	r1, #3
 8004a2a:	d101      	bne.n	8004a30 <_dtoa_r+0x1b8>
 8004a2c:	f000 fd8a 	bl	8005544 <_dtoa_r+0xccc>
 8004a30:	dd00      	ble.n	8004a34 <_dtoa_r+0x1bc>
 8004a32:	e353      	b.n	80050dc <_dtoa_r+0x864>
 8004a34:	2902      	cmp	r1, #2
 8004a36:	d000      	beq.n	8004a3a <_dtoa_r+0x1c2>
 8004a38:	e174      	b.n	8004d24 <_dtoa_r+0x4ac>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	9512      	str	r5, [sp, #72]	; 0x48
 8004a3e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dc01      	bgt.n	8004a48 <_dtoa_r+0x1d0>
 8004a44:	f000 fd8c 	bl	8005560 <_dtoa_r+0xce8>
 8004a48:	2500      	movs	r5, #0
 8004a4a:	220e      	movs	r2, #14
 8004a4c:	4282      	cmp	r2, r0
 8004a4e:	416d      	adcs	r5, r5
 8004a50:	9010      	str	r0, [sp, #64]	; 0x40
 8004a52:	9009      	str	r0, [sp, #36]	; 0x24
 8004a54:	1c06      	adds	r6, r0, #0
 8004a56:	401d      	ands	r5, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6463      	str	r3, [r4, #68]	; 0x44
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2e17      	cmp	r6, #23
 8004a60:	d909      	bls.n	8004a76 <_dtoa_r+0x1fe>
 8004a62:	2201      	movs	r2, #1
 8004a64:	2304      	movs	r3, #4
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	1c18      	adds	r0, r3, #0
 8004a6a:	3014      	adds	r0, #20
 8004a6c:	1c11      	adds	r1, r2, #0
 8004a6e:	3201      	adds	r2, #1
 8004a70:	42b0      	cmp	r0, r6
 8004a72:	d9f8      	bls.n	8004a66 <_dtoa_r+0x1ee>
 8004a74:	6461      	str	r1, [r4, #68]	; 0x44
 8004a76:	1c20      	adds	r0, r4, #0
 8004a78:	f001 fb4e 	bl	8006118 <_Balloc>
 8004a7c:	4683      	mov	fp, r0
 8004a7e:	6420      	str	r0, [r4, #64]	; 0x40
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	d100      	bne.n	8004a86 <_dtoa_r+0x20e>
 8004a84:	e15e      	b.n	8004d44 <_dtoa_r+0x4cc>
 8004a86:	9d07      	ldr	r5, [sp, #28]
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	dc00      	bgt.n	8004a8e <_dtoa_r+0x216>
 8004a8c:	e3d1      	b.n	8005232 <_dtoa_r+0x9ba>
 8004a8e:	1c2a      	adds	r2, r5, #0
 8004a90:	230f      	movs	r3, #15
 8004a92:	401a      	ands	r2, r3
 8004a94:	4990      	ldr	r1, [pc, #576]	; (8004cd8 <_dtoa_r+0x460>)
 8004a96:	00d2      	lsls	r2, r2, #3
 8004a98:	188a      	adds	r2, r1, r2
 8004a9a:	112d      	asrs	r5, r5, #4
 8004a9c:	6816      	ldr	r6, [r2, #0]
 8004a9e:	6857      	ldr	r7, [r2, #4]
 8004aa0:	06e8      	lsls	r0, r5, #27
 8004aa2:	d400      	bmi.n	8004aa6 <_dtoa_r+0x22e>
 8004aa4:	e3b6      	b.n	8005214 <_dtoa_r+0x99c>
 8004aa6:	401d      	ands	r5, r3
 8004aa8:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <_dtoa_r+0x464>)
 8004aaa:	9802      	ldr	r0, [sp, #8]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 ec88 	blx	80083c4 <__aeabi_ddiv>
 8004ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ab8:	910d      	str	r1, [sp, #52]	; 0x34
 8004aba:	2103      	movs	r1, #3
 8004abc:	4689      	mov	r9, r1
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	d014      	beq.n	8004aec <_dtoa_r+0x274>
 8004ac2:	4886      	ldr	r0, [pc, #536]	; (8004cdc <_dtoa_r+0x464>)
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	1c39      	adds	r1, r7, #0
 8004ac8:	1c30      	adds	r0, r6, #0
 8004aca:	464f      	mov	r7, r9
 8004acc:	4646      	mov	r6, r8
 8004ace:	2201      	movs	r2, #1
 8004ad0:	422a      	tst	r2, r5
 8004ad2:	d004      	beq.n	8004ade <_dtoa_r+0x266>
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	6873      	ldr	r3, [r6, #4]
 8004ad8:	3701      	adds	r7, #1
 8004ada:	f003 eb2c 	blx	8008134 <__aeabi_dmul>
 8004ade:	106d      	asrs	r5, r5, #1
 8004ae0:	3608      	adds	r6, #8
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	d1f3      	bne.n	8004ace <_dtoa_r+0x256>
 8004ae6:	46b9      	mov	r9, r7
 8004ae8:	1c06      	adds	r6, r0, #0
 8004aea:	1c0f      	adds	r7, r1, #0
 8004aec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af0:	1c32      	adds	r2, r6, #0
 8004af2:	1c3b      	adds	r3, r7, #0
 8004af4:	f003 ec66 	blx	80083c4 <__aeabi_ddiv>
 8004af8:	900c      	str	r0, [sp, #48]	; 0x30
 8004afa:	910d      	str	r1, [sp, #52]	; 0x34
 8004afc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	d009      	beq.n	8004b16 <_dtoa_r+0x29e>
 8004b02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b06:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <_dtoa_r+0x438>)
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <_dtoa_r+0x43c>)
 8004b0a:	f003 edd4 	blx	80086b4 <__aeabi_dcmplt>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d001      	beq.n	8004b16 <_dtoa_r+0x29e>
 8004b12:	f000 fd49 	bl	80055a8 <_dtoa_r+0xd30>
 8004b16:	4648      	mov	r0, r9
 8004b18:	f003 ea9e 	blx	8008058 <__aeabi_i2d>
 8004b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b20:	f003 eb08 	blx	8008134 <__aeabi_dmul>
 8004b24:	4a64      	ldr	r2, [pc, #400]	; (8004cb8 <_dtoa_r+0x440>)
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <_dtoa_r+0x444>)
 8004b28:	f003 e8fc 	blx	8007d24 <__adddf3>
 8004b2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b2e:	1c06      	adds	r6, r0, #0
 8004b30:	486b      	ldr	r0, [pc, #428]	; (8004ce0 <_dtoa_r+0x468>)
 8004b32:	180f      	adds	r7, r1, r0
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	d100      	bne.n	8004b3a <_dtoa_r+0x2c2>
 8004b38:	e2f7      	b.n	800512a <_dtoa_r+0x8b2>
 8004b3a:	9d07      	ldr	r5, [sp, #28]
 8004b3c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004b3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b40:	9513      	str	r5, [sp, #76]	; 0x4c
 8004b42:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	d100      	bne.n	8004b4a <_dtoa_r+0x2d2>
 8004b48:	e3a5      	b.n	8005296 <_dtoa_r+0xa1e>
 8004b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b4c:	4a62      	ldr	r2, [pc, #392]	; (8004cd8 <_dtoa_r+0x460>)
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4859      	ldr	r0, [pc, #356]	; (8004cc0 <_dtoa_r+0x448>)
 8004b5a:	495a      	ldr	r1, [pc, #360]	; (8004cc4 <_dtoa_r+0x44c>)
 8004b5c:	f003 ec32 	blx	80083c4 <__aeabi_ddiv>
 8004b60:	1c32      	adds	r2, r6, #0
 8004b62:	1c3b      	adds	r3, r7, #0
 8004b64:	f003 e8dc 	blx	8007d20 <__aeabi_dsub>
 8004b68:	9014      	str	r0, [sp, #80]	; 0x50
 8004b6a:	9115      	str	r1, [sp, #84]	; 0x54
 8004b6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b70:	f003 edd0 	blx	8008714 <__aeabi_d2iz>
 8004b74:	1c05      	adds	r5, r0, #0
 8004b76:	f003 ea70 	blx	8008058 <__aeabi_i2d>
 8004b7a:	1c02      	adds	r2, r0, #0
 8004b7c:	1c0b      	adds	r3, r1, #0
 8004b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b82:	f003 e8ce 	blx	8007d20 <__aeabi_dsub>
 8004b86:	3530      	adds	r5, #48	; 0x30
 8004b88:	062d      	lsls	r5, r5, #24
 8004b8a:	0e2d      	lsrs	r5, r5, #24
 8004b8c:	1c06      	adds	r6, r0, #0
 8004b8e:	1c0f      	adds	r7, r1, #0
 8004b90:	4658      	mov	r0, fp
 8004b92:	7005      	strb	r5, [r0, #0]
 8004b94:	46a8      	mov	r8, r5
 8004b96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004b98:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004b9a:	465d      	mov	r5, fp
 8004b9c:	1c32      	adds	r2, r6, #0
 8004b9e:	1c3b      	adds	r3, r7, #0
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	f003 edac 	blx	80086fc <__aeabi_dcmpgt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d001      	beq.n	8004bae <_dtoa_r+0x336>
 8004baa:	f000 fe1c 	bl	80057e6 <_dtoa_r+0xf6e>
 8004bae:	1c32      	adds	r2, r6, #0
 8004bb0:	1c3b      	adds	r3, r7, #0
 8004bb2:	483f      	ldr	r0, [pc, #252]	; (8004cb0 <_dtoa_r+0x438>)
 8004bb4:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <_dtoa_r+0x43c>)
 8004bb6:	f003 e8b4 	blx	8007d20 <__aeabi_dsub>
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	1c0b      	adds	r3, r1, #0
 8004bbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004bc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004bc2:	f003 ed9c 	blx	80086fc <__aeabi_dcmpgt>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d001      	beq.n	8004bce <_dtoa_r+0x356>
 8004bca:	f000 fd6b 	bl	80056a4 <_dtoa_r+0xe2c>
 8004bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004bd0:	2901      	cmp	r1, #1
 8004bd2:	dc00      	bgt.n	8004bd6 <_dtoa_r+0x35e>
 8004bd4:	e0b6      	b.n	8004d44 <_dtoa_r+0x4cc>
 8004bd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004bd8:	4652      	mov	r2, sl
 8004bda:	4681      	mov	r9, r0
 8004bdc:	46aa      	mov	sl, r5
 8004bde:	465d      	mov	r5, fp
 8004be0:	44d9      	add	r9, fp
 8004be2:	950c      	str	r5, [sp, #48]	; 0x30
 8004be4:	46a3      	mov	fp, r4
 8004be6:	9213      	str	r2, [sp, #76]	; 0x4c
 8004be8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8004bea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004bec:	e011      	b.n	8004c12 <_dtoa_r+0x39a>
 8004bee:	1c32      	adds	r2, r6, #0
 8004bf0:	1c3b      	adds	r3, r7, #0
 8004bf2:	482f      	ldr	r0, [pc, #188]	; (8004cb0 <_dtoa_r+0x438>)
 8004bf4:	492f      	ldr	r1, [pc, #188]	; (8004cb4 <_dtoa_r+0x43c>)
 8004bf6:	f003 e894 	blx	8007d20 <__aeabi_dsub>
 8004bfa:	1c22      	adds	r2, r4, #0
 8004bfc:	1c2b      	adds	r3, r5, #0
 8004bfe:	f003 ed5a 	blx	80086b4 <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d001      	beq.n	8004c0a <_dtoa_r+0x392>
 8004c06:	f000 fd49 	bl	800569c <_dtoa_r+0xe24>
 8004c0a:	45ca      	cmp	sl, r9
 8004c0c:	d101      	bne.n	8004c12 <_dtoa_r+0x39a>
 8004c0e:	f000 fd4e 	bl	80056ae <_dtoa_r+0xe36>
 8004c12:	1c20      	adds	r0, r4, #0
 8004c14:	1c29      	adds	r1, r5, #0
 8004c16:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <_dtoa_r+0x450>)
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <_dtoa_r+0x454>)
 8004c1a:	f003 ea8c 	blx	8008134 <__aeabi_dmul>
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <_dtoa_r+0x450>)
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <_dtoa_r+0x454>)
 8004c22:	1c04      	adds	r4, r0, #0
 8004c24:	1c0d      	adds	r5, r1, #0
 8004c26:	1c30      	adds	r0, r6, #0
 8004c28:	1c39      	adds	r1, r7, #0
 8004c2a:	f003 ea84 	blx	8008134 <__aeabi_dmul>
 8004c2e:	1c0f      	adds	r7, r1, #0
 8004c30:	1c06      	adds	r6, r0, #0
 8004c32:	f003 ed70 	blx	8008714 <__aeabi_d2iz>
 8004c36:	4680      	mov	r8, r0
 8004c38:	f003 ea0e 	blx	8008058 <__aeabi_i2d>
 8004c3c:	1c02      	adds	r2, r0, #0
 8004c3e:	1c0b      	adds	r3, r1, #0
 8004c40:	1c30      	adds	r0, r6, #0
 8004c42:	1c39      	adds	r1, r7, #0
 8004c44:	f003 e86c 	blx	8007d20 <__aeabi_dsub>
 8004c48:	4643      	mov	r3, r8
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	0e1b      	lsrs	r3, r3, #24
 8004c50:	1c06      	adds	r6, r0, #0
 8004c52:	1c0f      	adds	r7, r1, #0
 8004c54:	4650      	mov	r0, sl
 8004c56:	2101      	movs	r1, #1
 8004c58:	7003      	strb	r3, [r0, #0]
 8004c5a:	4698      	mov	r8, r3
 8004c5c:	448a      	add	sl, r1
 8004c5e:	1c30      	adds	r0, r6, #0
 8004c60:	1c39      	adds	r1, r7, #0
 8004c62:	1c22      	adds	r2, r4, #0
 8004c64:	1c2b      	adds	r3, r5, #0
 8004c66:	f003 ed26 	blx	80086b4 <__aeabi_dcmplt>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0bf      	beq.n	8004bee <_dtoa_r+0x376>
 8004c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c70:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004c72:	465c      	mov	r4, fp
 8004c74:	1c17      	adds	r7, r2, #0
 8004c76:	46d3      	mov	fp, sl
 8004c78:	9507      	str	r5, [sp, #28]
 8004c7a:	e1c9      	b.n	8005010 <_dtoa_r+0x798>
 8004c7c:	032b      	lsls	r3, r5, #12
 8004c7e:	d000      	beq.n	8004c82 <_dtoa_r+0x40a>
 8004c80:	e640      	b.n	8004904 <_dtoa_r+0x8c>
 8004c82:	4f18      	ldr	r7, [pc, #96]	; (8004ce4 <_dtoa_r+0x46c>)
 8004c84:	e63f      	b.n	8004906 <_dtoa_r+0x8e>
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	3ff80000 	.word	0x3ff80000
 8004c90:	636f4361 	.word	0x636f4361
 8004c94:	3fd287a7 	.word	0x3fd287a7
 8004c98:	8b60c8b3 	.word	0x8b60c8b3
 8004c9c:	3fc68a28 	.word	0x3fc68a28
 8004ca0:	509f79fb 	.word	0x509f79fb
 8004ca4:	3fd34413 	.word	0x3fd34413
	...
 8004cb4:	3ff00000 	.word	0x3ff00000
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	401c0000 	.word	0x401c0000
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	3fe00000 	.word	0x3fe00000
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	40240000 	.word	0x40240000
 8004cd0:	3ff00000 	.word	0x3ff00000
 8004cd4:	fffffc01 	.word	0xfffffc01
 8004cd8:	08008c78 	.word	0x08008c78
 8004cdc:	08008d68 	.word	0x08008d68
 8004ce0:	fcc00000 	.word	0xfcc00000
 8004ce4:	08009070 	.word	0x08009070
 8004ce8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004cea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004cec:	4680      	mov	r8, r0
 8004cee:	1c0e      	adds	r6, r1, #0
 8004cf0:	4bd9      	ldr	r3, [pc, #868]	; (8005058 <_dtoa_r+0x7e0>)
 8004cf2:	4446      	add	r6, r8
 8004cf4:	429e      	cmp	r6, r3
 8004cf6:	da00      	bge.n	8004cfa <_dtoa_r+0x482>
 8004cf8:	e1cc      	b.n	8005094 <_dtoa_r+0x81c>
 8004cfa:	48d8      	ldr	r0, [pc, #864]	; (800505c <_dtoa_r+0x7e4>)
 8004cfc:	1b80      	subs	r0, r0, r6
 8004cfe:	4085      	lsls	r5, r0
 8004d00:	4ad7      	ldr	r2, [pc, #860]	; (8005060 <_dtoa_r+0x7e8>)
 8004d02:	1c28      	adds	r0, r5, #0
 8004d04:	9d02      	ldr	r5, [sp, #8]
 8004d06:	18b3      	adds	r3, r6, r2
 8004d08:	40dd      	lsrs	r5, r3
 8004d0a:	4328      	orrs	r0, r5
 8004d0c:	f003 e992 	blx	8008034 <__aeabi_ui2d>
 8004d10:	4ad4      	ldr	r2, [pc, #848]	; (8005064 <_dtoa_r+0x7ec>)
 8004d12:	2301      	movs	r3, #1
 8004d14:	1889      	adds	r1, r1, r2
 8004d16:	1e75      	subs	r5, r6, #1
 8004d18:	9316      	str	r3, [sp, #88]	; 0x58
 8004d1a:	e62b      	b.n	8004974 <_dtoa_r+0xfc>
 8004d1c:	4fd2      	ldr	r7, [pc, #840]	; (8005068 <_dtoa_r+0x7f0>)
 8004d1e:	e5e0      	b.n	80048e2 <_dtoa_r+0x6a>
 8004d20:	2000      	movs	r0, #0
 8004d22:	9026      	str	r0, [sp, #152]	; 0x98
 8004d24:	2300      	movs	r3, #0
 8004d26:	6463      	str	r3, [r4, #68]	; 0x44
 8004d28:	1c20      	adds	r0, r4, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f001 f9f4 	bl	8006118 <_Balloc>
 8004d30:	2301      	movs	r3, #1
 8004d32:	425b      	negs	r3, r3
 8004d34:	4683      	mov	fp, r0
 8004d36:	6420      	str	r0, [r4, #64]	; 0x40
 8004d38:	2501      	movs	r5, #1
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8004d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d40:	9512      	str	r5, [sp, #72]	; 0x48
 8004d42:	9027      	str	r0, [sp, #156]	; 0x9c
 8004d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da00      	bge.n	8004d4c <_dtoa_r+0x4d4>
 8004d4a:	e0b6      	b.n	8004eba <_dtoa_r+0x642>
 8004d4c:	9d07      	ldr	r5, [sp, #28]
 8004d4e:	2d0e      	cmp	r5, #14
 8004d50:	dd00      	ble.n	8004d54 <_dtoa_r+0x4dc>
 8004d52:	e0b2      	b.n	8004eba <_dtoa_r+0x642>
 8004d54:	4ac5      	ldr	r2, [pc, #788]	; (800506c <_dtoa_r+0x7f4>)
 8004d56:	00eb      	lsls	r3, r5, #3
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d60:	9004      	str	r0, [sp, #16]
 8004d62:	9105      	str	r1, [sp, #20]
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	dc03      	bgt.n	8004d70 <_dtoa_r+0x4f8>
 8004d68:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	da00      	bge.n	8004d70 <_dtoa_r+0x4f8>
 8004d6e:	e319      	b.n	80053a4 <_dtoa_r+0xb2c>
 8004d70:	9e02      	ldr	r6, [sp, #8]
 8004d72:	9f03      	ldr	r7, [sp, #12]
 8004d74:	9a04      	ldr	r2, [sp, #16]
 8004d76:	9b05      	ldr	r3, [sp, #20]
 8004d78:	1c30      	adds	r0, r6, #0
 8004d7a:	1c39      	adds	r1, r7, #0
 8004d7c:	f003 eb22 	blx	80083c4 <__aeabi_ddiv>
 8004d80:	f003 ecc8 	blx	8008714 <__aeabi_d2iz>
 8004d84:	4680      	mov	r8, r0
 8004d86:	f003 e968 	blx	8008058 <__aeabi_i2d>
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	f003 e9d2 	blx	8008134 <__aeabi_dmul>
 8004d92:	1c02      	adds	r2, r0, #0
 8004d94:	1c0b      	adds	r3, r1, #0
 8004d96:	1c30      	adds	r0, r6, #0
 8004d98:	1c39      	adds	r1, r7, #0
 8004d9a:	f002 efc2 	blx	8007d20 <__aeabi_dsub>
 8004d9e:	4643      	mov	r3, r8
 8004da0:	3330      	adds	r3, #48	; 0x30
 8004da2:	465a      	mov	r2, fp
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	465d      	mov	r5, fp
 8004daa:	1c06      	adds	r6, r0, #0
 8004dac:	1c0f      	adds	r7, r1, #0
 8004dae:	3501      	adds	r5, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d048      	beq.n	8004e46 <_dtoa_r+0x5ce>
 8004db4:	4ba5      	ldr	r3, [pc, #660]	; (800504c <_dtoa_r+0x7d4>)
 8004db6:	4aa4      	ldr	r2, [pc, #656]	; (8005048 <_dtoa_r+0x7d0>)
 8004db8:	f003 e9bc 	blx	8008134 <__aeabi_dmul>
 8004dbc:	4aa4      	ldr	r2, [pc, #656]	; (8005050 <_dtoa_r+0x7d8>)
 8004dbe:	4ba5      	ldr	r3, [pc, #660]	; (8005054 <_dtoa_r+0x7dc>)
 8004dc0:	1c06      	adds	r6, r0, #0
 8004dc2:	1c0f      	adds	r7, r1, #0
 8004dc4:	f003 ec6a 	blx	800869c <__aeabi_dcmpeq>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d000      	beq.n	8004dce <_dtoa_r+0x556>
 8004dcc:	e3d9      	b.n	8005582 <_dtoa_r+0xd0a>
 8004dce:	46a9      	mov	r9, r5
 8004dd0:	46a2      	mov	sl, r4
 8004dd2:	9c04      	ldr	r4, [sp, #16]
 8004dd4:	9d05      	ldr	r5, [sp, #20]
 8004dd6:	e00e      	b.n	8004df6 <_dtoa_r+0x57e>
 8004dd8:	1c10      	adds	r0, r2, #0
 8004dda:	1c19      	adds	r1, r3, #0
 8004ddc:	4b9b      	ldr	r3, [pc, #620]	; (800504c <_dtoa_r+0x7d4>)
 8004dde:	4a9a      	ldr	r2, [pc, #616]	; (8005048 <_dtoa_r+0x7d0>)
 8004de0:	f003 e9a8 	blx	8008134 <__aeabi_dmul>
 8004de4:	4a9a      	ldr	r2, [pc, #616]	; (8005050 <_dtoa_r+0x7d8>)
 8004de6:	4b9b      	ldr	r3, [pc, #620]	; (8005054 <_dtoa_r+0x7dc>)
 8004de8:	1c06      	adds	r6, r0, #0
 8004dea:	1c0f      	adds	r7, r1, #0
 8004dec:	f003 ec56 	blx	800869c <__aeabi_dcmpeq>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d000      	beq.n	8004df6 <_dtoa_r+0x57e>
 8004df4:	e3c3      	b.n	800557e <_dtoa_r+0xd06>
 8004df6:	1c22      	adds	r2, r4, #0
 8004df8:	1c2b      	adds	r3, r5, #0
 8004dfa:	1c30      	adds	r0, r6, #0
 8004dfc:	1c39      	adds	r1, r7, #0
 8004dfe:	f003 eae2 	blx	80083c4 <__aeabi_ddiv>
 8004e02:	f003 ec88 	blx	8008714 <__aeabi_d2iz>
 8004e06:	4680      	mov	r8, r0
 8004e08:	f003 e926 	blx	8008058 <__aeabi_i2d>
 8004e0c:	1c22      	adds	r2, r4, #0
 8004e0e:	1c2b      	adds	r3, r5, #0
 8004e10:	f003 e990 	blx	8008134 <__aeabi_dmul>
 8004e14:	1c02      	adds	r2, r0, #0
 8004e16:	1c0b      	adds	r3, r1, #0
 8004e18:	1c30      	adds	r0, r6, #0
 8004e1a:	1c39      	adds	r1, r7, #0
 8004e1c:	f002 ef80 	blx	8007d20 <__aeabi_dsub>
 8004e20:	1c0b      	adds	r3, r1, #0
 8004e22:	1c0f      	adds	r7, r1, #0
 8004e24:	4641      	mov	r1, r8
 8004e26:	3130      	adds	r1, #48	; 0x30
 8004e28:	1c02      	adds	r2, r0, #0
 8004e2a:	1c06      	adds	r6, r0, #0
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	7001      	strb	r1, [r0, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	4489      	add	r9, r1
 8004e34:	4648      	mov	r0, r9
 8004e36:	4659      	mov	r1, fp
 8004e38:	1a40      	subs	r0, r0, r1
 8004e3a:	4684      	mov	ip, r0
 8004e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3e:	4560      	cmp	r0, ip
 8004e40:	d1ca      	bne.n	8004dd8 <_dtoa_r+0x560>
 8004e42:	464d      	mov	r5, r9
 8004e44:	4654      	mov	r4, sl
 8004e46:	1c32      	adds	r2, r6, #0
 8004e48:	1c3b      	adds	r3, r7, #0
 8004e4a:	1c30      	adds	r0, r6, #0
 8004e4c:	1c39      	adds	r1, r7, #0
 8004e4e:	f002 ef6a 	blx	8007d24 <__adddf3>
 8004e52:	1c06      	adds	r6, r0, #0
 8004e54:	1c0f      	adds	r7, r1, #0
 8004e56:	1c32      	adds	r2, r6, #0
 8004e58:	9804      	ldr	r0, [sp, #16]
 8004e5a:	9905      	ldr	r1, [sp, #20]
 8004e5c:	1c3b      	adds	r3, r7, #0
 8004e5e:	f003 ec2a 	blx	80086b4 <__aeabi_dcmplt>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d10c      	bne.n	8004e80 <_dtoa_r+0x608>
 8004e66:	9804      	ldr	r0, [sp, #16]
 8004e68:	9905      	ldr	r1, [sp, #20]
 8004e6a:	1c32      	adds	r2, r6, #0
 8004e6c:	1c3b      	adds	r3, r7, #0
 8004e6e:	f003 ec16 	blx	800869c <__aeabi_dcmpeq>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d100      	bne.n	8004e78 <_dtoa_r+0x600>
 8004e76:	e384      	b.n	8005582 <_dtoa_r+0xd0a>
 8004e78:	4640      	mov	r0, r8
 8004e7a:	07c0      	lsls	r0, r0, #31
 8004e7c:	d400      	bmi.n	8004e80 <_dtoa_r+0x608>
 8004e7e:	e380      	b.n	8005582 <_dtoa_r+0xd0a>
 8004e80:	1e6b      	subs	r3, r5, #1
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	465f      	mov	r7, fp
 8004e86:	46ab      	mov	fp, r5
 8004e88:	9d07      	ldr	r5, [sp, #28]
 8004e8a:	1c19      	adds	r1, r3, #0
 8004e8c:	9517      	str	r5, [sp, #92]	; 0x5c
 8004e8e:	465a      	mov	r2, fp
 8004e90:	e002      	b.n	8004e98 <_dtoa_r+0x620>
 8004e92:	3a02      	subs	r2, #2
 8004e94:	7811      	ldrb	r1, [r2, #0]
 8004e96:	1c1a      	adds	r2, r3, #0
 8004e98:	1e53      	subs	r3, r2, #1
 8004e9a:	2939      	cmp	r1, #57	; 0x39
 8004e9c:	d001      	beq.n	8004ea2 <_dtoa_r+0x62a>
 8004e9e:	f000 fc0d 	bl	80056bc <_dtoa_r+0xe44>
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	d1f5      	bne.n	8004e92 <_dtoa_r+0x61a>
 8004ea6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004ea8:	2330      	movs	r3, #48	; 0x30
 8004eaa:	703b      	strb	r3, [r7, #0]
 8004eac:	4693      	mov	fp, r2
 8004eae:	3501      	adds	r5, #1
 8004eb0:	1c3b      	adds	r3, r7, #0
 8004eb2:	2231      	movs	r2, #49	; 0x31
 8004eb4:	9507      	str	r5, [sp, #28]
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e0aa      	b.n	8005010 <_dtoa_r+0x798>
 8004eba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	d000      	beq.n	8004ec2 <_dtoa_r+0x64a>
 8004ec0:	e0f1      	b.n	80050a6 <_dtoa_r+0x82e>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8004ec6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004ec8:	4681      	mov	r9, r0
 8004eca:	4651      	mov	r1, sl
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	dd0c      	ble.n	8004eea <_dtoa_r+0x672>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	dd0a      	ble.n	8004eea <_dtoa_r+0x672>
 8004ed4:	4653      	mov	r3, sl
 8004ed6:	45ba      	cmp	sl, r7
 8004ed8:	dd00      	ble.n	8004edc <_dtoa_r+0x664>
 8004eda:	1c3b      	adds	r3, r7, #0
 8004edc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ede:	4650      	mov	r0, sl
 8004ee0:	1aed      	subs	r5, r5, r3
 8004ee2:	1ac0      	subs	r0, r0, r3
 8004ee4:	950a      	str	r5, [sp, #40]	; 0x28
 8004ee6:	1aff      	subs	r7, r7, r3
 8004ee8:	4682      	mov	sl, r0
 8004eea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	dd1a      	ble.n	8004f26 <_dtoa_r+0x6ae>
 8004ef0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	d100      	bne.n	8004ef8 <_dtoa_r+0x680>
 8004ef6:	e33b      	b.n	8005570 <_dtoa_r+0xcf8>
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	dd10      	ble.n	8004f1e <_dtoa_r+0x6a6>
 8004efc:	4649      	mov	r1, r9
 8004efe:	1c32      	adds	r2, r6, #0
 8004f00:	1c20      	adds	r0, r4, #0
 8004f02:	f001 fae7 	bl	80064d4 <__pow5mult>
 8004f06:	4681      	mov	r9, r0
 8004f08:	4649      	mov	r1, r9
 8004f0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f0c:	1c20      	adds	r0, r4, #0
 8004f0e:	f001 fa35 	bl	800637c <__multiply>
 8004f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f14:	1c05      	adds	r5, r0, #0
 8004f16:	1c20      	adds	r0, r4, #0
 8004f18:	f001 f928 	bl	800616c <_Bfree>
 8004f1c:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f20:	1baa      	subs	r2, r5, r6
 8004f22:	d000      	beq.n	8004f26 <_dtoa_r+0x6ae>
 8004f24:	e369      	b.n	80055fa <_dtoa_r+0xd82>
 8004f26:	1c20      	adds	r0, r4, #0
 8004f28:	2101      	movs	r1, #1
 8004f2a:	f001 fa1b 	bl	8006364 <__i2b>
 8004f2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004f30:	4680      	mov	r8, r0
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	dd05      	ble.n	8004f42 <_dtoa_r+0x6ca>
 8004f36:	4641      	mov	r1, r8
 8004f38:	1c20      	adds	r0, r4, #0
 8004f3a:	1c2a      	adds	r2, r5, #0
 8004f3c:	f001 faca 	bl	80064d4 <__pow5mult>
 8004f40:	4680      	mov	r8, r0
 8004f42:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004f44:	2500      	movs	r5, #0
 8004f46:	2801      	cmp	r0, #1
 8004f48:	dc00      	bgt.n	8004f4c <_dtoa_r+0x6d4>
 8004f4a:	e259      	b.n	8005400 <_dtoa_r+0xb88>
 8004f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004f4e:	2301      	movs	r3, #1
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d000      	beq.n	8004f56 <_dtoa_r+0x6de>
 8004f54:	e1fd      	b.n	8005352 <_dtoa_r+0xada>
 8004f56:	4453      	add	r3, sl
 8004f58:	221f      	movs	r2, #31
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <_dtoa_r+0x6e8>
 8004f5e:	e152      	b.n	8005206 <_dtoa_r+0x98e>
 8004f60:	2220      	movs	r2, #32
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	2a04      	cmp	r2, #4
 8004f66:	dc01      	bgt.n	8004f6c <_dtoa_r+0x6f4>
 8004f68:	f000 fc47 	bl	80057fa <_dtoa_r+0xf82>
 8004f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f6e:	221c      	movs	r2, #28
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	18c0      	adds	r0, r0, r3
 8004f74:	900a      	str	r0, [sp, #40]	; 0x28
 8004f76:	18ff      	adds	r7, r7, r3
 8004f78:	449a      	add	sl, r3
 8004f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	dd04      	ble.n	8004f8a <_dtoa_r+0x712>
 8004f80:	1c20      	adds	r0, r4, #0
 8004f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f84:	f001 fafe 	bl	8006584 <__lshift>
 8004f88:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f8a:	4653      	mov	r3, sl
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd05      	ble.n	8004f9c <_dtoa_r+0x724>
 8004f90:	4641      	mov	r1, r8
 8004f92:	1c20      	adds	r0, r4, #0
 8004f94:	4652      	mov	r2, sl
 8004f96:	f001 faf5 	bl	8006584 <__lshift>
 8004f9a:	4680      	mov	r8, r0
 8004f9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d000      	beq.n	8004fa4 <_dtoa_r+0x72c>
 8004fa2:	e1e1      	b.n	8005368 <_dtoa_r+0xaf0>
 8004fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	2a02      	cmp	r2, #2
 8004faa:	dc00      	bgt.n	8004fae <_dtoa_r+0x736>
 8004fac:	2300      	movs	r3, #0
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	d100      	bne.n	8004fb4 <_dtoa_r+0x73c>
 8004fb2:	e0dd      	b.n	8005170 <_dtoa_r+0x8f8>
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dd00      	ble.n	8004fbc <_dtoa_r+0x744>
 8004fba:	e0d9      	b.n	8005170 <_dtoa_r+0x8f8>
 8004fbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d000      	beq.n	8004fc4 <_dtoa_r+0x74c>
 8004fc2:	e0cf      	b.n	8005164 <_dtoa_r+0x8ec>
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1c20      	adds	r0, r4, #0
 8004fc8:	2205      	movs	r2, #5
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f001 f8da 	bl	8006184 <__multadd>
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004fd6:	f001 fb3d 	bl	8006654 <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dc00      	bgt.n	8004fe0 <_dtoa_r+0x768>
 8004fde:	e0c1      	b.n	8005164 <_dtoa_r+0x8ec>
 8004fe0:	9d07      	ldr	r5, [sp, #28]
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	2331      	movs	r3, #49	; 0x31
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	2001      	movs	r0, #1
 8004fea:	7013      	strb	r3, [r2, #0]
 8004fec:	9507      	str	r5, [sp, #28]
 8004fee:	465f      	mov	r7, fp
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	4483      	add	fp, r0
 8004ff4:	1c20      	adds	r0, r4, #0
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	f001 f8b8 	bl	800616c <_Bfree>
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <_dtoa_r+0x798>
 8005002:	454d      	cmp	r5, r9
 8005004:	d000      	beq.n	8005008 <_dtoa_r+0x790>
 8005006:	e10c      	b.n	8005222 <_dtoa_r+0x9aa>
 8005008:	1c20      	adds	r0, r4, #0
 800500a:	4649      	mov	r1, r9
 800500c:	f001 f8ae 	bl	800616c <_Bfree>
 8005010:	1c20      	adds	r0, r4, #0
 8005012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005014:	f001 f8aa 	bl	800616c <_Bfree>
 8005018:	2300      	movs	r3, #0
 800501a:	4658      	mov	r0, fp
 800501c:	7003      	strb	r3, [r0, #0]
 800501e:	9b07      	ldr	r3, [sp, #28]
 8005020:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005022:	3301      	adds	r3, #1
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8005028:	2d00      	cmp	r5, #0
 800502a:	d100      	bne.n	800502e <_dtoa_r+0x7b6>
 800502c:	e459      	b.n	80048e2 <_dtoa_r+0x6a>
 800502e:	6028      	str	r0, [r5, #0]
 8005030:	e457      	b.n	80048e2 <_dtoa_r+0x6a>
 8005032:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005034:	9807      	ldr	r0, [sp, #28]
 8005036:	1a2d      	subs	r5, r5, r0
 8005038:	950a      	str	r5, [sp, #40]	; 0x28
 800503a:	4245      	negs	r5, r0
 800503c:	950f      	str	r5, [sp, #60]	; 0x3c
 800503e:	2500      	movs	r5, #0
 8005040:	9511      	str	r5, [sp, #68]	; 0x44
 8005042:	e4e6      	b.n	8004a12 <_dtoa_r+0x19a>
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	00000000 	.word	0x00000000
 800504c:	40240000 	.word	0x40240000
	...
 8005058:	fffffbef 	.word	0xfffffbef
 800505c:	fffffc0e 	.word	0xfffffc0e
 8005060:	00000412 	.word	0x00000412
 8005064:	fe100000 	.word	0xfe100000
 8005068:	0800906c 	.word	0x0800906c
 800506c:	08008c78 	.word	0x08008c78
 8005070:	426d      	negs	r5, r5
 8005072:	2300      	movs	r3, #0
 8005074:	950a      	str	r5, [sp, #40]	; 0x28
 8005076:	469a      	mov	sl, r3
 8005078:	e4c3      	b.n	8004a02 <_dtoa_r+0x18a>
 800507a:	9807      	ldr	r0, [sp, #28]
 800507c:	f002 efec 	blx	8008058 <__aeabi_i2d>
 8005080:	1c3b      	adds	r3, r7, #0
 8005082:	1c32      	adds	r2, r6, #0
 8005084:	f003 eb0a 	blx	800869c <__aeabi_dcmpeq>
 8005088:	4243      	negs	r3, r0
 800508a:	4143      	adcs	r3, r0
 800508c:	9807      	ldr	r0, [sp, #28]
 800508e:	1ac0      	subs	r0, r0, r3
 8005090:	9007      	str	r0, [sp, #28]
 8005092:	e498      	b.n	80049c6 <_dtoa_r+0x14e>
 8005094:	48d6      	ldr	r0, [pc, #856]	; (80053f0 <_dtoa_r+0xb78>)
 8005096:	9902      	ldr	r1, [sp, #8]
 8005098:	1b80      	subs	r0, r0, r6
 800509a:	4081      	lsls	r1, r0
 800509c:	1c08      	adds	r0, r1, #0
 800509e:	e635      	b.n	8004d0c <_dtoa_r+0x494>
 80050a0:	2100      	movs	r1, #0
 80050a2:	910e      	str	r1, [sp, #56]	; 0x38
 80050a4:	e4a5      	b.n	80049f2 <_dtoa_r+0x17a>
 80050a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80050a8:	2801      	cmp	r0, #1
 80050aa:	dc00      	bgt.n	80050ae <_dtoa_r+0x836>
 80050ac:	e2c5      	b.n	800563a <_dtoa_r+0xdc2>
 80050ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050b2:	3e01      	subs	r6, #1
 80050b4:	42b5      	cmp	r5, r6
 80050b6:	da00      	bge.n	80050ba <_dtoa_r+0x842>
 80050b8:	e266      	b.n	8005588 <_dtoa_r+0xd10>
 80050ba:	1bae      	subs	r6, r5, r6
 80050bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050be:	2d00      	cmp	r5, #0
 80050c0:	da00      	bge.n	80050c4 <_dtoa_r+0x84c>
 80050c2:	e2c2      	b.n	800564a <_dtoa_r+0xdd2>
 80050c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80050ca:	1c20      	adds	r0, r4, #0
 80050cc:	18ed      	adds	r5, r5, r3
 80050ce:	2101      	movs	r1, #1
 80050d0:	950a      	str	r5, [sp, #40]	; 0x28
 80050d2:	449a      	add	sl, r3
 80050d4:	f001 f946 	bl	8006364 <__i2b>
 80050d8:	4681      	mov	r9, r0
 80050da:	e6f6      	b.n	8004eca <_dtoa_r+0x652>
 80050dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050de:	2a04      	cmp	r2, #4
 80050e0:	d100      	bne.n	80050e4 <_dtoa_r+0x86c>
 80050e2:	e232      	b.n	800554a <_dtoa_r+0xcd2>
 80050e4:	2a05      	cmp	r2, #5
 80050e6:	d000      	beq.n	80050ea <_dtoa_r+0x872>
 80050e8:	e61c      	b.n	8004d24 <_dtoa_r+0x4ac>
 80050ea:	2501      	movs	r5, #1
 80050ec:	9512      	str	r5, [sp, #72]	; 0x48
 80050ee:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80050f0:	9807      	ldr	r0, [sp, #28]
 80050f2:	182d      	adds	r5, r5, r0
 80050f4:	1c2e      	adds	r6, r5, #0
 80050f6:	9510      	str	r5, [sp, #64]	; 0x40
 80050f8:	3601      	adds	r6, #1
 80050fa:	2500      	movs	r5, #0
 80050fc:	220e      	movs	r2, #14
 80050fe:	42b2      	cmp	r2, r6
 8005100:	416d      	adcs	r5, r5
 8005102:	2e00      	cmp	r6, #0
 8005104:	dc00      	bgt.n	8005108 <_dtoa_r+0x890>
 8005106:	e224      	b.n	8005552 <_dtoa_r+0xcda>
 8005108:	401d      	ands	r5, r3
 800510a:	9609      	str	r6, [sp, #36]	; 0x24
 800510c:	e4a4      	b.n	8004a58 <_dtoa_r+0x1e0>
 800510e:	4648      	mov	r0, r9
 8005110:	f002 efa2 	blx	8008058 <__aeabi_i2d>
 8005114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005118:	f003 e80c 	blx	8008134 <__aeabi_dmul>
 800511c:	4bad      	ldr	r3, [pc, #692]	; (80053d4 <_dtoa_r+0xb5c>)
 800511e:	4aac      	ldr	r2, [pc, #688]	; (80053d0 <_dtoa_r+0xb58>)
 8005120:	f002 ee00 	blx	8007d24 <__adddf3>
 8005124:	1c06      	adds	r6, r0, #0
 8005126:	48b3      	ldr	r0, [pc, #716]	; (80053f4 <_dtoa_r+0xb7c>)
 8005128:	180f      	adds	r7, r1, r0
 800512a:	4aab      	ldr	r2, [pc, #684]	; (80053d8 <_dtoa_r+0xb60>)
 800512c:	4bab      	ldr	r3, [pc, #684]	; (80053dc <_dtoa_r+0xb64>)
 800512e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005130:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005132:	f002 edf6 	blx	8007d20 <__aeabi_dsub>
 8005136:	1c32      	adds	r2, r6, #0
 8005138:	1c3b      	adds	r3, r7, #0
 800513a:	900c      	str	r0, [sp, #48]	; 0x30
 800513c:	910d      	str	r1, [sp, #52]	; 0x34
 800513e:	f003 eade 	blx	80086fc <__aeabi_dcmpgt>
 8005142:	2800      	cmp	r0, #0
 8005144:	d000      	beq.n	8005148 <_dtoa_r+0x8d0>
 8005146:	e0a2      	b.n	800528e <_dtoa_r+0xa16>
 8005148:	2580      	movs	r5, #128	; 0x80
 800514a:	062d      	lsls	r5, r5, #24
 800514c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800514e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005150:	1c32      	adds	r2, r6, #0
 8005152:	197b      	adds	r3, r7, r5
 8005154:	f003 eaae 	blx	80086b4 <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	d100      	bne.n	800515e <_dtoa_r+0x8e6>
 800515c:	e5f2      	b.n	8004d44 <_dtoa_r+0x4cc>
 800515e:	2000      	movs	r0, #0
 8005160:	4680      	mov	r8, r0
 8005162:	4681      	mov	r9, r0
 8005164:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005166:	43ed      	mvns	r5, r5
 8005168:	9507      	str	r5, [sp, #28]
 800516a:	465f      	mov	r7, fp
 800516c:	2500      	movs	r5, #0
 800516e:	e741      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005170:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005172:	2900      	cmp	r1, #0
 8005174:	d000      	beq.n	8005178 <_dtoa_r+0x900>
 8005176:	e166      	b.n	8005446 <_dtoa_r+0xbce>
 8005178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800517a:	46a2      	mov	sl, r4
 800517c:	2500      	movs	r5, #0
 800517e:	4644      	mov	r4, r8
 8005180:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005182:	4690      	mov	r8, r2
 8005184:	e006      	b.n	8005194 <_dtoa_r+0x91c>
 8005186:	1c31      	adds	r1, r6, #0
 8005188:	4650      	mov	r0, sl
 800518a:	220a      	movs	r2, #10
 800518c:	2300      	movs	r3, #0
 800518e:	f000 fff9 	bl	8006184 <__multadd>
 8005192:	1c06      	adds	r6, r0, #0
 8005194:	1c30      	adds	r0, r6, #0
 8005196:	1c21      	adds	r1, r4, #0
 8005198:	f7ff fac2 	bl	8004720 <quorem>
 800519c:	1c07      	adds	r7, r0, #0
 800519e:	3730      	adds	r7, #48	; 0x30
 80051a0:	465b      	mov	r3, fp
 80051a2:	555f      	strb	r7, [r3, r5]
 80051a4:	3501      	adds	r5, #1
 80051a6:	4545      	cmp	r5, r8
 80051a8:	dbed      	blt.n	8005186 <_dtoa_r+0x90e>
 80051aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ac:	46a0      	mov	r8, r4
 80051ae:	960b      	str	r6, [sp, #44]	; 0x2c
 80051b0:	4654      	mov	r4, sl
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc00      	bgt.n	80051b8 <_dtoa_r+0x940>
 80051b6:	e2e9      	b.n	800578c <_dtoa_r+0xf14>
 80051b8:	469a      	mov	sl, r3
 80051ba:	44da      	add	sl, fp
 80051bc:	2500      	movs	r5, #0
 80051be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c0:	1c20      	adds	r0, r4, #0
 80051c2:	2201      	movs	r2, #1
 80051c4:	f001 f9de 	bl	8006584 <__lshift>
 80051c8:	4641      	mov	r1, r8
 80051ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80051cc:	f001 fa42 	bl	8006654 <__mcmp>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	dc00      	bgt.n	80051d6 <_dtoa_r+0x95e>
 80051d4:	e27b      	b.n	80056ce <_dtoa_r+0xe56>
 80051d6:	4656      	mov	r6, sl
 80051d8:	3e01      	subs	r6, #1
 80051da:	7833      	ldrb	r3, [r6, #0]
 80051dc:	4652      	mov	r2, sl
 80051de:	4659      	mov	r1, fp
 80051e0:	e003      	b.n	80051ea <_dtoa_r+0x972>
 80051e2:	3a02      	subs	r2, #2
 80051e4:	7813      	ldrb	r3, [r2, #0]
 80051e6:	1c32      	adds	r2, r6, #0
 80051e8:	3e01      	subs	r6, #1
 80051ea:	2b39      	cmp	r3, #57	; 0x39
 80051ec:	d000      	beq.n	80051f0 <_dtoa_r+0x978>
 80051ee:	e296      	b.n	800571e <_dtoa_r+0xea6>
 80051f0:	42b1      	cmp	r1, r6
 80051f2:	d1f6      	bne.n	80051e2 <_dtoa_r+0x96a>
 80051f4:	4692      	mov	sl, r2
 80051f6:	9a07      	ldr	r2, [sp, #28]
 80051f8:	2331      	movs	r3, #49	; 0x31
 80051fa:	3201      	adds	r2, #1
 80051fc:	9207      	str	r2, [sp, #28]
 80051fe:	700b      	strb	r3, [r1, #0]
 8005200:	1c0f      	adds	r7, r1, #0
 8005202:	46d3      	mov	fp, sl
 8005204:	e6f6      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005206:	231c      	movs	r3, #28
 8005208:	990a      	ldr	r1, [sp, #40]	; 0x28
 800520a:	18c9      	adds	r1, r1, r3
 800520c:	910a      	str	r1, [sp, #40]	; 0x28
 800520e:	18ff      	adds	r7, r7, r3
 8005210:	449a      	add	sl, r3
 8005212:	e6b2      	b.n	8004f7a <_dtoa_r+0x702>
 8005214:	9a02      	ldr	r2, [sp, #8]
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	920c      	str	r2, [sp, #48]	; 0x30
 800521a:	930d      	str	r3, [sp, #52]	; 0x34
 800521c:	2302      	movs	r3, #2
 800521e:	4699      	mov	r9, r3
 8005220:	e44d      	b.n	8004abe <_dtoa_r+0x246>
 8005222:	2d00      	cmp	r5, #0
 8005224:	d100      	bne.n	8005228 <_dtoa_r+0x9b0>
 8005226:	e6ef      	b.n	8005008 <_dtoa_r+0x790>
 8005228:	1c20      	adds	r0, r4, #0
 800522a:	1c29      	adds	r1, r5, #0
 800522c:	f000 ff9e 	bl	800616c <_Bfree>
 8005230:	e6ea      	b.n	8005008 <_dtoa_r+0x790>
 8005232:	9b07      	ldr	r3, [sp, #28]
 8005234:	425d      	negs	r5, r3
 8005236:	2d00      	cmp	r5, #0
 8005238:	d100      	bne.n	800523c <_dtoa_r+0x9c4>
 800523a:	e1ad      	b.n	8005598 <_dtoa_r+0xd20>
 800523c:	230f      	movs	r3, #15
 800523e:	402b      	ands	r3, r5
 8005240:	4a6d      	ldr	r2, [pc, #436]	; (80053f8 <_dtoa_r+0xb80>)
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	9802      	ldr	r0, [sp, #8]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f002 ef72 	blx	8008134 <__aeabi_dmul>
 8005252:	112d      	asrs	r5, r5, #4
 8005254:	900c      	str	r0, [sp, #48]	; 0x30
 8005256:	910d      	str	r1, [sp, #52]	; 0x34
 8005258:	2d00      	cmp	r5, #0
 800525a:	d100      	bne.n	800525e <_dtoa_r+0x9e6>
 800525c:	e2bf      	b.n	80057de <_dtoa_r+0xf66>
 800525e:	2002      	movs	r0, #2
 8005260:	4681      	mov	r9, r0
 8005262:	4e66      	ldr	r6, [pc, #408]	; (80053fc <_dtoa_r+0xb84>)
 8005264:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005266:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005268:	46a0      	mov	r8, r4
 800526a:	2701      	movs	r7, #1
 800526c:	464c      	mov	r4, r9
 800526e:	422f      	tst	r7, r5
 8005270:	d004      	beq.n	800527c <_dtoa_r+0xa04>
 8005272:	6832      	ldr	r2, [r6, #0]
 8005274:	6873      	ldr	r3, [r6, #4]
 8005276:	3401      	adds	r4, #1
 8005278:	f002 ef5c 	blx	8008134 <__aeabi_dmul>
 800527c:	106d      	asrs	r5, r5, #1
 800527e:	3608      	adds	r6, #8
 8005280:	2d00      	cmp	r5, #0
 8005282:	d1f4      	bne.n	800526e <_dtoa_r+0x9f6>
 8005284:	46a1      	mov	r9, r4
 8005286:	900c      	str	r0, [sp, #48]	; 0x30
 8005288:	910d      	str	r1, [sp, #52]	; 0x34
 800528a:	4644      	mov	r4, r8
 800528c:	e436      	b.n	8004afc <_dtoa_r+0x284>
 800528e:	2000      	movs	r0, #0
 8005290:	4680      	mov	r8, r0
 8005292:	4681      	mov	r9, r0
 8005294:	e6a4      	b.n	8004fe0 <_dtoa_r+0x768>
 8005296:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005298:	4a57      	ldr	r2, [pc, #348]	; (80053f8 <_dtoa_r+0xb80>)
 800529a:	3d01      	subs	r5, #1
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	1c32      	adds	r2, r6, #0
 80052a6:	1c3b      	adds	r3, r7, #0
 80052a8:	9514      	str	r5, [sp, #80]	; 0x50
 80052aa:	f002 ef44 	blx	8008134 <__aeabi_dmul>
 80052ae:	9018      	str	r0, [sp, #96]	; 0x60
 80052b0:	9119      	str	r1, [sp, #100]	; 0x64
 80052b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052b6:	f003 ea2e 	blx	8008714 <__aeabi_d2iz>
 80052ba:	1c05      	adds	r5, r0, #0
 80052bc:	f002 eecc 	blx	8008058 <__aeabi_i2d>
 80052c0:	1c02      	adds	r2, r0, #0
 80052c2:	1c0b      	adds	r3, r1, #0
 80052c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052c8:	f002 ed2a 	blx	8007d20 <__aeabi_dsub>
 80052cc:	1c0f      	adds	r7, r1, #0
 80052ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80052d0:	3530      	adds	r5, #48	; 0x30
 80052d2:	1c06      	adds	r6, r0, #0
 80052d4:	4658      	mov	r0, fp
 80052d6:	7005      	strb	r5, [r0, #0]
 80052d8:	4689      	mov	r9, r1
 80052da:	3001      	adds	r0, #1
 80052dc:	900c      	str	r0, [sp, #48]	; 0x30
 80052de:	44d9      	add	r9, fp
 80052e0:	1c05      	adds	r5, r0, #0
 80052e2:	2901      	cmp	r1, #1
 80052e4:	d01f      	beq.n	8005326 <_dtoa_r+0xaae>
 80052e6:	1c30      	adds	r0, r6, #0
 80052e8:	1c39      	adds	r1, r7, #0
 80052ea:	46a0      	mov	r8, r4
 80052ec:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <_dtoa_r+0xb68>)
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <_dtoa_r+0xb6c>)
 80052f0:	f002 ef20 	blx	8008134 <__aeabi_dmul>
 80052f4:	1c0f      	adds	r7, r1, #0
 80052f6:	1c06      	adds	r6, r0, #0
 80052f8:	f003 ea0c 	blx	8008714 <__aeabi_d2iz>
 80052fc:	1c04      	adds	r4, r0, #0
 80052fe:	f002 eeac 	blx	8008058 <__aeabi_i2d>
 8005302:	3430      	adds	r4, #48	; 0x30
 8005304:	1c02      	adds	r2, r0, #0
 8005306:	1c0b      	adds	r3, r1, #0
 8005308:	1c30      	adds	r0, r6, #0
 800530a:	1c39      	adds	r1, r7, #0
 800530c:	f002 ed08 	blx	8007d20 <__aeabi_dsub>
 8005310:	702c      	strb	r4, [r5, #0]
 8005312:	3501      	adds	r5, #1
 8005314:	454d      	cmp	r5, r9
 8005316:	d1e9      	bne.n	80052ec <_dtoa_r+0xa74>
 8005318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800531a:	1c06      	adds	r6, r0, #0
 800531c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800531e:	182d      	adds	r5, r5, r0
 8005320:	950c      	str	r5, [sp, #48]	; 0x30
 8005322:	1c0f      	adds	r7, r1, #0
 8005324:	4644      	mov	r4, r8
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <_dtoa_r+0xb70>)
 8005328:	4b30      	ldr	r3, [pc, #192]	; (80053ec <_dtoa_r+0xb74>)
 800532a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800532c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800532e:	f002 ecfa 	blx	8007d24 <__adddf3>
 8005332:	1c32      	adds	r2, r6, #0
 8005334:	1c3b      	adds	r3, r7, #0
 8005336:	f003 e9be 	blx	80086b4 <__aeabi_dcmplt>
 800533a:	2800      	cmp	r0, #0
 800533c:	d100      	bne.n	8005340 <_dtoa_r+0xac8>
 800533e:	e162      	b.n	8005606 <_dtoa_r+0xd8e>
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	3b01      	subs	r3, #1
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4698      	mov	r8, r3
 8005348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800534a:	465f      	mov	r7, fp
 800534c:	4641      	mov	r1, r8
 800534e:	1c1a      	adds	r2, r3, #0
 8005350:	e5a2      	b.n	8004e98 <_dtoa_r+0x620>
 8005352:	4642      	mov	r2, r8
 8005354:	6913      	ldr	r3, [r2, #16]
 8005356:	3303      	adds	r3, #3
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4443      	add	r3, r8
 800535c:	6858      	ldr	r0, [r3, #4]
 800535e:	f000 ffb5 	bl	80062cc <__hi0bits>
 8005362:	2320      	movs	r3, #32
 8005364:	1a1b      	subs	r3, r3, r0
 8005366:	e5f6      	b.n	8004f56 <_dtoa_r+0x6de>
 8005368:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800536a:	4641      	mov	r1, r8
 800536c:	f001 f972 	bl	8006654 <__mcmp>
 8005370:	2800      	cmp	r0, #0
 8005372:	db00      	blt.n	8005376 <_dtoa_r+0xafe>
 8005374:	e616      	b.n	8004fa4 <_dtoa_r+0x72c>
 8005376:	9907      	ldr	r1, [sp, #28]
 8005378:	3901      	subs	r1, #1
 800537a:	9107      	str	r1, [sp, #28]
 800537c:	220a      	movs	r2, #10
 800537e:	1c20      	adds	r0, r4, #0
 8005380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005382:	2300      	movs	r3, #0
 8005384:	f000 fefe 	bl	8006184 <__multadd>
 8005388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800538a:	900b      	str	r0, [sp, #44]	; 0x2c
 800538c:	2a00      	cmp	r2, #0
 800538e:	d14a      	bne.n	8005426 <_dtoa_r+0xbae>
 8005390:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005392:	2d00      	cmp	r5, #0
 8005394:	dc03      	bgt.n	800539e <_dtoa_r+0xb26>
 8005396:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005398:	2802      	cmp	r0, #2
 800539a:	dd00      	ble.n	800539e <_dtoa_r+0xb26>
 800539c:	e229      	b.n	80057f2 <_dtoa_r+0xf7a>
 800539e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80053a0:	9509      	str	r5, [sp, #36]	; 0x24
 80053a2:	e6e9      	b.n	8005178 <_dtoa_r+0x900>
 80053a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d000      	beq.n	80053ac <_dtoa_r+0xb34>
 80053aa:	e19f      	b.n	80056ec <_dtoa_r+0xe74>
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <_dtoa_r+0xb60>)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <_dtoa_r+0xb64>)
 80053b0:	9804      	ldr	r0, [sp, #16]
 80053b2:	9905      	ldr	r1, [sp, #20]
 80053b4:	f002 eebe 	blx	8008134 <__aeabi_dmul>
 80053b8:	9a02      	ldr	r2, [sp, #8]
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	f003 e992 	blx	80086e4 <__aeabi_dcmpge>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d100      	bne.n	80053c6 <_dtoa_r+0xb4e>
 80053c4:	e764      	b.n	8005290 <_dtoa_r+0xa18>
 80053c6:	2500      	movs	r5, #0
 80053c8:	46a8      	mov	r8, r5
 80053ca:	46a9      	mov	r9, r5
 80053cc:	e6ca      	b.n	8005164 <_dtoa_r+0x8ec>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	00000000 	.word	0x00000000
 80053d4:	401c0000 	.word	0x401c0000
 80053d8:	00000000 	.word	0x00000000
 80053dc:	40140000 	.word	0x40140000
 80053e0:	00000000 	.word	0x00000000
 80053e4:	40240000 	.word	0x40240000
 80053e8:	00000000 	.word	0x00000000
 80053ec:	3fe00000 	.word	0x3fe00000
 80053f0:	fffffbee 	.word	0xfffffbee
 80053f4:	fcc00000 	.word	0xfcc00000
 80053f8:	08008c78 	.word	0x08008c78
 80053fc:	08008d68 	.word	0x08008d68
 8005400:	9902      	ldr	r1, [sp, #8]
 8005402:	2900      	cmp	r1, #0
 8005404:	d000      	beq.n	8005408 <_dtoa_r+0xb90>
 8005406:	e5a1      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005408:	9a03      	ldr	r2, [sp, #12]
 800540a:	0313      	lsls	r3, r2, #12
 800540c:	d000      	beq.n	8005410 <_dtoa_r+0xb98>
 800540e:	e59d      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005410:	4bdb      	ldr	r3, [pc, #876]	; (8005780 <_dtoa_r+0xf08>)
 8005412:	4213      	tst	r3, r2
 8005414:	d100      	bne.n	8005418 <_dtoa_r+0xba0>
 8005416:	e599      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005418:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800541a:	2001      	movs	r0, #1
 800541c:	3501      	adds	r5, #1
 800541e:	950a      	str	r5, [sp, #40]	; 0x28
 8005420:	4482      	add	sl, r0
 8005422:	2501      	movs	r5, #1
 8005424:	e592      	b.n	8004f4c <_dtoa_r+0x6d4>
 8005426:	4649      	mov	r1, r9
 8005428:	2300      	movs	r3, #0
 800542a:	1c20      	adds	r0, r4, #0
 800542c:	220a      	movs	r2, #10
 800542e:	f000 fea9 	bl	8006184 <__multadd>
 8005432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005434:	4681      	mov	r9, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc03      	bgt.n	8005442 <_dtoa_r+0xbca>
 800543a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800543c:	2802      	cmp	r0, #2
 800543e:	dd00      	ble.n	8005442 <_dtoa_r+0xbca>
 8005440:	e1d7      	b.n	80057f2 <_dtoa_r+0xf7a>
 8005442:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005444:	9109      	str	r1, [sp, #36]	; 0x24
 8005446:	2f00      	cmp	r7, #0
 8005448:	dd05      	ble.n	8005456 <_dtoa_r+0xbde>
 800544a:	4649      	mov	r1, r9
 800544c:	1c20      	adds	r0, r4, #0
 800544e:	1c3a      	adds	r2, r7, #0
 8005450:	f001 f898 	bl	8006584 <__lshift>
 8005454:	4681      	mov	r9, r0
 8005456:	4648      	mov	r0, r9
 8005458:	464b      	mov	r3, r9
 800545a:	900a      	str	r0, [sp, #40]	; 0x28
 800545c:	2d00      	cmp	r5, #0
 800545e:	d000      	beq.n	8005462 <_dtoa_r+0xbea>
 8005460:	e148      	b.n	80056f4 <_dtoa_r+0xe7c>
 8005462:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005464:	465b      	mov	r3, fp
 8005466:	3b01      	subs	r3, #1
 8005468:	195b      	adds	r3, r3, r5
 800546a:	9802      	ldr	r0, [sp, #8]
 800546c:	930e      	str	r3, [sp, #56]	; 0x38
 800546e:	2301      	movs	r3, #1
 8005470:	4018      	ands	r0, r3
 8005472:	4642      	mov	r2, r8
 8005474:	465e      	mov	r6, fp
 8005476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800547c:	9208      	str	r2, [sp, #32]
 800547e:	960f      	str	r6, [sp, #60]	; 0x3c
 8005480:	464d      	mov	r5, r9
 8005482:	4698      	mov	r8, r3
 8005484:	9908      	ldr	r1, [sp, #32]
 8005486:	1c38      	adds	r0, r7, #0
 8005488:	f7ff f94a 	bl	8004720 <quorem>
 800548c:	9009      	str	r0, [sp, #36]	; 0x24
 800548e:	3030      	adds	r0, #48	; 0x30
 8005490:	900a      	str	r0, [sp, #40]	; 0x28
 8005492:	1c29      	adds	r1, r5, #0
 8005494:	1c38      	adds	r0, r7, #0
 8005496:	f001 f8dd 	bl	8006654 <__mcmp>
 800549a:	4642      	mov	r2, r8
 800549c:	4683      	mov	fp, r0
 800549e:	9908      	ldr	r1, [sp, #32]
 80054a0:	1c20      	adds	r0, r4, #0
 80054a2:	f001 f8f5 	bl	8006690 <__mdiff>
 80054a6:	68c3      	ldr	r3, [r0, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4681      	mov	r9, r0
 80054ac:	4692      	mov	sl, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <_dtoa_r+0xcb4>
 80054b2:	1c20      	adds	r0, r4, #0
 80054b4:	4649      	mov	r1, r9
 80054b6:	f000 fe59 	bl	800616c <_Bfree>
 80054ba:	9826      	ldr	r0, [sp, #152]	; 0x98
 80054bc:	4653      	mov	r3, sl
 80054be:	4303      	orrs	r3, r0
 80054c0:	d103      	bne.n	80054ca <_dtoa_r+0xc52>
 80054c2:	9902      	ldr	r1, [sp, #8]
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d100      	bne.n	80054ca <_dtoa_r+0xc52>
 80054c8:	e16a      	b.n	80057a0 <_dtoa_r+0xf28>
 80054ca:	4659      	mov	r1, fp
 80054cc:	2900      	cmp	r1, #0
 80054ce:	da00      	bge.n	80054d2 <_dtoa_r+0xc5a>
 80054d0:	e0bf      	b.n	8005652 <_dtoa_r+0xdda>
 80054d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054d4:	465b      	mov	r3, fp
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d103      	bne.n	80054e2 <_dtoa_r+0xc6a>
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d100      	bne.n	80054e2 <_dtoa_r+0xc6a>
 80054e0:	e0b7      	b.n	8005652 <_dtoa_r+0xdda>
 80054e2:	4650      	mov	r0, sl
 80054e4:	2800      	cmp	r0, #0
 80054e6:	dd00      	ble.n	80054ea <_dtoa_r+0xc72>
 80054e8:	e124      	b.n	8005734 <_dtoa_r+0xebc>
 80054ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ee:	1c71      	adds	r1, r6, #1
 80054f0:	7030      	strb	r0, [r6, #0]
 80054f2:	4689      	mov	r9, r1
 80054f4:	4296      	cmp	r6, r2
 80054f6:	d100      	bne.n	80054fa <_dtoa_r+0xc82>
 80054f8:	e128      	b.n	800574c <_dtoa_r+0xed4>
 80054fa:	1c39      	adds	r1, r7, #0
 80054fc:	220a      	movs	r2, #10
 80054fe:	2300      	movs	r3, #0
 8005500:	1c20      	adds	r0, r4, #0
 8005502:	f000 fe3f 	bl	8006184 <__multadd>
 8005506:	1c29      	adds	r1, r5, #0
 8005508:	1c07      	adds	r7, r0, #0
 800550a:	220a      	movs	r2, #10
 800550c:	1c20      	adds	r0, r4, #0
 800550e:	2300      	movs	r3, #0
 8005510:	4545      	cmp	r5, r8
 8005512:	d011      	beq.n	8005538 <_dtoa_r+0xcc0>
 8005514:	f000 fe36 	bl	8006184 <__multadd>
 8005518:	4641      	mov	r1, r8
 800551a:	1c05      	adds	r5, r0, #0
 800551c:	220a      	movs	r2, #10
 800551e:	1c20      	adds	r0, r4, #0
 8005520:	2300      	movs	r3, #0
 8005522:	f000 fe2f 	bl	8006184 <__multadd>
 8005526:	464e      	mov	r6, r9
 8005528:	4680      	mov	r8, r0
 800552a:	e7ab      	b.n	8005484 <_dtoa_r+0xc0c>
 800552c:	1c38      	adds	r0, r7, #0
 800552e:	4649      	mov	r1, r9
 8005530:	f001 f890 	bl	8006654 <__mcmp>
 8005534:	4682      	mov	sl, r0
 8005536:	e7bc      	b.n	80054b2 <_dtoa_r+0xc3a>
 8005538:	f000 fe24 	bl	8006184 <__multadd>
 800553c:	464e      	mov	r6, r9
 800553e:	1c05      	adds	r5, r0, #0
 8005540:	4680      	mov	r8, r0
 8005542:	e79f      	b.n	8005484 <_dtoa_r+0xc0c>
 8005544:	2500      	movs	r5, #0
 8005546:	9512      	str	r5, [sp, #72]	; 0x48
 8005548:	e5d1      	b.n	80050ee <_dtoa_r+0x876>
 800554a:	2501      	movs	r5, #1
 800554c:	9512      	str	r5, [sp, #72]	; 0x48
 800554e:	f7ff fa76 	bl	8004a3e <_dtoa_r+0x1c6>
 8005552:	9609      	str	r6, [sp, #36]	; 0x24
 8005554:	2200      	movs	r2, #0
 8005556:	6462      	str	r2, [r4, #68]	; 0x44
 8005558:	401d      	ands	r5, r3
 800555a:	2100      	movs	r1, #0
 800555c:	f7ff fa8b 	bl	8004a76 <_dtoa_r+0x1fe>
 8005560:	2101      	movs	r1, #1
 8005562:	2201      	movs	r2, #1
 8005564:	2001      	movs	r0, #1
 8005566:	2501      	movs	r5, #1
 8005568:	9110      	str	r1, [sp, #64]	; 0x40
 800556a:	9209      	str	r2, [sp, #36]	; 0x24
 800556c:	9027      	str	r0, [sp, #156]	; 0x9c
 800556e:	e7f1      	b.n	8005554 <_dtoa_r+0xcdc>
 8005570:	1c20      	adds	r0, r4, #0
 8005572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005576:	f000 ffad 	bl	80064d4 <__pow5mult>
 800557a:	900b      	str	r0, [sp, #44]	; 0x2c
 800557c:	e4d3      	b.n	8004f26 <_dtoa_r+0x6ae>
 800557e:	464d      	mov	r5, r9
 8005580:	4654      	mov	r4, sl
 8005582:	465f      	mov	r7, fp
 8005584:	46ab      	mov	fp, r5
 8005586:	e543      	b.n	8005010 <_dtoa_r+0x798>
 8005588:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800558a:	1b73      	subs	r3, r6, r5
 800558c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800558e:	18ed      	adds	r5, r5, r3
 8005590:	960f      	str	r6, [sp, #60]	; 0x3c
 8005592:	9511      	str	r5, [sp, #68]	; 0x44
 8005594:	2600      	movs	r6, #0
 8005596:	e591      	b.n	80050bc <_dtoa_r+0x844>
 8005598:	9902      	ldr	r1, [sp, #8]
 800559a:	9a03      	ldr	r2, [sp, #12]
 800559c:	910c      	str	r1, [sp, #48]	; 0x30
 800559e:	920d      	str	r2, [sp, #52]	; 0x34
 80055a0:	2202      	movs	r2, #2
 80055a2:	4691      	mov	r9, r2
 80055a4:	f7ff faaa 	bl	8004afc <_dtoa_r+0x284>
 80055a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	d100      	bne.n	80055b0 <_dtoa_r+0xd38>
 80055ae:	e5ae      	b.n	800510e <_dtoa_r+0x896>
 80055b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	dc01      	bgt.n	80055ba <_dtoa_r+0xd42>
 80055b6:	f7ff fbc5 	bl	8004d44 <_dtoa_r+0x4cc>
 80055ba:	9d07      	ldr	r5, [sp, #28]
 80055bc:	4b6b      	ldr	r3, [pc, #428]	; (800576c <_dtoa_r+0xef4>)
 80055be:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <_dtoa_r+0xef0>)
 80055c0:	3d01      	subs	r5, #1
 80055c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055c6:	9517      	str	r5, [sp, #92]	; 0x5c
 80055c8:	f002 edb4 	blx	8008134 <__aeabi_dmul>
 80055cc:	900c      	str	r0, [sp, #48]	; 0x30
 80055ce:	910d      	str	r1, [sp, #52]	; 0x34
 80055d0:	4648      	mov	r0, r9
 80055d2:	3001      	adds	r0, #1
 80055d4:	f002 ed40 	blx	8008058 <__aeabi_i2d>
 80055d8:	1c02      	adds	r2, r0, #0
 80055da:	1c0b      	adds	r3, r1, #0
 80055dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055e0:	f002 eda8 	blx	8008134 <__aeabi_dmul>
 80055e4:	4a62      	ldr	r2, [pc, #392]	; (8005770 <_dtoa_r+0xef8>)
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <_dtoa_r+0xefc>)
 80055e8:	f002 eb9c 	blx	8007d24 <__adddf3>
 80055ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055ee:	1c06      	adds	r6, r0, #0
 80055f0:	4864      	ldr	r0, [pc, #400]	; (8005784 <_dtoa_r+0xf0c>)
 80055f2:	9513      	str	r5, [sp, #76]	; 0x4c
 80055f4:	180f      	adds	r7, r1, r0
 80055f6:	f7ff faa4 	bl	8004b42 <_dtoa_r+0x2ca>
 80055fa:	1c20      	adds	r0, r4, #0
 80055fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055fe:	f000 ff69 	bl	80064d4 <__pow5mult>
 8005602:	900b      	str	r0, [sp, #44]	; 0x2c
 8005604:	e48f      	b.n	8004f26 <_dtoa_r+0x6ae>
 8005606:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800560a:	485b      	ldr	r0, [pc, #364]	; (8005778 <_dtoa_r+0xf00>)
 800560c:	495b      	ldr	r1, [pc, #364]	; (800577c <_dtoa_r+0xf04>)
 800560e:	f002 eb88 	blx	8007d20 <__aeabi_dsub>
 8005612:	1c32      	adds	r2, r6, #0
 8005614:	1c3b      	adds	r3, r7, #0
 8005616:	f003 e872 	blx	80086fc <__aeabi_dcmpgt>
 800561a:	2800      	cmp	r0, #0
 800561c:	d101      	bne.n	8005622 <_dtoa_r+0xdaa>
 800561e:	f7ff fb91 	bl	8004d44 <_dtoa_r+0x4cc>
 8005622:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005624:	e000      	b.n	8005628 <_dtoa_r+0xdb0>
 8005626:	1c19      	adds	r1, r3, #0
 8005628:	1e4b      	subs	r3, r1, #1
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	2a30      	cmp	r2, #48	; 0x30
 800562e:	d0fa      	beq.n	8005626 <_dtoa_r+0xdae>
 8005630:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005632:	465f      	mov	r7, fp
 8005634:	9507      	str	r5, [sp, #28]
 8005636:	468b      	mov	fp, r1
 8005638:	e4ea      	b.n	8005010 <_dtoa_r+0x798>
 800563a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800563c:	2d00      	cmp	r5, #0
 800563e:	d073      	beq.n	8005728 <_dtoa_r+0xeb0>
 8005640:	4851      	ldr	r0, [pc, #324]	; (8005788 <_dtoa_r+0xf10>)
 8005642:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005644:	181b      	adds	r3, r3, r0
 8005646:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005648:	e53e      	b.n	80050c8 <_dtoa_r+0x850>
 800564a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800564c:	2300      	movs	r3, #0
 800564e:	1b47      	subs	r7, r0, r5
 8005650:	e53a      	b.n	80050c8 <_dtoa_r+0x850>
 8005652:	970b      	str	r7, [sp, #44]	; 0x2c
 8005654:	9a08      	ldr	r2, [sp, #32]
 8005656:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800565a:	4641      	mov	r1, r8
 800565c:	4650      	mov	r0, sl
 800565e:	910a      	str	r1, [sp, #40]	; 0x28
 8005660:	4690      	mov	r8, r2
 8005662:	469b      	mov	fp, r3
 8005664:	46b9      	mov	r9, r7
 8005666:	2800      	cmp	r0, #0
 8005668:	dd11      	ble.n	800568e <_dtoa_r+0xe16>
 800566a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800566c:	1c20      	adds	r0, r4, #0
 800566e:	2201      	movs	r2, #1
 8005670:	f000 ff88 	bl	8006584 <__lshift>
 8005674:	4641      	mov	r1, r8
 8005676:	900b      	str	r0, [sp, #44]	; 0x2c
 8005678:	f000 ffec 	bl	8006654 <__mcmp>
 800567c:	2800      	cmp	r0, #0
 800567e:	dc00      	bgt.n	8005682 <_dtoa_r+0xe0a>
 8005680:	e0a6      	b.n	80057d0 <_dtoa_r+0xf58>
 8005682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005684:	464a      	mov	r2, r9
 8005686:	3731      	adds	r7, #49	; 0x31
 8005688:	2a39      	cmp	r2, #57	; 0x39
 800568a:	d100      	bne.n	800568e <_dtoa_r+0xe16>
 800568c:	e080      	b.n	8005790 <_dtoa_r+0xf18>
 800568e:	7037      	strb	r7, [r6, #0]
 8005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005692:	3601      	adds	r6, #1
 8005694:	465f      	mov	r7, fp
 8005696:	4699      	mov	r9, r3
 8005698:	46b3      	mov	fp, r6
 800569a:	e4ab      	b.n	8004ff4 <_dtoa_r+0x77c>
 800569c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800569e:	465c      	mov	r4, fp
 80056a0:	4655      	mov	r5, sl
 80056a2:	4683      	mov	fp, r0
 80056a4:	465f      	mov	r7, fp
 80056a6:	4641      	mov	r1, r8
 80056a8:	1c2a      	adds	r2, r5, #0
 80056aa:	f7ff fbf5 	bl	8004e98 <_dtoa_r+0x620>
 80056ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b2:	465c      	mov	r4, fp
 80056b4:	4692      	mov	sl, r2
 80056b6:	469b      	mov	fp, r3
 80056b8:	f7ff fb44 	bl	8004d44 <_dtoa_r+0x4cc>
 80056bc:	4693      	mov	fp, r2
 80056be:	1c0a      	adds	r2, r1, #0
 80056c0:	3201      	adds	r2, #1
 80056c2:	0612      	lsls	r2, r2, #24
 80056c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80056c6:	0e12      	lsrs	r2, r2, #24
 80056c8:	9507      	str	r5, [sp, #28]
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e4a0      	b.n	8005010 <_dtoa_r+0x798>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d102      	bne.n	80056d8 <_dtoa_r+0xe60>
 80056d2:	07f9      	lsls	r1, r7, #31
 80056d4:	d500      	bpl.n	80056d8 <_dtoa_r+0xe60>
 80056d6:	e57e      	b.n	80051d6 <_dtoa_r+0x95e>
 80056d8:	4651      	mov	r1, sl
 80056da:	e000      	b.n	80056de <_dtoa_r+0xe66>
 80056dc:	1c19      	adds	r1, r3, #0
 80056de:	1e4b      	subs	r3, r1, #1
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	2a30      	cmp	r2, #48	; 0x30
 80056e4:	d0fa      	beq.n	80056dc <_dtoa_r+0xe64>
 80056e6:	465f      	mov	r7, fp
 80056e8:	468b      	mov	fp, r1
 80056ea:	e483      	b.n	8004ff4 <_dtoa_r+0x77c>
 80056ec:	2200      	movs	r2, #0
 80056ee:	4690      	mov	r8, r2
 80056f0:	4691      	mov	r9, r2
 80056f2:	e537      	b.n	8005164 <_dtoa_r+0x8ec>
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	1c20      	adds	r0, r4, #0
 80056f8:	f000 fd0e 	bl	8006118 <_Balloc>
 80056fc:	464b      	mov	r3, r9
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	4649      	mov	r1, r9
 8005702:	3202      	adds	r2, #2
 8005704:	1c05      	adds	r5, r0, #0
 8005706:	310c      	adds	r1, #12
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	300c      	adds	r0, #12
 800570c:	f000 fcbc 	bl	8006088 <memcpy>
 8005710:	1c20      	adds	r0, r4, #0
 8005712:	1c29      	adds	r1, r5, #0
 8005714:	2201      	movs	r2, #1
 8005716:	f000 ff35 	bl	8006584 <__lshift>
 800571a:	900a      	str	r0, [sp, #40]	; 0x28
 800571c:	e6a1      	b.n	8005462 <_dtoa_r+0xbea>
 800571e:	3301      	adds	r3, #1
 8005720:	7033      	strb	r3, [r6, #0]
 8005722:	1c0f      	adds	r7, r1, #0
 8005724:	4693      	mov	fp, r2
 8005726:	e465      	b.n	8004ff4 <_dtoa_r+0x77c>
 8005728:	991a      	ldr	r1, [sp, #104]	; 0x68
 800572a:	2336      	movs	r3, #54	; 0x36
 800572c:	1a5b      	subs	r3, r3, r1
 800572e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005730:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005732:	e4c9      	b.n	80050c8 <_dtoa_r+0x850>
 8005734:	970b      	str	r7, [sp, #44]	; 0x2c
 8005736:	9b08      	ldr	r3, [sp, #32]
 8005738:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800573a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800573c:	4642      	mov	r2, r8
 800573e:	920a      	str	r2, [sp, #40]	; 0x28
 8005740:	4698      	mov	r8, r3
 8005742:	4683      	mov	fp, r0
 8005744:	2f39      	cmp	r7, #57	; 0x39
 8005746:	d023      	beq.n	8005790 <_dtoa_r+0xf18>
 8005748:	3701      	adds	r7, #1
 800574a:	e7a0      	b.n	800568e <_dtoa_r+0xe16>
 800574c:	9a08      	ldr	r2, [sp, #32]
 800574e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005750:	4641      	mov	r1, r8
 8005752:	970b      	str	r7, [sp, #44]	; 0x2c
 8005754:	46ca      	mov	sl, r9
 8005756:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005758:	4690      	mov	r8, r2
 800575a:	910a      	str	r1, [sp, #40]	; 0x28
 800575c:	469b      	mov	fp, r3
 800575e:	4689      	mov	r9, r1
 8005760:	e52d      	b.n	80051be <_dtoa_r+0x946>
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	00000000 	.word	0x00000000
 800576c:	40240000 	.word	0x40240000
 8005770:	00000000 	.word	0x00000000
 8005774:	401c0000 	.word	0x401c0000
 8005778:	00000000 	.word	0x00000000
 800577c:	3fe00000 	.word	0x3fe00000
 8005780:	7ff00000 	.word	0x7ff00000
 8005784:	fcc00000 	.word	0xfcc00000
 8005788:	00000433 	.word	0x00000433
 800578c:	2301      	movs	r3, #1
 800578e:	e513      	b.n	80051b8 <_dtoa_r+0x940>
 8005790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005792:	1c71      	adds	r1, r6, #1
 8005794:	2339      	movs	r3, #57	; 0x39
 8005796:	4691      	mov	r9, r2
 8005798:	7033      	strb	r3, [r6, #0]
 800579a:	1c0a      	adds	r2, r1, #0
 800579c:	4659      	mov	r1, fp
 800579e:	e524      	b.n	80051ea <_dtoa_r+0x972>
 80057a0:	4643      	mov	r3, r8
 80057a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80057a4:	9808      	ldr	r0, [sp, #32]
 80057a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057a8:	930a      	str	r3, [sp, #40]	; 0x28
 80057aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ac:	465a      	mov	r2, fp
 80057ae:	4680      	mov	r8, r0
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	469b      	mov	fp, r3
 80057b4:	2f39      	cmp	r7, #57	; 0x39
 80057b6:	d0eb      	beq.n	8005790 <_dtoa_r+0xf18>
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	dd01      	ble.n	80057c0 <_dtoa_r+0xf48>
 80057bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057be:	3731      	adds	r7, #49	; 0x31
 80057c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057c2:	7037      	strb	r7, [r6, #0]
 80057c4:	3601      	adds	r6, #1
 80057c6:	465f      	mov	r7, fp
 80057c8:	4681      	mov	r9, r0
 80057ca:	46b3      	mov	fp, r6
 80057cc:	f7ff fc12 	bl	8004ff4 <_dtoa_r+0x77c>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d000      	beq.n	80057d6 <_dtoa_r+0xf5e>
 80057d4:	e75b      	b.n	800568e <_dtoa_r+0xe16>
 80057d6:	07f9      	lsls	r1, r7, #31
 80057d8:	d400      	bmi.n	80057dc <_dtoa_r+0xf64>
 80057da:	e758      	b.n	800568e <_dtoa_r+0xe16>
 80057dc:	e751      	b.n	8005682 <_dtoa_r+0xe0a>
 80057de:	2302      	movs	r3, #2
 80057e0:	4699      	mov	r9, r3
 80057e2:	f7ff f98b 	bl	8004afc <_dtoa_r+0x284>
 80057e6:	465f      	mov	r7, fp
 80057e8:	46ab      	mov	fp, r5
 80057ea:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80057ec:	9507      	str	r5, [sp, #28]
 80057ee:	f7ff fc0f 	bl	8005010 <_dtoa_r+0x798>
 80057f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057f4:	9509      	str	r5, [sp, #36]	; 0x24
 80057f6:	f7ff fbe1 	bl	8004fbc <_dtoa_r+0x744>
 80057fa:	2a04      	cmp	r2, #4
 80057fc:	d101      	bne.n	8005802 <_dtoa_r+0xf8a>
 80057fe:	f7ff fbbc 	bl	8004f7a <_dtoa_r+0x702>
 8005802:	223c      	movs	r2, #60	; 0x3c
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	e4ff      	b.n	8005208 <_dtoa_r+0x990>

08005808 <_malloc_trim_r>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	1c0f      	adds	r7, r1, #0
 800580c:	1c04      	adds	r4, r0, #0
 800580e:	f000 fc7d 	bl	800610c <__malloc_lock>
 8005812:	4d21      	ldr	r5, [pc, #132]	; (8005898 <_malloc_trim_r+0x90>)
 8005814:	68ab      	ldr	r3, [r5, #8]
 8005816:	685e      	ldr	r6, [r3, #4]
 8005818:	4a20      	ldr	r2, [pc, #128]	; (800589c <_malloc_trim_r+0x94>)
 800581a:	2303      	movs	r3, #3
 800581c:	439e      	bics	r6, r3
 800581e:	18b3      	adds	r3, r6, r2
 8005820:	1bdf      	subs	r7, r3, r7
 8005822:	0b3f      	lsrs	r7, r7, #12
 8005824:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <_malloc_trim_r+0x98>)
 8005826:	3f01      	subs	r7, #1
 8005828:	033f      	lsls	r7, r7, #12
 800582a:	429f      	cmp	r7, r3
 800582c:	dd07      	ble.n	800583e <_malloc_trim_r+0x36>
 800582e:	1c20      	adds	r0, r4, #0
 8005830:	2100      	movs	r1, #0
 8005832:	f001 f953 	bl	8006adc <_sbrk_r>
 8005836:	68aa      	ldr	r2, [r5, #8]
 8005838:	1993      	adds	r3, r2, r6
 800583a:	4298      	cmp	r0, r3
 800583c:	d006      	beq.n	800584c <_malloc_trim_r+0x44>
 800583e:	1c20      	adds	r0, r4, #0
 8005840:	f000 fc66 	bl	8006110 <__malloc_unlock>
 8005844:	2000      	movs	r0, #0
 8005846:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005848:	bc02      	pop	{r1}
 800584a:	4708      	bx	r1
 800584c:	4279      	negs	r1, r7
 800584e:	1c20      	adds	r0, r4, #0
 8005850:	f001 f944 	bl	8006adc <_sbrk_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d00d      	beq.n	8005874 <_malloc_trim_r+0x6c>
 8005858:	68ab      	ldr	r3, [r5, #8]
 800585a:	1bf6      	subs	r6, r6, r7
 800585c:	2201      	movs	r2, #1
 800585e:	4316      	orrs	r6, r2
 8005860:	605e      	str	r6, [r3, #4]
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <_malloc_trim_r+0x9c>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	1c20      	adds	r0, r4, #0
 8005868:	1bd7      	subs	r7, r2, r7
 800586a:	601f      	str	r7, [r3, #0]
 800586c:	f000 fc50 	bl	8006110 <__malloc_unlock>
 8005870:	2001      	movs	r0, #1
 8005872:	e7e8      	b.n	8005846 <_malloc_trim_r+0x3e>
 8005874:	1c20      	adds	r0, r4, #0
 8005876:	2100      	movs	r1, #0
 8005878:	f001 f930 	bl	8006adc <_sbrk_r>
 800587c:	68ab      	ldr	r3, [r5, #8]
 800587e:	1ac2      	subs	r2, r0, r3
 8005880:	2a0f      	cmp	r2, #15
 8005882:	dddc      	ble.n	800583e <_malloc_trim_r+0x36>
 8005884:	4908      	ldr	r1, [pc, #32]	; (80058a8 <_malloc_trim_r+0xa0>)
 8005886:	6809      	ldr	r1, [r1, #0]
 8005888:	1a40      	subs	r0, r0, r1
 800588a:	4906      	ldr	r1, [pc, #24]	; (80058a4 <_malloc_trim_r+0x9c>)
 800588c:	6008      	str	r0, [r1, #0]
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	e7d3      	b.n	800583e <_malloc_trim_r+0x36>
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	2000054c 	.word	0x2000054c
 800589c:	00000fef 	.word	0x00000fef
 80058a0:	00000fff 	.word	0x00000fff
 80058a4:	20000974 	.word	0x20000974
 80058a8:	20000954 	.word	0x20000954

080058ac <_free_r>:
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ae:	4647      	mov	r7, r8
 80058b0:	b480      	push	{r7}
 80058b2:	1c05      	adds	r5, r0, #0
 80058b4:	1e0c      	subs	r4, r1, #0
 80058b6:	d055      	beq.n	8005964 <_free_r+0xb8>
 80058b8:	f000 fc28 	bl	800610c <__malloc_lock>
 80058bc:	1c21      	adds	r1, r4, #0
 80058be:	3908      	subs	r1, #8
 80058c0:	6848      	ldr	r0, [r1, #4]
 80058c2:	2701      	movs	r7, #1
 80058c4:	1c03      	adds	r3, r0, #0
 80058c6:	43bb      	bics	r3, r7
 80058c8:	18ca      	adds	r2, r1, r3
 80058ca:	6854      	ldr	r4, [r2, #4]
 80058cc:	4680      	mov	r8, r0
 80058ce:	2003      	movs	r0, #3
 80058d0:	4384      	bics	r4, r0
 80058d2:	1c20      	adds	r0, r4, #0
 80058d4:	4c54      	ldr	r4, [pc, #336]	; (8005a28 <_free_r+0x17c>)
 80058d6:	68a6      	ldr	r6, [r4, #8]
 80058d8:	4296      	cmp	r6, r2
 80058da:	d062      	beq.n	80059a2 <_free_r+0xf6>
 80058dc:	2600      	movs	r6, #0
 80058de:	46b4      	mov	ip, r6
 80058e0:	4646      	mov	r6, r8
 80058e2:	6050      	str	r0, [r2, #4]
 80058e4:	4237      	tst	r7, r6
 80058e6:	d10a      	bne.n	80058fe <_free_r+0x52>
 80058e8:	680e      	ldr	r6, [r1, #0]
 80058ea:	1b89      	subs	r1, r1, r6
 80058ec:	199b      	adds	r3, r3, r6
 80058ee:	1c27      	adds	r7, r4, #0
 80058f0:	688e      	ldr	r6, [r1, #8]
 80058f2:	3708      	adds	r7, #8
 80058f4:	42be      	cmp	r6, r7
 80058f6:	d06d      	beq.n	80059d4 <_free_r+0x128>
 80058f8:	68cf      	ldr	r7, [r1, #12]
 80058fa:	60f7      	str	r7, [r6, #12]
 80058fc:	60be      	str	r6, [r7, #8]
 80058fe:	1817      	adds	r7, r2, r0
 8005900:	687f      	ldr	r7, [r7, #4]
 8005902:	2601      	movs	r6, #1
 8005904:	4237      	tst	r7, r6
 8005906:	d107      	bne.n	8005918 <_free_r+0x6c>
 8005908:	181b      	adds	r3, r3, r0
 800590a:	4660      	mov	r0, ip
 800590c:	2800      	cmp	r0, #0
 800590e:	d02e      	beq.n	800596e <_free_r+0xc2>
 8005910:	6890      	ldr	r0, [r2, #8]
 8005912:	68d2      	ldr	r2, [r2, #12]
 8005914:	60c2      	str	r2, [r0, #12]
 8005916:	6090      	str	r0, [r2, #8]
 8005918:	2201      	movs	r2, #1
 800591a:	1c18      	adds	r0, r3, #0
 800591c:	4310      	orrs	r0, r2
 800591e:	4666      	mov	r6, ip
 8005920:	6048      	str	r0, [r1, #4]
 8005922:	50cb      	str	r3, [r1, r3]
 8005924:	2e00      	cmp	r6, #0
 8005926:	d11a      	bne.n	800595e <_free_r+0xb2>
 8005928:	4840      	ldr	r0, [pc, #256]	; (8005a2c <_free_r+0x180>)
 800592a:	4283      	cmp	r3, r0
 800592c:	d92b      	bls.n	8005986 <_free_r+0xda>
 800592e:	0a5a      	lsrs	r2, r3, #9
 8005930:	2a04      	cmp	r2, #4
 8005932:	d852      	bhi.n	80059da <_free_r+0x12e>
 8005934:	099f      	lsrs	r7, r3, #6
 8005936:	3738      	adds	r7, #56	; 0x38
 8005938:	0078      	lsls	r0, r7, #1
 800593a:	0080      	lsls	r0, r0, #2
 800593c:	1820      	adds	r0, r4, r0
 800593e:	6882      	ldr	r2, [r0, #8]
 8005940:	2603      	movs	r6, #3
 8005942:	4282      	cmp	r2, r0
 8005944:	d04f      	beq.n	80059e6 <_free_r+0x13a>
 8005946:	6854      	ldr	r4, [r2, #4]
 8005948:	43b4      	bics	r4, r6
 800594a:	42a3      	cmp	r3, r4
 800594c:	d202      	bcs.n	8005954 <_free_r+0xa8>
 800594e:	6892      	ldr	r2, [r2, #8]
 8005950:	4290      	cmp	r0, r2
 8005952:	d1f8      	bne.n	8005946 <_free_r+0x9a>
 8005954:	68d3      	ldr	r3, [r2, #12]
 8005956:	60cb      	str	r3, [r1, #12]
 8005958:	608a      	str	r2, [r1, #8]
 800595a:	60d1      	str	r1, [r2, #12]
 800595c:	6099      	str	r1, [r3, #8]
 800595e:	1c28      	adds	r0, r5, #0
 8005960:	f000 fbd6 	bl	8006110 <__malloc_unlock>
 8005964:	bc04      	pop	{r2}
 8005966:	4690      	mov	r8, r2
 8005968:	bcf0      	pop	{r4, r5, r6, r7}
 800596a:	bc01      	pop	{r0}
 800596c:	4700      	bx	r0
 800596e:	6890      	ldr	r0, [r2, #8]
 8005970:	4f2f      	ldr	r7, [pc, #188]	; (8005a30 <_free_r+0x184>)
 8005972:	42b8      	cmp	r0, r7
 8005974:	d1cd      	bne.n	8005912 <_free_r+0x66>
 8005976:	431e      	orrs	r6, r3
 8005978:	60c1      	str	r1, [r0, #12]
 800597a:	6081      	str	r1, [r0, #8]
 800597c:	60c8      	str	r0, [r1, #12]
 800597e:	6088      	str	r0, [r1, #8]
 8005980:	604e      	str	r6, [r1, #4]
 8005982:	50cb      	str	r3, [r1, r3]
 8005984:	e7eb      	b.n	800595e <_free_r+0xb2>
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	1098      	asrs	r0, r3, #2
 800598a:	4082      	lsls	r2, r0
 800598c:	6860      	ldr	r0, [r4, #4]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4302      	orrs	r2, r0
 8005992:	6062      	str	r2, [r4, #4]
 8005994:	18e4      	adds	r4, r4, r3
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	60cc      	str	r4, [r1, #12]
 800599a:	608b      	str	r3, [r1, #8]
 800599c:	60d9      	str	r1, [r3, #12]
 800599e:	60a1      	str	r1, [r4, #8]
 80059a0:	e7dd      	b.n	800595e <_free_r+0xb2>
 80059a2:	18c3      	adds	r3, r0, r3
 80059a4:	4640      	mov	r0, r8
 80059a6:	4207      	tst	r7, r0
 80059a8:	d106      	bne.n	80059b8 <_free_r+0x10c>
 80059aa:	680a      	ldr	r2, [r1, #0]
 80059ac:	1a89      	subs	r1, r1, r2
 80059ae:	68c8      	ldr	r0, [r1, #12]
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	688a      	ldr	r2, [r1, #8]
 80059b4:	60d0      	str	r0, [r2, #12]
 80059b6:	6082      	str	r2, [r0, #8]
 80059b8:	2201      	movs	r2, #1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	604a      	str	r2, [r1, #4]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <_free_r+0x188>)
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	60a1      	str	r1, [r4, #8]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d3ca      	bcc.n	800595e <_free_r+0xb2>
 80059c8:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <_free_r+0x18c>)
 80059ca:	1c28      	adds	r0, r5, #0
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	f7ff ff1b 	bl	8005808 <_malloc_trim_r>
 80059d2:	e7c4      	b.n	800595e <_free_r+0xb2>
 80059d4:	2601      	movs	r6, #1
 80059d6:	46b4      	mov	ip, r6
 80059d8:	e791      	b.n	80058fe <_free_r+0x52>
 80059da:	2a14      	cmp	r2, #20
 80059dc:	d80c      	bhi.n	80059f8 <_free_r+0x14c>
 80059de:	1c17      	adds	r7, r2, #0
 80059e0:	375b      	adds	r7, #91	; 0x5b
 80059e2:	0078      	lsls	r0, r7, #1
 80059e4:	e7a9      	b.n	800593a <_free_r+0x8e>
 80059e6:	10bf      	asrs	r7, r7, #2
 80059e8:	2301      	movs	r3, #1
 80059ea:	40bb      	lsls	r3, r7
 80059ec:	1c1f      	adds	r7, r3, #0
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	431f      	orrs	r7, r3
 80059f2:	6067      	str	r7, [r4, #4]
 80059f4:	1c13      	adds	r3, r2, #0
 80059f6:	e7ae      	b.n	8005956 <_free_r+0xaa>
 80059f8:	2a54      	cmp	r2, #84	; 0x54
 80059fa:	d803      	bhi.n	8005a04 <_free_r+0x158>
 80059fc:	0b1f      	lsrs	r7, r3, #12
 80059fe:	376e      	adds	r7, #110	; 0x6e
 8005a00:	0078      	lsls	r0, r7, #1
 8005a02:	e79a      	b.n	800593a <_free_r+0x8e>
 8005a04:	20aa      	movs	r0, #170	; 0xaa
 8005a06:	0040      	lsls	r0, r0, #1
 8005a08:	4282      	cmp	r2, r0
 8005a0a:	d803      	bhi.n	8005a14 <_free_r+0x168>
 8005a0c:	0bdf      	lsrs	r7, r3, #15
 8005a0e:	3777      	adds	r7, #119	; 0x77
 8005a10:	0078      	lsls	r0, r7, #1
 8005a12:	e792      	b.n	800593a <_free_r+0x8e>
 8005a14:	4809      	ldr	r0, [pc, #36]	; (8005a3c <_free_r+0x190>)
 8005a16:	4282      	cmp	r2, r0
 8005a18:	d803      	bhi.n	8005a22 <_free_r+0x176>
 8005a1a:	0c9f      	lsrs	r7, r3, #18
 8005a1c:	377c      	adds	r7, #124	; 0x7c
 8005a1e:	0078      	lsls	r0, r7, #1
 8005a20:	e78b      	b.n	800593a <_free_r+0x8e>
 8005a22:	20fc      	movs	r0, #252	; 0xfc
 8005a24:	277e      	movs	r7, #126	; 0x7e
 8005a26:	e788      	b.n	800593a <_free_r+0x8e>
 8005a28:	2000054c 	.word	0x2000054c
 8005a2c:	000001ff 	.word	0x000001ff
 8005a30:	20000554 	.word	0x20000554
 8005a34:	20000958 	.word	0x20000958
 8005a38:	20000970 	.word	0x20000970
 8005a3c:	00000554 	.word	0x00000554

08005a40 <_setlocale_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	1e14      	subs	r4, r2, #0
 8005a44:	d005      	beq.n	8005a52 <_setlocale_r+0x12>
 8005a46:	1c20      	adds	r0, r4, #0
 8005a48:	490c      	ldr	r1, [pc, #48]	; (8005a7c <_setlocale_r+0x3c>)
 8005a4a:	f001 f85b 	bl	8006b04 <strcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d104      	bne.n	8005a5c <_setlocale_r+0x1c>
 8005a52:	4d0b      	ldr	r5, [pc, #44]	; (8005a80 <_setlocale_r+0x40>)
 8005a54:	1c28      	adds	r0, r5, #0
 8005a56:	bc38      	pop	{r3, r4, r5}
 8005a58:	bc02      	pop	{r1}
 8005a5a:	4708      	bx	r1
 8005a5c:	4d08      	ldr	r5, [pc, #32]	; (8005a80 <_setlocale_r+0x40>)
 8005a5e:	1c20      	adds	r0, r4, #0
 8005a60:	1c29      	adds	r1, r5, #0
 8005a62:	f001 f84f 	bl	8006b04 <strcmp>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0f4      	beq.n	8005a54 <_setlocale_r+0x14>
 8005a6a:	1c20      	adds	r0, r4, #0
 8005a6c:	4905      	ldr	r1, [pc, #20]	; (8005a84 <_setlocale_r+0x44>)
 8005a6e:	f001 f849 	bl	8006b04 <strcmp>
 8005a72:	4243      	negs	r3, r0
 8005a74:	4158      	adcs	r0, r3
 8005a76:	4240      	negs	r0, r0
 8005a78:	4028      	ands	r0, r5
 8005a7a:	e7ec      	b.n	8005a56 <_setlocale_r+0x16>
 8005a7c:	08009084 	.word	0x08009084
 8005a80:	08009080 	.word	0x08009080
 8005a84:	0800904c 	.word	0x0800904c

08005a88 <__locale_charset>:
 8005a88:	4800      	ldr	r0, [pc, #0]	; (8005a8c <__locale_charset+0x4>)
 8005a8a:	4770      	bx	lr
 8005a8c:	200004d0 	.word	0x200004d0

08005a90 <__locale_mb_cur_max>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <__locale_mb_cur_max+0x8>)
 8005a92:	6a18      	ldr	r0, [r3, #32]
 8005a94:	4770      	bx	lr
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	200004d0 	.word	0x200004d0

08005a9c <__locale_msgcharset>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__locale_msgcharset+0x8>)
 8005a9e:	3024      	adds	r0, #36	; 0x24
 8005aa0:	4770      	bx	lr
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	200004d0 	.word	0x200004d0

08005aa8 <__locale_cjk_lang>:
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr

08005aac <_localeconv_r>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <_localeconv_r+0x8>)
 8005aae:	3044      	adds	r0, #68	; 0x44
 8005ab0:	4770      	bx	lr
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	200004d0 	.word	0x200004d0

08005ab8 <setlocale>:
 8005ab8:	b508      	push	{r3, lr}
 8005aba:	1c0a      	adds	r2, r1, #0
 8005abc:	4904      	ldr	r1, [pc, #16]	; (8005ad0 <setlocale+0x18>)
 8005abe:	1c03      	adds	r3, r0, #0
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	1c19      	adds	r1, r3, #0
 8005ac4:	f7ff ffbc 	bl	8005a40 <_setlocale_r>
 8005ac8:	bc08      	pop	{r3}
 8005aca:	bc02      	pop	{r1}
 8005acc:	4708      	bx	r1
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	200000a0 	.word	0x200000a0

08005ad4 <localeconv>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <localeconv+0x8>)
 8005ad6:	3044      	adds	r0, #68	; 0x44
 8005ad8:	4770      	bx	lr
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	200004d0 	.word	0x200004d0

08005ae0 <_malloc_r>:
 8005ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae2:	4656      	mov	r6, sl
 8005ae4:	4644      	mov	r4, r8
 8005ae6:	465f      	mov	r7, fp
 8005ae8:	464d      	mov	r5, r9
 8005aea:	b4f0      	push	{r4, r5, r6, r7}
 8005aec:	1c0c      	adds	r4, r1, #0
 8005aee:	340b      	adds	r4, #11
 8005af0:	b083      	sub	sp, #12
 8005af2:	1c06      	adds	r6, r0, #0
 8005af4:	2c16      	cmp	r4, #22
 8005af6:	d92e      	bls.n	8005b56 <_malloc_r+0x76>
 8005af8:	2307      	movs	r3, #7
 8005afa:	439c      	bics	r4, r3
 8005afc:	0fe3      	lsrs	r3, r4, #31
 8005afe:	428c      	cmp	r4, r1
 8005b00:	d32d      	bcc.n	8005b5e <_malloc_r+0x7e>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12b      	bne.n	8005b5e <_malloc_r+0x7e>
 8005b06:	1c30      	adds	r0, r6, #0
 8005b08:	f000 fb00 	bl	800610c <__malloc_lock>
 8005b0c:	4bc0      	ldr	r3, [pc, #768]	; (8005e10 <_malloc_r+0x330>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d829      	bhi.n	8005b66 <_malloc_r+0x86>
 8005b12:	08e2      	lsrs	r2, r4, #3
 8005b14:	4dbf      	ldr	r5, [pc, #764]	; (8005e14 <_malloc_r+0x334>)
 8005b16:	00d3      	lsls	r3, r2, #3
 8005b18:	18eb      	adds	r3, r5, r3
 8005b1a:	68df      	ldr	r7, [r3, #12]
 8005b1c:	429f      	cmp	r7, r3
 8005b1e:	d100      	bne.n	8005b22 <_malloc_r+0x42>
 8005b20:	e1d8      	b.n	8005ed4 <_malloc_r+0x3f4>
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	2303      	movs	r3, #3
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4399      	bics	r1, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	6093      	str	r3, [r2, #8]
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	6858      	ldr	r0, [r3, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	4302      	orrs	r2, r0
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	1c30      	adds	r0, r6, #0
 8005b3c:	f000 fae8 	bl	8006110 <__malloc_unlock>
 8005b40:	1c38      	adds	r0, r7, #0
 8005b42:	3008      	adds	r0, #8
 8005b44:	b003      	add	sp, #12
 8005b46:	bc3c      	pop	{r2, r3, r4, r5}
 8005b48:	4690      	mov	r8, r2
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	46ab      	mov	fp, r5
 8005b50:	bcf0      	pop	{r4, r5, r6, r7}
 8005b52:	bc02      	pop	{r1}
 8005b54:	4708      	bx	r1
 8005b56:	2410      	movs	r4, #16
 8005b58:	2300      	movs	r3, #0
 8005b5a:	428c      	cmp	r4, r1
 8005b5c:	d2d1      	bcs.n	8005b02 <_malloc_r+0x22>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	2000      	movs	r0, #0
 8005b64:	e7ee      	b.n	8005b44 <_malloc_r+0x64>
 8005b66:	0a63      	lsrs	r3, r4, #9
 8005b68:	d100      	bne.n	8005b6c <_malloc_r+0x8c>
 8005b6a:	e08b      	b.n	8005c84 <_malloc_r+0x1a4>
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d900      	bls.n	8005b72 <_malloc_r+0x92>
 8005b70:	e142      	b.n	8005df8 <_malloc_r+0x318>
 8005b72:	09a3      	lsrs	r3, r4, #6
 8005b74:	3338      	adds	r3, #56	; 0x38
 8005b76:	4698      	mov	r8, r3
 8005b78:	0059      	lsls	r1, r3, #1
 8005b7a:	4da6      	ldr	r5, [pc, #664]	; (8005e14 <_malloc_r+0x334>)
 8005b7c:	0089      	lsls	r1, r1, #2
 8005b7e:	1869      	adds	r1, r5, r1
 8005b80:	68cf      	ldr	r7, [r1, #12]
 8005b82:	42b9      	cmp	r1, r7
 8005b84:	d013      	beq.n	8005bae <_malloc_r+0xce>
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	2303      	movs	r3, #3
 8005b8a:	439a      	bics	r2, r3
 8005b8c:	1b13      	subs	r3, r2, r4
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	dc7c      	bgt.n	8005c8c <_malloc_r+0x1ac>
 8005b92:	2003      	movs	r0, #3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db07      	blt.n	8005ba8 <_malloc_r+0xc8>
 8005b98:	e07c      	b.n	8005c94 <_malloc_r+0x1b4>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4382      	bics	r2, r0
 8005b9e:	1b13      	subs	r3, r2, r4
 8005ba0:	2b0f      	cmp	r3, #15
 8005ba2:	dc73      	bgt.n	8005c8c <_malloc_r+0x1ac>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da75      	bge.n	8005c94 <_malloc_r+0x1b4>
 8005ba8:	68ff      	ldr	r7, [r7, #12]
 8005baa:	42b9      	cmp	r1, r7
 8005bac:	d1f5      	bne.n	8005b9a <_malloc_r+0xba>
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4488      	add	r8, r1
 8005bb2:	1c2b      	adds	r3, r5, #0
 8005bb4:	692f      	ldr	r7, [r5, #16]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	429f      	cmp	r7, r3
 8005bba:	d100      	bne.n	8005bbe <_malloc_r+0xde>
 8005bbc:	e167      	b.n	8005e8e <_malloc_r+0x3ae>
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4390      	bics	r0, r2
 8005bc4:	1c02      	adds	r2, r0, #0
 8005bc6:	1b01      	subs	r1, r0, r4
 8005bc8:	290f      	cmp	r1, #15
 8005bca:	dd00      	ble.n	8005bce <_malloc_r+0xee>
 8005bcc:	e14e      	b.n	8005e6c <_malloc_r+0x38c>
 8005bce:	616b      	str	r3, [r5, #20]
 8005bd0:	612b      	str	r3, [r5, #16]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	da6d      	bge.n	8005cb2 <_malloc_r+0x1d2>
 8005bd6:	4b90      	ldr	r3, [pc, #576]	; (8005e18 <_malloc_r+0x338>)
 8005bd8:	4298      	cmp	r0, r3
 8005bda:	d900      	bls.n	8005bde <_malloc_r+0xfe>
 8005bdc:	e126      	b.n	8005e2c <_malloc_r+0x34c>
 8005bde:	08c2      	lsrs	r2, r0, #3
 8005be0:	1093      	asrs	r3, r2, #2
 8005be2:	2001      	movs	r0, #1
 8005be4:	4098      	lsls	r0, r3
 8005be6:	686b      	ldr	r3, [r5, #4]
 8005be8:	00d2      	lsls	r2, r2, #3
 8005bea:	4318      	orrs	r0, r3
 8005bec:	18ab      	adds	r3, r5, r2
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	60ba      	str	r2, [r7, #8]
 8005bf4:	6068      	str	r0, [r5, #4]
 8005bf6:	609f      	str	r7, [r3, #8]
 8005bf8:	60d7      	str	r7, [r2, #12]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	108b      	asrs	r3, r1, #2
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4099      	lsls	r1, r3
 8005c02:	4281      	cmp	r1, r0
 8005c04:	d85a      	bhi.n	8005cbc <_malloc_r+0x1dc>
 8005c06:	4201      	tst	r1, r0
 8005c08:	d10d      	bne.n	8005c26 <_malloc_r+0x146>
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	439a      	bics	r2, r3
 8005c10:	1c13      	adds	r3, r2, #0
 8005c12:	3304      	adds	r3, #4
 8005c14:	0049      	lsls	r1, r1, #1
 8005c16:	4698      	mov	r8, r3
 8005c18:	4201      	tst	r1, r0
 8005c1a:	d104      	bne.n	8005c26 <_malloc_r+0x146>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	0049      	lsls	r1, r1, #1
 8005c20:	4498      	add	r8, r3
 8005c22:	4201      	tst	r1, r0
 8005c24:	d0fa      	beq.n	8005c1c <_malloc_r+0x13c>
 8005c26:	2003      	movs	r0, #3
 8005c28:	4684      	mov	ip, r0
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	00d3      	lsls	r3, r2, #3
 8005c2e:	195b      	adds	r3, r3, r5
 8005c30:	469a      	mov	sl, r3
 8005c32:	1c18      	adds	r0, r3, #0
 8005c34:	46c1      	mov	r9, r8
 8005c36:	68c7      	ldr	r7, [r0, #12]
 8005c38:	42b8      	cmp	r0, r7
 8005c3a:	d107      	bne.n	8005c4c <_malloc_r+0x16c>
 8005c3c:	e129      	b.n	8005e92 <_malloc_r+0x3b2>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	db00      	blt.n	8005c44 <_malloc_r+0x164>
 8005c42:	e150      	b.n	8005ee6 <_malloc_r+0x406>
 8005c44:	68ff      	ldr	r7, [r7, #12]
 8005c46:	42b8      	cmp	r0, r7
 8005c48:	d100      	bne.n	8005c4c <_malloc_r+0x16c>
 8005c4a:	e122      	b.n	8005e92 <_malloc_r+0x3b2>
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4663      	mov	r3, ip
 8005c50:	439a      	bics	r2, r3
 8005c52:	1b13      	subs	r3, r2, r4
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	ddf2      	ble.n	8005c3e <_malloc_r+0x15e>
 8005c58:	2001      	movs	r0, #1
 8005c5a:	193a      	adds	r2, r7, r4
 8005c5c:	4304      	orrs	r4, r0
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	607c      	str	r4, [r7, #4]
 8005c62:	68fc      	ldr	r4, [r7, #12]
 8005c64:	4318      	orrs	r0, r3
 8005c66:	60cc      	str	r4, [r1, #12]
 8005c68:	60a1      	str	r1, [r4, #8]
 8005c6a:	616a      	str	r2, [r5, #20]
 8005c6c:	612a      	str	r2, [r5, #16]
 8005c6e:	3508      	adds	r5, #8
 8005c70:	6050      	str	r0, [r2, #4]
 8005c72:	60d5      	str	r5, [r2, #12]
 8005c74:	1c30      	adds	r0, r6, #0
 8005c76:	6095      	str	r5, [r2, #8]
 8005c78:	50d3      	str	r3, [r2, r3]
 8005c7a:	f000 fa49 	bl	8006110 <__malloc_unlock>
 8005c7e:	1c38      	adds	r0, r7, #0
 8005c80:	3008      	adds	r0, #8
 8005c82:	e75f      	b.n	8005b44 <_malloc_r+0x64>
 8005c84:	08e1      	lsrs	r1, r4, #3
 8005c86:	4688      	mov	r8, r1
 8005c88:	0049      	lsls	r1, r1, #1
 8005c8a:	e776      	b.n	8005b7a <_malloc_r+0x9a>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	425b      	negs	r3, r3
 8005c90:	4498      	add	r8, r3
 8005c92:	e78c      	b.n	8005bae <_malloc_r+0xce>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	18ba      	adds	r2, r7, r2
 8005c9a:	6850      	ldr	r0, [r2, #4]
 8005c9c:	60d9      	str	r1, [r3, #12]
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	1c30      	adds	r0, r6, #0
 8005ca6:	6053      	str	r3, [r2, #4]
 8005ca8:	f000 fa32 	bl	8006110 <__malloc_unlock>
 8005cac:	1c38      	adds	r0, r7, #0
 8005cae:	3008      	adds	r0, #8
 8005cb0:	e748      	b.n	8005b44 <_malloc_r+0x64>
 8005cb2:	183a      	adds	r2, r7, r0
 8005cb4:	6851      	ldr	r1, [r2, #4]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	e7f3      	b.n	8005ca4 <_malloc_r+0x1c4>
 8005cbc:	68af      	ldr	r7, [r5, #8]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	4398      	bics	r0, r3
 8005cc4:	4681      	mov	r9, r0
 8005cc6:	4284      	cmp	r4, r0
 8005cc8:	d803      	bhi.n	8005cd2 <_malloc_r+0x1f2>
 8005cca:	1b03      	subs	r3, r0, r4
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	dd00      	ble.n	8005cd2 <_malloc_r+0x1f2>
 8005cd0:	e084      	b.n	8005ddc <_malloc_r+0x2fc>
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	1879      	adds	r1, r7, r1
 8005cd6:	4a51      	ldr	r2, [pc, #324]	; (8005e1c <_malloc_r+0x33c>)
 8005cd8:	9101      	str	r1, [sp, #4]
 8005cda:	4951      	ldr	r1, [pc, #324]	; (8005e20 <_malloc_r+0x340>)
 8005cdc:	6810      	ldr	r0, [r2, #0]
 8005cde:	4692      	mov	sl, r2
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	1823      	adds	r3, r4, r0
 8005ce4:	468b      	mov	fp, r1
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	d100      	bne.n	8005cec <_malloc_r+0x20c>
 8005cea:	e13f      	b.n	8005f6c <_malloc_r+0x48c>
 8005cec:	484d      	ldr	r0, [pc, #308]	; (8005e24 <_malloc_r+0x344>)
 8005cee:	181b      	adds	r3, r3, r0
 8005cf0:	0b1b      	lsrs	r3, r3, #12
 8005cf2:	031b      	lsls	r3, r3, #12
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	9900      	ldr	r1, [sp, #0]
 8005cf8:	1c30      	adds	r0, r6, #0
 8005cfa:	f000 feef 	bl	8006adc <_sbrk_r>
 8005cfe:	1c01      	adds	r1, r0, #0
 8005d00:	4680      	mov	r8, r0
 8005d02:	3101      	adds	r1, #1
 8005d04:	d05f      	beq.n	8005dc6 <_malloc_r+0x2e6>
 8005d06:	9a01      	ldr	r2, [sp, #4]
 8005d08:	4282      	cmp	r2, r0
 8005d0a:	d900      	bls.n	8005d0e <_malloc_r+0x22e>
 8005d0c:	e103      	b.n	8005f16 <_malloc_r+0x436>
 8005d0e:	4651      	mov	r1, sl
 8005d10:	9800      	ldr	r0, [sp, #0]
 8005d12:	6849      	ldr	r1, [r1, #4]
 8005d14:	1843      	adds	r3, r0, r1
 8005d16:	9801      	ldr	r0, [sp, #4]
 8005d18:	4652      	mov	r2, sl
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	4540      	cmp	r0, r8
 8005d1e:	d100      	bne.n	8005d22 <_malloc_r+0x242>
 8005d20:	e132      	b.n	8005f88 <_malloc_r+0x4a8>
 8005d22:	465a      	mov	r2, fp
 8005d24:	6892      	ldr	r2, [r2, #8]
 8005d26:	3201      	adds	r2, #1
 8005d28:	d100      	bne.n	8005d2c <_malloc_r+0x24c>
 8005d2a:	e144      	b.n	8005fb6 <_malloc_r+0x4d6>
 8005d2c:	9801      	ldr	r0, [sp, #4]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1a0a      	subs	r2, r1, r0
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	4651      	mov	r1, sl
 8005d36:	604b      	str	r3, [r1, #4]
 8005d38:	2307      	movs	r3, #7
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <_malloc_r+0x262>
 8005d40:	e0fb      	b.n	8005f3a <_malloc_r+0x45a>
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	3208      	adds	r2, #8
 8005d46:	4690      	mov	r8, r2
 8005d48:	4a37      	ldr	r2, [pc, #220]	; (8005e28 <_malloc_r+0x348>)
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	9800      	ldr	r0, [sp, #0]
 8005d4e:	1c02      	adds	r2, r0, #0
 8005d50:	4442      	add	r2, r8
 8005d52:	0512      	lsls	r2, r2, #20
 8005d54:	0d12      	lsrs	r2, r2, #20
 8005d56:	1a9a      	subs	r2, r3, r2
 8005d58:	1c11      	adds	r1, r2, #0
 8005d5a:	1c30      	adds	r0, r6, #0
 8005d5c:	4693      	mov	fp, r2
 8005d5e:	f000 febd 	bl	8006adc <_sbrk_r>
 8005d62:	1c41      	adds	r1, r0, #1
 8005d64:	d100      	bne.n	8005d68 <_malloc_r+0x288>
 8005d66:	e11a      	b.n	8005f9e <_malloc_r+0x4be>
 8005d68:	4642      	mov	r2, r8
 8005d6a:	1a80      	subs	r0, r0, r2
 8005d6c:	4458      	add	r0, fp
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4318      	orrs	r0, r3
 8005d72:	4652      	mov	r2, sl
 8005d74:	6851      	ldr	r1, [r2, #4]
 8005d76:	1c0b      	adds	r3, r1, #0
 8005d78:	445b      	add	r3, fp
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	6053      	str	r3, [r2, #4]
 8005d7e:	60a9      	str	r1, [r5, #8]
 8005d80:	6048      	str	r0, [r1, #4]
 8005d82:	42af      	cmp	r7, r5
 8005d84:	d013      	beq.n	8005dae <_malloc_r+0x2ce>
 8005d86:	464a      	mov	r2, r9
 8005d88:	2a0f      	cmp	r2, #15
 8005d8a:	d800      	bhi.n	8005d8e <_malloc_r+0x2ae>
 8005d8c:	e0e1      	b.n	8005f52 <_malloc_r+0x472>
 8005d8e:	464a      	mov	r2, r9
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	2107      	movs	r1, #7
 8005d94:	3a0c      	subs	r2, #12
 8005d96:	438a      	bics	r2, r1
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4001      	ands	r1, r0
 8005d9c:	4311      	orrs	r1, r2
 8005d9e:	6079      	str	r1, [r7, #4]
 8005da0:	2005      	movs	r0, #5
 8005da2:	18b9      	adds	r1, r7, r2
 8005da4:	6048      	str	r0, [r1, #4]
 8005da6:	6088      	str	r0, [r1, #8]
 8005da8:	2a0f      	cmp	r2, #15
 8005daa:	d900      	bls.n	8005dae <_malloc_r+0x2ce>
 8005dac:	e0fb      	b.n	8005fa6 <_malloc_r+0x4c6>
 8005dae:	4652      	mov	r2, sl
 8005db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <_malloc_r+0x2da>
 8005db6:	4650      	mov	r0, sl
 8005db8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005dba:	4651      	mov	r1, sl
 8005dbc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	d901      	bls.n	8005dc6 <_malloc_r+0x2e6>
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc6:	68af      	ldr	r7, [r5, #8]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	2303      	movs	r3, #3
 8005dcc:	439a      	bics	r2, r3
 8005dce:	1b13      	subs	r3, r2, r4
 8005dd0:	4294      	cmp	r4, r2
 8005dd2:	d900      	bls.n	8005dd6 <_malloc_r+0x2f6>
 8005dd4:	e0a3      	b.n	8005f1e <_malloc_r+0x43e>
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	dc00      	bgt.n	8005ddc <_malloc_r+0x2fc>
 8005dda:	e0a0      	b.n	8005f1e <_malloc_r+0x43e>
 8005ddc:	2201      	movs	r2, #1
 8005dde:	1c21      	adds	r1, r4, #0
 8005de0:	4311      	orrs	r1, r2
 8005de2:	193c      	adds	r4, r7, r4
 8005de4:	4313      	orrs	r3, r2
 8005de6:	6079      	str	r1, [r7, #4]
 8005de8:	1c30      	adds	r0, r6, #0
 8005dea:	60ac      	str	r4, [r5, #8]
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	f000 f98f 	bl	8006110 <__malloc_unlock>
 8005df2:	1c38      	adds	r0, r7, #0
 8005df4:	3008      	adds	r0, #8
 8005df6:	e6a5      	b.n	8005b44 <_malloc_r+0x64>
 8005df8:	2b14      	cmp	r3, #20
 8005dfa:	d800      	bhi.n	8005dfe <_malloc_r+0x31e>
 8005dfc:	e082      	b.n	8005f04 <_malloc_r+0x424>
 8005dfe:	2b54      	cmp	r3, #84	; 0x54
 8005e00:	d900      	bls.n	8005e04 <_malloc_r+0x324>
 8005e02:	e091      	b.n	8005f28 <_malloc_r+0x448>
 8005e04:	0b23      	lsrs	r3, r4, #12
 8005e06:	336e      	adds	r3, #110	; 0x6e
 8005e08:	4698      	mov	r8, r3
 8005e0a:	0059      	lsls	r1, r3, #1
 8005e0c:	e6b5      	b.n	8005b7a <_malloc_r+0x9a>
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	000001f7 	.word	0x000001f7
 8005e14:	2000054c 	.word	0x2000054c
 8005e18:	000001ff 	.word	0x000001ff
 8005e1c:	20000970 	.word	0x20000970
 8005e20:	2000094c 	.word	0x2000094c
 8005e24:	0000100f 	.word	0x0000100f
 8005e28:	00001008 	.word	0x00001008
 8005e2c:	0a43      	lsrs	r3, r0, #9
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d96c      	bls.n	8005f0c <_malloc_r+0x42c>
 8005e32:	2b14      	cmp	r3, #20
 8005e34:	d900      	bls.n	8005e38 <_malloc_r+0x358>
 8005e36:	e09c      	b.n	8005f72 <_malloc_r+0x492>
 8005e38:	335b      	adds	r3, #91	; 0x5b
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	0058      	lsls	r0, r3, #1
 8005e3e:	0080      	lsls	r0, r0, #2
 8005e40:	1940      	adds	r0, r0, r5
 8005e42:	6883      	ldr	r3, [r0, #8]
 8005e44:	4681      	mov	r9, r0
 8005e46:	2003      	movs	r0, #3
 8005e48:	4684      	mov	ip, r0
 8005e4a:	454b      	cmp	r3, r9
 8005e4c:	d078      	beq.n	8005f40 <_malloc_r+0x460>
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	4660      	mov	r0, ip
 8005e52:	4381      	bics	r1, r0
 8005e54:	428a      	cmp	r2, r1
 8005e56:	d202      	bcs.n	8005e5e <_malloc_r+0x37e>
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4599      	cmp	r9, r3
 8005e5c:	d1f7      	bne.n	8005e4e <_malloc_r+0x36e>
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	6868      	ldr	r0, [r5, #4]
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	60df      	str	r7, [r3, #12]
 8005e68:	6097      	str	r7, [r2, #8]
 8005e6a:	e6c6      	b.n	8005bfa <_malloc_r+0x11a>
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	193a      	adds	r2, r7, r4
 8005e70:	4304      	orrs	r4, r0
 8005e72:	4308      	orrs	r0, r1
 8005e74:	607c      	str	r4, [r7, #4]
 8005e76:	616a      	str	r2, [r5, #20]
 8005e78:	612a      	str	r2, [r5, #16]
 8005e7a:	6050      	str	r0, [r2, #4]
 8005e7c:	60d3      	str	r3, [r2, #12]
 8005e7e:	1c30      	adds	r0, r6, #0
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	5051      	str	r1, [r2, r1]
 8005e84:	f000 f944 	bl	8006110 <__malloc_unlock>
 8005e88:	1c38      	adds	r0, r7, #0
 8005e8a:	3008      	adds	r0, #8
 8005e8c:	e65a      	b.n	8005b44 <_malloc_r+0x64>
 8005e8e:	6868      	ldr	r0, [r5, #4]
 8005e90:	e6b3      	b.n	8005bfa <_malloc_r+0x11a>
 8005e92:	2201      	movs	r2, #1
 8005e94:	4491      	add	r9, r2
 8005e96:	4663      	mov	r3, ip
 8005e98:	464a      	mov	r2, r9
 8005e9a:	3008      	adds	r0, #8
 8005e9c:	4213      	tst	r3, r2
 8005e9e:	d000      	beq.n	8005ea2 <_malloc_r+0x3c2>
 8005ea0:	e6c9      	b.n	8005c36 <_malloc_r+0x156>
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	4660      	mov	r0, ip
 8005ea8:	4218      	tst	r0, r3
 8005eaa:	d100      	bne.n	8005eae <_malloc_r+0x3ce>
 8005eac:	e098      	b.n	8005fe0 <_malloc_r+0x500>
 8005eae:	1c10      	adds	r0, r2, #0
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	3808      	subs	r0, #8
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4282      	cmp	r2, r0
 8005eb8:	d0f5      	beq.n	8005ea6 <_malloc_r+0x3c6>
 8005eba:	686b      	ldr	r3, [r5, #4]
 8005ebc:	0049      	lsls	r1, r1, #1
 8005ebe:	4299      	cmp	r1, r3
 8005ec0:	d900      	bls.n	8005ec4 <_malloc_r+0x3e4>
 8005ec2:	e6fb      	b.n	8005cbc <_malloc_r+0x1dc>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d100      	bne.n	8005eca <_malloc_r+0x3ea>
 8005ec8:	e6f8      	b.n	8005cbc <_malloc_r+0x1dc>
 8005eca:	4219      	tst	r1, r3
 8005ecc:	d100      	bne.n	8005ed0 <_malloc_r+0x3f0>
 8005ece:	e08b      	b.n	8005fe8 <_malloc_r+0x508>
 8005ed0:	46c8      	mov	r8, r9
 8005ed2:	e6aa      	b.n	8005c2a <_malloc_r+0x14a>
 8005ed4:	1c3b      	adds	r3, r7, #0
 8005ed6:	697f      	ldr	r7, [r7, #20]
 8005ed8:	3202      	adds	r2, #2
 8005eda:	3308      	adds	r3, #8
 8005edc:	4690      	mov	r8, r2
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	d100      	bne.n	8005ee4 <_malloc_r+0x404>
 8005ee2:	e666      	b.n	8005bb2 <_malloc_r+0xd2>
 8005ee4:	e61d      	b.n	8005b22 <_malloc_r+0x42>
 8005ee6:	18ba      	adds	r2, r7, r2
 8005ee8:	6850      	ldr	r0, [r2, #4]
 8005eea:	2301      	movs	r3, #1
 8005eec:	4303      	orrs	r3, r0
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	1c30      	adds	r0, r6, #0
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	6093      	str	r3, [r2, #8]
 8005efa:	f000 f909 	bl	8006110 <__malloc_unlock>
 8005efe:	1c38      	adds	r0, r7, #0
 8005f00:	3008      	adds	r0, #8
 8005f02:	e61f      	b.n	8005b44 <_malloc_r+0x64>
 8005f04:	335b      	adds	r3, #91	; 0x5b
 8005f06:	4698      	mov	r8, r3
 8005f08:	0059      	lsls	r1, r3, #1
 8005f0a:	e636      	b.n	8005b7a <_malloc_r+0x9a>
 8005f0c:	0981      	lsrs	r1, r0, #6
 8005f0e:	3138      	adds	r1, #56	; 0x38
 8005f10:	468a      	mov	sl, r1
 8005f12:	0048      	lsls	r0, r1, #1
 8005f14:	e793      	b.n	8005e3e <_malloc_r+0x35e>
 8005f16:	42af      	cmp	r7, r5
 8005f18:	d000      	beq.n	8005f1c <_malloc_r+0x43c>
 8005f1a:	e754      	b.n	8005dc6 <_malloc_r+0x2e6>
 8005f1c:	e6f7      	b.n	8005d0e <_malloc_r+0x22e>
 8005f1e:	1c30      	adds	r0, r6, #0
 8005f20:	f000 f8f6 	bl	8006110 <__malloc_unlock>
 8005f24:	2000      	movs	r0, #0
 8005f26:	e60d      	b.n	8005b44 <_malloc_r+0x64>
 8005f28:	22aa      	movs	r2, #170	; 0xaa
 8005f2a:	0052      	lsls	r2, r2, #1
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d815      	bhi.n	8005f5c <_malloc_r+0x47c>
 8005f30:	0be3      	lsrs	r3, r4, #15
 8005f32:	3377      	adds	r3, #119	; 0x77
 8005f34:	4698      	mov	r8, r3
 8005f36:	0059      	lsls	r1, r3, #1
 8005f38:	e61f      	b.n	8005b7a <_malloc_r+0x9a>
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	015b      	lsls	r3, r3, #5
 8005f3e:	e705      	b.n	8005d4c <_malloc_r+0x26c>
 8005f40:	4652      	mov	r2, sl
 8005f42:	1091      	asrs	r1, r2, #2
 8005f44:	2001      	movs	r0, #1
 8005f46:	4088      	lsls	r0, r1
 8005f48:	6869      	ldr	r1, [r5, #4]
 8005f4a:	4308      	orrs	r0, r1
 8005f4c:	6068      	str	r0, [r5, #4]
 8005f4e:	1c1a      	adds	r2, r3, #0
 8005f50:	e787      	b.n	8005e62 <_malloc_r+0x382>
 8005f52:	2301      	movs	r3, #1
 8005f54:	604b      	str	r3, [r1, #4]
 8005f56:	4647      	mov	r7, r8
 8005f58:	2200      	movs	r2, #0
 8005f5a:	e738      	b.n	8005dce <_malloc_r+0x2ee>
 8005f5c:	4a26      	ldr	r2, [pc, #152]	; (8005ff8 <_malloc_r+0x518>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d80e      	bhi.n	8005f80 <_malloc_r+0x4a0>
 8005f62:	0ca3      	lsrs	r3, r4, #18
 8005f64:	337c      	adds	r3, #124	; 0x7c
 8005f66:	4698      	mov	r8, r3
 8005f68:	0059      	lsls	r1, r3, #1
 8005f6a:	e606      	b.n	8005b7a <_malloc_r+0x9a>
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	e6c1      	b.n	8005cf6 <_malloc_r+0x216>
 8005f72:	2b54      	cmp	r3, #84	; 0x54
 8005f74:	d823      	bhi.n	8005fbe <_malloc_r+0x4de>
 8005f76:	0b01      	lsrs	r1, r0, #12
 8005f78:	316e      	adds	r1, #110	; 0x6e
 8005f7a:	468a      	mov	sl, r1
 8005f7c:	0048      	lsls	r0, r1, #1
 8005f7e:	e75e      	b.n	8005e3e <_malloc_r+0x35e>
 8005f80:	227e      	movs	r2, #126	; 0x7e
 8005f82:	21fc      	movs	r1, #252	; 0xfc
 8005f84:	4690      	mov	r8, r2
 8005f86:	e5f8      	b.n	8005b7a <_malloc_r+0x9a>
 8005f88:	0502      	lsls	r2, r0, #20
 8005f8a:	d000      	beq.n	8005f8e <_malloc_r+0x4ae>
 8005f8c:	e6c9      	b.n	8005d22 <_malloc_r+0x242>
 8005f8e:	9900      	ldr	r1, [sp, #0]
 8005f90:	1c08      	adds	r0, r1, #0
 8005f92:	68aa      	ldr	r2, [r5, #8]
 8005f94:	4448      	add	r0, r9
 8005f96:	2101      	movs	r1, #1
 8005f98:	4301      	orrs	r1, r0
 8005f9a:	6051      	str	r1, [r2, #4]
 8005f9c:	e707      	b.n	8005dae <_malloc_r+0x2ce>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	469b      	mov	fp, r3
 8005fa4:	e6e5      	b.n	8005d72 <_malloc_r+0x292>
 8005fa6:	1c39      	adds	r1, r7, #0
 8005fa8:	3108      	adds	r1, #8
 8005faa:	1c30      	adds	r0, r6, #0
 8005fac:	f7ff fc7e 	bl	80058ac <_free_r>
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	684b      	ldr	r3, [r1, #4]
 8005fb4:	e6fb      	b.n	8005dae <_malloc_r+0x2ce>
 8005fb6:	4643      	mov	r3, r8
 8005fb8:	4658      	mov	r0, fp
 8005fba:	6083      	str	r3, [r0, #8]
 8005fbc:	e6bc      	b.n	8005d38 <_malloc_r+0x258>
 8005fbe:	21aa      	movs	r1, #170	; 0xaa
 8005fc0:	0049      	lsls	r1, r1, #1
 8005fc2:	428b      	cmp	r3, r1
 8005fc4:	d804      	bhi.n	8005fd0 <_malloc_r+0x4f0>
 8005fc6:	0bc1      	lsrs	r1, r0, #15
 8005fc8:	3177      	adds	r1, #119	; 0x77
 8005fca:	468a      	mov	sl, r1
 8005fcc:	0048      	lsls	r0, r1, #1
 8005fce:	e736      	b.n	8005e3e <_malloc_r+0x35e>
 8005fd0:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <_malloc_r+0x518>)
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d80c      	bhi.n	8005ff0 <_malloc_r+0x510>
 8005fd6:	0c81      	lsrs	r1, r0, #18
 8005fd8:	317c      	adds	r1, #124	; 0x7c
 8005fda:	468a      	mov	sl, r1
 8005fdc:	0048      	lsls	r0, r1, #1
 8005fde:	e72e      	b.n	8005e3e <_malloc_r+0x35e>
 8005fe0:	686b      	ldr	r3, [r5, #4]
 8005fe2:	438b      	bics	r3, r1
 8005fe4:	606b      	str	r3, [r5, #4]
 8005fe6:	e769      	b.n	8005ebc <_malloc_r+0x3dc>
 8005fe8:	2204      	movs	r2, #4
 8005fea:	4491      	add	r9, r2
 8005fec:	0049      	lsls	r1, r1, #1
 8005fee:	e76c      	b.n	8005eca <_malloc_r+0x3ea>
 8005ff0:	217e      	movs	r1, #126	; 0x7e
 8005ff2:	20fc      	movs	r0, #252	; 0xfc
 8005ff4:	468a      	mov	sl, r1
 8005ff6:	e722      	b.n	8005e3e <_malloc_r+0x35e>
 8005ff8:	00000554 	.word	0x00000554

08005ffc <memchr>:
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	060c      	lsls	r4, r1, #24
 8006000:	0e24      	lsrs	r4, r4, #24
 8006002:	0783      	lsls	r3, r0, #30
 8006004:	d039      	beq.n	800607a <memchr+0x7e>
 8006006:	1e53      	subs	r3, r2, #1
 8006008:	2a00      	cmp	r2, #0
 800600a:	d01f      	beq.n	800604c <memchr+0x50>
 800600c:	7802      	ldrb	r2, [r0, #0]
 800600e:	42a2      	cmp	r2, r4
 8006010:	d01d      	beq.n	800604e <memchr+0x52>
 8006012:	2503      	movs	r5, #3
 8006014:	e005      	b.n	8006022 <memchr+0x26>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d018      	beq.n	800604c <memchr+0x50>
 800601a:	7802      	ldrb	r2, [r0, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	42a2      	cmp	r2, r4
 8006020:	d015      	beq.n	800604e <memchr+0x52>
 8006022:	3001      	adds	r0, #1
 8006024:	4228      	tst	r0, r5
 8006026:	d1f6      	bne.n	8006016 <memchr+0x1a>
 8006028:	2b03      	cmp	r3, #3
 800602a:	d813      	bhi.n	8006054 <memchr+0x58>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <memchr+0x50>
 8006030:	7802      	ldrb	r2, [r0, #0]
 8006032:	42a2      	cmp	r2, r4
 8006034:	d00b      	beq.n	800604e <memchr+0x52>
 8006036:	1c42      	adds	r2, r0, #1
 8006038:	18c3      	adds	r3, r0, r3
 800603a:	e004      	b.n	8006046 <memchr+0x4a>
 800603c:	3201      	adds	r2, #1
 800603e:	1e51      	subs	r1, r2, #1
 8006040:	7809      	ldrb	r1, [r1, #0]
 8006042:	42a1      	cmp	r1, r4
 8006044:	d003      	beq.n	800604e <memchr+0x52>
 8006046:	1c10      	adds	r0, r2, #0
 8006048:	429a      	cmp	r2, r3
 800604a:	d1f7      	bne.n	800603c <memchr+0x40>
 800604c:	2000      	movs	r0, #0
 800604e:	bcf0      	pop	{r4, r5, r6, r7}
 8006050:	bc02      	pop	{r1}
 8006052:	4708      	bx	r1
 8006054:	26ff      	movs	r6, #255	; 0xff
 8006056:	4031      	ands	r1, r6
 8006058:	020e      	lsls	r6, r1, #8
 800605a:	4331      	orrs	r1, r6
 800605c:	040e      	lsls	r6, r1, #16
 800605e:	4d08      	ldr	r5, [pc, #32]	; (8006080 <memchr+0x84>)
 8006060:	430e      	orrs	r6, r1
 8006062:	6802      	ldr	r2, [r0, #0]
 8006064:	4f07      	ldr	r7, [pc, #28]	; (8006084 <memchr+0x88>)
 8006066:	4072      	eors	r2, r6
 8006068:	19d1      	adds	r1, r2, r7
 800606a:	4391      	bics	r1, r2
 800606c:	4229      	tst	r1, r5
 800606e:	d1dd      	bne.n	800602c <memchr+0x30>
 8006070:	3b04      	subs	r3, #4
 8006072:	3004      	adds	r0, #4
 8006074:	2b03      	cmp	r3, #3
 8006076:	d8f4      	bhi.n	8006062 <memchr+0x66>
 8006078:	e7d8      	b.n	800602c <memchr+0x30>
 800607a:	1c13      	adds	r3, r2, #0
 800607c:	e7d4      	b.n	8006028 <memchr+0x2c>
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	80808080 	.word	0x80808080
 8006084:	fefefeff 	.word	0xfefefeff

08006088 <memcpy>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	2a0f      	cmp	r2, #15
 800608c:	d934      	bls.n	80060f8 <memcpy+0x70>
 800608e:	1c0b      	adds	r3, r1, #0
 8006090:	4303      	orrs	r3, r0
 8006092:	079c      	lsls	r4, r3, #30
 8006094:	d134      	bne.n	8006100 <memcpy+0x78>
 8006096:	1c14      	adds	r4, r2, #0
 8006098:	3c10      	subs	r4, #16
 800609a:	0924      	lsrs	r4, r4, #4
 800609c:	3401      	adds	r4, #1
 800609e:	0124      	lsls	r4, r4, #4
 80060a0:	190f      	adds	r7, r1, r4
 80060a2:	1c03      	adds	r3, r0, #0
 80060a4:	680d      	ldr	r5, [r1, #0]
 80060a6:	601d      	str	r5, [r3, #0]
 80060a8:	684d      	ldr	r5, [r1, #4]
 80060aa:	605d      	str	r5, [r3, #4]
 80060ac:	688d      	ldr	r5, [r1, #8]
 80060ae:	609d      	str	r5, [r3, #8]
 80060b0:	68cd      	ldr	r5, [r1, #12]
 80060b2:	3110      	adds	r1, #16
 80060b4:	60dd      	str	r5, [r3, #12]
 80060b6:	3310      	adds	r3, #16
 80060b8:	428f      	cmp	r7, r1
 80060ba:	d1f3      	bne.n	80060a4 <memcpy+0x1c>
 80060bc:	250f      	movs	r5, #15
 80060be:	1904      	adds	r4, r0, r4
 80060c0:	4015      	ands	r5, r2
 80060c2:	2d03      	cmp	r5, #3
 80060c4:	d91e      	bls.n	8006104 <memcpy+0x7c>
 80060c6:	1f29      	subs	r1, r5, #4
 80060c8:	0889      	lsrs	r1, r1, #2
 80060ca:	3101      	adds	r1, #1
 80060cc:	0089      	lsls	r1, r1, #2
 80060ce:	1863      	adds	r3, r4, r1
 80060d0:	1c3d      	adds	r5, r7, #0
 80060d2:	cd40      	ldmia	r5!, {r6}
 80060d4:	c440      	stmia	r4!, {r6}
 80060d6:	429c      	cmp	r4, r3
 80060d8:	d1fb      	bne.n	80060d2 <memcpy+0x4a>
 80060da:	2403      	movs	r4, #3
 80060dc:	4022      	ands	r2, r4
 80060de:	1879      	adds	r1, r7, r1
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d006      	beq.n	80060f2 <memcpy+0x6a>
 80060e4:	189a      	adds	r2, r3, r2
 80060e6:	780c      	ldrb	r4, [r1, #0]
 80060e8:	701c      	strb	r4, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	3101      	adds	r1, #1
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d1f9      	bne.n	80060e6 <memcpy+0x5e>
 80060f2:	bcf0      	pop	{r4, r5, r6, r7}
 80060f4:	bc02      	pop	{r1}
 80060f6:	4708      	bx	r1
 80060f8:	1c03      	adds	r3, r0, #0
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1f2      	bne.n	80060e4 <memcpy+0x5c>
 80060fe:	e7f8      	b.n	80060f2 <memcpy+0x6a>
 8006100:	1c03      	adds	r3, r0, #0
 8006102:	e7ef      	b.n	80060e4 <memcpy+0x5c>
 8006104:	1c39      	adds	r1, r7, #0
 8006106:	1c23      	adds	r3, r4, #0
 8006108:	1c2a      	adds	r2, r5, #0
 800610a:	e7f6      	b.n	80060fa <memcpy+0x72>

0800610c <__malloc_lock>:
 800610c:	4770      	bx	lr
 800610e:	46c0      	nop			; (mov r8, r8)

08006110 <__malloc_unlock>:
 8006110:	4770      	bx	lr
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	0000      	movs	r0, r0
	...

08006118 <_Balloc>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	1c04      	adds	r4, r0, #0
 800611c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800611e:	1c0d      	adds	r5, r1, #0
 8006120:	2800      	cmp	r0, #0
 8006122:	d00c      	beq.n	800613e <_Balloc+0x26>
 8006124:	00aa      	lsls	r2, r5, #2
 8006126:	1882      	adds	r2, r0, r2
 8006128:	6810      	ldr	r0, [r2, #0]
 800612a:	2800      	cmp	r0, #0
 800612c:	d011      	beq.n	8006152 <_Balloc+0x3a>
 800612e:	6803      	ldr	r3, [r0, #0]
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	6102      	str	r2, [r0, #16]
 8006136:	60c2      	str	r2, [r0, #12]
 8006138:	bc70      	pop	{r4, r5, r6}
 800613a:	bc02      	pop	{r1}
 800613c:	4708      	bx	r1
 800613e:	1c20      	adds	r0, r4, #0
 8006140:	2104      	movs	r1, #4
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	f001 f9ee 	bl	8007524 <_calloc_r>
 8006148:	64e0      	str	r0, [r4, #76]	; 0x4c
 800614a:	2800      	cmp	r0, #0
 800614c:	d1ea      	bne.n	8006124 <_Balloc+0xc>
 800614e:	2000      	movs	r0, #0
 8006150:	e7f2      	b.n	8006138 <_Balloc+0x20>
 8006152:	2601      	movs	r6, #1
 8006154:	40ae      	lsls	r6, r5
 8006156:	1d72      	adds	r2, r6, #5
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	1c20      	adds	r0, r4, #0
 800615c:	2101      	movs	r1, #1
 800615e:	f001 f9e1 	bl	8007524 <_calloc_r>
 8006162:	2800      	cmp	r0, #0
 8006164:	d0f3      	beq.n	800614e <_Balloc+0x36>
 8006166:	6045      	str	r5, [r0, #4]
 8006168:	6086      	str	r6, [r0, #8]
 800616a:	e7e2      	b.n	8006132 <_Balloc+0x1a>

0800616c <_Bfree>:
 800616c:	b500      	push	{lr}
 800616e:	2900      	cmp	r1, #0
 8006170:	d006      	beq.n	8006180 <_Bfree+0x14>
 8006172:	684a      	ldr	r2, [r1, #4]
 8006174:	0093      	lsls	r3, r2, #2
 8006176:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006178:	18d3      	adds	r3, r2, r3
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	600a      	str	r2, [r1, #0]
 800617e:	6019      	str	r1, [r3, #0]
 8006180:	bc01      	pop	{r0}
 8006182:	4700      	bx	r0

08006184 <__multadd>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	464d      	mov	r5, r9
 8006188:	4644      	mov	r4, r8
 800618a:	465f      	mov	r7, fp
 800618c:	4656      	mov	r6, sl
 800618e:	4698      	mov	r8, r3
 8006190:	690b      	ldr	r3, [r1, #16]
 8006192:	b4f0      	push	{r4, r5, r6, r7}
 8006194:	1c0d      	adds	r5, r1, #0
 8006196:	4683      	mov	fp, r0
 8006198:	468a      	mov	sl, r1
 800619a:	4699      	mov	r9, r3
 800619c:	3514      	adds	r5, #20
 800619e:	2400      	movs	r4, #0
 80061a0:	682e      	ldr	r6, [r5, #0]
 80061a2:	0437      	lsls	r7, r6, #16
 80061a4:	0c3f      	lsrs	r7, r7, #16
 80061a6:	4357      	muls	r7, r2
 80061a8:	0c36      	lsrs	r6, r6, #16
 80061aa:	4356      	muls	r6, r2
 80061ac:	4447      	add	r7, r8
 80061ae:	0c3b      	lsrs	r3, r7, #16
 80061b0:	199e      	adds	r6, r3, r6
 80061b2:	043f      	lsls	r7, r7, #16
 80061b4:	0c31      	lsrs	r1, r6, #16
 80061b6:	0c3f      	lsrs	r7, r7, #16
 80061b8:	0436      	lsls	r6, r6, #16
 80061ba:	19f6      	adds	r6, r6, r7
 80061bc:	3401      	adds	r4, #1
 80061be:	4688      	mov	r8, r1
 80061c0:	c540      	stmia	r5!, {r6}
 80061c2:	45a1      	cmp	r9, r4
 80061c4:	dcec      	bgt.n	80061a0 <__multadd+0x1c>
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d00d      	beq.n	80061e6 <__multadd+0x62>
 80061ca:	4652      	mov	r2, sl
 80061cc:	6892      	ldr	r2, [r2, #8]
 80061ce:	4591      	cmp	r9, r2
 80061d0:	da12      	bge.n	80061f8 <__multadd+0x74>
 80061d2:	464b      	mov	r3, r9
 80061d4:	3304      	adds	r3, #4
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4453      	add	r3, sl
 80061da:	4642      	mov	r2, r8
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	464b      	mov	r3, r9
 80061e0:	3301      	adds	r3, #1
 80061e2:	4651      	mov	r1, sl
 80061e4:	610b      	str	r3, [r1, #16]
 80061e6:	4650      	mov	r0, sl
 80061e8:	bc3c      	pop	{r2, r3, r4, r5}
 80061ea:	4690      	mov	r8, r2
 80061ec:	4699      	mov	r9, r3
 80061ee:	46a2      	mov	sl, r4
 80061f0:	46ab      	mov	fp, r5
 80061f2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f4:	bc02      	pop	{r1}
 80061f6:	4708      	bx	r1
 80061f8:	4653      	mov	r3, sl
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	4658      	mov	r0, fp
 80061fe:	3101      	adds	r1, #1
 8006200:	f7ff ff8a 	bl	8006118 <_Balloc>
 8006204:	4653      	mov	r3, sl
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	4651      	mov	r1, sl
 800620a:	3202      	adds	r2, #2
 800620c:	1c04      	adds	r4, r0, #0
 800620e:	310c      	adds	r1, #12
 8006210:	0092      	lsls	r2, r2, #2
 8006212:	300c      	adds	r0, #12
 8006214:	f7ff ff38 	bl	8006088 <memcpy>
 8006218:	4651      	mov	r1, sl
 800621a:	6849      	ldr	r1, [r1, #4]
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	4659      	mov	r1, fp
 8006220:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006222:	18d3      	adds	r3, r2, r3
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4651      	mov	r1, sl
 8006228:	600a      	str	r2, [r1, #0]
 800622a:	46a2      	mov	sl, r4
 800622c:	6019      	str	r1, [r3, #0]
 800622e:	e7d0      	b.n	80061d2 <__multadd+0x4e>

08006230 <__s2b>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	4646      	mov	r6, r8
 8006234:	464f      	mov	r7, r9
 8006236:	b4c0      	push	{r6, r7}
 8006238:	1c06      	adds	r6, r0, #0
 800623a:	1c18      	adds	r0, r3, #0
 800623c:	1c0c      	adds	r4, r1, #0
 800623e:	3008      	adds	r0, #8
 8006240:	2109      	movs	r1, #9
 8006242:	4690      	mov	r8, r2
 8006244:	1c1f      	adds	r7, r3, #0
 8006246:	f001 ecbe 	blx	8007bc4 <__aeabi_idiv>
 800624a:	2801      	cmp	r0, #1
 800624c:	dd3b      	ble.n	80062c6 <__s2b+0x96>
 800624e:	2501      	movs	r5, #1
 8006250:	2100      	movs	r1, #0
 8006252:	006d      	lsls	r5, r5, #1
 8006254:	3101      	adds	r1, #1
 8006256:	42a8      	cmp	r0, r5
 8006258:	dcfb      	bgt.n	8006252 <__s2b+0x22>
 800625a:	1c30      	adds	r0, r6, #0
 800625c:	f7ff ff5c 	bl	8006118 <_Balloc>
 8006260:	9b08      	ldr	r3, [sp, #32]
 8006262:	6143      	str	r3, [r0, #20]
 8006264:	2301      	movs	r3, #1
 8006266:	6103      	str	r3, [r0, #16]
 8006268:	4643      	mov	r3, r8
 800626a:	1c01      	adds	r1, r0, #0
 800626c:	2b09      	cmp	r3, #9
 800626e:	dd27      	ble.n	80062c0 <__s2b+0x90>
 8006270:	2309      	movs	r3, #9
 8006272:	191b      	adds	r3, r3, r4
 8006274:	4699      	mov	r9, r3
 8006276:	4444      	add	r4, r8
 8006278:	1c1d      	adds	r5, r3, #0
 800627a:	782b      	ldrb	r3, [r5, #0]
 800627c:	1c30      	adds	r0, r6, #0
 800627e:	3b30      	subs	r3, #48	; 0x30
 8006280:	220a      	movs	r2, #10
 8006282:	f7ff ff7f 	bl	8006184 <__multadd>
 8006286:	3501      	adds	r5, #1
 8006288:	1c01      	adds	r1, r0, #0
 800628a:	42a5      	cmp	r5, r4
 800628c:	d1f5      	bne.n	800627a <__s2b+0x4a>
 800628e:	464c      	mov	r4, r9
 8006290:	4444      	add	r4, r8
 8006292:	3c08      	subs	r4, #8
 8006294:	4643      	mov	r3, r8
 8006296:	429f      	cmp	r7, r3
 8006298:	dd0b      	ble.n	80062b2 <__s2b+0x82>
 800629a:	1aff      	subs	r7, r7, r3
 800629c:	19e7      	adds	r7, r4, r7
 800629e:	7823      	ldrb	r3, [r4, #0]
 80062a0:	1c30      	adds	r0, r6, #0
 80062a2:	3b30      	subs	r3, #48	; 0x30
 80062a4:	220a      	movs	r2, #10
 80062a6:	f7ff ff6d 	bl	8006184 <__multadd>
 80062aa:	3401      	adds	r4, #1
 80062ac:	1c01      	adds	r1, r0, #0
 80062ae:	42bc      	cmp	r4, r7
 80062b0:	d1f5      	bne.n	800629e <__s2b+0x6e>
 80062b2:	1c08      	adds	r0, r1, #0
 80062b4:	bc0c      	pop	{r2, r3}
 80062b6:	4690      	mov	r8, r2
 80062b8:	4699      	mov	r9, r3
 80062ba:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062bc:	bc02      	pop	{r1}
 80062be:	4708      	bx	r1
 80062c0:	340a      	adds	r4, #10
 80062c2:	2309      	movs	r3, #9
 80062c4:	e7e7      	b.n	8006296 <__s2b+0x66>
 80062c6:	2100      	movs	r1, #0
 80062c8:	e7c7      	b.n	800625a <__s2b+0x2a>
 80062ca:	46c0      	nop			; (mov r8, r8)

080062cc <__hi0bits>:
 80062cc:	1c03      	adds	r3, r0, #0
 80062ce:	0c02      	lsrs	r2, r0, #16
 80062d0:	b500      	push	{lr}
 80062d2:	2000      	movs	r0, #0
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	d101      	bne.n	80062dc <__hi0bits+0x10>
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	2010      	movs	r0, #16
 80062dc:	0e1a      	lsrs	r2, r3, #24
 80062de:	d101      	bne.n	80062e4 <__hi0bits+0x18>
 80062e0:	3008      	adds	r0, #8
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	0f1a      	lsrs	r2, r3, #28
 80062e6:	d101      	bne.n	80062ec <__hi0bits+0x20>
 80062e8:	3004      	adds	r0, #4
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	0f9a      	lsrs	r2, r3, #30
 80062ee:	d101      	bne.n	80062f4 <__hi0bits+0x28>
 80062f0:	3002      	adds	r0, #2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db03      	blt.n	8006300 <__hi0bits+0x34>
 80062f8:	3001      	adds	r0, #1
 80062fa:	005a      	lsls	r2, r3, #1
 80062fc:	d400      	bmi.n	8006300 <__hi0bits+0x34>
 80062fe:	2020      	movs	r0, #32
 8006300:	bc02      	pop	{r1}
 8006302:	4708      	bx	r1

08006304 <__lo0bits>:
 8006304:	6803      	ldr	r3, [r0, #0]
 8006306:	b500      	push	{lr}
 8006308:	0759      	lsls	r1, r3, #29
 800630a:	d00a      	beq.n	8006322 <__lo0bits+0x1e>
 800630c:	2200      	movs	r2, #0
 800630e:	07d9      	lsls	r1, r3, #31
 8006310:	d404      	bmi.n	800631c <__lo0bits+0x18>
 8006312:	079a      	lsls	r2, r3, #30
 8006314:	d421      	bmi.n	800635a <__lo0bits+0x56>
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	6003      	str	r3, [r0, #0]
 800631a:	2202      	movs	r2, #2
 800631c:	1c10      	adds	r0, r2, #0
 800631e:	bc02      	pop	{r1}
 8006320:	4708      	bx	r1
 8006322:	0419      	lsls	r1, r3, #16
 8006324:	2200      	movs	r2, #0
 8006326:	2900      	cmp	r1, #0
 8006328:	d101      	bne.n	800632e <__lo0bits+0x2a>
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	2210      	movs	r2, #16
 800632e:	21ff      	movs	r1, #255	; 0xff
 8006330:	4219      	tst	r1, r3
 8006332:	d101      	bne.n	8006338 <__lo0bits+0x34>
 8006334:	3208      	adds	r2, #8
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	0719      	lsls	r1, r3, #28
 800633a:	d101      	bne.n	8006340 <__lo0bits+0x3c>
 800633c:	3204      	adds	r2, #4
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	0799      	lsls	r1, r3, #30
 8006342:	d101      	bne.n	8006348 <__lo0bits+0x44>
 8006344:	3202      	adds	r2, #2
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	07d9      	lsls	r1, r3, #31
 800634a:	d404      	bmi.n	8006356 <__lo0bits+0x52>
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	d101      	bne.n	8006354 <__lo0bits+0x50>
 8006350:	2220      	movs	r2, #32
 8006352:	e7e3      	b.n	800631c <__lo0bits+0x18>
 8006354:	3201      	adds	r2, #1
 8006356:	6003      	str	r3, [r0, #0]
 8006358:	e7e0      	b.n	800631c <__lo0bits+0x18>
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	e7dc      	b.n	800631c <__lo0bits+0x18>
 8006362:	46c0      	nop			; (mov r8, r8)

08006364 <__i2b>:
 8006364:	b510      	push	{r4, lr}
 8006366:	1c0c      	adds	r4, r1, #0
 8006368:	2101      	movs	r1, #1
 800636a:	f7ff fed5 	bl	8006118 <_Balloc>
 800636e:	2301      	movs	r3, #1
 8006370:	6144      	str	r4, [r0, #20]
 8006372:	6103      	str	r3, [r0, #16]
 8006374:	bc10      	pop	{r4}
 8006376:	bc02      	pop	{r1}
 8006378:	4708      	bx	r1
 800637a:	46c0      	nop			; (mov r8, r8)

0800637c <__multiply>:
 800637c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637e:	4644      	mov	r4, r8
 8006380:	4656      	mov	r6, sl
 8006382:	464d      	mov	r5, r9
 8006384:	465f      	mov	r7, fp
 8006386:	b4f0      	push	{r4, r5, r6, r7}
 8006388:	1c0e      	adds	r6, r1, #0
 800638a:	6914      	ldr	r4, [r2, #16]
 800638c:	6909      	ldr	r1, [r1, #16]
 800638e:	b085      	sub	sp, #20
 8006390:	1c15      	adds	r5, r2, #0
 8006392:	4688      	mov	r8, r1
 8006394:	42a1      	cmp	r1, r4
 8006396:	da04      	bge.n	80063a2 <__multiply+0x26>
 8006398:	1c33      	adds	r3, r6, #0
 800639a:	46a0      	mov	r8, r4
 800639c:	1c16      	adds	r6, r2, #0
 800639e:	1c0c      	adds	r4, r1, #0
 80063a0:	1c1d      	adds	r5, r3, #0
 80063a2:	4642      	mov	r2, r8
 80063a4:	68b3      	ldr	r3, [r6, #8]
 80063a6:	1912      	adds	r2, r2, r4
 80063a8:	6871      	ldr	r1, [r6, #4]
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	dd00      	ble.n	80063b2 <__multiply+0x36>
 80063b0:	3101      	adds	r1, #1
 80063b2:	f7ff feb1 	bl	8006118 <_Balloc>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4684      	mov	ip, r0
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4463      	add	r3, ip
 80063c0:	1c02      	adds	r2, r0, #0
 80063c2:	3304      	adds	r3, #4
 80063c4:	469b      	mov	fp, r3
 80063c6:	3214      	adds	r2, #20
 80063c8:	1c13      	adds	r3, r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	4658      	mov	r0, fp
 80063ce:	455a      	cmp	r2, fp
 80063d0:	d203      	bcs.n	80063da <__multiply+0x5e>
 80063d2:	c302      	stmia	r3!, {r1}
 80063d4:	4298      	cmp	r0, r3
 80063d6:	d8fc      	bhi.n	80063d2 <__multiply+0x56>
 80063d8:	4683      	mov	fp, r0
 80063da:	4643      	mov	r3, r8
 80063dc:	3304      	adds	r3, #4
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	3404      	adds	r4, #4
 80063e2:	1c31      	adds	r1, r6, #0
 80063e4:	00a4      	lsls	r4, r4, #2
 80063e6:	18f6      	adds	r6, r6, r3
 80063e8:	2314      	movs	r3, #20
 80063ea:	195b      	adds	r3, r3, r5
 80063ec:	192d      	adds	r5, r5, r4
 80063ee:	3114      	adds	r1, #20
 80063f0:	3504      	adds	r5, #4
 80063f2:	9102      	str	r1, [sp, #8]
 80063f4:	3604      	adds	r6, #4
 80063f6:	4699      	mov	r9, r3
 80063f8:	4692      	mov	sl, r2
 80063fa:	46a8      	mov	r8, r5
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	d249      	bcs.n	8006494 <__multiply+0x118>
 8006400:	4649      	mov	r1, r9
 8006402:	680d      	ldr	r5, [r1, #0]
 8006404:	042c      	lsls	r4, r5, #16
 8006406:	0c24      	lsrs	r4, r4, #16
 8006408:	d020      	beq.n	800644c <__multiply+0xd0>
 800640a:	9a02      	ldr	r2, [sp, #8]
 800640c:	9601      	str	r6, [sp, #4]
 800640e:	4653      	mov	r3, sl
 8006410:	2500      	movs	r5, #0
 8006412:	ca80      	ldmia	r2!, {r7}
 8006414:	0438      	lsls	r0, r7, #16
 8006416:	0c00      	lsrs	r0, r0, #16
 8006418:	1c21      	adds	r1, r4, #0
 800641a:	4341      	muls	r1, r0
 800641c:	0c3f      	lsrs	r7, r7, #16
 800641e:	4367      	muls	r7, r4
 8006420:	681e      	ldr	r6, [r3, #0]
 8006422:	0430      	lsls	r0, r6, #16
 8006424:	0c00      	lsrs	r0, r0, #16
 8006426:	1808      	adds	r0, r1, r0
 8006428:	1940      	adds	r0, r0, r5
 800642a:	0c31      	lsrs	r1, r6, #16
 800642c:	0c05      	lsrs	r5, r0, #16
 800642e:	1879      	adds	r1, r7, r1
 8006430:	1949      	adds	r1, r1, r5
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	0c0d      	lsrs	r5, r1, #16
 8006436:	0c00      	lsrs	r0, r0, #16
 8006438:	0409      	lsls	r1, r1, #16
 800643a:	4301      	orrs	r1, r0
 800643c:	c302      	stmia	r3!, {r1}
 800643e:	9901      	ldr	r1, [sp, #4]
 8006440:	4291      	cmp	r1, r2
 8006442:	d8e6      	bhi.n	8006412 <__multiply+0x96>
 8006444:	601d      	str	r5, [r3, #0]
 8006446:	464a      	mov	r2, r9
 8006448:	6815      	ldr	r5, [r2, #0]
 800644a:	1c0e      	adds	r6, r1, #0
 800644c:	0c2d      	lsrs	r5, r5, #16
 800644e:	d01c      	beq.n	800648a <__multiply+0x10e>
 8006450:	4653      	mov	r3, sl
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	1c10      	adds	r0, r2, #0
 8006458:	4651      	mov	r1, sl
 800645a:	2700      	movs	r7, #0
 800645c:	881c      	ldrh	r4, [r3, #0]
 800645e:	436c      	muls	r4, r5
 8006460:	0c00      	lsrs	r0, r0, #16
 8006462:	1820      	adds	r0, r4, r0
 8006464:	19c7      	adds	r7, r0, r7
 8006466:	0412      	lsls	r2, r2, #16
 8006468:	0438      	lsls	r0, r7, #16
 800646a:	0c12      	lsrs	r2, r2, #16
 800646c:	4302      	orrs	r2, r0
 800646e:	c104      	stmia	r1!, {r2}
 8006470:	cb04      	ldmia	r3!, {r2}
 8006472:	0c12      	lsrs	r2, r2, #16
 8006474:	436a      	muls	r2, r5
 8006476:	6808      	ldr	r0, [r1, #0]
 8006478:	0404      	lsls	r4, r0, #16
 800647a:	0c24      	lsrs	r4, r4, #16
 800647c:	0c3f      	lsrs	r7, r7, #16
 800647e:	18a2      	adds	r2, r4, r2
 8006480:	19d2      	adds	r2, r2, r7
 8006482:	0c17      	lsrs	r7, r2, #16
 8006484:	429e      	cmp	r6, r3
 8006486:	d8e9      	bhi.n	800645c <__multiply+0xe0>
 8006488:	600a      	str	r2, [r1, #0]
 800648a:	2504      	movs	r5, #4
 800648c:	44a9      	add	r9, r5
 800648e:	44aa      	add	sl, r5
 8006490:	45c8      	cmp	r8, r9
 8006492:	d8b5      	bhi.n	8006400 <__multiply+0x84>
 8006494:	9d03      	ldr	r5, [sp, #12]
 8006496:	2d00      	cmp	r5, #0
 8006498:	dd0e      	ble.n	80064b8 <__multiply+0x13c>
 800649a:	465b      	mov	r3, fp
 800649c:	3b04      	subs	r3, #4
 800649e:	681e      	ldr	r6, [r3, #0]
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d109      	bne.n	80064b8 <__multiply+0x13c>
 80064a4:	9a03      	ldr	r2, [sp, #12]
 80064a6:	e003      	b.n	80064b0 <__multiply+0x134>
 80064a8:	3b04      	subs	r3, #4
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d102      	bne.n	80064b6 <__multiply+0x13a>
 80064b0:	3a01      	subs	r2, #1
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	d1f8      	bne.n	80064a8 <__multiply+0x12c>
 80064b6:	9203      	str	r2, [sp, #12]
 80064b8:	9d03      	ldr	r5, [sp, #12]
 80064ba:	4666      	mov	r6, ip
 80064bc:	4660      	mov	r0, ip
 80064be:	6135      	str	r5, [r6, #16]
 80064c0:	b005      	add	sp, #20
 80064c2:	bc3c      	pop	{r2, r3, r4, r5}
 80064c4:	4690      	mov	r8, r2
 80064c6:	4699      	mov	r9, r3
 80064c8:	46a2      	mov	sl, r4
 80064ca:	46ab      	mov	fp, r5
 80064cc:	bcf0      	pop	{r4, r5, r6, r7}
 80064ce:	bc02      	pop	{r1}
 80064d0:	4708      	bx	r1
 80064d2:	46c0      	nop			; (mov r8, r8)

080064d4 <__pow5mult>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	464f      	mov	r7, r9
 80064d8:	4646      	mov	r6, r8
 80064da:	2303      	movs	r3, #3
 80064dc:	b4c0      	push	{r6, r7}
 80064de:	4681      	mov	r9, r0
 80064e0:	1c0f      	adds	r7, r1, #0
 80064e2:	1c14      	adds	r4, r2, #0
 80064e4:	4013      	ands	r3, r2
 80064e6:	d136      	bne.n	8006556 <__pow5mult+0x82>
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	d022      	beq.n	8006532 <__pow5mult+0x5e>
 80064ec:	4649      	mov	r1, r9
 80064ee:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80064f0:	2e00      	cmp	r6, #0
 80064f2:	d039      	beq.n	8006568 <__pow5mult+0x94>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4698      	mov	r8, r3
 80064f8:	e005      	b.n	8006506 <__pow5mult+0x32>
 80064fa:	1064      	asrs	r4, r4, #1
 80064fc:	d019      	beq.n	8006532 <__pow5mult+0x5e>
 80064fe:	6835      	ldr	r5, [r6, #0]
 8006500:	2d00      	cmp	r5, #0
 8006502:	d01d      	beq.n	8006540 <__pow5mult+0x6c>
 8006504:	1c2e      	adds	r6, r5, #0
 8006506:	4641      	mov	r1, r8
 8006508:	4221      	tst	r1, r4
 800650a:	d0f6      	beq.n	80064fa <__pow5mult+0x26>
 800650c:	4648      	mov	r0, r9
 800650e:	1c39      	adds	r1, r7, #0
 8006510:	1c32      	adds	r2, r6, #0
 8006512:	f7ff ff33 	bl	800637c <__multiply>
 8006516:	2f00      	cmp	r7, #0
 8006518:	d01b      	beq.n	8006552 <__pow5mult+0x7e>
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4649      	mov	r1, r9
 800651e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006520:	0093      	lsls	r3, r2, #2
 8006522:	18cb      	adds	r3, r1, r3
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	1064      	asrs	r4, r4, #1
 8006528:	603a      	str	r2, [r7, #0]
 800652a:	601f      	str	r7, [r3, #0]
 800652c:	1c07      	adds	r7, r0, #0
 800652e:	2c00      	cmp	r4, #0
 8006530:	d1e5      	bne.n	80064fe <__pow5mult+0x2a>
 8006532:	1c38      	adds	r0, r7, #0
 8006534:	bc0c      	pop	{r2, r3}
 8006536:	4690      	mov	r8, r2
 8006538:	4699      	mov	r9, r3
 800653a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653c:	bc02      	pop	{r1}
 800653e:	4708      	bx	r1
 8006540:	1c31      	adds	r1, r6, #0
 8006542:	1c32      	adds	r2, r6, #0
 8006544:	4648      	mov	r0, r9
 8006546:	f7ff ff19 	bl	800637c <__multiply>
 800654a:	6030      	str	r0, [r6, #0]
 800654c:	6005      	str	r5, [r0, #0]
 800654e:	1c06      	adds	r6, r0, #0
 8006550:	e7d9      	b.n	8006506 <__pow5mult+0x32>
 8006552:	1c07      	adds	r7, r0, #0
 8006554:	e7d1      	b.n	80064fa <__pow5mult+0x26>
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <__pow5mult+0xa8>)
 8006558:	3b01      	subs	r3, #1
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	589a      	ldr	r2, [r3, r2]
 800655e:	2300      	movs	r3, #0
 8006560:	f7ff fe10 	bl	8006184 <__multadd>
 8006564:	1c07      	adds	r7, r0, #0
 8006566:	e7bf      	b.n	80064e8 <__pow5mult+0x14>
 8006568:	4648      	mov	r0, r9
 800656a:	4905      	ldr	r1, [pc, #20]	; (8006580 <__pow5mult+0xac>)
 800656c:	f7ff fefa 	bl	8006364 <__i2b>
 8006570:	464a      	mov	r2, r9
 8006572:	2300      	movs	r3, #0
 8006574:	6490      	str	r0, [r2, #72]	; 0x48
 8006576:	1c06      	adds	r6, r0, #0
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	e7bb      	b.n	80064f4 <__pow5mult+0x20>
 800657c:	08008c68 	.word	0x08008c68
 8006580:	00000271 	.word	0x00000271

08006584 <__lshift>:
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	464d      	mov	r5, r9
 8006588:	4644      	mov	r4, r8
 800658a:	4656      	mov	r6, sl
 800658c:	465f      	mov	r7, fp
 800658e:	b4f0      	push	{r4, r5, r6, r7}
 8006590:	1c0e      	adds	r6, r1, #0
 8006592:	b083      	sub	sp, #12
 8006594:	9001      	str	r0, [sp, #4]
 8006596:	6930      	ldr	r0, [r6, #16]
 8006598:	1155      	asrs	r5, r2, #5
 800659a:	1940      	adds	r0, r0, r5
 800659c:	1c04      	adds	r4, r0, #0
 800659e:	68b3      	ldr	r3, [r6, #8]
 80065a0:	3401      	adds	r4, #1
 80065a2:	4690      	mov	r8, r2
 80065a4:	6849      	ldr	r1, [r1, #4]
 80065a6:	4681      	mov	r9, r0
 80065a8:	429c      	cmp	r4, r3
 80065aa:	dd03      	ble.n	80065b4 <__lshift+0x30>
 80065ac:	3101      	adds	r1, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	429c      	cmp	r4, r3
 80065b2:	dcfb      	bgt.n	80065ac <__lshift+0x28>
 80065b4:	9801      	ldr	r0, [sp, #4]
 80065b6:	f7ff fdaf 	bl	8006118 <_Balloc>
 80065ba:	1c03      	adds	r3, r0, #0
 80065bc:	4683      	mov	fp, r0
 80065be:	3314      	adds	r3, #20
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	dd09      	ble.n	80065d8 <__lshift+0x54>
 80065c4:	2200      	movs	r2, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	3201      	adds	r2, #1
 80065ca:	c302      	stmia	r3!, {r1}
 80065cc:	42aa      	cmp	r2, r5
 80065ce:	d1fb      	bne.n	80065c8 <__lshift+0x44>
 80065d0:	1d13      	adds	r3, r2, #4
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	445b      	add	r3, fp
 80065d6:	3304      	adds	r3, #4
 80065d8:	6935      	ldr	r5, [r6, #16]
 80065da:	3504      	adds	r5, #4
 80065dc:	4641      	mov	r1, r8
 80065de:	00ad      	lsls	r5, r5, #2
 80065e0:	201f      	movs	r0, #31
 80065e2:	1c32      	adds	r2, r6, #0
 80065e4:	1975      	adds	r5, r6, r5
 80065e6:	4001      	ands	r1, r0
 80065e8:	3214      	adds	r2, #20
 80065ea:	3504      	adds	r5, #4
 80065ec:	4688      	mov	r8, r1
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d027      	beq.n	8006642 <__lshift+0xbe>
 80065f2:	2020      	movs	r0, #32
 80065f4:	1a41      	subs	r1, r0, r1
 80065f6:	468c      	mov	ip, r1
 80065f8:	2100      	movs	r1, #0
 80065fa:	6817      	ldr	r7, [r2, #0]
 80065fc:	4640      	mov	r0, r8
 80065fe:	4087      	lsls	r7, r0
 8006600:	4339      	orrs	r1, r7
 8006602:	c302      	stmia	r3!, {r1}
 8006604:	ca02      	ldmia	r2!, {r1}
 8006606:	4667      	mov	r7, ip
 8006608:	40f9      	lsrs	r1, r7
 800660a:	4295      	cmp	r5, r2
 800660c:	d8f5      	bhi.n	80065fa <__lshift+0x76>
 800660e:	6019      	str	r1, [r3, #0]
 8006610:	2900      	cmp	r1, #0
 8006612:	d001      	beq.n	8006618 <__lshift+0x94>
 8006614:	464c      	mov	r4, r9
 8006616:	3402      	adds	r4, #2
 8006618:	9f01      	ldr	r7, [sp, #4]
 800661a:	6871      	ldr	r1, [r6, #4]
 800661c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	4658      	mov	r0, fp
 8006622:	18d3      	adds	r3, r2, r3
 8006624:	3c01      	subs	r4, #1
 8006626:	6104      	str	r4, [r0, #16]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	6030      	str	r0, [r6, #0]
 800662c:	4658      	mov	r0, fp
 800662e:	601e      	str	r6, [r3, #0]
 8006630:	b003      	add	sp, #12
 8006632:	bc3c      	pop	{r2, r3, r4, r5}
 8006634:	4690      	mov	r8, r2
 8006636:	4699      	mov	r9, r3
 8006638:	46a2      	mov	sl, r4
 800663a:	46ab      	mov	fp, r5
 800663c:	bcf0      	pop	{r4, r5, r6, r7}
 800663e:	bc02      	pop	{r1}
 8006640:	4708      	bx	r1
 8006642:	ca02      	ldmia	r2!, {r1}
 8006644:	c302      	stmia	r3!, {r1}
 8006646:	4295      	cmp	r5, r2
 8006648:	d9e6      	bls.n	8006618 <__lshift+0x94>
 800664a:	ca02      	ldmia	r2!, {r1}
 800664c:	c302      	stmia	r3!, {r1}
 800664e:	4295      	cmp	r5, r2
 8006650:	d8f7      	bhi.n	8006642 <__lshift+0xbe>
 8006652:	e7e1      	b.n	8006618 <__lshift+0x94>

08006654 <__mcmp>:
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	690a      	ldr	r2, [r1, #16]
 8006658:	6904      	ldr	r4, [r0, #16]
 800665a:	1c03      	adds	r3, r0, #0
 800665c:	1aa0      	subs	r0, r4, r2
 800665e:	d10f      	bne.n	8006680 <__mcmp+0x2c>
 8006660:	3204      	adds	r2, #4
 8006662:	0092      	lsls	r2, r2, #2
 8006664:	1c1d      	adds	r5, r3, #0
 8006666:	1889      	adds	r1, r1, r2
 8006668:	189b      	adds	r3, r3, r2
 800666a:	3514      	adds	r5, #20
 800666c:	3304      	adds	r3, #4
 800666e:	3104      	adds	r1, #4
 8006670:	3b04      	subs	r3, #4
 8006672:	3904      	subs	r1, #4
 8006674:	681c      	ldr	r4, [r3, #0]
 8006676:	680a      	ldr	r2, [r1, #0]
 8006678:	4294      	cmp	r4, r2
 800667a:	d104      	bne.n	8006686 <__mcmp+0x32>
 800667c:	429d      	cmp	r5, r3
 800667e:	d3f7      	bcc.n	8006670 <__mcmp+0x1c>
 8006680:	bc30      	pop	{r4, r5}
 8006682:	bc02      	pop	{r1}
 8006684:	4708      	bx	r1
 8006686:	4294      	cmp	r4, r2
 8006688:	4180      	sbcs	r0, r0
 800668a:	2301      	movs	r3, #1
 800668c:	4318      	orrs	r0, r3
 800668e:	e7f7      	b.n	8006680 <__mcmp+0x2c>

08006690 <__mdiff>:
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	4657      	mov	r7, sl
 8006694:	464e      	mov	r6, r9
 8006696:	4645      	mov	r5, r8
 8006698:	b4e0      	push	{r5, r6, r7}
 800669a:	1c0c      	adds	r4, r1, #0
 800669c:	1c07      	adds	r7, r0, #0
 800669e:	1c08      	adds	r0, r1, #0
 80066a0:	1c11      	adds	r1, r2, #0
 80066a2:	1c15      	adds	r5, r2, #0
 80066a4:	f7ff ffd6 	bl	8006654 <__mcmp>
 80066a8:	1e06      	subs	r6, r0, #0
 80066aa:	d060      	beq.n	800676e <__mdiff+0xde>
 80066ac:	db5a      	blt.n	8006764 <__mdiff+0xd4>
 80066ae:	2600      	movs	r6, #0
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	1c38      	adds	r0, r7, #0
 80066b4:	f7ff fd30 	bl	8006118 <_Balloc>
 80066b8:	6927      	ldr	r7, [r4, #16]
 80066ba:	1d3a      	adds	r2, r7, #4
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	1c23      	adds	r3, r4, #0
 80066c0:	18a4      	adds	r4, r4, r2
 80066c2:	692a      	ldr	r2, [r5, #16]
 80066c4:	3204      	adds	r2, #4
 80066c6:	0092      	lsls	r2, r2, #2
 80066c8:	60c6      	str	r6, [r0, #12]
 80066ca:	1c2e      	adds	r6, r5, #0
 80066cc:	18ad      	adds	r5, r5, r2
 80066ce:	3504      	adds	r5, #4
 80066d0:	3404      	adds	r4, #4
 80066d2:	1c01      	adds	r1, r0, #0
 80066d4:	46a9      	mov	r9, r5
 80066d6:	4682      	mov	sl, r0
 80066d8:	3314      	adds	r3, #20
 80066da:	46a4      	mov	ip, r4
 80066dc:	3614      	adds	r6, #20
 80066de:	3114      	adds	r1, #20
 80066e0:	2500      	movs	r5, #0
 80066e2:	cb01      	ldmia	r3!, {r0}
 80066e4:	ce10      	ldmia	r6!, {r4}
 80066e6:	0402      	lsls	r2, r0, #16
 80066e8:	0c12      	lsrs	r2, r2, #16
 80066ea:	1955      	adds	r5, r2, r5
 80066ec:	0422      	lsls	r2, r4, #16
 80066ee:	0c12      	lsrs	r2, r2, #16
 80066f0:	1aaa      	subs	r2, r5, r2
 80066f2:	0c24      	lsrs	r4, r4, #16
 80066f4:	0c05      	lsrs	r5, r0, #16
 80066f6:	1b2c      	subs	r4, r5, r4
 80066f8:	1415      	asrs	r5, r2, #16
 80066fa:	1964      	adds	r4, r4, r5
 80066fc:	0412      	lsls	r2, r2, #16
 80066fe:	1425      	asrs	r5, r4, #16
 8006700:	0c12      	lsrs	r2, r2, #16
 8006702:	0424      	lsls	r4, r4, #16
 8006704:	4314      	orrs	r4, r2
 8006706:	c110      	stmia	r1!, {r4}
 8006708:	45b1      	cmp	r9, r6
 800670a:	d8ea      	bhi.n	80066e2 <__mdiff+0x52>
 800670c:	4688      	mov	r8, r1
 800670e:	4699      	mov	r9, r3
 8006710:	459c      	cmp	ip, r3
 8006712:	d915      	bls.n	8006740 <__mdiff+0xb0>
 8006714:	cb40      	ldmia	r3!, {r6}
 8006716:	0432      	lsls	r2, r6, #16
 8006718:	0c12      	lsrs	r2, r2, #16
 800671a:	1952      	adds	r2, r2, r5
 800671c:	1414      	asrs	r4, r2, #16
 800671e:	0c36      	lsrs	r6, r6, #16
 8006720:	19a4      	adds	r4, r4, r6
 8006722:	0412      	lsls	r2, r2, #16
 8006724:	1425      	asrs	r5, r4, #16
 8006726:	0c12      	lsrs	r2, r2, #16
 8006728:	0424      	lsls	r4, r4, #16
 800672a:	4314      	orrs	r4, r2
 800672c:	c110      	stmia	r1!, {r4}
 800672e:	459c      	cmp	ip, r3
 8006730:	d8f0      	bhi.n	8006714 <__mdiff+0x84>
 8006732:	464a      	mov	r2, r9
 8006734:	43d1      	mvns	r1, r2
 8006736:	4461      	add	r1, ip
 8006738:	0889      	lsrs	r1, r1, #2
 800673a:	3101      	adds	r1, #1
 800673c:	0089      	lsls	r1, r1, #2
 800673e:	4441      	add	r1, r8
 8006740:	3904      	subs	r1, #4
 8006742:	2c00      	cmp	r4, #0
 8006744:	d104      	bne.n	8006750 <__mdiff+0xc0>
 8006746:	3904      	subs	r1, #4
 8006748:	680b      	ldr	r3, [r1, #0]
 800674a:	3f01      	subs	r7, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0fa      	beq.n	8006746 <__mdiff+0xb6>
 8006750:	4650      	mov	r0, sl
 8006752:	6107      	str	r7, [r0, #16]
 8006754:	4650      	mov	r0, sl
 8006756:	bc1c      	pop	{r2, r3, r4}
 8006758:	4690      	mov	r8, r2
 800675a:	4699      	mov	r9, r3
 800675c:	46a2      	mov	sl, r4
 800675e:	bcf0      	pop	{r4, r5, r6, r7}
 8006760:	bc02      	pop	{r1}
 8006762:	4708      	bx	r1
 8006764:	1c23      	adds	r3, r4, #0
 8006766:	2601      	movs	r6, #1
 8006768:	1c2c      	adds	r4, r5, #0
 800676a:	1c1d      	adds	r5, r3, #0
 800676c:	e7a0      	b.n	80066b0 <__mdiff+0x20>
 800676e:	1c38      	adds	r0, r7, #0
 8006770:	2100      	movs	r1, #0
 8006772:	f7ff fcd1 	bl	8006118 <_Balloc>
 8006776:	2301      	movs	r3, #1
 8006778:	4682      	mov	sl, r0
 800677a:	6103      	str	r3, [r0, #16]
 800677c:	6146      	str	r6, [r0, #20]
 800677e:	e7e9      	b.n	8006754 <__mdiff+0xc4>

08006780 <__ulp>:
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <__ulp+0x40>)
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <__ulp+0x44>)
 8006784:	400b      	ands	r3, r1
 8006786:	189b      	adds	r3, r3, r2
 8006788:	b510      	push	{r4, lr}
 800678a:	2b00      	cmp	r3, #0
 800678c:	dd04      	ble.n	8006798 <__ulp+0x18>
 800678e:	1c19      	adds	r1, r3, #0
 8006790:	2000      	movs	r0, #0
 8006792:	bc10      	pop	{r4}
 8006794:	bc04      	pop	{r2}
 8006796:	4710      	bx	r2
 8006798:	425b      	negs	r3, r3
 800679a:	151b      	asrs	r3, r3, #20
 800679c:	2000      	movs	r0, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	2b13      	cmp	r3, #19
 80067a2:	dd07      	ble.n	80067b4 <__ulp+0x34>
 80067a4:	2201      	movs	r2, #1
 80067a6:	2b32      	cmp	r3, #50	; 0x32
 80067a8:	dc02      	bgt.n	80067b0 <__ulp+0x30>
 80067aa:	2433      	movs	r4, #51	; 0x33
 80067ac:	1ae3      	subs	r3, r4, r3
 80067ae:	409a      	lsls	r2, r3
 80067b0:	1c10      	adds	r0, r2, #0
 80067b2:	e7ee      	b.n	8006792 <__ulp+0x12>
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	0312      	lsls	r2, r2, #12
 80067b8:	1c11      	adds	r1, r2, #0
 80067ba:	4119      	asrs	r1, r3
 80067bc:	2000      	movs	r0, #0
 80067be:	e7e8      	b.n	8006792 <__ulp+0x12>
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	fcc00000 	.word	0xfcc00000

080067c8 <__b2d>:
 80067c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ca:	6904      	ldr	r4, [r0, #16]
 80067cc:	3404      	adds	r4, #4
 80067ce:	00a4      	lsls	r4, r4, #2
 80067d0:	1904      	adds	r4, r0, r4
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	4647      	mov	r7, r8
 80067d6:	b480      	push	{r7}
 80067d8:	1c06      	adds	r6, r0, #0
 80067da:	1c28      	adds	r0, r5, #0
 80067dc:	1c0f      	adds	r7, r1, #0
 80067de:	f7ff fd75 	bl	80062cc <__hi0bits>
 80067e2:	2320      	movs	r3, #32
 80067e4:	1a1b      	subs	r3, r3, r0
 80067e6:	3614      	adds	r6, #20
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	280a      	cmp	r0, #10
 80067ec:	dc19      	bgt.n	8006822 <__b2d+0x5a>
 80067ee:	270b      	movs	r7, #11
 80067f0:	1a3f      	subs	r7, r7, r0
 80067f2:	1c29      	adds	r1, r5, #0
 80067f4:	40f9      	lsrs	r1, r7
 80067f6:	4688      	mov	r8, r1
 80067f8:	491b      	ldr	r1, [pc, #108]	; (8006868 <__b2d+0xa0>)
 80067fa:	1c0b      	adds	r3, r1, #0
 80067fc:	4641      	mov	r1, r8
 80067fe:	430b      	orrs	r3, r1
 8006800:	2100      	movs	r1, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d202      	bcs.n	800680c <__b2d+0x44>
 8006806:	3c04      	subs	r4, #4
 8006808:	6821      	ldr	r1, [r4, #0]
 800680a:	40f9      	lsrs	r1, r7
 800680c:	3015      	adds	r0, #21
 800680e:	4085      	lsls	r5, r0
 8006810:	1c0a      	adds	r2, r1, #0
 8006812:	432a      	orrs	r2, r5
 8006814:	1c10      	adds	r0, r2, #0
 8006816:	1c19      	adds	r1, r3, #0
 8006818:	bc04      	pop	{r2}
 800681a:	4690      	mov	r8, r2
 800681c:	bcf0      	pop	{r4, r5, r6, r7}
 800681e:	bc04      	pop	{r2}
 8006820:	4710      	bx	r2
 8006822:	2100      	movs	r1, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d201      	bcs.n	800682c <__b2d+0x64>
 8006828:	3c04      	subs	r4, #4
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	1c07      	adds	r7, r0, #0
 800682e:	3f0b      	subs	r7, #11
 8006830:	2f00      	cmp	r7, #0
 8006832:	d013      	beq.n	800685c <__b2d+0x94>
 8006834:	232b      	movs	r3, #43	; 0x2b
 8006836:	1a18      	subs	r0, r3, r0
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <__b2d+0xa0>)
 800683a:	40bd      	lsls	r5, r7
 800683c:	432b      	orrs	r3, r5
 800683e:	469c      	mov	ip, r3
 8006840:	1c0d      	adds	r5, r1, #0
 8006842:	40c5      	lsrs	r5, r0
 8006844:	4663      	mov	r3, ip
 8006846:	432b      	orrs	r3, r5
 8006848:	2500      	movs	r5, #0
 800684a:	42b4      	cmp	r4, r6
 800684c:	d902      	bls.n	8006854 <__b2d+0x8c>
 800684e:	3c04      	subs	r4, #4
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	40c5      	lsrs	r5, r0
 8006854:	40b9      	lsls	r1, r7
 8006856:	1c2a      	adds	r2, r5, #0
 8006858:	430a      	orrs	r2, r1
 800685a:	e7db      	b.n	8006814 <__b2d+0x4c>
 800685c:	4802      	ldr	r0, [pc, #8]	; (8006868 <__b2d+0xa0>)
 800685e:	1c03      	adds	r3, r0, #0
 8006860:	432b      	orrs	r3, r5
 8006862:	1c0a      	adds	r2, r1, #0
 8006864:	e7d6      	b.n	8006814 <__b2d+0x4c>
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	3ff00000 	.word	0x3ff00000

0800686c <__d2b>:
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	2101      	movs	r1, #1
 8006870:	b083      	sub	sp, #12
 8006872:	1c1d      	adds	r5, r3, #0
 8006874:	1c14      	adds	r4, r2, #0
 8006876:	f7ff fc4f 	bl	8006118 <_Balloc>
 800687a:	032b      	lsls	r3, r5, #12
 800687c:	006a      	lsls	r2, r5, #1
 800687e:	1c06      	adds	r6, r0, #0
 8006880:	0b1b      	lsrs	r3, r3, #12
 8006882:	0d57      	lsrs	r7, r2, #21
 8006884:	d002      	beq.n	800688c <__d2b+0x20>
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	0352      	lsls	r2, r2, #13
 800688a:	4313      	orrs	r3, r2
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2c00      	cmp	r4, #0
 8006890:	d01a      	beq.n	80068c8 <__d2b+0x5c>
 8006892:	4668      	mov	r0, sp
 8006894:	9400      	str	r4, [sp, #0]
 8006896:	f7ff fd35 	bl	8006304 <__lo0bits>
 800689a:	2800      	cmp	r0, #0
 800689c:	d132      	bne.n	8006904 <__d2b+0x98>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	9c01      	ldr	r4, [sp, #4]
 80068a2:	6173      	str	r3, [r6, #20]
 80068a4:	61b4      	str	r4, [r6, #24]
 80068a6:	4263      	negs	r3, r4
 80068a8:	4163      	adcs	r3, r4
 80068aa:	2402      	movs	r4, #2
 80068ac:	1ae4      	subs	r4, r4, r3
 80068ae:	6134      	str	r4, [r6, #16]
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	d014      	beq.n	80068de <__d2b+0x72>
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <__d2b+0xb0>)
 80068b6:	9908      	ldr	r1, [sp, #32]
 80068b8:	18bb      	adds	r3, r7, r2
 80068ba:	181b      	adds	r3, r3, r0
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c0:	2335      	movs	r3, #53	; 0x35
 80068c2:	1a18      	subs	r0, r3, r0
 80068c4:	6010      	str	r0, [r2, #0]
 80068c6:	e018      	b.n	80068fa <__d2b+0x8e>
 80068c8:	a801      	add	r0, sp, #4
 80068ca:	f7ff fd1b 	bl	8006304 <__lo0bits>
 80068ce:	9901      	ldr	r1, [sp, #4]
 80068d0:	2301      	movs	r3, #1
 80068d2:	6171      	str	r1, [r6, #20]
 80068d4:	6133      	str	r3, [r6, #16]
 80068d6:	3020      	adds	r0, #32
 80068d8:	2401      	movs	r4, #1
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d1ea      	bne.n	80068b4 <__d2b+0x48>
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <__d2b+0xb4>)
 80068e0:	18c0      	adds	r0, r0, r3
 80068e2:	1ce3      	adds	r3, r4, #3
 80068e4:	9908      	ldr	r1, [sp, #32]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	18f3      	adds	r3, r6, r3
 80068ea:	6008      	str	r0, [r1, #0]
 80068ec:	6858      	ldr	r0, [r3, #4]
 80068ee:	f7ff fced 	bl	80062cc <__hi0bits>
 80068f2:	0164      	lsls	r4, r4, #5
 80068f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f6:	1a24      	subs	r4, r4, r0
 80068f8:	6014      	str	r4, [r2, #0]
 80068fa:	1c30      	adds	r0, r6, #0
 80068fc:	b003      	add	sp, #12
 80068fe:	bcf0      	pop	{r4, r5, r6, r7}
 8006900:	bc02      	pop	{r1}
 8006902:	4708      	bx	r1
 8006904:	9c01      	ldr	r4, [sp, #4]
 8006906:	2320      	movs	r3, #32
 8006908:	1a1b      	subs	r3, r3, r0
 800690a:	1c21      	adds	r1, r4, #0
 800690c:	4099      	lsls	r1, r3
 800690e:	9a00      	ldr	r2, [sp, #0]
 8006910:	1c0b      	adds	r3, r1, #0
 8006912:	4313      	orrs	r3, r2
 8006914:	40c4      	lsrs	r4, r0
 8006916:	6173      	str	r3, [r6, #20]
 8006918:	9401      	str	r4, [sp, #4]
 800691a:	e7c3      	b.n	80068a4 <__d2b+0x38>
 800691c:	fffffbcd 	.word	0xfffffbcd
 8006920:	fffffbce 	.word	0xfffffbce

08006924 <__ratio>:
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	4657      	mov	r7, sl
 8006928:	464e      	mov	r6, r9
 800692a:	4645      	mov	r5, r8
 800692c:	b4e0      	push	{r5, r6, r7}
 800692e:	b084      	sub	sp, #16
 8006930:	4689      	mov	r9, r1
 8006932:	a902      	add	r1, sp, #8
 8006934:	4680      	mov	r8, r0
 8006936:	f7ff ff47 	bl	80067c8 <__b2d>
 800693a:	1c06      	adds	r6, r0, #0
 800693c:	1c0f      	adds	r7, r1, #0
 800693e:	4648      	mov	r0, r9
 8006940:	a903      	add	r1, sp, #12
 8006942:	f7ff ff41 	bl	80067c8 <__b2d>
 8006946:	1c02      	adds	r2, r0, #0
 8006948:	1c0b      	adds	r3, r1, #0
 800694a:	9802      	ldr	r0, [sp, #8]
 800694c:	9903      	ldr	r1, [sp, #12]
 800694e:	1a40      	subs	r0, r0, r1
 8006950:	4641      	mov	r1, r8
 8006952:	4682      	mov	sl, r0
 8006954:	6908      	ldr	r0, [r1, #16]
 8006956:	4684      	mov	ip, r0
 8006958:	4648      	mov	r0, r9
 800695a:	6901      	ldr	r1, [r0, #16]
 800695c:	4660      	mov	r0, ip
 800695e:	1a41      	subs	r1, r0, r1
 8006960:	0149      	lsls	r1, r1, #5
 8006962:	4451      	add	r1, sl
 8006964:	9200      	str	r2, [sp, #0]
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2900      	cmp	r1, #0
 800696a:	dd0e      	ble.n	800698a <__ratio+0x66>
 800696c:	0509      	lsls	r1, r1, #20
 800696e:	19cd      	adds	r5, r1, r7
 8006970:	1c2f      	adds	r7, r5, #0
 8006972:	1c30      	adds	r0, r6, #0
 8006974:	1c39      	adds	r1, r7, #0
 8006976:	f001 ed26 	blx	80083c4 <__aeabi_ddiv>
 800697a:	b004      	add	sp, #16
 800697c:	bc1c      	pop	{r2, r3, r4}
 800697e:	4690      	mov	r8, r2
 8006980:	4699      	mov	r9, r3
 8006982:	46a2      	mov	sl, r4
 8006984:	bcf0      	pop	{r4, r5, r6, r7}
 8006986:	bc04      	pop	{r2}
 8006988:	4710      	bx	r2
 800698a:	9b01      	ldr	r3, [sp, #4]
 800698c:	0509      	lsls	r1, r1, #20
 800698e:	1a59      	subs	r1, r3, r1
 8006990:	9101      	str	r1, [sp, #4]
 8006992:	9a00      	ldr	r2, [sp, #0]
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	e7ec      	b.n	8006972 <__ratio+0x4e>

08006998 <_mprec_log10>:
 8006998:	b510      	push	{r4, lr}
 800699a:	1c04      	adds	r4, r0, #0
 800699c:	2817      	cmp	r0, #23
 800699e:	dd0b      	ble.n	80069b8 <_mprec_log10+0x20>
 80069a0:	490a      	ldr	r1, [pc, #40]	; (80069cc <_mprec_log10+0x34>)
 80069a2:	4809      	ldr	r0, [pc, #36]	; (80069c8 <_mprec_log10+0x30>)
 80069a4:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <_mprec_log10+0x38>)
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <_mprec_log10+0x3c>)
 80069a8:	3c01      	subs	r4, #1
 80069aa:	f001 ebc4 	blx	8008134 <__aeabi_dmul>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d1f8      	bne.n	80069a4 <_mprec_log10+0xc>
 80069b2:	bc10      	pop	{r4}
 80069b4:	bc04      	pop	{r2}
 80069b6:	4710      	bx	r2
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <_mprec_log10+0x40>)
 80069ba:	00c4      	lsls	r4, r0, #3
 80069bc:	191c      	adds	r4, r3, r4
 80069be:	6920      	ldr	r0, [r4, #16]
 80069c0:	6961      	ldr	r1, [r4, #20]
 80069c2:	e7f6      	b.n	80069b2 <_mprec_log10+0x1a>
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	00000000 	.word	0x00000000
 80069cc:	3ff00000 	.word	0x3ff00000
 80069d0:	00000000 	.word	0x00000000
 80069d4:	40240000 	.word	0x40240000
 80069d8:	08008c68 	.word	0x08008c68

080069dc <__copybits>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	6915      	ldr	r5, [r2, #16]
 80069e0:	1e4e      	subs	r6, r1, #1
 80069e2:	3504      	adds	r5, #4
 80069e4:	1176      	asrs	r6, r6, #5
 80069e6:	00ad      	lsls	r5, r5, #2
 80069e8:	3601      	adds	r6, #1
 80069ea:	1c13      	adds	r3, r2, #0
 80069ec:	1955      	adds	r5, r2, r5
 80069ee:	00b6      	lsls	r6, r6, #2
 80069f0:	3314      	adds	r3, #20
 80069f2:	3504      	adds	r5, #4
 80069f4:	1986      	adds	r6, r0, r6
 80069f6:	42ab      	cmp	r3, r5
 80069f8:	d20a      	bcs.n	8006a10 <__copybits+0x34>
 80069fa:	1c01      	adds	r1, r0, #0
 80069fc:	cb10      	ldmia	r3!, {r4}
 80069fe:	c110      	stmia	r1!, {r4}
 8006a00:	429d      	cmp	r5, r3
 8006a02:	d8fb      	bhi.n	80069fc <__copybits+0x20>
 8006a04:	1aab      	subs	r3, r5, r2
 8006a06:	3b15      	subs	r3, #21
 8006a08:	089b      	lsrs	r3, r3, #2
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	18c0      	adds	r0, r0, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	4286      	cmp	r6, r0
 8006a14:	d902      	bls.n	8006a1c <__copybits+0x40>
 8006a16:	c008      	stmia	r0!, {r3}
 8006a18:	4286      	cmp	r6, r0
 8006a1a:	d8fc      	bhi.n	8006a16 <__copybits+0x3a>
 8006a1c:	bc70      	pop	{r4, r5, r6}
 8006a1e:	bc01      	pop	{r0}
 8006a20:	4700      	bx	r0
 8006a22:	46c0      	nop			; (mov r8, r8)

08006a24 <__any_on>:
 8006a24:	1c03      	adds	r3, r0, #0
 8006a26:	1c02      	adds	r2, r0, #0
 8006a28:	6900      	ldr	r0, [r0, #16]
 8006a2a:	b530      	push	{r4, r5, lr}
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	114c      	asrs	r4, r1, #5
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	da11      	bge.n	8006a58 <__any_on+0x34>
 8006a34:	1c04      	adds	r4, r0, #0
 8006a36:	1d20      	adds	r0, r4, #4
 8006a38:	0080      	lsls	r0, r0, #2
 8006a3a:	1810      	adds	r0, r2, r0
 8006a3c:	1d02      	adds	r2, r0, #4
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d303      	bcc.n	8006a4a <__any_on+0x26>
 8006a42:	e01a      	b.n	8006a7a <__any_on+0x56>
 8006a44:	4283      	cmp	r3, r0
 8006a46:	d218      	bcs.n	8006a7a <__any_on+0x56>
 8006a48:	3804      	subs	r0, #4
 8006a4a:	6802      	ldr	r2, [r0, #0]
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d0f9      	beq.n	8006a44 <__any_on+0x20>
 8006a50:	2001      	movs	r0, #1
 8006a52:	bc30      	pop	{r4, r5}
 8006a54:	bc02      	pop	{r1}
 8006a56:	4708      	bx	r1
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	ddec      	ble.n	8006a36 <__any_on+0x12>
 8006a5c:	201f      	movs	r0, #31
 8006a5e:	4001      	ands	r1, r0
 8006a60:	d0e9      	beq.n	8006a36 <__any_on+0x12>
 8006a62:	1d20      	adds	r0, r4, #4
 8006a64:	0080      	lsls	r0, r0, #2
 8006a66:	1810      	adds	r0, r2, r0
 8006a68:	6845      	ldr	r5, [r0, #4]
 8006a6a:	1c28      	adds	r0, r5, #0
 8006a6c:	40c8      	lsrs	r0, r1
 8006a6e:	4088      	lsls	r0, r1
 8006a70:	1c01      	adds	r1, r0, #0
 8006a72:	2001      	movs	r0, #1
 8006a74:	42a9      	cmp	r1, r5
 8006a76:	d1ec      	bne.n	8006a52 <__any_on+0x2e>
 8006a78:	e7dd      	b.n	8006a36 <__any_on+0x12>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e7e9      	b.n	8006a52 <__any_on+0x2e>
 8006a7e:	46c0      	nop			; (mov r8, r8)

08006a80 <__fpclassifyd>:
 8006a80:	1c0b      	adds	r3, r1, #0
 8006a82:	1c01      	adds	r1, r0, #0
 8006a84:	1c02      	adds	r2, r0, #0
 8006a86:	b530      	push	{r4, r5, lr}
 8006a88:	4319      	orrs	r1, r3
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d102      	bne.n	8006a96 <__fpclassifyd+0x16>
 8006a90:	bc30      	pop	{r4, r5}
 8006a92:	bc02      	pop	{r1}
 8006a94:	4708      	bx	r1
 8006a96:	4251      	negs	r1, r2
 8006a98:	4151      	adcs	r1, r2
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d004      	beq.n	8006aa8 <__fpclassifyd+0x28>
 8006a9e:	2580      	movs	r5, #128	; 0x80
 8006aa0:	062d      	lsls	r5, r5, #24
 8006aa2:	195c      	adds	r4, r3, r5
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d0f3      	beq.n	8006a90 <__fpclassifyd+0x10>
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <__fpclassifyd+0x4c>)
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	189c      	adds	r4, r3, r2
 8006ab0:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <__fpclassifyd+0x50>)
 8006ab2:	2004      	movs	r0, #4
 8006ab4:	4294      	cmp	r4, r2
 8006ab6:	d9eb      	bls.n	8006a90 <__fpclassifyd+0x10>
 8006ab8:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <__fpclassifyd+0x54>)
 8006aba:	2003      	movs	r0, #3
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d9e7      	bls.n	8006a90 <__fpclassifyd+0x10>
 8006ac0:	4d05      	ldr	r5, [pc, #20]	; (8006ad8 <__fpclassifyd+0x58>)
 8006ac2:	1958      	adds	r0, r3, r5
 8006ac4:	4243      	negs	r3, r0
 8006ac6:	4158      	adcs	r0, r3
 8006ac8:	4008      	ands	r0, r1
 8006aca:	e7e1      	b.n	8006a90 <__fpclassifyd+0x10>
 8006acc:	fff00000 	.word	0xfff00000
 8006ad0:	7fdfffff 	.word	0x7fdfffff
 8006ad4:	000fffff 	.word	0x000fffff
 8006ad8:	80100000 	.word	0x80100000

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4c08      	ldr	r4, [pc, #32]	; (8006b00 <_sbrk_r+0x24>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	1c05      	adds	r5, r0, #0
 8006ae4:	1c08      	adds	r0, r1, #0
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7fc fa8e 	bl	8003008 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d002      	beq.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	bc38      	pop	{r3, r4, r5}
 8006af2:	bc02      	pop	{r1}
 8006af4:	4708      	bx	r1
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f9      	beq.n	8006af0 <_sbrk_r+0x14>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	e7f7      	b.n	8006af0 <_sbrk_r+0x14>
 8006b00:	2000168c 	.word	0x2000168c

08006b04 <strcmp>:
 8006b04:	7802      	ldrb	r2, [r0, #0]
 8006b06:	780b      	ldrb	r3, [r1, #0]
 8006b08:	3001      	adds	r0, #1
 8006b0a:	3101      	adds	r1, #1
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d001      	beq.n	8006b14 <strcmp+0x10>
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d0f7      	beq.n	8006b04 <strcmp>
 8006b14:	1ad0      	subs	r0, r2, r3
 8006b16:	4770      	bx	lr

08006b18 <strlen>:
 8006b18:	2300      	movs	r3, #0
 8006b1a:	5cc2      	ldrb	r2, [r0, r3]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1fb      	bne.n	8006b1a <strlen+0x2>
 8006b22:	1e58      	subs	r0, r3, #1
 8006b24:	4770      	bx	lr
 8006b26:	46c0      	nop			; (mov r8, r8)

08006b28 <__ssprint_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	465f      	mov	r7, fp
 8006b2c:	464d      	mov	r5, r9
 8006b2e:	4644      	mov	r4, r8
 8006b30:	4656      	mov	r6, sl
 8006b32:	b4f0      	push	{r4, r5, r6, r7}
 8006b34:	6893      	ldr	r3, [r2, #8]
 8006b36:	b083      	sub	sp, #12
 8006b38:	9001      	str	r0, [sp, #4]
 8006b3a:	1c0d      	adds	r5, r1, #0
 8006b3c:	4690      	mov	r8, r2
 8006b3e:	6817      	ldr	r7, [r2, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d100      	bne.n	8006b46 <__ssprint_r+0x1e>
 8006b44:	e07e      	b.n	8006c44 <__ssprint_r+0x11c>
 8006b46:	6808      	ldr	r0, [r1, #0]
 8006b48:	2400      	movs	r4, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	68ab      	ldr	r3, [r5, #8]
 8006b50:	2c00      	cmp	r4, #0
 8006b52:	d048      	beq.n	8006be6 <__ssprint_r+0xbe>
 8006b54:	1c1e      	adds	r6, r3, #0
 8006b56:	469a      	mov	sl, r3
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d34e      	bcc.n	8006bfa <__ssprint_r+0xd2>
 8006b5c:	2290      	movs	r2, #144	; 0x90
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	00d2      	lsls	r2, r2, #3
 8006b62:	4213      	tst	r3, r2
 8006b64:	d02e      	beq.n	8006bc4 <__ssprint_r+0x9c>
 8006b66:	6929      	ldr	r1, [r5, #16]
 8006b68:	696a      	ldr	r2, [r5, #20]
 8006b6a:	1a40      	subs	r0, r0, r1
 8006b6c:	4683      	mov	fp, r0
 8006b6e:	0050      	lsls	r0, r2, #1
 8006b70:	1882      	adds	r2, r0, r2
 8006b72:	0fd0      	lsrs	r0, r2, #31
 8006b74:	1882      	adds	r2, r0, r2
 8006b76:	1c60      	adds	r0, r4, #1
 8006b78:	1052      	asrs	r2, r2, #1
 8006b7a:	4458      	add	r0, fp
 8006b7c:	4692      	mov	sl, r2
 8006b7e:	4282      	cmp	r2, r0
 8006b80:	d201      	bcs.n	8006b86 <__ssprint_r+0x5e>
 8006b82:	4682      	mov	sl, r0
 8006b84:	1c02      	adds	r2, r0, #0
 8006b86:	2080      	movs	r0, #128	; 0x80
 8006b88:	00c0      	lsls	r0, r0, #3
 8006b8a:	4203      	tst	r3, r0
 8006b8c:	d038      	beq.n	8006c00 <__ssprint_r+0xd8>
 8006b8e:	9801      	ldr	r0, [sp, #4]
 8006b90:	1c11      	adds	r1, r2, #0
 8006b92:	f7fe ffa5 	bl	8005ae0 <_malloc_r>
 8006b96:	1e06      	subs	r6, r0, #0
 8006b98:	d057      	beq.n	8006c4a <__ssprint_r+0x122>
 8006b9a:	465a      	mov	r2, fp
 8006b9c:	1c30      	adds	r0, r6, #0
 8006b9e:	6929      	ldr	r1, [r5, #16]
 8006ba0:	f7ff fa72 	bl	8006088 <memcpy>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <__ssprint_r+0x12c>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	4313      	orrs	r3, r2
 8006bae:	81ab      	strh	r3, [r5, #12]
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	1870      	adds	r0, r6, r1
 8006bb6:	1a53      	subs	r3, r2, r1
 8006bb8:	6028      	str	r0, [r5, #0]
 8006bba:	616a      	str	r2, [r5, #20]
 8006bbc:	60ab      	str	r3, [r5, #8]
 8006bbe:	612e      	str	r6, [r5, #16]
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	1c26      	adds	r6, r4, #0
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	f000 fcde 	bl	8007588 <memmove>
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	68ab      	ldr	r3, [r5, #8]
 8006bd2:	6892      	ldr	r2, [r2, #8]
 8006bd4:	1c08      	adds	r0, r1, #0
 8006bd6:	1b9b      	subs	r3, r3, r6
 8006bd8:	4450      	add	r0, sl
 8006bda:	1b14      	subs	r4, r2, r4
 8006bdc:	4641      	mov	r1, r8
 8006bde:	60ab      	str	r3, [r5, #8]
 8006be0:	6028      	str	r0, [r5, #0]
 8006be2:	608c      	str	r4, [r1, #8]
 8006be4:	d023      	beq.n	8006c2e <__ssprint_r+0x106>
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	687c      	ldr	r4, [r7, #4]
 8006bea:	4689      	mov	r9, r1
 8006bec:	3708      	adds	r7, #8
 8006bee:	2c00      	cmp	r4, #0
 8006bf0:	d0f9      	beq.n	8006be6 <__ssprint_r+0xbe>
 8006bf2:	1c1e      	adds	r6, r3, #0
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d2b0      	bcs.n	8006b5c <__ssprint_r+0x34>
 8006bfa:	1c26      	adds	r6, r4, #0
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	e7e1      	b.n	8006bc4 <__ssprint_r+0x9c>
 8006c00:	9801      	ldr	r0, [sp, #4]
 8006c02:	f000 fd5d 	bl	80076c0 <_realloc_r>
 8006c06:	1e06      	subs	r6, r0, #0
 8006c08:	d1d2      	bne.n	8006bb0 <__ssprint_r+0x88>
 8006c0a:	9801      	ldr	r0, [sp, #4]
 8006c0c:	6929      	ldr	r1, [r5, #16]
 8006c0e:	f7fe fe4d 	bl	80058ac <_free_r>
 8006c12:	9801      	ldr	r0, [sp, #4]
 8006c14:	230c      	movs	r3, #12
 8006c16:	6003      	str	r3, [r0, #0]
 8006c18:	89aa      	ldrh	r2, [r5, #12]
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	81ab      	strh	r3, [r5, #12]
 8006c20:	4640      	mov	r0, r8
 8006c22:	2300      	movs	r3, #0
 8006c24:	6083      	str	r3, [r0, #8]
 8006c26:	6043      	str	r3, [r0, #4]
 8006c28:	2001      	movs	r0, #1
 8006c2a:	4240      	negs	r0, r0
 8006c2c:	e001      	b.n	8006c32 <__ssprint_r+0x10a>
 8006c2e:	604c      	str	r4, [r1, #4]
 8006c30:	2000      	movs	r0, #0
 8006c32:	b003      	add	sp, #12
 8006c34:	bc3c      	pop	{r2, r3, r4, r5}
 8006c36:	4690      	mov	r8, r2
 8006c38:	4699      	mov	r9, r3
 8006c3a:	46a2      	mov	sl, r4
 8006c3c:	46ab      	mov	fp, r5
 8006c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8006c40:	bc02      	pop	{r1}
 8006c42:	4708      	bx	r1
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	2000      	movs	r0, #0
 8006c48:	e7f3      	b.n	8006c32 <__ssprint_r+0x10a>
 8006c4a:	9901      	ldr	r1, [sp, #4]
 8006c4c:	230c      	movs	r3, #12
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	e7e2      	b.n	8006c18 <__ssprint_r+0xf0>
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	fffffb7f 	.word	0xfffffb7f

08006c58 <_svfiprintf_r>:
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	465f      	mov	r7, fp
 8006c5c:	4644      	mov	r4, r8
 8006c5e:	4656      	mov	r6, sl
 8006c60:	464d      	mov	r5, r9
 8006c62:	b4f0      	push	{r4, r5, r6, r7}
 8006c64:	b0af      	sub	sp, #188	; 0xbc
 8006c66:	9005      	str	r0, [sp, #20]
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	898b      	ldrh	r3, [r1, #12]
 8006c6c:	468b      	mov	fp, r1
 8006c6e:	1c14      	adds	r4, r2, #0
 8006c70:	0618      	lsls	r0, r3, #24
 8006c72:	d504      	bpl.n	8006c7e <_svfiprintf_r+0x26>
 8006c74:	6909      	ldr	r1, [r1, #16]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d101      	bne.n	8006c7e <_svfiprintf_r+0x26>
 8006c7a:	f000 fc17 	bl	80074ac <_svfiprintf_r+0x854>
 8006c7e:	46a1      	mov	r9, r4
 8006c80:	2400      	movs	r4, #0
 8006c82:	940c      	str	r4, [sp, #48]	; 0x30
 8006c84:	9406      	str	r4, [sp, #24]
 8006c86:	466c      	mov	r4, sp
 8006c88:	a91e      	add	r1, sp, #120	; 0x78
 8006c8a:	3477      	adds	r4, #119	; 0x77
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	9111      	str	r1, [sp, #68]	; 0x44
 8006c92:	1c0f      	adds	r7, r1, #0
 8006c94:	1b09      	subs	r1, r1, r4
 8006c96:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c98:	9312      	str	r3, [sp, #72]	; 0x48
 8006c9a:	9401      	str	r4, [sp, #4]
 8006c9c:	910d      	str	r1, [sp, #52]	; 0x34
 8006c9e:	464d      	mov	r5, r9
 8006ca0:	782b      	ldrb	r3, [r5, #0]
 8006ca2:	1c2c      	adds	r4, r5, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d019      	beq.n	8006cdc <_svfiprintf_r+0x84>
 8006ca8:	2b25      	cmp	r3, #37	; 0x25
 8006caa:	d102      	bne.n	8006cb2 <_svfiprintf_r+0x5a>
 8006cac:	e016      	b.n	8006cdc <_svfiprintf_r+0x84>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <_svfiprintf_r+0x62>
 8006cb2:	3401      	adds	r4, #1
 8006cb4:	7823      	ldrb	r3, [r4, #0]
 8006cb6:	2b25      	cmp	r3, #37	; 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_svfiprintf_r+0x56>
 8006cba:	1b66      	subs	r6, r4, r5
 8006cbc:	d00e      	beq.n	8006cdc <_svfiprintf_r+0x84>
 8006cbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006cc0:	1983      	adds	r3, r0, r6
 8006cc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	603d      	str	r5, [r7, #0]
 8006cca:	607e      	str	r6, [r7, #4]
 8006ccc:	9312      	str	r3, [sp, #72]	; 0x48
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	dd00      	ble.n	8006cd4 <_svfiprintf_r+0x7c>
 8006cd2:	e320      	b.n	8007316 <_svfiprintf_r+0x6be>
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	9906      	ldr	r1, [sp, #24]
 8006cd8:	1989      	adds	r1, r1, r6
 8006cda:	9106      	str	r1, [sp, #24]
 8006cdc:	7823      	ldrb	r3, [r4, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d100      	bne.n	8006ce4 <_svfiprintf_r+0x8c>
 8006ce2:	e2ef      	b.n	80072c4 <_svfiprintf_r+0x66c>
 8006ce4:	1c65      	adds	r5, r4, #1
 8006ce6:	2401      	movs	r4, #1
 8006ce8:	4264      	negs	r4, r4
 8006cea:	223f      	movs	r2, #63	; 0x3f
 8006cec:	2300      	movs	r3, #0
 8006cee:	446a      	add	r2, sp
 8006cf0:	46a1      	mov	r9, r4
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	7013      	strb	r3, [r2, #0]
 8006cf6:	9407      	str	r4, [sp, #28]
 8006cf8:	2280      	movs	r2, #128	; 0x80
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	9402      	str	r4, [sp, #8]
 8006cfe:	49cd      	ldr	r1, [pc, #820]	; (8007034 <_svfiprintf_r+0x3dc>)
 8006d00:	2000      	movs	r0, #0
 8006d02:	2610      	movs	r6, #16
 8006d04:	4692      	mov	sl, r2
 8006d06:	469c      	mov	ip, r3
 8006d08:	782b      	ldrb	r3, [r5, #0]
 8006d0a:	3501      	adds	r5, #1
 8006d0c:	1c1a      	adds	r2, r3, #0
 8006d0e:	3a20      	subs	r2, #32
 8006d10:	2a58      	cmp	r2, #88	; 0x58
 8006d12:	d800      	bhi.n	8006d16 <_svfiprintf_r+0xbe>
 8006d14:	e118      	b.n	8006f48 <_svfiprintf_r+0x2f0>
 8006d16:	213f      	movs	r1, #63	; 0x3f
 8006d18:	4469      	add	r1, sp
 8006d1a:	7008      	strb	r0, [r1, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d100      	bne.n	8006d22 <_svfiprintf_r+0xca>
 8006d20:	e2d0      	b.n	80072c4 <_svfiprintf_r+0x66c>
 8006d22:	aa14      	add	r2, sp, #80	; 0x50
 8006d24:	2401      	movs	r4, #1
 8006d26:	7013      	strb	r3, [r2, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	700b      	strb	r3, [r1, #0]
 8006d2c:	9403      	str	r4, [sp, #12]
 8006d2e:	9404      	str	r4, [sp, #16]
 8006d30:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d32:	2400      	movs	r4, #0
 8006d34:	9409      	str	r4, [sp, #36]	; 0x24
 8006d36:	9c02      	ldr	r4, [sp, #8]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	401c      	ands	r4, r3
 8006d3c:	940a      	str	r4, [sp, #40]	; 0x28
 8006d3e:	d002      	beq.n	8006d46 <_svfiprintf_r+0xee>
 8006d40:	9c03      	ldr	r4, [sp, #12]
 8006d42:	3402      	adds	r4, #2
 8006d44:	9403      	str	r4, [sp, #12]
 8006d46:	9c02      	ldr	r4, [sp, #8]
 8006d48:	2384      	movs	r3, #132	; 0x84
 8006d4a:	401c      	ands	r4, r3
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	d138      	bne.n	8006dc2 <_svfiprintf_r+0x16a>
 8006d50:	9807      	ldr	r0, [sp, #28]
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	1a44      	subs	r4, r0, r1
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	dd33      	ble.n	8006dc2 <_svfiprintf_r+0x16a>
 8006d5a:	4eb7      	ldr	r6, [pc, #732]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006d5c:	2c10      	cmp	r4, #16
 8006d5e:	dd24      	ble.n	8006daa <_svfiprintf_r+0x152>
 8006d60:	2210      	movs	r2, #16
 8006d62:	1c3b      	adds	r3, r7, #0
 8006d64:	4691      	mov	r9, r2
 8006d66:	465f      	mov	r7, fp
 8006d68:	46ab      	mov	fp, r5
 8006d6a:	9d05      	ldr	r5, [sp, #20]
 8006d6c:	e003      	b.n	8006d76 <_svfiprintf_r+0x11e>
 8006d6e:	3c10      	subs	r4, #16
 8006d70:	3308      	adds	r3, #8
 8006d72:	2c10      	cmp	r4, #16
 8006d74:	dd16      	ble.n	8006da4 <_svfiprintf_r+0x14c>
 8006d76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d78:	3210      	adds	r2, #16
 8006d7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d7e:	4648      	mov	r0, r9
 8006d80:	3201      	adds	r2, #1
 8006d82:	601e      	str	r6, [r3, #0]
 8006d84:	6058      	str	r0, [r3, #4]
 8006d86:	9212      	str	r2, [sp, #72]	; 0x48
 8006d88:	2a07      	cmp	r2, #7
 8006d8a:	ddf0      	ble.n	8006d6e <_svfiprintf_r+0x116>
 8006d8c:	1c28      	adds	r0, r5, #0
 8006d8e:	1c39      	adds	r1, r7, #0
 8006d90:	aa11      	add	r2, sp, #68	; 0x44
 8006d92:	f7ff fec9 	bl	8006b28 <__ssprint_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d000      	beq.n	8006d9c <_svfiprintf_r+0x144>
 8006d9a:	e32f      	b.n	80073fc <_svfiprintf_r+0x7a4>
 8006d9c:	3c10      	subs	r4, #16
 8006d9e:	4643      	mov	r3, r8
 8006da0:	2c10      	cmp	r4, #16
 8006da2:	dce8      	bgt.n	8006d76 <_svfiprintf_r+0x11e>
 8006da4:	465d      	mov	r5, fp
 8006da6:	46bb      	mov	fp, r7
 8006da8:	1c1f      	adds	r7, r3, #0
 8006daa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dae:	607c      	str	r4, [r7, #4]
 8006db0:	3301      	adds	r3, #1
 8006db2:	190c      	adds	r4, r1, r4
 8006db4:	603e      	str	r6, [r7, #0]
 8006db6:	9413      	str	r4, [sp, #76]	; 0x4c
 8006db8:	9312      	str	r3, [sp, #72]	; 0x48
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	dd00      	ble.n	8006dc0 <_svfiprintf_r+0x168>
 8006dbe:	e313      	b.n	80073e8 <_svfiprintf_r+0x790>
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	223f      	movs	r2, #63	; 0x3f
 8006dc4:	446a      	add	r2, sp
 8006dc6:	7813      	ldrb	r3, [r2, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00c      	beq.n	8006de6 <_svfiprintf_r+0x18e>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd8:	3301      	adds	r3, #1
 8006dda:	603a      	str	r2, [r7, #0]
 8006ddc:	9312      	str	r3, [sp, #72]	; 0x48
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	dd00      	ble.n	8006de4 <_svfiprintf_r+0x18c>
 8006de2:	e2aa      	b.n	800733a <_svfiprintf_r+0x6e2>
 8006de4:	3708      	adds	r7, #8
 8006de6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006de8:	2c00      	cmp	r4, #0
 8006dea:	d00d      	beq.n	8006e08 <_svfiprintf_r+0x1b0>
 8006dec:	ab10      	add	r3, sp, #64	; 0x40
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	2302      	movs	r3, #2
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df6:	3302      	adds	r3, #2
 8006df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	9312      	str	r3, [sp, #72]	; 0x48
 8006e00:	2b07      	cmp	r3, #7
 8006e02:	dd00      	ble.n	8006e06 <_svfiprintf_r+0x1ae>
 8006e04:	e2a2      	b.n	800734c <_svfiprintf_r+0x6f4>
 8006e06:	3708      	adds	r7, #8
 8006e08:	4650      	mov	r0, sl
 8006e0a:	2880      	cmp	r0, #128	; 0x80
 8006e0c:	d100      	bne.n	8006e10 <_svfiprintf_r+0x1b8>
 8006e0e:	e20f      	b.n	8007230 <_svfiprintf_r+0x5d8>
 8006e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e12:	9904      	ldr	r1, [sp, #16]
 8006e14:	1a44      	subs	r4, r0, r1
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	dd3a      	ble.n	8006e90 <_svfiprintf_r+0x238>
 8006e1a:	4e87      	ldr	r6, [pc, #540]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006e1c:	2c10      	cmp	r4, #16
 8006e1e:	dd2a      	ble.n	8006e76 <_svfiprintf_r+0x21e>
 8006e20:	2210      	movs	r2, #16
 8006e22:	1992      	adds	r2, r2, r6
 8006e24:	2310      	movs	r3, #16
 8006e26:	4699      	mov	r9, r3
 8006e28:	4692      	mov	sl, r2
 8006e2a:	1c3b      	adds	r3, r7, #0
 8006e2c:	1c37      	adds	r7, r6, #0
 8006e2e:	465e      	mov	r6, fp
 8006e30:	46ab      	mov	fp, r5
 8006e32:	9d05      	ldr	r5, [sp, #20]
 8006e34:	e003      	b.n	8006e3e <_svfiprintf_r+0x1e6>
 8006e36:	3c10      	subs	r4, #16
 8006e38:	3308      	adds	r3, #8
 8006e3a:	2c10      	cmp	r4, #16
 8006e3c:	dd17      	ble.n	8006e6e <_svfiprintf_r+0x216>
 8006e3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e40:	3210      	adds	r2, #16
 8006e42:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e46:	4650      	mov	r0, sl
 8006e48:	4649      	mov	r1, r9
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	6018      	str	r0, [r3, #0]
 8006e4e:	6059      	str	r1, [r3, #4]
 8006e50:	9212      	str	r2, [sp, #72]	; 0x48
 8006e52:	2a07      	cmp	r2, #7
 8006e54:	ddef      	ble.n	8006e36 <_svfiprintf_r+0x1de>
 8006e56:	1c28      	adds	r0, r5, #0
 8006e58:	1c31      	adds	r1, r6, #0
 8006e5a:	aa11      	add	r2, sp, #68	; 0x44
 8006e5c:	f7ff fe64 	bl	8006b28 <__ssprint_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d000      	beq.n	8006e66 <_svfiprintf_r+0x20e>
 8006e64:	e255      	b.n	8007312 <_svfiprintf_r+0x6ba>
 8006e66:	3c10      	subs	r4, #16
 8006e68:	4643      	mov	r3, r8
 8006e6a:	2c10      	cmp	r4, #16
 8006e6c:	dce7      	bgt.n	8006e3e <_svfiprintf_r+0x1e6>
 8006e6e:	465d      	mov	r5, fp
 8006e70:	46b3      	mov	fp, r6
 8006e72:	1c3e      	adds	r6, r7, #0
 8006e74:	1c1f      	adds	r7, r3, #0
 8006e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7a:	3610      	adds	r6, #16
 8006e7c:	607c      	str	r4, [r7, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	1914      	adds	r4, r2, r4
 8006e82:	603e      	str	r6, [r7, #0]
 8006e84:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e86:	9312      	str	r3, [sp, #72]	; 0x48
 8006e88:	2b07      	cmp	r3, #7
 8006e8a:	dd00      	ble.n	8006e8e <_svfiprintf_r+0x236>
 8006e8c:	e24c      	b.n	8007328 <_svfiprintf_r+0x6d0>
 8006e8e:	3708      	adds	r7, #8
 8006e90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006e92:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006e94:	603c      	str	r4, [r7, #0]
 8006e96:	9c04      	ldr	r4, [sp, #16]
 8006e98:	1903      	adds	r3, r0, r4
 8006e9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	607c      	str	r4, [r7, #4]
 8006ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	dd00      	ble.n	8006eaa <_svfiprintf_r+0x252>
 8006ea8:	e203      	b.n	80072b2 <_svfiprintf_r+0x65a>
 8006eaa:	1c3b      	adds	r3, r7, #0
 8006eac:	3308      	adds	r3, #8
 8006eae:	9c02      	ldr	r4, [sp, #8]
 8006eb0:	0764      	lsls	r4, r4, #29
 8006eb2:	d539      	bpl.n	8006f28 <_svfiprintf_r+0x2d0>
 8006eb4:	9807      	ldr	r0, [sp, #28]
 8006eb6:	9903      	ldr	r1, [sp, #12]
 8006eb8:	1a44      	subs	r4, r0, r1
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	dd34      	ble.n	8006f28 <_svfiprintf_r+0x2d0>
 8006ebe:	4e5e      	ldr	r6, [pc, #376]	; (8007038 <_svfiprintf_r+0x3e0>)
 8006ec0:	2c10      	cmp	r4, #16
 8006ec2:	dd1f      	ble.n	8006f04 <_svfiprintf_r+0x2ac>
 8006ec4:	46a9      	mov	r9, r5
 8006ec6:	2710      	movs	r7, #16
 8006ec8:	465d      	mov	r5, fp
 8006eca:	e003      	b.n	8006ed4 <_svfiprintf_r+0x27c>
 8006ecc:	3c10      	subs	r4, #16
 8006ece:	3308      	adds	r3, #8
 8006ed0:	2c10      	cmp	r4, #16
 8006ed2:	dd15      	ble.n	8006f00 <_svfiprintf_r+0x2a8>
 8006ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ed6:	3210      	adds	r2, #16
 8006ed8:	9213      	str	r2, [sp, #76]	; 0x4c
 8006eda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006edc:	3201      	adds	r2, #1
 8006ede:	601e      	str	r6, [r3, #0]
 8006ee0:	605f      	str	r7, [r3, #4]
 8006ee2:	9212      	str	r2, [sp, #72]	; 0x48
 8006ee4:	2a07      	cmp	r2, #7
 8006ee6:	ddf1      	ble.n	8006ecc <_svfiprintf_r+0x274>
 8006ee8:	9805      	ldr	r0, [sp, #20]
 8006eea:	1c29      	adds	r1, r5, #0
 8006eec:	aa11      	add	r2, sp, #68	; 0x44
 8006eee:	f7ff fe1b 	bl	8006b28 <__ssprint_r>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d000      	beq.n	8006ef8 <_svfiprintf_r+0x2a0>
 8006ef6:	e2c4      	b.n	8007482 <_svfiprintf_r+0x82a>
 8006ef8:	3c10      	subs	r4, #16
 8006efa:	4643      	mov	r3, r8
 8006efc:	2c10      	cmp	r4, #16
 8006efe:	dce9      	bgt.n	8006ed4 <_svfiprintf_r+0x27c>
 8006f00:	46ab      	mov	fp, r5
 8006f02:	464d      	mov	r5, r9
 8006f04:	605c      	str	r4, [r3, #4]
 8006f06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f08:	601e      	str	r6, [r3, #0]
 8006f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f0c:	18a4      	adds	r4, r4, r2
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9413      	str	r4, [sp, #76]	; 0x4c
 8006f12:	9312      	str	r3, [sp, #72]	; 0x48
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	dd08      	ble.n	8006f2a <_svfiprintf_r+0x2d2>
 8006f18:	9805      	ldr	r0, [sp, #20]
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	aa11      	add	r2, sp, #68	; 0x44
 8006f1e:	f7ff fe03 	bl	8006b28 <__ssprint_r>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d000      	beq.n	8006f28 <_svfiprintf_r+0x2d0>
 8006f26:	e1d5      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8006f28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	9807      	ldr	r0, [sp, #28]
 8006f2e:	4283      	cmp	r3, r0
 8006f30:	da00      	bge.n	8006f34 <_svfiprintf_r+0x2dc>
 8006f32:	1c03      	adds	r3, r0, #0
 8006f34:	9906      	ldr	r1, [sp, #24]
 8006f36:	18c9      	adds	r1, r1, r3
 8006f38:	9106      	str	r1, [sp, #24]
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	d000      	beq.n	8006f40 <_svfiprintf_r+0x2e8>
 8006f3e:	e1da      	b.n	80072f6 <_svfiprintf_r+0x69e>
 8006f40:	2300      	movs	r3, #0
 8006f42:	9312      	str	r3, [sp, #72]	; 0x48
 8006f44:	4647      	mov	r7, r8
 8006f46:	e6ab      	b.n	8006ca0 <_svfiprintf_r+0x48>
 8006f48:	0092      	lsls	r2, r2, #2
 8006f4a:	588a      	ldr	r2, [r1, r2]
 8006f4c:	4697      	mov	pc, r2
 8006f4e:	9c02      	ldr	r4, [sp, #8]
 8006f50:	4334      	orrs	r4, r6
 8006f52:	9402      	str	r4, [sp, #8]
 8006f54:	e6d8      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8006f56:	9c02      	ldr	r4, [sp, #8]
 8006f58:	2310      	movs	r3, #16
 8006f5a:	431c      	orrs	r4, r3
 8006f5c:	9402      	str	r4, [sp, #8]
 8006f5e:	9c02      	ldr	r4, [sp, #8]
 8006f60:	06e4      	lsls	r4, r4, #27
 8006f62:	d403      	bmi.n	8006f6c <_svfiprintf_r+0x314>
 8006f64:	9c02      	ldr	r4, [sp, #8]
 8006f66:	0664      	lsls	r4, r4, #25
 8006f68:	d500      	bpl.n	8006f6c <_svfiprintf_r+0x314>
 8006f6a:	e25d      	b.n	8007428 <_svfiprintf_r+0x7d0>
 8006f6c:	9c08      	ldr	r4, [sp, #32]
 8006f6e:	6826      	ldr	r6, [r4, #0]
 8006f70:	1c31      	adds	r1, r6, #0
 8006f72:	3404      	adds	r4, #4
 8006f74:	1e4b      	subs	r3, r1, #1
 8006f76:	4199      	sbcs	r1, r3
 8006f78:	9408      	str	r4, [sp, #32]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e012      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 8006f7e:	9c02      	ldr	r4, [sp, #8]
 8006f80:	2310      	movs	r3, #16
 8006f82:	431c      	orrs	r4, r3
 8006f84:	9402      	str	r4, [sp, #8]
 8006f86:	9c02      	ldr	r4, [sp, #8]
 8006f88:	06e4      	lsls	r4, r4, #27
 8006f8a:	d403      	bmi.n	8006f94 <_svfiprintf_r+0x33c>
 8006f8c:	9c02      	ldr	r4, [sp, #8]
 8006f8e:	0664      	lsls	r4, r4, #25
 8006f90:	d500      	bpl.n	8006f94 <_svfiprintf_r+0x33c>
 8006f92:	e24f      	b.n	8007434 <_svfiprintf_r+0x7dc>
 8006f94:	9c08      	ldr	r4, [sp, #32]
 8006f96:	6826      	ldr	r6, [r4, #0]
 8006f98:	3404      	adds	r4, #4
 8006f9a:	1c31      	adds	r1, r6, #0
 8006f9c:	9408      	str	r4, [sp, #32]
 8006f9e:	1e4b      	subs	r3, r1, #1
 8006fa0:	4199      	sbcs	r1, r3
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	203f      	movs	r0, #63	; 0x3f
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4468      	add	r0, sp
 8006faa:	7002      	strb	r2, [r0, #0]
 8006fac:	2400      	movs	r4, #0
 8006fae:	464a      	mov	r2, r9
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	db03      	blt.n	8006fbc <_svfiprintf_r+0x364>
 8006fb4:	9802      	ldr	r0, [sp, #8]
 8006fb6:	2280      	movs	r2, #128	; 0x80
 8006fb8:	4390      	bics	r0, r2
 8006fba:	9002      	str	r0, [sp, #8]
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d102      	bne.n	8006fc8 <_svfiprintf_r+0x370>
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d100      	bne.n	8006fc8 <_svfiprintf_r+0x370>
 8006fc6:	e117      	b.n	80071f8 <_svfiprintf_r+0x5a0>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d100      	bne.n	8006fce <_svfiprintf_r+0x376>
 8006fcc:	e1de      	b.n	800738c <_svfiprintf_r+0x734>
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d100      	bne.n	8006fd4 <_svfiprintf_r+0x37c>
 8006fd2:	e1c9      	b.n	8007368 <_svfiprintf_r+0x710>
 8006fd4:	466b      	mov	r3, sp
 8006fd6:	3377      	adds	r3, #119	; 0x77
 8006fd8:	2107      	movs	r1, #7
 8006fda:	1c0a      	adds	r2, r1, #0
 8006fdc:	4032      	ands	r2, r6
 8006fde:	3230      	adds	r2, #48	; 0x30
 8006fe0:	1c18      	adds	r0, r3, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	08f6      	lsrs	r6, r6, #3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d1f6      	bne.n	8006fda <_svfiprintf_r+0x382>
 8006fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fee:	1c01      	adds	r1, r0, #0
 8006ff0:	9802      	ldr	r0, [sp, #8]
 8006ff2:	07c0      	lsls	r0, r0, #31
 8006ff4:	d400      	bmi.n	8006ff8 <_svfiprintf_r+0x3a0>
 8006ff6:	e203      	b.n	8007400 <_svfiprintf_r+0x7a8>
 8006ff8:	2a30      	cmp	r2, #48	; 0x30
 8006ffa:	d100      	bne.n	8006ffe <_svfiprintf_r+0x3a6>
 8006ffc:	e263      	b.n	80074c6 <_svfiprintf_r+0x86e>
 8006ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007000:	3901      	subs	r1, #1
 8007002:	2330      	movs	r3, #48	; 0x30
 8007004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007006:	700b      	strb	r3, [r1, #0]
 8007008:	4641      	mov	r1, r8
 800700a:	1a89      	subs	r1, r1, r2
 800700c:	9104      	str	r1, [sp, #16]
 800700e:	e101      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007010:	9c08      	ldr	r4, [sp, #32]
 8007012:	6824      	ldr	r4, [r4, #0]
 8007014:	9407      	str	r4, [sp, #28]
 8007016:	9c08      	ldr	r4, [sp, #32]
 8007018:	3404      	adds	r4, #4
 800701a:	9408      	str	r4, [sp, #32]
 800701c:	9c07      	ldr	r4, [sp, #28]
 800701e:	2c00      	cmp	r4, #0
 8007020:	db00      	blt.n	8007024 <_svfiprintf_r+0x3cc>
 8007022:	e671      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007024:	4264      	negs	r4, r4
 8007026:	9407      	str	r4, [sp, #28]
 8007028:	9c02      	ldr	r4, [sp, #8]
 800702a:	4662      	mov	r2, ip
 800702c:	4314      	orrs	r4, r2
 800702e:	9402      	str	r4, [sp, #8]
 8007030:	e66a      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	08008d90 	.word	0x08008d90
 8007038:	08008ef4 	.word	0x08008ef4
 800703c:	243f      	movs	r4, #63	; 0x3f
 800703e:	446c      	add	r4, sp
 8007040:	7020      	strb	r0, [r4, #0]
 8007042:	9c02      	ldr	r4, [sp, #8]
 8007044:	06e4      	lsls	r4, r4, #27
 8007046:	d403      	bmi.n	8007050 <_svfiprintf_r+0x3f8>
 8007048:	9c02      	ldr	r4, [sp, #8]
 800704a:	0664      	lsls	r4, r4, #25
 800704c:	d500      	bpl.n	8007050 <_svfiprintf_r+0x3f8>
 800704e:	e1f9      	b.n	8007444 <_svfiprintf_r+0x7ec>
 8007050:	9c08      	ldr	r4, [sp, #32]
 8007052:	6826      	ldr	r6, [r4, #0]
 8007054:	3404      	adds	r4, #4
 8007056:	9408      	str	r4, [sp, #32]
 8007058:	2e00      	cmp	r6, #0
 800705a:	da00      	bge.n	800705e <_svfiprintf_r+0x406>
 800705c:	e1fb      	b.n	8007456 <_svfiprintf_r+0x7fe>
 800705e:	203f      	movs	r0, #63	; 0x3f
 8007060:	4468      	add	r0, sp
 8007062:	1c31      	adds	r1, r6, #0
 8007064:	1e4b      	subs	r3, r1, #1
 8007066:	4199      	sbcs	r1, r3
 8007068:	7804      	ldrb	r4, [r0, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	e79f      	b.n	8006fae <_svfiprintf_r+0x356>
 800706e:	9a08      	ldr	r2, [sp, #32]
 8007070:	1c14      	adds	r4, r2, #0
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	3404      	adds	r4, #4
 8007076:	ab14      	add	r3, sp, #80	; 0x50
 8007078:	203f      	movs	r0, #63	; 0x3f
 800707a:	9408      	str	r4, [sp, #32]
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	2401      	movs	r4, #1
 8007080:	2200      	movs	r2, #0
 8007082:	4468      	add	r0, sp
 8007084:	7002      	strb	r2, [r0, #0]
 8007086:	9403      	str	r4, [sp, #12]
 8007088:	9404      	str	r4, [sp, #16]
 800708a:	930b      	str	r3, [sp, #44]	; 0x2c
 800708c:	e651      	b.n	8006d32 <_svfiprintf_r+0xda>
 800708e:	213f      	movs	r1, #63	; 0x3f
 8007090:	4ccc      	ldr	r4, [pc, #816]	; (80073c4 <_svfiprintf_r+0x76c>)
 8007092:	4469      	add	r1, sp
 8007094:	7008      	strb	r0, [r1, #0]
 8007096:	940c      	str	r4, [sp, #48]	; 0x30
 8007098:	9c02      	ldr	r4, [sp, #8]
 800709a:	06e4      	lsls	r4, r4, #27
 800709c:	d403      	bmi.n	80070a6 <_svfiprintf_r+0x44e>
 800709e:	9c02      	ldr	r4, [sp, #8]
 80070a0:	0664      	lsls	r4, r4, #25
 80070a2:	d500      	bpl.n	80070a6 <_svfiprintf_r+0x44e>
 80070a4:	e1c9      	b.n	800743a <_svfiprintf_r+0x7e2>
 80070a6:	9c08      	ldr	r4, [sp, #32]
 80070a8:	6826      	ldr	r6, [r4, #0]
 80070aa:	3404      	adds	r4, #4
 80070ac:	9408      	str	r4, [sp, #32]
 80070ae:	9c02      	ldr	r4, [sp, #8]
 80070b0:	07e4      	lsls	r4, r4, #31
 80070b2:	d500      	bpl.n	80070b6 <_svfiprintf_r+0x45e>
 80070b4:	e18c      	b.n	80073d0 <_svfiprintf_r+0x778>
 80070b6:	1c31      	adds	r1, r6, #0
 80070b8:	1e4b      	subs	r3, r1, #1
 80070ba:	4199      	sbcs	r1, r3
 80070bc:	2302      	movs	r3, #2
 80070be:	e771      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80070c0:	213f      	movs	r1, #63	; 0x3f
 80070c2:	4cc1      	ldr	r4, [pc, #772]	; (80073c8 <_svfiprintf_r+0x770>)
 80070c4:	4469      	add	r1, sp
 80070c6:	7008      	strb	r0, [r1, #0]
 80070c8:	940c      	str	r4, [sp, #48]	; 0x30
 80070ca:	e7e5      	b.n	8007098 <_svfiprintf_r+0x440>
 80070cc:	9c02      	ldr	r4, [sp, #8]
 80070ce:	2240      	movs	r2, #64	; 0x40
 80070d0:	4314      	orrs	r4, r2
 80070d2:	9402      	str	r4, [sp, #8]
 80070d4:	e618      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80070d6:	223f      	movs	r2, #63	; 0x3f
 80070d8:	9c02      	ldr	r4, [sp, #8]
 80070da:	446a      	add	r2, sp
 80070dc:	7010      	strb	r0, [r2, #0]
 80070de:	06e4      	lsls	r4, r4, #27
 80070e0:	d500      	bpl.n	80070e4 <_svfiprintf_r+0x48c>
 80070e2:	e199      	b.n	8007418 <_svfiprintf_r+0x7c0>
 80070e4:	9c02      	ldr	r4, [sp, #8]
 80070e6:	0664      	lsls	r4, r4, #25
 80070e8:	d400      	bmi.n	80070ec <_svfiprintf_r+0x494>
 80070ea:	e195      	b.n	8007418 <_svfiprintf_r+0x7c0>
 80070ec:	9808      	ldr	r0, [sp, #32]
 80070ee:	9c06      	ldr	r4, [sp, #24]
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	8004      	strh	r4, [r0, #0]
 80070f4:	9c08      	ldr	r4, [sp, #32]
 80070f6:	3404      	adds	r4, #4
 80070f8:	9408      	str	r4, [sp, #32]
 80070fa:	e5d1      	b.n	8006ca0 <_svfiprintf_r+0x48>
 80070fc:	9c08      	ldr	r4, [sp, #32]
 80070fe:	203f      	movs	r0, #63	; 0x3f
 8007100:	9e08      	ldr	r6, [sp, #32]
 8007102:	6824      	ldr	r4, [r4, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	4468      	add	r0, sp
 8007108:	7003      	strb	r3, [r0, #0]
 800710a:	3604      	adds	r6, #4
 800710c:	940b      	str	r4, [sp, #44]	; 0x2c
 800710e:	2c00      	cmp	r4, #0
 8007110:	d100      	bne.n	8007114 <_svfiprintf_r+0x4bc>
 8007112:	e1dd      	b.n	80074d0 <_svfiprintf_r+0x878>
 8007114:	4648      	mov	r0, r9
 8007116:	2800      	cmp	r0, #0
 8007118:	da00      	bge.n	800711c <_svfiprintf_r+0x4c4>
 800711a:	e1a7      	b.n	800746c <_svfiprintf_r+0x814>
 800711c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800711e:	2100      	movs	r1, #0
 8007120:	464a      	mov	r2, r9
 8007122:	f7fe ff6b 	bl	8005ffc <memchr>
 8007126:	2800      	cmp	r0, #0
 8007128:	d100      	bne.n	800712c <_svfiprintf_r+0x4d4>
 800712a:	e1b6      	b.n	800749a <_svfiprintf_r+0x842>
 800712c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800712e:	1b00      	subs	r0, r0, r4
 8007130:	9004      	str	r0, [sp, #16]
 8007132:	4548      	cmp	r0, r9
 8007134:	dd00      	ble.n	8007138 <_svfiprintf_r+0x4e0>
 8007136:	e1b0      	b.n	800749a <_svfiprintf_r+0x842>
 8007138:	203f      	movs	r0, #63	; 0x3f
 800713a:	4468      	add	r0, sp
 800713c:	2100      	movs	r1, #0
 800713e:	7804      	ldrb	r4, [r0, #0]
 8007140:	9608      	str	r6, [sp, #32]
 8007142:	9109      	str	r1, [sp, #36]	; 0x24
 8007144:	e068      	b.n	8007218 <_svfiprintf_r+0x5c0>
 8007146:	782b      	ldrb	r3, [r5, #0]
 8007148:	3501      	adds	r5, #1
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d100      	bne.n	8007150 <_svfiprintf_r+0x4f8>
 800714e:	e1d0      	b.n	80074f2 <_svfiprintf_r+0x89a>
 8007150:	1c1a      	adds	r2, r3, #0
 8007152:	3a30      	subs	r2, #48	; 0x30
 8007154:	2400      	movs	r4, #0
 8007156:	2a09      	cmp	r2, #9
 8007158:	d80f      	bhi.n	800717a <_svfiprintf_r+0x522>
 800715a:	00a3      	lsls	r3, r4, #2
 800715c:	191c      	adds	r4, r3, r4
 800715e:	782b      	ldrb	r3, [r5, #0]
 8007160:	0064      	lsls	r4, r4, #1
 8007162:	1914      	adds	r4, r2, r4
 8007164:	1c1a      	adds	r2, r3, #0
 8007166:	3a30      	subs	r2, #48	; 0x30
 8007168:	3501      	adds	r5, #1
 800716a:	2a09      	cmp	r2, #9
 800716c:	d9f5      	bls.n	800715a <_svfiprintf_r+0x502>
 800716e:	46a1      	mov	r9, r4
 8007170:	2c00      	cmp	r4, #0
 8007172:	db00      	blt.n	8007176 <_svfiprintf_r+0x51e>
 8007174:	e5ca      	b.n	8006d0c <_svfiprintf_r+0xb4>
 8007176:	2401      	movs	r4, #1
 8007178:	4264      	negs	r4, r4
 800717a:	46a1      	mov	r9, r4
 800717c:	e5c6      	b.n	8006d0c <_svfiprintf_r+0xb4>
 800717e:	202b      	movs	r0, #43	; 0x2b
 8007180:	e5c2      	b.n	8006d08 <_svfiprintf_r+0xb0>
 8007182:	9c02      	ldr	r4, [sp, #8]
 8007184:	213f      	movs	r1, #63	; 0x3f
 8007186:	2310      	movs	r3, #16
 8007188:	4469      	add	r1, sp
 800718a:	431c      	orrs	r4, r3
 800718c:	7008      	strb	r0, [r1, #0]
 800718e:	9402      	str	r4, [sp, #8]
 8007190:	e757      	b.n	8007042 <_svfiprintf_r+0x3ea>
 8007192:	1c1a      	adds	r2, r3, #0
 8007194:	2400      	movs	r4, #0
 8007196:	3a30      	subs	r2, #48	; 0x30
 8007198:	00a3      	lsls	r3, r4, #2
 800719a:	191c      	adds	r4, r3, r4
 800719c:	782b      	ldrb	r3, [r5, #0]
 800719e:	0064      	lsls	r4, r4, #1
 80071a0:	18a4      	adds	r4, r4, r2
 80071a2:	1c1a      	adds	r2, r3, #0
 80071a4:	3a30      	subs	r2, #48	; 0x30
 80071a6:	3501      	adds	r5, #1
 80071a8:	2a09      	cmp	r2, #9
 80071aa:	d9f5      	bls.n	8007198 <_svfiprintf_r+0x540>
 80071ac:	9407      	str	r4, [sp, #28]
 80071ae:	e5ad      	b.n	8006d0c <_svfiprintf_r+0xb4>
 80071b0:	9c02      	ldr	r4, [sp, #8]
 80071b2:	4652      	mov	r2, sl
 80071b4:	4314      	orrs	r4, r2
 80071b6:	9402      	str	r4, [sp, #8]
 80071b8:	e5a6      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	1c1c      	adds	r4, r3, #0
 80071be:	3404      	adds	r4, #4
 80071c0:	9408      	str	r4, [sp, #32]
 80071c2:	9c02      	ldr	r4, [sp, #8]
 80071c4:	681e      	ldr	r6, [r3, #0]
 80071c6:	2302      	movs	r3, #2
 80071c8:	431c      	orrs	r4, r3
 80071ca:	2230      	movs	r2, #48	; 0x30
 80071cc:	ab10      	add	r3, sp, #64	; 0x40
 80071ce:	9402      	str	r4, [sp, #8]
 80071d0:	4c7d      	ldr	r4, [pc, #500]	; (80073c8 <_svfiprintf_r+0x770>)
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	1c31      	adds	r1, r6, #0
 80071d6:	2278      	movs	r2, #120	; 0x78
 80071d8:	705a      	strb	r2, [r3, #1]
 80071da:	940c      	str	r4, [sp, #48]	; 0x30
 80071dc:	1e4b      	subs	r3, r1, #1
 80071de:	4199      	sbcs	r1, r3
 80071e0:	2302      	movs	r3, #2
 80071e2:	e6df      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80071e4:	9c02      	ldr	r4, [sp, #8]
 80071e6:	2201      	movs	r2, #1
 80071e8:	4314      	orrs	r4, r2
 80071ea:	9402      	str	r4, [sp, #8]
 80071ec:	e58c      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d000      	beq.n	80071f4 <_svfiprintf_r+0x59c>
 80071f2:	e589      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071f4:	2020      	movs	r0, #32
 80071f6:	e587      	b.n	8006d08 <_svfiprintf_r+0xb0>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d000      	beq.n	80071fe <_svfiprintf_r+0x5a6>
 80071fc:	e084      	b.n	8007308 <_svfiprintf_r+0x6b0>
 80071fe:	9902      	ldr	r1, [sp, #8]
 8007200:	07c9      	lsls	r1, r1, #31
 8007202:	d400      	bmi.n	8007206 <_svfiprintf_r+0x5ae>
 8007204:	e0ab      	b.n	800735e <_svfiprintf_r+0x706>
 8007206:	2277      	movs	r2, #119	; 0x77
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	446a      	add	r2, sp
 800720c:	7013      	strb	r3, [r2, #0]
 800720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007210:	920b      	str	r2, [sp, #44]	; 0x2c
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	4648      	mov	r0, r9
 8007216:	9009      	str	r0, [sp, #36]	; 0x24
 8007218:	9804      	ldr	r0, [sp, #16]
 800721a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721c:	9003      	str	r0, [sp, #12]
 800721e:	4288      	cmp	r0, r1
 8007220:	da00      	bge.n	8007224 <_svfiprintf_r+0x5cc>
 8007222:	9103      	str	r1, [sp, #12]
 8007224:	9a03      	ldr	r2, [sp, #12]
 8007226:	1e63      	subs	r3, r4, #1
 8007228:	419c      	sbcs	r4, r3
 800722a:	1912      	adds	r2, r2, r4
 800722c:	9203      	str	r2, [sp, #12]
 800722e:	e582      	b.n	8006d36 <_svfiprintf_r+0xde>
 8007230:	9907      	ldr	r1, [sp, #28]
 8007232:	9a03      	ldr	r2, [sp, #12]
 8007234:	1a8c      	subs	r4, r1, r2
 8007236:	2c00      	cmp	r4, #0
 8007238:	dc00      	bgt.n	800723c <_svfiprintf_r+0x5e4>
 800723a:	e5e9      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 800723c:	4e63      	ldr	r6, [pc, #396]	; (80073cc <_svfiprintf_r+0x774>)
 800723e:	2c10      	cmp	r4, #16
 8007240:	dd29      	ble.n	8007296 <_svfiprintf_r+0x63e>
 8007242:	2310      	movs	r3, #16
 8007244:	199b      	adds	r3, r3, r6
 8007246:	2010      	movs	r0, #16
 8007248:	469a      	mov	sl, r3
 800724a:	4681      	mov	r9, r0
 800724c:	1c3b      	adds	r3, r7, #0
 800724e:	1c37      	adds	r7, r6, #0
 8007250:	465e      	mov	r6, fp
 8007252:	46ab      	mov	fp, r5
 8007254:	9d05      	ldr	r5, [sp, #20]
 8007256:	e003      	b.n	8007260 <_svfiprintf_r+0x608>
 8007258:	3c10      	subs	r4, #16
 800725a:	3308      	adds	r3, #8
 800725c:	2c10      	cmp	r4, #16
 800725e:	dd16      	ble.n	800728e <_svfiprintf_r+0x636>
 8007260:	464a      	mov	r2, r9
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007266:	3210      	adds	r2, #16
 8007268:	9213      	str	r2, [sp, #76]	; 0x4c
 800726a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800726c:	4651      	mov	r1, sl
 800726e:	3201      	adds	r2, #1
 8007270:	6019      	str	r1, [r3, #0]
 8007272:	9212      	str	r2, [sp, #72]	; 0x48
 8007274:	2a07      	cmp	r2, #7
 8007276:	ddef      	ble.n	8007258 <_svfiprintf_r+0x600>
 8007278:	1c28      	adds	r0, r5, #0
 800727a:	1c31      	adds	r1, r6, #0
 800727c:	aa11      	add	r2, sp, #68	; 0x44
 800727e:	f7ff fc53 	bl	8006b28 <__ssprint_r>
 8007282:	2800      	cmp	r0, #0
 8007284:	d145      	bne.n	8007312 <_svfiprintf_r+0x6ba>
 8007286:	3c10      	subs	r4, #16
 8007288:	4643      	mov	r3, r8
 800728a:	2c10      	cmp	r4, #16
 800728c:	dce8      	bgt.n	8007260 <_svfiprintf_r+0x608>
 800728e:	465d      	mov	r5, fp
 8007290:	46b3      	mov	fp, r6
 8007292:	1c3e      	adds	r6, r7, #0
 8007294:	1c1f      	adds	r7, r3, #0
 8007296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007298:	607c      	str	r4, [r7, #4]
 800729a:	191c      	adds	r4, r3, r4
 800729c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800729e:	3610      	adds	r6, #16
 80072a0:	3301      	adds	r3, #1
 80072a2:	603e      	str	r6, [r7, #0]
 80072a4:	9413      	str	r4, [sp, #76]	; 0x4c
 80072a6:	9312      	str	r3, [sp, #72]	; 0x48
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	dd00      	ble.n	80072ae <_svfiprintf_r+0x656>
 80072ac:	e0eb      	b.n	8007486 <_svfiprintf_r+0x82e>
 80072ae:	3708      	adds	r7, #8
 80072b0:	e5ae      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 80072b2:	9805      	ldr	r0, [sp, #20]
 80072b4:	4659      	mov	r1, fp
 80072b6:	aa11      	add	r2, sp, #68	; 0x44
 80072b8:	f7ff fc36 	bl	8006b28 <__ssprint_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d109      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 80072c0:	4643      	mov	r3, r8
 80072c2:	e5f4      	b.n	8006eae <_svfiprintf_r+0x256>
 80072c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d004      	beq.n	80072d4 <_svfiprintf_r+0x67c>
 80072ca:	9805      	ldr	r0, [sp, #20]
 80072cc:	4659      	mov	r1, fp
 80072ce:	aa11      	add	r2, sp, #68	; 0x44
 80072d0:	f7ff fc2a 	bl	8006b28 <__ssprint_r>
 80072d4:	465c      	mov	r4, fp
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	0658      	lsls	r0, r3, #25
 80072da:	d502      	bpl.n	80072e2 <_svfiprintf_r+0x68a>
 80072dc:	2301      	movs	r3, #1
 80072de:	425b      	negs	r3, r3
 80072e0:	9306      	str	r3, [sp, #24]
 80072e2:	9806      	ldr	r0, [sp, #24]
 80072e4:	b02f      	add	sp, #188	; 0xbc
 80072e6:	bc3c      	pop	{r2, r3, r4, r5}
 80072e8:	4690      	mov	r8, r2
 80072ea:	4699      	mov	r9, r3
 80072ec:	46a2      	mov	sl, r4
 80072ee:	46ab      	mov	fp, r5
 80072f0:	bcf0      	pop	{r4, r5, r6, r7}
 80072f2:	bc02      	pop	{r1}
 80072f4:	4708      	bx	r1
 80072f6:	9805      	ldr	r0, [sp, #20]
 80072f8:	4659      	mov	r1, fp
 80072fa:	aa11      	add	r2, sp, #68	; 0x44
 80072fc:	f7ff fc14 	bl	8006b28 <__ssprint_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d100      	bne.n	8007306 <_svfiprintf_r+0x6ae>
 8007304:	e61c      	b.n	8006f40 <_svfiprintf_r+0x2e8>
 8007306:	e7e5      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007308:	2100      	movs	r1, #0
 800730a:	4643      	mov	r3, r8
 800730c:	9104      	str	r1, [sp, #16]
 800730e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007310:	e780      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007312:	46b3      	mov	fp, r6
 8007314:	e7de      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007316:	9805      	ldr	r0, [sp, #20]
 8007318:	4659      	mov	r1, fp
 800731a:	aa11      	add	r2, sp, #68	; 0x44
 800731c:	f7ff fc04 	bl	8006b28 <__ssprint_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d1d7      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007324:	4647      	mov	r7, r8
 8007326:	e4d6      	b.n	8006cd6 <_svfiprintf_r+0x7e>
 8007328:	9805      	ldr	r0, [sp, #20]
 800732a:	4659      	mov	r1, fp
 800732c:	aa11      	add	r2, sp, #68	; 0x44
 800732e:	f7ff fbfb 	bl	8006b28 <__ssprint_r>
 8007332:	2800      	cmp	r0, #0
 8007334:	d1ce      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007336:	4647      	mov	r7, r8
 8007338:	e5aa      	b.n	8006e90 <_svfiprintf_r+0x238>
 800733a:	9805      	ldr	r0, [sp, #20]
 800733c:	4659      	mov	r1, fp
 800733e:	aa11      	add	r2, sp, #68	; 0x44
 8007340:	f7ff fbf2 	bl	8006b28 <__ssprint_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	d1c5      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 8007348:	4647      	mov	r7, r8
 800734a:	e54c      	b.n	8006de6 <_svfiprintf_r+0x18e>
 800734c:	9805      	ldr	r0, [sp, #20]
 800734e:	4659      	mov	r1, fp
 8007350:	aa11      	add	r2, sp, #68	; 0x44
 8007352:	f7ff fbe9 	bl	8006b28 <__ssprint_r>
 8007356:	2800      	cmp	r0, #0
 8007358:	d1bc      	bne.n	80072d4 <_svfiprintf_r+0x67c>
 800735a:	4647      	mov	r7, r8
 800735c:	e554      	b.n	8006e08 <_svfiprintf_r+0x1b0>
 800735e:	2000      	movs	r0, #0
 8007360:	4642      	mov	r2, r8
 8007362:	9004      	str	r0, [sp, #16]
 8007364:	920b      	str	r2, [sp, #44]	; 0x2c
 8007366:	e755      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007368:	466b      	mov	r3, sp
 800736a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800736c:	3377      	adds	r3, #119	; 0x77
 800736e:	220f      	movs	r2, #15
 8007370:	1c19      	adds	r1, r3, #0
 8007372:	1c13      	adds	r3, r2, #0
 8007374:	4033      	ands	r3, r6
 8007376:	5cc3      	ldrb	r3, [r0, r3]
 8007378:	0936      	lsrs	r6, r6, #4
 800737a:	700b      	strb	r3, [r1, #0]
 800737c:	1e4b      	subs	r3, r1, #1
 800737e:	2e00      	cmp	r6, #0
 8007380:	d1f6      	bne.n	8007370 <_svfiprintf_r+0x718>
 8007382:	4640      	mov	r0, r8
 8007384:	1a40      	subs	r0, r0, r1
 8007386:	910b      	str	r1, [sp, #44]	; 0x2c
 8007388:	9004      	str	r0, [sp, #16]
 800738a:	e743      	b.n	8007214 <_svfiprintf_r+0x5bc>
 800738c:	2e09      	cmp	r6, #9
 800738e:	d93b      	bls.n	8007408 <_svfiprintf_r+0x7b0>
 8007390:	466b      	mov	r3, sp
 8007392:	3377      	adds	r3, #119	; 0x77
 8007394:	46a2      	mov	sl, r4
 8007396:	1c30      	adds	r0, r6, #0
 8007398:	210a      	movs	r1, #10
 800739a:	1c1c      	adds	r4, r3, #0
 800739c:	f000 ec02 	blx	8007ba4 <__aeabi_uidivmod>
 80073a0:	3130      	adds	r1, #48	; 0x30
 80073a2:	7021      	strb	r1, [r4, #0]
 80073a4:	1c30      	adds	r0, r6, #0
 80073a6:	210a      	movs	r1, #10
 80073a8:	f000 eb7e 	blx	8007aa8 <__aeabi_uidiv>
 80073ac:	1e63      	subs	r3, r4, #1
 80073ae:	1c06      	adds	r6, r0, #0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1f0      	bne.n	8007396 <_svfiprintf_r+0x73e>
 80073b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80073b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b8:	4642      	mov	r2, r8
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	4654      	mov	r4, sl
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	e728      	b.n	8007214 <_svfiprintf_r+0x5bc>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	0800903c 	.word	0x0800903c
 80073c8:	08009050 	.word	0x08009050
 80073cc:	08008ef4 	.word	0x08008ef4
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	d02c      	beq.n	800742e <_svfiprintf_r+0x7d6>
 80073d4:	aa10      	add	r2, sp, #64	; 0x40
 80073d6:	9c02      	ldr	r4, [sp, #8]
 80073d8:	7053      	strb	r3, [r2, #1]
 80073da:	2302      	movs	r3, #2
 80073dc:	2130      	movs	r1, #48	; 0x30
 80073de:	431c      	orrs	r4, r3
 80073e0:	7011      	strb	r1, [r2, #0]
 80073e2:	9402      	str	r4, [sp, #8]
 80073e4:	2101      	movs	r1, #1
 80073e6:	e5dd      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 80073e8:	9805      	ldr	r0, [sp, #20]
 80073ea:	4659      	mov	r1, fp
 80073ec:	aa11      	add	r2, sp, #68	; 0x44
 80073ee:	f7ff fb9b 	bl	8006b28 <__ssprint_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d000      	beq.n	80073f8 <_svfiprintf_r+0x7a0>
 80073f6:	e76d      	b.n	80072d4 <_svfiprintf_r+0x67c>
 80073f8:	4647      	mov	r7, r8
 80073fa:	e4e2      	b.n	8006dc2 <_svfiprintf_r+0x16a>
 80073fc:	46bb      	mov	fp, r7
 80073fe:	e769      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007400:	4642      	mov	r2, r8
 8007402:	1a52      	subs	r2, r2, r1
 8007404:	9204      	str	r2, [sp, #16]
 8007406:	e705      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007408:	2377      	movs	r3, #119	; 0x77
 800740a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800740c:	446b      	add	r3, sp
 800740e:	3630      	adds	r6, #48	; 0x30
 8007410:	701e      	strb	r6, [r3, #0]
 8007412:	9004      	str	r0, [sp, #16]
 8007414:	930b      	str	r3, [sp, #44]	; 0x2c
 8007416:	e6fd      	b.n	8007214 <_svfiprintf_r+0x5bc>
 8007418:	9c08      	ldr	r4, [sp, #32]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	9c06      	ldr	r4, [sp, #24]
 800741e:	601c      	str	r4, [r3, #0]
 8007420:	9c08      	ldr	r4, [sp, #32]
 8007422:	3404      	adds	r4, #4
 8007424:	9408      	str	r4, [sp, #32]
 8007426:	e43b      	b.n	8006ca0 <_svfiprintf_r+0x48>
 8007428:	9c08      	ldr	r4, [sp, #32]
 800742a:	8826      	ldrh	r6, [r4, #0]
 800742c:	e5a0      	b.n	8006f70 <_svfiprintf_r+0x318>
 800742e:	2100      	movs	r1, #0
 8007430:	2302      	movs	r3, #2
 8007432:	e5b7      	b.n	8006fa4 <_svfiprintf_r+0x34c>
 8007434:	9c08      	ldr	r4, [sp, #32]
 8007436:	8826      	ldrh	r6, [r4, #0]
 8007438:	e5ae      	b.n	8006f98 <_svfiprintf_r+0x340>
 800743a:	9c08      	ldr	r4, [sp, #32]
 800743c:	8826      	ldrh	r6, [r4, #0]
 800743e:	3404      	adds	r4, #4
 8007440:	9408      	str	r4, [sp, #32]
 8007442:	e634      	b.n	80070ae <_svfiprintf_r+0x456>
 8007444:	9c08      	ldr	r4, [sp, #32]
 8007446:	2600      	movs	r6, #0
 8007448:	5fa6      	ldrsh	r6, [r4, r6]
 800744a:	9c08      	ldr	r4, [sp, #32]
 800744c:	3404      	adds	r4, #4
 800744e:	9408      	str	r4, [sp, #32]
 8007450:	2e00      	cmp	r6, #0
 8007452:	db00      	blt.n	8007456 <_svfiprintf_r+0x7fe>
 8007454:	e603      	b.n	800705e <_svfiprintf_r+0x406>
 8007456:	213f      	movs	r1, #63	; 0x3f
 8007458:	232d      	movs	r3, #45	; 0x2d
 800745a:	4469      	add	r1, sp
 800745c:	4276      	negs	r6, r6
 800745e:	700b      	strb	r3, [r1, #0]
 8007460:	1c31      	adds	r1, r6, #0
 8007462:	1e4b      	subs	r3, r1, #1
 8007464:	4199      	sbcs	r1, r3
 8007466:	242d      	movs	r4, #45	; 0x2d
 8007468:	2301      	movs	r3, #1
 800746a:	e5a0      	b.n	8006fae <_svfiprintf_r+0x356>
 800746c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800746e:	f7ff fb53 	bl	8006b18 <strlen>
 8007472:	223f      	movs	r2, #63	; 0x3f
 8007474:	446a      	add	r2, sp
 8007476:	2300      	movs	r3, #0
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	7814      	ldrb	r4, [r2, #0]
 800747c:	9608      	str	r6, [sp, #32]
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	e6ca      	b.n	8007218 <_svfiprintf_r+0x5c0>
 8007482:	46ab      	mov	fp, r5
 8007484:	e726      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	4659      	mov	r1, fp
 800748a:	aa11      	add	r2, sp, #68	; 0x44
 800748c:	f7ff fb4c 	bl	8006b28 <__ssprint_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	d000      	beq.n	8007496 <_svfiprintf_r+0x83e>
 8007494:	e71e      	b.n	80072d4 <_svfiprintf_r+0x67c>
 8007496:	4647      	mov	r7, r8
 8007498:	e4ba      	b.n	8006e10 <_svfiprintf_r+0x1b8>
 800749a:	203f      	movs	r0, #63	; 0x3f
 800749c:	4468      	add	r0, sp
 800749e:	464a      	mov	r2, r9
 80074a0:	2300      	movs	r3, #0
 80074a2:	7804      	ldrb	r4, [r0, #0]
 80074a4:	9608      	str	r6, [sp, #32]
 80074a6:	9204      	str	r2, [sp, #16]
 80074a8:	9309      	str	r3, [sp, #36]	; 0x24
 80074aa:	e6b5      	b.n	8007218 <_svfiprintf_r+0x5c0>
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	2140      	movs	r1, #64	; 0x40
 80074b0:	f7fe fb16 	bl	8005ae0 <_malloc_r>
 80074b4:	465a      	mov	r2, fp
 80074b6:	6010      	str	r0, [r2, #0]
 80074b8:	6110      	str	r0, [r2, #16]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d028      	beq.n	8007510 <_svfiprintf_r+0x8b8>
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	6153      	str	r3, [r2, #20]
 80074c2:	f7ff fbdc 	bl	8006c7e <_svfiprintf_r+0x26>
 80074c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80074c8:	4643      	mov	r3, r8
 80074ca:	1a1b      	subs	r3, r3, r0
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	e6a1      	b.n	8007214 <_svfiprintf_r+0x5bc>
 80074d0:	464c      	mov	r4, r9
 80074d2:	9404      	str	r4, [sp, #16]
 80074d4:	2c06      	cmp	r4, #6
 80074d6:	d906      	bls.n	80074e6 <_svfiprintf_r+0x88e>
 80074d8:	2406      	movs	r4, #6
 80074da:	9404      	str	r4, [sp, #16]
 80074dc:	9403      	str	r4, [sp, #12]
 80074de:	4c10      	ldr	r4, [pc, #64]	; (8007520 <_svfiprintf_r+0x8c8>)
 80074e0:	9608      	str	r6, [sp, #32]
 80074e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80074e4:	e425      	b.n	8006d32 <_svfiprintf_r+0xda>
 80074e6:	9c04      	ldr	r4, [sp, #16]
 80074e8:	43e3      	mvns	r3, r4
 80074ea:	17db      	asrs	r3, r3, #31
 80074ec:	401c      	ands	r4, r3
 80074ee:	9403      	str	r4, [sp, #12]
 80074f0:	e7f5      	b.n	80074de <_svfiprintf_r+0x886>
 80074f2:	9c08      	ldr	r4, [sp, #32]
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4691      	mov	r9, r2
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	2a00      	cmp	r2, #0
 8007500:	db01      	blt.n	8007506 <_svfiprintf_r+0x8ae>
 8007502:	f7ff fc01 	bl	8006d08 <_svfiprintf_r+0xb0>
 8007506:	2401      	movs	r4, #1
 8007508:	4264      	negs	r4, r4
 800750a:	46a1      	mov	r9, r4
 800750c:	f7ff fbfc 	bl	8006d08 <_svfiprintf_r+0xb0>
 8007510:	9c05      	ldr	r4, [sp, #20]
 8007512:	230c      	movs	r3, #12
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	2301      	movs	r3, #1
 8007518:	425b      	negs	r3, r3
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	e6e1      	b.n	80072e2 <_svfiprintf_r+0x68a>
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	08009064 	.word	0x08009064

08007524 <_calloc_r>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4351      	muls	r1, r2
 8007528:	f7fe fada 	bl	8005ae0 <_malloc_r>
 800752c:	1e04      	subs	r4, r0, #0
 800752e:	d00e      	beq.n	800754e <_calloc_r+0x2a>
 8007530:	1c23      	adds	r3, r4, #0
 8007532:	3b08      	subs	r3, #8
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	2303      	movs	r3, #3
 8007538:	439a      	bics	r2, r3
 800753a:	3a04      	subs	r2, #4
 800753c:	2a24      	cmp	r2, #36	; 0x24
 800753e:	d816      	bhi.n	800756e <_calloc_r+0x4a>
 8007540:	1c23      	adds	r3, r4, #0
 8007542:	2a13      	cmp	r2, #19
 8007544:	d807      	bhi.n	8007556 <_calloc_r+0x32>
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	605a      	str	r2, [r3, #4]
 800754c:	609a      	str	r2, [r3, #8]
 800754e:	1c20      	adds	r0, r4, #0
 8007550:	bc10      	pop	{r4}
 8007552:	bc02      	pop	{r1}
 8007554:	4708      	bx	r1
 8007556:	2300      	movs	r3, #0
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	2a1b      	cmp	r2, #27
 800755e:	d90b      	bls.n	8007578 <_calloc_r+0x54>
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	60e3      	str	r3, [r4, #12]
 8007564:	2a24      	cmp	r2, #36	; 0x24
 8007566:	d00a      	beq.n	800757e <_calloc_r+0x5a>
 8007568:	1c23      	adds	r3, r4, #0
 800756a:	3310      	adds	r3, #16
 800756c:	e7eb      	b.n	8007546 <_calloc_r+0x22>
 800756e:	1c20      	adds	r0, r4, #0
 8007570:	2100      	movs	r1, #0
 8007572:	f000 f859 	bl	8007628 <memset>
 8007576:	e7ea      	b.n	800754e <_calloc_r+0x2a>
 8007578:	1c23      	adds	r3, r4, #0
 800757a:	3308      	adds	r3, #8
 800757c:	e7e3      	b.n	8007546 <_calloc_r+0x22>
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	6163      	str	r3, [r4, #20]
 8007582:	1c23      	adds	r3, r4, #0
 8007584:	3318      	adds	r3, #24
 8007586:	e7de      	b.n	8007546 <_calloc_r+0x22>

08007588 <memmove>:
 8007588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758a:	4288      	cmp	r0, r1
 800758c:	d910      	bls.n	80075b0 <memmove+0x28>
 800758e:	188d      	adds	r5, r1, r2
 8007590:	42a8      	cmp	r0, r5
 8007592:	d20d      	bcs.n	80075b0 <memmove+0x28>
 8007594:	1886      	adds	r6, r0, r2
 8007596:	1e53      	subs	r3, r2, #1
 8007598:	4251      	negs	r1, r2
 800759a:	2a00      	cmp	r2, #0
 800759c:	d005      	beq.n	80075aa <memmove+0x22>
 800759e:	186a      	adds	r2, r5, r1
 80075a0:	5cd4      	ldrb	r4, [r2, r3]
 80075a2:	1872      	adds	r2, r6, r1
 80075a4:	54d4      	strb	r4, [r2, r3]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	d2f9      	bcs.n	800759e <memmove+0x16>
 80075aa:	bcf0      	pop	{r4, r5, r6, r7}
 80075ac:	bc02      	pop	{r1}
 80075ae:	4708      	bx	r1
 80075b0:	2a0f      	cmp	r2, #15
 80075b2:	d80a      	bhi.n	80075ca <memmove+0x42>
 80075b4:	1c03      	adds	r3, r0, #0
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d0f7      	beq.n	80075aa <memmove+0x22>
 80075ba:	189a      	adds	r2, r3, r2
 80075bc:	780c      	ldrb	r4, [r1, #0]
 80075be:	701c      	strb	r4, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	3101      	adds	r1, #1
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d1f9      	bne.n	80075bc <memmove+0x34>
 80075c8:	e7ef      	b.n	80075aa <memmove+0x22>
 80075ca:	1c0b      	adds	r3, r1, #0
 80075cc:	4303      	orrs	r3, r0
 80075ce:	079c      	lsls	r4, r3, #30
 80075d0:	d125      	bne.n	800761e <memmove+0x96>
 80075d2:	1c13      	adds	r3, r2, #0
 80075d4:	3b10      	subs	r3, #16
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	3301      	adds	r3, #1
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	18cd      	adds	r5, r1, r3
 80075de:	1c04      	adds	r4, r0, #0
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	6026      	str	r6, [r4, #0]
 80075e4:	684e      	ldr	r6, [r1, #4]
 80075e6:	6066      	str	r6, [r4, #4]
 80075e8:	688e      	ldr	r6, [r1, #8]
 80075ea:	60a6      	str	r6, [r4, #8]
 80075ec:	68ce      	ldr	r6, [r1, #12]
 80075ee:	3110      	adds	r1, #16
 80075f0:	60e6      	str	r6, [r4, #12]
 80075f2:	3410      	adds	r4, #16
 80075f4:	428d      	cmp	r5, r1
 80075f6:	d1f3      	bne.n	80075e0 <memmove+0x58>
 80075f8:	240f      	movs	r4, #15
 80075fa:	18c3      	adds	r3, r0, r3
 80075fc:	4014      	ands	r4, r2
 80075fe:	2c03      	cmp	r4, #3
 8007600:	d90f      	bls.n	8007622 <memmove+0x9a>
 8007602:	1f27      	subs	r7, r4, #4
 8007604:	08bf      	lsrs	r7, r7, #2
 8007606:	3701      	adds	r7, #1
 8007608:	00bf      	lsls	r7, r7, #2
 800760a:	19e9      	adds	r1, r5, r7
 800760c:	1c1c      	adds	r4, r3, #0
 800760e:	cd40      	ldmia	r5!, {r6}
 8007610:	c440      	stmia	r4!, {r6}
 8007612:	428d      	cmp	r5, r1
 8007614:	d1fb      	bne.n	800760e <memmove+0x86>
 8007616:	2403      	movs	r4, #3
 8007618:	4022      	ands	r2, r4
 800761a:	19db      	adds	r3, r3, r7
 800761c:	e7cb      	b.n	80075b6 <memmove+0x2e>
 800761e:	1c03      	adds	r3, r0, #0
 8007620:	e7cb      	b.n	80075ba <memmove+0x32>
 8007622:	1c29      	adds	r1, r5, #0
 8007624:	1c22      	adds	r2, r4, #0
 8007626:	e7c6      	b.n	80075b6 <memmove+0x2e>

08007628 <memset>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	0783      	lsls	r3, r0, #30
 800762c:	d042      	beq.n	80076b4 <memset+0x8c>
 800762e:	1e54      	subs	r4, r2, #1
 8007630:	2a00      	cmp	r2, #0
 8007632:	d03c      	beq.n	80076ae <memset+0x86>
 8007634:	060e      	lsls	r6, r1, #24
 8007636:	0e36      	lsrs	r6, r6, #24
 8007638:	1c03      	adds	r3, r0, #0
 800763a:	2503      	movs	r5, #3
 800763c:	e003      	b.n	8007646 <memset+0x1e>
 800763e:	1e62      	subs	r2, r4, #1
 8007640:	2c00      	cmp	r4, #0
 8007642:	d034      	beq.n	80076ae <memset+0x86>
 8007644:	1c14      	adds	r4, r2, #0
 8007646:	701e      	strb	r6, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	422b      	tst	r3, r5
 800764c:	d1f7      	bne.n	800763e <memset+0x16>
 800764e:	2c03      	cmp	r4, #3
 8007650:	d924      	bls.n	800769c <memset+0x74>
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	400a      	ands	r2, r1
 8007656:	0215      	lsls	r5, r2, #8
 8007658:	432a      	orrs	r2, r5
 800765a:	0415      	lsls	r5, r2, #16
 800765c:	432a      	orrs	r2, r5
 800765e:	2c0f      	cmp	r4, #15
 8007660:	d92b      	bls.n	80076ba <memset+0x92>
 8007662:	1c26      	adds	r6, r4, #0
 8007664:	3e10      	subs	r6, #16
 8007666:	0936      	lsrs	r6, r6, #4
 8007668:	3601      	adds	r6, #1
 800766a:	0136      	lsls	r6, r6, #4
 800766c:	199e      	adds	r6, r3, r6
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	609a      	str	r2, [r3, #8]
 8007674:	60da      	str	r2, [r3, #12]
 8007676:	3310      	adds	r3, #16
 8007678:	429e      	cmp	r6, r3
 800767a:	d1f8      	bne.n	800766e <memset+0x46>
 800767c:	230f      	movs	r3, #15
 800767e:	401c      	ands	r4, r3
 8007680:	1c35      	adds	r5, r6, #0
 8007682:	1c33      	adds	r3, r6, #0
 8007684:	2c03      	cmp	r4, #3
 8007686:	d909      	bls.n	800769c <memset+0x74>
 8007688:	1f23      	subs	r3, r4, #4
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	3301      	adds	r3, #1
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	18eb      	adds	r3, r5, r3
 8007692:	c504      	stmia	r5!, {r2}
 8007694:	429d      	cmp	r5, r3
 8007696:	d1fc      	bne.n	8007692 <memset+0x6a>
 8007698:	2203      	movs	r2, #3
 800769a:	4014      	ands	r4, r2
 800769c:	2c00      	cmp	r4, #0
 800769e:	d006      	beq.n	80076ae <memset+0x86>
 80076a0:	060a      	lsls	r2, r1, #24
 80076a2:	0e12      	lsrs	r2, r2, #24
 80076a4:	191c      	adds	r4, r3, r4
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	42a3      	cmp	r3, r4
 80076ac:	d1fb      	bne.n	80076a6 <memset+0x7e>
 80076ae:	bc70      	pop	{r4, r5, r6}
 80076b0:	bc02      	pop	{r1}
 80076b2:	4708      	bx	r1
 80076b4:	1c03      	adds	r3, r0, #0
 80076b6:	1c14      	adds	r4, r2, #0
 80076b8:	e7c9      	b.n	800764e <memset+0x26>
 80076ba:	1c1d      	adds	r5, r3, #0
 80076bc:	e7e4      	b.n	8007688 <memset+0x60>
 80076be:	46c0      	nop			; (mov r8, r8)

080076c0 <_realloc_r>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	465f      	mov	r7, fp
 80076c4:	4644      	mov	r4, r8
 80076c6:	4656      	mov	r6, sl
 80076c8:	464d      	mov	r5, r9
 80076ca:	b4f0      	push	{r4, r5, r6, r7}
 80076cc:	4693      	mov	fp, r2
 80076ce:	b085      	sub	sp, #20
 80076d0:	1c07      	adds	r7, r0, #0
 80076d2:	1c0c      	adds	r4, r1, #0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d100      	bne.n	80076da <_realloc_r+0x1a>
 80076d8:	e103      	b.n	80078e2 <_realloc_r+0x222>
 80076da:	1c26      	adds	r6, r4, #0
 80076dc:	3e08      	subs	r6, #8
 80076de:	f7fe fd15 	bl	800610c <__malloc_lock>
 80076e2:	6873      	ldr	r3, [r6, #4]
 80076e4:	2203      	movs	r2, #3
 80076e6:	1c18      	adds	r0, r3, #0
 80076e8:	465d      	mov	r5, fp
 80076ea:	4390      	bics	r0, r2
 80076ec:	350b      	adds	r5, #11
 80076ee:	4680      	mov	r8, r0
 80076f0:	2d16      	cmp	r5, #22
 80076f2:	d865      	bhi.n	80077c0 <_realloc_r+0x100>
 80076f4:	2110      	movs	r1, #16
 80076f6:	9101      	str	r1, [sp, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2510      	movs	r5, #16
 80076fc:	455d      	cmp	r5, fp
 80076fe:	d200      	bcs.n	8007702 <_realloc_r+0x42>
 8007700:	e0f4      	b.n	80078ec <_realloc_r+0x22c>
 8007702:	2a00      	cmp	r2, #0
 8007704:	d000      	beq.n	8007708 <_realloc_r+0x48>
 8007706:	e0f1      	b.n	80078ec <_realloc_r+0x22c>
 8007708:	9801      	ldr	r0, [sp, #4]
 800770a:	4580      	cmp	r8, r0
 800770c:	da5d      	bge.n	80077ca <_realloc_r+0x10a>
 800770e:	48d4      	ldr	r0, [pc, #848]	; (8007a60 <_realloc_r+0x3a0>)
 8007710:	4641      	mov	r1, r8
 8007712:	6880      	ldr	r0, [r0, #8]
 8007714:	1872      	adds	r2, r6, r1
 8007716:	9002      	str	r0, [sp, #8]
 8007718:	4290      	cmp	r0, r2
 800771a:	d100      	bne.n	800771e <_realloc_r+0x5e>
 800771c:	e0eb      	b.n	80078f6 <_realloc_r+0x236>
 800771e:	6851      	ldr	r1, [r2, #4]
 8007720:	2001      	movs	r0, #1
 8007722:	468a      	mov	sl, r1
 8007724:	4381      	bics	r1, r0
 8007726:	4689      	mov	r9, r1
 8007728:	4491      	add	r9, r2
 800772a:	4684      	mov	ip, r0
 800772c:	4648      	mov	r0, r9
 800772e:	6841      	ldr	r1, [r0, #4]
 8007730:	4660      	mov	r0, ip
 8007732:	4201      	tst	r1, r0
 8007734:	d064      	beq.n	8007800 <_realloc_r+0x140>
 8007736:	2100      	movs	r1, #0
 8007738:	468c      	mov	ip, r1
 800773a:	2200      	movs	r2, #0
 800773c:	07d9      	lsls	r1, r3, #31
 800773e:	d500      	bpl.n	8007742 <_realloc_r+0x82>
 8007740:	e07d      	b.n	800783e <_realloc_r+0x17e>
 8007742:	6833      	ldr	r3, [r6, #0]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	469a      	mov	sl, r3
 8007748:	4651      	mov	r1, sl
 800774a:	6848      	ldr	r0, [r1, #4]
 800774c:	2303      	movs	r3, #3
 800774e:	4398      	bics	r0, r3
 8007750:	1c03      	adds	r3, r0, #0
 8007752:	2a00      	cmp	r2, #0
 8007754:	d100      	bne.n	8007758 <_realloc_r+0x98>
 8007756:	e099      	b.n	800788c <_realloc_r+0x1cc>
 8007758:	9802      	ldr	r0, [sp, #8]
 800775a:	4443      	add	r3, r8
 800775c:	4282      	cmp	r2, r0
 800775e:	d100      	bne.n	8007762 <_realloc_r+0xa2>
 8007760:	e102      	b.n	8007968 <_realloc_r+0x2a8>
 8007762:	4699      	mov	r9, r3
 8007764:	9302      	str	r3, [sp, #8]
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	44e1      	add	r9, ip
 800776a:	4599      	cmp	r9, r3
 800776c:	da00      	bge.n	8007770 <_realloc_r+0xb0>
 800776e:	e08f      	b.n	8007890 <_realloc_r+0x1d0>
 8007770:	6893      	ldr	r3, [r2, #8]
 8007772:	68d1      	ldr	r1, [r2, #12]
 8007774:	60d9      	str	r1, [r3, #12]
 8007776:	608b      	str	r3, [r1, #8]
 8007778:	4650      	mov	r0, sl
 800777a:	68c2      	ldr	r2, [r0, #12]
 800777c:	6883      	ldr	r3, [r0, #8]
 800777e:	60da      	str	r2, [r3, #12]
 8007780:	6093      	str	r3, [r2, #8]
 8007782:	4642      	mov	r2, r8
 8007784:	4656      	mov	r6, sl
 8007786:	3a04      	subs	r2, #4
 8007788:	3608      	adds	r6, #8
 800778a:	2a24      	cmp	r2, #36	; 0x24
 800778c:	d900      	bls.n	8007790 <_realloc_r+0xd0>
 800778e:	e136      	b.n	80079fe <_realloc_r+0x33e>
 8007790:	1c33      	adds	r3, r6, #0
 8007792:	2a13      	cmp	r2, #19
 8007794:	d909      	bls.n	80077aa <_realloc_r+0xea>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	6081      	str	r1, [r0, #8]
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	60c3      	str	r3, [r0, #12]
 800779e:	2a1b      	cmp	r2, #27
 80077a0:	d900      	bls.n	80077a4 <_realloc_r+0xe4>
 80077a2:	e135      	b.n	8007a10 <_realloc_r+0x350>
 80077a4:	4653      	mov	r3, sl
 80077a6:	3310      	adds	r3, #16
 80077a8:	3408      	adds	r4, #8
 80077aa:	6820      	ldr	r0, [r4, #0]
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	6861      	ldr	r1, [r4, #4]
 80077b0:	6059      	str	r1, [r3, #4]
 80077b2:	68a4      	ldr	r4, [r4, #8]
 80077b4:	609c      	str	r4, [r3, #8]
 80077b6:	4652      	mov	r2, sl
 80077b8:	1c34      	adds	r4, r6, #0
 80077ba:	6853      	ldr	r3, [r2, #4]
 80077bc:	4656      	mov	r6, sl
 80077be:	e005      	b.n	80077cc <_realloc_r+0x10c>
 80077c0:	2207      	movs	r2, #7
 80077c2:	4395      	bics	r5, r2
 80077c4:	9501      	str	r5, [sp, #4]
 80077c6:	0fea      	lsrs	r2, r5, #31
 80077c8:	e798      	b.n	80076fc <_realloc_r+0x3c>
 80077ca:	46c1      	mov	r9, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	1b4a      	subs	r2, r1, r5
 80077d0:	2a0f      	cmp	r2, #15
 80077d2:	d823      	bhi.n	800781c <_realloc_r+0x15c>
 80077d4:	2201      	movs	r2, #1
 80077d6:	4013      	ands	r3, r2
 80077d8:	430b      	orrs	r3, r1
 80077da:	6073      	str	r3, [r6, #4]
 80077dc:	444e      	add	r6, r9
 80077de:	6871      	ldr	r1, [r6, #4]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	6072      	str	r2, [r6, #4]
 80077e4:	1c38      	adds	r0, r7, #0
 80077e6:	f7fe fc93 	bl	8006110 <__malloc_unlock>
 80077ea:	46a1      	mov	r9, r4
 80077ec:	4648      	mov	r0, r9
 80077ee:	b005      	add	sp, #20
 80077f0:	bc3c      	pop	{r2, r3, r4, r5}
 80077f2:	4690      	mov	r8, r2
 80077f4:	4699      	mov	r9, r3
 80077f6:	46a2      	mov	sl, r4
 80077f8:	46ab      	mov	fp, r5
 80077fa:	bcf0      	pop	{r4, r5, r6, r7}
 80077fc:	bc02      	pop	{r1}
 80077fe:	4708      	bx	r1
 8007800:	2003      	movs	r0, #3
 8007802:	4651      	mov	r1, sl
 8007804:	4381      	bics	r1, r0
 8007806:	4689      	mov	r9, r1
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	44c1      	add	r9, r8
 800780c:	468c      	mov	ip, r1
 800780e:	4581      	cmp	r9, r0
 8007810:	db94      	blt.n	800773c <_realloc_r+0x7c>
 8007812:	68d1      	ldr	r1, [r2, #12]
 8007814:	6892      	ldr	r2, [r2, #8]
 8007816:	60d1      	str	r1, [r2, #12]
 8007818:	608a      	str	r2, [r1, #8]
 800781a:	e7d7      	b.n	80077cc <_realloc_r+0x10c>
 800781c:	2001      	movs	r0, #1
 800781e:	4003      	ands	r3, r0
 8007820:	1971      	adds	r1, r6, r5
 8007822:	431d      	orrs	r5, r3
 8007824:	1c13      	adds	r3, r2, #0
 8007826:	4303      	orrs	r3, r0
 8007828:	6075      	str	r5, [r6, #4]
 800782a:	604b      	str	r3, [r1, #4]
 800782c:	188a      	adds	r2, r1, r2
 800782e:	6853      	ldr	r3, [r2, #4]
 8007830:	4318      	orrs	r0, r3
 8007832:	6050      	str	r0, [r2, #4]
 8007834:	3108      	adds	r1, #8
 8007836:	1c38      	adds	r0, r7, #0
 8007838:	f7fe f838 	bl	80058ac <_free_r>
 800783c:	e7d2      	b.n	80077e4 <_realloc_r+0x124>
 800783e:	1c38      	adds	r0, r7, #0
 8007840:	4659      	mov	r1, fp
 8007842:	f7fe f94d 	bl	8005ae0 <_malloc_r>
 8007846:	4681      	mov	r9, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d01b      	beq.n	8007884 <_realloc_r+0x1c4>
 800784c:	6873      	ldr	r3, [r6, #4]
 800784e:	1c02      	adds	r2, r0, #0
 8007850:	2101      	movs	r1, #1
 8007852:	1c18      	adds	r0, r3, #0
 8007854:	4388      	bics	r0, r1
 8007856:	3a08      	subs	r2, #8
 8007858:	1831      	adds	r1, r6, r0
 800785a:	428a      	cmp	r2, r1
 800785c:	d100      	bne.n	8007860 <_realloc_r+0x1a0>
 800785e:	e0c8      	b.n	80079f2 <_realloc_r+0x332>
 8007860:	4642      	mov	r2, r8
 8007862:	3a04      	subs	r2, #4
 8007864:	2a24      	cmp	r2, #36	; 0x24
 8007866:	d87a      	bhi.n	800795e <_realloc_r+0x29e>
 8007868:	2a13      	cmp	r2, #19
 800786a:	d851      	bhi.n	8007910 <_realloc_r+0x250>
 800786c:	464b      	mov	r3, r9
 800786e:	1c22      	adds	r2, r4, #0
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	6019      	str	r1, [r3, #0]
 8007874:	6850      	ldr	r0, [r2, #4]
 8007876:	6058      	str	r0, [r3, #4]
 8007878:	6892      	ldr	r2, [r2, #8]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	1c38      	adds	r0, r7, #0
 800787e:	1c21      	adds	r1, r4, #0
 8007880:	f7fe f814 	bl	80058ac <_free_r>
 8007884:	1c38      	adds	r0, r7, #0
 8007886:	f7fe fc43 	bl	8006110 <__malloc_unlock>
 800788a:	e7af      	b.n	80077ec <_realloc_r+0x12c>
 800788c:	4443      	add	r3, r8
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	dbd2      	blt.n	800783e <_realloc_r+0x17e>
 8007898:	4650      	mov	r0, sl
 800789a:	68c2      	ldr	r2, [r0, #12]
 800789c:	6883      	ldr	r3, [r0, #8]
 800789e:	60da      	str	r2, [r3, #12]
 80078a0:	6093      	str	r3, [r2, #8]
 80078a2:	4642      	mov	r2, r8
 80078a4:	4656      	mov	r6, sl
 80078a6:	3a04      	subs	r2, #4
 80078a8:	3608      	adds	r6, #8
 80078aa:	2a24      	cmp	r2, #36	; 0x24
 80078ac:	d83c      	bhi.n	8007928 <_realloc_r+0x268>
 80078ae:	1c33      	adds	r3, r6, #0
 80078b0:	2a13      	cmp	r2, #19
 80078b2:	d909      	bls.n	80078c8 <_realloc_r+0x208>
 80078b4:	6821      	ldr	r1, [r4, #0]
 80078b6:	6081      	str	r1, [r0, #8]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	60c3      	str	r3, [r0, #12]
 80078bc:	2a1b      	cmp	r2, #27
 80078be:	d900      	bls.n	80078c2 <_realloc_r+0x202>
 80078c0:	e0ba      	b.n	8007a38 <_realloc_r+0x378>
 80078c2:	4653      	mov	r3, sl
 80078c4:	3310      	adds	r3, #16
 80078c6:	3408      	adds	r4, #8
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	6018      	str	r0, [r3, #0]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	6059      	str	r1, [r3, #4]
 80078d0:	68a4      	ldr	r4, [r4, #8]
 80078d2:	9802      	ldr	r0, [sp, #8]
 80078d4:	609c      	str	r4, [r3, #8]
 80078d6:	4652      	mov	r2, sl
 80078d8:	1c34      	adds	r4, r6, #0
 80078da:	6853      	ldr	r3, [r2, #4]
 80078dc:	4681      	mov	r9, r0
 80078de:	4656      	mov	r6, sl
 80078e0:	e774      	b.n	80077cc <_realloc_r+0x10c>
 80078e2:	1c11      	adds	r1, r2, #0
 80078e4:	f7fe f8fc 	bl	8005ae0 <_malloc_r>
 80078e8:	4681      	mov	r9, r0
 80078ea:	e77f      	b.n	80077ec <_realloc_r+0x12c>
 80078ec:	230c      	movs	r3, #12
 80078ee:	2200      	movs	r2, #0
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	4691      	mov	r9, r2
 80078f4:	e77a      	b.n	80077ec <_realloc_r+0x12c>
 80078f6:	9902      	ldr	r1, [sp, #8]
 80078f8:	6849      	ldr	r1, [r1, #4]
 80078fa:	2203      	movs	r2, #3
 80078fc:	4391      	bics	r1, r2
 80078fe:	1c0a      	adds	r2, r1, #0
 8007900:	468c      	mov	ip, r1
 8007902:	2110      	movs	r1, #16
 8007904:	4442      	add	r2, r8
 8007906:	1949      	adds	r1, r1, r5
 8007908:	428a      	cmp	r2, r1
 800790a:	da18      	bge.n	800793e <_realloc_r+0x27e>
 800790c:	9a02      	ldr	r2, [sp, #8]
 800790e:	e715      	b.n	800773c <_realloc_r+0x7c>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	4648      	mov	r0, r9
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	6861      	ldr	r1, [r4, #4]
 8007918:	6041      	str	r1, [r0, #4]
 800791a:	2a1b      	cmp	r2, #27
 800791c:	d85d      	bhi.n	80079da <_realloc_r+0x31a>
 800791e:	464b      	mov	r3, r9
 8007920:	1c22      	adds	r2, r4, #0
 8007922:	3308      	adds	r3, #8
 8007924:	3208      	adds	r2, #8
 8007926:	e7a3      	b.n	8007870 <_realloc_r+0x1b0>
 8007928:	1c21      	adds	r1, r4, #0
 800792a:	1c30      	adds	r0, r6, #0
 800792c:	f7ff fe2c 	bl	8007588 <memmove>
 8007930:	9a02      	ldr	r2, [sp, #8]
 8007932:	4651      	mov	r1, sl
 8007934:	1c34      	adds	r4, r6, #0
 8007936:	684b      	ldr	r3, [r1, #4]
 8007938:	4691      	mov	r9, r2
 800793a:	4656      	mov	r6, sl
 800793c:	e746      	b.n	80077cc <_realloc_r+0x10c>
 800793e:	4b48      	ldr	r3, [pc, #288]	; (8007a60 <_realloc_r+0x3a0>)
 8007940:	1971      	adds	r1, r6, r5
 8007942:	6099      	str	r1, [r3, #8]
 8007944:	1b52      	subs	r2, r2, r5
 8007946:	2301      	movs	r3, #1
 8007948:	431a      	orrs	r2, r3
 800794a:	604a      	str	r2, [r1, #4]
 800794c:	6870      	ldr	r0, [r6, #4]
 800794e:	4003      	ands	r3, r0
 8007950:	431d      	orrs	r5, r3
 8007952:	6075      	str	r5, [r6, #4]
 8007954:	1c38      	adds	r0, r7, #0
 8007956:	f7fe fbdb 	bl	8006110 <__malloc_unlock>
 800795a:	46a1      	mov	r9, r4
 800795c:	e746      	b.n	80077ec <_realloc_r+0x12c>
 800795e:	4648      	mov	r0, r9
 8007960:	1c21      	adds	r1, r4, #0
 8007962:	f7ff fe11 	bl	8007588 <memmove>
 8007966:	e789      	b.n	800787c <_realloc_r+0x1bc>
 8007968:	9302      	str	r3, [sp, #8]
 800796a:	4463      	add	r3, ip
 800796c:	1c1a      	adds	r2, r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	1c2b      	adds	r3, r5, #0
 8007972:	3310      	adds	r3, #16
 8007974:	429a      	cmp	r2, r3
 8007976:	db8b      	blt.n	8007890 <_realloc_r+0x1d0>
 8007978:	4653      	mov	r3, sl
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2008      	movs	r0, #8
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	6093      	str	r3, [r2, #8]
 8007984:	4642      	mov	r2, r8
 8007986:	4681      	mov	r9, r0
 8007988:	3a04      	subs	r2, #4
 800798a:	44d1      	add	r9, sl
 800798c:	2a24      	cmp	r2, #36	; 0x24
 800798e:	d872      	bhi.n	8007a76 <_realloc_r+0x3b6>
 8007990:	464b      	mov	r3, r9
 8007992:	2a13      	cmp	r2, #19
 8007994:	d908      	bls.n	80079a8 <_realloc_r+0x2e8>
 8007996:	6821      	ldr	r1, [r4, #0]
 8007998:	4653      	mov	r3, sl
 800799a:	6099      	str	r1, [r3, #8]
 800799c:	6860      	ldr	r0, [r4, #4]
 800799e:	60d8      	str	r0, [r3, #12]
 80079a0:	2a1b      	cmp	r2, #27
 80079a2:	d86d      	bhi.n	8007a80 <_realloc_r+0x3c0>
 80079a4:	3310      	adds	r3, #16
 80079a6:	3408      	adds	r4, #8
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	6018      	str	r0, [r3, #0]
 80079ac:	6861      	ldr	r1, [r4, #4]
 80079ae:	6059      	str	r1, [r3, #4]
 80079b0:	68a4      	ldr	r4, [r4, #8]
 80079b2:	609c      	str	r4, [r3, #8]
 80079b4:	4653      	mov	r3, sl
 80079b6:	195a      	adds	r2, r3, r5
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	1b59      	subs	r1, r3, r5
 80079bc:	2301      	movs	r3, #1
 80079be:	4319      	orrs	r1, r3
 80079c0:	4827      	ldr	r0, [pc, #156]	; (8007a60 <_realloc_r+0x3a0>)
 80079c2:	6051      	str	r1, [r2, #4]
 80079c4:	6082      	str	r2, [r0, #8]
 80079c6:	4650      	mov	r0, sl
 80079c8:	6840      	ldr	r0, [r0, #4]
 80079ca:	4003      	ands	r3, r0
 80079cc:	431d      	orrs	r5, r3
 80079ce:	4651      	mov	r1, sl
 80079d0:	604d      	str	r5, [r1, #4]
 80079d2:	1c38      	adds	r0, r7, #0
 80079d4:	f7fe fb9c 	bl	8006110 <__malloc_unlock>
 80079d8:	e708      	b.n	80077ec <_realloc_r+0x12c>
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	4648      	mov	r0, r9
 80079de:	6083      	str	r3, [r0, #8]
 80079e0:	68e1      	ldr	r1, [r4, #12]
 80079e2:	60c1      	str	r1, [r0, #12]
 80079e4:	2a24      	cmp	r2, #36	; 0x24
 80079e6:	d01e      	beq.n	8007a26 <_realloc_r+0x366>
 80079e8:	464b      	mov	r3, r9
 80079ea:	1c22      	adds	r2, r4, #0
 80079ec:	3310      	adds	r3, #16
 80079ee:	3210      	adds	r2, #16
 80079f0:	e73e      	b.n	8007870 <_realloc_r+0x1b0>
 80079f2:	6852      	ldr	r2, [r2, #4]
 80079f4:	2103      	movs	r1, #3
 80079f6:	438a      	bics	r2, r1
 80079f8:	4691      	mov	r9, r2
 80079fa:	44c1      	add	r9, r8
 80079fc:	e6e6      	b.n	80077cc <_realloc_r+0x10c>
 80079fe:	1c30      	adds	r0, r6, #0
 8007a00:	1c21      	adds	r1, r4, #0
 8007a02:	f7ff fdc1 	bl	8007588 <memmove>
 8007a06:	4650      	mov	r0, sl
 8007a08:	1c34      	adds	r4, r6, #0
 8007a0a:	6843      	ldr	r3, [r0, #4]
 8007a0c:	4656      	mov	r6, sl
 8007a0e:	e6dd      	b.n	80077cc <_realloc_r+0x10c>
 8007a10:	68a0      	ldr	r0, [r4, #8]
 8007a12:	4651      	mov	r1, sl
 8007a14:	6108      	str	r0, [r1, #16]
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	614b      	str	r3, [r1, #20]
 8007a1a:	2a24      	cmp	r2, #36	; 0x24
 8007a1c:	d017      	beq.n	8007a4e <_realloc_r+0x38e>
 8007a1e:	4653      	mov	r3, sl
 8007a20:	3318      	adds	r3, #24
 8007a22:	3410      	adds	r4, #16
 8007a24:	e6c1      	b.n	80077aa <_realloc_r+0xea>
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	6102      	str	r2, [r0, #16]
 8007a2a:	6960      	ldr	r0, [r4, #20]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	1c22      	adds	r2, r4, #0
 8007a30:	6158      	str	r0, [r3, #20]
 8007a32:	3218      	adds	r2, #24
 8007a34:	3318      	adds	r3, #24
 8007a36:	e71b      	b.n	8007870 <_realloc_r+0x1b0>
 8007a38:	68a0      	ldr	r0, [r4, #8]
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	6108      	str	r0, [r1, #16]
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	614b      	str	r3, [r1, #20]
 8007a42:	2a24      	cmp	r2, #36	; 0x24
 8007a44:	d00e      	beq.n	8007a64 <_realloc_r+0x3a4>
 8007a46:	4653      	mov	r3, sl
 8007a48:	3318      	adds	r3, #24
 8007a4a:	3410      	adds	r4, #16
 8007a4c:	e73c      	b.n	80078c8 <_realloc_r+0x208>
 8007a4e:	6920      	ldr	r0, [r4, #16]
 8007a50:	4651      	mov	r1, sl
 8007a52:	6188      	str	r0, [r1, #24]
 8007a54:	6962      	ldr	r2, [r4, #20]
 8007a56:	4653      	mov	r3, sl
 8007a58:	61ca      	str	r2, [r1, #28]
 8007a5a:	3320      	adds	r3, #32
 8007a5c:	3418      	adds	r4, #24
 8007a5e:	e6a4      	b.n	80077aa <_realloc_r+0xea>
 8007a60:	2000054c 	.word	0x2000054c
 8007a64:	6920      	ldr	r0, [r4, #16]
 8007a66:	4651      	mov	r1, sl
 8007a68:	6188      	str	r0, [r1, #24]
 8007a6a:	6962      	ldr	r2, [r4, #20]
 8007a6c:	4653      	mov	r3, sl
 8007a6e:	61ca      	str	r2, [r1, #28]
 8007a70:	3320      	adds	r3, #32
 8007a72:	3418      	adds	r4, #24
 8007a74:	e728      	b.n	80078c8 <_realloc_r+0x208>
 8007a76:	4648      	mov	r0, r9
 8007a78:	1c21      	adds	r1, r4, #0
 8007a7a:	f7ff fd85 	bl	8007588 <memmove>
 8007a7e:	e799      	b.n	80079b4 <_realloc_r+0x2f4>
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	4653      	mov	r3, sl
 8007a84:	6119      	str	r1, [r3, #16]
 8007a86:	68e0      	ldr	r0, [r4, #12]
 8007a88:	6158      	str	r0, [r3, #20]
 8007a8a:	2a24      	cmp	r2, #36	; 0x24
 8007a8c:	d002      	beq.n	8007a94 <_realloc_r+0x3d4>
 8007a8e:	3318      	adds	r3, #24
 8007a90:	3410      	adds	r4, #16
 8007a92:	e789      	b.n	80079a8 <_realloc_r+0x2e8>
 8007a94:	6921      	ldr	r1, [r4, #16]
 8007a96:	6199      	str	r1, [r3, #24]
 8007a98:	6963      	ldr	r3, [r4, #20]
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	61d3      	str	r3, [r2, #28]
 8007a9e:	4653      	mov	r3, sl
 8007aa0:	3320      	adds	r3, #32
 8007aa2:	3418      	adds	r4, #24
 8007aa4:	e780      	b.n	80079a8 <_realloc_r+0x2e8>
 8007aa6:	46c0      	nop			; (mov r8, r8)

08007aa8 <__aeabi_uidiv>:
 8007aa8:	e2512001 	subs	r2, r1, #1
 8007aac:	012fff1e 	bxeq	lr
 8007ab0:	3a000036 	bcc	8007b90 <__aeabi_uidiv+0xe8>
 8007ab4:	e1500001 	cmp	r0, r1
 8007ab8:	9a000022 	bls	8007b48 <__aeabi_uidiv+0xa0>
 8007abc:	e1110002 	tst	r1, r2
 8007ac0:	0a000023 	beq	8007b54 <__aeabi_uidiv+0xac>
 8007ac4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8007ac8:	01a01181 	lsleq	r1, r1, #3
 8007acc:	03a03008 	moveq	r3, #8
 8007ad0:	13a03001 	movne	r3, #1
 8007ad4:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8007ad8:	31510000 	cmpcc	r1, r0
 8007adc:	31a01201 	lslcc	r1, r1, #4
 8007ae0:	31a03203 	lslcc	r3, r3, #4
 8007ae4:	3afffffa 	bcc	8007ad4 <__aeabi_uidiv+0x2c>
 8007ae8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8007aec:	31510000 	cmpcc	r1, r0
 8007af0:	31a01081 	lslcc	r1, r1, #1
 8007af4:	31a03083 	lslcc	r3, r3, #1
 8007af8:	3afffffa 	bcc	8007ae8 <__aeabi_uidiv+0x40>
 8007afc:	e3a02000 	mov	r2, #0
 8007b00:	e1500001 	cmp	r0, r1
 8007b04:	20400001 	subcs	r0, r0, r1
 8007b08:	21822003 	orrcs	r2, r2, r3
 8007b0c:	e15000a1 	cmp	r0, r1, lsr #1
 8007b10:	204000a1 	subcs	r0, r0, r1, lsr #1
 8007b14:	218220a3 	orrcs	r2, r2, r3, lsr #1
 8007b18:	e1500121 	cmp	r0, r1, lsr #2
 8007b1c:	20400121 	subcs	r0, r0, r1, lsr #2
 8007b20:	21822123 	orrcs	r2, r2, r3, lsr #2
 8007b24:	e15001a1 	cmp	r0, r1, lsr #3
 8007b28:	204001a1 	subcs	r0, r0, r1, lsr #3
 8007b2c:	218221a3 	orrcs	r2, r2, r3, lsr #3
 8007b30:	e3500000 	cmp	r0, #0
 8007b34:	11b03223 	lsrsne	r3, r3, #4
 8007b38:	11a01221 	lsrne	r1, r1, #4
 8007b3c:	1affffef 	bne	8007b00 <__aeabi_uidiv+0x58>
 8007b40:	e1a00002 	mov	r0, r2
 8007b44:	e12fff1e 	bx	lr
 8007b48:	03a00001 	moveq	r0, #1
 8007b4c:	13a00000 	movne	r0, #0
 8007b50:	e12fff1e 	bx	lr
 8007b54:	e3510801 	cmp	r1, #65536	; 0x10000
 8007b58:	21a01821 	lsrcs	r1, r1, #16
 8007b5c:	23a02010 	movcs	r2, #16
 8007b60:	33a02000 	movcc	r2, #0
 8007b64:	e3510c01 	cmp	r1, #256	; 0x100
 8007b68:	21a01421 	lsrcs	r1, r1, #8
 8007b6c:	22822008 	addcs	r2, r2, #8
 8007b70:	e3510010 	cmp	r1, #16
 8007b74:	21a01221 	lsrcs	r1, r1, #4
 8007b78:	22822004 	addcs	r2, r2, #4
 8007b7c:	e3510004 	cmp	r1, #4
 8007b80:	82822003 	addhi	r2, r2, #3
 8007b84:	908220a1 	addls	r2, r2, r1, lsr #1
 8007b88:	e1a00230 	lsr	r0, r0, r2
 8007b8c:	e12fff1e 	bx	lr
 8007b90:	e12fff1f 	bx	pc
 8007b94:	e1a00000 	nop			; (mov r0, r0)
 8007b98:	e3500000 	cmp	r0, #0
 8007b9c:	13e00000 	mvnne	r0, #0
 8007ba0:	ea0003c8 	b	8008ac8 <____aeabi_idiv0_from_arm>

08007ba4 <__aeabi_uidivmod>:
 8007ba4:	e3510000 	cmp	r1, #0
 8007ba8:	0afffff8 	beq	8007b90 <__aeabi_uidiv+0xe8>
 8007bac:	e92d4003 	push	{r0, r1, lr}
 8007bb0:	ebffffbc 	bl	8007aa8 <__aeabi_uidiv>
 8007bb4:	e8bd4006 	pop	{r1, r2, lr}
 8007bb8:	e0030092 	mul	r3, r2, r0
 8007bbc:	e0411003 	sub	r1, r1, r3
 8007bc0:	e12fff1e 	bx	lr

08007bc4 <__aeabi_idiv>:
 8007bc4:	e3510000 	cmp	r1, #0
 8007bc8:	0a000043 	beq	8007cdc <.divsi3_skip_div0_test+0x110>

08007bcc <.divsi3_skip_div0_test>:
 8007bcc:	e020c001 	eor	ip, r0, r1
 8007bd0:	42611000 	rsbmi	r1, r1, #0
 8007bd4:	e2512001 	subs	r2, r1, #1
 8007bd8:	0a000027 	beq	8007c7c <.divsi3_skip_div0_test+0xb0>
 8007bdc:	e1b03000 	movs	r3, r0
 8007be0:	42603000 	rsbmi	r3, r0, #0
 8007be4:	e1530001 	cmp	r3, r1
 8007be8:	9a000026 	bls	8007c88 <.divsi3_skip_div0_test+0xbc>
 8007bec:	e1110002 	tst	r1, r2
 8007bf0:	0a000028 	beq	8007c98 <.divsi3_skip_div0_test+0xcc>
 8007bf4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8007bf8:	01a01181 	lsleq	r1, r1, #3
 8007bfc:	03a02008 	moveq	r2, #8
 8007c00:	13a02001 	movne	r2, #1
 8007c04:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8007c08:	31510003 	cmpcc	r1, r3
 8007c0c:	31a01201 	lslcc	r1, r1, #4
 8007c10:	31a02202 	lslcc	r2, r2, #4
 8007c14:	3afffffa 	bcc	8007c04 <.divsi3_skip_div0_test+0x38>
 8007c18:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8007c1c:	31510003 	cmpcc	r1, r3
 8007c20:	31a01081 	lslcc	r1, r1, #1
 8007c24:	31a02082 	lslcc	r2, r2, #1
 8007c28:	3afffffa 	bcc	8007c18 <.divsi3_skip_div0_test+0x4c>
 8007c2c:	e3a00000 	mov	r0, #0
 8007c30:	e1530001 	cmp	r3, r1
 8007c34:	20433001 	subcs	r3, r3, r1
 8007c38:	21800002 	orrcs	r0, r0, r2
 8007c3c:	e15300a1 	cmp	r3, r1, lsr #1
 8007c40:	204330a1 	subcs	r3, r3, r1, lsr #1
 8007c44:	218000a2 	orrcs	r0, r0, r2, lsr #1
 8007c48:	e1530121 	cmp	r3, r1, lsr #2
 8007c4c:	20433121 	subcs	r3, r3, r1, lsr #2
 8007c50:	21800122 	orrcs	r0, r0, r2, lsr #2
 8007c54:	e15301a1 	cmp	r3, r1, lsr #3
 8007c58:	204331a1 	subcs	r3, r3, r1, lsr #3
 8007c5c:	218001a2 	orrcs	r0, r0, r2, lsr #3
 8007c60:	e3530000 	cmp	r3, #0
 8007c64:	11b02222 	lsrsne	r2, r2, #4
 8007c68:	11a01221 	lsrne	r1, r1, #4
 8007c6c:	1affffef 	bne	8007c30 <.divsi3_skip_div0_test+0x64>
 8007c70:	e35c0000 	cmp	ip, #0
 8007c74:	42600000 	rsbmi	r0, r0, #0
 8007c78:	e12fff1e 	bx	lr
 8007c7c:	e13c0000 	teq	ip, r0
 8007c80:	42600000 	rsbmi	r0, r0, #0
 8007c84:	e12fff1e 	bx	lr
 8007c88:	33a00000 	movcc	r0, #0
 8007c8c:	01a00fcc 	asreq	r0, ip, #31
 8007c90:	03800001 	orreq	r0, r0, #1
 8007c94:	e12fff1e 	bx	lr
 8007c98:	e3510801 	cmp	r1, #65536	; 0x10000
 8007c9c:	21a01821 	lsrcs	r1, r1, #16
 8007ca0:	23a02010 	movcs	r2, #16
 8007ca4:	33a02000 	movcc	r2, #0
 8007ca8:	e3510c01 	cmp	r1, #256	; 0x100
 8007cac:	21a01421 	lsrcs	r1, r1, #8
 8007cb0:	22822008 	addcs	r2, r2, #8
 8007cb4:	e3510010 	cmp	r1, #16
 8007cb8:	21a01221 	lsrcs	r1, r1, #4
 8007cbc:	22822004 	addcs	r2, r2, #4
 8007cc0:	e3510004 	cmp	r1, #4
 8007cc4:	82822003 	addhi	r2, r2, #3
 8007cc8:	908220a1 	addls	r2, r2, r1, lsr #1
 8007ccc:	e35c0000 	cmp	ip, #0
 8007cd0:	e1a00233 	lsr	r0, r3, r2
 8007cd4:	42600000 	rsbmi	r0, r0, #0
 8007cd8:	e12fff1e 	bx	lr
 8007cdc:	e12fff1f 	bx	pc
 8007ce0:	e1a00000 	nop			; (mov r0, r0)
 8007ce4:	e3500000 	cmp	r0, #0
 8007ce8:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 8007cec:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 8007cf0:	ea000374 	b	8008ac8 <____aeabi_idiv0_from_arm>

08007cf4 <__aeabi_idivmod>:
 8007cf4:	e3510000 	cmp	r1, #0
 8007cf8:	0afffff7 	beq	8007cdc <.divsi3_skip_div0_test+0x110>
 8007cfc:	e92d4003 	push	{r0, r1, lr}
 8007d00:	ebffffb1 	bl	8007bcc <.divsi3_skip_div0_test>
 8007d04:	e8bd4006 	pop	{r1, r2, lr}
 8007d08:	e0030092 	mul	r3, r2, r0
 8007d0c:	e0411003 	sub	r1, r1, r3
 8007d10:	e12fff1e 	bx	lr

08007d14 <__aeabi_idiv0>:
 8007d14:	4770      	bx	lr
 8007d16:	46c0      	nop			; (mov r8, r8)

08007d18 <__aeabi_drsub>:
 8007d18:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 8007d1c:	ea000000 	b	8007d24 <__adddf3>

08007d20 <__aeabi_dsub>:
 8007d20:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

08007d24 <__adddf3>:
 8007d24:	e92d4030 	push	{r4, r5, lr}
 8007d28:	e1a04081 	lsl	r4, r1, #1
 8007d2c:	e1a05083 	lsl	r5, r3, #1
 8007d30:	e1340005 	teq	r4, r5
 8007d34:	01300002 	teqeq	r0, r2
 8007d38:	1194c000 	orrsne	ip, r4, r0
 8007d3c:	1195c002 	orrsne	ip, r5, r2
 8007d40:	11f0cac4 	mvnsne	ip, r4, asr #21
 8007d44:	11f0cac5 	mvnsne	ip, r5, asr #21
 8007d48:	0a00008c 	beq	8007f80 <__adddf3+0x25c>
 8007d4c:	e1a04aa4 	lsr	r4, r4, #21
 8007d50:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 8007d54:	b2655000 	rsblt	r5, r5, #0
 8007d58:	da000006 	ble	8007d78 <__adddf3+0x54>
 8007d5c:	e0844005 	add	r4, r4, r5
 8007d60:	e0202002 	eor	r2, r0, r2
 8007d64:	e0213003 	eor	r3, r1, r3
 8007d68:	e0220000 	eor	r0, r2, r0
 8007d6c:	e0231001 	eor	r1, r3, r1
 8007d70:	e0202002 	eor	r2, r0, r2
 8007d74:	e0213003 	eor	r3, r1, r3
 8007d78:	e3550036 	cmp	r5, #54	; 0x36
 8007d7c:	88bd4030 	pophi	{r4, r5, lr}
 8007d80:	812fff1e 	bxhi	lr
 8007d84:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8007d88:	e1a01601 	lsl	r1, r1, #12
 8007d8c:	e3a0c601 	mov	ip, #1048576	; 0x100000
 8007d90:	e18c1621 	orr	r1, ip, r1, lsr #12
 8007d94:	0a000001 	beq	8007da0 <__adddf3+0x7c>
 8007d98:	e2700000 	rsbs	r0, r0, #0
 8007d9c:	e2e11000 	rsc	r1, r1, #0
 8007da0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 8007da4:	e1a03603 	lsl	r3, r3, #12
 8007da8:	e18c3623 	orr	r3, ip, r3, lsr #12
 8007dac:	0a000001 	beq	8007db8 <__adddf3+0x94>
 8007db0:	e2722000 	rsbs	r2, r2, #0
 8007db4:	e2e33000 	rsc	r3, r3, #0
 8007db8:	e1340005 	teq	r4, r5
 8007dbc:	0a000069 	beq	8007f68 <__adddf3+0x244>
 8007dc0:	e2444001 	sub	r4, r4, #1
 8007dc4:	e275e020 	rsbs	lr, r5, #32
 8007dc8:	ba000005 	blt	8007de4 <__adddf3+0xc0>
 8007dcc:	e1a0ce12 	lsl	ip, r2, lr
 8007dd0:	e0900532 	adds	r0, r0, r2, lsr r5
 8007dd4:	e2a11000 	adc	r1, r1, #0
 8007dd8:	e0900e13 	adds	r0, r0, r3, lsl lr
 8007ddc:	e0b11553 	adcs	r1, r1, r3, asr r5
 8007de0:	ea000006 	b	8007e00 <__adddf3+0xdc>
 8007de4:	e2455020 	sub	r5, r5, #32
 8007de8:	e28ee020 	add	lr, lr, #32
 8007dec:	e3520001 	cmp	r2, #1
 8007df0:	e1a0ce13 	lsl	ip, r3, lr
 8007df4:	238cc002 	orrcs	ip, ip, #2
 8007df8:	e0900553 	adds	r0, r0, r3, asr r5
 8007dfc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 8007e00:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8007e04:	5a000002 	bpl	8007e14 <__adddf3+0xf0>
 8007e08:	e27cc000 	rsbs	ip, ip, #0
 8007e0c:	e2f00000 	rscs	r0, r0, #0
 8007e10:	e2e11000 	rsc	r1, r1, #0
 8007e14:	e3510601 	cmp	r1, #1048576	; 0x100000
 8007e18:	3a00000f 	bcc	8007e5c <__adddf3+0x138>
 8007e1c:	e3510602 	cmp	r1, #2097152	; 0x200000
 8007e20:	3a000006 	bcc	8007e40 <__adddf3+0x11c>
 8007e24:	e1b010a1 	lsrs	r1, r1, #1
 8007e28:	e1b00060 	rrxs	r0, r0
 8007e2c:	e1a0c06c 	rrx	ip, ip
 8007e30:	e2844001 	add	r4, r4, #1
 8007e34:	e1a02a84 	lsl	r2, r4, #21
 8007e38:	e3720501 	cmn	r2, #4194304	; 0x400000
 8007e3c:	2a00006b 	bcs	8007ff0 <__adddf3+0x2cc>
 8007e40:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 8007e44:	01b0c0a0 	lsrseq	ip, r0, #1
 8007e48:	e2b00000 	adcs	r0, r0, #0
 8007e4c:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8007e50:	e1811005 	orr	r1, r1, r5
 8007e54:	e8bd4030 	pop	{r4, r5, lr}
 8007e58:	e12fff1e 	bx	lr
 8007e5c:	e1b0c08c 	lsls	ip, ip, #1
 8007e60:	e0b00000 	adcs	r0, r0, r0
 8007e64:	e0a11001 	adc	r1, r1, r1
 8007e68:	e3110601 	tst	r1, #1048576	; 0x100000
 8007e6c:	e2444001 	sub	r4, r4, #1
 8007e70:	1afffff2 	bne	8007e40 <__adddf3+0x11c>
 8007e74:	e3310000 	teq	r1, #0
 8007e78:	13a03014 	movne	r3, #20
 8007e7c:	03a03034 	moveq	r3, #52	; 0x34
 8007e80:	01a01000 	moveq	r1, r0
 8007e84:	03a00000 	moveq	r0, #0
 8007e88:	e1a02001 	mov	r2, r1
 8007e8c:	e3520801 	cmp	r2, #65536	; 0x10000
 8007e90:	21a02822 	lsrcs	r2, r2, #16
 8007e94:	22433010 	subcs	r3, r3, #16
 8007e98:	e3520c01 	cmp	r2, #256	; 0x100
 8007e9c:	21a02422 	lsrcs	r2, r2, #8
 8007ea0:	22433008 	subcs	r3, r3, #8
 8007ea4:	e3520010 	cmp	r2, #16
 8007ea8:	21a02222 	lsrcs	r2, r2, #4
 8007eac:	22433004 	subcs	r3, r3, #4
 8007eb0:	e3520004 	cmp	r2, #4
 8007eb4:	22433002 	subcs	r3, r3, #2
 8007eb8:	304330a2 	subcc	r3, r3, r2, lsr #1
 8007ebc:	e04331a2 	sub	r3, r3, r2, lsr #3
 8007ec0:	e2532020 	subs	r2, r3, #32
 8007ec4:	aa000007 	bge	8007ee8 <__adddf3+0x1c4>
 8007ec8:	e292200c 	adds	r2, r2, #12
 8007ecc:	da000004 	ble	8007ee4 <__adddf3+0x1c0>
 8007ed0:	e282c014 	add	ip, r2, #20
 8007ed4:	e262200c 	rsb	r2, r2, #12
 8007ed8:	e1a00c11 	lsl	r0, r1, ip
 8007edc:	e1a01231 	lsr	r1, r1, r2
 8007ee0:	ea000004 	b	8007ef8 <__adddf3+0x1d4>
 8007ee4:	e2822014 	add	r2, r2, #20
 8007ee8:	d262c020 	rsble	ip, r2, #32
 8007eec:	e1a01211 	lsl	r1, r1, r2
 8007ef0:	d1811c30 	orrle	r1, r1, r0, lsr ip
 8007ef4:	d1a00210 	lslle	r0, r0, r2
 8007ef8:	e0544003 	subs	r4, r4, r3
 8007efc:	a0811a04 	addge	r1, r1, r4, lsl #20
 8007f00:	a1811005 	orrge	r1, r1, r5
 8007f04:	a8bd4030 	popge	{r4, r5, lr}
 8007f08:	a12fff1e 	bxge	lr
 8007f0c:	e1e04004 	mvn	r4, r4
 8007f10:	e254401f 	subs	r4, r4, #31
 8007f14:	aa00000f 	bge	8007f58 <__adddf3+0x234>
 8007f18:	e294400c 	adds	r4, r4, #12
 8007f1c:	ca000006 	bgt	8007f3c <__adddf3+0x218>
 8007f20:	e2844014 	add	r4, r4, #20
 8007f24:	e2642020 	rsb	r2, r4, #32
 8007f28:	e1a00430 	lsr	r0, r0, r4
 8007f2c:	e1800211 	orr	r0, r0, r1, lsl r2
 8007f30:	e1851431 	orr	r1, r5, r1, lsr r4
 8007f34:	e8bd4030 	pop	{r4, r5, lr}
 8007f38:	e12fff1e 	bx	lr
 8007f3c:	e264400c 	rsb	r4, r4, #12
 8007f40:	e2642020 	rsb	r2, r4, #32
 8007f44:	e1a00230 	lsr	r0, r0, r2
 8007f48:	e1800411 	orr	r0, r0, r1, lsl r4
 8007f4c:	e1a01005 	mov	r1, r5
 8007f50:	e8bd4030 	pop	{r4, r5, lr}
 8007f54:	e12fff1e 	bx	lr
 8007f58:	e1a00431 	lsr	r0, r1, r4
 8007f5c:	e1a01005 	mov	r1, r5
 8007f60:	e8bd4030 	pop	{r4, r5, lr}
 8007f64:	e12fff1e 	bx	lr
 8007f68:	e3340000 	teq	r4, #0
 8007f6c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 8007f70:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 8007f74:	02844001 	addeq	r4, r4, #1
 8007f78:	12455001 	subne	r5, r5, #1
 8007f7c:	eaffff8f 	b	8007dc0 <__adddf3+0x9c>
 8007f80:	e1f0cac4 	mvns	ip, r4, asr #21
 8007f84:	11f0cac5 	mvnsne	ip, r5, asr #21
 8007f88:	0a00001d 	beq	8008004 <__adddf3+0x2e0>
 8007f8c:	e1340005 	teq	r4, r5
 8007f90:	01300002 	teqeq	r0, r2
 8007f94:	0a000004 	beq	8007fac <__adddf3+0x288>
 8007f98:	e194c000 	orrs	ip, r4, r0
 8007f9c:	01a01003 	moveq	r1, r3
 8007fa0:	01a00002 	moveq	r0, r2
 8007fa4:	e8bd4030 	pop	{r4, r5, lr}
 8007fa8:	e12fff1e 	bx	lr
 8007fac:	e1310003 	teq	r1, r3
 8007fb0:	13a01000 	movne	r1, #0
 8007fb4:	13a00000 	movne	r0, #0
 8007fb8:	18bd4030 	popne	{r4, r5, lr}
 8007fbc:	112fff1e 	bxne	lr
 8007fc0:	e1b0caa4 	lsrs	ip, r4, #21
 8007fc4:	1a000004 	bne	8007fdc <__adddf3+0x2b8>
 8007fc8:	e1b00080 	lsls	r0, r0, #1
 8007fcc:	e0b11001 	adcs	r1, r1, r1
 8007fd0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 8007fd4:	e8bd4030 	pop	{r4, r5, lr}
 8007fd8:	e12fff1e 	bx	lr
 8007fdc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 8007fe0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 8007fe4:	38bd4030 	popcc	{r4, r5, lr}
 8007fe8:	312fff1e 	bxcc	lr
 8007fec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8007ff0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 8007ff4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 8007ff8:	e3a00000 	mov	r0, #0
 8007ffc:	e8bd4030 	pop	{r4, r5, lr}
 8008000:	e12fff1e 	bx	lr
 8008004:	e1f0cac4 	mvns	ip, r4, asr #21
 8008008:	11a01003 	movne	r1, r3
 800800c:	11a00002 	movne	r0, r2
 8008010:	01f0cac5 	mvnseq	ip, r5, asr #21
 8008014:	11a03001 	movne	r3, r1
 8008018:	11a02000 	movne	r2, r0
 800801c:	e1904601 	orrs	r4, r0, r1, lsl #12
 8008020:	01925603 	orrseq	r5, r2, r3, lsl #12
 8008024:	01310003 	teqeq	r1, r3
 8008028:	13811702 	orrne	r1, r1, #524288	; 0x80000
 800802c:	e8bd4030 	pop	{r4, r5, lr}
 8008030:	e12fff1e 	bx	lr

08008034 <__aeabi_ui2d>:
 8008034:	e3300000 	teq	r0, #0
 8008038:	03a01000 	moveq	r1, #0
 800803c:	012fff1e 	bxeq	lr
 8008040:	e92d4030 	push	{r4, r5, lr}
 8008044:	e3a04b01 	mov	r4, #1024	; 0x400
 8008048:	e2844032 	add	r4, r4, #50	; 0x32
 800804c:	e3a05000 	mov	r5, #0
 8008050:	e3a01000 	mov	r1, #0
 8008054:	eaffff86 	b	8007e74 <__adddf3+0x150>

08008058 <__aeabi_i2d>:
 8008058:	e3300000 	teq	r0, #0
 800805c:	03a01000 	moveq	r1, #0
 8008060:	012fff1e 	bxeq	lr
 8008064:	e92d4030 	push	{r4, r5, lr}
 8008068:	e3a04b01 	mov	r4, #1024	; 0x400
 800806c:	e2844032 	add	r4, r4, #50	; 0x32
 8008070:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 8008074:	42600000 	rsbmi	r0, r0, #0
 8008078:	e3a01000 	mov	r1, #0
 800807c:	eaffff7c 	b	8007e74 <__adddf3+0x150>

08008080 <__aeabi_f2d>:
 8008080:	e1b02080 	lsls	r2, r0, #1
 8008084:	e1a011c2 	asr	r1, r2, #3
 8008088:	e1a01061 	rrx	r1, r1
 800808c:	e1a00e02 	lsl	r0, r2, #28
 8008090:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 8008094:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 8008098:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 800809c:	112fff1e 	bxne	lr
 80080a0:	e3320000 	teq	r2, #0
 80080a4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 80080a8:	012fff1e 	bxeq	lr
 80080ac:	e92d4030 	push	{r4, r5, lr}
 80080b0:	e3a04d0e 	mov	r4, #896	; 0x380
 80080b4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 80080b8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 80080bc:	eaffff6c 	b	8007e74 <__adddf3+0x150>

080080c0 <__aeabi_ul2d>:
 80080c0:	e1902001 	orrs	r2, r0, r1
 80080c4:	012fff1e 	bxeq	lr
 80080c8:	e92d4030 	push	{r4, r5, lr}
 80080cc:	e3a05000 	mov	r5, #0
 80080d0:	ea000006 	b	80080f0 <__aeabi_l2d+0x1c>

080080d4 <__aeabi_l2d>:
 80080d4:	e1902001 	orrs	r2, r0, r1
 80080d8:	012fff1e 	bxeq	lr
 80080dc:	e92d4030 	push	{r4, r5, lr}
 80080e0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 80080e4:	5a000001 	bpl	80080f0 <__aeabi_l2d+0x1c>
 80080e8:	e2700000 	rsbs	r0, r0, #0
 80080ec:	e2e11000 	rsc	r1, r1, #0
 80080f0:	e3a04b01 	mov	r4, #1024	; 0x400
 80080f4:	e2844032 	add	r4, r4, #50	; 0x32
 80080f8:	e1b0cb21 	lsrs	ip, r1, #22
 80080fc:	0affff44 	beq	8007e14 <__adddf3+0xf0>
 8008100:	e3a02003 	mov	r2, #3
 8008104:	e1b0c1ac 	lsrs	ip, ip, #3
 8008108:	12822003 	addne	r2, r2, #3
 800810c:	e1b0c1ac 	lsrs	ip, ip, #3
 8008110:	12822003 	addne	r2, r2, #3
 8008114:	e08221ac 	add	r2, r2, ip, lsr #3
 8008118:	e2623020 	rsb	r3, r2, #32
 800811c:	e1a0c310 	lsl	ip, r0, r3
 8008120:	e1a00230 	lsr	r0, r0, r2
 8008124:	e1800311 	orr	r0, r0, r1, lsl r3
 8008128:	e1a01231 	lsr	r1, r1, r2
 800812c:	e0844002 	add	r4, r4, r2
 8008130:	eaffff37 	b	8007e14 <__adddf3+0xf0>

08008134 <__aeabi_dmul>:
 8008134:	e92d4070 	push	{r4, r5, r6, lr}
 8008138:	e3a0c0ff 	mov	ip, #255	; 0xff
 800813c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 8008140:	e01c4a21 	ands	r4, ip, r1, lsr #20
 8008144:	101c5a23 	andsne	r5, ip, r3, lsr #20
 8008148:	1134000c 	teqne	r4, ip
 800814c:	1135000c 	teqne	r5, ip
 8008150:	0b000075 	bleq	800832c <__aeabi_dmul+0x1f8>
 8008154:	e0844005 	add	r4, r4, r5
 8008158:	e0216003 	eor	r6, r1, r3
 800815c:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 8008160:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 8008164:	e1905601 	orrs	r5, r0, r1, lsl #12
 8008168:	11925603 	orrsne	r5, r2, r3, lsl #12
 800816c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8008170:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 8008174:	0a00001d 	beq	80081f0 <__aeabi_dmul+0xbc>
 8008178:	e08ec290 	umull	ip, lr, r0, r2
 800817c:	e3a05000 	mov	r5, #0
 8008180:	e0a5e291 	umlal	lr, r5, r1, r2
 8008184:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 8008188:	e0a5e390 	umlal	lr, r5, r0, r3
 800818c:	e3a06000 	mov	r6, #0
 8008190:	e0a65391 	umlal	r5, r6, r1, r3
 8008194:	e33c0000 	teq	ip, #0
 8008198:	138ee001 	orrne	lr, lr, #1
 800819c:	e24440ff 	sub	r4, r4, #255	; 0xff
 80081a0:	e3560c02 	cmp	r6, #512	; 0x200
 80081a4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 80081a8:	2a000002 	bcs	80081b8 <__aeabi_dmul+0x84>
 80081ac:	e1b0e08e 	lsls	lr, lr, #1
 80081b0:	e0b55005 	adcs	r5, r5, r5
 80081b4:	e0a66006 	adc	r6, r6, r6
 80081b8:	e1821586 	orr	r1, r2, r6, lsl #11
 80081bc:	e1811aa5 	orr	r1, r1, r5, lsr #21
 80081c0:	e1a00585 	lsl	r0, r5, #11
 80081c4:	e1800aae 	orr	r0, r0, lr, lsr #21
 80081c8:	e1a0e58e 	lsl	lr, lr, #11
 80081cc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 80081d0:	835c0c07 	cmphi	ip, #1792	; 0x700
 80081d4:	8a000011 	bhi	8008220 <__aeabi_dmul+0xec>
 80081d8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 80081dc:	01b0e0a0 	lsrseq	lr, r0, #1
 80081e0:	e2b00000 	adcs	r0, r0, #0
 80081e4:	e0a11a04 	adc	r1, r1, r4, lsl #20
 80081e8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80081ec:	e12fff1e 	bx	lr
 80081f0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 80081f4:	e1861001 	orr	r1, r6, r1
 80081f8:	e1800002 	orr	r0, r0, r2
 80081fc:	e0211003 	eor	r1, r1, r3
 8008200:	e05440ac 	subs	r4, r4, ip, lsr #1
 8008204:	c074500c 	rsbsgt	r5, r4, ip
 8008208:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 800820c:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8008210:	c12fff1e 	bxgt	lr
 8008214:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8008218:	e3a0e000 	mov	lr, #0
 800821c:	e2544001 	subs	r4, r4, #1
 8008220:	ca00005d 	bgt	800839c <__aeabi_dmul+0x268>
 8008224:	e3740036 	cmn	r4, #54	; 0x36
 8008228:	d3a00000 	movle	r0, #0
 800822c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 8008230:	d8bd4070 	pople	{r4, r5, r6, lr}
 8008234:	d12fff1e 	bxle	lr
 8008238:	e2644000 	rsb	r4, r4, #0
 800823c:	e2544020 	subs	r4, r4, #32
 8008240:	aa00001a 	bge	80082b0 <__aeabi_dmul+0x17c>
 8008244:	e294400c 	adds	r4, r4, #12
 8008248:	ca00000c 	bgt	8008280 <__aeabi_dmul+0x14c>
 800824c:	e2844014 	add	r4, r4, #20
 8008250:	e2645020 	rsb	r5, r4, #32
 8008254:	e1a03510 	lsl	r3, r0, r5
 8008258:	e1a00430 	lsr	r0, r0, r4
 800825c:	e1800511 	orr	r0, r0, r1, lsl r5
 8008260:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 8008264:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 8008268:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800826c:	e0a21431 	adc	r1, r2, r1, lsr r4
 8008270:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8008274:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 8008278:	e8bd4070 	pop	{r4, r5, r6, lr}
 800827c:	e12fff1e 	bx	lr
 8008280:	e264400c 	rsb	r4, r4, #12
 8008284:	e2645020 	rsb	r5, r4, #32
 8008288:	e1a03410 	lsl	r3, r0, r4
 800828c:	e1a00530 	lsr	r0, r0, r5
 8008290:	e1800411 	orr	r0, r0, r1, lsl r4
 8008294:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8008298:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800829c:	e2a11000 	adc	r1, r1, #0
 80082a0:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80082a4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80082a8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80082ac:	e12fff1e 	bx	lr
 80082b0:	e2645020 	rsb	r5, r4, #32
 80082b4:	e18ee510 	orr	lr, lr, r0, lsl r5
 80082b8:	e1a03430 	lsr	r3, r0, r4
 80082bc:	e1833511 	orr	r3, r3, r1, lsl r5
 80082c0:	e1a00431 	lsr	r0, r1, r4
 80082c4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80082c8:	e1c00431 	bic	r0, r0, r1, lsr r4
 80082cc:	e0800fa3 	add	r0, r0, r3, lsr #31
 80082d0:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80082d4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80082d8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80082dc:	e12fff1e 	bx	lr
 80082e0:	e3340000 	teq	r4, #0
 80082e4:	1a000008 	bne	800830c <__aeabi_dmul+0x1d8>
 80082e8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 80082ec:	e1b00080 	lsls	r0, r0, #1
 80082f0:	e0a11001 	adc	r1, r1, r1
 80082f4:	e3110601 	tst	r1, #1048576	; 0x100000
 80082f8:	02444001 	subeq	r4, r4, #1
 80082fc:	0afffffa 	beq	80082ec <__aeabi_dmul+0x1b8>
 8008300:	e1811006 	orr	r1, r1, r6
 8008304:	e3350000 	teq	r5, #0
 8008308:	112fff1e 	bxne	lr
 800830c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 8008310:	e1b02082 	lsls	r2, r2, #1
 8008314:	e0a33003 	adc	r3, r3, r3
 8008318:	e3130601 	tst	r3, #1048576	; 0x100000
 800831c:	02455001 	subeq	r5, r5, #1
 8008320:	0afffffa 	beq	8008310 <__aeabi_dmul+0x1dc>
 8008324:	e1833006 	orr	r3, r3, r6
 8008328:	e12fff1e 	bx	lr
 800832c:	e134000c 	teq	r4, ip
 8008330:	e00c5a23 	and	r5, ip, r3, lsr #20
 8008334:	1135000c 	teqne	r5, ip
 8008338:	0a000007 	beq	800835c <__aeabi_dmul+0x228>
 800833c:	e1906081 	orrs	r6, r0, r1, lsl #1
 8008340:	11926083 	orrsne	r6, r2, r3, lsl #1
 8008344:	1affffe5 	bne	80082e0 <__aeabi_dmul+0x1ac>
 8008348:	e0211003 	eor	r1, r1, r3
 800834c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8008350:	e3a00000 	mov	r0, #0
 8008354:	e8bd4070 	pop	{r4, r5, r6, lr}
 8008358:	e12fff1e 	bx	lr
 800835c:	e1906081 	orrs	r6, r0, r1, lsl #1
 8008360:	01a00002 	moveq	r0, r2
 8008364:	01a01003 	moveq	r1, r3
 8008368:	11926083 	orrsne	r6, r2, r3, lsl #1
 800836c:	0a000010 	beq	80083b4 <__aeabi_dmul+0x280>
 8008370:	e134000c 	teq	r4, ip
 8008374:	1a000001 	bne	8008380 <__aeabi_dmul+0x24c>
 8008378:	e1906601 	orrs	r6, r0, r1, lsl #12
 800837c:	1a00000c 	bne	80083b4 <__aeabi_dmul+0x280>
 8008380:	e135000c 	teq	r5, ip
 8008384:	1a000003 	bne	8008398 <__aeabi_dmul+0x264>
 8008388:	e1926603 	orrs	r6, r2, r3, lsl #12
 800838c:	11a00002 	movne	r0, r2
 8008390:	11a01003 	movne	r1, r3
 8008394:	1a000006 	bne	80083b4 <__aeabi_dmul+0x280>
 8008398:	e0211003 	eor	r1, r1, r3
 800839c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80083a0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 80083a4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 80083a8:	e3a00000 	mov	r0, #0
 80083ac:	e8bd4070 	pop	{r4, r5, r6, lr}
 80083b0:	e12fff1e 	bx	lr
 80083b4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 80083b8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 80083bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80083c0:	e12fff1e 	bx	lr

080083c4 <__aeabi_ddiv>:
 80083c4:	e92d4070 	push	{r4, r5, r6, lr}
 80083c8:	e3a0c0ff 	mov	ip, #255	; 0xff
 80083cc:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 80083d0:	e01c4a21 	ands	r4, ip, r1, lsr #20
 80083d4:	101c5a23 	andsne	r5, ip, r3, lsr #20
 80083d8:	1134000c 	teqne	r4, ip
 80083dc:	1135000c 	teqne	r5, ip
 80083e0:	0b00005e 	bleq	8008560 <__aeabi_ddiv+0x19c>
 80083e4:	e0444005 	sub	r4, r4, r5
 80083e8:	e021e003 	eor	lr, r1, r3
 80083ec:	e1925603 	orrs	r5, r2, r3, lsl #12
 80083f0:	e1a01601 	lsl	r1, r1, #12
 80083f4:	0a00004c 	beq	800852c <__aeabi_ddiv+0x168>
 80083f8:	e1a03603 	lsl	r3, r3, #12
 80083fc:	e3a05201 	mov	r5, #268435456	; 0x10000000
 8008400:	e1853223 	orr	r3, r5, r3, lsr #4
 8008404:	e1833c22 	orr	r3, r3, r2, lsr #24
 8008408:	e1a02402 	lsl	r2, r2, #8
 800840c:	e1855221 	orr	r5, r5, r1, lsr #4
 8008410:	e1855c20 	orr	r5, r5, r0, lsr #24
 8008414:	e1a06400 	lsl	r6, r0, #8
 8008418:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 800841c:	e1550003 	cmp	r5, r3
 8008420:	01560002 	cmpeq	r6, r2
 8008424:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 8008428:	e2844c03 	add	r4, r4, #768	; 0x300
 800842c:	2a000001 	bcs	8008438 <__aeabi_ddiv+0x74>
 8008430:	e1b030a3 	lsrs	r3, r3, #1
 8008434:	e1a02062 	rrx	r2, r2
 8008438:	e0566002 	subs	r6, r6, r2
 800843c:	e0c55003 	sbc	r5, r5, r3
 8008440:	e1b030a3 	lsrs	r3, r3, #1
 8008444:	e1a02062 	rrx	r2, r2
 8008448:	e3a00601 	mov	r0, #1048576	; 0x100000
 800844c:	e3a0c702 	mov	ip, #524288	; 0x80000
 8008450:	e056e002 	subs	lr, r6, r2
 8008454:	e0d5e003 	sbcs	lr, r5, r3
 8008458:	20466002 	subcs	r6, r6, r2
 800845c:	21a0500e 	movcs	r5, lr
 8008460:	2180000c 	orrcs	r0, r0, ip
 8008464:	e1b030a3 	lsrs	r3, r3, #1
 8008468:	e1a02062 	rrx	r2, r2
 800846c:	e056e002 	subs	lr, r6, r2
 8008470:	e0d5e003 	sbcs	lr, r5, r3
 8008474:	20466002 	subcs	r6, r6, r2
 8008478:	21a0500e 	movcs	r5, lr
 800847c:	218000ac 	orrcs	r0, r0, ip, lsr #1
 8008480:	e1b030a3 	lsrs	r3, r3, #1
 8008484:	e1a02062 	rrx	r2, r2
 8008488:	e056e002 	subs	lr, r6, r2
 800848c:	e0d5e003 	sbcs	lr, r5, r3
 8008490:	20466002 	subcs	r6, r6, r2
 8008494:	21a0500e 	movcs	r5, lr
 8008498:	2180012c 	orrcs	r0, r0, ip, lsr #2
 800849c:	e1b030a3 	lsrs	r3, r3, #1
 80084a0:	e1a02062 	rrx	r2, r2
 80084a4:	e056e002 	subs	lr, r6, r2
 80084a8:	e0d5e003 	sbcs	lr, r5, r3
 80084ac:	20466002 	subcs	r6, r6, r2
 80084b0:	21a0500e 	movcs	r5, lr
 80084b4:	218001ac 	orrcs	r0, r0, ip, lsr #3
 80084b8:	e195e006 	orrs	lr, r5, r6
 80084bc:	0a00000d 	beq	80084f8 <__aeabi_ddiv+0x134>
 80084c0:	e1a05205 	lsl	r5, r5, #4
 80084c4:	e1855e26 	orr	r5, r5, r6, lsr #28
 80084c8:	e1a06206 	lsl	r6, r6, #4
 80084cc:	e1a03183 	lsl	r3, r3, #3
 80084d0:	e1833ea2 	orr	r3, r3, r2, lsr #29
 80084d4:	e1a02182 	lsl	r2, r2, #3
 80084d8:	e1b0c22c 	lsrs	ip, ip, #4
 80084dc:	1affffdb 	bne	8008450 <__aeabi_ddiv+0x8c>
 80084e0:	e3110601 	tst	r1, #1048576	; 0x100000
 80084e4:	1a000006 	bne	8008504 <__aeabi_ddiv+0x140>
 80084e8:	e1811000 	orr	r1, r1, r0
 80084ec:	e3a00000 	mov	r0, #0
 80084f0:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 80084f4:	eaffffd5 	b	8008450 <__aeabi_ddiv+0x8c>
 80084f8:	e3110601 	tst	r1, #1048576	; 0x100000
 80084fc:	01811000 	orreq	r1, r1, r0
 8008500:	03a00000 	moveq	r0, #0
 8008504:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 8008508:	835c0c07 	cmphi	ip, #1792	; 0x700
 800850c:	8affff43 	bhi	8008220 <__aeabi_dmul+0xec>
 8008510:	e055c003 	subs	ip, r5, r3
 8008514:	0056c002 	subseq	ip, r6, r2
 8008518:	01b0c0a0 	lsrseq	ip, r0, #1
 800851c:	e2b00000 	adcs	r0, r0, #0
 8008520:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8008524:	e8bd4070 	pop	{r4, r5, r6, lr}
 8008528:	e12fff1e 	bx	lr
 800852c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 8008530:	e18e1621 	orr	r1, lr, r1, lsr #12
 8008534:	e09440ac 	adds	r4, r4, ip, lsr #1
 8008538:	c074500c 	rsbsgt	r5, r4, ip
 800853c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 8008540:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8008544:	c12fff1e 	bxgt	lr
 8008548:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800854c:	e3a0e000 	mov	lr, #0
 8008550:	e2544001 	subs	r4, r4, #1
 8008554:	eaffff31 	b	8008220 <__aeabi_dmul+0xec>
 8008558:	e185e006 	orr	lr, r5, r6
 800855c:	eaffff2f 	b	8008220 <__aeabi_dmul+0xec>
 8008560:	e00c5a23 	and	r5, ip, r3, lsr #20
 8008564:	e134000c 	teq	r4, ip
 8008568:	0135000c 	teqeq	r5, ip
 800856c:	0affff90 	beq	80083b4 <__aeabi_dmul+0x280>
 8008570:	e134000c 	teq	r4, ip
 8008574:	1a000006 	bne	8008594 <__aeabi_ddiv+0x1d0>
 8008578:	e1904601 	orrs	r4, r0, r1, lsl #12
 800857c:	1affff8c 	bne	80083b4 <__aeabi_dmul+0x280>
 8008580:	e135000c 	teq	r5, ip
 8008584:	1affff83 	bne	8008398 <__aeabi_dmul+0x264>
 8008588:	e1a00002 	mov	r0, r2
 800858c:	e1a01003 	mov	r1, r3
 8008590:	eaffff87 	b	80083b4 <__aeabi_dmul+0x280>
 8008594:	e135000c 	teq	r5, ip
 8008598:	1a000004 	bne	80085b0 <__aeabi_ddiv+0x1ec>
 800859c:	e1925603 	orrs	r5, r2, r3, lsl #12
 80085a0:	0affff68 	beq	8008348 <__aeabi_dmul+0x214>
 80085a4:	e1a00002 	mov	r0, r2
 80085a8:	e1a01003 	mov	r1, r3
 80085ac:	eaffff80 	b	80083b4 <__aeabi_dmul+0x280>
 80085b0:	e1906081 	orrs	r6, r0, r1, lsl #1
 80085b4:	11926083 	orrsne	r6, r2, r3, lsl #1
 80085b8:	1affff48 	bne	80082e0 <__aeabi_dmul+0x1ac>
 80085bc:	e1904081 	orrs	r4, r0, r1, lsl #1
 80085c0:	1affff74 	bne	8008398 <__aeabi_dmul+0x264>
 80085c4:	e1925083 	orrs	r5, r2, r3, lsl #1
 80085c8:	1affff5e 	bne	8008348 <__aeabi_dmul+0x214>
 80085cc:	eaffff78 	b	80083b4 <__aeabi_dmul+0x280>

080085d0 <__gedf2>:
 80085d0:	e3e0c000 	mvn	ip, #0
 80085d4:	ea000002 	b	80085e4 <__cmpdf2+0x4>

080085d8 <__ledf2>:
 80085d8:	e3a0c001 	mov	ip, #1
 80085dc:	ea000000 	b	80085e4 <__cmpdf2+0x4>

080085e0 <__cmpdf2>:
 80085e0:	e3a0c001 	mov	ip, #1
 80085e4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 80085e8:	e1a0c081 	lsl	ip, r1, #1
 80085ec:	e1f0cacc 	mvns	ip, ip, asr #21
 80085f0:	e1a0c083 	lsl	ip, r3, #1
 80085f4:	11f0cacc 	mvnsne	ip, ip, asr #21
 80085f8:	0a00000e 	beq	8008638 <__cmpdf2+0x58>
 80085fc:	e28dd004 	add	sp, sp, #4
 8008600:	e190c081 	orrs	ip, r0, r1, lsl #1
 8008604:	0192c083 	orrseq	ip, r2, r3, lsl #1
 8008608:	11310003 	teqne	r1, r3
 800860c:	01300002 	teqeq	r0, r2
 8008610:	03a00000 	moveq	r0, #0
 8008614:	012fff1e 	bxeq	lr
 8008618:	e3700000 	cmn	r0, #0
 800861c:	e1310003 	teq	r1, r3
 8008620:	51510003 	cmppl	r1, r3
 8008624:	01500002 	cmpeq	r0, r2
 8008628:	21a00fc3 	asrcs	r0, r3, #31
 800862c:	31e00fc3 	mvncc	r0, r3, asr #31
 8008630:	e3800001 	orr	r0, r0, #1
 8008634:	e12fff1e 	bx	lr
 8008638:	e1a0c081 	lsl	ip, r1, #1
 800863c:	e1f0cacc 	mvns	ip, ip, asr #21
 8008640:	1a000001 	bne	800864c <__cmpdf2+0x6c>
 8008644:	e190c601 	orrs	ip, r0, r1, lsl #12
 8008648:	1a000004 	bne	8008660 <__cmpdf2+0x80>
 800864c:	e1a0c083 	lsl	ip, r3, #1
 8008650:	e1f0cacc 	mvns	ip, ip, asr #21
 8008654:	1affffe8 	bne	80085fc <__cmpdf2+0x1c>
 8008658:	e192c603 	orrs	ip, r2, r3, lsl #12
 800865c:	0affffe6 	beq	80085fc <__cmpdf2+0x1c>
 8008660:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 8008664:	e12fff1e 	bx	lr

08008668 <__aeabi_cdrcmple>:
 8008668:	e1a0c000 	mov	ip, r0
 800866c:	e1a00002 	mov	r0, r2
 8008670:	e1a0200c 	mov	r2, ip
 8008674:	e1a0c001 	mov	ip, r1
 8008678:	e1a01003 	mov	r1, r3
 800867c:	e1a0300c 	mov	r3, ip
 8008680:	eaffffff 	b	8008684 <__aeabi_cdcmpeq>

08008684 <__aeabi_cdcmpeq>:
 8008684:	e92d4001 	push	{r0, lr}
 8008688:	ebffffd4 	bl	80085e0 <__cmpdf2>
 800868c:	e3500000 	cmp	r0, #0
 8008690:	43700000 	cmnmi	r0, #0
 8008694:	e8bd4001 	pop	{r0, lr}
 8008698:	e12fff1e 	bx	lr

0800869c <__aeabi_dcmpeq>:
 800869c:	e52de008 	str	lr, [sp, #-8]!
 80086a0:	ebfffff7 	bl	8008684 <__aeabi_cdcmpeq>
 80086a4:	03a00001 	moveq	r0, #1
 80086a8:	13a00000 	movne	r0, #0
 80086ac:	e49de008 	ldr	lr, [sp], #8
 80086b0:	e12fff1e 	bx	lr

080086b4 <__aeabi_dcmplt>:
 80086b4:	e52de008 	str	lr, [sp, #-8]!
 80086b8:	ebfffff1 	bl	8008684 <__aeabi_cdcmpeq>
 80086bc:	33a00001 	movcc	r0, #1
 80086c0:	23a00000 	movcs	r0, #0
 80086c4:	e49de008 	ldr	lr, [sp], #8
 80086c8:	e12fff1e 	bx	lr

080086cc <__aeabi_dcmple>:
 80086cc:	e52de008 	str	lr, [sp, #-8]!
 80086d0:	ebffffeb 	bl	8008684 <__aeabi_cdcmpeq>
 80086d4:	93a00001 	movls	r0, #1
 80086d8:	83a00000 	movhi	r0, #0
 80086dc:	e49de008 	ldr	lr, [sp], #8
 80086e0:	e12fff1e 	bx	lr

080086e4 <__aeabi_dcmpge>:
 80086e4:	e52de008 	str	lr, [sp, #-8]!
 80086e8:	ebffffde 	bl	8008668 <__aeabi_cdrcmple>
 80086ec:	93a00001 	movls	r0, #1
 80086f0:	83a00000 	movhi	r0, #0
 80086f4:	e49de008 	ldr	lr, [sp], #8
 80086f8:	e12fff1e 	bx	lr

080086fc <__aeabi_dcmpgt>:
 80086fc:	e52de008 	str	lr, [sp, #-8]!
 8008700:	ebffffd8 	bl	8008668 <__aeabi_cdrcmple>
 8008704:	33a00001 	movcc	r0, #1
 8008708:	23a00000 	movcs	r0, #0
 800870c:	e49de008 	ldr	lr, [sp], #8
 8008710:	e12fff1e 	bx	lr

08008714 <__aeabi_d2iz>:
 8008714:	e1a02081 	lsl	r2, r1, #1
 8008718:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 800871c:	2a00000c 	bcs	8008754 <__aeabi_d2iz+0x40>
 8008720:	5a000009 	bpl	800874c <__aeabi_d2iz+0x38>
 8008724:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 8008728:	e0532ac2 	subs	r2, r3, r2, asr #21
 800872c:	9a00000a 	bls	800875c <__aeabi_d2iz+0x48>
 8008730:	e1a03581 	lsl	r3, r1, #11
 8008734:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 8008738:	e1833aa0 	orr	r3, r3, r0, lsr #21
 800873c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8008740:	e1a00233 	lsr	r0, r3, r2
 8008744:	12600000 	rsbne	r0, r0, #0
 8008748:	e12fff1e 	bx	lr
 800874c:	e3a00000 	mov	r0, #0
 8008750:	e12fff1e 	bx	lr
 8008754:	e1900601 	orrs	r0, r0, r1, lsl #12
 8008758:	1a000002 	bne	8008768 <__aeabi_d2iz+0x54>
 800875c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 8008760:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 8008764:	e12fff1e 	bx	lr
 8008768:	e3a00000 	mov	r0, #0
 800876c:	e12fff1e 	bx	lr

08008770 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 8008770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008774:	b09b      	sub	sp, #108	; 0x6c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8008776:	f7f7 fe61 	bl	800043c <TIM2_timer_start>

	usart_begin(&Serial3, PB11, PB10, 19200);
 800877a:	f240 220a 	movw	r2, #522	; 0x20a
 800877e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008782:	48ae      	ldr	r0, [pc, #696]	; (8008a3c <main+0x2cc>)
 8008784:	f240 210b 	movw	r1, #523	; 0x20b
 8008788:	f7f8 fad1 	bl	8000d2e <usart_begin>
	usart_print(&Serial3,
 800878c:	48ab      	ldr	r0, [pc, #684]	; (8008a3c <main+0x2cc>)
 800878e:	49ac      	ldr	r1, [pc, #688]	; (8008a40 <main+0x2d0>)
 8008790:	f7f8 fc12 	bl	8000fb8 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial3, "The kingdom of heaven belongs to them!\n");
 8008794:	48a9      	ldr	r0, [pc, #676]	; (8008a3c <main+0x2cc>)
 8008796:	49ab      	ldr	r1, [pc, #684]	; (8008a44 <main+0x2d4>)
 8008798:	f7f8 fc0e 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "How many eyes does Mississipi river have?\n");
 800879c:	48a7      	ldr	r0, [pc, #668]	; (8008a3c <main+0x2cc>)
 800879e:	49aa      	ldr	r1, [pc, #680]	; (8008a48 <main+0x2d8>)
 80087a0:	f7f8 fc0a 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "Quick brown fox jumped over the lazy dog!\n");
 80087a4:	49a9      	ldr	r1, [pc, #676]	; (8008a4c <main+0x2dc>)
 80087a6:	48a5      	ldr	r0, [pc, #660]	; (8008a3c <main+0x2cc>)
 80087a8:	f7f8 fc06 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 80087ac:	48a3      	ldr	r0, [pc, #652]	; (8008a3c <main+0x2cc>)
 80087ae:	f7f8 fc1b 	bl	8000fe8 <usart_flush>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087b2:	f240 400c 	movw	r0, #1036	; 0x40c
 80087b6:	f7f7 fed7 	bl	8000568 <PinPort>
 80087ba:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087bc:	f240 400c 	movw	r0, #1036	; 0x40c
 80087c0:	f7f7 feda 	bl	8000578 <PinBit>
 80087c4:	4605      	mov	r5, r0
 80087c6:	f240 400d 	movw	r0, #1037	; 0x40d
 80087ca:	f7f7 fed5 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087ce:	4328      	orrs	r0, r5
 80087d0:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087d2:	f240 400e 	movw	r0, #1038	; 0x40e
 80087d6:	f7f7 fecf 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087da:	4328      	orrs	r0, r5
 80087dc:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 80087de:	f240 400f 	movw	r0, #1039	; 0x40f
 80087e2:	f7f7 fec9 	bl	8000578 <PinBit>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087e6:	2300      	movs	r3, #0
 80087e8:	ea45 0100 	orr.w	r1, r5, r0
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4620      	mov	r0, r4
 80087f0:	9301      	str	r3, [sp, #4]
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 80087f2:	f44f 7403 	mov.w	r4, #524	; 0x20c
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/

	GPIOMode(PinPort(PD12),
 80087f6:	b289      	uxth	r1, r1
 80087f8:	2201      	movs	r2, #1
 80087fa:	2302      	movs	r3, #2
 80087fc:	f7f7 ff24 	bl	8000648 <GPIOMode>
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
			FASTSPEED, PUSHPULL, NOPULL);
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008800:	f240 230f 	movw	r3, #527	; 0x20f
 8008804:	f240 220e 	movw	r2, #526	; 0x20e
 8008808:	9400      	str	r4, [sp, #0]
 800880a:	4891      	ldr	r0, [pc, #580]	; (8008a50 <main+0x2e0>)
 800880c:	f240 210d 	movw	r1, #525	; 0x20d
 8008810:	f7f8 f920 	bl	8000a54 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008814:	4620      	mov	r0, r4
 8008816:	2101      	movs	r1, #1
 8008818:	f7f7 fede 	bl	80005d8 <digitalWrite>

	usart_print(&Serial3, "Begin I2C1.\n");
 800881c:	498d      	ldr	r1, [pc, #564]	; (8008a54 <main+0x2e4>)
 800881e:	4887      	ldr	r0, [pc, #540]	; (8008a3c <main+0x2cc>)
 8008820:	f7f8 fbca 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 8008824:	4885      	ldr	r0, [pc, #532]	; (8008a3c <main+0x2cc>)
 8008826:	f7f8 fbdf 	bl	8000fe8 <usart_flush>
	i2c_begin(&Wire1, 100000);
 800882a:	498b      	ldr	r1, [pc, #556]	; (8008a58 <main+0x2e8>)
 800882c:	488b      	ldr	r0, [pc, #556]	; (8008a5c <main+0x2ec>)
 800882e:	f7f7 ff67 	bl	8000700 <i2c_begin>
	usart_print(&Serial3, "Init st7032i.\n");
 8008832:	498b      	ldr	r1, [pc, #556]	; (8008a60 <main+0x2f0>)
 8008834:	4881      	ldr	r0, [pc, #516]	; (8008a3c <main+0x2cc>)
 8008836:	f7f8 fbbf 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800883a:	4880      	ldr	r0, [pc, #512]	; (8008a3c <main+0x2cc>)
 800883c:	f7f8 fbd4 	bl	8000fe8 <usart_flush>
	ST7032i_init(&lcd, &Wire1);
 8008840:	4986      	ldr	r1, [pc, #536]	; (8008a5c <main+0x2ec>)
 8008842:	4888      	ldr	r0, [pc, #544]	; (8008a64 <main+0x2f4>)
 8008844:	f7f7 fca0 	bl	8000188 <ST7032i_init>
	ST7032i_begin(&lcd);
 8008848:	4886      	ldr	r0, [pc, #536]	; (8008a64 <main+0x2f4>)
 800884a:	f7f7 fd4b 	bl	80002e4 <ST7032i_begin>
	usart_print(&Serial3, "st7032i has started.\n");
 800884e:	4986      	ldr	r1, [pc, #536]	; (8008a68 <main+0x2f8>)
 8008850:	487a      	ldr	r0, [pc, #488]	; (8008a3c <main+0x2cc>)
 8008852:	f7f8 fbb1 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 8008856:	4879      	ldr	r0, [pc, #484]	; (8008a3c <main+0x2cc>)
 8008858:	f7f8 fbc6 	bl	8000fe8 <usart_flush>
	ST7032i_setContrast(&lcd, 40);
 800885c:	4881      	ldr	r0, [pc, #516]	; (8008a64 <main+0x2f4>)
 800885e:	2128      	movs	r1, #40	; 0x28
 8008860:	f7f7 fcd2 	bl	8000208 <ST7032i_setContrast>
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
 8008864:	4981      	ldr	r1, [pc, #516]	; (8008a6c <main+0x2fc>)
 8008866:	487f      	ldr	r0, [pc, #508]	; (8008a64 <main+0x2f4>)
 8008868:	f7f7 fcbf 	bl	80001ea <ST7032i_print>

	bits = GPIO_ReadOutputData(GPIOD );
 800886c:	4880      	ldr	r0, [pc, #512]	; (8008a70 <main+0x300>)
 800886e:	f7f8 fdef 	bl	8001450 <GPIO_ReadOutputData>
 8008872:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008874:	f240 400d 	movw	r0, #1037	; 0x40d
 8008878:	f7f7 fe7e 	bl	8000578 <PinBit>
 800887c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8008880:	ea40 0104 	orr.w	r1, r0, r4
 8008884:	b289      	uxth	r1, r1
 8008886:	487a      	ldr	r0, [pc, #488]	; (8008a70 <main+0x300>)
 8008888:	f7f7 ff38 	bl	80006fc <GPIOWrite>
	delay_ms(intval);
 800888c:	2028      	movs	r0, #40	; 0x28
 800888e:	f7f7 fe2f 	bl	80004f0 <delay_ms>
	tnow = millis() / 1000;
 8008892:	f7f7 fe27 	bl	80004e4 <millis>
 8008896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800889a:	fbb0 f4f3 	udiv	r4, r0, r3
	while (tnow == millis() / 1000)
 800889e:	461d      	mov	r5, r3
 80088a0:	f7f7 fe20 	bl	80004e4 <millis>
 80088a4:	fbb0 f0f5 	udiv	r0, r0, r5
 80088a8:	4284      	cmp	r4, r0
 80088aa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80088ae:	d0f7      	beq.n	80088a0 <main+0x130>
		;
	tnow = millis() / 1000;
 80088b0:	f7f7 fe18 	bl	80004e4 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 80088b4:	46b9      	mov	r9, r7
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 80088b6:	fbb0 f6f7 	udiv	r6, r0, r7
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;

		sprintf(tmp, "%04ld", millis());
 80088ba:	ad03      	add	r5, sp, #12
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 80088bc:	486c      	ldr	r0, [pc, #432]	; (8008a70 <main+0x300>)
 80088be:	f7f8 fdc7 	bl	8001450 <GPIO_ReadOutputData>
 80088c2:	4604      	mov	r4, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 80088c4:	f240 400d 	movw	r0, #1037	; 0x40d
 80088c8:	f7f7 fe56 	bl	8000578 <PinBit>
 80088cc:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80088d0:	b2a4      	uxth	r4, r4
 80088d2:	ea44 0100 	orr.w	r1, r4, r0
 80088d6:	b289      	uxth	r1, r1
 80088d8:	4865      	ldr	r0, [pc, #404]	; (8008a70 <main+0x300>)
 80088da:	f7f7 ff0f 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 80088de:	2028      	movs	r0, #40	; 0x28
 80088e0:	f7f7 fe06 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 80088e4:	f240 400e 	movw	r0, #1038	; 0x40e
 80088e8:	f7f7 fe46 	bl	8000578 <PinBit>
 80088ec:	ea44 0100 	orr.w	r1, r4, r0
 80088f0:	b289      	uxth	r1, r1
 80088f2:	485f      	ldr	r0, [pc, #380]	; (8008a70 <main+0x300>)
 80088f4:	f7f7 ff02 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 80088f8:	2028      	movs	r0, #40	; 0x28
 80088fa:	f7f7 fdf9 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 80088fe:	f240 400f 	movw	r0, #1039	; 0x40f
 8008902:	f7f7 fe39 	bl	8000578 <PinBit>
 8008906:	ea44 0100 	orr.w	r1, r4, r0
 800890a:	b289      	uxth	r1, r1
 800890c:	4858      	ldr	r0, [pc, #352]	; (8008a70 <main+0x300>)
 800890e:	f7f7 fef5 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 8008912:	2028      	movs	r0, #40	; 0x28
 8008914:	f7f7 fdec 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8008918:	f240 400c 	movw	r0, #1036	; 0x40c
 800891c:	f7f7 fe2c 	bl	8000578 <PinBit>
 8008920:	ea44 0100 	orr.w	r1, r4, r0
 8008924:	b289      	uxth	r1, r1
 8008926:	4852      	ldr	r0, [pc, #328]	; (8008a70 <main+0x300>)
 8008928:	f7f7 fee8 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800892c:	2028      	movs	r0, #40	; 0x28
 800892e:	f7f7 fddf 	bl	80004f0 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 8008932:	233c      	movs	r3, #60	; 0x3c
 8008934:	fbb6 f2f3 	udiv	r2, r6, r3
 8008938:	fb03 6312 	mls	r3, r3, r2, r6
 800893c:	220f      	movs	r2, #15
 800893e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008942:	2b02      	cmp	r3, #2
 8008944:	d00a      	beq.n	800895c <main+0x1ec>
 8008946:	2b03      	cmp	r3, #3
 8008948:	d002      	beq.n	8008950 <main+0x1e0>
 800894a:	2b01      	cmp	r3, #1
 800894c:	d112      	bne.n	8008974 <main+0x204>
 800894e:	e00b      	b.n	8008968 <main+0x1f8>
		case 3:
			bits |= PinBit(PD12);
 8008950:	f240 400c 	movw	r0, #1036	; 0x40c
 8008954:	f7f7 fe10 	bl	8000578 <PinBit>
 8008958:	4320      	orrs	r0, r4
 800895a:	b284      	uxth	r4, r0
		case 2:
			bits |= PinBit(PD15);
 800895c:	f240 400f 	movw	r0, #1039	; 0x40f
 8008960:	f7f7 fe0a 	bl	8000578 <PinBit>
 8008964:	4320      	orrs	r0, r4
 8008966:	b284      	uxth	r4, r0
		case 1:
			bits |= PinBit(PD14);
 8008968:	f240 400e 	movw	r0, #1038	; 0x40e
 800896c:	f7f7 fe04 	bl	8000578 <PinBit>
 8008970:	4320      	orrs	r0, r4
 8008972:	b284      	uxth	r4, r0
		case 0:
		default:
			bits |= PinBit(PD13);
 8008974:	f240 400d 	movw	r0, #1037	; 0x40d
 8008978:	f7f7 fdfe 	bl	8000578 <PinBit>
 800897c:	ea40 0104 	orr.w	r1, r0, r4
			break;
		}
		GPIOWrite(GPIOD, bits);
 8008980:	b289      	uxth	r1, r1
 8008982:	483b      	ldr	r0, [pc, #236]	; (8008a70 <main+0x300>)
 8008984:	f7f7 feba 	bl	80006fc <GPIOWrite>

		while (tnow == millis() / 1000);
 8008988:	f7f7 fdac 	bl	80004e4 <millis>
 800898c:	fbb0 f0f7 	udiv	r0, r0, r7
 8008990:	4286      	cmp	r6, r0
 8008992:	d0f9      	beq.n	8008988 <main+0x218>
		tnow = millis() / 1000;
 8008994:	f7f7 fda6 	bl	80004e4 <millis>
 8008998:	fbb0 f6f9 	udiv	r6, r0, r9

		sprintf(tmp, "%04ld", millis());
 800899c:	f7f7 fda2 	bl	80004e4 <millis>
 80089a0:	4934      	ldr	r1, [pc, #208]	; (8008a74 <main+0x304>)
 80089a2:	4602      	mov	r2, r0
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7fa fcc7 	bl	8003338 <sprintf>
		usart_print(&Serial3, tmp);
 80089aa:	4824      	ldr	r0, [pc, #144]	; (8008a3c <main+0x2cc>)
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7f8 fb03 	bl	8000fb8 <usart_print>
		usart_print(&Serial3, "\n");
 80089b2:	4822      	ldr	r0, [pc, #136]	; (8008a3c <main+0x2cc>)
 80089b4:	4930      	ldr	r1, [pc, #192]	; (8008a78 <main+0x308>)
 80089b6:	f7f8 faff 	bl	8000fb8 <usart_print>

		ST7032i_setCursor(&lcd, 0, 1);
 80089ba:	2201      	movs	r2, #1
 80089bc:	4829      	ldr	r0, [pc, #164]	; (8008a64 <main+0x2f4>)
 80089be:	2100      	movs	r1, #0
 80089c0:	f7f7 fc5f 	bl	8000282 <ST7032i_setCursor>
		ST7032i_print(&lcd, tmp);
 80089c4:	4629      	mov	r1, r5
 80089c6:	4827      	ldr	r0, [pc, #156]	; (8008a64 <main+0x2f4>)
 80089c8:	f7f7 fc0f 	bl	80001ea <ST7032i_print>

		digitalWrite(PB12, LOW);
 80089cc:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80089d0:	2100      	movs	r1, #0
 80089d2:	f7f7 fe01 	bl	80005d8 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *) tmp, 8);
 80089d6:	481e      	ldr	r0, [pc, #120]	; (8008a50 <main+0x2e0>)
 80089d8:	4629      	mov	r1, r5
 80089da:	2208      	movs	r2, #8
 80089dc:	f7f8 f8f0 	bl	8000bc0 <spi_transfer>
		digitalWrite(PB12, HIGH);
 80089e0:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80089e4:	2101      	movs	r1, #1
 80089e6:	f7f7 fdf7 	bl	80005d8 <digitalWrite>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 80089ea:	4814      	ldr	r0, [pc, #80]	; (8008a3c <main+0x2cc>)
 80089ec:	f7f8 fb18 	bl	8001020 <usart_available>
 80089f0:	b930      	cbnz	r0, 8008a00 <main+0x290>
 80089f2:	e763      	b.n	80088bc <main+0x14c>
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
 80089f4:	4811      	ldr	r0, [pc, #68]	; (8008a3c <main+0x2cc>)
 80089f6:	f7f8 faed 	bl	8000fd4 <usart_read>
 80089fa:	5528      	strb	r0, [r5, r4]
 80089fc:	3401      	adds	r4, #1
 80089fe:	e000      	b.n	8008a02 <main+0x292>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 8008a00:	2400      	movs	r4, #0
			while (usart_available(&Serial3) > 0 && i < 92) {
 8008a02:	480e      	ldr	r0, [pc, #56]	; (8008a3c <main+0x2cc>)
 8008a04:	fa1f f884 	uxth.w	r8, r4
 8008a08:	f7f8 fb0a 	bl	8001020 <usart_available>
 8008a0c:	b110      	cbz	r0, 8008a14 <main+0x2a4>
 8008a0e:	2c5c      	cmp	r4, #92	; 0x5c
 8008a10:	d1f0      	bne.n	80089f4 <main+0x284>
 8008a12:	46a0      	mov	r8, r4
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 8008a14:	aa1a      	add	r2, sp, #104	; 0x68
 8008a16:	eb02 0308 	add.w	r3, r2, r8
			usart_print(&Serial3, "> ");
 8008a1a:	4808      	ldr	r0, [pc, #32]	; (8008a3c <main+0x2cc>)
 8008a1c:	4917      	ldr	r1, [pc, #92]	; (8008a7c <main+0x30c>)
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f803 2c5c 	strb.w	r2, [r3, #-92]
			usart_print(&Serial3, "> ");
 8008a24:	f7f8 fac8 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, tmp);
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4804      	ldr	r0, [pc, #16]	; (8008a3c <main+0x2cc>)
 8008a2c:	f7f8 fac4 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, "\n");
 8008a30:	4802      	ldr	r0, [pc, #8]	; (8008a3c <main+0x2cc>)
 8008a32:	4911      	ldr	r1, [pc, #68]	; (8008a78 <main+0x308>)
 8008a34:	f7f8 fac0 	bl	8000fb8 <usart_print>
 8008a38:	e740      	b.n	80088bc <main+0x14c>
 8008a3a:	bf00      	nop
 8008a3c:	20001018 	.word	0x20001018
 8008a40:	08008f14 	.word	0x08008f14
 8008a44:	08008f4a 	.word	0x08008f4a
 8008a48:	08008f72 	.word	0x08008f72
 8008a4c:	08008f9d 	.word	0x08008f9d
 8008a50:	40003800 	.word	0x40003800
 8008a54:	08008fc8 	.word	0x08008fc8
 8008a58:	000186a0 	.word	0x000186a0
 8008a5c:	200009ac 	.word	0x200009ac
 8008a60:	08008fd5 	.word	0x08008fd5
 8008a64:	2000167c 	.word	0x2000167c
 8008a68:	08008fe4 	.word	0x08008fe4
 8008a6c:	08008ffa 	.word	0x08008ffa
 8008a70:	40020c00 	.word	0x40020c00
 8008a74:	08009004 	.word	0x08009004
 8008a78:	08008f48 	.word	0x08008f48
 8008a7c:	0800900a 	.word	0x0800900a

08008a80 <Reset_Handler>:
 8008a80:	2100      	movs	r1, #0
 8008a82:	e003      	b.n	8008a8c <LoopCopyDataInit>

08008a84 <CopyDataInit>:
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <LoopFillZerobss+0x10>)
 8008a86:	585b      	ldr	r3, [r3, r1]
 8008a88:	5043      	str	r3, [r0, r1]
 8008a8a:	3104      	adds	r1, #4

08008a8c <LoopCopyDataInit>:
 8008a8c:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <LoopFillZerobss+0x14>)
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <LoopFillZerobss+0x18>)
 8008a90:	1842      	adds	r2, r0, r1
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d3f6      	bcc.n	8008a84 <CopyDataInit>
 8008a96:	4a09      	ldr	r2, [pc, #36]	; (8008abc <LoopFillZerobss+0x1c>)
 8008a98:	e002      	b.n	8008aa0 <LoopFillZerobss>

08008a9a <FillZerobss>:
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f842 3b04 	str.w	r3, [r2], #4

08008aa0 <LoopFillZerobss>:
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <LoopFillZerobss+0x20>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d3f9      	bcc.n	8008a9a <FillZerobss>
 8008aa6:	f7fa faef 	bl	8003088 <SystemInit>
 8008aaa:	f7ff fe61 	bl	8008770 <main>
 8008aae:	4770      	bx	lr
 8008ab0:	08009090 	.word	0x08009090
 8008ab4:	20000000 	.word	0x20000000
 8008ab8:	2000095c 	.word	0x2000095c
 8008abc:	2000095c 	.word	0x2000095c
 8008ac0:	20001690 	.word	0x20001690

08008ac4 <ADC_IRQHandler>:
 8008ac4:	e7fe      	b.n	8008ac4 <ADC_IRQHandler>
	...

08008ac8 <____aeabi_idiv0_from_arm>:
 8008ac8:	e51ff004 	ldr	pc, [pc, #-4]	; 8008acc <____aeabi_idiv0_from_arm+0x4>
 8008acc:	08007d15 	.word	0x08007d15
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	00000040 	.word	0x00000040
 8008ad8:	00000014 	.word	0x00000014
 8008adc:	00000054 	.word	0x00000054
 8008ae0:	08003db2 	.word	0x08003db2
 8008ae4:	0800346e 	.word	0x0800346e
 8008ae8:	0800346e 	.word	0x0800346e
 8008aec:	08003dc8 	.word	0x08003dc8
 8008af0:	0800346e 	.word	0x0800346e
 8008af4:	0800346e 	.word	0x0800346e
 8008af8:	0800346e 	.word	0x0800346e
 8008afc:	0800346e 	.word	0x0800346e
 8008b00:	0800346e 	.word	0x0800346e
 8008b04:	0800346e 	.word	0x0800346e
 8008b08:	08003580 	.word	0x08003580
 8008b0c:	08003dd4 	.word	0x08003dd4
 8008b10:	0800346e 	.word	0x0800346e
 8008b14:	08003596 	.word	0x08003596
 8008b18:	08003ea2 	.word	0x08003ea2
 8008b1c:	0800346e 	.word	0x0800346e
 8008b20:	08003d18 	.word	0x08003d18
 8008b24:	08003d24 	.word	0x08003d24
 8008b28:	08003d24 	.word	0x08003d24
 8008b2c:	08003d24 	.word	0x08003d24
 8008b30:	08003d24 	.word	0x08003d24
 8008b34:	08003d24 	.word	0x08003d24
 8008b38:	08003d24 	.word	0x08003d24
 8008b3c:	08003d24 	.word	0x08003d24
 8008b40:	08003d24 	.word	0x08003d24
 8008b44:	08003d24 	.word	0x08003d24
 8008b48:	0800346e 	.word	0x0800346e
 8008b4c:	0800346e 	.word	0x0800346e
 8008b50:	0800346e 	.word	0x0800346e
 8008b54:	0800346e 	.word	0x0800346e
 8008b58:	0800346e 	.word	0x0800346e
 8008b5c:	0800346e 	.word	0x0800346e
 8008b60:	0800346e 	.word	0x0800346e
 8008b64:	0800346e 	.word	0x0800346e
 8008b68:	0800346e 	.word	0x0800346e
 8008b6c:	0800346e 	.word	0x0800346e
 8008b70:	08003556 	.word	0x08003556
 8008b74:	08003cb0 	.word	0x08003cb0
 8008b78:	0800346e 	.word	0x0800346e
 8008b7c:	08003cb0 	.word	0x08003cb0
 8008b80:	0800346e 	.word	0x0800346e
 8008b84:	0800346e 	.word	0x0800346e
 8008b88:	0800346e 	.word	0x0800346e
 8008b8c:	0800346e 	.word	0x0800346e
 8008b90:	08003d4a 	.word	0x08003d4a
 8008b94:	0800346e 	.word	0x0800346e
 8008b98:	0800346e 	.word	0x0800346e
 8008b9c:	0800352a 	.word	0x0800352a
 8008ba0:	0800346e 	.word	0x0800346e
 8008ba4:	0800346e 	.word	0x0800346e
 8008ba8:	0800346e 	.word	0x0800346e
 8008bac:	0800346e 	.word	0x0800346e
 8008bb0:	0800346e 	.word	0x0800346e
 8008bb4:	0800349e 	.word	0x0800349e
 8008bb8:	0800346e 	.word	0x0800346e
 8008bbc:	0800346e 	.word	0x0800346e
 8008bc0:	08003d56 	.word	0x08003d56
 8008bc4:	0800346e 	.word	0x0800346e
 8008bc8:	0800346e 	.word	0x0800346e
 8008bcc:	0800346e 	.word	0x0800346e
 8008bd0:	0800346e 	.word	0x0800346e
 8008bd4:	0800346e 	.word	0x0800346e
 8008bd8:	0800346e 	.word	0x0800346e
 8008bdc:	0800346e 	.word	0x0800346e
 8008be0:	0800346e 	.word	0x0800346e
 8008be4:	0800346e 	.word	0x0800346e
 8008be8:	0800346e 	.word	0x0800346e
 8008bec:	08003d7e 	.word	0x08003d7e
 8008bf0:	0800355e 	.word	0x0800355e
 8008bf4:	08003cb0 	.word	0x08003cb0
 8008bf8:	08003cb0 	.word	0x08003cb0
 8008bfc:	08003cb0 	.word	0x08003cb0
 8008c00:	08003e8c 	.word	0x08003e8c
 8008c04:	0800355e 	.word	0x0800355e
 8008c08:	0800346e 	.word	0x0800346e
 8008c0c:	0800346e 	.word	0x0800346e
 8008c10:	08003e98 	.word	0x08003e98
 8008c14:	0800346e 	.word	0x0800346e
 8008c18:	08003d90 	.word	0x08003d90
 8008c1c:	08003532 	.word	0x08003532
 8008c20:	08003e34 	.word	0x08003e34
 8008c24:	08003e64 	.word	0x08003e64
 8008c28:	0800346e 	.word	0x0800346e
 8008c2c:	08003dde 	.word	0x08003dde
 8008c30:	0800346e 	.word	0x0800346e
 8008c34:	080034a6 	.word	0x080034a6
 8008c38:	0800346e 	.word	0x0800346e
 8008c3c:	0800346e 	.word	0x0800346e
 8008c40:	08003e6e 	.word	0x08003e6e

08008c44 <blanks.6718>:
 8008c44:	20202020 20202020 20202020 20202020                     

08008c54 <zeroes.6719>:
 8008c54:	30303030 30303030 30303030 30303030     0000000000000000

08008c64 <_global_impure_ptr>:
 8008c64:	200000a8                                ... 

08008c68 <p05.5240>:
 8008c68:	00000005 00000019 0000007d 00000000     ........}.......

08008c78 <__mprec_tens>:
 8008c78:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008c88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008c98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008ca8:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008cb8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008cc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8008cd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8008ce8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008cf8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008d08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008d18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008d28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008d38:	79d99db4 44ea7843                       ...yCx.D

08008d40 <__mprec_tinytens>:
 8008d40:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8008d50:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8008d60:	64ac6f43 0ac80628                       Co.d(...

08008d68 <__mprec_bigtens>:
 8008d68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008d78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008d88:	7f73bf3c 75154fdd 080071ee 08006d16     <.s..O.u.q...m..
 8008d98:	08006d16 080071e4 08006d16 08006d16     .m...q...m...m..
 8008da8:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008db8:	08007010 0800717e 08006d16 08007028     .p..~q...m..(p..
 8008dc8:	08007146 08006d16 080071b0 08007192     Fq...m...q...q..
 8008dd8:	08007192 08007192 08007192 08007192     .q...q...q...q..
 8008de8:	08007192 08007192 08007192 08007192     .q...q...q...q..
 8008df8:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e08:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e18:	08006d16 08006d16 08007182 08006d16     .m...m...q...m..
 8008e28:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e38:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e48:	08006d16 08006f56 08006d16 08006d16     .m..Vo...m...m..
 8008e58:	08006d16 08006d16 08006d16 08006f7e     .m...m...m..~o..
 8008e68:	08006d16 08006d16 0800708e 08006d16     .m...m...p...m..
 8008e78:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e88:	08006d16 08006d16 08006d16 08006d16     .m...m...m...m..
 8008e98:	08006d16 0800706e 0800703c 08006d16     .m..np..<p...m..
 8008ea8:	08006d16 08006d16 080070cc 0800703c     .m...m...p..<p..
 8008eb8:	08006d16 08006d16 08006f4e 08006d16     .m...m..No...m..
 8008ec8:	080070d6 08006f5e 080071ba 08006f4e     .p..^o...q..No..
 8008ed8:	08006d16 080070fc 08006d16 08006f86     .m...p...m...o..
 8008ee8:	08006d16 08006d16 080070c0              .m...m...p..

08008ef4 <blanks.6662>:
 8008ef4:	20202020 20202020 20202020 20202020                     

08008f04 <zeroes.6663>:
 8008f04:	30303030 30303030 30303030 30303030     0000000000000000
 8008f14:	70706148 72612079 68742065 2065736f     Happy are those 
 8008f24:	206f6877 776f6e6b 65687420 72612079     who know they ar
 8008f34:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 8008f44:	203b726f 6854000a 696b2065 6f64676e     or; ..The kingdo
 8008f54:	666f206d 61656820 206e6576 6f6c6562     m of heaven belo
 8008f64:	2073676e 74206f74 216d6568 6f48000a     ngs to them!..Ho
 8008f74:	616d2077 6520796e 20736579 73656f64     w many eyes does
 8008f84:	73694d20 73736973 20697069 65766972      Mississipi rive
 8008f94:	61682072 0a3f6576 69755100 62206b63     r have?..Quick b
 8008fa4:	6e776f72 786f6620 6d756a20 20646570     rown fox jumped 
 8008fb4:	7265766f 65687420 7a616c20 6f642079     over the lazy do
 8008fc4:	000a2167 69676542 3249206e 0a2e3143     g!..Begin I2C1..
 8008fd4:	696e4900 74732074 32333037 000a2e69     .Init st7032i...
 8008fe4:	30377473 20693233 20736168 72617473     st7032i has star
 8008ff4:	2e646574 6948000a 65687420 00216572     ted...Hi there!.
 8009004:	6c343025 203e0064 61654800 6e612070     %04ld.> .Heap an
 8009014:	74732064 206b6361 6c6c6f63 6f697369     d stack collisio
 8009024:	65000a6e 00746978 00464e49 00666e69     n..exit.INF.inf.
 8009034:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 8009044:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 8009054:	37363534 62613938 66656463 00000000     456789abcdef....
 8009064:	6c756e28 0000296c 00000030 69666e49     (null)..0...Infi
 8009074:	7974696e 00000000 004e614e 00000043     nity....NaN.C...
 8009084:	49534f50 00000058 0000002e              POSIX.......
