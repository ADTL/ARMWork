
stm32f4-stdperiph-discovery.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <ST7032i_init>:
void ST7032i_command(ST7032i * lcd, byte value);
size_t ST7032i_write(ST7032i * lcd, byte value);

//
void ST7032i_init(ST7032i * lcd, I2CBus * wx) {
	lcd->_numlines = 2;
 8000188:	2302      	movs	r3, #2
 800018a:	7103      	strb	r3, [r0, #4]
	lcd->_numcolumns = 16;
 800018c:	2310      	movs	r3, #16
 800018e:	7143      	strb	r3, [r0, #5]
	lcd->_position = 0;
 8000190:	2300      	movs	r3, #0
 8000192:	7183      	strb	r3, [r0, #6]
	lcd->i2c_address = DEFAULT_I2C_ADDRESS;
 8000194:	233e      	movs	r3, #62	; 0x3e
 8000196:	7343      	strb	r3, [r0, #13]
	lcd->contrast = DEFAULTCONTRAST;
 8000198:	232a      	movs	r3, #42	; 0x2a
 800019a:	7303      	strb	r3, [r0, #12]
	lcd->pin_bklight = PIN_NOT_DEFINED;
 800019c:	23ff      	movs	r3, #255	; 0xff
 800019e:	81c3      	strh	r3, [r0, #14]

	lcd->wirex = wx;
 80001a0:	6081      	str	r1, [r0, #8]
 80001a2:	4770      	bx	lr

080001a4 <ST7032i_command>:
		pinMode(lcd->pin_bklight, OUTPUT);
	}
}
//

void ST7032i_command(ST7032i * lcd, uint8_t value) {
 80001a4:	b507      	push	{r0, r1, r2, lr}
 80001a6:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = (byte) 0x00;
 80001a8:	2200      	movs	r2, #0
 80001aa:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value;
 80001ae:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex, lcd->i2c_address, buf, 2);
 80001b2:	aa01      	add	r2, sp, #4
 80001b4:	7b59      	ldrb	r1, [r3, #13]
 80001b6:	6880      	ldr	r0, [r0, #8]
 80001b8:	2302      	movs	r3, #2
 80001ba:	f000 fc0f 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001be:	2032      	movs	r0, #50	; 0x32
 80001c0:	f000 f9a6 	bl	8000510 <delay_us>
}
 80001c4:	bd0e      	pop	{r1, r2, r3, pc}

080001c6 <ST7032i_write>:

//
size_t ST7032i_write(ST7032i * lcd, uint8_t value) {
 80001c6:	b507      	push	{r0, r1, r2, lr}
 80001c8:	4603      	mov	r3, r0
	uint8_t buf[2];
	buf[0] = 0b01000000;
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[1] = value & 0xff;
 80001d0:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
 80001d4:	aa01      	add	r2, sp, #4
 80001d6:	7b59      	ldrb	r1, [r3, #13]
 80001d8:	6880      	ldr	r0, [r0, #8]
 80001da:	2302      	movs	r3, #2
 80001dc:	f000 fbfe 	bl	80009dc <i2c_transmit>
	delay_us(CMDDELAY);
 80001e0:	2032      	movs	r0, #50	; 0x32
 80001e2:	f000 f995 	bl	8000510 <delay_us>
	return 1; // assume success
}
 80001e6:	2001      	movs	r0, #1
 80001e8:	bd0e      	pop	{r1, r2, r3, pc}

080001ea <ST7032i_print>:
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
 80001ea:	b570      	push	{r4, r5, r6, lr}
 80001ec:	4606      	mov	r6, r0
 80001ee:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001f0:	2400      	movs	r4, #0
 80001f2:	e004      	b.n	80001fe <ST7032i_print+0x14>
		ST7032i_write(lcd, str[i]);
 80001f4:	4630      	mov	r0, r6
 80001f6:	f7ff ffe6 	bl	80001c6 <ST7032i_write>
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}

size_t ST7032i_print(ST7032i * lcd, const char * str) {
	uint16_t i;
	for (i = 0; str[i]; i++)
 80001fa:	3401      	adds	r4, #1
 80001fc:	b2a4      	uxth	r4, r4
 80001fe:	5d29      	ldrb	r1, [r5, r4]
 8000200:	2900      	cmp	r1, #0
 8000202:	d1f7      	bne.n	80001f4 <ST7032i_print+0xa>
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}
 8000204:	4620      	mov	r0, r4
 8000206:	bd70      	pop	{r4, r5, r6, pc}

08000208 <ST7032i_setContrast>:

void ST7032i_setContrast(ST7032i * lcd, byte val) {
	lcd->contrast = 0x7f & val;
 8000208:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	for (i = 0; str[i]; i++)
		ST7032i_write(lcd, str[i]);
	return i; // assume success
}

void ST7032i_setContrast(ST7032i * lcd, byte val) {
 800020c:	b510      	push	{r4, lr}
 800020e:	4604      	mov	r4, r0
	lcd->contrast = 0x7f & val;
 8000210:	7301      	strb	r1, [r0, #12]
	ST7032i_command(lcd, 0b00111000); //function set
 8000212:	2138      	movs	r1, #56	; 0x38
 8000214:	f7ff ffc6 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 8000218:	4620      	mov	r0, r4
 800021a:	2139      	movs	r1, #57	; 0x39
 800021c:	f7ff ffc2 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000220:	2002      	movs	r0, #2
 8000222:	f000 f965 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000226:	7b21      	ldrb	r1, [r4, #12]
 8000228:	f001 010f 	and.w	r1, r1, #15
 800022c:	4620      	mov	r0, r4
 800022e:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000232:	f7ff ffb7 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 f95a 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800023c:	7b21      	ldrb	r1, [r4, #12]
 800023e:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000242:	4620      	mov	r0, r4
 8000244:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000248:	f7ff ffac 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111000); // function set
 800024c:	4620      	mov	r0, r4
 800024e:	2138      	movs	r1, #56	; 0x38
 8000250:	f7ff ffa8 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000254:	2002      	movs	r0, #2
}
 8000256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(2);
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
	delay_ms(2);
	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
	ST7032i_command(lcd, 0b00111000); // function set
	delay_ms(2);
 800025a:	f000 b949 	b.w	80004f0 <delay_ms>

0800025e <ST7032i_clear>:
}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
 800025e:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
 8000260:	2101      	movs	r1, #1
 8000262:	f7ff ff9f 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000266:	20c8      	movs	r0, #200	; 0xc8
}
 8000268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* ------------------ */

void ST7032i_clear(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_CLEARDISPLAY); // clear display, set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800026c:	f000 b940 	b.w	80004f0 <delay_ms>

08000270 <ST7032i_home>:
}

void ST7032i_home(ST7032i * lcd) {
 8000270:	b508      	push	{r3, lr}
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
 8000272:	2102      	movs	r1, #2
 8000274:	f7ff ff96 	bl	80001a4 <ST7032i_command>
	delay_ms(200);  // this command takes a long time!
 8000278:	20c8      	movs	r0, #200	; 0xc8
}
 800027a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
 800027e:	f000 b937 	b.w	80004f0 <delay_ms>

08000282 <ST7032i_setCursor>:
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000282:	b5f0      	push	{r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <ST7032i_setCursor+0x42>)
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 8000286:	4605      	mov	r5, r0
 8000288:	4614      	mov	r4, r2
 800028a:	460e      	mov	r6, r1
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void ST7032i_home(ST7032i * lcd) {
	ST7032i_command(lcd, LCD_RETURNHOME);  // set cursor position to zero
	delay_ms(200);  // this command takes a long time!
}

void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
 800028e:	b085      	sub	sp, #20
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	af04      	add	r7, sp, #16
 8000292:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
	if (r >= lcd->_numlines) {
 8000296:	792b      	ldrb	r3, [r5, #4]
 8000298:	429c      	cmp	r4, r3
 800029a:	d304      	bcc.n	80002a6 <ST7032i_setCursor+0x24>
		r %= lcd->_numlines;    // we count rows starting w/ 0
 800029c:	fbb4 f2f3 	udiv	r2, r4, r3
 80002a0:	fb03 4412 	mls	r4, r3, r2, r4
 80002a4:	b2e4      	uxtb	r4, r4
	}
	lcd->_position = c + row_offsets[r];
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002ac:	4628      	mov	r0, r5
void ST7032i_setCursor(ST7032i * lcd, uint8_t c, uint8_t r) {
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
 80002ae:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80002b2:	1871      	adds	r1, r6, r1
 80002b4:	b2c9      	uxtb	r1, r1
 80002b6:	71a9      	strb	r1, [r5, #6]
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 80002bc:	b005      	add	sp, #20
 80002be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (r >= lcd->_numlines) {
		r %= lcd->_numlines;    // we count rows starting w/ 0
	}
	lcd->_position = c + row_offsets[r];
	ST7032i_command(lcd, LCD_SETDDRAMADDR | lcd->_position);
 80002c2:	e76f      	b.n	80001a4 <ST7032i_command>
 80002c4:	0800ade0 	.word	0x0800ade0

080002c8 <ST7032i_noDisplay>:
}

// LCD_DISPLAYON, LCD_BLINKON, LCD_CURSORON
void ST7032i_noDisplay(ST7032i * this) {
	this->_displaycontrol &= ~LCD_DISPLAYON;
 80002c8:	7841      	ldrb	r1, [r0, #1]
 80002ca:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80002ce:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002d0:	f041 0108 	orr.w	r1, r1, #8
 80002d4:	e766      	b.n	80001a4 <ST7032i_command>

080002d6 <ST7032i_display>:
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002d6:	7841      	ldrb	r1, [r0, #1]
 80002d8:	f041 0204 	orr.w	r2, r1, #4
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002dc:	f041 010c 	orr.w	r1, r1, #12
	this->_displaycontrol &= ~LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_display(ST7032i * this) {
	this->_displaycontrol |= LCD_DISPLAYON;
 80002e0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80002e2:	e75f      	b.n	80001a4 <ST7032i_command>

080002e4 <ST7032i_begin>:
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e4:	b510      	push	{r4, lr}
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002e6:	2138      	movs	r1, #56	; 0x38
	i2c_transmit(lcd->wirex,lcd->i2c_address, buf, 2);
	delay_us(CMDDELAY);
	return 1; // assume success
}

void ST7032i_begin(ST7032i * lcd) {
 80002e8:	4604      	mov	r4, r0
//	delay(40);
	ST7032i_command(lcd, 0b00111000); //function set
 80002ea:	f7ff ff5b 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00111001); // function set
 80002ee:	4620      	mov	r0, r4
 80002f0:	2139      	movs	r1, #57	; 0x39
 80002f2:	f7ff ff57 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 80002f6:	2002      	movs	r0, #2
 80002f8:	f000 f8fa 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00010100); // interval osc
 80002fc:	4620      	mov	r0, r4
 80002fe:	2114      	movs	r1, #20
 8000300:	f7ff ff50 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01110000 | (lcd->contrast & 0xf)); // contrast Low 4 bits
 8000304:	7b21      	ldrb	r1, [r4, #12]
 8000306:	f001 010f 	and.w	r1, r1, #15
 800030a:	4620      	mov	r0, r4
 800030c:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8000310:	f7ff ff48 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 f8eb 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b01011100 | ((lcd->contrast >> 4) & 0x3)); // contast High/icon/power
 800031a:	7b21      	ldrb	r1, [r4, #12]
 800031c:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8000320:	4620      	mov	r0, r4
 8000322:	f041 015c 	orr.w	r1, r1, #92	; 0x5c
 8000326:	f7ff ff3d 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b01101100); // follower control
 800032a:	4620      	mov	r0, r4
 800032c:	216c      	movs	r1, #108	; 0x6c
 800032e:	f7ff ff39 	bl	80001a4 <ST7032i_command>
	delay_ms(300);
 8000332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000336:	f000 f8db 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00111000); // function set
 800033a:	4620      	mov	r0, r4
 800033c:	2138      	movs	r1, #56	; 0x38
 800033e:	f7ff ff31 	bl	80001a4 <ST7032i_command>
	ST7032i_command(lcd, 0b00001100); // Display On
 8000342:	4620      	mov	r0, r4
 8000344:	210c      	movs	r1, #12
 8000346:	f7ff ff2d 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 800034a:	2002      	movs	r0, #2
 800034c:	f000 f8d0 	bl	80004f0 <delay_ms>

	ST7032i_command(lcd, 0b00000001); // Clear Display
 8000350:	4620      	mov	r0, r4
 8000352:	2101      	movs	r1, #1
 8000354:	f7ff ff26 	bl	80001a4 <ST7032i_command>
	delay_ms(2); // Clear Display needs additional wait
 8000358:	2002      	movs	r0, #2
 800035a:	f000 f8c9 	bl	80004f0 <delay_ms>
	ST7032i_command(lcd, 0b00000010); // home, but does not work
 800035e:	4620      	mov	r0, r4
 8000360:	2102      	movs	r1, #2
 8000362:	f7ff ff1f 	bl	80001a4 <ST7032i_command>
	delay_ms(2);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 f8c2 	bl	80004f0 <delay_ms>

	// finally, set # lines, font size, etc.
	ST7032i_command(lcd, LCD_FUNCTIONSET | lcd->_displayfunction);
 800036c:	7821      	ldrb	r1, [r4, #0]
 800036e:	4620      	mov	r0, r4
 8000370:	f041 0120 	orr.w	r1, r1, #32
 8000374:	f7ff ff16 	bl	80001a4 <ST7032i_command>

	// turn the display on with no cursor or blinking default
	lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000378:	2304      	movs	r3, #4
 800037a:	7063      	strb	r3, [r4, #1]
	ST7032i_display(lcd);
 800037c:	4620      	mov	r0, r4
 800037e:	f7ff ffaa 	bl	80002d6 <ST7032i_display>

	// clear it off
	ST7032i_clear(lcd);
 8000382:	4620      	mov	r0, r4
 8000384:	f7ff ff6b 	bl	800025e <ST7032i_clear>
	ST7032i_home(lcd);
 8000388:	4620      	mov	r0, r4
 800038a:	f7ff ff71 	bl	8000270 <ST7032i_home>

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800038e:	2302      	movs	r3, #2
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 8000390:	4620      	mov	r0, r4
 8000392:	2106      	movs	r1, #6
	// clear it off
	ST7032i_clear(lcd);
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000394:	70a3      	strb	r3, [r4, #2]
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
}
 8000396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7032i_home(lcd);

	// Initialize to default text direction (for romance languages)
	lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	ST7032i_command(lcd, LCD_ENTRYMODESET | lcd->_displaymode);
 800039a:	e703      	b.n	80001a4 <ST7032i_command>

0800039c <ST7032i_noBlink>:
	this->_displaycontrol |= LCD_DISPLAYON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_noBlink(ST7032i * this) {
	this->_displaycontrol &= ~LCD_BLINKON;
 800039c:	7841      	ldrb	r1, [r0, #1]
 800039e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80003a2:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003a4:	f041 0108 	orr.w	r1, r1, #8
 80003a8:	e6fc      	b.n	80001a4 <ST7032i_command>

080003aa <ST7032i_blink>:
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003aa:	7841      	ldrb	r1, [r0, #1]
 80003ac:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b0:	f041 0109 	orr.w	r1, r1, #9
	this->_displaycontrol &= ~LCD_BLINKON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_blink(ST7032i * this) {
	this->_displaycontrol |= LCD_BLINKON;
 80003b4:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003b6:	e6f5      	b.n	80001a4 <ST7032i_command>

080003b8 <ST7032i_noCursor>:
}

void ST7032i_noCursor(ST7032i * this) {
	this->_displaycontrol &= ~LCD_CURSORON;
 80003b8:	7841      	ldrb	r1, [r0, #1]
 80003ba:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003be:	7041      	strb	r1, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003c0:	f041 0108 	orr.w	r1, r1, #8
 80003c4:	e6ee      	b.n	80001a4 <ST7032i_command>

080003c6 <ST7032i_showCursor>:
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003c6:	7841      	ldrb	r1, [r0, #1]
 80003c8:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003cc:	f041 010a 	orr.w	r1, r1, #10
	this->_displaycontrol &= ~LCD_CURSORON;
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
}

void ST7032i_showCursor(ST7032i * this) {
	this->_displaycontrol |= LCD_CURSORON;
 80003d0:	7042      	strb	r2, [r0, #1]
	ST7032i_command(this, LCD_DISPLAYCONTROL | this->_displaycontrol);
 80003d2:	e6e7      	b.n	80001a4 <ST7032i_command>

080003d4 <ST7032i_scrollDisplayLeft>:
}

void ST7032i_scrollDisplayLeft(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003d4:	2118      	movs	r1, #24
 80003d6:	e6e5      	b.n	80001a4 <ST7032i_command>

080003d8 <ST7032i_scrollDisplayRight>:
}

void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80003d8:	211c      	movs	r1, #28
 80003da:	e6e3      	b.n	80001a4 <ST7032i_command>

080003dc <ST7032i_leftToRight>:
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003dc:	7881      	ldrb	r1, [r0, #2]
 80003de:	f041 0202 	orr.w	r2, r1, #2
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e2:	f041 0106 	orr.w	r1, r1, #6
void ST7032i_scrollDisplayRight(ST7032i * this) {
	ST7032i_command(this, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void ST7032i_leftToRight(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYLEFT;
 80003e6:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003e8:	e6dc      	b.n	80001a4 <ST7032i_command>

080003ea <ST7032i_rightToLeft>:
}

void ST7032i_rightToLeft(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYLEFT;
 80003ea:	7881      	ldrb	r1, [r0, #2]
 80003ec:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80003f0:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003f2:	f041 0104 	orr.w	r1, r1, #4
 80003f6:	e6d5      	b.n	80001a4 <ST7032i_command>

080003f8 <ST7032i_autoscroll>:
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 80003f8:	7881      	ldrb	r1, [r0, #2]
 80003fa:	f041 0201 	orr.w	r2, r1, #1
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 80003fe:	f041 0105 	orr.w	r1, r1, #5
	this->_displaymode &= ~LCD_ENTRYLEFT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_autoscroll(ST7032i * this) {
	this->_displaymode |= LCD_ENTRYSHIFTINCREMENT;
 8000402:	7082      	strb	r2, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 8000404:	e6ce      	b.n	80001a4 <ST7032i_command>

08000406 <ST7032i_noAutoscroll>:
}

void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
 8000406:	7881      	ldrb	r1, [r0, #2]
 8000408:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800040c:	7081      	strb	r1, [r0, #2]
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
 800040e:	f041 0104 	orr.w	r1, r1, #4
 8000412:	e6c7      	b.n	80001a4 <ST7032i_command>

08000414 <ST7032i_createChar>:
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000414:	f001 0107 	and.w	r1, r1, #7
 8000418:	00c9      	lsls	r1, r1, #3
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 800041a:	b570      	push	{r4, r5, r6, lr}
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 800041c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void ST7032i_noAutoscroll(ST7032i * this) {
	this->_displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
	ST7032i_command(this, LCD_ENTRYMODESET | this->_displaymode);
}

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
 8000420:	4606      	mov	r6, r0
 8000422:	4615      	mov	r5, r2
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
 8000424:	f7ff febe 	bl	80001a4 <ST7032i_command>
	for (i = 0; i < 8; i++) {
 8000428:	2400      	movs	r4, #0
		ST7032i_write(this, charmap[i]);
 800042a:	5d29      	ldrb	r1, [r5, r4]
 800042c:	4630      	mov	r0, r6

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 800042e:	3401      	adds	r4, #1
		ST7032i_write(this, charmap[i]);
 8000430:	f7ff fec9 	bl	80001c6 <ST7032i_write>

void ST7032i_createChar(ST7032i * this, uint8_t location, uint8_t charmap[]) {
	int i;
	location &= 0x7; // we only have 8 locations 0-7
	ST7032i_command(this, LCD_SETCGRAMADDR | (location << 3));
	for (i = 0; i < 8; i++) {
 8000434:	2c08      	cmp	r4, #8
 8000436:	d1f8      	bne.n	800042a <ST7032i_createChar+0x16>
		ST7032i_write(this, charmap[i]);
	}
}
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	bf00      	nop

0800043c <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000440:	a804      	add	r0, sp, #16
 8000442:	f001 fad1 	bl	80019e8 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000446:	9b04      	ldr	r3, [sp, #16]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <TIM2_timer_start+0x84>)
 800044a:	085b      	lsrs	r3, r3, #1
 800044c:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000450:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000452:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000454:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000456:	f8ad 3004 	strh.w	r3, [sp, #4]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 800045a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800045e:	9302      	str	r3, [sp, #8]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000460:	f8ad 4006 	strh.w	r4, [sp, #6]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000464:	f8ad 400c 	strh.w	r4, [sp, #12]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 8000468:	f88d 400e 	strb.w	r4, [sp, #14]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800046c:	f001 fb4e 	bl	8001b0c <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 8000470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000474:	a901      	add	r1, sp, #4
 8000476:	f001 feaf 	bl	80021d8 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 800047a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800047e:	4621      	mov	r1, r4
 8000480:	f001 fefc 	bl	800227c <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000484:	2101      	movs	r1, #1
 8000486:	460a      	mov	r2, r1
 8000488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800048c:	f002 fa67 	bl	800295e <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000490:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000492:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000494:	4668      	mov	r0, sp
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000496:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800049a:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800049e:	f88d 5002 	strb.w	r5, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004a2:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 80004a6:	f000 fea1 	bl	80011ec <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80004aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004ae:	4629      	mov	r1, r5
 80004b0:	f001 ff27 	bl	8002302 <TIM_Cmd>

	__counter_micros = 0;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <TIM2_timer_start+0x88>)
 80004b6:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <TIM2_timer_start+0x8c>)
 80004ba:	601c      	str	r4, [r3, #0]
}
 80004bc:	b009      	add	sp, #36	; 0x24
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	000f4240 	.word	0x000f4240
 80004c4:	200009a4 	.word	0x200009a4
 80004c8:	200009a8 	.word	0x200009a8

080004cc <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 80004ce:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 80004d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004d4:	681c      	ldr	r4, [r3, #0]
 80004d6:	f001 fed5 	bl	8002284 <TIM_GetCounter>
}
 80004da:	1900      	adds	r0, r0, r4
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	bf00      	nop
 80004e0:	200009a4 	.word	0x200009a4

080004e4 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <millis+0x8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200009a8 	.word	0x200009a8

080004f0 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <delay_ms+0x1c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 80004f4:	1880      	adds	r0, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004f6:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
 80004f8:	4290      	cmp	r0, r2
 80004fa:	d202      	bcs.n	8000502 <delay_ms+0x12>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 80004fc:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
 80004fe:	4282      	cmp	r2, r0
 8000500:	d2fc      	bcs.n	80004fc <delay_ms+0xc>
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000502:	4a02      	ldr	r2, [pc, #8]	; (800050c <delay_ms+0x1c>)
 8000504:	6813      	ldr	r3, [r2, #0]
void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	if ( wtill < millis() ) {
		while ( millis() >= wtill );
	}
	while (millis() < wtill)
 8000506:	4283      	cmp	r3, r0
 8000508:	d3fc      	bcc.n	8000504 <delay_ms+0x14>
		;
}
 800050a:	4770      	bx	lr
 800050c:	200009a8 	.word	0x200009a8

08000510 <delay_us>:

void delay_us(uint32_t w) {
 8000510:	b510      	push	{r4, lr}
 8000512:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000514:	f7ff ffda 	bl	80004cc <micros>
 8000518:	1904      	adds	r4, r0, r4
	if ( wtill < micros() ) {
 800051a:	f7ff ffd7 	bl	80004cc <micros>
 800051e:	4284      	cmp	r4, r0
 8000520:	d203      	bcs.n	800052a <delay_us+0x1a>
		// overflow
		while ( micros() >= wtill );
 8000522:	f7ff ffd3 	bl	80004cc <micros>
 8000526:	42a0      	cmp	r0, r4
 8000528:	d2fb      	bcs.n	8000522 <delay_us+0x12>
	}
	while (micros() < wtill)
 800052a:	f7ff ffcf 	bl	80004cc <micros>
 800052e:	42a0      	cmp	r0, r4
 8000530:	d3fb      	bcc.n	800052a <delay_us+0x1a>
		;
}
 8000532:	bd10      	pop	{r4, pc}

08000534 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000534:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800053a:	2101      	movs	r1, #1
 800053c:	f002 fa24 	bl	8002988 <TIM_GetITStatus>
 8000540:	b168      	cbz	r0, 800055e <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000542:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000546:	2101      	movs	r1, #1
 8000548:	f002 fa29 	bl	800299e <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <TIM2_IRQHandler+0x2c>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000554:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <TIM2_IRQHandler+0x30>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	3201      	adds	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	bd08      	pop	{r3, pc}
 8000560:	200009a4 	.word	0x200009a4
 8000564:	200009a8 	.word	0x200009a8

08000568 <PinPort>:
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <PinPort+0xc>)
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 800056a:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 800056e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000

08000578 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000578:	2301      	movs	r3, #1
 800057a:	f000 000f 	and.w	r0, r0, #15
 800057e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8000582:	b280      	uxth	r0, r0
 8000584:	4770      	bx	lr

08000586 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000586:	f000 000f 	and.w	r0, r0, #15
 800058a:	4770      	bx	lr

0800058c <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800058c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800058e:	4c11      	ldr	r4, [pc, #68]	; (80005d4 <pinMode+0x48>)
 8000590:	f3c0 2503 	ubfx	r5, r0, #8, #4
 8000594:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000598:	460f      	mov	r7, r1
 800059a:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800059c:	2101      	movs	r1, #1
 800059e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005a0:	f001 fa90 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005a4:	f006 060f 	and.w	r6, r6, #15
 80005a8:	2301      	movs	r3, #1
 80005aa:	fa03 f606 	lsl.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005ae:	2300      	movs	r3, #0

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80005b0:	b2b6      	uxth	r6, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005b2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80005be:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005c2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80005c4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80005cc:	f000 fed2 	bl	8001374 <GPIO_Init>
}
 80005d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000

080005d8 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80005d8:	0a02      	lsrs	r2, r0, #8
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005dc:	f002 020f 	and.w	r2, r2, #15
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e0:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80005e4:	b131      	cbz	r1, 80005f4 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005ee:	b289      	uxth	r1, r1
 80005f0:	f000 bf31 	b.w	8001456 <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80005f4:	2101      	movs	r1, #1
 80005f6:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80005f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005fc:	b289      	uxth	r1, r1
 80005fe:	f000 bf2c 	b.w	800145a <GPIO_ResetBits>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000608:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800060c:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <digitalRead+0x3c>)
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000610:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000612:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800061a:	2301      	movs	r3, #1
 800061c:	fa03 f101 	lsl.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000620:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000622:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	fa22 f303 	lsr.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <digitalRead+0x30>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000632:	f000 ff07 	bl	8001444 <GPIO_ReadOutputDataBit>
 8000636:	e001      	b.n	800063c <digitalRead+0x34>
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000638:	f000 fefb 	bl	8001432 <GPIO_ReadInputDataBit>
 800063c:	3000      	adds	r0, #0
 800063e:	bf18      	it	ne
 8000640:	2001      	movne	r0, #1
}
 8000642:	bd08      	pop	{r3, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800064a:	461d      	mov	r5, r3
	if ( port == GPIOB ) {
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <GPIOMode+0x90>)
 800064e:	4298      	cmp	r0, r3
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000650:	4604      	mov	r4, r0
 8000652:	460f      	mov	r7, r1
 8000654:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000656:	bf08      	it	eq
 8000658:	2002      	moveq	r0, #2
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
 800065a:	d022      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <GPIOMode+0x94>)
 800065e:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000660:	bf08      	it	eq
 8000662:	2004      	moveq	r0, #4

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 8000664:	d01d      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <GPIOMode+0x98>)
 8000668:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800066a:	bf08      	it	eq
 800066c:	2008      	moveq	r0, #8
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 800066e:	d018      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <GPIOMode+0x9c>)
 8000672:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000674:	bf08      	it	eq
 8000676:	2010      	moveq	r0, #16
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000678:	d013      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <GPIOMode+0xa0>)
 800067c:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800067e:	bf08      	it	eq
 8000680:	2020      	moveq	r0, #32
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 8000682:	d00e      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <GPIOMode+0xa4>)
 8000686:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000688:	bf08      	it	eq
 800068a:	2040      	moveq	r0, #64	; 0x40
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 800068c:	d009      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <GPIOMode+0xa8>)
 8000690:	429c      	cmp	r4, r3
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000692:	bf08      	it	eq
 8000694:	2080      	moveq	r0, #128	; 0x80
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000696:	d004      	beq.n	80006a2 <GPIOMode+0x5a>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <GPIOMode+0xac>)
 800069a:	429c      	cmp	r4, r3
 800069c:	d103      	bne.n	80006a6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800069e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a2:	2101      	movs	r1, #1
 80006a4:	e004      	b.n	80006b0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <GPIOMode+0xb0>)
 80006a8:	429c      	cmp	r4, r3
 80006aa:	d103      	bne.n	80006b4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006ac:	2001      	movs	r0, #1
 80006ae:	4601      	mov	r1, r0
 80006b0:	f001 fa08 	bl	8001ac4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80006b8:	9700      	str	r7, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80006ba:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006be:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80006c2:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006c6:	4620      	mov	r0, r4
 80006c8:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80006ca:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80006ce:	f88d 5005 	strb.w	r5, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80006d2:	f000 fe4f 	bl	8001374 <GPIO_Init>
}
 80006d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000
 80006f8:	40020000 	.word	0x40020000

080006fc <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80006fc:	f000 beb4 	b.w	8001468 <GPIO_Write>

08000700 <i2c_begin>:
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <i2c_begin+0xdc>)
 8000704:	6003      	str	r3, [r0, #0]
	wirex->sda = PB9;
 8000706:	f240 2309 	movw	r3, #521	; 0x209
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 800070a:	4604      	mov	r4, r0
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
 800070c:	8083      	strh	r3, [r0, #4]
	wirex->scl = PB8;
 800070e:	f44f 7302 	mov.w	r3, #520	; 0x208
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000712:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;
 8000714:	80c3      	strh	r3, [r0, #6]
} CommDirection;

//I2C_Status i2c1_status;
//CommDirection i2c1_direction;

boolean i2c_begin(I2CBus * wirex, uint32_t clkspeed) {
 8000716:	460d      	mov	r5, r1
	wirex->I2Cx = I2C1;
	wirex->sda = PB9;
	wirex->scl = PB8;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000718:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800071c:	2101      	movs	r1, #1
 800071e:	f001 f9f5 	bl	8001b0c <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(wirex->scl), PinBit(wirex->scl), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000722:	88e0      	ldrh	r0, [r4, #6]
 8000724:	f7ff ff20 	bl	8000568 <PinPort>
 8000728:	4607      	mov	r7, r0
 800072a:	88e0      	ldrh	r0, [r4, #6]
 800072c:	f7ff ff24 	bl	8000578 <PinBit>
 8000730:	2601      	movs	r6, #1
 8000732:	2202      	movs	r2, #2
 8000734:	4601      	mov	r1, r0
 8000736:	4613      	mov	r3, r2
 8000738:	4638      	mov	r0, r7
 800073a:	9600      	str	r6, [sp, #0]
 800073c:	9601      	str	r6, [sp, #4]
 800073e:	f7ff ff83 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(wirex->sda), PinBit(wirex->sda), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000742:	88a0      	ldrh	r0, [r4, #4]
 8000744:	f7ff ff10 	bl	8000568 <PinPort>
 8000748:	4607      	mov	r7, r0
 800074a:	88a0      	ldrh	r0, [r4, #4]
 800074c:	f7ff ff14 	bl	8000578 <PinBit>
 8000750:	2202      	movs	r2, #2
 8000752:	4613      	mov	r3, r2
 8000754:	4601      	mov	r1, r0
 8000756:	9600      	str	r6, [sp, #0]
 8000758:	9601      	str	r6, [sp, #4]
 800075a:	4638      	mov	r0, r7
 800075c:	f7ff ff74 	bl	8000648 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(wirex->scl), PinSource(wirex->scl), GPIO_AF_I2C1 );
 8000760:	88e0      	ldrh	r0, [r4, #6]
 8000762:	f7ff ff01 	bl	8000568 <PinPort>
 8000766:	4606      	mov	r6, r0
 8000768:	88e0      	ldrh	r0, [r4, #6]
 800076a:	f7ff ff0c 	bl	8000586 <PinSource>
 800076e:	2204      	movs	r2, #4
 8000770:	4601      	mov	r1, r0
 8000772:	4630      	mov	r0, r6
 8000774:	f000 fe7e 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(wirex->sda), PinSource(wirex->sda), GPIO_AF_I2C1 );
 8000778:	88a0      	ldrh	r0, [r4, #4]
 800077a:	f7ff fef5 	bl	8000568 <PinPort>
 800077e:	4606      	mov	r6, r0
 8000780:	88a0      	ldrh	r0, [r4, #4]
 8000782:	f7ff ff00 	bl	8000586 <PinSource>
 8000786:	2204      	movs	r2, #4
 8000788:	4601      	mov	r1, r0
 800078a:	4630      	mov	r0, r6
 800078c:	f000 fe72 	bl	8001474 <GPIO_PinAFConfig>

	//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <i2c_begin+0xe0>)
 8000792:	429d      	cmp	r5, r3
 8000794:	d004      	beq.n	80007a0 <i2c_begin+0xa0>
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <i2c_begin+0xe4>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000798:	4295      	cmp	r5, r2
 800079a:	bf0c      	ite	eq
 800079c:	4615      	moveq	r5, r2
 800079e:	461d      	movne	r5, r3
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007a0:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80007a2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80007a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007ae:	2600      	movs	r6, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80007b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80007b4:	f841 5d10 	str.w	r5, [r1, #-16]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007bc:	6820      	ldr	r0, [r4, #0]
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80007be:	f8ad 3014 	strh.w	r3, [sp, #20]
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80007c2:	f8ad 600c 	strh.w	r6, [sp, #12]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(wirex->I2Cx, &I2C_InitStructure);
 80007c6:	f000 fe99 	bl	80014fc <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(wirex->I2Cx, ENABLE);
 80007ca:	6820      	ldr	r0, [r4, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	f000 ff0b 	bl	80015e8 <I2C_Cmd>

	wirex->status = NOT_READY;
 80007d2:	20ff      	movs	r0, #255	; 0xff
 80007d4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80007d6:	72a6      	strb	r6, [r4, #10]

	return true;
}
 80007d8:	b007      	add	sp, #28
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <i2c_start>:
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007e8:	23ff      	movs	r3, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
 80007ea:	b570      	push	{r4, r5, r6, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	460e      	mov	r6, r1
	uint16_t wc;
	//
	wirex->status = NOT_READY;
 80007f0:	7243      	strb	r3, [r0, #9]
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 80007f2:	2506      	movs	r5, #6
 80007f4:	e008      	b.n	8000808 <i2c_start+0x20>
 80007f6:	3d01      	subs	r5, #1
 80007f8:	b2ad      	uxth	r5, r5
		if (wc == 0)
 80007fa:	b90d      	cbnz	r5, 8000800 <i2c_start+0x18>
			return false;
 80007fc:	2000      	movs	r0, #0
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(667);
 8000800:	f240 209b 	movw	r0, #667	; 0x29b
 8000804:	f7ff fe84 	bl	8000510 <delay_us>

boolean i2c_start(I2CBus * wirex, uint8_t addr) {
	uint16_t wc;
	//
	wirex->status = NOT_READY;
	for(wc = 5; I2C_GetFlagStatus(wirex->I2Cx, I2C_FLAG_BUSY ); wc--) {
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800080e:	f001 f802 	bl	8001816 <I2C_GetFlagStatus>
 8000812:	2800      	cmp	r0, #0
 8000814:	d1ef      	bne.n	80007f6 <i2c_start+0xe>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = READY;
 8000816:	7260      	strb	r0, [r4, #9]

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 8000818:	2101      	movs	r1, #1
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	f000 fef0 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000820:	2506      	movs	r5, #6
 8000822:	e007      	b.n	8000834 <i2c_start+0x4c>
 8000824:	3d01      	subs	r5, #1
 8000826:	b2ad      	uxth	r5, r5
		if (wc == 0)
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0e7      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 800082c:	f240 209b 	movw	r0, #667	; 0x29b
 8000830:	f7ff fe6e 	bl	8000510 <delay_us>
	wirex->status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	4911      	ldr	r1, [pc, #68]	; (800087c <i2c_start+0x94>)
 8000838:	f000 ffd9 	bl	80017ee <I2C_CheckEvent>
 800083c:	2800      	cmp	r0, #0
 800083e:	d0f1      	beq.n	8000824 <i2c_start+0x3c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000840:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000842:	fa06 f103 	lsl.w	r1, r6, r3
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = START_ISSUED;
 8000846:	7263      	strb	r3, [r4, #9]

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
 8000848:	6820      	ldr	r0, [r4, #0]
 800084a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800084e:	2200      	movs	r2, #0
 8000850:	f000 feee 	bl	8001630 <I2C_Send7bitAddress>
 8000854:	2506      	movs	r5, #6
 8000856:	e007      	b.n	8000868 <i2c_start+0x80>
 8000858:	3d01      	subs	r5, #1
 800085a:	b2ad      	uxth	r5, r5
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
		if (wc == 0)
 800085c:	2d00      	cmp	r5, #0
 800085e:	d0cd      	beq.n	80007fc <i2c_start+0x14>
			return false;
		delay_us(667);
 8000860:	f240 209b 	movw	r0, #667	; 0x29b
 8000864:	f7ff fe54 	bl	8000510 <delay_us>
	wirex->status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Transmitter);
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ); wc--) {
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <i2c_start+0x98>)
 800086c:	f000 ffbf 	bl	80017ee <I2C_CheckEvent>
 8000870:	2800      	cmp	r0, #0
 8000872:	d0f1      	beq.n	8000858 <i2c_start+0x70>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = DST_ADDRESS_SENT;
 8000874:	2302      	movs	r3, #2
 8000876:	7263      	strb	r3, [r4, #9]
	return true;
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	00030001 	.word	0x00030001
 8000880:	00070082 	.word	0x00070082

08000884 <i2c_receive>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000888:	461d      	mov	r5, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
 800088a:	2302      	movs	r3, #2
 800088c:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 800088e:	4604      	mov	r4, r0
 8000890:	4688      	mov	r8, r1
 8000892:	4616      	mov	r6, r2
 8000894:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERRECEIVER;
	//
	if ( !i2c_start(wirex, addr) )
 8000898:	f7ff ffa6 	bl	80007e8 <i2c_start>
 800089c:	b910      	cbnz	r0, 80008a4 <i2c_receive+0x20>
		return false;
 800089e:	2000      	movs	r0, #0
 80008a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
 80008a4:	4631      	mov	r1, r6
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f000 ff45 	bl	8001736 <I2C_SendData>
	wirex->status = BYTE_TRANSMITTING;
 80008ac:	2304      	movs	r3, #4
 80008ae:	7263      	strb	r3, [r4, #9]
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008b0:	2606      	movs	r6, #6
 80008b2:	e007      	b.n	80008c4 <i2c_receive+0x40>
 80008b4:	3e01      	subs	r6, #1
 80008b6:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d0f0      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008bc:	f240 209b 	movw	r0, #667	; 0x29b
 80008c0:	f7ff fe26 	bl	8000510 <delay_us>
	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(wirex->I2Cx, req);
	wirex->status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */

	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ); wc--) {
 80008c4:	6820      	ldr	r0, [r4, #0]
 80008c6:	4941      	ldr	r1, [pc, #260]	; (80009cc <i2c_receive+0x148>)
 80008c8:	f000 ff91 	bl	80017ee <I2C_CheckEvent>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0f1      	beq.n	80008b4 <i2c_receive+0x30>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = TRANSMISSION_COMPLETED;
 80008d0:	2606      	movs	r6, #6
 80008d2:	7266      	strb	r6, [r4, #9]

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	f000 fe92 	bl	8001600 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008dc:	e007      	b.n	80008ee <i2c_receive+0x6a>
 80008de:	3e01      	subs	r6, #1
 80008e0:	b2b6      	uxth	r6, r6
		if (wc == 0)
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0db      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 80008e6:	f240 209b 	movw	r0, #667	; 0x29b
 80008ea:	f7ff fe11 	bl	8000510 <delay_us>
	wirex->status = TRANSMISSION_COMPLETED;

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(wirex->I2Cx, ENABLE);
	/* Test on EV5 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
 80008ee:	6820      	ldr	r0, [r4, #0]
 80008f0:	4937      	ldr	r1, [pc, #220]	; (80009d0 <i2c_receive+0x14c>)
 80008f2:	f000 ff7c 	bl	80017ee <I2C_CheckEvent>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d0f1      	beq.n	80008de <i2c_receive+0x5a>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 80008fa:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 80008fc:	ea4f 0148 	mov.w	r1, r8, lsl #1
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_MODE_SELECT ); wc--) {
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = RESTART_ISSUED;
 8000900:	7263      	strb	r3, [r4, #9]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
 8000902:	6820      	ldr	r0, [r4, #0]
 8000904:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000908:	2201      	movs	r2, #1
 800090a:	f000 fe91 	bl	8001630 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 800090e:	2606      	movs	r6, #6
 8000910:	e007      	b.n	8000922 <i2c_receive+0x9e>
 8000912:	3e01      	subs	r6, #1
 8000914:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000916:	2e00      	cmp	r6, #0
 8000918:	d0c1      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 800091a:	f240 209b 	movw	r0, #667	; 0x29b
 800091e:	f7ff fdf7 	bl	8000510 <delay_us>
	wirex->status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(wirex->I2Cx, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	for (wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ); wc--) {
 8000922:	6820      	ldr	r0, [r4, #0]
 8000924:	492b      	ldr	r1, [pc, #172]	; (80009d4 <i2c_receive+0x150>)
 8000926:	f000 ff62 	bl	80017ee <I2C_CheckEvent>
 800092a:	2800      	cmp	r0, #0
 800092c:	d0f1      	beq.n	8000912 <i2c_receive+0x8e>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
 800092e:	2303      	movs	r3, #3
 8000930:	7263      	strb	r3, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_receive(I2CBus * wirex, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000932:	f1c5 0801 	rsb	r8, r5, #1
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 8000936:	e018      	b.n	800096a <i2c_receive+0xe6>
		wirex->status = RECEIVE_BYTE_READY;
 8000938:	2308      	movs	r3, #8
 800093a:	7263      	strb	r3, [r4, #9]
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800093c:	2606      	movs	r6, #6
 800093e:	e007      	b.n	8000950 <i2c_receive+0xcc>
 8000940:	3e01      	subs	r6, #1
 8000942:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0aa      	beq.n	800089e <i2c_receive+0x1a>
				return false;
			delay_us(667);
 8000948:	f240 209b 	movw	r0, #667	; 0x29b
 800094c:	f7ff fde0 	bl	8000510 <delay_us>
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
		wirex->status = RECEIVE_BYTE_READY;
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	4921      	ldr	r1, [pc, #132]	; (80009d8 <i2c_receive+0x154>)
 8000954:	f000 ff4b 	bl	80017ee <I2C_CheckEvent>
 8000958:	2800      	cmp	r0, #0
 800095a:	d0f1      	beq.n	8000940 <i2c_receive+0xbc>
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f000 feec 	bl	800173a <I2C_ReceiveData>
		wirex->status = BYTE_RECEIVED;
 8000962:	2309      	movs	r3, #9
				return false;
			delay_us(667);

		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
 8000964:	f805 0b01 	strb.w	r0, [r5], #1
		wirex->status = BYTE_RECEIVED;
 8000968:	7263      	strb	r3, [r4, #9]
		if (wc == 0)
			return false;
		delay_us(667);
	}
	wirex->status = SRC_ADDRESS_SENT;
	for (i = 1; i < lim; i++) {
 800096a:	eb05 0308 	add.w	r3, r5, r8
 800096e:	b29b      	uxth	r3, r3
 8000970:	42bb      	cmp	r3, r7
 8000972:	d3e1      	bcc.n	8000938 <i2c_receive+0xb4>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(wirex->I2Cx );
		wirex->status = BYTE_RECEIVED;
	}
	wirex->status = BEFORELAST_BYTE_RECEIVED;
 8000974:	230a      	movs	r3, #10
 8000976:	7263      	strb	r3, [r4, #9]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
 8000978:	6820      	ldr	r0, [r4, #0]
 800097a:	2100      	movs	r1, #0
 800097c:	f000 fe60 	bl	8001640 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	f000 fe48 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = LAST_BYTE_READY;
 8000988:	230b      	movs	r3, #11
 800098a:	7263      	strb	r3, [r4, #9]

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 800098c:	2606      	movs	r6, #6
 800098e:	e007      	b.n	80009a0 <i2c_receive+0x11c>
 8000990:	3e01      	subs	r6, #1
 8000992:	b2b6      	uxth	r6, r6
		if (wc == 0)
 8000994:	2e00      	cmp	r6, #0
 8000996:	d082      	beq.n	800089e <i2c_receive+0x1a>
			return false;
		delay_us(667);
 8000998:	f240 209b 	movw	r0, #667	; 0x29b
 800099c:	f7ff fdb8 	bl	8000510 <delay_us>
	I2C_AcknowledgeConfig(wirex->I2Cx, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = LAST_BYTE_READY;

	for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED ); wc--) {
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <i2c_receive+0x154>)
 80009a4:	f000 ff23 	bl	80017ee <I2C_CheckEvent>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d0f1      	beq.n	8000990 <i2c_receive+0x10c>
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f000 fec4 	bl	800173a <I2C_ReceiveData>
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b2:	230c      	movs	r3, #12
		if (wc == 0)
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
 80009b4:	7028      	strb	r0, [r5, #0]
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009b6:	6820      	ldr	r0, [r4, #0]
			return false;
		delay_us(667);
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;
 80009b8:	7263      	strb	r3, [r4, #9]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	f000 fe40 	bl	8001640 <I2C_AcknowledgeConfig>
	wirex->status = NOT_READY;
 80009c0:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c2:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(wirex->I2Cx );
	wirex->status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 80009c4:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 80009c6:	72a3      	strb	r3, [r4, #10]

	return true;
}
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009cc:	00070084 	.word	0x00070084
 80009d0:	00030001 	.word	0x00030001
 80009d4:	00030002 	.word	0x00030002
 80009d8:	00030040 	.word	0x00030040

080009dc <i2c_transmit>:
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e0:	461f      	mov	r7, r3
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
 80009e2:	2301      	movs	r3, #1
 80009e4:	7283      	strb	r3, [r0, #10]
	wirex->mode = I2C_MODE_NOTDEFINED;

	return true;
}

boolean i2c_transmit(I2CBus * wirex, uint8_t addr, uint8_t * data, uint16_t length) {
 80009e6:	4604      	mov	r4, r0
 80009e8:	4690      	mov	r8, r2
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 80009ea:	f7ff fefd 	bl	80007e8 <i2c_start>
 80009ee:	b9e8      	cbnz	r0, 8000a2c <i2c_transmit+0x50>
		return false;
 80009f0:	2000      	movs	r0, #0
 80009f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	f818 1005 	ldrb.w	r1, [r8, r5]
 80009fc:	f000 fe9b 	bl	8001736 <I2C_SendData>
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a00:	2606      	movs	r6, #6
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a02:	f884 9009 	strb.w	r9, [r4, #9]
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a06:	e007      	b.n	8000a18 <i2c_transmit+0x3c>
 8000a08:	3e01      	subs	r6, #1
 8000a0a:	b2b6      	uxth	r6, r6
			if (wc == 0)
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d0ef      	beq.n	80009f0 <i2c_transmit+0x14>
				return false;
			delay_us(667);
 8000a10:	f240 209b 	movw	r0, #667	; 0x29b
 8000a14:	f7ff fd7c 	bl	8000510 <delay_us>

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
		// Test on EV8 and clear it
		for(wc = 5; !I2C_CheckEvent(wirex->I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED); wc--) {
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <i2c_transmit+0x74>)
 8000a1c:	f000 fee7 	bl	80017ee <I2C_CheckEvent>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0f1      	beq.n	8000a08 <i2c_transmit+0x2c>
			if (wc == 0)
				return false;
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
 8000a24:	2305      	movs	r3, #5
 8000a26:	7263      	strb	r3, [r4, #9]
 8000a28:	3501      	adds	r5, #1
 8000a2a:	e002      	b.n	8000a32 <i2c_transmit+0x56>
	uint16_t i;
	uint16_t wc;

	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
 8000a2c:	2500      	movs	r5, #0
		return false;

	for (i=0; i<length; i++ ) {
		I2C_SendData(wirex->I2Cx, data[i]);
		wirex->status = BYTE_TRANSMITTING;
 8000a2e:	f04f 0904 	mov.w	r9, #4
	wirex->mode = I2C_MODE_MASTERTRANSMITTER;
	//
	if ( !i2c_start(wirex, addr) )
		return false;

	for (i=0; i<length; i++ ) {
 8000a32:	b2ab      	uxth	r3, r5
 8000a34:	42bb      	cmp	r3, r7
 8000a36:	d3de      	bcc.n	80009f6 <i2c_transmit+0x1a>
			delay_us(667);
		}
		wirex->status = BYTE_TRANSMITTED;
	}

	wirex->status = TRANSMISSION_COMPLETED;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	7263      	strb	r3, [r4, #9]

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
 8000a3c:	6820      	ldr	r0, [r4, #0]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	f000 fdea 	bl	8001618 <I2C_GenerateSTOP>
	wirex->status = NOT_READY;
 8000a44:	20ff      	movs	r0, #255	; 0xff
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a46:	2300      	movs	r3, #0

	wirex->status = TRANSMISSION_COMPLETED;

	// generate stop condition
	I2C_GenerateSTOP(wirex->I2Cx, ENABLE);
	wirex->status = NOT_READY;
 8000a48:	7260      	strb	r0, [r4, #9]
	wirex->mode = I2C_MODE_NOTDEFINED;
 8000a4a:	72a3      	strb	r3, [r4, #10]

	return true;
}
 8000a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a50:	00070084 	.word	0x00070084

08000a54 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4698      	mov	r8, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a5c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a5e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx, GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000a60:	4607      	mov	r7, r0
 8000a62:	468a      	mov	sl, r1
 8000a64:	4691      	mov	r9, r2
 8000a66:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000a6a:	d105      	bne.n	8000a78 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a70:	2101      	movs	r1, #1
 8000a72:	f001 f857 	bl	8001b24 <RCC_APB2PeriphClockCmd>
 8000a76:	e007      	b.n	8000a88 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <spi_begin+0x168>)
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d106      	bne.n	8000a8c <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a82:	2101      	movs	r1, #1
 8000a84:	f001 f842 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000a88:	2605      	movs	r6, #5
 8000a8a:	e005      	b.n	8000a98 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a90:	2101      	movs	r1, #1
 8000a92:	f001 f877 	bl	8001b84 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000a96:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000a98:	4650      	mov	r0, sl
 8000a9a:	f7ff fd65 	bl	8000568 <PinPort>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4650      	mov	r0, sl
 8000aa2:	9303      	str	r3, [sp, #12]
 8000aa4:	f7ff fd68 	bl	8000578 <PinBit>
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	2401      	movs	r4, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	4601      	mov	r1, r0
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	9500      	str	r5, [sp, #0]
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	9401      	str	r4, [sp, #4]
 8000aba:	f7ff fdc5 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000abe:	4648      	mov	r0, r9
 8000ac0:	f7ff fd52 	bl	8000568 <PinPort>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4648      	mov	r0, r9
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	f7ff fd55 	bl	8000578 <PinBit>
 8000ace:	9b03      	ldr	r3, [sp, #12]
 8000ad0:	9500      	str	r5, [sp, #0]
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	9401      	str	r4, [sp, #4]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f7ff fdb4 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	f7ff fd41 	bl	8000568 <PinPort>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4640      	mov	r0, r8
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	f7ff fd44 	bl	8000578 <PinBit>
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	9500      	str	r5, [sp, #0]
 8000af4:	4601      	mov	r1, r0
 8000af6:	2202      	movs	r2, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	9401      	str	r4, [sp, #4]
 8000afc:	4623      	mov	r3, r4
 8000afe:	f7ff fda3 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8000b02:	4650      	mov	r0, sl
 8000b04:	f7ff fd30 	bl	8000568 <PinPort>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4650      	mov	r0, sl
 8000b0c:	9303      	str	r3, [sp, #12]
 8000b0e:	f7ff fd3a 	bl	8000586 <PinSource>
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	4601      	mov	r1, r0
 8000b16:	4632      	mov	r2, r6
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fcab 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000b1e:	4648      	mov	r0, r9
 8000b20:	f7ff fd22 	bl	8000568 <PinPort>
 8000b24:	4682      	mov	sl, r0
 8000b26:	4648      	mov	r0, r9
 8000b28:	f7ff fd2d 	bl	8000586 <PinSource>
 8000b2c:	4632      	mov	r2, r6
 8000b2e:	4601      	mov	r1, r0
 8000b30:	4650      	mov	r0, sl
 8000b32:	f000 fc9f 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8000b36:	4640      	mov	r0, r8
 8000b38:	f7ff fd16 	bl	8000568 <PinPort>
 8000b3c:	4681      	mov	r9, r0
 8000b3e:	4640      	mov	r0, r8
 8000b40:	f7ff fd21 	bl	8000586 <PinSource>
 8000b44:	4632      	mov	r2, r6
 8000b46:	4601      	mov	r1, r0
 8000b48:	4648      	mov	r0, r9
 8000b4a:	f000 fc93 	bl	8001474 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000b4e:	4658      	mov	r0, fp
 8000b50:	f7ff fd0a 	bl	8000568 <PinPort>
 8000b54:	4606      	mov	r6, r0
 8000b56:	4658      	mov	r0, fp
 8000b58:	f7ff fd0e 	bl	8000578 <PinBit>
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4623      	mov	r3, r4
 8000b60:	4601      	mov	r1, r0
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	4630      	mov	r0, r6
 8000b66:	9401      	str	r4, [sp, #4]
 8000b68:	f7ff fd6e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000b6c:	4658      	mov	r0, fp
 8000b6e:	4621      	mov	r1, r4
 8000b70:	f7ff fd32 	bl	80005d8 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000b74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b78:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b84:	4638      	mov	r0, r7
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b86:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000b88:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000b8a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000b8e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000b92:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000b96:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000b9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000b9e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000ba2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000ba6:	f001 f8c1 	bl	8001d2c <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 8000baa:	4638      	mov	r0, r7
 8000bac:	4621      	mov	r1, r4
 8000bae:	f001 f95a 	bl	8001e66 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000bb2:	b00b      	add	sp, #44	; 0x2c
 8000bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bc8:	e016      	b.n	8000bf8 <spi_transfer+0x38>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	f001 f9fd 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d0f9      	beq.n	8000bca <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	7871      	ldrb	r1, [r6, #1]
 8000bda:	f001 f9c2 	bl	8001f62 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000bde:	4620      	mov	r0, r4
 8000be0:	2101      	movs	r1, #1
 8000be2:	f001 f9f3 	bl	8001fcc <SPI_I2S_GetFlagStatus>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d0f9      	beq.n	8000bde <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f001 f9b6 	bl	8001f5c <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf0:	3d01      	subs	r5, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000bf2:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1e6      	bne.n	8000bca <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop

08000c00 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <SysTick_Handler+0xc>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	3201      	adds	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200009d0 	.word	0x200009d0

08000c10 <SysTick_delay>:
}

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <SysTick_delay+0x10>)
 8000c12:	6819      	ldr	r1, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	d3fb      	bcc.n	8000c14 <SysTick_delay+0x4>
		;
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200009d0 	.word	0x200009d0

08000c24 <SysTick_Start>:

void SysTick_Start(void) {
 8000c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000c26:	4668      	mov	r0, sp
 8000c28:	f000 fede 	bl	80019e8 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c32:	fbb3 f3f2 	udiv	r3, r3, r2
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Start+0x2c>)
 8000c3a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SysTick_Start+0x30>)
 8000c3e:	21f0      	movs	r1, #240	; 0xf0
 8000c40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000c4c:	b005      	add	sp, #20
 8000c4e:	bd00      	pop	{pc}
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <SysTick_count+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200009d0 	.word	0x200009d0

08000c64 <buffer_clear>:

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000c6a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000c6e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
 8000c72:	4770      	bx	lr

08000c74 <buffer_count>:
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000c74:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000c78:	4770      	bx	lr

08000c7a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ((r->head == r->tail) && (r->count > 0)) {
 8000c7a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000c7e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d105      	bne.n	8000c92 <buffer_is_full+0x18>
 8000c86:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
		return 1;
 8000c8a:	3000      	adds	r0, #0
 8000c8c:	bf18      	it	ne
 8000c8e:	2001      	movne	r0, #1
 8000c90:	4770      	bx	lr
	}
	return 0;
 8000c92:	2000      	movs	r0, #0
}
 8000c94:	4770      	bx	lr

08000c96 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000c96:	b538      	push	{r3, r4, r5, lr}
 8000c98:	4604      	mov	r4, r0
 8000c9a:	460d      	mov	r5, r1
	if (buffer_is_full(r))
 8000c9c:	f7ff ffed 	bl	8000c7a <buffer_is_full>
 8000ca0:	b9b0      	cbnz	r0, 8000cd0 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000ca2:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 8000cae:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000cb2:	3201      	adds	r2, #1
 8000cb4:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <buffer_enque+0x42>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da03      	bge.n	8000cca <buffer_enque+0x34>
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8000cce:	e001      	b.n	8000cd4 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if (buffer_is_full(r))
		return 0xffff;
 8000cd0:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	8000007f 	.word	0x8000007f

08000cdc <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000cdc:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000ce0:	4602      	mov	r2, r0
	uint16_t w;
	if (buffer_count(r) == 0)
 8000ce2:	b1a1      	cbz	r1, 8000d0e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000ce4:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000ce8:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cea:	b218      	sxth	r0, r3
 8000cec:	3301      	adds	r3, #1
	r->count--;
 8000cee:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000cf2:	b219      	sxth	r1, r3
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
	w = r->buf[r->tail++];
 8000cf6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <buffer_deque+0x2c>
 8000d00:	3b01      	subs	r3, #1
 8000d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d06:	3301      	adds	r3, #1
 8000d08:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	return w;
 8000d0c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000d12:	4770      	bx	lr
 8000d14:	8000007f 	.word	0x8000007f

08000d18 <buffer_peek>:

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
 8000d18:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8000d1c:	b123      	cbz	r3, 8000d28 <buffer_peek+0x10>
		return 0xffff;
	return r->buf[r->tail];
 8000d1e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000d22:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000d26:	4770      	bx	lr
	return w;
}

uint16_t buffer_peek(USARTRing * r) {
	if (buffer_count(r) == 0)
		return 0xffff;
 8000d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return r->buf[r->tail];
}
 8000d2c:	4770      	bx	lr

08000d2e <usart_begin>:

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d32:	469a      	mov	sl, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d34:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <usart_begin+0x1ca>)
 8000d36:	4298      	cmp	r0, r3
	if (buffer_count(r) == 0)
		return 0xffff;
	return r->buf[r->tail];
}

void usart_begin(Serial * usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000d38:	b089      	sub	sp, #36	; 0x24
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	4690      	mov	r8, r2
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	//
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
 8000d40:	d10d      	bne.n	8000d5e <usart_begin+0x30>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d42:	2010      	movs	r0, #16
 8000d44:	2101      	movs	r1, #1
 8000d46:	f000 feed 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx->usid = USART1Serial;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART1;
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <usart_begin+0x1ce>)
 8000d50:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART1Serial];
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <usart_begin+0x1d2>)
 8000d54:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART1Serial];
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <usart_begin+0x1d6>)
	IRQn_Type irq = USART1_IRQn;

	if (usx == &Serial1) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 8000d58:	2725      	movs	r7, #37	; 0x25
		usx->usid = USART1Serial;
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
 8000d5a:	60e3      	str	r3, [r4, #12]
 8000d5c:	e010      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial2) {
 8000d5e:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <usart_begin+0x1da>)
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d10f      	bne.n	8000d84 <usart_begin+0x56>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000d64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d68:	2101      	movs	r1, #1
 8000d6a:	f000 fecf 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART2;
 8000d72:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <usart_begin+0x1de>)
 8000d74:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART2Serial];
 8000d76:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <usart_begin+0x1e2>)
 8000d78:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART2Serial];
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <usart_begin+0x1e6>)
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 8000d7c:	2726      	movs	r7, #38	; 0x26
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
 8000d7e:	60e3      	str	r3, [r4, #12]
		usx->USARTx = USART1;
		usx->rxring = &rxring[USART1Serial];
		usx->txring = &txring[USART1Serial];
	} else if (usx == &Serial2) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000d80:	2607      	movs	r6, #7
 8000d82:	e043      	b.n	8000e0c <usart_begin+0xde>
		irq = USART2_IRQn;
		usx->usid = USART2Serial;
		usx->USARTx = USART2;
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
 8000d84:	4b64      	ldr	r3, [pc, #400]	; (8000f18 <usart_begin+0x1ea>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d10e      	bne.n	8000da8 <usart_begin+0x7a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000d8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f000 febc 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx->usid = USART3Serial;
 8000d94:	2302      	movs	r3, #2
 8000d96:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART3;
 8000d98:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <usart_begin+0x1ee>)
 8000d9a:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART3Serial];
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <usart_begin+0x1f2>)
 8000d9e:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART3Serial];
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <usart_begin+0x1f6>)
		usx->rxring = &rxring[USART2Serial];
		usx->txring = &txring[USART2Serial];
	} else if (usx == &Serial3) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000da2:	2727      	movs	r7, #39	; 0x27
		usx->usid = USART3Serial;
		usx->USARTx = USART3;
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
 8000da4:	60e3      	str	r3, [r4, #12]
 8000da6:	e7eb      	b.n	8000d80 <usart_begin+0x52>
	} else if (usx == &Serial4) {
 8000da8:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <usart_begin+0x1fa>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d10e      	bne.n	8000dcc <usart_begin+0x9e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000dae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000db2:	2101      	movs	r1, #1
 8000db4:	f000 feaa 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx->usid = UART4Serial;
 8000db8:	2303      	movs	r3, #3
 8000dba:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART4;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <usart_begin+0x1fe>)
 8000dbe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART4Serial];
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <usart_begin+0x202>)
 8000dc2:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART4Serial];
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <usart_begin+0x206>)
		usx->rxring = &rxring[USART3Serial];
		usx->txring = &txring[USART3Serial];
	} else if (usx == &Serial4) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000dc6:	2734      	movs	r7, #52	; 0x34
		usx->usid = UART4Serial;
		usx->USARTx = UART4;
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
 8000dc8:	60e3      	str	r3, [r4, #12]
 8000dca:	e01e      	b.n	8000e0a <usart_begin+0xdc>
	} else if (usx == &Serial5) {
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <usart_begin+0x20a>)
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d10e      	bne.n	8000df0 <usart_begin+0xc2>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000dd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f000 fe98 	bl	8001b0c <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		usx->usid = UART5Serial;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	7023      	strb	r3, [r4, #0]
		usx->USARTx = UART5;
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <usart_begin+0x20e>)
 8000de2:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[UART5Serial];
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <usart_begin+0x212>)
 8000de6:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[UART5Serial];
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <usart_begin+0x216>)
		usx->rxring = &rxring[UART4Serial];
		usx->txring = &txring[UART4Serial];
	} else if (usx == &Serial5) {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000dea:	2735      	movs	r7, #53	; 0x35
		usx->usid = UART5Serial;
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
 8000dec:	60e3      	str	r3, [r4, #12]
 8000dee:	e00c      	b.n	8000e0a <usart_begin+0xdc>
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000df0:	2020      	movs	r0, #32
 8000df2:	2101      	movs	r1, #1
 8000df4:	f000 fe96 	bl	8001b24 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		usx->usid = USART6Serial;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	7023      	strb	r3, [r4, #0]
		usx->USARTx = USART6;
 8000dfc:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <usart_begin+0x21a>)
 8000dfe:	6063      	str	r3, [r4, #4]
		usx->rxring = &rxring[USART6Serial];
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <usart_begin+0x21e>)
 8000e02:	60a3      	str	r3, [r4, #8]
		usx->txring = &txring[USART6Serial];
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <usart_begin+0x222>)
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000e06:	2747      	movs	r7, #71	; 0x47
		usx->usid = USART6Serial;
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
 8000e08:	60e3      	str	r3, [r4, #12]
		usx->USARTx = UART5;
		usx->rxring = &rxring[UART5Serial];
		usx->txring = &txring[UART5Serial];
	} else { // Serial6
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000e0a:	2608      	movs	r6, #8
		usx->USARTx = USART6;
		usx->rxring = &rxring[USART6Serial];
		usx->txring = &txring[USART6Serial];
	}

	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e0c:	4648      	mov	r0, r9
 8000e0e:	f7ff fbab 	bl	8000568 <PinPort>
 8000e12:	4683      	mov	fp, r0
 8000e14:	4648      	mov	r0, r9
 8000e16:	f7ff fbaf 	bl	8000578 <PinBit>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4601      	mov	r1, r0
 8000e20:	4613      	mov	r3, r2
 8000e22:	4658      	mov	r0, fp
 8000e24:	9500      	str	r5, [sp, #0]
 8000e26:	9501      	str	r5, [sp, #4]
 8000e28:	f7ff fc0e 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz,
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f7ff fb9b 	bl	8000568 <PinPort>
 8000e32:	4683      	mov	fp, r0
 8000e34:	4640      	mov	r0, r8
 8000e36:	f7ff fb9f 	bl	8000578 <PinBit>
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	4601      	mov	r1, r0
 8000e40:	9500      	str	r5, [sp, #0]
 8000e42:	4658      	mov	r0, fp
 8000e44:	9501      	str	r5, [sp, #4]
 8000e46:	f7ff fbff 	bl	8000648 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	f7ff fb8c 	bl	8000568 <PinPort>
 8000e50:	4683      	mov	fp, r0
 8000e52:	4648      	mov	r0, r9
 8000e54:	f7ff fb97 	bl	8000586 <PinSource>
 8000e58:	4632      	mov	r2, r6
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	4658      	mov	r0, fp
 8000e5e:	f000 fb09 	bl	8001474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);
 8000e62:	4640      	mov	r0, r8
 8000e64:	f7ff fb80 	bl	8000568 <PinPort>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	4640      	mov	r0, r8
 8000e6c:	f7ff fb8b 	bl	8000586 <PinSource>
 8000e70:	4632      	mov	r2, r6
 8000e72:	4601      	mov	r1, r0
 8000e74:	4648      	mov	r0, r9
 8000e76:	f000 fafd 	bl	8001474 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7a:	230c      	movs	r3, #12

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e7c:	6860      	ldr	r0, [r4, #4]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e7e:	f8ad 301a 	strh.w	r3, [sp, #26]

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e82:	a904      	add	r1, sp, #16
			GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af);
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af);

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000e84:	f8cd a010 	str.w	sl, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000e88:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000e8c:	f8ad 5016 	strh.w	r5, [sp, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000e90:	f8ad 5018 	strh.w	r5, [sp, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000e94:	f8ad 501c 	strh.w	r5, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e98:	f001 fe98 	bl	8002bcc <USART_Init>

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000e9c:	6860      	ldr	r0, [r4, #4]
 8000e9e:	f240 5125 	movw	r1, #1317	; 0x525
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f001 ffce 	bl	8002e44 <USART_ITConfig>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000ea8:	6860      	ldr	r0, [r4, #4]
 8000eaa:	f240 7127 	movw	r1, #1831	; 0x727
 8000eae:	462a      	mov	r2, r5
 8000eb0:	f001 ffc8 	bl	8002e44 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000eb4:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000eb6:	a803      	add	r0, sp, #12
	USART_Init(usx->USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usx->USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000eb8:	f88d 700c 	strb.w	r7, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000ebc:	f88d 500d 	strb.w	r5, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000ec0:	f88d 500e 	strb.w	r5, [sp, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000ec4:	f88d 600f 	strb.w	r6, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000ec8:	f000 f990 	bl	80011ec <NVIC_Init>
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
 8000ecc:	68a3      	ldr	r3, [r4, #8]
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ece:	6860      	ldr	r0, [r4, #4]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ed0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ed4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ed8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
 8000edc:	68e3      	ldr	r3, [r4, #12]
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000ede:	4631      	mov	r1, r6

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ee0:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ee4:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000ee8:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(usx->rxring); //&rxring[usx->usid]);
	buffer_clear(usx->txring); //&txring[usx->usid]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usx->USARTx, ENABLE);
 8000eec:	f001 fee9 	bl	8002cc2 <USART_Cmd>
}
 8000ef0:	b009      	add	sp, #36	; 0x24
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001008 	.word	0x20001008
 8000efc:	40011000 	.word	0x40011000
 8000f00:	20001038 	.word	0x20001038
 8000f04:	200009e4 	.word	0x200009e4
 8000f08:	2000166c 	.word	0x2000166c
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	2000113e 	.word	0x2000113e
 8000f14:	20000aea 	.word	0x20000aea
 8000f18:	20001018 	.word	0x20001018
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	20001244 	.word	0x20001244
 8000f24:	20000bf0 	.word	0x20000bf0
 8000f28:	2000165c 	.word	0x2000165c
 8000f2c:	40004c00 	.word	0x40004c00
 8000f30:	2000134a 	.word	0x2000134a
 8000f34:	20000cf6 	.word	0x20000cf6
 8000f38:	200009d4 	.word	0x200009d4
 8000f3c:	40005000 	.word	0x40005000
 8000f40:	20001450 	.word	0x20001450
 8000f44:	20000dfc 	.word	0x20000dfc
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	20001556 	.word	0x20001556
 8000f50:	20000f02 	.word	0x20000f02

08000f54 <usart_bare_write>:

void usart_bare_write(Serial * usx, const uint16_t w) {
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
 8000f5a:	6860      	ldr	r0, [r4, #4]
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f001 ff89 	bl	8002e74 <USART_GetFlagStatus>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d0f9      	beq.n	8000f5a <usart_bare_write+0x6>
		;
	USART_SendData(usx->USARTx, w);
 8000f66:	6860      	ldr	r0, [r4, #4]
 8000f68:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(Serial * usx, const uint16_t w) {
	while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(usx->USARTx, w);
 8000f6e:	f001 bed5 	b.w	8002d1c <USART_SendData>

08000f72 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	4604      	mov	r4, r0
 8000f76:	460e      	mov	r6, r1
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f78:	2504      	movs	r5, #4
 8000f7a:	e003      	b.n	8000f84 <usart_write+0x12>
		delay_us(667);
 8000f7c:	f240 209b 	movw	r0, #667	; 0x29b
 8000f80:	f7ff fac6 	bl	8000510 <delay_us>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(Serial * usx, const uint16_t w) {
	uint16_t waitcount = 3;
	while (buffer_is_full(usx->txring) && (waitcount > 0) ) {
 8000f84:	68e0      	ldr	r0, [r4, #12]
 8000f86:	f7ff fe78 	bl	8000c7a <buffer_is_full>
 8000f8a:	b118      	cbz	r0, 8000f94 <usart_write+0x22>
 8000f8c:	3d01      	subs	r5, #1
 8000f8e:	b2ad      	uxth	r5, r5
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f3      	bne.n	8000f7c <usart_write+0xa>
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
 8000f94:	6860      	ldr	r0, [r4, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f240 7127 	movw	r1, #1831	; 0x727
 8000f9c:	f001 ff52 	bl	8002e44 <USART_ITConfig>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	68e0      	ldr	r0, [r4, #12]
 8000fa4:	f7ff fe77 	bl	8000c96 <buffer_enque>
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fa8:	6860      	ldr	r0, [r4, #4]
 8000faa:	f240 7127 	movw	r1, #1831	; 0x727
 8000fae:	2201      	movs	r2, #1
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		delay_us(667);
		waitcount--;
	}
	USART_ITConfig(usx->USARTx, USART_IT_TXE, DISABLE);
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
 8000fb4:	f001 bf46 	b.w	8002e44 <USART_ITConfig>

08000fb8 <usart_print>:
}

void usart_print(Serial * usx, const char * s) {
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	1e4c      	subs	r4, r1, #1
	while (*s)
 8000fbe:	e002      	b.n	8000fc6 <usart_print+0xe>
		usart_write(usx, (uint16_t) *s++);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff ffd6 	bl	8000f72 <usart_write>
	buffer_enque(usx->txring, w); //&txring[usx->usid], w);
	USART_ITConfig(usx->USARTx, USART_IT_TXE, ENABLE);
}

void usart_print(Serial * usx, const char * s) {
	while (*s)
 8000fc6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d1f8      	bne.n	8000fc0 <usart_print+0x8>
		usart_write(usx, (uint16_t) *s++);
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000fd0:	f001 bea8 	b.w	8002d24 <USART_ReceiveData>

08000fd4 <usart_read>:
}

uint16_t usart_read(Serial * usx) {
 8000fd4:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(usx->rxring); //&rxring[usx->usid]);
 8000fd6:	6880      	ldr	r0, [r0, #8]
 8000fd8:	f7ff fe80 	bl	8000cdc <buffer_deque>
	if (w == 0xffff)
		return 0; // buffer is empty
	return w;
}
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	bf08      	it	eq
 8000fe4:	2000      	moveq	r0, #0
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <usart_flush>:

void usart_flush(Serial * usx) {
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
	uint32_t wtill = millis() + 100;
 8000fec:	f7ff fa7a 	bl	80004e4 <millis>
 8000ff0:	f100 0564 	add.w	r5, r0, #100	; 0x64
	while (buffer_count(usx->txring) > 0) {
 8000ff4:	e00c      	b.n	8001010 <usart_flush+0x28>
		if (millis() > wtill)
 8000ff6:	f7ff fa75 	bl	80004e4 <millis>
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d908      	bls.n	8001010 <usart_flush+0x28>
	 USART_SendData(usx->USARTx, buffer_deque(usx->txring)); //&txring[usx->usid]));
	 while (USART_GetFlagStatus(usx->USARTx, USART_FLAG_TC ) == RESET);
	 }
	 USART_ClearITPendingBit(usx->USARTx, USART_IT_TXE );
	 */
	buffer_clear(usx->rxring); //&txring[usx->usid]);
 8000ffe:	68a3      	ldr	r3, [r4, #8]

Serial Serial1, Serial2, Serial3, Serial4, Serial5, Serial6;
USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8001000:	2200      	movs	r2, #0
 8001002:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 8001006:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 800100a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800100e:	bd38      	pop	{r3, r4, r5, pc}
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001010:	68e3      	ldr	r3, [r4, #12]
	return w;
}

void usart_flush(Serial * usx) {
	uint32_t wtill = millis() + 100;
	while (buffer_count(usx->txring) > 0) {
 8001012:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ed      	bne.n	8000ff6 <usart_flush+0xe>
 800101a:	e7f0      	b.n	8000ffe <usart_flush+0x16>

0800101c <usart_peek>:
}

uint16_t usart_peek(Serial * usx) {
//	if ( buffer_count(&(usx->rxring)) == 0 )
//		return 0xffff;
	return buffer_peek(usx->rxring); //	rxring[usx->usid].buf[rxring[usx->usid].tail];
 800101c:	6880      	ldr	r0, [r0, #8]
 800101e:	e67b      	b.n	8000d18 <buffer_peek>

08001020 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001020:	6883      	ldr	r3, [r0, #8]
}

uint16_t usart_available(Serial * usx) {
	return buffer_count(usx->rxring);
	//return buffer_count(&rxring[usx->usid]);
}
 8001022:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8001026:	4770      	bx	lr

08001028 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001028:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <USART1_IRQHandler+0x64>)
 800102c:	f240 5125 	movw	r1, #1317	; 0x525
 8001030:	f001 ff2a 	bl	8002e88 <USART_GetITStatus>
 8001034:	b140      	cbz	r0, 8001048 <USART1_IRQHandler+0x20>
		buffer_enque(Serial1.rxring,
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <USART1_IRQHandler+0x68>)
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <USART1_IRQHandler+0x64>)
 800103a:	689c      	ldr	r4, [r3, #8]
 800103c:	f001 fe72 	bl	8002d24 <USART_ReceiveData>
 8001040:	4601      	mov	r1, r0
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff fe27 	bl	8000c96 <buffer_enque>
		//&rxring[USART1Serial],
				USART_ReceiveData(USART1 ));
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <USART1_IRQHandler+0x64>)
 800104a:	f240 7127 	movw	r1, #1831	; 0x727
 800104e:	f001 ff1b 	bl	8002e88 <USART_GetITStatus>
 8001052:	2800      	cmp	r0, #0
 8001054:	d019      	beq.n	800108a <USART1_IRQHandler+0x62>
		if (Serial1.rxring->count
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <USART1_IRQHandler+0x68>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 800105e:	b95a      	cbnz	r2, 8001078 <USART1_IRQHandler+0x50>
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <USART1_IRQHandler+0x64>)
 8001062:	f240 7127 	movw	r1, #1831	; 0x727
 8001066:	f001 feed 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <USART1_IRQHandler+0x64>)
 800106c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
		}
	}
}
 8001070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (Serial1.rxring->count
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8001074:	f001 bf28 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001078:	68d8      	ldr	r0, [r3, #12]
 800107a:	f7ff fe2f 	bl	8000cdc <buffer_deque>
 800107e:	4601      	mov	r1, r0
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x64>)
		}
	}
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//txring[USART1Serial].count
				== 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(Serial1.txring)); // &txring[USART1Serial]) );
 8001086:	f001 be49 	b.w	8002d1c <USART_SendData>
 800108a:	bd10      	pop	{r4, pc}
 800108c:	40011000 	.word	0x40011000
 8001090:	20001008 	.word	0x20001008

08001094 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8001094:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <USART2_IRQHandler+0x64>)
 8001098:	f240 5125 	movw	r1, #1317	; 0x525
 800109c:	f001 fef4 	bl	8002e88 <USART_GetITStatus>
 80010a0:	b140      	cbz	r0, 80010b4 <USART2_IRQHandler+0x20>
		buffer_enque(Serial2.rxring //&rxring[USART2Serial]/
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <USART2_IRQHandler+0x68>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010a6:	689c      	ldr	r4, [r3, #8]
 80010a8:	f001 fe3c 	bl	8002d24 <USART_ReceiveData>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff fdf1 	bl	8000c96 <buffer_enque>
				, USART_ReceiveData(USART2 ));
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010b6:	f240 7127 	movw	r1, #1831	; 0x727
 80010ba:	f001 fee5 	bl	8002e88 <USART_GetITStatus>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d018      	beq.n	80010f4 <USART2_IRQHandler+0x60>
		if (Serial2.txring->count //txring[USART2Serial].count
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <USART2_IRQHandler+0x68>)
 80010c4:	68d8      	ldr	r0, [r3, #12]
 80010c6:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80010ca:	b95a      	cbnz	r2, 80010e4 <USART2_IRQHandler+0x50>
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010ce:	f240 7127 	movw	r1, #1831	; 0x727
 80010d2:	f001 feb7 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <USART2_IRQHandler+0x64>)
 80010d8:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
		}
	}
}
 80010dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 80010e0:	f001 bef2 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010e4:	f7ff fdfa 	bl	8000cdc <buffer_deque>
 80010e8:	4601      	mov	r1, r0
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <USART2_IRQHandler+0x64>)
		}
	}
}
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (Serial2.txring->count //txring[USART2Serial].count
		== 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(Serial2.txring)); //&txring[USART2Serial]));
 80010f0:	f001 be14 	b.w	8002d1c <USART_SendData>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	2000166c 	.word	0x2000166c

08001100 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8001100:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <USART3_IRQHandler+0x64>)
 8001104:	f240 5125 	movw	r1, #1317	; 0x525
 8001108:	f001 febe 	bl	8002e88 <USART_GetITStatus>
 800110c:	b140      	cbz	r0, 8001120 <USART3_IRQHandler+0x20>
		buffer_enque(Serial3.rxring /*&rxring[USART3Serial]*/,
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <USART3_IRQHandler+0x68>)
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <USART3_IRQHandler+0x64>)
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	f001 fe06 	bl	8002d24 <USART_ReceiveData>
 8001118:	4601      	mov	r1, r0
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fdbb 	bl	8000c96 <buffer_enque>
				USART_ReceiveData(USART3 ));
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <USART3_IRQHandler+0x64>)
 8001122:	f240 7127 	movw	r1, #1831	; 0x727
 8001126:	f001 feaf 	bl	8002e88 <USART_GetITStatus>
 800112a:	2800      	cmp	r0, #0
 800112c:	d018      	beq.n	8001160 <USART3_IRQHandler+0x60>
		if (Serial3.txring->count == 0) {
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <USART3_IRQHandler+0x68>)
 8001130:	68d8      	ldr	r0, [r3, #12]
 8001132:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8001136:	b95a      	cbnz	r2, 8001150 <USART3_IRQHandler+0x50>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <USART3_IRQHandler+0x64>)
 800113a:	f240 7127 	movw	r1, #1831	; 0x727
 800113e:	f001 fe81 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <USART3_IRQHandler+0x64>)
 8001144:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3,
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800114c:	f001 bebc 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3,
 8001150:	f7ff fdc4 	bl	8000cdc <buffer_deque>
 8001154:	4601      	mov	r1, r0
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <USART3_IRQHandler+0x64>)
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (Serial3.txring->count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3,
 800115c:	f001 bdde 	b.w	8002d1c <USART_SendData>
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40004800 	.word	0x40004800
 8001168:	20001018 	.word	0x20001018

0800116c <UART4_IRQHandler>:
					buffer_deque(Serial3.txring /*&txring[USART3Serial]*/));
		}
	}
}

void UART4_IRQHandler(void) {
 800116c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <UART4_IRQHandler+0x64>)
 8001170:	f240 5125 	movw	r1, #1317	; 0x525
 8001174:	f001 fe88 	bl	8002e88 <USART_GetITStatus>
 8001178:	b140      	cbz	r0, 800118c <UART4_IRQHandler+0x20>
		buffer_enque(Serial4.rxring, USART_ReceiveData(UART4 ));
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <UART4_IRQHandler+0x68>)
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <UART4_IRQHandler+0x64>)
 800117e:	689c      	ldr	r4, [r3, #8]
 8001180:	f001 fdd0 	bl	8002d24 <USART_ReceiveData>
 8001184:	4601      	mov	r1, r0
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fd85 	bl	8000c96 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <UART4_IRQHandler+0x64>)
 800118e:	f240 7127 	movw	r1, #1831	; 0x727
 8001192:	f001 fe79 	bl	8002e88 <USART_GetITStatus>
 8001196:	2800      	cmp	r0, #0
 8001198:	d018      	beq.n	80011cc <UART4_IRQHandler+0x60>
		if (Serial4.txring->count == 0) {
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <UART4_IRQHandler+0x68>)
 800119c:	68d8      	ldr	r0, [r3, #12]
 800119e:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 80011a2:	b95a      	cbnz	r2, 80011bc <UART4_IRQHandler+0x50>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011a6:	f240 7127 	movw	r1, #1831	; 0x727
 80011aa:	f001 fe4b 	bl	8002e44 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <UART4_IRQHandler+0x64>)
 80011b0:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
		}
	}
}
 80011b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 80011b8:	f001 be86 	b.w	8002ec8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011bc:	f7ff fd8e 	bl	8000cdc <buffer_deque>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <UART4_IRQHandler+0x64>)
		}
	}
}
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (Serial4.txring->count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(Serial4.txring));
 80011c8:	f001 bda8 	b.w	8002d1c <USART_SendData>
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	bf00      	nop
 80011d0:	40004c00 	.word	0x40004c00
 80011d4:	2000165c 	.word	0x2000165c

080011d8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80011d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <NVIC_PriorityGroupConfig+0x10>)
 80011de:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80011e2:	60d8      	str	r0, [r3, #12]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011ec:	78c3      	ldrb	r3, [r0, #3]
 80011ee:	b313      	cbz	r3, 8001236 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011f2:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80011fc:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001206:	210f      	movs	r1, #15
 8001208:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800120c:	7881      	ldrb	r1, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800120e:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001214:	7803      	ldrb	r3, [r0, #0]
 8001216:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800121a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001222:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001226:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001228:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800122a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	e007      	b.n	8001246 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001236:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001238:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800123a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001244:	3120      	adds	r1, #32
 8001246:	4a03      	ldr	r2, [pc, #12]	; (8001254 <NVIC_Init+0x68>)
 8001248:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	e000e100 	.word	0xe000e100

08001258 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001258:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800125c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <NVIC_SetVectorTable+0x10>)
 8001262:	4308      	orrs	r0, r1
 8001264:	6098      	str	r0, [r3, #8]
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800126e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001270:	b109      	cbz	r1, 8001276 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8001272:	4310      	orrs	r0, r2
 8001274:	e001      	b.n	800127a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001276:	ea22 0000 	bic.w	r0, r2, r0
 800127a:	6118      	str	r0, [r3, #16]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001286:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001288:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800128a:	bf0c      	ite	eq
 800128c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001290:	f022 0204 	bicne.w	r2, r2, #4
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4770      	bx	lr
 8001298:	e000e010 	.word	0xe000e010

0800129c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800129c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <GPIO_DeInit+0xb4>)
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d105      	bne.n	80012b0 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80012a4:	2001      	movs	r0, #1
 80012a6:	4601      	mov	r1, r0
 80012a8:	f000 fc48 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80012ac:	2001      	movs	r0, #1
 80012ae:	e048      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <GPIO_DeInit+0xb8>)
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d105      	bne.n	80012c2 <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012b6:	2002      	movs	r0, #2
 80012b8:	2101      	movs	r1, #1
 80012ba:	f000 fc3f 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80012be:	2002      	movs	r0, #2
 80012c0:	e03f      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <GPIO_DeInit+0xbc>)
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d105      	bne.n	80012d4 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012c8:	2004      	movs	r0, #4
 80012ca:	2101      	movs	r1, #1
 80012cc:	f000 fc36 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80012d0:	2004      	movs	r0, #4
 80012d2:	e036      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <GPIO_DeInit+0xc0>)
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d105      	bne.n	80012e6 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80012da:	2008      	movs	r0, #8
 80012dc:	2101      	movs	r1, #1
 80012de:	f000 fc2d 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80012e2:	2008      	movs	r0, #8
 80012e4:	e02d      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <GPIO_DeInit+0xc4>)
 80012e8:	4298      	cmp	r0, r3
 80012ea:	d105      	bne.n	80012f8 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80012ec:	2010      	movs	r0, #16
 80012ee:	2101      	movs	r1, #1
 80012f0:	f000 fc24 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80012f4:	2010      	movs	r0, #16
 80012f6:	e024      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <GPIO_DeInit+0xc8>)
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d105      	bne.n	800130a <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80012fe:	2020      	movs	r0, #32
 8001300:	2101      	movs	r1, #1
 8001302:	f000 fc1b 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001306:	2020      	movs	r0, #32
 8001308:	e01b      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <GPIO_DeInit+0xcc>)
 800130c:	4298      	cmp	r0, r3
 800130e:	d105      	bne.n	800131c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001310:	2040      	movs	r0, #64	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	f000 fc12 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	e012      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <GPIO_DeInit+0xd0>)
 800131e:	4298      	cmp	r0, r3
 8001320:	d105      	bne.n	800132e <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001322:	2080      	movs	r0, #128	; 0x80
 8001324:	2101      	movs	r1, #1
 8001326:	f000 fc09 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800132a:	2080      	movs	r0, #128	; 0x80
 800132c:	e009      	b.n	8001342 <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <GPIO_DeInit+0xd4>)
 8001330:	4298      	cmp	r0, r3
 8001332:	d10b      	bne.n	800134c <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001334:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001338:	2101      	movs	r1, #1
 800133a:	f000 fbff 	bl	8001b3c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800133e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001342:	2100      	movs	r1, #0
    }
  }
}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001348:	f000 bbf8 	b.w	8001b3c <RCC_AHB1PeriphResetCmd>
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40022000 	.word	0x40022000

08001374 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001378:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800137a:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 800137c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001380:	f04f 0803 	mov.w	r8, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001384:	fa0c f203 	lsl.w	r2, ip, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001388:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 800138c:	4295      	cmp	r5, r2
 800138e:	d130      	bne.n	80013f2 <GPIO_Init+0x7e>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8001390:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001392:	6806      	ldr	r6, [r0, #0]
 8001394:	fa08 f402 	lsl.w	r4, r8, r2
 8001398:	43e4      	mvns	r4, r4
 800139a:	4026      	ands	r6, r4
 800139c:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800139e:	790e      	ldrb	r6, [r1, #4]
 80013a0:	f8d0 9000 	ldr.w	r9, [r0]
 80013a4:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013a8:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013aa:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013ae:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013b0:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013b4:	d814      	bhi.n	80013e0 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013b6:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013b8:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013bc:	4026      	ands	r6, r4
 80013be:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013c0:	6886      	ldr	r6, [r0, #8]
 80013c2:	fa09 f902 	lsl.w	r9, r9, r2
 80013c6:	ea49 0606 	orr.w	r6, r9, r6
 80013ca:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013cc:	6846      	ldr	r6, [r0, #4]
 80013ce:	ea26 0505 	bic.w	r5, r6, r5
 80013d2:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013d4:	798d      	ldrb	r5, [r1, #6]
 80013d6:	6846      	ldr	r6, [r0, #4]
 80013d8:	409d      	lsls	r5, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80013da:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013dc:	4335      	orrs	r5, r6
 80013de:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80013e0:	68c5      	ldr	r5, [r0, #12]
 80013e2:	402c      	ands	r4, r5
 80013e4:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80013e6:	79cd      	ldrb	r5, [r1, #7]
 80013e8:	68c4      	ldr	r4, [r0, #12]
 80013ea:	fa05 f202 	lsl.w	r2, r5, r2
 80013ee:	4322      	orrs	r2, r4
 80013f0:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013f2:	3301      	adds	r3, #1
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d1c5      	bne.n	8001384 <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80013f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080013fc <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001402:	2300      	movs	r3, #0
 8001404:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001406:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001408:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800140a:	71c3      	strb	r3, [r0, #7]
 800140c:	4770      	bx	lr

0800140e <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001416:	9b01      	ldr	r3, [sp, #4]
 8001418:	430b      	orrs	r3, r1
 800141a:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800141c:	9b01      	ldr	r3, [sp, #4]
 800141e:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001420:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001426:	69c3      	ldr	r3, [r0, #28]
 8001428:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800142a:	69c3      	ldr	r3, [r0, #28]
 800142c:	9301      	str	r3, [sp, #4]
}
 800142e:	b002      	add	sp, #8
 8001430:	4770      	bx	lr

08001432 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001432:	6903      	ldr	r3, [r0, #16]
 8001434:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001436:	bf0c      	ite	eq
 8001438:	2000      	moveq	r0, #0
 800143a:	2001      	movne	r0, #1
 800143c:	4770      	bx	lr

0800143e <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800143e:	6900      	ldr	r0, [r0, #16]
}
 8001440:	b280      	uxth	r0, r0
 8001442:	4770      	bx	lr

08001444 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001444:	6943      	ldr	r3, [r0, #20]
 8001446:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001448:	bf0c      	ite	eq
 800144a:	2000      	moveq	r0, #0
 800144c:	2001      	movne	r0, #1
 800144e:	4770      	bx	lr

08001450 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001450:	6940      	ldr	r0, [r0, #20]
}
 8001452:	b280      	uxth	r0, r0
 8001454:	4770      	bx	lr

08001456 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001456:	8301      	strh	r1, [r0, #24]
 8001458:	4770      	bx	lr

0800145a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800145a:	8341      	strh	r1, [r0, #26]
 800145c:	4770      	bx	lr

0800145e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800145e:	b10a      	cbz	r2, 8001464 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001460:	8301      	strh	r1, [r0, #24]
 8001462:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001464:	8341      	strh	r1, [r0, #26]
 8001466:	4770      	bx	lr

08001468 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001468:	6141      	str	r1, [r0, #20]
 800146a:	4770      	bx	lr

0800146c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800146c:	6943      	ldr	r3, [r0, #20]
 800146e:	4059      	eors	r1, r3
 8001470:	6141      	str	r1, [r0, #20]
 8001472:	4770      	bx	lr

08001474 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001474:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001478:	08c9      	lsrs	r1, r1, #3
 800147a:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800147c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800147e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001480:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001484:	240f      	movs	r4, #15
 8001486:	409c      	lsls	r4, r3
 8001488:	ea25 0404 	bic.w	r4, r5, r4
 800148c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001490:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001494:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001496:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001498:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 800149c:	bd30      	pop	{r4, r5, pc}
 800149e:	bf00      	nop

080014a0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80014a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <I2C_DeInit+0x50>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d107      	bne.n	80014b8 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80014a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014ac:	2101      	movs	r1, #1
 80014ae:	f000 fb69 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80014b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014b6:	e014      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <I2C_DeInit+0x54>)
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d107      	bne.n	80014ce <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80014be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014c2:	2101      	movs	r1, #1
 80014c4:	f000 fb5e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80014c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014cc:	e009      	b.n	80014e2 <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <I2C_DeInit+0x58>)
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d10b      	bne.n	80014ec <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80014d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014d8:	2101      	movs	r1, #1
 80014da:	f000 fb53 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014e2:	2100      	movs	r1, #0
    }
  }
}
 80014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80014e8:	f000 bb4c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40005800 	.word	0x40005800
 80014f8:	40005c00 	.word	0x40005c00

080014fc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001502:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001504:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001506:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001508:	f000 fa6e 	bl	80019e8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800150c:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <I2C_Init+0xc8>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001510:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001512:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001516:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001518:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800151c:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800151e:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 8001520:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001522:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001524:	8822      	ldrh	r2, [r4, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	0412      	lsls	r2, r2, #16
 800152c:	0c12      	lsrs	r2, r2, #16
 800152e:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <I2C_Init+0xcc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d80a      	bhi.n	800154c <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800153c:	3701      	adds	r7, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800153e:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001540:	b2bf      	uxth	r7, r7
 8001542:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001544:	2b03      	cmp	r3, #3
 8001546:	bf98      	it	ls
 8001548:	2304      	movls	r3, #4
 800154a:	e021      	b.n	8001590 <I2C_Init+0x94>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800154c:	88ee      	ldrh	r6, [r5, #6]
 800154e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001552:	4296      	cmp	r6, r2
 8001554:	d104      	bne.n	8001560 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001556:	2203      	movs	r2, #3
 8001558:	4353      	muls	r3, r2
 800155a:	fbb1 f3f3 	udiv	r3, r1, r3
 800155e:	e005      	b.n	800156c <I2C_Init+0x70>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001560:	2219      	movs	r2, #25
 8001562:	4353      	muls	r3, r2
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	b29b      	uxth	r3, r3
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800156e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001572:	b90a      	cbnz	r2, 8001578 <I2C_Init+0x7c>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001574:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001578:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157c:	4350      	muls	r0, r2
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	fb90 f0f2 	sdiv	r0, r0, r2
 8001586:	3001      	adds	r0, #1
 8001588:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800158a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800158e:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001590:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001592:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001594:	8969      	ldrh	r1, [r5, #10]
 8001596:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001598:	b29b      	uxth	r3, r3
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80015a0:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015a2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015ac:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80015ae:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80015b4:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80015b6:	892a      	ldrh	r2, [r5, #8]
 80015b8:	89ab      	ldrh	r3, [r5, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8123      	strh	r3, [r4, #8]
}
 80015c0:	b005      	add	sp, #20
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	000f4240 	.word	0x000f4240
 80015c8:	000186a0 	.word	0x000186a0

080015cc <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80015cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80015d0:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80015d2:	2300      	movs	r3, #0
 80015d4:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80015da:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80015dc:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015e2:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015e4:	8183      	strh	r3, [r0, #12]
 80015e6:	4770      	bx	lr

080015e8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015e8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015ea:	b119      	cbz	r1, 80015f4 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	e003      	b.n	80015fc <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	8003      	strh	r3, [r0, #0]
 80015fe:	4770      	bx	lr

08001600 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001600:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001602:	b119      	cbz	r1, 800160c <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001604:	b29b      	uxth	r3, r3
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	e003      	b.n	8001614 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	8003      	strh	r3, [r0, #0]
 8001616:	4770      	bx	lr

08001618 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001618:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800161a:	b119      	cbz	r1, 8001624 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800161c:	b29b      	uxth	r3, r3
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	e003      	b.n	800162c <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	8003      	strh	r3, [r0, #0]
 800162e:	4770      	bx	lr

08001630 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001630:	b112      	cbz	r2, 8001638 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001632:	f041 0101 	orr.w	r1, r1, #1
 8001636:	e001      	b.n	800163c <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001638:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800163c:	8201      	strh	r1, [r0, #16]
 800163e:	4770      	bx	lr

08001640 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001640:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001642:	b119      	cbz	r1, 800164c <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001644:	b29b      	uxth	r3, r3
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	e003      	b.n	8001654 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800164c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	0c1b      	lsrs	r3, r3, #16
 8001654:	8003      	strh	r3, [r0, #0]
 8001656:	4770      	bx	lr

08001658 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8001658:	8983      	ldrh	r3, [r0, #12]
 800165a:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800165c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001660:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001664:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8001666:	8183      	strh	r3, [r0, #12]
 8001668:	4770      	bx	lr

0800166a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166c:	b119      	cbz	r1, 8001676 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800166e:	b29b      	uxth	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	e003      	b.n	800167e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	8183      	strh	r3, [r0, #12]
 8001680:	4770      	bx	lr

08001682 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001682:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001684:	b119      	cbz	r1, 800168e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001686:	b29b      	uxth	r3, r3
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	e003      	b.n	8001696 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800168e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	8003      	strh	r3, [r0, #0]
 8001698:	4770      	bx	lr

0800169a <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169a:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800169c:	b129      	cbz	r1, 80016aa <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800169e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	e001      	b.n	80016ae <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80016aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ae:	8003      	strh	r3, [r0, #0]
 80016b0:	4770      	bx	lr

080016b2 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b2:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80016b4:	b919      	cbnz	r1, 80016be <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	e003      	b.n	80016c6 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80016be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	8003      	strh	r3, [r0, #0]
 80016c8:	4770      	bx	lr

080016ca <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016ca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016ce:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80016d0:	d004      	beq.n	80016dc <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80016d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	e002      	b.n	80016e2 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	8383      	strh	r3, [r0, #28]
 80016e4:	4770      	bx	lr

080016e6 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016e6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ea:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80016ec:	d103      	bne.n	80016f6 <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f4:	e003      	b.n	80016fe <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80016f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fa:	041b      	lsls	r3, r3, #16
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	8003      	strh	r3, [r0, #0]
 8001700:	4770      	bx	lr

08001702 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001702:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001706:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001708:	d103      	bne.n	8001712 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800170a:	b29b      	uxth	r3, r3
 800170c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001710:	e003      	b.n	800171a <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	8003      	strh	r3, [r0, #0]
 800171c:	4770      	bx	lr

0800171e <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800171e:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001720:	b119      	cbz	r1, 800172a <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001722:	b29b      	uxth	r3, r3
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	e003      	b.n	8001732 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800172a:	f023 0310 	bic.w	r3, r3, #16
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	8003      	strh	r3, [r0, #0]
 8001734:	4770      	bx	lr

08001736 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001736:	8201      	strh	r1, [r0, #16]
 8001738:	4770      	bx	lr

0800173a <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800173a:	8a00      	ldrh	r0, [r0, #16]
}
 800173c:	b2c0      	uxtb	r0, r0
 800173e:	4770      	bx	lr

08001740 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001740:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001742:	b119      	cbz	r1, 800174c <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001744:	b29b      	uxth	r3, r3
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	e003      	b.n	8001754 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800174c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	0c1b      	lsrs	r3, r3, #16
 8001754:	8003      	strh	r3, [r0, #0]
 8001756:	4770      	bx	lr

08001758 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001758:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800175c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800175e:	d103      	bne.n	8001768 <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001760:	b29b      	uxth	r3, r3
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	e003      	b.n	8001770 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	8003      	strh	r3, [r0, #0]
 8001772:	4770      	bx	lr

08001774 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001774:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001776:	b119      	cbz	r1, 8001780 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001778:	b29b      	uxth	r3, r3
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	e003      	b.n	8001788 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001780:	f023 0320 	bic.w	r3, r3, #32
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	8003      	strh	r3, [r0, #0]
 800178a:	4770      	bx	lr

0800178c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800178c:	8b00      	ldrh	r0, [r0, #24]
}
 800178e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001792:	4770      	bx	lr

08001794 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001794:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001796:	b119      	cbz	r1, 80017a0 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001798:	b29b      	uxth	r3, r3
 800179a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179e:	e003      	b.n	80017a8 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80017a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	8083      	strh	r3, [r0, #4]
 80017aa:	4770      	bx	lr

080017ac <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017ac:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017ae:	b119      	cbz	r1, 80017b8 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b6:	e003      	b.n	80017c0 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80017b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	8083      	strh	r3, [r0, #4]
 80017c2:	4770      	bx	lr

080017c4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80017c4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80017ca:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	18c9      	adds	r1, r1, r3
 80017d0:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	8818      	ldrh	r0, [r3, #0]
}
 80017d6:	b280      	uxth	r0, r0
 80017d8:	b002      	add	sp, #8
 80017da:	4770      	bx	lr

080017dc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017dc:	8883      	ldrh	r3, [r0, #4]
 80017de:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80017e0:	b10a      	cbz	r2, 80017e6 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80017e2:	4319      	orrs	r1, r3
 80017e4:	e001      	b.n	80017ea <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80017e6:	ea23 0101 	bic.w	r1, r3, r1
 80017ea:	8081      	strh	r1, [r0, #4]
 80017ec:	4770      	bx	lr

080017ee <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017ee:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80017f0:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80017f2:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80017f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80017f8:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80017fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80017fe:	1a43      	subs	r3, r0, r1
 8001800:	4258      	negs	r0, r3
 8001802:	4158      	adcs	r0, r3
 8001804:	4770      	bx	lr

08001806 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001806:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8001808:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800180a:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800180c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001814:	4770      	bx	lr

08001816 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001816:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800181e:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001820:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001822:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001824:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001826:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800182a:	b113      	cbz	r3, 8001832 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	3314      	adds	r3, #20
 8001830:	e002      	b.n	8001838 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001832:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001834:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001836:	3318      	adds	r3, #24
 8001838:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001840:	bf0c      	ite	eq
 8001842:	2000      	moveq	r0, #0
 8001844:	2001      	movne	r0, #1
 8001846:	b002      	add	sp, #8
 8001848:	4770      	bx	lr

0800184a <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800184a:	43c9      	mvns	r1, r1
 800184c:	b289      	uxth	r1, r1
 800184e:	8281      	strh	r1, [r0, #20]
 8001850:	4770      	bx	lr

08001852 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001852:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001854:	8a80      	ldrh	r0, [r0, #20]
 8001856:	b280      	uxth	r0, r0
 8001858:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185a:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800185c:	d006      	beq.n	800186c <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800185e:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001862:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001866:	bf0c      	ite	eq
 8001868:	2000      	moveq	r0, #0
 800186a:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800186c:	4770      	bx	lr

0800186e <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800186e:	43c9      	mvns	r1, r1
 8001870:	b289      	uxth	r1, r1
 8001872:	8281      	strh	r1, [r0, #20]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <RCC_DeInit+0x2c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800188c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001890:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <RCC_DeInit+0x30>)
 8001894:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800189c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	24003010 	.word	0x24003010

080018ac <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <RCC_HSEConfig+0xc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80018b2:	7018      	strb	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023802 	.word	0x40023802

080018bc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <RCC_AdjustHSICalibrationValue+0x10>)
 80018be:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80018c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80018c4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80018c8:	6018      	str	r0, [r3, #0]
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800

080018d0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <RCC_HSICmd+0x8>)
 80018d2:	6018      	str	r0, [r3, #0]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	42470000 	.word	0x42470000

080018dc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <RCC_LSEConfig+0x1c>)
 80018de:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80018e4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80018e6:	d002      	beq.n	80018ee <RCC_LSEConfig+0x12>
 80018e8:	2804      	cmp	r0, #4
 80018ea:	d104      	bne.n	80018f6 <RCC_LSEConfig+0x1a>
 80018ec:	e001      	b.n	80018f2 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80018ee:	7018      	strb	r0, [r3, #0]
      break;
 80018f0:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80018f2:	2205      	movs	r2, #5
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	4770      	bx	lr
 80018f8:	40023870 	.word	0x40023870

080018fc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <RCC_LSICmd+0x8>)
 80018fe:	6018      	str	r0, [r3, #0]
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	42470e80 	.word	0x42470e80

08001908 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001908:	b510      	push	{r4, lr}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800190a:	9c02      	ldr	r4, [sp, #8]
 800190c:	4301      	orrs	r1, r0
 800190e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800191a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800191e:	4b01      	ldr	r3, [pc, #4]	; (8001924 <RCC_PLLConfig+0x1c>)
 8001920:	605c      	str	r4, [r3, #4]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <RCC_PLLCmd+0x8>)
 800192a:	6018      	str	r0, [r3, #0]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	42470060 	.word	0x42470060

08001934 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001934:	0180      	lsls	r0, r0, #6
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RCC_PLLI2SConfig+0x10>)
 8001938:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 800193c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <RCC_PLLI2SCmd+0x8>)
 800194a:	6018      	str	r0, [r3, #0]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	42470068 	.word	0x42470068

08001954 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <RCC_ClockSecuritySystemCmd+0x8>)
 8001956:	6018      	str	r0, [r3, #0]
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	4247004c 	.word	0x4247004c

08001960 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <RCC_MCO1Config+0x10>)
 8001962:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001964:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001968:	4310      	orrs	r0, r2
 800196a:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800196c:	6099      	str	r1, [r3, #8]
 800196e:	4770      	bx	lr
 8001970:	40023800 	.word	0x40023800

08001974 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <RCC_MCO2Config+0x10>)
 8001976:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001978:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800197c:	4310      	orrs	r0, r2
 800197e:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001980:	6099      	str	r1, [r3, #8]
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800

08001988 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <RCC_SYSCLKConfig+0x10>)
 800198a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800198c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001990:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001992:	6098      	str	r0, [r3, #8]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <RCC_GetSYSCLKSource+0xc>)
 800199e:	6898      	ldr	r0, [r3, #8]
}
 80019a0:	f000 000c 	and.w	r0, r0, #12
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <RCC_HCLKConfig+0x10>)
 80019ae:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019b4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019b6:	6098      	str	r0, [r3, #8]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <RCC_PCLK1Config+0x10>)
 80019c2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80019c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019c8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ca:	6098      	str	r0, [r3, #8]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <RCC_PCLK2Config+0x10>)
 80019d6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80019d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80019dc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019e0:	6098      	str	r0, [r3, #8]
 80019e2:	4770      	bx	lr
 80019e4:	40023800 	.word	0x40023800

080019e8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80019f0:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80019f2:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80019f4:	d003      	beq.n	80019fe <RCC_GetClocksFreq+0x16>
 80019f6:	2a08      	cmp	r2, #8
 80019f8:	d003      	beq.n	8001a02 <RCC_GetClocksFreq+0x1a>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <RCC_GetClocksFreq+0x7c>)
 80019fc:	e018      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <RCC_GetClocksFreq+0x80>)
 8001a00:	e016      	b.n	8001a30 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001a02:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a04:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001a06:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	bf14      	ite	ne
 8001a0e:	4b16      	ldrne	r3, [pc, #88]	; (8001a68 <RCC_GetClocksFreq+0x80>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a10:	4b14      	ldreq	r3, [pc, #80]	; (8001a64 <RCC_GetClocksFreq+0x7c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a16:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <RCC_GetClocksFreq+0x78>)
 8001a1c:	6852      	ldr	r2, [r2, #4]
 8001a1e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a22:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a26:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a28:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001a2a:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a2c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <RCC_GetClocksFreq+0x78>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001a32:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a34:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <RCC_GetClocksFreq+0x84>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8001a38:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001a3c:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001a3e:	6803      	ldr	r3, [r0, #0]
 8001a40:	40e3      	lsrs	r3, r4
 8001a42:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001a44:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8001a46:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001a4a:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a4c:	fa23 f404 	lsr.w	r4, r3, r4
 8001a50:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001a52:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8001a54:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001a58:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001a5a:	40d3      	lsrs	r3, r2
 8001a5c:	60c3      	str	r3, [r0, #12]
 8001a5e:	bd10      	pop	{r4, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	20000074 	.word	0x20000074

08001a70 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001a70:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <RCC_RTCCLKConfig+0x2c>)
 8001a7a:	d108      	bne.n	8001a8e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001a7c:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a7e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001a82:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a8a:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001a8c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a90:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001a94:	4310      	orrs	r0, r2
 8001a96:	6718      	str	r0, [r3, #112]	; 0x70
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001aa0:	4b01      	ldr	r3, [pc, #4]	; (8001aa8 <RCC_RTCCLKCmd+0x8>)
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	42470e3c 	.word	0x42470e3c

08001aac <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <RCC_BackupResetCmd+0x8>)
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	42470e40 	.word	0x42470e40

08001ab8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <RCC_I2SCLKConfig+0x8>)
 8001aba:	6018      	str	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	4247015c 	.word	0x4247015c

08001ac4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	b109      	cbz	r1, 8001ace <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001aca:	4310      	orrs	r0, r2
 8001acc:	e001      	b.n	8001ad2 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001ace:	ea22 0000 	bic.w	r0, r2, r0
 8001ad2:	6318      	str	r0, [r3, #48]	; 0x30
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ae0:	b109      	cbz	r1, 8001ae6 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001ae2:	4310      	orrs	r0, r2
 8001ae4:	e001      	b.n	8001aea <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001ae6:	ea22 0000 	bic.w	r0, r2, r0
 8001aea:	6358      	str	r0, [r3, #52]	; 0x34
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001af8:	b109      	cbz	r1, 8001afe <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001afa:	4310      	orrs	r0, r2
 8001afc:	e001      	b.n	8001b02 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001afe:	ea22 0000 	bic.w	r0, r2, r0
 8001b02:	6398      	str	r0, [r3, #56]	; 0x38
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b10:	b109      	cbz	r1, 8001b16 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001b12:	4310      	orrs	r0, r2
 8001b14:	e001      	b.n	8001b1a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001b16:	ea22 0000 	bic.w	r0, r2, r0
 8001b1a:	6418      	str	r0, [r3, #64]	; 0x40
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b28:	b109      	cbz	r1, 8001b2e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b2a:	4310      	orrs	r0, r2
 8001b2c:	e001      	b.n	8001b32 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b2e:	ea22 0000 	bic.w	r0, r2, r0
 8001b32:	6458      	str	r0, [r3, #68]	; 0x44
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b3e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b40:	b109      	cbz	r1, 8001b46 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b42:	4310      	orrs	r0, r2
 8001b44:	e001      	b.n	8001b4a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001b46:	ea22 0000 	bic.w	r0, r2, r0
 8001b4a:	6118      	str	r0, [r3, #16]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b56:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b58:	b109      	cbz	r1, 8001b5e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b5a:	4310      	orrs	r0, r2
 8001b5c:	e001      	b.n	8001b62 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001b5e:	ea22 0000 	bic.w	r0, r2, r0
 8001b62:	6158      	str	r0, [r3, #20]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b6e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b70:	b109      	cbz	r1, 8001b76 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001b72:	4310      	orrs	r0, r2
 8001b74:	e001      	b.n	8001b7a <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001b76:	ea22 0000 	bic.w	r0, r2, r0
 8001b7a:	6198      	str	r0, [r3, #24]
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b86:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b88:	b109      	cbz	r1, 8001b8e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	e001      	b.n	8001b92 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001b8e:	ea22 0000 	bic.w	r0, r2, r0
 8001b92:	6218      	str	r0, [r3, #32]
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ba0:	b109      	cbz	r1, 8001ba6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ba2:	4310      	orrs	r0, r2
 8001ba4:	e001      	b.n	8001baa <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ba6:	ea22 0000 	bic.w	r0, r2, r0
 8001baa:	6258      	str	r0, [r3, #36]	; 0x24
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bb8:	b109      	cbz	r1, 8001bbe <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001bba:	4310      	orrs	r0, r2
 8001bbc:	e001      	b.n	8001bc2 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001bbe:	ea22 0000 	bic.w	r0, r2, r0
 8001bc2:	6518      	str	r0, [r3, #80]	; 0x50
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bd0:	b109      	cbz	r1, 8001bd6 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001bd2:	4310      	orrs	r0, r2
 8001bd4:	e001      	b.n	8001bda <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001bd6:	ea22 0000 	bic.w	r0, r2, r0
 8001bda:	6558      	str	r0, [r3, #84]	; 0x54
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001be8:	b109      	cbz	r1, 8001bee <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001bea:	4310      	orrs	r0, r2
 8001bec:	e001      	b.n	8001bf2 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001bee:	ea22 0000 	bic.w	r0, r2, r0
 8001bf2:	6598      	str	r0, [r3, #88]	; 0x58
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c00:	b109      	cbz	r1, 8001c06 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001c02:	4310      	orrs	r0, r2
 8001c04:	e001      	b.n	8001c0a <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001c06:	ea22 0000 	bic.w	r0, r2, r0
 8001c0a:	6618      	str	r0, [r3, #96]	; 0x60
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c18:	b109      	cbz	r1, 8001c1e <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001c1a:	4310      	orrs	r0, r2
 8001c1c:	e001      	b.n	8001c22 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001c1e:	ea22 0000 	bic.w	r0, r2, r0
 8001c22:	6658      	str	r0, [r3, #100]	; 0x64
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c2e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c30:	b109      	cbz	r1, 8001c36 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001c32:	4310      	orrs	r0, r2
 8001c34:	e001      	b.n	8001c3a <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001c36:	ea22 0000 	bic.w	r0, r2, r0
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	4002380d 	.word	0x4002380d

08001c44 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001c44:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <RCC_GetFlagStatus+0x24>)
 8001c4a:	d101      	bne.n	8001c50 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	e003      	b.n	8001c58 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001c50:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001c52:	bf0c      	ite	eq
 8001c54:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001c56:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001c58:	f000 001f 	and.w	r0, r0, #31
 8001c5c:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001c60:	f000 0001 	and.w	r0, r0, #1
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001c6c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001c72:	2031      	movs	r0, #49	; 0x31
 8001c74:	f7ff ffe6 	bl	8001c44 <RCC_GetFlagStatus>
    startupcounter++;
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c84:	d001      	beq.n	8001c8a <RCC_WaitForHSEStartUp+0x1e>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0f3      	beq.n	8001c72 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	2031      	movs	r0, #49	; 0x31
 8001c8c:	f7ff ffda 	bl	8001c44 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001c90:	3000      	adds	r0, #0
 8001c92:	bf18      	it	ne
 8001c94:	2001      	movne	r0, #1
 8001c96:	bd0e      	pop	{r1, r2, r3, pc}

08001c98 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <RCC_ClearFlag+0xc>)
 8001c9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <RCC_GetITStatus+0x10>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001cae:	bf0c      	ite	eq
 8001cb0:	2000      	moveq	r0, #0
 8001cb2:	2001      	movne	r0, #1
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <RCC_ClearITPendingBit+0x8>)
 8001cbe:	7018      	strb	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	4002380e 	.word	0x4002380e

08001cc8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001cc8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <SPI_I2S_DeInit+0x58>)
 8001ccc:	4298      	cmp	r0, r3
 8001cce:	d10b      	bne.n	8001ce8 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001cd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f7ff ff61 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cde:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001ce4:	f7ff bf5a 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <SPI_I2S_DeInit+0x5c>)
 8001cea:	4298      	cmp	r0, r3
 8001cec:	d107      	bne.n	8001cfe <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001cee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f7ff ff46 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cfc:	e009      	b.n	8001d12 <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <SPI_I2S_DeInit+0x60>)
 8001d00:	4298      	cmp	r0, r3
 8001d02:	d10b      	bne.n	8001d1c <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001d04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d08:	2101      	movs	r1, #1
 8001d0a:	f7ff ff3b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d12:	2100      	movs	r1, #0
    }
  }
}
 8001d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d18:	f7ff bf34 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 8001d1c:	bd08      	pop	{r3, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013000 	.word	0x40013000
 8001d24:	40003800 	.word	0x40003800
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d2c:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001d2e:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001d30:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d32:	884c      	ldrh	r4, [r1, #2]
 8001d34:	4323      	orrs	r3, r4
 8001d36:	888c      	ldrh	r4, [r1, #4]
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	88cc      	ldrh	r4, [r1, #6]
 8001d3c:	4323      	orrs	r3, r4
 8001d3e:	890c      	ldrh	r4, [r1, #8]
 8001d40:	4323      	orrs	r3, r4
 8001d42:	894c      	ldrh	r4, [r1, #10]
 8001d44:	4323      	orrs	r3, r4
 8001d46:	898c      	ldrh	r4, [r1, #12]
 8001d48:	4323      	orrs	r3, r4
 8001d4a:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001d4c:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001d50:	4323      	orrs	r3, r4
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001d56:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001d58:	8b83      	ldrh	r3, [r0, #28]
 8001d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001d64:	8a0b      	ldrh	r3, [r1, #16]
 8001d66:	8203      	strh	r3, [r0, #16]
 8001d68:	bd10      	pop	{r4, pc}

08001d6a <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001d6a:	8b83      	ldrh	r3, [r0, #28]
 8001d6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d70:	f023 030f 	bic.w	r3, r3, #15
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d7e:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d82:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d84:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001d86:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001d88:	d038      	beq.n	8001dfc <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <I2S_Init+0xca>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001d8c:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d8e:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2602      	movne	r6, #2
 8001d96:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001d98:	0224      	lsls	r4, r4, #8
 8001d9a:	d503      	bpl.n	8001da4 <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001d9c:	6894      	ldr	r4, [r2, #8]
 8001d9e:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001da2:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001da4:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001da8:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001dac:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dae:	f8df c088 	ldr.w	ip, [pc, #136]	; 8001e38 <I2S_Init+0xce>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001db6:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001dba:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dbe:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001dc0:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001dc4:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001dc8:	88ca      	ldrh	r2, [r1, #6]
 8001dca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dce:	bf18      	it	ne
 8001dd0:	0176      	lslne	r6, r6, #5
 8001dd2:	f04f 020a 	mov.w	r2, #10
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dd6:	bf0c      	ite	eq
 8001dd8:	0a24      	lsreq	r4, r4, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001dda:	fbb4 f4f6 	udivne	r4, r4, r6
 8001dde:	4362      	muls	r2, r4
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001de6:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001de8:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001dea:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001dee:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df2:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001df4:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	e000      	b.n	8001dfe <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001dfc:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001dfe:	1e9c      	subs	r4, r3, #2
 8001e00:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e02:	2cfe      	cmp	r4, #254	; 0xfe
 8001e04:	bf28      	it	cs
 8001e06:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e08:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001e0a:	bf28      	it	cs
 8001e0c:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4323      	orrs	r3, r4
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e12:	880a      	ldrh	r2, [r1, #0]
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e18:	ea45 0302 	orr.w	r3, r5, r2

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e1c:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001e22:	4313      	orrs	r3, r2
 8001e24:	888a      	ldrh	r2, [r1, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	898a      	ldrh	r2, [r1, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001e2e:	8383      	strh	r3, [r0, #28]
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001e40:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001e42:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001e44:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001e46:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001e48:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001e4a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001e4c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	8203      	strh	r3, [r0, #16]
 8001e52:	4770      	bx	lr

08001e54 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e54:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e56:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001e58:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001e5a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001e5c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001e5e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001e60:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001e62:	8183      	strh	r3, [r0, #12]
 8001e64:	4770      	bx	lr

08001e66 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e66:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e68:	b119      	cbz	r1, 8001e72 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e70:	e003      	b.n	8001e7a <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	8003      	strh	r3, [r0, #0]
 8001e7c:	4770      	bx	lr

08001e7e <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e7e:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e80:	b119      	cbz	r1, 8001e8a <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e88:	e003      	b.n	8001e92 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	8383      	strh	r3, [r0, #28]
 8001e94:	4770      	bx	lr

08001e96 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001e96:	8803      	ldrh	r3, [r0, #0]
 8001e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001ea2:	8803      	ldrh	r3, [r0, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4319      	orrs	r1, r3
 8001ea8:	8001      	strh	r1, [r0, #0]
 8001eaa:	4770      	bx	lr

08001eac <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001eb2:	d103      	bne.n	8001ebc <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	e003      	b.n	8001ec4 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	8003      	strh	r3, [r0, #0]
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ec8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001ecc:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ece:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001ed0:	d003      	beq.n	8001eda <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	e003      	b.n	8001ee2 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	8003      	strh	r3, [r0, #0]
 8001ee4:	4770      	bx	lr

08001ee6 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001ee6:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ee8:	b119      	cbz	r1, 8001ef2 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	e003      	b.n	8001efa <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	8083      	strh	r3, [r0, #4]
 8001efc:	4770      	bx	lr

08001efe <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001efe:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f00:	b119      	cbz	r1, 8001f0a <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	e003      	b.n	8001f12 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001f0a:	f023 0310 	bic.w	r3, r3, #16
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	8083      	strh	r3, [r0, #4]
 8001f14:	4770      	bx	lr

08001f16 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f16:	8b83      	ldrh	r3, [r0, #28]
 8001f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001f26:	2302      	movs	r3, #2
 8001f28:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2a:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f2c:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001f32:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001f34:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f36:	d102      	bne.n	8001f3e <I2S_FullDuplexConfig+0x28>
  {
    tmp = I2S_Mode_SlaveRx;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	e002      	b.n	8001f44 <I2S_FullDuplexConfig+0x2e>
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0fa      	beq.n	8001f38 <I2S_FullDuplexConfig+0x22>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
    {
      tmp = I2S_Mode_SlaveTx;
 8001f42:	2300      	movs	r3, #0
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f44:	884c      	ldrh	r4, [r1, #2]
 8001f46:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f48:	888c      	ldrh	r4, [r1, #4]
 8001f4a:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f50:	4322      	orrs	r2, r4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	b292      	uxth	r2, r2
 8001f56:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001f58:	8383      	strh	r3, [r0, #28]
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001f5c:	8980      	ldrh	r0, [r0, #12]
}
 8001f5e:	b280      	uxth	r0, r0
 8001f60:	4770      	bx	lr

08001f62 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001f62:	8181      	strh	r1, [r0, #12]
 8001f64:	4770      	bx	lr

08001f66 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f66:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f68:	b119      	cbz	r1, 8001f72 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f70:	e003      	b.n	8001f7a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	8003      	strh	r3, [r0, #0]
 8001f7c:	4770      	bx	lr

08001f7e <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001f7e:	8803      	ldrh	r3, [r0, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f86:	8003      	strh	r3, [r0, #0]
 8001f88:	4770      	bx	lr

08001f8a <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001f8a:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001f8c:	bf14      	ite	ne
 8001f8e:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001f90:	8a80      	ldrheq	r0, [r0, #20]
 8001f92:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001f94:	4770      	bx	lr

08001f96 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001f96:	8a00      	ldrh	r0, [r0, #16]
}
 8001f98:	b280      	uxth	r0, r0
 8001f9a:	4770      	bx	lr

08001f9c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001f9c:	8883      	ldrh	r3, [r0, #4]
 8001f9e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001fa0:	b10a      	cbz	r2, 8001fa6 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	e001      	b.n	8001faa <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001fa6:	ea23 0101 	bic.w	r1, r3, r1
 8001faa:	8081      	strh	r1, [r0, #4]
 8001fac:	4770      	bx	lr

08001fae <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001fae:	0909      	lsrs	r1, r1, #4
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	408b      	lsls	r3, r1
 8001fb4:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001fb6:	b11a      	cbz	r2, 8001fc0 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001fb8:	8882      	ldrh	r2, [r0, #4]
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	e003      	b.n	8001fc8 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001fc0:	8882      	ldrh	r2, [r0, #4]
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	ea22 0303 	bic.w	r3, r2, r3
 8001fc8:	8083      	strh	r3, [r0, #4]
 8001fca:	4770      	bx	lr

08001fcc <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001fcc:	8903      	ldrh	r3, [r0, #8]
 8001fce:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2000      	moveq	r0, #0
 8001fd4:	2001      	movne	r0, #1
 8001fd6:	4770      	bx	lr

08001fd8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001fd8:	43c9      	mvns	r1, r1
 8001fda:	b289      	uxth	r1, r1
 8001fdc:	8101      	strh	r1, [r0, #8]
 8001fde:	4770      	bx	lr

08001fe0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001fe0:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001fe2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fe4:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fe6:	f001 020f 	and.w	r2, r1, #15
 8001fea:	2301      	movs	r3, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001fec:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001fee:	fa03 f202 	lsl.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff2:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ff4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ff6:	d005      	beq.n	8002004 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001ff8:	0909      	lsrs	r1, r1, #4
 8001ffa:	408b      	lsls	r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ffc:	421c      	tst	r4, r3
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001ffe:	bf0c      	ite	eq
 8002000:	2000      	moveq	r0, #0
 8002002:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002004:	bd10      	pop	{r4, pc}

08002006 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002006:	f001 010f 	and.w	r1, r1, #15
 800200a:	2301      	movs	r3, #1
 800200c:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800200e:	43db      	mvns	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	8103      	strh	r3, [r0, #8]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002018:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800201a:	8c04      	ldrh	r4, [r0, #32]
 800201c:	f024 0401 	bic.w	r4, r4, #1
 8002020:	0424      	lsls	r4, r4, #16
 8002022:	0c24      	lsrs	r4, r4, #16
 8002024:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002026:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002028:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 800202a:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800202c:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002030:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002032:	432a      	orrs	r2, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002034:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002038:	ea42 1303 	orr.w	r3, r2, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800203c:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002040:	b29d      	uxth	r5, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002042:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002044:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8002046:	8401      	strh	r1, [r0, #32]
 8002048:	bd30      	pop	{r4, r5, pc}

0800204a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800204a:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800204c:	8c04      	ldrh	r4, [r0, #32]
 800204e:	f024 0410 	bic.w	r4, r4, #16
 8002052:	0424      	lsls	r4, r4, #16
 8002054:	0c24      	lsrs	r4, r4, #16
 8002056:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002058:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800205a:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800205c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002060:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002062:	0524      	lsls	r4, r4, #20
 8002064:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002066:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800206a:	f045 0510 	orr.w	r5, r5, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800206e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002072:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002076:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800207a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800207c:	b28d      	uxth	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800207e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002080:	8405      	strh	r5, [r0, #32]
 8002082:	bd30      	pop	{r4, r5, pc}

08002084 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002084:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <TIM_DeInit+0x120>)
 8002088:	4298      	cmp	r0, r3
 800208a:	d105      	bne.n	8002098 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800208c:	2001      	movs	r0, #1
 800208e:	4601      	mov	r1, r0
 8002090:	f7ff fd84 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002094:	2001      	movs	r0, #1
 8002096:	e03d      	b.n	8002114 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8002098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800209c:	d105      	bne.n	80020aa <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800209e:	2001      	movs	r0, #1
 80020a0:	4601      	mov	r1, r0
 80020a2:	f7ff fd6f 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80020a6:	2001      	movs	r0, #1
 80020a8:	e076      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <TIM_DeInit+0x124>)
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d105      	bne.n	80020bc <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80020b0:	2002      	movs	r0, #2
 80020b2:	2101      	movs	r1, #1
 80020b4:	f7ff fd66 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80020b8:	2002      	movs	r0, #2
 80020ba:	e06d      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <TIM_DeInit+0x128>)
 80020be:	4298      	cmp	r0, r3
 80020c0:	d105      	bne.n	80020ce <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80020c2:	2004      	movs	r0, #4
 80020c4:	2101      	movs	r1, #1
 80020c6:	f7ff fd5d 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80020ca:	2004      	movs	r0, #4
 80020cc:	e064      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <TIM_DeInit+0x12c>)
 80020d0:	4298      	cmp	r0, r3
 80020d2:	d105      	bne.n	80020e0 <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80020d4:	2008      	movs	r0, #8
 80020d6:	2101      	movs	r1, #1
 80020d8:	f7ff fd54 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80020dc:	2008      	movs	r0, #8
 80020de:	e05b      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <TIM_DeInit+0x130>)
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d105      	bne.n	80020f2 <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80020e6:	2010      	movs	r0, #16
 80020e8:	2101      	movs	r1, #1
 80020ea:	f7ff fd4b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80020ee:	2010      	movs	r0, #16
 80020f0:	e052      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <TIM_DeInit+0x134>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d105      	bne.n	8002104 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80020f8:	2020      	movs	r0, #32
 80020fa:	2101      	movs	r1, #1
 80020fc:	f7ff fd42 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002100:	2020      	movs	r0, #32
 8002102:	e049      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <TIM_DeInit+0x138>)
 8002106:	4298      	cmp	r0, r3
 8002108:	d109      	bne.n	800211e <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800210a:	2002      	movs	r0, #2
 800210c:	2101      	movs	r1, #1
 800210e:	f7ff fd45 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002112:	2002      	movs	r0, #2
 8002114:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800211a:	f7ff bd3f 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <TIM_DeInit+0x13c>)
 8002120:	4298      	cmp	r0, r3
 8002122:	d107      	bne.n	8002134 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002124:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002128:	2101      	movs	r1, #1
 800212a:	f7ff fd37 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800212e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002132:	e7ef      	b.n	8002114 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <TIM_DeInit+0x140>)
 8002136:	4298      	cmp	r0, r3
 8002138:	d107      	bne.n	800214a <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800213a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800213e:	2101      	movs	r1, #1
 8002140:	f7ff fd2c 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002144:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002148:	e7e4      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <TIM_DeInit+0x144>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d107      	bne.n	8002160 <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002154:	2101      	movs	r1, #1
 8002156:	f7ff fd21 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800215a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800215e:	e7d9      	b.n	8002114 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <TIM_DeInit+0x148>)
 8002162:	4298      	cmp	r0, r3
 8002164:	d105      	bne.n	8002172 <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002166:	2040      	movs	r0, #64	; 0x40
 8002168:	2101      	movs	r1, #1
 800216a:	f7ff fd0b 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800216e:	2040      	movs	r0, #64	; 0x40
 8002170:	e012      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <TIM_DeInit+0x14c>)
 8002174:	4298      	cmp	r0, r3
 8002176:	d105      	bne.n	8002184 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002178:	2080      	movs	r0, #128	; 0x80
 800217a:	2101      	movs	r1, #1
 800217c:	f7ff fd02 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002180:	2080      	movs	r0, #128	; 0x80
 8002182:	e009      	b.n	8002198 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <TIM_DeInit+0x150>)
 8002186:	4298      	cmp	r0, r3
 8002188:	d10b      	bne.n	80021a2 <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800218a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800218e:	2101      	movs	r1, #1
 8002190:	f7ff fcf8 	bl	8001b84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002194:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002198:	2100      	movs	r1, #0
    }   
  }
}
 800219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800219e:	f7ff bcf1 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
 80021a2:	bd08      	pop	{r3, pc}
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40001000 	.word	0x40001000
 80021b8:	40001400 	.word	0x40001400
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800
 80021cc:	40001800 	.word	0x40001800
 80021d0:	40001c00 	.word	0x40001c00
 80021d4:	40002000 	.word	0x40002000

080021d8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021da:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021dc:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80021de:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80021e0:	d012      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d00e      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ee:	d00b      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80021f0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80021f4:	4290      	cmp	r0, r2
 80021f6:	d007      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d003      	beq.n	8002208 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002204:	4290      	cmp	r0, r2
 8002206:	d103      	bne.n	8002210 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002208:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800220e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <TIM_TimeBaseInit+0x78>)
 8002212:	4290      	cmp	r0, r2
 8002214:	d008      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
 8002216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221a:	4290      	cmp	r0, r2
 800221c:	d004      	beq.n	8002228 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002222:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002224:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002226:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002228:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800222a:	684b      	ldr	r3, [r1, #4]
 800222c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800222e:	880b      	ldrh	r3, [r1, #0]
 8002230:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <TIM_TimeBaseInit+0x74>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d003      	beq.n	8002240 <TIM_TimeBaseInit+0x68>
 8002238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223c:	4298      	cmp	r0, r3
 800223e:	d101      	bne.n	8002244 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002240:	7a8b      	ldrb	r3, [r1, #10]
 8002242:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002244:	2301      	movs	r3, #1
 8002246:	8283      	strh	r3, [r0, #20]
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40001000 	.word	0x40001000

08002254 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002258:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800225a:	2300      	movs	r3, #0
 800225c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800225e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002260:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002262:	7283      	strb	r3, [r0, #10]
 8002264:	4770      	bx	lr

08002266 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002266:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002268:	8282      	strh	r2, [r0, #20]
 800226a:	4770      	bx	lr

0800226c <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800226c:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002276:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002278:	8001      	strh	r1, [r0, #0]
 800227a:	4770      	bx	lr

0800227c <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800227c:	6241      	str	r1, [r0, #36]	; 0x24
 800227e:	4770      	bx	lr

08002280 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002280:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002282:	4770      	bx	lr

08002284 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002284:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002286:	4770      	bx	lr

08002288 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002288:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800228a:	b280      	uxth	r0, r0
 800228c:	4770      	bx	lr

0800228e <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800228e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002290:	b119      	cbz	r1, 800229a <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002292:	b29b      	uxth	r3, r3
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	e003      	b.n	80022a2 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800229a:	f023 0302 	bic.w	r3, r3, #2
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	8003      	strh	r3, [r0, #0]
 80022a4:	4770      	bx	lr

080022a6 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022a6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80022a8:	b119      	cbz	r1, 80022b2 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	e003      	b.n	80022ba <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	8003      	strh	r3, [r0, #0]
 80022bc:	4770      	bx	lr

080022be <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022be:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022c0:	b119      	cbz	r1, 80022ca <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	e003      	b.n	80022d2 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80022ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	8003      	strh	r3, [r0, #0]
 80022d4:	4770      	bx	lr

080022d6 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80022d6:	8803      	ldrh	r3, [r0, #0]
 80022d8:	f023 0308 	bic.w	r3, r3, #8
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80022e2:	8803      	ldrh	r3, [r0, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4319      	orrs	r1, r3
 80022e8:	8001      	strh	r1, [r0, #0]
 80022ea:	4770      	bx	lr

080022ec <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80022ec:	8803      	ldrh	r3, [r0, #0]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80022f8:	8803      	ldrh	r3, [r0, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4319      	orrs	r1, r3
 80022fe:	8001      	strh	r1, [r0, #0]
 8002300:	4770      	bx	lr

08002302 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002302:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002304:	b119      	cbz	r1, 800230e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002306:	b29b      	uxth	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	e003      	b.n	8002316 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	8003      	strh	r3, [r0, #0]
 8002318:	4770      	bx	lr

0800231a <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800231a:	8c03      	ldrh	r3, [r0, #32]
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002326:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002328:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800232c:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800232e:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002330:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002332:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002336:	0412      	lsls	r2, r2, #16
 8002338:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800233a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800233c:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002344:	4335      	orrs	r5, r6
 8002346:	b2ad      	uxth	r5, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002348:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800234a:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800234c:	4d0e      	ldr	r5, [pc, #56]	; (8002388 <TIM_OC1Init+0x6e>)
 800234e:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002352:	d003      	beq.n	800235c <TIM_OC1Init+0x42>
 8002354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002358:	42a8      	cmp	r0, r5
 800235a:	d10e      	bne.n	800237a <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800235c:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800235e:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002360:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002364:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002366:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002368:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800236c:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800236e:	8a0d      	ldrh	r5, [r1, #16]
 8002370:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002372:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002376:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002378:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800237c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800237e:	688a      	ldr	r2, [r1, #8]
 8002380:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	8403      	strh	r3, [r0, #32]
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000

0800238c <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800238c:	8c03      	ldrh	r3, [r0, #32]
 800238e:	f023 0310 	bic.w	r3, r3, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002398:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239a:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800239c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023a0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80023a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80023a6:	0424      	lsls	r4, r4, #16
 80023a8:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023aa:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b2:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b4:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80023b6:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80023b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023bc:	884d      	ldrh	r5, [r1, #2]
 80023be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023c2:	4d13      	ldr	r5, [pc, #76]	; (8002410 <TIM_OC2Init+0x84>)
 80023c4:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c6:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80023c8:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80023ca:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023cc:	d003      	beq.n	80023d6 <TIM_OC2Init+0x4a>
 80023ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023d2:	42a8      	cmp	r0, r5
 80023d4:	d115      	bne.n	8002402 <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023d6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80023d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023dc:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80023de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80023e2:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 80023e6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023e8:	888b      	ldrh	r3, [r1, #4]
 80023ea:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023ee:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80023f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80023f4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80023f8:	8a4d      	ldrh	r5, [r1, #18]
 80023fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80023fe:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002400:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002402:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002404:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002406:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002408:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	8403      	strh	r3, [r0, #32]
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002414:	8c03      	ldrh	r3, [r0, #32]
 8002416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002422:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002424:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800242a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800242e:	0424      	lsls	r4, r4, #16
 8002430:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002432:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002436:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002438:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243a:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800243c:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800243e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002442:	884d      	ldrh	r5, [r1, #2]
 8002444:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002448:	4d12      	ldr	r5, [pc, #72]	; (8002494 <TIM_OC3Init+0x80>)
 800244a:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800244e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002450:	d003      	beq.n	800245a <TIM_OC3Init+0x46>
 8002452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002456:	42a8      	cmp	r0, r5
 8002458:	d115      	bne.n	8002486 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800245a:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800245c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002460:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002462:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002466:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800246a:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800246c:	888b      	ldrh	r3, [r1, #4]
 800246e:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002472:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002474:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002478:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800247c:	8a4d      	ldrh	r5, [r1, #18]
 800247e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002482:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002484:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002486:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002488:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248a:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800248c:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248e:	8403      	strh	r3, [r0, #32]
 8002490:	bd30      	pop	{r4, r5, pc}
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000

08002498 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002498:	8c03      	ldrh	r3, [r0, #32]
 800249a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a4:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80024a6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024aa:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ac:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80024ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80024b2:	0412      	lsls	r2, r2, #16
 80024b4:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024be:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c0:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80024c2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80024c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024c8:	884d      	ldrh	r5, [r1, #2]
 80024ca:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024ce:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <TIM_OC4Init+0x64>)
 80024d0:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d2:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024d4:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80024d6:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024d8:	d003      	beq.n	80024e2 <TIM_OC4Init+0x4a>
 80024da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024de:	42a8      	cmp	r0, r5
 80024e0:	d105      	bne.n	80024ee <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e2:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80024e4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80024e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80024ec:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024f0:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80024f2:	688a      	ldr	r2, [r1, #8]
 80024f4:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f6:	8403      	strh	r3, [r0, #32]
 80024f8:	bd30      	pop	{r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000

08002500 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002500:	2300      	movs	r3, #0
 8002502:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002504:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002506:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002508:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800250a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800250c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800250e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002510:	8243      	strh	r3, [r0, #18]
 8002512:	4770      	bx	lr

08002514 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002514:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002516:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002518:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251a:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800251c:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800251e:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002522:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002526:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002528:	b109      	cbz	r1, 800252e <TIM_SelectOCxM+0x1a>
 800252a:	2908      	cmp	r1, #8
 800252c:	d107      	bne.n	800253e <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 800252e:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002530:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8002534:	58cc      	ldr	r4, [r1, r3]
 8002536:	4020      	ands	r0, r4
 8002538:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800253a:	58c8      	ldr	r0, [r1, r3]
 800253c:	e00a      	b.n	8002554 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800253e:	3904      	subs	r1, #4
 8002540:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002544:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8002548:	58cc      	ldr	r4, [r1, r3]
 800254a:	4020      	ands	r0, r4
 800254c:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	58c8      	ldr	r0, [r1, r3]
 8002552:	b292      	uxth	r2, r2
 8002554:	4302      	orrs	r2, r0
 8002556:	50ca      	str	r2, [r1, r3]
 8002558:	bd30      	pop	{r4, r5, pc}

0800255a <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800255a:	6341      	str	r1, [r0, #52]	; 0x34
 800255c:	4770      	bx	lr

0800255e <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800255e:	6381      	str	r1, [r0, #56]	; 0x38
 8002560:	4770      	bx	lr

08002562 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002562:	63c1      	str	r1, [r0, #60]	; 0x3c
 8002564:	4770      	bx	lr

08002566 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002566:	6401      	str	r1, [r0, #64]	; 0x40
 8002568:	4770      	bx	lr

0800256a <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800256a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002574:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002576:	8301      	strh	r1, [r0, #24]
 8002578:	4770      	bx	lr

0800257a <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800257a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002584:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002588:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800258a:	8303      	strh	r3, [r0, #24]
 800258c:	4770      	bx	lr

0800258e <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800258e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002598:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800259a:	8381      	strh	r1, [r0, #28]
 800259c:	4770      	bx	lr

0800259e <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800259e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80025a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025ac:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ae:	8383      	strh	r3, [r0, #28]
 80025b0:	4770      	bx	lr

080025b2 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025b2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80025b4:	f023 0308 	bic.w	r3, r3, #8
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80025bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025be:	8301      	strh	r1, [r0, #24]
 80025c0:	4770      	bx	lr

080025c2 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80025c2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80025c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80025cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025d0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	8303      	strh	r3, [r0, #24]
 80025d4:	4770      	bx	lr

080025d6 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025d6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80025d8:	f023 0308 	bic.w	r3, r3, #8
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80025e0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025e2:	8381      	strh	r1, [r0, #28]
 80025e4:	4770      	bx	lr

080025e6 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80025e6:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80025e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80025f0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80025f4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025f6:	8383      	strh	r3, [r0, #28]
 80025f8:	4770      	bx	lr

080025fa <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002604:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002606:	8301      	strh	r1, [r0, #24]
 8002608:	4770      	bx	lr

0800260a <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800260a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800260c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002614:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002618:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800261a:	8303      	strh	r3, [r0, #24]
 800261c:	4770      	bx	lr

0800261e <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800261e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002628:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800262a:	8381      	strh	r1, [r0, #28]
 800262c:	4770      	bx	lr

0800262e <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800262e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002638:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800263c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800263e:	8383      	strh	r3, [r0, #28]
 8002640:	4770      	bx	lr

08002642 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002642:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800264c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800264e:	8301      	strh	r1, [r0, #24]
 8002650:	4770      	bx	lr

08002652 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002652:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002654:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002658:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800265c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800265e:	8303      	strh	r3, [r0, #24]
 8002660:	4770      	bx	lr

08002662 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002662:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800266c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800266e:	8381      	strh	r1, [r0, #28]
 8002670:	4770      	bx	lr

08002672 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002672:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002674:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002678:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800267c:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800267e:	8383      	strh	r3, [r0, #28]
 8002680:	4770      	bx	lr

08002682 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002682:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002684:	f023 0302 	bic.w	r3, r3, #2
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800268c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800268e:	8401      	strh	r1, [r0, #32]
 8002690:	4770      	bx	lr

08002692 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002692:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002694:	f023 0308 	bic.w	r3, r3, #8
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 800269c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800269e:	8401      	strh	r1, [r0, #32]
 80026a0:	4770      	bx	lr

080026a2 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026a2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 80026a4:	f023 0320 	bic.w	r3, r3, #32
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80026ac:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026b0:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026b2:	8403      	strh	r3, [r0, #32]
 80026b4:	4770      	bx	lr

080026b6 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80026b6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80026b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80026c0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80026c4:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026c6:	8403      	strh	r3, [r0, #32]
 80026c8:	4770      	bx	lr

080026ca <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026ca:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80026cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80026d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026d8:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026da:	8403      	strh	r3, [r0, #32]
 80026dc:	4770      	bx	lr

080026de <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80026de:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80026e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80026e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80026ec:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026ee:	8403      	strh	r3, [r0, #32]
 80026f0:	4770      	bx	lr

080026f2 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80026f2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80026fc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8002700:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002702:	8403      	strh	r3, [r0, #32]
 8002704:	4770      	bx	lr

08002706 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002706:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002708:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270a:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800270c:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800270e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002710:	ea24 0303 	bic.w	r3, r4, r3
 8002714:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002716:	8c03      	ldrh	r3, [r0, #32]
 8002718:	408a      	lsls	r2, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	8403      	strh	r3, [r0, #32]
 8002720:	bd10      	pop	{r4, pc}

08002722 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002722:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002724:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002726:	2304      	movs	r3, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002728:	b2a4      	uxth	r4, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800272a:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800272c:	ea24 0303 	bic.w	r3, r4, r3
 8002730:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002732:	8c03      	ldrh	r3, [r0, #32]
 8002734:	408a      	lsls	r2, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	8403      	strh	r3, [r0, #32]
 800273c:	bd10      	pop	{r4, pc}

0800273e <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800273e:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002740:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002742:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002744:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002746:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002748:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800274a:	8103      	strh	r3, [r0, #8]
 800274c:	4770      	bx	lr

0800274e <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800274e:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002750:	4770      	bx	lr

08002752 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002752:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002754:	4770      	bx	lr

08002756 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002756:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002758:	4770      	bx	lr

0800275a <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800275a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800275c:	4770      	bx	lr

0800275e <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800275e:	8b03      	ldrh	r3, [r0, #24]
 8002760:	f023 030c 	bic.w	r3, r3, #12
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800276a:	8b03      	ldrh	r3, [r0, #24]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4319      	orrs	r1, r3
 8002770:	8301      	strh	r1, [r0, #24]
 8002772:	4770      	bx	lr

08002774 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002774:	8b03      	ldrh	r3, [r0, #24]
 8002776:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002780:	8b03      	ldrh	r3, [r0, #24]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002788:	b28b      	uxth	r3, r1
 800278a:	8303      	strh	r3, [r0, #24]
 800278c:	4770      	bx	lr

0800278e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002792:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002794:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002796:	f8b4 e000 	ldrh.w	lr, [r4]
 800279a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800279c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800279e:	2900      	cmp	r1, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2702      	moveq	r7, #2
 80027a4:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2601      	movne	r6, #1
 80027ac:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027ae:	f1be 0f00 	cmp.w	lr, #0
 80027b2:	d110      	bne.n	80027d6 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027b4:	f7ff fc30 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027b8:	4628      	mov	r0, r5
 80027ba:	88e1      	ldrh	r1, [r4, #6]
 80027bc:	f7ff ffcf 	bl	800275e <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027c0:	4628      	mov	r0, r5
 80027c2:	4639      	mov	r1, r7
 80027c4:	4632      	mov	r2, r6
 80027c6:	8923      	ldrh	r3, [r4, #8]
 80027c8:	f7ff fc3f 	bl	800204a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027cc:	88e1      	ldrh	r1, [r4, #6]
 80027ce:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d4:	e7ce      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80027d6:	f7ff fc38 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027da:	4628      	mov	r0, r5
 80027dc:	88e1      	ldrh	r1, [r4, #6]
 80027de:	f7ff ffc9 	bl	8002774 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80027e2:	4628      	mov	r0, r5
 80027e4:	4639      	mov	r1, r7
 80027e6:	4632      	mov	r2, r6
 80027e8:	8923      	ldrh	r3, [r4, #8]
 80027ea:	f7ff fc15 	bl	8002018 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027ee:	88e1      	ldrh	r1, [r4, #6]
 80027f0:	4628      	mov	r0, r5
  }
}
 80027f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027f6:	e7b2      	b.n	800275e <TIM_SetIC1Prescaler>

080027f8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80027f8:	8b83      	ldrh	r3, [r0, #28]
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002804:	8b83      	ldrh	r3, [r0, #28]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4319      	orrs	r1, r3
 800280a:	8381      	strh	r1, [r0, #28]
 800280c:	4770      	bx	lr

0800280e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800280e:	8b83      	ldrh	r3, [r0, #28]
 8002810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800281a:	8b83      	ldrh	r3, [r0, #28]
 800281c:	b29b      	uxth	r3, r3
 800281e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002822:	b28b      	uxth	r3, r1
 8002824:	8383      	strh	r3, [r0, #28]
 8002826:	4770      	bx	lr

08002828 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800282c:	880b      	ldrh	r3, [r1, #0]
 800282e:	88aa      	ldrh	r2, [r5, #4]
 8002830:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002832:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002834:	b93b      	cbnz	r3, 8002846 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002836:	892b      	ldrh	r3, [r5, #8]
 8002838:	f7ff fbee 	bl	8002018 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800283c:	88e9      	ldrh	r1, [r5, #6]
 800283e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002844:	e78b      	b.n	800275e <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800284a:	892b      	ldrh	r3, [r5, #8]
 800284c:	f7ff fbfd 	bl	800204a <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002850:	88e9      	ldrh	r1, [r5, #6]
 8002852:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002858:	e78c      	b.n	8002774 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800285a:	2b08      	cmp	r3, #8
 800285c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002860:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002862:	d11d      	bne.n	80028a0 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002864:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8002868:	043f      	lsls	r7, r7, #16
 800286a:	0c3f      	lsrs	r7, r7, #16
 800286c:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800286e:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8002870:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8002872:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8002874:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002876:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800287a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800287e:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002882:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002886:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800288a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800288c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002890:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002894:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002896:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002898:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800289e:	e7ab      	b.n	80027f8 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80028a0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80028a4:	043f      	lsls	r7, r7, #16
 80028a6:	0c3f      	lsrs	r7, r7, #16
 80028a8:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028aa:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80028ac:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ae:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028b6:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028b8:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80028ba:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028bc:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80028be:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028c2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028c6:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028ca:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028cc:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80028ce:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80028d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028d4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80028d6:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80028d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80028dc:	e797      	b.n	800280e <TIM_SetIC4Prescaler>

080028de <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80028de:	884a      	ldrh	r2, [r1, #2]
 80028e0:	880b      	ldrh	r3, [r1, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	888a      	ldrh	r2, [r1, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	88ca      	ldrh	r2, [r1, #6]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	890a      	ldrh	r2, [r1, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	894a      	ldrh	r2, [r1, #10]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	898a      	ldrh	r2, [r1, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80028fe:	4770      	bx	lr

08002900 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002900:	2300      	movs	r3, #0
 8002902:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002904:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002906:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002908:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800290a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800290c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800290e:	8183      	strh	r3, [r0, #12]
 8002910:	4770      	bx	lr

08002912 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002912:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002916:	b129      	cbz	r1, 8002924 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002920:	b29b      	uxth	r3, r3
 8002922:	e001      	b.n	8002928 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002928:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800292c:	4770      	bx	lr

0800292e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800292e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002930:	b119      	cbz	r1, 800293a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	e003      	b.n	8002942 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	8083      	strh	r3, [r0, #4]
 8002944:	4770      	bx	lr

08002946 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002946:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002948:	b119      	cbz	r1, 8002952 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800294a:	b29b      	uxth	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	e003      	b.n	800295a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	8083      	strh	r3, [r0, #4]
 800295c:	4770      	bx	lr

0800295e <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800295e:	8983      	ldrh	r3, [r0, #12]
 8002960:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002962:	b10a      	cbz	r2, 8002968 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002964:	4319      	orrs	r1, r3
 8002966:	e001      	b.n	800296c <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002968:	ea23 0101 	bic.w	r1, r3, r1
 800296c:	8181      	strh	r1, [r0, #12]
 800296e:	4770      	bx	lr

08002970 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002970:	8281      	strh	r1, [r0, #20]
 8002972:	4770      	bx	lr

08002974 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002974:	8a03      	ldrh	r3, [r0, #16]
 8002976:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002978:	bf0c      	ite	eq
 800297a:	2000      	moveq	r0, #0
 800297c:	2001      	movne	r0, #1
 800297e:	4770      	bx	lr

08002980 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002980:	43c9      	mvns	r1, r1
 8002982:	b289      	uxth	r1, r1
 8002984:	8201      	strh	r1, [r0, #16]
 8002986:	4770      	bx	lr

08002988 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002988:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800298a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800298c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002990:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002992:	d003      	beq.n	800299c <TIM_GetITStatus+0x14>
 8002994:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002996:	bf0c      	ite	eq
 8002998:	2000      	moveq	r0, #0
 800299a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800299c:	4770      	bx	lr

0800299e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800299e:	43c9      	mvns	r1, r1
 80029a0:	b289      	uxth	r1, r1
 80029a2:	8201      	strh	r1, [r0, #16]
 80029a4:	4770      	bx	lr

080029a6 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80029a6:	430a      	orrs	r2, r1
 80029a8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80029ac:	4770      	bx	lr

080029ae <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029ae:	8983      	ldrh	r3, [r0, #12]
 80029b0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029b2:	b10a      	cbz	r2, 80029b8 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029b4:	4319      	orrs	r1, r3
 80029b6:	e001      	b.n	80029bc <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80029b8:	ea23 0101 	bic.w	r1, r3, r1
 80029bc:	8181      	strh	r1, [r0, #12]
 80029be:	4770      	bx	lr

080029c0 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029c2:	b119      	cbz	r1, 80029cc <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	e003      	b.n	80029d4 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80029cc:	f023 0308 	bic.w	r3, r3, #8
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	8083      	strh	r3, [r0, #4]
 80029d6:	4770      	bx	lr

080029d8 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80029d8:	8903      	ldrh	r3, [r0, #8]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	8103      	strh	r3, [r0, #8]
 80029e4:	4770      	bx	lr

080029e6 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e6:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029f0:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f2:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80029f4:	8903      	ldrh	r3, [r0, #8]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	8103      	strh	r3, [r0, #8]
 80029fe:	4770      	bx	lr

08002a00 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a04:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002a06:	4611      	mov	r1, r2
 8002a08:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a0a:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002a0e:	d102      	bne.n	8002a16 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a10:	f7ff fb1b 	bl	800204a <TI2_Config>
 8002a14:	e001      	b.n	8002a1a <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002a16:	f7ff faff 	bl	8002018 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1a:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a24:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	8123      	strh	r3, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002a28:	8923      	ldrh	r3, [r4, #8]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	8123      	strh	r3, [r4, #8]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}

08002a34 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002a3e:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a40:	8101      	strh	r1, [r0, #8]
 8002a42:	4770      	bx	lr

08002a44 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002a44:	8883      	ldrh	r3, [r0, #4]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002a50:	8883      	ldrh	r3, [r0, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4319      	orrs	r1, r3
 8002a56:	8081      	strh	r1, [r0, #4]
 8002a58:	4770      	bx	lr

08002a5a <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002a5a:	8903      	ldrh	r3, [r0, #8]
 8002a5c:	f023 0307 	bic.w	r3, r3, #7
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002a66:	8903      	ldrh	r3, [r0, #8]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	8101      	strh	r1, [r0, #8]
 8002a6e:	4770      	bx	lr

08002a70 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002a70:	8903      	ldrh	r3, [r0, #8]
 8002a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002a7c:	8903      	ldrh	r3, [r0, #8]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4319      	orrs	r1, r3
 8002a82:	8101      	strh	r1, [r0, #8]
 8002a84:	4770      	bx	lr

08002a86 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a86:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002a88:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002a8a:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002a8c:	4321      	orrs	r1, r4
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002a94:	b29c      	uxth	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	8104      	strh	r4, [r0, #8]
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a9e:	f7ff fff2 	bl	8002a86 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002aa2:	8923      	ldrh	r3, [r4, #8]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aaa:	8123      	strh	r3, [r4, #8]
 8002aac:	bd10      	pop	{r4, pc}

08002aae <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002ab2:	f7ff ffe8 	bl	8002a86 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab6:	8923      	ldrh	r3, [r4, #8]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002ab8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8002ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	8123      	strh	r3, [r4, #8]
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aca:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad0:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad4:	b2b6      	uxth	r6, r6
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ad6:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002ada:	f026 0622 	bic.w	r6, r6, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ade:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae2:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002ae4:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002ae6:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002ae8:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002aea:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002aec:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002af0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002af4:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002af6:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002afa:	b29e      	uxth	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b00:	8406      	strh	r6, [r0, #32]
 8002b02:	bd70      	pop	{r4, r5, r6, pc}

08002b04 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b04:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b06:	b119      	cbz	r1, 8002b10 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	e003      	b.n	8002b18 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	8083      	strh	r3, [r0, #4]
 8002b1a:	4770      	bx	lr

08002b1c <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002b1c:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002b24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <USART_DeInit+0x90>)
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	d105      	bne.n	8002b38 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002b2c:	2010      	movs	r0, #16
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f7ff f834 	bl	8001b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002b34:	2010      	movs	r0, #16
 8002b36:	e037      	b.n	8002ba8 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <USART_DeInit+0x94>)
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d107      	bne.n	8002b4e <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002b3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b42:	2101      	movs	r1, #1
 8002b44:	f7ff f81e 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002b48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b4c:	e009      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <USART_DeInit+0x98>)
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d10b      	bne.n	8002b6c <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002b54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b58:	2101      	movs	r1, #1
 8002b5a:	f7ff f813 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b62:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002b68:	f7ff b80c 	b.w	8001b84 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <USART_DeInit+0x9c>)
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	d107      	bne.n	8002b82 <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002b72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b76:	2101      	movs	r1, #1
 8002b78:	f7ff f804 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002b7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b80:	e7ef      	b.n	8002b62 <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <USART_DeInit+0xa0>)
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d107      	bne.n	8002b98 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	f7fe fff9 	bl	8001b84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002b92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b96:	e7e4      	b.n	8002b62 <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <USART_DeInit+0xa4>)
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	d109      	bne.n	8002bb2 <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b9e:	2020      	movs	r0, #32
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f7fe fffb 	bl	8001b9c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	2100      	movs	r1, #0
    }
  }
}
 8002baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002bae:	f7fe bff5 	b.w	8001b9c <RCC_APB2PeriphResetCmd>
 8002bb2:	bd08      	pop	{r3, pc}
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004800 	.word	0x40004800
 8002bc0:	40004c00 	.word	0x40004c00
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40011400 	.word	0x40011400

08002bcc <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bcc:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002bce:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002bd0:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bd6:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bd8:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002bda:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002bdc:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002bde:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be0:	8909      	ldrh	r1, [r1, #8]
 8002be2:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002be4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002be8:	430a      	orrs	r2, r1
 8002bea:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bec:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf0:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf2:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002bf4:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002bf6:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002bfc:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002bfe:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002c00:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c06:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c08:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002c0a:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002c0c:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002c0e:	4668      	mov	r0, sp
 8002c10:	f7fe feea 	bl	80019e8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <USART_Init+0xb0>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d003      	beq.n	8002c22 <USART_Init+0x56>
 8002c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d101      	bne.n	8002c26 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	e000      	b.n	8002c28 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002c26:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c28:	89a2      	ldrh	r2, [r4, #12]
 8002c2a:	b212      	sxth	r2, r2
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	682a      	ldr	r2, [r5, #0]
 8002c30:	f04f 0119 	mov.w	r1, #25
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c34:	bfb4      	ite	lt
 8002c36:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c38:	0092      	lslge	r2, r2, #2
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002c3a:	4359      	muls	r1, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002c3c:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002c40:	2364      	movs	r3, #100	; 0x64
 8002c42:	fbb1 f2f3 	udiv	r2, r1, r3
 8002c46:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002c48:	0910      	lsrs	r0, r2, #4
 8002c4a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002c4e:	89a0      	ldrh	r0, [r4, #12]
 8002c50:	b200      	sxth	r0, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	da06      	bge.n	8002c64 <USART_Init+0x98>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002c56:	00c9      	lsls	r1, r1, #3
 8002c58:	3132      	adds	r1, #50	; 0x32
 8002c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	e005      	b.n	8002c70 <USART_Init+0xa4>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002c64:	0109      	lsls	r1, r1, #4
 8002c66:	3132      	adds	r1, #50	; 0x32
 8002c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002c72:	b292      	uxth	r2, r2
 8002c74:	8122      	strh	r2, [r4, #8]
}
 8002c76:	b005      	add	sp, #20
 8002c78:	bd30      	pop	{r4, r5, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40011000 	.word	0x40011000

08002c80 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002c80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c84:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c86:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002c8c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002c8e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c90:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002c92:	8183      	strh	r3, [r0, #12]
 8002c94:	4770      	bx	lr

08002c96 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c96:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c98:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002c9a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c9c:	884c      	ldrh	r4, [r1, #2]
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	888c      	ldrh	r4, [r1, #4]
 8002ca2:	88c9      	ldrh	r1, [r1, #6]
 8002ca4:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002ca6:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ca8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002caa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002cae:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	8203      	strh	r3, [r0, #16]
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002cba:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002cbc:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002cbe:	80c3      	strh	r3, [r0, #6]
 8002cc0:	4770      	bx	lr

08002cc2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cc4:	b119      	cbz	r1, 8002cce <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ccc:	e003      	b.n	8002cd6 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	8183      	strh	r3, [r0, #12]
 8002cd8:	4770      	bx	lr

08002cda <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002cda:	8b03      	ldrh	r3, [r0, #24]
 8002cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ce0:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002ce2:	8b03      	ldrh	r3, [r0, #24]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4319      	orrs	r1, r3
 8002ce8:	8301      	strh	r1, [r0, #24]
 8002cea:	4770      	bx	lr

08002cec <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cec:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cee:	b129      	cbz	r1, 8002cfc <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	e001      	b.n	8002d00 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d00:	8183      	strh	r3, [r0, #12]
 8002d02:	4770      	bx	lr

08002d04 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d04:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d06:	b119      	cbz	r1, 8002d10 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0e:	e003      	b.n	8002d18 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	8283      	strh	r3, [r0, #20]
 8002d1a:	4770      	bx	lr

08002d1c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002d1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d20:	8081      	strh	r1, [r0, #4]
 8002d22:	4770      	bx	lr

08002d24 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002d24:	8880      	ldrh	r0, [r0, #4]
}
 8002d26:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002d2a:	4770      	bx	lr

08002d2c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002d2c:	8a03      	ldrh	r3, [r0, #16]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002d38:	8a03      	ldrh	r3, [r0, #16]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	8201      	strh	r1, [r0, #16]
 8002d40:	4770      	bx	lr

08002d42 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d42:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002d44:	b119      	cbz	r1, 8002d4e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	e003      	b.n	8002d56 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002d4e:	f023 0302 	bic.w	r3, r3, #2
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	8183      	strh	r3, [r0, #12]
 8002d58:	4770      	bx	lr

08002d5a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002d5a:	8983      	ldrh	r3, [r0, #12]
 8002d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002d66:	8983      	ldrh	r3, [r0, #12]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4319      	orrs	r1, r3
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	4770      	bx	lr

08002d70 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002d70:	8a03      	ldrh	r3, [r0, #16]
 8002d72:	f023 0320 	bic.w	r3, r3, #32
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002d7c:	8a03      	ldrh	r3, [r0, #16]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4319      	orrs	r1, r3
 8002d82:	8201      	strh	r1, [r0, #16]
 8002d84:	4770      	bx	lr

08002d86 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d86:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d88:	b119      	cbz	r1, 8002d92 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	e003      	b.n	8002d9a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	8203      	strh	r3, [r0, #16]
 8002d9c:	4770      	bx	lr

08002d9e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002d9e:	8983      	ldrh	r3, [r0, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	8183      	strh	r3, [r0, #12]
 8002da8:	4770      	bx	lr

08002daa <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002daa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002dac:	b119      	cbz	r1, 8002db6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	e003      	b.n	8002dbe <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002db6:	f023 0308 	bic.w	r3, r3, #8
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	8283      	strh	r3, [r0, #20]
 8002dc0:	4770      	bx	lr

08002dc2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002dc2:	8b03      	ldrh	r3, [r0, #24]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002dc8:	8b03      	ldrh	r3, [r0, #24]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002dd0:	8301      	strh	r1, [r0, #24]
 8002dd2:	4770      	bx	lr

08002dd4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dd6:	b119      	cbz	r1, 8002de0 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	e003      	b.n	8002de8 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002de0:	f023 0320 	bic.w	r3, r3, #32
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	8283      	strh	r3, [r0, #20]
 8002dea:	4770      	bx	lr

08002dec <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002dec:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dee:	b119      	cbz	r1, 8002df8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	e003      	b.n	8002e00 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8283      	strh	r3, [r0, #20]
 8002e02:	4770      	bx	lr

08002e04 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002e04:	8a83      	ldrh	r3, [r0, #20]
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002e10:	8a83      	ldrh	r3, [r0, #20]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4319      	orrs	r1, r3
 8002e16:	8281      	strh	r1, [r0, #20]
 8002e18:	4770      	bx	lr

08002e1a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002e1c:	b119      	cbz	r1, 8002e26 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	e003      	b.n	8002e2e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	8283      	strh	r3, [r0, #20]
 8002e30:	4770      	bx	lr

08002e32 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e32:	8a83      	ldrh	r3, [r0, #20]
 8002e34:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002e36:	b10a      	cbz	r2, 8002e3c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002e38:	4319      	orrs	r1, r3
 8002e3a:	e001      	b.n	8002e40 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002e3c:	ea23 0101 	bic.w	r1, r3, r1
 8002e40:	8281      	strh	r1, [r0, #20]
 8002e42:	4770      	bx	lr

08002e44 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e44:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002e48:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e4a:	2401      	movs	r4, #1
 8002e4c:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e50:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002e52:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e56:	d101      	bne.n	8002e5c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002e58:	300c      	adds	r0, #12
 8002e5a:	e003      	b.n	8002e64 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002e5c:	2b02      	cmp	r3, #2
  {
    usartxbase += 0x10;
 8002e5e:	bf0c      	ite	eq
 8002e60:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002e62:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e64:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002e66:	b10a      	cbz	r2, 8002e6c <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e68:	4319      	orrs	r1, r3
 8002e6a:	e001      	b.n	8002e70 <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002e6c:	ea23 0101 	bic.w	r1, r3, r1
 8002e70:	6001      	str	r1, [r0, #0]
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002e74:	8803      	ldrh	r3, [r0, #0]
 8002e76:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002e78:	bf0c      	ite	eq
 8002e7a:	2000      	moveq	r0, #0
 8002e7c:	2001      	movne	r0, #1
 8002e7e:	4770      	bx	lr

08002e80 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e80:	43c9      	mvns	r1, r1
 8002e82:	b289      	uxth	r1, r1
 8002e84:	8001      	strh	r1, [r0, #0]
 8002e86:	4770      	bx	lr

08002e88 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e88:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e8a:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e8e:	f001 031f 	and.w	r3, r1, #31
 8002e92:	2201      	movs	r2, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e94:	2c01      	cmp	r4, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e96:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e9a:	d101      	bne.n	8002ea0 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8002e9c:	8983      	ldrh	r3, [r0, #12]
 8002e9e:	e003      	b.n	8002ea8 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002ea0:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002ea2:	bf0c      	ite	eq
 8002ea4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002ea6:	8a83      	ldrhne	r3, [r0, #20]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002eac:	8802      	ldrh	r2, [r0, #0]
 8002eae:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eb0:	b143      	cbz	r3, 8002ec4 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	0a09      	lsrs	r1, r1, #8
 8002eb6:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002eba:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2000      	moveq	r0, #0
 8002ec0:	2001      	movne	r0, #1
 8002ec2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002ec4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002ec8:	0a09      	lsrs	r1, r1, #8
 8002eca:	2301      	movs	r3, #1
 8002ecc:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8003      	strh	r3, [r0, #0]
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	4770      	bx	lr

08002ede <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002ede:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_execve+0xe>)
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000168c 	.word	0x2000168c

08002ef0 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <_fork+0xc>)
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efa:	4770      	bx	lr
 8002efc:	2000168c 	.word	0x2000168c

08002f00 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f04:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	4770      	bx	lr

08002f0a <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	4770      	bx	lr

08002f0e <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d904      	bls.n	8002f1c <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <_isatty+0x12>)
 8002f14:	2209      	movs	r2, #9
 8002f16:	601a      	str	r2, [r3, #0]
		return 0;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002f1c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002f1e:	4770      	bx	lr
 8002f20:	2000168c 	.word	0x2000168c

08002f24 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_kill+0xc>)
 8002f26:	2216      	movs	r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2e:	4770      	bx	lr
 8002f30:	2000168c 	.word	0x2000168c

08002f34 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_link+0xc>)
 8002f36:	221f      	movs	r2, #31
 8002f38:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3e:	4770      	bx	lr
 8002f40:	2000168c 	.word	0x2000168c

08002f44 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f44:	2000      	movs	r0, #0
 8002f46:	4770      	bx	lr

08002f48 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002f48:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002f4a:	b138      	cbz	r0, 8002f5c <_read+0x14>
 8002f4c:	e00d      	b.n	8002f6a <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f4e:	881d      	ldrh	r5, [r3, #0]
 8002f50:	06ad      	lsls	r5, r5, #26
 8002f52:	d5fc      	bpl.n	8002f4e <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f54:	88a5      	ldrh	r5, [r4, #4]
 8002f56:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f58:	3001      	adds	r0, #1
 8002f5a:	e001      	b.n	8002f60 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <_read+0x30>)
 8002f5e:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f60:	4290      	cmp	r0, r2
 8002f62:	dbf4      	blt.n	8002f4e <_read+0x6>
 8002f64:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002f68:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <_read+0x34>)
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	601a      	str	r2, [r3, #0]
				return -1;
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	40011000 	.word	0x40011000
 8002f7c:	2000168c 	.word	0x2000168c

08002f80 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f84:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	4770      	bx	lr

08002f8a <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8e:	4770      	bx	lr

08002f90 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <_unlink+0xc>)
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9a:	4770      	bx	lr
 8002f9c:	2000168c 	.word	0x2000168c

08002fa0 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <_wait+0xc>)
 8002fa2:	220a      	movs	r2, #10
 8002fa4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002faa:	4770      	bx	lr
 8002fac:	2000168c 	.word	0x2000168c

08002fb0 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fb0:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002fb2:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002fb4:	d009      	beq.n	8002fca <_write+0x1a>
 8002fb6:	2802      	cmp	r0, #2
 8002fb8:	d11a      	bne.n	8002ff0 <_write+0x40>
 8002fba:	e013      	b.n	8002fe4 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fbc:	8805      	ldrh	r5, [r0, #0]
 8002fbe:	066d      	lsls	r5, r5, #25
 8002fc0:	d5fc      	bpl.n	8002fbc <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc2:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fc4:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fc6:	80a5      	strh	r5, [r4, #4]
 8002fc8:	e002      	b.n	8002fd0 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fca:	480d      	ldr	r0, [pc, #52]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fcc:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fce:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	dbf3      	blt.n	8002fbc <_write+0xc>
 8002fd4:	e011      	b.n	8002ffa <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fd6:	8805      	ldrh	r5, [r0, #0]
 8002fd8:	066d      	lsls	r5, r5, #25
 8002fda:	d5fc      	bpl.n	8002fd6 <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fdc:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fde:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002fe0:	80a5      	strh	r5, [r4, #4]
 8002fe2:	e002      	b.n	8002fea <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe4:	4806      	ldr	r0, [pc, #24]	; (8003000 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fe6:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe8:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002fea:	4293      	cmp	r3, r2
 8002fec:	dbf3      	blt.n	8002fd6 <_write+0x26>
 8002fee:	e004      	b.n	8002ffa <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <_write+0x54>)
 8002ff2:	2209      	movs	r2, #9
 8002ff4:	601a      	str	r2, [r3, #0]
				return -1;
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	bd30      	pop	{r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	40011000 	.word	0x40011000
 8003004:	2000168c 	.word	0x2000168c

08003008 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8003008:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <_sbrk+0x38>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	b90a      	cbnz	r2, 8003014 <_sbrk+0xc>
		heap_end = &_ebss;
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <_sbrk+0x3c>)
 8003012:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8003014:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8003016:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800301a:	1818      	adds	r0, r3, r0
 800301c:	4290      	cmp	r0, r2
 800301e:	d90a      	bls.n	8003036 <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8003020:	2219      	movs	r2, #25
 8003022:	2002      	movs	r0, #2
 8003024:	4908      	ldr	r1, [pc, #32]	; (8003048 <_sbrk+0x40>)
 8003026:	f7ff ffc3 	bl	8002fb0 <_write>
		errno = ENOMEM;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x44>)
 800302c:	220c      	movs	r2, #12
 800302e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003034:	e001      	b.n	800303a <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8003036:	4a02      	ldr	r2, [pc, #8]	; (8003040 <_sbrk+0x38>)
 8003038:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 800303a:	4618      	mov	r0, r3
 800303c:	bd08      	pop	{r3, pc}
 800303e:	bf00      	nop
 8003040:	2000095c 	.word	0x2000095c
 8003044:	20001690 	.word	0x20001690
 8003048:	0800b04f 	.word	0x0800b04f
 800304c:	2000168c 	.word	0x2000168c

08003050 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8003050:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8003052:	2001      	movs	r0, #1
 8003054:	4902      	ldr	r1, [pc, #8]	; (8003060 <_exit+0x10>)
 8003056:	2204      	movs	r2, #4
 8003058:	f7ff ffaa 	bl	8002fb0 <_write>
 800305c:	e7fe      	b.n	800305c <_exit+0xc>
 800305e:	bf00      	nop
 8003060:	0800b069 	.word	0x0800b069
 8003064:	0800b0d4 	.word	0x0800b0d4
 8003068:	20000000 	.word	0x20000000
 800306c:	2000095c 	.word	0x2000095c
 8003070:	2000095c 	.word	0x2000095c
 8003074:	20001690 	.word	0x20001690

08003078 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003078:	4770      	bx	lr

0800307a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800307a:	e7fe      	b.n	800307a <HardFault_Handler>

0800307c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800307c:	e7fe      	b.n	800307c <MemManage_Handler>

0800307e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800307e:	e7fe      	b.n	800307e <BusFault_Handler>

08003080 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler>

08003082 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003082:	4770      	bx	lr

08003084 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003084:	4770      	bx	lr

08003086 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003086:	4770      	bx	lr

08003088 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <SystemInit+0xd4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800309c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80030a0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030a2:	492f      	ldr	r1, [pc, #188]	; (8003160 <SystemInit+0xd8>)
 80030a4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030a6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030aa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80030ae:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030b0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030b2:	9200      	str	r2, [sp, #0]
 80030b4:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030bc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030c4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80030c6:	9a00      	ldr	r2, [sp, #0]
 80030c8:	3201      	adds	r2, #1
 80030ca:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030cc:	9a01      	ldr	r2, [sp, #4]
 80030ce:	b91a      	cbnz	r2, 80030d8 <SystemInit+0x50>
 80030d0:	9a00      	ldr	r2, [sp, #0]
 80030d2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80030d6:	d1f2      	bne.n	80030be <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <SystemInit+0xd4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80030e0:	bf18      	it	ne
 80030e2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030e4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d004      	beq.n	80030f6 <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <SystemInit+0xdc>)
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e02f      	b.n	8003156 <SystemInit+0xce>
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <SystemInit+0xd4>)
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <SystemInit+0xe0>)
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003108:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003114:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800311c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <SystemInit+0xe4>)
 8003120:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003128:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <SystemInit+0xd4>)
 800312e:	0189      	lsls	r1, r1, #6
 8003130:	d5fb      	bpl.n	800312a <SystemInit+0xa2>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <SystemInit+0xe8>)
 8003134:	f240 6105 	movw	r1, #1541	; 0x605
 8003138:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800313a:	6893      	ldr	r3, [r2, #8]
 800313c:	f023 0303 	bic.w	r3, r3, #3
 8003140:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003142:	6893      	ldr	r3, [r2, #8]
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800314a:	6893      	ldr	r3, [r2, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d1fa      	bne.n	800314a <SystemInit+0xc2>
 8003154:	e7ca      	b.n	80030ec <SystemInit+0x64>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8003156:	b002      	add	sp, #8
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	24003010 	.word	0x24003010
 8003164:	e000ed00 	.word	0xe000ed00
 8003168:	40007000 	.word	0x40007000
 800316c:	07405419 	.word	0x07405419
 8003170:	40023c00 	.word	0x40023c00

08003174 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <SystemCoreClockUpdate+0x68>)
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 800317e:	2904      	cmp	r1, #4
 8003180:	d003      	beq.n	800318a <SystemCoreClockUpdate+0x16>
 8003182:	2908      	cmp	r1, #8
 8003184:	d003      	beq.n	800318e <SystemCoreClockUpdate+0x1a>
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <SystemCoreClockUpdate+0x6c>)
 8003188:	e019      	b.n	80031be <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <SystemCoreClockUpdate+0x70>)
 800318c:	e017      	b.n	80031be <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800318e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003192:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	bf14      	ite	ne
 800319a:	4b12      	ldrne	r3, [pc, #72]	; (80031e4 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800319c:	4b10      	ldreq	r3, [pc, #64]	; (80031e0 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031a8:	6852      	ldr	r2, [r2, #4]
 80031aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031b2:	3201      	adds	r2, #1
 80031b4:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031b6:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80031b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031be:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SystemCoreClockUpdate+0x64>)
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SystemCoreClockUpdate+0x68>)
 80031c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031ca:	189a      	adds	r2, r3, r2
 80031cc:	7911      	ldrb	r1, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	40ca      	lsrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	20000088 	.word	0x20000088
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <cleanup_glue>:

void
_DEFUN (cleanup_glue, (ptr, glue),
     struct _reent *ptr _AND
     struct _glue *glue)
{
 80031e8:	e92d4038 	push	{r3, r4, r5, lr}
 80031ec:	e1a04001 	mov	r4, r1
  /* Have to reclaim these in reverse order: */
  if (glue->_next)
 80031f0:	e5911000 	ldr	r1, [r1]
 80031f4:	e3510000 	cmp	r1, #0

void
_DEFUN (cleanup_glue, (ptr, glue),
     struct _reent *ptr _AND
     struct _glue *glue)
{
 80031f8:	e1a05000 	mov	r5, r0
  /* Have to reclaim these in reverse order: */
  if (glue->_next)
    cleanup_glue (ptr, glue->_next);
 80031fc:	1bfffff9 	blne	80031e8 <cleanup_glue>

  _free_r (ptr, glue);
 8003200:	e1a00005 	mov	r0, r5
 8003204:	e1a01004 	mov	r1, r4
 8003208:	eb000e1d 	bl	8006a84 <_free_r>
}
 800320c:	e8bd4038 	pop	{r3, r4, r5, lr}
 8003210:	e12fff1e 	bx	lr

08003214 <_reclaim_reent>:

void
_DEFUN (_reclaim_reent, (ptr),
     struct _reent *ptr)
{
  if (ptr != _impure_ptr)
 8003214:	e59f30f0 	ldr	r3, [pc, #240]	; 800330c <_reclaim_reent+0xf8>
 8003218:	e5933000 	ldr	r3, [r3]
 800321c:	e1500003 	cmp	r0, r3
}

void
_DEFUN (_reclaim_reent, (ptr),
     struct _reent *ptr)
{
 8003220:	e92d4070 	push	{r4, r5, r6, lr}
 8003224:	e1a05000 	mov	r5, r0
  if (ptr != _impure_ptr)
 8003228:	0a00002b 	beq	80032dc <_reclaim_reent+0xc8>
      /* used by mprec routines. */
#ifdef _REENT_SMALL
      if (ptr->_mp)	/* don't bother allocating it! */
      {
#endif
      if (_REENT_MP_FREELIST(ptr))
 800322c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
 8003230:	e3520000 	cmp	r2, #0
 8003234:	0a000011 	beq	8003280 <_reclaim_reent+0x6c>
 8003238:	e3a03000 	mov	r3, #0
 800323c:	e1a06003 	mov	r6, r3
	  int i;
	  for (i = 0; i < _Kmax; i++) 
	    {
	      struct _Bigint *thisone, *nextone;
	
	      nextone = _REENT_MP_FREELIST(ptr)[i];
 8003240:	e7921103 	ldr	r1, [r2, r3, lsl #2]
	      while (nextone)
 8003244:	e3510000 	cmp	r1, #0
 8003248:	0a000005 	beq	8003264 <_reclaim_reent+0x50>
		{
		  thisone = nextone;
		  nextone = nextone->_next;
 800324c:	e5914000 	ldr	r4, [r1]
		  _free_r (ptr, thisone);
 8003250:	e1a00005 	mov	r0, r5
 8003254:	eb000e0a 	bl	8006a84 <_free_r>
	  for (i = 0; i < _Kmax; i++) 
	    {
	      struct _Bigint *thisone, *nextone;
	
	      nextone = _REENT_MP_FREELIST(ptr)[i];
	      while (nextone)
 8003258:	e2541000 	subs	r1, r4, #0
 800325c:	1afffffa 	bne	800324c <_reclaim_reent+0x38>
 8003260:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
      {
#endif
      if (_REENT_MP_FREELIST(ptr))
	{
	  int i;
	  for (i = 0; i < _Kmax; i++) 
 8003264:	e2866001 	add	r6, r6, #1
 8003268:	e3560020 	cmp	r6, #32
 800326c:	e1a03006 	mov	r3, r6
 8003270:	1afffff2 	bne	8003240 <_reclaim_reent+0x2c>
		  nextone = nextone->_next;
		  _free_r (ptr, thisone);
		}
	    }    

	  _free_r (ptr, _REENT_MP_FREELIST(ptr));
 8003274:	e1a01002 	mov	r1, r2
 8003278:	e1a00005 	mov	r0, r5
 800327c:	eb000e00 	bl	8006a84 <_free_r>
	}
      if (_REENT_MP_RESULT(ptr))
 8003280:	e5951040 	ldr	r1, [r5, #64]	; 0x40
 8003284:	e3510000 	cmp	r1, #0
	_free_r (ptr, _REENT_MP_RESULT(ptr));
 8003288:	11a00005 	movne	r0, r5
 800328c:	1b000dfc 	blne	8006a84 <_free_r>
	_free_r (ptr, ptr->_asctime_buf);
      if (ptr->_atexit && ptr->_atexit->_on_exit_args_ptr)
	_free_r (ptr, ptr->_atexit->_on_exit_args_ptr);
#else
      /* atexit stuff */
      if ((ptr->_atexit) && (ptr->_atexit != &ptr->_atexit0))
 8003290:	e5951148 	ldr	r1, [r5, #328]	; 0x148
 8003294:	e3510000 	cmp	r1, #0
 8003298:	0a000008 	beq	80032c0 <_reclaim_reent+0xac>
 800329c:	e2856f53 	add	r6, r5, #332	; 0x14c
 80032a0:	e1510006 	cmp	r1, r6
 80032a4:	0a000005 	beq	80032c0 <_reclaim_reent+0xac>
	{
	  struct _atexit *p, *q;
	  for (p = ptr->_atexit; p != &ptr->_atexit0;)
	    {
	      q = p;
	      p = p->_next;
 80032a8:	e5914000 	ldr	r4, [r1]
	      _free_r (ptr, q);
 80032ac:	e1a00005 	mov	r0, r5
 80032b0:	eb000df3 	bl	8006a84 <_free_r>
#else
      /* atexit stuff */
      if ((ptr->_atexit) && (ptr->_atexit != &ptr->_atexit0))
	{
	  struct _atexit *p, *q;
	  for (p = ptr->_atexit; p != &ptr->_atexit0;)
 80032b4:	e1560004 	cmp	r6, r4
	    {
	      q = p;
	      p = p->_next;
 80032b8:	e1a01004 	mov	r1, r4
#else
      /* atexit stuff */
      if ((ptr->_atexit) && (ptr->_atexit != &ptr->_atexit0))
	{
	  struct _atexit *p, *q;
	  for (p = ptr->_atexit; p != &ptr->_atexit0;)
 80032bc:	1afffff9 	bne	80032a8 <_reclaim_reent+0x94>
	      _free_r (ptr, q);
	    }
	}
#endif

      if (ptr->_cvtbuf)
 80032c0:	e5951054 	ldr	r1, [r5, #84]	; 0x54
 80032c4:	e3510000 	cmp	r1, #0
	_free_r (ptr, ptr->_cvtbuf);
 80032c8:	11a00005 	movne	r0, r5
 80032cc:	1b000dec 	blne	8006a84 <_free_r>

      if (ptr->__sdidinit)
 80032d0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
 80032d4:	e3530000 	cmp	r3, #0
 80032d8:	1a000001 	bne	80032e4 <_reclaim_reent+0xd0>
	}

      /* Malloc memory not reclaimed; no good way to return memory anyway. */

    }
}
 80032dc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80032e0:	e12fff1e 	bx	lr

      if (ptr->__sdidinit)
	{
	  /* cleanup won't reclaim memory 'coz usually it's run
	     before the program exits, and who wants to wait for that? */
	  ptr->__cleanup (ptr);
 80032e4:	e1a00005 	mov	r0, r5
 80032e8:	e595c03c 	ldr	ip, [r5, #60]	; 0x3c
 80032ec:	e1a0e00f 	mov	lr, pc
 80032f0:	e12fff1c 	bx	ip

	  if (ptr->__sglue._next)
 80032f4:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
 80032f8:	e3510000 	cmp	r1, #0
 80032fc:	0afffff6 	beq	80032dc <_reclaim_reent+0xc8>
	    cleanup_glue (ptr, ptr->__sglue._next);
 8003300:	e1a00005 	mov	r0, r5
	}

      /* Malloc memory not reclaimed; no good way to return memory anyway. */

    }
}
 8003304:	e8bd4070 	pop	{r4, r5, r6, lr}
	  /* cleanup won't reclaim memory 'coz usually it's run
	     before the program exits, and who wants to wait for that? */
	  ptr->__cleanup (ptr);

	  if (ptr->__sglue._next)
	    cleanup_glue (ptr, ptr->__sglue._next);
 8003308:	eaffffb6 	b	80031e8 <cleanup_glue>
 800330c:	200000a0 	.word	0x200000a0

08003310 <_wrapup_reent>:
 *         down which is used on a global basis.
 */

void
_DEFUN (_wrapup_reent, (ptr), struct _reent *ptr)
{
 8003310:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  register struct _atexit *p;
  register int n;

  if (ptr == NULL)
 8003314:	e2507000 	subs	r7, r0, #0
    ptr = _REENT;
 8003318:	059f3060 	ldreq	r3, [pc, #96]	; 8003380 <_wrapup_reent+0x70>
 800331c:	05937000 	ldreq	r7, [r3]

#ifdef _REENT_SMALL
  for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
    (*p->_fns[n]) ();
#else
  for (p = ptr->_atexit; p; p = p->_next)
 8003320:	e5976148 	ldr	r6, [r7, #328]	; 0x148
 8003324:	e3560000 	cmp	r6, #0
 8003328:	0a00000d 	beq	8003364 <_wrapup_reent+0x54>
    for (n = p->_ind; --n >= 0;)
 800332c:	e5965004 	ldr	r5, [r6, #4]
 8003330:	e2554001 	subs	r4, r5, #1
 *  NOTE:  This is to be executed at task exit.  It does not tear anything
 *         down which is used on a global basis.
 */

void
_DEFUN (_wrapup_reent, (ptr), struct _reent *ptr)
 8003334:	52855002 	addpl	r5, r5, #2
 8003338:	50865105 	addpl	r5, r6, r5, lsl #2
#ifdef _REENT_SMALL
  for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
    (*p->_fns[n]) ();
#else
  for (p = ptr->_atexit; p; p = p->_next)
    for (n = p->_ind; --n >= 0;)
 800333c:	4a000005 	bmi	8003358 <_wrapup_reent+0x48>
 8003340:	e2444001 	sub	r4, r4, #1
      (*p->_fns[n]) ();
 8003344:	e5353004 	ldr	r3, [r5, #-4]!
 8003348:	e1a0e00f 	mov	lr, pc
 800334c:	e12fff13 	bx	r3
#ifdef _REENT_SMALL
  for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
    (*p->_fns[n]) ();
#else
  for (p = ptr->_atexit; p; p = p->_next)
    for (n = p->_ind; --n >= 0;)
 8003350:	e3740001 	cmn	r4, #1
 8003354:	1afffff9 	bne	8003340 <_wrapup_reent+0x30>

#ifdef _REENT_SMALL
  for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
    (*p->_fns[n]) ();
#else
  for (p = ptr->_atexit; p; p = p->_next)
 8003358:	e5966000 	ldr	r6, [r6]
 800335c:	e3560000 	cmp	r6, #0
 8003360:	1afffff1 	bne	800332c <_wrapup_reent+0x1c>
    for (n = p->_ind; --n >= 0;)
      (*p->_fns[n]) ();
#endif
  if (ptr->__cleanup)
 8003364:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
 8003368:	e3530000 	cmp	r3, #0
    (*ptr->__cleanup) (ptr);
 800336c:	11a00007 	movne	r0, r7
 8003370:	11a0e00f 	movne	lr, pc
 8003374:	112fff13 	bxne	r3
}
 8003378:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 800337c:	e12fff1e 	bx	lr
 8003380:	200000a0 	.word	0x200000a0

08003384 <_sprintf_r>:
           struct _reent *ptr;
           char *str;
           _CONST char *fmt;
           va_dcl
#endif
{
 8003384:	e92d000c 	push	{r2, r3}
 8003388:	e92d4070 	push	{r4, r5, r6, lr}
 800338c:	e24dd070 	sub	sp, sp, #112	; 0x70
  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
#ifdef _HAVE_STDC
  va_start (ap, fmt);
 8003390:	e28de084 	add	lr, sp, #132	; 0x84
           struct _reent *ptr;
           char *str;
           _CONST char *fmt;
           va_dcl
#endif
{
 8003394:	e1a04001 	mov	r4, r1
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
 8003398:	e3e0c102 	mvn	ip, #-2147483648	; 0x80000000
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (ptr, &f, fmt, ap);
 800339c:	e1a0300e 	mov	r3, lr
 80033a0:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
{
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
 80033a4:	e3a06f82 	mov	r6, #520	; 0x208
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
 80033a8:	e3e05000 	mvn	r5, #0
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (ptr, &f, fmt, ap);
 80033ac:	e28d1008 	add	r1, sp, #8
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
 80033b0:	e58d4008 	str	r4, [sp, #8]
 80033b4:	e58d4018 	str	r4, [sp, #24]
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
#ifdef _HAVE_STDC
  va_start (ap, fmt);
 80033b8:	e58de004 	str	lr, [sp, #4]
{
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
 80033bc:	e1cd61b4 	strh	r6, [sp, #20]
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
 80033c0:	e58dc010 	str	ip, [sp, #16]
 80033c4:	e58dc01c 	str	ip, [sp, #28]
  f._file = -1;  /* No file. */
 80033c8:	e1cd51b6 	strh	r5, [sp, #22]
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (ptr, &f, fmt, ap);
 80033cc:	eb000023 	bl	8003460 <_svfprintf_r>
  va_end (ap);
  *f._p = '\0';	/* terminate the string */
 80033d0:	e59d3008 	ldr	r3, [sp, #8]
 80033d4:	e3a02000 	mov	r2, #0
 80033d8:	e5c32000 	strb	r2, [r3]
  return (ret);
}
 80033dc:	e28dd070 	add	sp, sp, #112	; 0x70
 80033e0:	e8bd4070 	pop	{r4, r5, r6, lr}
 80033e4:	e28dd008 	add	sp, sp, #8
 80033e8:	e12fff1e 	bx	lr

080033ec <sprintf>:
sprintf(str, fmt, va_alist)
        char *str;
        _CONST char *fmt;
        va_dcl
#endif
{
 80033ec:	e92d000e 	push	{r1, r2, r3}
 80033f0:	e92d4070 	push	{r4, r5, r6, lr}
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (_REENT, &f, fmt, ap);
 80033f4:	e59f2060 	ldr	r2, [pc, #96]	; 800345c <sprintf+0x70>
sprintf(str, fmt, va_alist)
        char *str;
        _CONST char *fmt;
        va_dcl
#endif
{
 80033f8:	e24dd074 	sub	sp, sp, #116	; 0x74
  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
#ifdef _HAVE_STDC
  va_start (ap, fmt);
 80033fc:	e28de088 	add	lr, sp, #136	; 0x88
sprintf(str, fmt, va_alist)
        char *str;
        _CONST char *fmt;
        va_dcl
#endif
{
 8003400:	e1a04000 	mov	r4, r0
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
 8003404:	e3e0c102 	mvn	ip, #-2147483648	; 0x80000000
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (_REENT, &f, fmt, ap);
 8003408:	e1a0300e 	mov	r3, lr
 800340c:	e5920000 	ldr	r0, [r2]
{
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
 8003410:	e3a06f82 	mov	r6, #520	; 0x208
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (_REENT, &f, fmt, ap);
 8003414:	e59d2084 	ldr	r2, [sp, #132]	; 0x84
  FILE f;

  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
 8003418:	e3e05000 	mvn	r5, #0
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (_REENT, &f, fmt, ap);
 800341c:	e28d1008 	add	r1, sp, #8
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
  f._bf._base = f._p = (unsigned char *) str;
 8003420:	e58d4008 	str	r4, [sp, #8]
 8003424:	e58d4018 	str	r4, [sp, #24]
  f._bf._size = f._w = INT_MAX;
  f._file = -1;  /* No file. */
#ifdef _HAVE_STDC
  va_start (ap, fmt);
 8003428:	e58de004 	str	lr, [sp, #4]
{
  int ret;
  va_list ap;
  FILE f;

  f._flags = __SWR | __SSTR;
 800342c:	e1cd61b4 	strh	r6, [sp, #20]
  f._bf._base = f._p = (unsigned char *) str;
  f._bf._size = f._w = INT_MAX;
 8003430:	e58dc010 	str	ip, [sp, #16]
 8003434:	e58dc01c 	str	ip, [sp, #28]
  f._file = -1;  /* No file. */
 8003438:	e1cd51b6 	strh	r5, [sp, #22]
#ifdef _HAVE_STDC
  va_start (ap, fmt);
#else
  va_start (ap);
#endif
  ret = _svfprintf_r (_REENT, &f, fmt, ap);
 800343c:	eb000007 	bl	8003460 <_svfprintf_r>
  va_end (ap);
  *f._p = '\0';	/* terminate the string */
 8003440:	e59d3008 	ldr	r3, [sp, #8]
 8003444:	e3a02000 	mov	r2, #0
 8003448:	e5c32000 	strb	r2, [r3]
  return (ret);
}
 800344c:	e28dd074 	add	sp, sp, #116	; 0x74
 8003450:	e8bd4070 	pop	{r4, r5, r6, lr}
 8003454:	e28dd00c 	add	sp, sp, #12
 8003458:	e12fff1e 	bx	lr
 800345c:	200000a0 	.word	0x200000a0

08003460 <_svfprintf_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 8003460:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	e24ddf43 	sub	sp, sp, #268	; 0x10c
 8003468:	e1a09001 	mov	r9, r1
 800346c:	e58d3030 	str	r3, [sp, #48]	; 0x30
 8003470:	e1a04002 	mov	r4, r2
 8003474:	e58d0038 	str	r0, [sp, #56]	; 0x38
	char *thousands_sep;
	size_t thsnd_len;
	const char *grouping;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 8003478:	eb000e43 	bl	8006d8c <_localeconv_r>
 800347c:	e5900000 	ldr	r0, [r0]
 8003480:	e58d0054 	str	r0, [sp, #84]	; 0x54
	size_t decp_len = strlen (decimal_point);
 8003484:	eb001494 	bl	80086dc <strlen>
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 8003488:	e1d930bc 	ldrh	r3, [r9, #12]
	size_t thsnd_len;
	const char *grouping;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
	size_t decp_len = strlen (decimal_point);
 800348c:	e58d0060 	str	r0, [sp, #96]	; 0x60
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 8003490:	e3a01000 	mov	r1, #0
 8003494:	e3a00000 	mov	r0, #0
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 8003498:	e3130080 	tst	r3, #128	; 0x80
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
	size_t decp_len = strlen (decimal_point);
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 800349c:	e58d0058 	str	r0, [sp, #88]	; 0x58
 80034a0:	e58d105c 	str	r1, [sp, #92]	; 0x5c
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 80034a4:	0a000002 	beq	80034b4 <_svfprintf_r+0x54>
 80034a8:	e5993010 	ldr	r3, [r9, #16]
 80034ac:	e3530000 	cmp	r3, #0
 80034b0:	0a00060b 	beq	8004ce4 <_svfprintf_r+0x1884>
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
	uio.uio_resid = 0;
 80034b4:	e3a0c000 	mov	ip, #0
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
 80034b8:	e28db0c8 	add	fp, sp, #200	; 0xc8
	uio.uio_resid = 0;
 80034bc:	e58dc09c 	str	ip, [sp, #156]	; 0x9c
	uio.uio_iovcnt = 0;
 80034c0:	e58dc098 	str	ip, [sp, #152]	; 0x98
	int expsize = 0;	/* character count for expstr */
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 80034c4:	e58dc040 	str	ip, [sp, #64]	; 0x40
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
 80034c8:	e58db094 	str	fp, [sp, #148]	; 0x94
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 80034cc:	e58d4020 	str	r4, [sp, #32]
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 80034d0:	e58dc068 	str	ip, [sp, #104]	; 0x68
	size_t decp_len = strlen (decimal_point);
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 80034d4:	e58dc064 	str	ip, [sp, #100]	; 0x64

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
	uio.uio_resid = 0;
	uio.uio_iovcnt = 0;
	ret = 0;
 80034d8:	e58dc028 	str	ip, [sp, #40]	; 0x28
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
 80034dc:	e58d901c 	str	r9, [sp, #28]
 80034e0:	e1a0a00b 	mov	sl, fp
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 80034e4:	e59dc020 	ldr	ip, [sp, #32]
 80034e8:	e5dc3000 	ldrb	r3, [ip]
 80034ec:	e3530025 	cmp	r3, #37	; 0x25
 80034f0:	13530000 	cmpne	r3, #0
 80034f4:	0a0000a6 	beq	8003794 <_svfprintf_r+0x334>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 80034f8:	e28c3001 	add	r3, ip, #1
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
 80034fc:	e1a06003 	mov	r6, r3
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 8003500:	e5d33000 	ldrb	r3, [r3]
 8003504:	e3530025 	cmp	r3, #37	; 0x25
 8003508:	13530000 	cmpne	r3, #0
 800350c:	e2863001 	add	r3, r6, #1
 8003510:	1afffff9 	bne	80034fc <_svfprintf_r+0x9c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 8003514:	e59dc020 	ldr	ip, [sp, #32]
 8003518:	e056700c 	subs	r7, r6, ip
 800351c:	0a00000d 	beq	8003558 <_svfprintf_r+0xf8>
			PRINT (cp, m);
 8003520:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8003524:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8003528:	e2844001 	add	r4, r4, #1
 800352c:	e3540007 	cmp	r4, #7
 8003530:	e0855007 	add	r5, r5, r7
 8003534:	e58ac000 	str	ip, [sl]
 8003538:	e58a7004 	str	r7, [sl, #4]
 800353c:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003540:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003544:	d28aa008 	addle	sl, sl, #8
 8003548:	ca000079 	bgt	8003734 <_svfprintf_r+0x2d4>
			ret += m;
 800354c:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8003550:	e08cc007 	add	ip, ip, r7
 8003554:	e58dc028 	str	ip, [sp, #40]	; 0x28
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 8003558:	e5d63000 	ldrb	r3, [r6]
 800355c:	e3530000 	cmp	r3, #0
 8003560:	0a00056a 	beq	8004b10 <_svfprintf_r+0x16b0>

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
 8003564:	e3a03000 	mov	r3, #0
#else
                if (*fmt == '\0')
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
 8003568:	e2866001 	add	r6, r6, #1

		flags = 0;
		dprec = 0;
		width = 0;
 800356c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
#else
                if (*fmt == '\0')
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
 8003570:	e58d6020 	str	r6, [sp, #32]

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
 8003574:	e5cd3073 	strb	r3, [sp, #115]	; 0x73
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
 8003578:	e58d3018 	str	r3, [sp, #24]
		dprec = 0;
		width = 0;
		prec = -1;
 800357c:	e3e04000 	mvn	r4, #0
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
				sign = ' ';
 8003580:	e3a01020 	mov	r1, #32
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
			goto rflag;
		case '+':
			sign = '+';
 8003584:	e3a0202b 	mov	r2, #43	; 0x2b
 8003588:	e1a00006 	mov	r0, r6
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 800358c:	e4d07001 	ldrb	r7, [r0], #1
reswitch:	switch (ch) {
 8003590:	e2473020 	sub	r3, r7, #32
 8003594:	e3530058 	cmp	r3, #88	; 0x58
 8003598:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 800359c:	ea0000eb 	b	8003950 <_svfprintf_r+0x4f0>
 80035a0:	0800398c 	.word	0x0800398c
 80035a4:	08003950 	.word	0x08003950
 80035a8:	08003950 	.word	0x08003950
 80035ac:	08003e84 	.word	0x08003e84
 80035b0:	08003950 	.word	0x08003950
 80035b4:	08003950 	.word	0x08003950
 80035b8:	08003950 	.word	0x08003950
 80035bc:	08003950 	.word	0x08003950
 80035c0:	08003950 	.word	0x08003950
 80035c4:	08003950 	.word	0x08003950
 80035c8:	08003e94 	.word	0x08003e94
 80035cc:	0800379c 	.word	0x0800379c
 80035d0:	08003950 	.word	0x08003950
 80035d4:	08003724 	.word	0x08003724
 80035d8:	0800399c 	.word	0x0800399c
 80035dc:	08003950 	.word	0x08003950
 80035e0:	080039e4 	.word	0x080039e4
 80035e4:	08003ad4 	.word	0x08003ad4
 80035e8:	08003ad4 	.word	0x08003ad4
 80035ec:	08003ad4 	.word	0x08003ad4
 80035f0:	08003ad4 	.word	0x08003ad4
 80035f4:	08003ad4 	.word	0x08003ad4
 80035f8:	08003ad4 	.word	0x08003ad4
 80035fc:	08003ad4 	.word	0x08003ad4
 8003600:	08003ad4 	.word	0x08003ad4
 8003604:	08003ad4 	.word	0x08003ad4
 8003608:	08003950 	.word	0x08003950
 800360c:	08003950 	.word	0x08003950
 8003610:	08003950 	.word	0x08003950
 8003614:	08003950 	.word	0x08003950
 8003618:	08003950 	.word	0x08003950
 800361c:	08003950 	.word	0x08003950
 8003620:	08003950 	.word	0x08003950
 8003624:	08003950 	.word	0x08003950
 8003628:	08003950 	.word	0x08003950
 800362c:	08003950 	.word	0x08003950
 8003630:	08003de0 	.word	0x08003de0
 8003634:	08003c80 	.word	0x08003c80
 8003638:	08003950 	.word	0x08003950
 800363c:	08003c80 	.word	0x08003c80
 8003640:	08003950 	.word	0x08003950
 8003644:	08003950 	.word	0x08003950
 8003648:	08003950 	.word	0x08003950
 800364c:	08003950 	.word	0x08003950
 8003650:	08003d2c 	.word	0x08003d2c
 8003654:	08003950 	.word	0x08003950
 8003658:	08003950 	.word	0x08003950
 800365c:	08003b04 	.word	0x08003b04
 8003660:	08003950 	.word	0x08003950
 8003664:	08003950 	.word	0x08003950
 8003668:	08003950 	.word	0x08003950
 800366c:	08003950 	.word	0x08003950
 8003670:	08003950 	.word	0x08003950
 8003674:	08003b40 	.word	0x08003b40
 8003678:	08003950 	.word	0x08003950
 800367c:	08003950 	.word	0x08003950
 8003680:	08003b74 	.word	0x08003b74
 8003684:	08003950 	.word	0x08003950
 8003688:	08003950 	.word	0x08003950
 800368c:	08003950 	.word	0x08003950
 8003690:	08003950 	.word	0x08003950
 8003694:	08003950 	.word	0x08003950
 8003698:	08003950 	.word	0x08003950
 800369c:	08003950 	.word	0x08003950
 80036a0:	08003950 	.word	0x08003950
 80036a4:	08003950 	.word	0x08003950
 80036a8:	08003950 	.word	0x08003950
 80036ac:	08003bb8 	.word	0x08003bb8
 80036b0:	08003e24 	.word	0x08003e24
 80036b4:	08003c80 	.word	0x08003c80
 80036b8:	08003c80 	.word	0x08003c80
 80036bc:	08003c80 	.word	0x08003c80
 80036c0:	08003e74 	.word	0x08003e74
 80036c4:	08003e24 	.word	0x08003e24
 80036c8:	08003950 	.word	0x08003950
 80036cc:	08003950 	.word	0x08003950
 80036d0:	08003704 	.word	0x08003704
 80036d4:	08003950 	.word	0x08003950
 80036d8:	08003da8 	.word	0x08003da8
 80036dc:	08003bf8 	.word	0x08003bf8
 80036e0:	08003c34 	.word	0x08003c34
 80036e4:	08003704 	.word	0x08003704
 80036e8:	08003950 	.word	0x08003950
 80036ec:	080037a4 	.word	0x080037a4
 80036f0:	08003950 	.word	0x08003950
 80036f4:	080039f4 	.word	0x080039f4
 80036f8:	08003950 	.word	0x08003950
 80036fc:	08003950 	.word	0x08003950
 8003700:	08003d3c 	.word	0x08003d3c
			} else
#endif
				flags |= LONGINT;
			goto rflag;
		case 'q': /* extension */
			flags |= QUADINT;
 8003704:	e59dc018 	ldr	ip, [sp, #24]
 8003708:	e38cc010 	orr	ip, ip, #16
 800370c:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 8003710:	eaffff9d 	b	800358c <_svfprintf_r+0x12c>
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
				goto rflag;
			width = -width;
 8003714:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
 8003718:	e26cc000 	rsb	ip, ip, #0
 800371c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8003720:	e58d3030 	str	r3, [sp, #48]	; 0x30
			if (width >= 0)
				goto rflag;
			width = -width;
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 8003724:	e59dc018 	ldr	ip, [sp, #24]
 8003728:	e38cc004 	orr	ip, ip, #4
 800372c:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 8003730:	eaffff95 	b	800358c <_svfprintf_r+0x12c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 8003734:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8003738:	e59d101c 	ldr	r1, [sp, #28]
 800373c:	e28d2094 	add	r2, sp, #148	; 0x94
 8003740:	eb0013fd 	bl	800873c <__ssprint_r>
 8003744:	e3500000 	cmp	r0, #0
 8003748:	1a000007 	bne	800376c <_svfprintf_r+0x30c>
 800374c:	e1a0a00b 	mov	sl, fp
 8003750:	eaffff7d 	b	800354c <_svfprintf_r+0xec>
			PAD (width - realsz, blanks);

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 8003754:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8003758:	e59d101c 	ldr	r1, [sp, #28]
 800375c:	e28d2094 	add	r2, sp, #148	; 0x94
 8003760:	eb0013f5 	bl	800873c <__ssprint_r>
 8003764:	e3500000 	cmp	r0, #0
 8003768:	0a000277 	beq	800414c <_svfprintf_r+0xcec>
 800376c:	e59d901c 	ldr	r9, [sp, #28]
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 8003770:	e1d930bc 	ldrh	r3, [r9, #12]
 8003774:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8003778:	e3130040 	tst	r3, #64	; 0x40
 800377c:	13e0c000 	mvnne	ip, #0
 8003780:	e58dc028 	str	ip, [sp, #40]	; 0x28
	/* NOTREACHED */
}
 8003784:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
 8003788:	e28ddf43 	add	sp, sp, #268	; 0x10c
 800378c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	e12fff1e 	bx	lr
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 8003794:	e59d6020 	ldr	r6, [sp, #32]
 8003798:	eaffff6e 	b	8003558 <_svfprintf_r+0xf8>
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
			goto rflag;
		case '+':
			sign = '+';
 800379c:	e5cd2073 	strb	r2, [sp, #115]	; 0x73
			goto rflag;
 80037a0:	eaffff79 	b	800358c <_svfprintf_r+0x12c>
			goto nosign;
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
 80037a4:	e3a06000 	mov	r6, #0
 80037a8:	e5cd6073 	strb	r6, [sp, #115]	; 0x73
			cp = GET_ARG (N, ap, char_ptr_t);
 80037ac:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 80037b0:	e59cc000 	ldr	ip, [ip]
 80037b4:	e58dc048 	str	ip, [sp, #72]	; 0x48
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 80037b8:	e15c0006 	cmp	ip, r6
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 80037bc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 80037c0:	e58d0020 	str	r0, [sp, #32]
 80037c4:	e28c5004 	add	r5, ip, #4
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 80037c8:	0a0005b7 	beq	8004eac <_svfprintf_r+0x1a4c>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 80037cc:	e3540000 	cmp	r4, #0
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 80037d0:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 80037d4:	ba000595 	blt	8004e30 <_svfprintf_r+0x19d0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 80037d8:	e1a01006 	mov	r1, r6
 80037dc:	e1a02004 	mov	r2, r4
 80037e0:	eb000f3d 	bl	80074dc <memchr>

				if (p != NULL) {
 80037e4:	e3500000 	cmp	r0, #0
 80037e8:	0a0005e5 	beq	8004f84 <_svfprintf_r+0x1b24>
					size = p - cp;
 80037ec:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 80037f0:	e06c0000 	rsb	r0, ip, r0
 80037f4:	e58d0034 	str	r0, [sp, #52]	; 0x34
					if (size > prec)
 80037f8:	e1500004 	cmp	r0, r4
 80037fc:	d59dc034 	ldrle	ip, [sp, #52]	; 0x34
 8003800:	c1c4cfc4 	bicgt	ip, r4, r4, asr #31
 8003804:	d1cccfcc 	bicle	ip, ip, ip, asr #31
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8003808:	e58d603c 	str	r6, [sp, #60]	; 0x3c
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 800380c:	e58d5030 	str	r5, [sp, #48]	; 0x30
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8003810:	e58d6050 	str	r6, [sp, #80]	; 0x50
 8003814:	c58dc024 	strgt	ip, [sp, #36]	; 0x24
				 */
				char *p = memchr (cp, 0, prec);

				if (p != NULL) {
					size = p - cp;
					if (size > prec)
 8003818:	c58d4034 	strgt	r4, [sp, #52]	; 0x34
 800381c:	d58dc024 	strle	ip, [sp, #36]	; 0x24
 8003820:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
 8003824:	e3530000 	cmp	r3, #0
 8003828:	0a000002 	beq	8003838 <_svfprintf_r+0x3d8>
			realsz++;
 800382c:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8003830:	e28cc001 	add	ip, ip, #1
 8003834:	e58dc024 	str	ip, [sp, #36]	; 0x24
		if (flags & HEXPREFIX)
 8003838:	e59d3018 	ldr	r3, [sp, #24]
 800383c:	e2133002 	ands	r3, r3, #2
			realsz+= 2;
 8003840:	159dc024 	ldrne	ip, [sp, #36]	; 0x24
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
 8003844:	e58d3044 	str	r3, [sp, #68]	; 0x44
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 8003848:	e59d3018 	ldr	r3, [sp, #24]
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
			realsz+= 2;
 800384c:	128cc002 	addne	ip, ip, #2
 8003850:	158dc024 	strne	ip, [sp, #36]	; 0x24

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 8003854:	e2133084 	ands	r3, r3, #132	; 0x84
 8003858:	e58d304c 	str	r3, [sp, #76]	; 0x4c
 800385c:	1a000195 	bne	8003eb8 <_svfprintf_r+0xa58>
			PAD (width - realsz, blanks);
 8003860:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
 8003864:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
 8003868:	e060600c 	rsb	r6, r0, ip
 800386c:	e3560000 	cmp	r6, #0
 8003870:	da000190 	ble	8003eb8 <_svfprintf_r+0xa58>
 8003874:	e28d4098 	add	r4, sp, #152	; 0x98
 8003878:	e3560010 	cmp	r6, #16
 800387c:	e8940030 	ldm	r4, {r4, r5}
 8003880:	e59f8fc0 	ldr	r8, [pc, #4032]	; 8004848 <_svfprintf_r+0x13e8>
 8003884:	da00001f 	ble	8003908 <_svfprintf_r+0x4a8>
 8003888:	e58d706c 	str	r7, [sp, #108]	; 0x6c
 800388c:	e3a09010 	mov	r9, #16
 8003890:	e1a07008 	mov	r7, r8
 8003894:	e1a08006 	mov	r8, r6
 8003898:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
 800389c:	ea000002 	b	80038ac <_svfprintf_r+0x44c>
 80038a0:	e2488010 	sub	r8, r8, #16
 80038a4:	e3580010 	cmp	r8, #16
 80038a8:	da000013 	ble	80038fc <_svfprintf_r+0x49c>
 80038ac:	e2844001 	add	r4, r4, #1
 80038b0:	e3540007 	cmp	r4, #7
 80038b4:	e2855010 	add	r5, r5, #16
 80038b8:	e88a0280 	stm	sl, {r7, r9}
 80038bc:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80038c0:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80038c4:	d28aa008 	addle	sl, sl, #8
 80038c8:	dafffff4 	ble	80038a0 <_svfprintf_r+0x440>
 80038cc:	e1a00006 	mov	r0, r6
 80038d0:	e59d101c 	ldr	r1, [sp, #28]
 80038d4:	e28d2094 	add	r2, sp, #148	; 0x94
 80038d8:	eb001397 	bl	800873c <__ssprint_r>
 80038dc:	e3500000 	cmp	r0, #0
 80038e0:	1affffa1 	bne	800376c <_svfprintf_r+0x30c>
 80038e4:	e2488010 	sub	r8, r8, #16
 80038e8:	e28d4098 	add	r4, sp, #152	; 0x98
 80038ec:	e3580010 	cmp	r8, #16
 80038f0:	e8940030 	ldm	r4, {r4, r5}
 80038f4:	e1a0a00b 	mov	sl, fp
 80038f8:	caffffeb 	bgt	80038ac <_svfprintf_r+0x44c>
 80038fc:	e1a06008 	mov	r6, r8
 8003900:	e1a08007 	mov	r8, r7
 8003904:	e59d706c 	ldr	r7, [sp, #108]	; 0x6c
 8003908:	e2844001 	add	r4, r4, #1
 800390c:	e3540007 	cmp	r4, #7
 8003910:	e0855006 	add	r5, r5, r6
 8003914:	e58a8000 	str	r8, [sl]
 8003918:	e58a6004 	str	r6, [sl, #4]
 800391c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003920:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003924:	d28aa008 	addle	sl, sl, #8
 8003928:	da000163 	ble	8003ebc <_svfprintf_r+0xa5c>
 800392c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8003930:	e59d101c 	ldr	r1, [sp, #28]
 8003934:	e28d2094 	add	r2, sp, #148	; 0x94
 8003938:	eb00137f 	bl	800873c <__ssprint_r>
 800393c:	e3500000 	cmp	r0, #0
 8003940:	1affff89 	bne	800376c <_svfprintf_r+0x30c>
 8003944:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8003948:	e1a0a00b 	mov	sl, fp
 800394c:	ea00015a 	b	8003ebc <_svfprintf_r+0xa5c>

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 8003950:	e3570000 	cmp	r7, #0
 8003954:	e58d0020 	str	r0, [sp, #32]
 8003958:	0a00046c 	beq	8004b10 <_svfprintf_r+0x16b0>
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
			sign = '\0';
			break;
 800395c:	e3a0c001 	mov	ip, #1
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
			sign = '\0';
 8003960:	e3a03000 	mov	r3, #0
			break;
 8003964:	e58dc024 	str	ip, [sp, #36]	; 0x24
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
 8003968:	e58dc034 	str	ip, [sp, #52]	; 0x34
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 800396c:	e28dc0a0 	add	ip, sp, #160	; 0xa0
			*cp = ch;
 8003970:	e5cd70a0 	strb	r7, [sp, #160]	; 0xa0
			size = 1;
			sign = '\0';
 8003974:	e5cd3073 	strb	r3, [sp, #115]	; 0x73
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 8003978:	e58dc048 	str	ip, [sp, #72]	; 0x48
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 800397c:	e3a03000 	mov	r3, #0
 8003980:	e58d303c 	str	r3, [sp, #60]	; 0x3c
 8003984:	e58d3050 	str	r3, [sp, #80]	; 0x50
 8003988:	eaffffaa 	b	8003838 <_svfprintf_r+0x3d8>
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 800398c:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8003990:	e3530000 	cmp	r3, #0
				sign = ' ';
 8003994:	05cd1073 	strbeq	r1, [sp, #115]	; 0x73
 8003998:	eafffefb 	b	800358c <_svfprintf_r+0x12c>
			goto rflag;
		case '+':
			sign = '+';
			goto rflag;
		case '.':
			if ((ch = *fmt++) == '*') {
 800399c:	e4d07001 	ldrb	r7, [r0], #1
 80039a0:	e357002a 	cmp	r7, #42	; 0x2a
 80039a4:	0a0005cd 	beq	80050e0 <_svfprintf_r+0x1c80>
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80039a8:	e2473030 	sub	r3, r7, #48	; 0x30
 80039ac:	e3530009 	cmp	r3, #9
 80039b0:	83a04000 	movhi	r4, #0
 80039b4:	8afffef5 	bhi	8003590 <_svfprintf_r+0x130>
 80039b8:	e1a0c000 	mov	ip, r0
 80039bc:	e3a04000 	mov	r4, #0
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
 80039c0:	e4dc7001 	ldrb	r7, [ip], #1
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
				n = 10 * n + to_digit (ch);
 80039c4:	e0844104 	add	r4, r4, r4, lsl #2
 80039c8:	e0834084 	add	r4, r3, r4, lsl #1
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80039cc:	e2473030 	sub	r3, r7, #48	; 0x30
 80039d0:	e3530009 	cmp	r3, #9
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
 80039d4:	e1a0000c 	mov	r0, ip
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80039d8:	9afffff8 	bls	80039c0 <_svfprintf_r+0x560>
 80039dc:	e1844fc4 	orr	r4, r4, r4, asr #31
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
			goto reswitch;
 80039e0:	eafffeea 	b	8003590 <_svfprintf_r+0x130>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 80039e4:	e59dc018 	ldr	ip, [sp, #24]
 80039e8:	e38cc080 	orr	ip, ip, #128	; 0x80
 80039ec:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 80039f0:	eafffee5 	b	800358c <_svfprintf_r+0x12c>
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 80039f4:	e59dc018 	ldr	ip, [sp, #24]
 80039f8:	e31c0010 	tst	ip, #16
 80039fc:	e58d0020 	str	r0, [sp, #32]
 8003a00:	0a000055 	beq	8003b5c <_svfprintf_r+0x6fc>
 8003a04:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003a08:	e59c3000 	ldr	r3, [ip]
 8003a0c:	e28cc004 	add	ip, ip, #4
 8003a10:	e2932000 	adds	r2, r3, #0
 8003a14:	e58dc030 	str	ip, [sp, #48]	; 0x30
			base = DEC;
 8003a18:	e3a01001 	mov	r1, #1
 8003a1c:	13a02001 	movne	r2, #1

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 8003a20:	e3a00000 	mov	r0, #0
 8003a24:	e5cd0073 	strb	r0, [sp, #115]	; 0x73
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 8003a28:	e3540000 	cmp	r4, #0
				flags &= ~ZEROPAD;
 8003a2c:	a59dc018 	ldrge	ip, [sp, #24]
 8003a30:	a3ccc080 	bicge	ip, ip, #128	; 0x80
 8003a34:	a58dc018 	strge	ip, [sp, #24]
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
			if (_uquad != 0 || prec != 0) {
 8003a38:	e3540000 	cmp	r4, #0
 8003a3c:	13822001 	orrne	r2, r2, #1
 8003a40:	e21220ff 	ands	r2, r2, #255	; 0xff
 8003a44:	0a00020c 	beq	800427c <_svfprintf_r+0xe1c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 8003a48:	e3510001 	cmp	r1, #1
 8003a4c:	0a0002f9 	beq	8004638 <_svfprintf_r+0x11d8>
 8003a50:	e3510002 	cmp	r1, #2
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8003a54:	e28d20c7 	add	r2, sp, #199	; 0xc7
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 8003a58:	0a0002ea 	beq	8004608 <_svfprintf_r+0x11a8>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 8003a5c:	e2031007 	and	r1, r3, #7
 8003a60:	e2811030 	add	r1, r1, #48	; 0x30
						_uquad >>= 3;
					} while (_uquad);
 8003a64:	e1b031a3 	lsrs	r3, r3, #3
				 * a variable; hence this switch.
				 */
				switch (base) {
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 8003a68:	e1a00002 	mov	r0, r2
 8003a6c:	e5c21000 	strb	r1, [r2]
 8003a70:	e2422001 	sub	r2, r2, #1
						_uquad >>= 3;
					} while (_uquad);
 8003a74:	1afffff8 	bne	8003a5c <_svfprintf_r+0x5fc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 8003a78:	e59dc018 	ldr	ip, [sp, #24]
 8003a7c:	e31c0001 	tst	ip, #1
 8003a80:	e58d0048 	str	r0, [sp, #72]	; 0x48
 8003a84:	0a0002dc 	beq	80045fc <_svfprintf_r+0x119c>
 8003a88:	e3510030 	cmp	r1, #48	; 0x30
						*--cp = '0';
 8003a8c:	158d2048 	strne	r2, [sp, #72]	; 0x48
 8003a90:	059dc048 	ldreq	ip, [sp, #72]	; 0x48
 8003a94:	159dc048 	ldrne	ip, [sp, #72]	; 0x48
 8003a98:	006cc00b 	rsbeq	ip, ip, fp
 8003a9c:	13a02030 	movne	r2, #48	; 0x30
 8003aa0:	106cc00b 	rsbne	ip, ip, fp
 8003aa4:	058dc034 	streq	ip, [sp, #52]	; 0x34
 8003aa8:	158dc034 	strne	ip, [sp, #52]	; 0x34
 8003aac:	15402001 	strbne	r2, [r0, #-1]
 8003ab0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
 8003ab4:	e15c0004 	cmp	ip, r4
 8003ab8:	b1a0c004 	movlt	ip, r4
 8003abc:	e58dc024 	str	ip, [sp, #36]	; 0x24
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8003ac0:	e3a0c000 	mov	ip, #0
 8003ac4:	e58d403c 	str	r4, [sp, #60]	; 0x3c
 8003ac8:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8003acc:	e58dc050 	str	ip, [sp, #80]	; 0x50
 8003ad0:	eaffff53 	b	8003824 <_svfprintf_r+0x3c4>
 8003ad4:	e1a0c000 	mov	ip, r0
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8003ad8:	e3a03000 	mov	r3, #0
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8003adc:	e2470030 	sub	r0, r7, #48	; 0x30
				ch = *fmt++;
 8003ae0:	e4dc7001 	ldrb	r7, [ip], #1
			} while (is_digit (ch));
 8003ae4:	e2475030 	sub	r5, r7, #48	; 0x30
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8003ae8:	e0833103 	add	r3, r3, r3, lsl #2
				ch = *fmt++;
			} while (is_digit (ch));
 8003aec:	e3550009 	cmp	r5, #9
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8003af0:	e0803083 	add	r3, r0, r3, lsl #1
				ch = *fmt++;
 8003af4:	e1a0000c 	mov	r0, ip
			} while (is_digit (ch));
 8003af8:	9afffff7 	bls	8003adc <_svfprintf_r+0x67c>
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8003afc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
 8003b00:	eafffea2 	b	8003590 <_svfprintf_r+0x130>
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
 8003b04:	e59dc018 	ldr	ip, [sp, #24]
 8003b08:	e38cc010 	orr	ip, ip, #16
 8003b0c:	e58dc018 	str	ip, [sp, #24]
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8003b10:	e59dc018 	ldr	ip, [sp, #24]
 8003b14:	e21c2010 	ands	r2, ip, #16
 8003b18:	e58d0020 	str	r0, [sp, #32]
 8003b1c:	0a000039 	beq	8003c08 <_svfprintf_r+0x7a8>
 8003b20:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003b24:	e59c3000 	ldr	r3, [ip]
			base = OCT;
 8003b28:	e3a01000 	mov	r1, #0
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8003b2c:	e28cc004 	add	ip, ip, #4
 8003b30:	e0532001 	subs	r2, r3, r1
 8003b34:	e58dc030 	str	ip, [sp, #48]	; 0x30
 8003b38:	13a02001 	movne	r2, #1
 8003b3c:	eaffffb7 	b	8003a20 <_svfprintf_r+0x5c0>
			} else
				size = strlen (cp);

			break;
		case 'U': /* extension */
			flags |= LONGINT;
 8003b40:	e59dc018 	ldr	ip, [sp, #24]
 8003b44:	e38cc010 	orr	ip, ip, #16
 8003b48:	e58dc018 	str	ip, [sp, #24]
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 8003b4c:	e59dc018 	ldr	ip, [sp, #24]
 8003b50:	e31c0010 	tst	ip, #16
 8003b54:	e58d0020 	str	r0, [sp, #32]
 8003b58:	1affffa9 	bne	8003a04 <_svfprintf_r+0x5a4>
 8003b5c:	e59dc018 	ldr	ip, [sp, #24]
 8003b60:	e31c0040 	tst	ip, #64	; 0x40
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
}
 8003b64:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 8003b68:	0affffa6 	beq	8003a08 <_svfprintf_r+0x5a8>
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
}
 8003b6c:	e1dc30b0 	ldrh	r3, [ip]
 8003b70:	eaffffa5 	b	8003a0c <_svfprintf_r+0x5ac>
		case 'u':
			_uquad = UARG ();
			base = DEC;
			goto nosign;
		case 'X':
			xdigs = "0123456789ABCDEF";
 8003b74:	e59fccd0 	ldr	ip, [pc, #3280]	; 800484c <_svfprintf_r+0x13ec>
 8003b78:	e58dc068 	str	ip, [sp, #104]	; 0x68
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8003b7c:	e59dc018 	ldr	ip, [sp, #24]
 8003b80:	e31c0010 	tst	ip, #16
 8003b84:	e58d0020 	str	r0, [sp, #32]
 8003b88:	0a000071 	beq	8003d54 <_svfprintf_r+0x8f4>
 8003b8c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003b90:	e59c3000 	ldr	r3, [ip]
 8003b94:	e28cc004 	add	ip, ip, #4
 8003b98:	e58dc030 	str	ip, [sp, #48]	; 0x30
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8003b9c:	e59dc018 	ldr	ip, [sp, #24]
 8003ba0:	e31c0001 	tst	ip, #1
 8003ba4:	1a000074 	bne	8003d7c <_svfprintf_r+0x91c>
 8003ba8:	e2932000 	adds	r2, r3, #0
 8003bac:	13a02001 	movne	r2, #1
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
 8003bb0:	e3a01002 	mov	r1, #2
 8003bb4:	eaffff99 	b	8003a20 <_svfprintf_r+0x5c0>
			{
				*cp = GET_ARG (N, ap, int);
				size = 1;
			}
			sign = '\0';
			break;
 8003bb8:	e3a0c001 	mov	ip, #1
 8003bbc:	e58dc024 	str	ip, [sp, #36]	; 0x24
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 8003bc0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8003bc4:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 8003bc8:	e28cc004 	add	ip, ip, #4
 8003bcc:	e5932000 	ldr	r2, [r3]
 8003bd0:	e58dc030 	str	ip, [sp, #48]	; 0x30
				size = 1;
 8003bd4:	e3a0c001 	mov	ip, #1
			}
			sign = '\0';
 8003bd8:	e3a03000 	mov	r3, #0
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
				size = 1;
 8003bdc:	e58dc034 	str	ip, [sp, #52]	; 0x34
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 8003be0:	e28dc0a0 	add	ip, sp, #160	; 0xa0
 8003be4:	e58d0020 	str	r0, [sp, #32]
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 8003be8:	e5cd20a0 	strb	r2, [sp, #160]	; 0xa0
				size = 1;
			}
			sign = '\0';
 8003bec:	e5cd3073 	strb	r3, [sp, #115]	; 0x73
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 8003bf0:	e58dc048 	str	ip, [sp, #72]	; 0x48
			{
				*cp = GET_ARG (N, ap, int);
				size = 1;
			}
			sign = '\0';
			break;
 8003bf4:	eaffff60 	b	800397c <_svfprintf_r+0x51c>
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8003bf8:	e59dc018 	ldr	ip, [sp, #24]
 8003bfc:	e21c2010 	ands	r2, ip, #16
 8003c00:	e58d0020 	str	r0, [sp, #32]
 8003c04:	1affffc5 	bne	8003b20 <_svfprintf_r+0x6c0>
 8003c08:	e59dc018 	ldr	ip, [sp, #24]
 8003c0c:	e21c1040 	ands	r1, ip, #64	; 0x40
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
}
 8003c10:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003c14:	11dc30b0 	ldrhne	r3, [ip]
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8003c18:	059c3000 	ldreq	r3, [ip]
			base = OCT;
 8003c1c:	11a01002 	movne	r1, r2
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8003c20:	e28cc004 	add	ip, ip, #4
 8003c24:	e2932000 	adds	r2, r3, #0
 8003c28:	e58dc030 	str	ip, [sp, #48]	; 0x30
 8003c2c:	13a02001 	movne	r2, #1
 8003c30:	eaffff7a 	b	8003a20 <_svfprintf_r+0x5c0>
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
 8003c34:	e59dc018 	ldr	ip, [sp, #24]
 8003c38:	e38cc002 	orr	ip, ip, #2
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8003c3c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
 8003c40:	e58dc018 	str	ip, [sp, #24]
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 8003c44:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003c48:	e5933000 	ldr	r3, [r3]
 8003c4c:	e28cc004 	add	ip, ip, #4
 8003c50:	e58dc030 	str	ip, [sp, #48]	; 0x30
			base = HEX;
			xdigs = "0123456789abcdef";
 8003c54:	e59fcbf4 	ldr	ip, [pc, #3060]	; 8004850 <_svfprintf_r+0x13f0>
			flags |= HEXPREFIX;
			ox[0] = '0';
 8003c58:	e3a01030 	mov	r1, #48	; 0x30
			ox[1] = ch = 'x';
 8003c5c:	e3a07078 	mov	r7, #120	; 0x78
 8003c60:	e2932000 	adds	r2, r3, #0
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
			ox[0] = '0';
 8003c64:	e5cd1074 	strb	r1, [sp, #116]	; 0x74
 8003c68:	e58d0020 	str	r0, [sp, #32]
 8003c6c:	13a02001 	movne	r2, #1
			ox[1] = ch = 'x';
 8003c70:	e5cd7075 	strb	r7, [sp, #117]	; 0x75
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
 8003c74:	e58dc068 	str	ip, [sp, #104]	; 0x68
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
 8003c78:	e3a01002 	mov	r1, #2
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
			ox[0] = '0';
			ox[1] = ch = 'x';
			goto nosign;
 8003c7c:	eaffff67 	b	8003a20 <_svfprintf_r+0x5c0>
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 8003c80:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003c84:	e58d0020 	str	r0, [sp, #32]
 8003c88:	e28c1007 	add	r1, ip, #7
 8003c8c:	e3c11007 	bic	r1, r1, #7
 8003c90:	e5916004 	ldr	r6, [r1, #4]
 8003c94:	e5918000 	ldr	r8, [r1]
 8003c98:	e2811008 	add	r1, r1, #8
 8003c9c:	e1a02008 	mov	r2, r8
 8003ca0:	e1a03006 	mov	r3, r6
 8003ca4:	e58d1030 	str	r1, [sp, #48]	; 0x30

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 8003ca8:	e1a00008 	mov	r0, r8
 8003cac:	e1a01006 	mov	r1, r6
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 8003cb0:	e58d2058 	str	r2, [sp, #88]	; 0x58
 8003cb4:	e58d305c 	str	r3, [sp, #92]	; 0x5c

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 8003cb8:	eb0011d0 	bl	8008400 <__fpclassifyd>
 8003cbc:	e3500001 	cmp	r0, #1
				if (_fpvalue < 0)
 8003cc0:	e1a01006 	mov	r1, r6
 8003cc4:	e1a00008 	mov	r0, r8

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 8003cc8:	1a000336 	bne	80049a8 <_svfprintf_r+0x1548>
				if (_fpvalue < 0)
 8003ccc:	e3a03000 	mov	r3, #0
 8003cd0:	e3a02000 	mov	r2, #0
 8003cd4:	eb001b5c 	bl	800aa4c <__aeabi_dcmplt>
					cp = "INF";
				else
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
				break;
 8003cd8:	e3a0c003 	mov	ip, #3
 8003cdc:	e58dc024 	str	ip, [sp, #36]	; 0x24
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8003ce0:	e3a0c000 	mov	ip, #0
 8003ce4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "INF";
				else
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
 8003ce8:	e59dc018 	ldr	ip, [sp, #24]
			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
				if (_fpvalue < 0)
 8003cec:	e3500000 	cmp	r0, #0
					sign = '-';
 8003cf0:	13a0302d 	movne	r3, #45	; 0x2d
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "INF";
				else
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
 8003cf4:	e3ccc080 	bic	ip, ip, #128	; 0x80
			 */
			if (isinf (_fpvalue)) {
				if (_fpvalue < 0)
					sign = '-';
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "INF";
 8003cf8:	e59f2b54 	ldr	r2, [pc, #2900]	; 8004854 <_svfprintf_r+0x13f4>
 8003cfc:	05dd3073 	ldrbeq	r3, [sp, #115]	; 0x73
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
				if (_fpvalue < 0)
					sign = '-';
 8003d00:	15cd3073 	strbne	r3, [sp, #115]	; 0x73
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "INF";
				else
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
 8003d04:	e58dc018 	str	ip, [sp, #24]
			 */
			if (isinf (_fpvalue)) {
				if (_fpvalue < 0)
					sign = '-';
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "INF";
 8003d08:	e3570047 	cmp	r7, #71	; 0x47
 8003d0c:	e59fcb44 	ldr	ip, [pc, #2884]	; 8004858 <_svfprintf_r+0x13f8>
 8003d10:	d1a0c002 	movle	ip, r2
 8003d14:	e58dc048 	str	ip, [sp, #72]	; 0x48
				else
					cp = "inf";
				size = 3;
 8003d18:	e3a0c003 	mov	ip, #3
 8003d1c:	e58dc034 	str	ip, [sp, #52]	; 0x34
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8003d20:	e3a0c000 	mov	ip, #0
 8003d24:	e58dc050 	str	ip, [sp, #80]	; 0x50
					cp = "INF";
				else
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
				break;
 8003d28:	eafffebd 	b	8003824 <_svfprintf_r+0x3c4>
#endif /* !_NO_POS_ARGS */
			width = n;
			goto reswitch;
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 8003d2c:	e59dc018 	ldr	ip, [sp, #24]
 8003d30:	e38cc008 	orr	ip, ip, #8
 8003d34:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 8003d38:	eafffe13 	b	800358c <_svfprintf_r+0x12c>
			goto nosign;
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
 8003d3c:	e59fcb0c 	ldr	ip, [pc, #2828]	; 8004850 <_svfprintf_r+0x13f0>
 8003d40:	e58dc068 	str	ip, [sp, #104]	; 0x68
hex:			_uquad = UARG ();
 8003d44:	e59dc018 	ldr	ip, [sp, #24]
 8003d48:	e31c0010 	tst	ip, #16
 8003d4c:	e58d0020 	str	r0, [sp, #32]
 8003d50:	1affff8d 	bne	8003b8c <_svfprintf_r+0x72c>
 8003d54:	e59dc018 	ldr	ip, [sp, #24]
 8003d58:	e31c0040 	tst	ip, #64	; 0x40
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
}
 8003d5c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8003d60:	059c3000 	ldreq	r3, [ip]
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
}
 8003d64:	11dc30b0 	ldrhne	r3, [ip]
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8003d68:	e28cc004 	add	ip, ip, #4
 8003d6c:	e58dc030 	str	ip, [sp, #48]	; 0x30
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8003d70:	e59dc018 	ldr	ip, [sp, #24]
 8003d74:	e31c0001 	tst	ip, #1
 8003d78:	0affff8a 	beq	8003ba8 <_svfprintf_r+0x748>
 8003d7c:	e3530000 	cmp	r3, #0
				ox[0] = '0';
				ox[1] = ch;
				flags |= HEXPREFIX;
 8003d80:	159dc018 	ldrne	ip, [sp, #24]
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
				ox[0] = '0';
 8003d84:	13a02030 	movne	r2, #48	; 0x30
				ox[1] = ch;
				flags |= HEXPREFIX;
 8003d88:	138cc002 	orrne	ip, ip, #2
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
				ox[0] = '0';
 8003d8c:	15cd2074 	strbne	r2, [sp, #116]	; 0x74
				ox[1] = ch;
 8003d90:	15cd7075 	strbne	r7, [sp, #117]	; 0x75
				flags |= HEXPREFIX;
 8003d94:	158dc018 	strne	ip, [sp, #24]
 8003d98:	13a02001 	movne	r2, #1
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8003d9c:	01a02003 	moveq	r2, r3
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
 8003da0:	e3a01002 	mov	r1, #2
 8003da4:	eaffff1d 	b	8003a20 <_svfprintf_r+0x5c0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 8003da8:	e59dc018 	ldr	ip, [sp, #24]
 8003dac:	e31c0010 	tst	ip, #16
 8003db0:	e58d0020 	str	r0, [sp, #32]
 8003db4:	1a000262 	bne	8004744 <_svfprintf_r+0x12e4>
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 8003db8:	e59dc018 	ldr	ip, [sp, #24]
 8003dbc:	e31c0040 	tst	ip, #64	; 0x40
 8003dc0:	0a00025f 	beq	8004744 <_svfprintf_r+0x12e4>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 8003dc4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003dc8:	e59c3000 	ldr	r3, [ip]
 8003dcc:	e28cc004 	add	ip, ip, #4
 8003dd0:	e58dc030 	str	ip, [sp, #48]	; 0x30
 8003dd4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8003dd8:	e1c3c0b0 	strh	ip, [r3]
 8003ddc:	eafffdc0 	b	80034e4 <_svfprintf_r+0x84>
				size = 1;
			}
			sign = '\0';
			break;
		case 'D':  /* extension */
			flags |= LONGINT;
 8003de0:	e59dc018 	ldr	ip, [sp, #24]
 8003de4:	e38cc010 	orr	ip, ip, #16
 8003de8:	e58dc018 	str	ip, [sp, #24]
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8003dec:	e59dc018 	ldr	ip, [sp, #24]
 8003df0:	e31c0010 	tst	ip, #16
 8003df4:	e58d0020 	str	r0, [sp, #32]
 8003df8:	0a00000d 	beq	8003e34 <_svfprintf_r+0x9d4>
 8003dfc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003e00:	e59c3000 	ldr	r3, [ip]
 8003e04:	e28cc004 	add	ip, ip, #4
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8003e08:	e3530000 	cmp	r3, #0
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8003e0c:	e58dc030 	str	ip, [sp, #48]	; 0x30
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8003e10:	ba000010 	blt	8003e58 <_svfprintf_r+0x9f8>
 8003e14:	03a02000 	moveq	r2, #0
 8003e18:	13a02001 	movne	r2, #1
			{

				_uquad = -_uquad;
				sign = '-';
			}
			base = DEC;
 8003e1c:	e3a01001 	mov	r1, #1
 8003e20:	eaffff00 	b	8003a28 <_svfprintf_r+0x5c8>
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8003e24:	e59dc018 	ldr	ip, [sp, #24]
 8003e28:	e31c0010 	tst	ip, #16
 8003e2c:	e58d0020 	str	r0, [sp, #32]
 8003e30:	1afffff1 	bne	8003dfc <_svfprintf_r+0x99c>
 8003e34:	e59dc018 	ldr	ip, [sp, #24]
 8003e38:	e31c0040 	tst	ip, #64	; 0x40
 8003e3c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003e40:	059c3000 	ldreq	r3, [ip]
 8003e44:	11dc30f0 	ldrshne	r3, [ip]
 8003e48:	e28cc004 	add	ip, ip, #4
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8003e4c:	e3530000 	cmp	r3, #0
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8003e50:	e58dc030 	str	ip, [sp, #48]	; 0x30
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8003e54:	aaffffee 	bge	8003e14 <_svfprintf_r+0x9b4>
#endif
			{

				_uquad = -_uquad;
 8003e58:	e2633000 	rsb	r3, r3, #0
				sign = '-';
 8003e5c:	e3a0102d 	mov	r1, #45	; 0x2d
 8003e60:	e2932000 	adds	r2, r3, #0
 8003e64:	e5cd1073 	strb	r1, [sp, #115]	; 0x73
 8003e68:	13a02001 	movne	r2, #1
			}
			base = DEC;
 8003e6c:	e3a01001 	mov	r1, #1
 8003e70:	eafffeec 	b	8003a28 <_svfprintf_r+0x5c8>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 8003e74:	e59dc018 	ldr	ip, [sp, #24]
 8003e78:	e38cc040 	orr	ip, ip, #64	; 0x40
 8003e7c:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 8003e80:	eafffdc1 	b	800358c <_svfprintf_r+0x12c>
			 */
			if (!sign)
				sign = ' ';
			goto rflag;
		case '#':
			flags |= ALT;
 8003e84:	e59dc018 	ldr	ip, [sp, #24]
 8003e88:	e38cc001 	orr	ip, ip, #1
 8003e8c:	e58dc018 	str	ip, [sp, #24]
			goto rflag;
 8003e90:	eafffdbd 	b	800358c <_svfprintf_r+0x12c>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8003e94:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003e98:	e59cc000 	ldr	ip, [ip]
 8003e9c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 8003ea0:	e35c0000 	cmp	ip, #0
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8003ea4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8003ea8:	e28c3004 	add	r3, ip, #4
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 8003eac:	bafffe18 	blt	8003714 <_svfprintf_r+0x2b4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 8003eb0:	e58d3030 	str	r3, [sp, #48]	; 0x30
 8003eb4:	eafffdb4 	b	800358c <_svfprintf_r+0x12c>
 8003eb8:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
 8003ebc:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8003ec0:	e3530000 	cmp	r3, #0
 8003ec4:	0a00000a 	beq	8003ef4 <_svfprintf_r+0xa94>
			PRINT (&sign, 1);
 8003ec8:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8003ecc:	e2844001 	add	r4, r4, #1
 8003ed0:	e2855001 	add	r5, r5, #1
 8003ed4:	e3540007 	cmp	r4, #7
 8003ed8:	e28d2073 	add	r2, sp, #115	; 0x73
 8003edc:	e3a03001 	mov	r3, #1
 8003ee0:	e88a000c 	stm	sl, {r2, r3}
 8003ee4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003ee8:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003eec:	d28aa008 	addle	sl, sl, #8
 8003ef0:	ca000168 	bgt	8004498 <_svfprintf_r+0x1038>
		if (flags & HEXPREFIX)
 8003ef4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
 8003ef8:	e3530000 	cmp	r3, #0
 8003efc:	0a00000a 	beq	8003f2c <_svfprintf_r+0xacc>
			PRINT (ox, 2);
 8003f00:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8003f04:	e2844001 	add	r4, r4, #1
 8003f08:	e2855002 	add	r5, r5, #2
 8003f0c:	e3540007 	cmp	r4, #7
 8003f10:	e28d2074 	add	r2, sp, #116	; 0x74
 8003f14:	e3a03002 	mov	r3, #2
 8003f18:	e88a000c 	stm	sl, {r2, r3}
 8003f1c:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003f20:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003f24:	d28aa008 	addle	sl, sl, #8
 8003f28:	ca000163 	bgt	80044bc <_svfprintf_r+0x105c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 8003f2c:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
 8003f30:	e35c0080 	cmp	ip, #128	; 0x80
 8003f34:	0a0000df 	beq	80042b8 <_svfprintf_r+0xe58>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 8003f38:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
 8003f3c:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
 8003f40:	e06c8003 	rsb	r8, ip, r3
 8003f44:	e3580000 	cmp	r8, #0
 8003f48:	da000031 	ble	8004014 <_svfprintf_r+0xbb4>
 8003f4c:	e3580010 	cmp	r8, #16
 8003f50:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8003f54:	e59f6910 	ldr	r6, [pc, #2320]	; 800486c <_svfprintf_r+0x140c>
 8003f58:	da00001d 	ble	8003fd4 <_svfprintf_r+0xb74>
 8003f5c:	e58d703c 	str	r7, [sp, #60]	; 0x3c
 8003f60:	e3a09010 	mov	r9, #16
 8003f64:	e1a07006 	mov	r7, r6
 8003f68:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
 8003f6c:	ea000002 	b	8003f7c <_svfprintf_r+0xb1c>
 8003f70:	e2488010 	sub	r8, r8, #16
 8003f74:	e3580010 	cmp	r8, #16
 8003f78:	da000013 	ble	8003fcc <_svfprintf_r+0xb6c>
 8003f7c:	e2844001 	add	r4, r4, #1
 8003f80:	e3540007 	cmp	r4, #7
 8003f84:	e2855010 	add	r5, r5, #16
 8003f88:	e88a0280 	stm	sl, {r7, r9}
 8003f8c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003f90:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003f94:	d28aa008 	addle	sl, sl, #8
 8003f98:	dafffff4 	ble	8003f70 <_svfprintf_r+0xb10>
 8003f9c:	e1a00006 	mov	r0, r6
 8003fa0:	e59d101c 	ldr	r1, [sp, #28]
 8003fa4:	e28d2094 	add	r2, sp, #148	; 0x94
 8003fa8:	eb0011e3 	bl	800873c <__ssprint_r>
 8003fac:	e3500000 	cmp	r0, #0
 8003fb0:	1afffded 	bne	800376c <_svfprintf_r+0x30c>
 8003fb4:	e2488010 	sub	r8, r8, #16
 8003fb8:	e28d4098 	add	r4, sp, #152	; 0x98
 8003fbc:	e3580010 	cmp	r8, #16
 8003fc0:	e8940030 	ldm	r4, {r4, r5}
 8003fc4:	e1a0a00b 	mov	sl, fp
 8003fc8:	caffffeb 	bgt	8003f7c <_svfprintf_r+0xb1c>
 8003fcc:	e1a06007 	mov	r6, r7
 8003fd0:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
 8003fd4:	e2844001 	add	r4, r4, #1
 8003fd8:	e3540007 	cmp	r4, #7
 8003fdc:	e0855008 	add	r5, r5, r8
 8003fe0:	e88a0140 	stm	sl, {r6, r8}
 8003fe4:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8003fe8:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8003fec:	d28aa008 	addle	sl, sl, #8
 8003ff0:	da000007 	ble	8004014 <_svfprintf_r+0xbb4>
 8003ff4:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8003ff8:	e59d101c 	ldr	r1, [sp, #28]
 8003ffc:	e28d2094 	add	r2, sp, #148	; 0x94
 8004000:	eb0011cd 	bl	800873c <__ssprint_r>
 8004004:	e3500000 	cmp	r0, #0
 8004008:	1afffdd7 	bne	800376c <_svfprintf_r+0x30c>
 800400c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004010:	e1a0a00b 	mov	sl, fp

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 8004014:	e59dc018 	ldr	ip, [sp, #24]
 8004018:	e31c0c01 	tst	ip, #256	; 0x100
 800401c:	1a00004e 	bne	800415c <_svfprintf_r+0xcfc>
			PRINT (cp, size);
 8004020:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004024:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 8004028:	e2844001 	add	r4, r4, #1
 800402c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 8004030:	e0855003 	add	r5, r5, r3
 8004034:	e3540007 	cmp	r4, #7
 8004038:	e58ac000 	str	ip, [sl]
 800403c:	e58a3004 	str	r3, [sl, #4]
 8004040:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004044:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004048:	ca000109 	bgt	8004474 <_svfprintf_r+0x1014>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 800404c:	e28aa008 	add	sl, sl, #8
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 8004050:	e59dc018 	ldr	ip, [sp, #24]
 8004054:	e31c0004 	tst	ip, #4
 8004058:	0a000032 	beq	8004128 <_svfprintf_r+0xcc8>
			PAD (width - realsz, blanks);
 800405c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
 8004060:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
 8004064:	e060600c 	rsb	r6, r0, ip
 8004068:	e3560000 	cmp	r6, #0
 800406c:	da00002d 	ble	8004128 <_svfprintf_r+0xcc8>
 8004070:	e3560010 	cmp	r6, #16
 8004074:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004078:	e59f87c8 	ldr	r8, [pc, #1992]	; 8004848 <_svfprintf_r+0x13e8>
 800407c:	c3a07010 	movgt	r7, #16
 8004080:	c59d9038 	ldrgt	r9, [sp, #56]	; 0x38
 8004084:	ca000003 	bgt	8004098 <_svfprintf_r+0xc38>
 8004088:	ea000017 	b	80040ec <_svfprintf_r+0xc8c>
 800408c:	e2466010 	sub	r6, r6, #16
 8004090:	e3560010 	cmp	r6, #16
 8004094:	da000014 	ble	80040ec <_svfprintf_r+0xc8c>
 8004098:	e2844001 	add	r4, r4, #1
 800409c:	e3540007 	cmp	r4, #7
 80040a0:	e2855010 	add	r5, r5, #16
 80040a4:	e58a8000 	str	r8, [sl]
 80040a8:	e58a7004 	str	r7, [sl, #4]
 80040ac:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80040b0:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80040b4:	d28aa008 	addle	sl, sl, #8
 80040b8:	dafffff3 	ble	800408c <_svfprintf_r+0xc2c>
 80040bc:	e1a00009 	mov	r0, r9
 80040c0:	e59d101c 	ldr	r1, [sp, #28]
 80040c4:	e28d2094 	add	r2, sp, #148	; 0x94
 80040c8:	eb00119b 	bl	800873c <__ssprint_r>
 80040cc:	e3500000 	cmp	r0, #0
 80040d0:	1afffda5 	bne	800376c <_svfprintf_r+0x30c>
 80040d4:	e2466010 	sub	r6, r6, #16
 80040d8:	e28d4098 	add	r4, sp, #152	; 0x98
 80040dc:	e3560010 	cmp	r6, #16
 80040e0:	e8940030 	ldm	r4, {r4, r5}
 80040e4:	e1a0a00b 	mov	sl, fp
 80040e8:	caffffea 	bgt	8004098 <_svfprintf_r+0xc38>
 80040ec:	e2844001 	add	r4, r4, #1
 80040f0:	e0865005 	add	r5, r6, r5
 80040f4:	e3540007 	cmp	r4, #7
 80040f8:	e58a8000 	str	r8, [sl]
 80040fc:	e58a6004 	str	r6, [sl, #4]
 8004100:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004104:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004108:	da000006 	ble	8004128 <_svfprintf_r+0xcc8>
 800410c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004110:	e59d101c 	ldr	r1, [sp, #28]
 8004114:	e28d2094 	add	r2, sp, #148	; 0x94
 8004118:	eb001187 	bl	800873c <__ssprint_r>
 800411c:	e3500000 	cmp	r0, #0
 8004120:	1afffd91 	bne	800376c <_svfprintf_r+0x30c>
 8004124:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 8004128:	e28d0024 	add	r0, sp, #36	; 0x24
 800412c:	e8901001 	ldm	r0, {r0, ip}
 8004130:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 8004134:	e1500001 	cmp	r0, r1
 8004138:	a08cc000 	addge	ip, ip, r0
 800413c:	b08cc001 	addlt	ip, ip, r1

		FLUSH ();	/* copy out the I/O vectors */
 8004140:	e3550000 	cmp	r5, #0
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 8004144:	e58dc028 	str	ip, [sp, #40]	; 0x28

		FLUSH ();	/* copy out the I/O vectors */
 8004148:	1afffd81 	bne	8003754 <_svfprintf_r+0x2f4>
 800414c:	e3a03000 	mov	r3, #0
 8004150:	e58d3098 	str	r3, [sp, #152]	; 0x98
 8004154:	e1a0a00b 	mov	sl, fp
 8004158:	eafffce1 	b	80034e4 <_svfprintf_r+0x84>
		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 800415c:	e3570065 	cmp	r7, #101	; 0x65
 8004160:	da00008c 	ble	8004398 <_svfprintf_r+0xf38>
				if (_fpvalue == 0) {
 8004164:	e28d1058 	add	r1, sp, #88	; 0x58
 8004168:	e8910003 	ldm	r1, {r0, r1}
 800416c:	e3a02000 	mov	r2, #0
 8004170:	e3a03000 	mov	r3, #0
 8004174:	eb001a2e 	bl	800aa34 <__aeabi_dcmpeq>
 8004178:	e3500000 	cmp	r0, #0
 800417c:	0a0000d7 	beq	80044e0 <_svfprintf_r+0x1080>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 8004180:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004184:	e59f26dc 	ldr	r2, [pc, #1756]	; 8004868 <_svfprintf_r+0x1408>
 8004188:	e2844001 	add	r4, r4, #1
 800418c:	e2855001 	add	r5, r5, #1
 8004190:	e3540007 	cmp	r4, #7
 8004194:	e3a03001 	mov	r3, #1
 8004198:	e88a000c 	stm	sl, {r2, r3}
 800419c:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80041a0:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80041a4:	d28aa008 	addle	sl, sl, #8
 80041a8:	ca000211 	bgt	80049f4 <_svfprintf_r+0x1594>
					if (expt < ndig || flags & ALT) {
 80041ac:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
 80041b0:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 80041b4:	e153000c 	cmp	r3, ip
 80041b8:	ba000002 	blt	80041c8 <_svfprintf_r+0xd68>
 80041bc:	e59dc018 	ldr	ip, [sp, #24]
 80041c0:	e31c0001 	tst	ip, #1
 80041c4:	0affffa1 	beq	8004050 <_svfprintf_r+0xbf0>
						PRINT (decimal_point, decp_len);
 80041c8:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80041cc:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 80041d0:	e085500c 	add	r5, r5, ip
 80041d4:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 80041d8:	e2844001 	add	r4, r4, #1
 80041dc:	e58ac000 	str	ip, [sl]
 80041e0:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80041e4:	e3540007 	cmp	r4, #7
 80041e8:	e58ac004 	str	ip, [sl, #4]
 80041ec:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80041f0:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80041f4:	d28aa008 	addle	sl, sl, #8
 80041f8:	ca00024d 	bgt	8004b34 <_svfprintf_r+0x16d4>
						PAD (ndig - 1, zeroes);
 80041fc:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004200:	e24c7001 	sub	r7, ip, #1
 8004204:	e3570000 	cmp	r7, #0
 8004208:	daffff90 	ble	8004050 <_svfprintf_r+0xbf0>
 800420c:	e3570010 	cmp	r7, #16
 8004210:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004214:	e59f6650 	ldr	r6, [pc, #1616]	; 800486c <_svfprintf_r+0x140c>
 8004218:	c3a08010 	movgt	r8, #16
 800421c:	c59d9038 	ldrgt	r9, [sp, #56]	; 0x38
 8004220:	ca000003 	bgt	8004234 <_svfprintf_r+0xdd4>
 8004224:	ea00013e 	b	8004724 <_svfprintf_r+0x12c4>
 8004228:	e2477010 	sub	r7, r7, #16
 800422c:	e3570010 	cmp	r7, #16
 8004230:	da00013b 	ble	8004724 <_svfprintf_r+0x12c4>
 8004234:	e2844001 	add	r4, r4, #1
 8004238:	e3540007 	cmp	r4, #7
 800423c:	e2855010 	add	r5, r5, #16
 8004240:	e88a0140 	stm	sl, {r6, r8}
 8004244:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004248:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800424c:	d28aa008 	addle	sl, sl, #8
 8004250:	dafffff4 	ble	8004228 <_svfprintf_r+0xdc8>
 8004254:	e1a00009 	mov	r0, r9
 8004258:	e59d101c 	ldr	r1, [sp, #28]
 800425c:	e28d2094 	add	r2, sp, #148	; 0x94
 8004260:	eb001135 	bl	800873c <__ssprint_r>
 8004264:	e3500000 	cmp	r0, #0
 8004268:	1afffd3f 	bne	800376c <_svfprintf_r+0x30c>
 800426c:	e28d4098 	add	r4, sp, #152	; 0x98
 8004270:	e8940030 	ldm	r4, {r4, r5}
 8004274:	e1a0a00b 	mov	sl, fp
 8004278:	eaffffea 	b	8004228 <_svfprintf_r+0xdc8>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 800427c:	e3510000 	cmp	r1, #0
 8004280:	158d2034 	strne	r2, [sp, #52]	; 0x34
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 8004284:	158db048 	strne	fp, [sp, #72]	; 0x48
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 8004288:	1afffe08 	bne	8003ab0 <_svfprintf_r+0x650>
 800428c:	e59dc018 	ldr	ip, [sp, #24]
 8004290:	e31c0001 	tst	ip, #1
                         *--cp = '0';
 8004294:	128d3f42 	addne	r3, sp, #264	; 0x108
 8004298:	13a02030 	movne	r2, #48	; 0x30
 800429c:	15632041 	strbne	r2, [r3, #-65]!	; 0x41
 80042a0:	1063c00b 	rsbne	ip, r3, fp
 80042a4:	158dc034 	strne	ip, [sp, #52]	; 0x34
 80042a8:	158d3048 	strne	r3, [sp, #72]	; 0x48
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 80042ac:	058d1034 	streq	r1, [sp, #52]	; 0x34
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 80042b0:	058db048 	streq	fp, [sp, #72]	; 0x48
 80042b4:	eafffdfd 	b	8003ab0 <_svfprintf_r+0x650>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 80042b8:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
 80042bc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
 80042c0:	e060800c 	rsb	r8, r0, ip
 80042c4:	e3580000 	cmp	r8, #0
 80042c8:	daffff1a 	ble	8003f38 <_svfprintf_r+0xad8>
 80042cc:	e3580010 	cmp	r8, #16
 80042d0:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 80042d4:	e59f6590 	ldr	r6, [pc, #1424]	; 800486c <_svfprintf_r+0x140c>
 80042d8:	da00001d 	ble	8004354 <_svfprintf_r+0xef4>
 80042dc:	e58d7044 	str	r7, [sp, #68]	; 0x44
 80042e0:	e3a09010 	mov	r9, #16
 80042e4:	e1a07006 	mov	r7, r6
 80042e8:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
 80042ec:	ea000002 	b	80042fc <_svfprintf_r+0xe9c>
 80042f0:	e2488010 	sub	r8, r8, #16
 80042f4:	e3580010 	cmp	r8, #16
 80042f8:	da000013 	ble	800434c <_svfprintf_r+0xeec>
 80042fc:	e2844001 	add	r4, r4, #1
 8004300:	e3540007 	cmp	r4, #7
 8004304:	e2855010 	add	r5, r5, #16
 8004308:	e88a0280 	stm	sl, {r7, r9}
 800430c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004310:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004314:	d28aa008 	addle	sl, sl, #8
 8004318:	dafffff4 	ble	80042f0 <_svfprintf_r+0xe90>
 800431c:	e1a00006 	mov	r0, r6
 8004320:	e59d101c 	ldr	r1, [sp, #28]
 8004324:	e28d2094 	add	r2, sp, #148	; 0x94
 8004328:	eb001103 	bl	800873c <__ssprint_r>
 800432c:	e3500000 	cmp	r0, #0
 8004330:	1afffd0d 	bne	800376c <_svfprintf_r+0x30c>
 8004334:	e2488010 	sub	r8, r8, #16
 8004338:	e28d4098 	add	r4, sp, #152	; 0x98
 800433c:	e3580010 	cmp	r8, #16
 8004340:	e8940030 	ldm	r4, {r4, r5}
 8004344:	e1a0a00b 	mov	sl, fp
 8004348:	caffffeb 	bgt	80042fc <_svfprintf_r+0xe9c>
 800434c:	e1a06007 	mov	r6, r7
 8004350:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
 8004354:	e2844001 	add	r4, r4, #1
 8004358:	e3540007 	cmp	r4, #7
 800435c:	e0855008 	add	r5, r5, r8
 8004360:	e88a0140 	stm	sl, {r6, r8}
 8004364:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004368:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800436c:	d28aa008 	addle	sl, sl, #8
 8004370:	dafffef0 	ble	8003f38 <_svfprintf_r+0xad8>
 8004374:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004378:	e59d101c 	ldr	r1, [sp, #28]
 800437c:	e28d2094 	add	r2, sp, #148	; 0x94
 8004380:	eb0010ed 	bl	800873c <__ssprint_r>
 8004384:	e3500000 	cmp	r0, #0
 8004388:	1afffcf7 	bne	800376c <_svfprintf_r+0x30c>
 800438c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004390:	e1a0a00b 	mov	sl, fp
 8004394:	eafffee7 	b	8003f38 <_svfprintf_r+0xad8>
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 8004398:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
					PRINT (cp, 1);
 800439c:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 80043a0:	e35c0001 	cmp	ip, #1
					PRINT (cp, 1);
 80043a4:	e2844001 	add	r4, r4, #1
 80043a8:	e2855001 	add	r5, r5, #1
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 80043ac:	da00015d 	ble	8004928 <_svfprintf_r+0x14c8>
					PRINT (cp, 1);
 80043b0:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 80043b4:	e3540007 	cmp	r4, #7
 80043b8:	e3a03001 	mov	r3, #1
 80043bc:	e58ac000 	str	ip, [sl]
 80043c0:	e58a3004 	str	r3, [sl, #4]
 80043c4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80043c8:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80043cc:	d28aa008 	addle	sl, sl, #8
 80043d0:	ca000160 	bgt	8004958 <_svfprintf_r+0x14f8>
					cp++;
					PRINT (decimal_point, decp_len);
 80043d4:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80043d8:	e085500c 	add	r5, r5, ip
 80043dc:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 80043e0:	e2844001 	add	r4, r4, #1
 80043e4:	e58ac000 	str	ip, [sl]
 80043e8:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80043ec:	e3540007 	cmp	r4, #7
 80043f0:	e58ac004 	str	ip, [sl, #4]
 80043f4:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80043f8:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80043fc:	d28aa008 	addle	sl, sl, #8
 8004400:	ca00015e 	bgt	8004980 <_svfprintf_r+0x1520>
					if (_fpvalue) {
 8004404:	e28d1058 	add	r1, sp, #88	; 0x58
 8004408:	e8910003 	ldm	r1, {r0, r1}
 800440c:	e3a02000 	mov	r2, #0
 8004410:	e3a03000 	mov	r3, #0
 8004414:	eb001986 	bl	800aa34 <__aeabi_dcmpeq>
 8004418:	e3500000 	cmp	r0, #0
 800441c:	1a00008e 	bne	800465c <_svfprintf_r+0x11fc>
						PRINT (cp, ndig - 1);
 8004420:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004424:	e24c3001 	sub	r3, ip, #1
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
 8004428:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 800442c:	e2844001 	add	r4, r4, #1
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
 8004430:	e28c2001 	add	r2, ip, #1
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 8004434:	e0855003 	add	r5, r5, r3
 8004438:	e3540007 	cmp	r4, #7
 800443c:	e88a000c 	stm	sl, {r2, r3}
 8004440:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004444:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004448:	ca0000ab 	bgt	80046fc <_svfprintf_r+0x129c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 800444c:	e28aa008 	add	sl, sl, #8
				PRINT (expstr, expsize);
 8004450:	e59dc064 	ldr	ip, [sp, #100]	; 0x64
 8004454:	e2844001 	add	r4, r4, #1
 8004458:	e085500c 	add	r5, r5, ip
 800445c:	e28d3084 	add	r3, sp, #132	; 0x84
 8004460:	e3540007 	cmp	r4, #7
 8004464:	e88a1008 	stm	sl, {r3, ip}
 8004468:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800446c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004470:	dafffef5 	ble	800404c <_svfprintf_r+0xbec>
		PAD (dprec - size, zeroes);

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 8004474:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004478:	e59d101c 	ldr	r1, [sp, #28]
 800447c:	e28d2094 	add	r2, sp, #148	; 0x94
 8004480:	eb0010ad 	bl	800873c <__ssprint_r>
 8004484:	e3500000 	cmp	r0, #0
 8004488:	1afffcb7 	bne	800376c <_svfprintf_r+0x30c>
 800448c:	e1a0a00b 	mov	sl, fp
 8004490:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004494:	eafffeed 	b	8004050 <_svfprintf_r+0xbf0>
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 8004498:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 800449c:	e59d101c 	ldr	r1, [sp, #28]
 80044a0:	e28d2094 	add	r2, sp, #148	; 0x94
 80044a4:	eb0010a4 	bl	800873c <__ssprint_r>
 80044a8:	e3500000 	cmp	r0, #0
 80044ac:	1afffcae 	bne	800376c <_svfprintf_r+0x30c>
 80044b0:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 80044b4:	e1a0a00b 	mov	sl, fp
 80044b8:	eafffe8d 	b	8003ef4 <_svfprintf_r+0xa94>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 80044bc:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 80044c0:	e59d101c 	ldr	r1, [sp, #28]
 80044c4:	e28d2094 	add	r2, sp, #148	; 0x94
 80044c8:	eb00109b 	bl	800873c <__ssprint_r>
 80044cc:	e3500000 	cmp	r0, #0
 80044d0:	1afffca5 	bne	800376c <_svfprintf_r+0x30c>
 80044d4:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 80044d8:	e1a0a00b 	mov	sl, fp
 80044dc:	eafffe92 	b	8003f2c <_svfprintf_r+0xacc>
					PRINT ("0", 1);
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
						PAD (ndig - 1, zeroes);
					}
				} else if (expt <= 0) {
 80044e0:	e59d7078 	ldr	r7, [sp, #120]	; 0x78
 80044e4:	e3570000 	cmp	r7, #0
 80044e8:	da00014a 	ble	8004a18 <_svfprintf_r+0x15b8>
 80044ec:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
 80044f0:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
						PAD (-expt, zeroes);
						PRINT (cp, ndig);
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 80044f4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
 80044f8:	e156000c 	cmp	r6, ip
 80044fc:	a1a0600c 	movge	r6, ip
 8004500:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 8004504:	e3560000 	cmp	r6, #0
 8004508:	e08c9000 	add	r9, ip, r0
 800450c:	da000009 	ble	8004538 <_svfprintf_r+0x10d8>
 8004510:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004514:	e2844001 	add	r4, r4, #1
 8004518:	e0855006 	add	r5, r5, r6
 800451c:	e3540007 	cmp	r4, #7
 8004520:	e58ac000 	str	ip, [sl]
 8004524:	e58a6004 	str	r6, [sl, #4]
 8004528:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 800452c:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004530:	d28aa008 	addle	sl, sl, #8
 8004534:	ca000247 	bgt	8004e58 <_svfprintf_r+0x19f8>
 8004538:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
 800453c:	e1c66fc6 	bic	r6, r6, r6, asr #31
 8004540:	e066700c 	rsb	r7, r6, ip
 8004544:	e3570000 	cmp	r7, #0
 8004548:	da000097 	ble	80047ac <_svfprintf_r+0x134c>
 800454c:	e3570010 	cmp	r7, #16
 8004550:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004554:	e59f6310 	ldr	r6, [pc, #784]	; 800486c <_svfprintf_r+0x140c>
 8004558:	da000083 	ble	800476c <_svfprintf_r+0x130c>
 800455c:	e58d9034 	str	r9, [sp, #52]	; 0x34
 8004560:	e3a08010 	mov	r8, #16
 8004564:	e1a09007 	mov	r9, r7
 8004568:	e1a07006 	mov	r7, r6
 800456c:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
 8004570:	ea000002 	b	8004580 <_svfprintf_r+0x1120>
 8004574:	e2499010 	sub	r9, r9, #16
 8004578:	e3590010 	cmp	r9, #16
 800457c:	da000077 	ble	8004760 <_svfprintf_r+0x1300>
 8004580:	e2844001 	add	r4, r4, #1
 8004584:	e3540007 	cmp	r4, #7
 8004588:	e2855010 	add	r5, r5, #16
 800458c:	e88a0180 	stm	sl, {r7, r8}
 8004590:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004594:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004598:	d28aa008 	addle	sl, sl, #8
 800459c:	dafffff4 	ble	8004574 <_svfprintf_r+0x1114>
 80045a0:	e1a00006 	mov	r0, r6
 80045a4:	e59d101c 	ldr	r1, [sp, #28]
 80045a8:	e28d2094 	add	r2, sp, #148	; 0x94
 80045ac:	eb001062 	bl	800873c <__ssprint_r>
 80045b0:	e3500000 	cmp	r0, #0
 80045b4:	1afffc6c 	bne	800376c <_svfprintf_r+0x30c>
 80045b8:	e28d4098 	add	r4, sp, #152	; 0x98
 80045bc:	e8940030 	ldm	r4, {r4, r5}
 80045c0:	e1a0a00b 	mov	sl, fp
 80045c4:	eaffffea 	b	8004574 <_svfprintf_r+0x1114>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 80045c8:	e28d10c7 	add	r1, sp, #199	; 0xc7
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 80045cc:	e59fc288 	ldr	ip, [pc, #648]	; 800485c <_svfprintf_r+0x13fc>
 80045d0:	e082039c 	umull	r0, r2, ip, r3
 80045d4:	e1a021a2 	lsr	r2, r2, #3
 80045d8:	e0820102 	add	r0, r2, r2, lsl #2
 80045dc:	e0433080 	sub	r3, r3, r0, lsl #1
 80045e0:	e1a00001 	mov	r0, r1
 80045e4:	e2831030 	add	r1, r3, #48	; 0x30
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
					} while (_uquad != 0);
 80045e8:	e2523000 	subs	r3, r2, #0
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 80045ec:	e5c01000 	strb	r1, [r0]
 80045f0:	e2401001 	sub	r1, r0, #1
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
					} while (_uquad != 0);
 80045f4:	1afffff4 	bne	80045cc <_svfprintf_r+0x116c>
 80045f8:	e58d0048 	str	r0, [sp, #72]	; 0x48
 80045fc:	e060300b 	rsb	r3, r0, fp
 8004600:	e58d3034 	str	r3, [sp, #52]	; 0x34
 8004604:	eafffd29 	b	8003ab0 <_svfprintf_r+0x650>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8004608:	e59dc068 	ldr	ip, [sp, #104]	; 0x68
					} while (_uquad != 0);
					break;

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 800460c:	e203100f 	and	r1, r3, #15
 8004610:	e7dc0001 	ldrb	r0, [ip, r1]
						_uquad >>= 4;
					} while (_uquad);
 8004614:	e1b03223 	lsrs	r3, r3, #4
					} while (_uquad != 0);
					break;

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 8004618:	e1a01002 	mov	r1, r2
 800461c:	e5c20000 	strb	r0, [r2]
 8004620:	e2422001 	sub	r2, r2, #1
						_uquad >>= 4;
					} while (_uquad);
 8004624:	1afffff8 	bne	800460c <_svfprintf_r+0x11ac>
 8004628:	e061c00b 	rsb	ip, r1, fp
 800462c:	e58d1048 	str	r1, [sp, #72]	; 0x48
 8004630:	e58dc034 	str	ip, [sp, #52]	; 0x34
 8004634:	eafffd1d 	b	8003ab0 <_svfprintf_r+0x650>
						*--cp = '0';
					break;

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 8004638:	e3530009 	cmp	r3, #9
 800463c:	8affffe1 	bhi	80045c8 <_svfprintf_r+0x1168>
						*--cp = to_char(_uquad);
 8004640:	e28d2f42 	add	r2, sp, #264	; 0x108
 8004644:	e2833030 	add	r3, r3, #48	; 0x30
 8004648:	e5623041 	strb	r3, [r2, #-65]!	; 0x41
 800464c:	e062300b 	rsb	r3, r2, fp
 8004650:	e58d3034 	str	r3, [sp, #52]	; 0x34
 8004654:	e58d2048 	str	r2, [sp, #72]	; 0x48
						break;
 8004658:	eafffd14 	b	8003ab0 <_svfprintf_r+0x650>
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 800465c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004660:	e24c7001 	sub	r7, ip, #1
 8004664:	e3570000 	cmp	r7, #0
 8004668:	daffff78 	ble	8004450 <_svfprintf_r+0xff0>
 800466c:	e3570010 	cmp	r7, #16
 8004670:	e59f61f4 	ldr	r6, [pc, #500]	; 800486c <_svfprintf_r+0x140c>
 8004674:	c3a08010 	movgt	r8, #16
 8004678:	c59d9038 	ldrgt	r9, [sp, #56]	; 0x38
 800467c:	ca000003 	bgt	8004690 <_svfprintf_r+0x1230>
 8004680:	ea000016 	b	80046e0 <_svfprintf_r+0x1280>
 8004684:	e2477010 	sub	r7, r7, #16
 8004688:	e3570010 	cmp	r7, #16
 800468c:	da000013 	ble	80046e0 <_svfprintf_r+0x1280>
 8004690:	e2844001 	add	r4, r4, #1
 8004694:	e3540007 	cmp	r4, #7
 8004698:	e2855010 	add	r5, r5, #16
 800469c:	e88a0140 	stm	sl, {r6, r8}
 80046a0:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80046a4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80046a8:	d28aa008 	addle	sl, sl, #8
 80046ac:	dafffff4 	ble	8004684 <_svfprintf_r+0x1224>
 80046b0:	e1a00009 	mov	r0, r9
 80046b4:	e59d101c 	ldr	r1, [sp, #28]
 80046b8:	e28d2094 	add	r2, sp, #148	; 0x94
 80046bc:	eb00101e 	bl	800873c <__ssprint_r>
 80046c0:	e3500000 	cmp	r0, #0
 80046c4:	1afffc28 	bne	800376c <_svfprintf_r+0x30c>
 80046c8:	e2477010 	sub	r7, r7, #16
 80046cc:	e28d4098 	add	r4, sp, #152	; 0x98
 80046d0:	e3570010 	cmp	r7, #16
 80046d4:	e8940030 	ldm	r4, {r4, r5}
 80046d8:	e1a0a00b 	mov	sl, fp
 80046dc:	caffffeb 	bgt	8004690 <_svfprintf_r+0x1230>
 80046e0:	e2844001 	add	r4, r4, #1
 80046e4:	e0855007 	add	r5, r5, r7
 80046e8:	e3540007 	cmp	r4, #7
 80046ec:	e88a00c0 	stm	sl, {r6, r7}
 80046f0:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80046f4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80046f8:	daffff53 	ble	800444c <_svfprintf_r+0xfec>
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 80046fc:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004700:	e59d101c 	ldr	r1, [sp, #28]
 8004704:	e28d2094 	add	r2, sp, #148	; 0x94
 8004708:	eb00100b 	bl	800873c <__ssprint_r>
 800470c:	e3500000 	cmp	r0, #0
 8004710:	1afffc15 	bne	800376c <_svfprintf_r+0x30c>
 8004714:	e28d4098 	add	r4, sp, #152	; 0x98
 8004718:	e1a0a00b 	mov	sl, fp
 800471c:	e8940030 	ldm	r4, {r4, r5}
 8004720:	eaffff4a 	b	8004450 <_svfprintf_r+0xff0>
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
 8004724:	e2844001 	add	r4, r4, #1
 8004728:	e0855007 	add	r5, r5, r7
 800472c:	e3540007 	cmp	r4, #7
 8004730:	e88a00c0 	stm	sl, {r6, r7}
 8004734:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004738:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800473c:	dafffe42 	ble	800404c <_svfprintf_r+0xbec>
 8004740:	eaffff4b 	b	8004474 <_svfprintf_r+0x1014>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 8004744:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 8004748:	e59c3000 	ldr	r3, [ip]
 800474c:	e28cc004 	add	ip, ip, #4
 8004750:	e58dc030 	str	ip, [sp, #48]	; 0x30
 8004754:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8004758:	e583c000 	str	ip, [r3]
 800475c:	eafffb60 	b	80034e4 <_svfprintf_r+0x84>
 8004760:	e1a06007 	mov	r6, r7
 8004764:	e1a07009 	mov	r7, r9
 8004768:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
						PAD (-expt, zeroes);
						PRINT (cp, ndig);
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 800476c:	e2844001 	add	r4, r4, #1
 8004770:	e3540007 	cmp	r4, #7
 8004774:	e0855007 	add	r5, r5, r7
 8004778:	e88a00c0 	stm	sl, {r6, r7}
 800477c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004780:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004784:	d28aa008 	addle	sl, sl, #8
 8004788:	da000007 	ble	80047ac <_svfprintf_r+0x134c>
 800478c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004790:	e59d101c 	ldr	r1, [sp, #28]
 8004794:	e28d2094 	add	r2, sp, #148	; 0x94
 8004798:	eb000fe7 	bl	800873c <__ssprint_r>
 800479c:	e3500000 	cmp	r0, #0
 80047a0:	1afffbf1 	bne	800376c <_svfprintf_r+0x30c>
 80047a4:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 80047a8:	e1a0a00b 	mov	sl, fp
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 80047ac:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 80047b0:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
						    lead, zeroes);
					cp += lead;
 80047b4:	e59d0050 	ldr	r0, [sp, #80]	; 0x50
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 80047b8:	e153000c 	cmp	r3, ip
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
						    lead, zeroes);
					cp += lead;
 80047bc:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 80047c0:	e08c8000 	add	r8, ip, r0
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 80047c4:	ba000040 	blt	80048cc <_svfprintf_r+0x146c>
 80047c8:	e59dc018 	ldr	ip, [sp, #24]
 80047cc:	e31c0001 	tst	ip, #1
 80047d0:	1a00003d 	bne	80048cc <_svfprintf_r+0x146c>
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
 80047d4:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 80047d8:	e0686009 	rsb	r6, r8, r9
 80047dc:	e063300c 	rsb	r3, r3, ip
 80047e0:	e1530006 	cmp	r3, r6
 80047e4:	b1a06003 	movlt	r6, r3
 80047e8:	a1a06006 	movge	r6, r6
 80047ec:	e3560000 	cmp	r6, #0
 80047f0:	da000009 	ble	800481c <_svfprintf_r+0x13bc>
 80047f4:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 80047f8:	e2844001 	add	r4, r4, #1
 80047fc:	e0855006 	add	r5, r5, r6
 8004800:	e3540007 	cmp	r4, #7
 8004804:	e58a8000 	str	r8, [sl]
 8004808:	e58a6004 	str	r6, [sl, #4]
 800480c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004810:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004814:	d28aa008 	addle	sl, sl, #8
 8004818:	ca000197 	bgt	8004e7c <_svfprintf_r+0x1a1c>
 800481c:	e1c66fc6 	bic	r6, r6, r6, asr #31
 8004820:	e0667003 	rsb	r7, r6, r3
 8004824:	e3570000 	cmp	r7, #0
 8004828:	dafffe08 	ble	8004050 <_svfprintf_r+0xbf0>
 800482c:	e3570010 	cmp	r7, #16
 8004830:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004834:	e59f6030 	ldr	r6, [pc, #48]	; 800486c <_svfprintf_r+0x140c>
 8004838:	c3a08010 	movgt	r8, #16
 800483c:	c59d9038 	ldrgt	r9, [sp, #56]	; 0x38
 8004840:	ca00000f 	bgt	8004884 <_svfprintf_r+0x1424>
 8004844:	eaffffb6 	b	8004724 <_svfprintf_r+0x12c4>
 8004848:	0800adf0 	.word	0x0800adf0
 800484c:	0800b080 	.word	0x0800b080
 8004850:	0800b094 	.word	0x0800b094
 8004854:	0800b070 	.word	0x0800b070
 8004858:	0800b074 	.word	0x0800b074
 800485c:	cccccccd 	.word	0xcccccccd
 8004860:	0800b078 	.word	0x0800b078
 8004864:	0800b07c 	.word	0x0800b07c
 8004868:	0800b0b0 	.word	0x0800b0b0
 800486c:	0800ae00 	.word	0x0800ae00
 8004870:	0800b0a8 	.word	0x0800b0a8
 8004874:	66666667 	.word	0x66666667
 8004878:	e2477010 	sub	r7, r7, #16
 800487c:	e3570010 	cmp	r7, #16
 8004880:	daffffa7 	ble	8004724 <_svfprintf_r+0x12c4>
 8004884:	e2844001 	add	r4, r4, #1
 8004888:	e3540007 	cmp	r4, #7
 800488c:	e2855010 	add	r5, r5, #16
 8004890:	e88a0140 	stm	sl, {r6, r8}
 8004894:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004898:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800489c:	d28aa008 	addle	sl, sl, #8
 80048a0:	dafffff4 	ble	8004878 <_svfprintf_r+0x1418>
 80048a4:	e1a00009 	mov	r0, r9
 80048a8:	e59d101c 	ldr	r1, [sp, #28]
 80048ac:	e28d2094 	add	r2, sp, #148	; 0x94
 80048b0:	eb000fa1 	bl	800873c <__ssprint_r>
 80048b4:	e3500000 	cmp	r0, #0
 80048b8:	1afffbab 	bne	800376c <_svfprintf_r+0x30c>
 80048bc:	e28d4098 	add	r4, sp, #152	; 0x98
 80048c0:	e8940030 	ldm	r4, {r4, r5}
 80048c4:	e1a0a00b 	mov	sl, fp
 80048c8:	eaffffea 	b	8004878 <_svfprintf_r+0x1418>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 80048cc:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80048d0:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 80048d4:	e085500c 	add	r5, r5, ip
 80048d8:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 80048dc:	e2844001 	add	r4, r4, #1
 80048e0:	e58ac000 	str	ip, [sl]
 80048e4:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 80048e8:	e3540007 	cmp	r4, #7
 80048ec:	e58ac004 	str	ip, [sl, #4]
 80048f0:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 80048f4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 80048f8:	d28aa008 	addle	sl, sl, #8
 80048fc:	daffffb4 	ble	80047d4 <_svfprintf_r+0x1374>
 8004900:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004904:	e59d101c 	ldr	r1, [sp, #28]
 8004908:	e28d2094 	add	r2, sp, #148	; 0x94
 800490c:	eb000f8a 	bl	800873c <__ssprint_r>
 8004910:	e3500000 	cmp	r0, #0
 8004914:	1afffb94 	bne	800376c <_svfprintf_r+0x30c>
 8004918:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
 800491c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004920:	e1a0a00b 	mov	sl, fp
 8004924:	eaffffaa 	b	80047d4 <_svfprintf_r+0x1374>
					PRINTANDPAD (cp, convbuf + ndig,
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 8004928:	e59dc018 	ldr	ip, [sp, #24]
 800492c:	e31c0001 	tst	ip, #1
 8004930:	1afffe9e 	bne	80043b0 <_svfprintf_r+0xf50>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 8004934:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 8004938:	e3a03001 	mov	r3, #1
 800493c:	e3540007 	cmp	r4, #7
 8004940:	e58ac000 	str	ip, [sl]
 8004944:	e58a3004 	str	r3, [sl, #4]
 8004948:	e58d4098 	str	r4, [sp, #152]	; 0x98
 800494c:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004950:	dafffebd 	ble	800444c <_svfprintf_r+0xfec>
 8004954:	eaffff68 	b	80046fc <_svfprintf_r+0x129c>
					PRINTANDPAD (cp, convbuf + ndig,
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 8004958:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 800495c:	e59d101c 	ldr	r1, [sp, #28]
 8004960:	e28d2094 	add	r2, sp, #148	; 0x94
 8004964:	eb000f74 	bl	800873c <__ssprint_r>
 8004968:	e3500000 	cmp	r0, #0
 800496c:	1afffb7e 	bne	800376c <_svfprintf_r+0x30c>
 8004970:	e28d4098 	add	r4, sp, #152	; 0x98
 8004974:	e8940030 	ldm	r4, {r4, r5}
 8004978:	e1a0a00b 	mov	sl, fp
 800497c:	eafffe94 	b	80043d4 <_svfprintf_r+0xf74>
					cp++;
					PRINT (decimal_point, decp_len);
 8004980:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004984:	e59d101c 	ldr	r1, [sp, #28]
 8004988:	e28d2094 	add	r2, sp, #148	; 0x94
 800498c:	eb000f6a 	bl	800873c <__ssprint_r>
 8004990:	e3500000 	cmp	r0, #0
 8004994:	1afffb74 	bne	800376c <_svfprintf_r+0x30c>
 8004998:	e28d4098 	add	r4, sp, #152	; 0x98
 800499c:	e8940030 	ldm	r4, {r4, r5}
 80049a0:	e1a0a00b 	mov	sl, fp
 80049a4:	eafffe96 	b	8004404 <_svfprintf_r+0xfa4>
					cp = "inf";
				size = 3;
				flags &= ~ZEROPAD;
				break;
			}
			if (isnan (_fpvalue)) {
 80049a8:	eb000e94 	bl	8008400 <__fpclassifyd>
 80049ac:	e3500000 	cmp	r0, #0
 80049b0:	1a000068 	bne	8004b58 <_svfprintf_r+0x16f8>
					cp = "NAN";
				else
					cp = "nan";
				size = 3;
				flags &= ~ZEROPAD;
				break;
 80049b4:	e3a0c003 	mov	ip, #3
 80049b8:	e58dc024 	str	ip, [sp, #36]	; 0x24
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "NAN";
				else
					cp = "nan";
				size = 3;
				flags &= ~ZEROPAD;
 80049bc:	e59dc018 	ldr	ip, [sp, #24]
 80049c0:	e3ccc080 	bic	ip, ip, #128	; 0x80
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 80049c4:	e58d003c 	str	r0, [sp, #60]	; 0x3c
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "NAN";
				else
					cp = "nan";
				size = 3;
				flags &= ~ZEROPAD;
 80049c8:	e58dc018 	str	ip, [sp, #24]
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 80049cc:	e58d0050 	str	r0, [sp, #80]	; 0x50
			if (isnan (_fpvalue)) {
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "NAN";
				else
					cp = "nan";
				size = 3;
 80049d0:	e3a0c003 	mov	ip, #3
				flags &= ~ZEROPAD;
				break;
			}
			if (isnan (_fpvalue)) {
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "NAN";
 80049d4:	e51f017c 	ldr	r0, [pc, #-380]	; 8004860 <_svfprintf_r+0x1400>
				else
					cp = "nan";
				size = 3;
 80049d8:	e58dc034 	str	ip, [sp, #52]	; 0x34
				flags &= ~ZEROPAD;
				break;
			}
			if (isnan (_fpvalue)) {
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
					cp = "NAN";
 80049dc:	e3570047 	cmp	r7, #71	; 0x47
 80049e0:	e51fc184 	ldr	ip, [pc, #-388]	; 8004864 <_svfprintf_r+0x1404>
 80049e4:	d1a0c000 	movle	ip, r0
 80049e8:	e58dc048 	str	ip, [sp, #72]	; 0x48
 80049ec:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
				else
					cp = "nan";
				size = 3;
				flags &= ~ZEROPAD;
				break;
 80049f0:	eafffb8b 	b	8003824 <_svfprintf_r+0x3c4>
			PRINT (cp, size);
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 80049f4:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 80049f8:	e59d101c 	ldr	r1, [sp, #28]
 80049fc:	e28d2094 	add	r2, sp, #148	; 0x94
 8004a00:	eb000f4d 	bl	800873c <__ssprint_r>
 8004a04:	e3500000 	cmp	r0, #0
 8004a08:	1afffb57 	bne	800376c <_svfprintf_r+0x30c>
 8004a0c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004a10:	e1a0a00b 	mov	sl, fp
 8004a14:	eafffde4 	b	80041ac <_svfprintf_r+0xd4c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
						PAD (ndig - 1, zeroes);
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 8004a18:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004a1c:	e51f21bc 	ldr	r2, [pc, #-444]	; 8004868 <_svfprintf_r+0x1408>
 8004a20:	e2844001 	add	r4, r4, #1
 8004a24:	e2855001 	add	r5, r5, #1
 8004a28:	e3540007 	cmp	r4, #7
 8004a2c:	e3a03001 	mov	r3, #1
 8004a30:	e88a000c 	stm	sl, {r2, r3}
 8004a34:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004a38:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004a3c:	d28aa008 	addle	sl, sl, #8
 8004a40:	ca0000c8 	bgt	8004d68 <_svfprintf_r+0x1908>
					if (expt || ndig || flags & ALT) {
 8004a44:	e3570000 	cmp	r7, #0
 8004a48:	1a000005 	bne	8004a64 <_svfprintf_r+0x1604>
 8004a4c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004a50:	e35c0000 	cmp	ip, #0
 8004a54:	1a000002 	bne	8004a64 <_svfprintf_r+0x1604>
 8004a58:	e59dc018 	ldr	ip, [sp, #24]
 8004a5c:	e31c0001 	tst	ip, #1
 8004a60:	0afffd7a 	beq	8004050 <_svfprintf_r+0xbf0>
						PRINT (decimal_point, decp_len);
 8004a64:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 8004a68:	e59d4098 	ldr	r4, [sp, #152]	; 0x98
 8004a6c:	e085500c 	add	r5, r5, ip
 8004a70:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 8004a74:	e2844001 	add	r4, r4, #1
 8004a78:	e58ac000 	str	ip, [sl]
 8004a7c:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
 8004a80:	e3540007 	cmp	r4, #7
 8004a84:	e58ac004 	str	ip, [sl, #4]
 8004a88:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004a8c:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004a90:	d28aa008 	addle	sl, sl, #8
 8004a94:	ca0000da 	bgt	8004e04 <_svfprintf_r+0x19a4>
						PAD (-expt, zeroes);
 8004a98:	e2677000 	rsb	r7, r7, #0
 8004a9c:	e3570000 	cmp	r7, #0
 8004aa0:	da0000cb 	ble	8004dd4 <_svfprintf_r+0x1974>
 8004aa4:	e3570010 	cmp	r7, #16
 8004aa8:	e51f6244 	ldr	r6, [pc, #-580]	; 800486c <_svfprintf_r+0x140c>
 8004aac:	c3a08010 	movgt	r8, #16
 8004ab0:	c59d9038 	ldrgt	r9, [sp, #56]	; 0x38
 8004ab4:	ca000003 	bgt	8004ac8 <_svfprintf_r+0x1668>
 8004ab8:	ea0000b4 	b	8004d90 <_svfprintf_r+0x1930>
 8004abc:	e2477010 	sub	r7, r7, #16
 8004ac0:	e3570010 	cmp	r7, #16
 8004ac4:	da0000b1 	ble	8004d90 <_svfprintf_r+0x1930>
 8004ac8:	e2844001 	add	r4, r4, #1
 8004acc:	e3540007 	cmp	r4, #7
 8004ad0:	e2855010 	add	r5, r5, #16
 8004ad4:	e88a0140 	stm	sl, {r6, r8}
 8004ad8:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004adc:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004ae0:	d28aa008 	addle	sl, sl, #8
 8004ae4:	dafffff4 	ble	8004abc <_svfprintf_r+0x165c>
 8004ae8:	e1a00009 	mov	r0, r9
 8004aec:	e59d101c 	ldr	r1, [sp, #28]
 8004af0:	e28d2094 	add	r2, sp, #148	; 0x94
 8004af4:	eb000f10 	bl	800873c <__ssprint_r>
 8004af8:	e3500000 	cmp	r0, #0
 8004afc:	1afffb1a 	bne	800376c <_svfprintf_r+0x30c>
 8004b00:	e28d4098 	add	r4, sp, #152	; 0x98
 8004b04:	e8940030 	ldm	r4, {r4, r5}
 8004b08:	e1a0a00b 	mov	sl, fp
 8004b0c:	eaffffea 	b	8004abc <_svfprintf_r+0x165c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 8004b10:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
 8004b14:	e3530000 	cmp	r3, #0
 8004b18:	e59d901c 	ldr	r9, [sp, #28]
 8004b1c:	0afffb13 	beq	8003770 <_svfprintf_r+0x310>
 8004b20:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004b24:	e1a01009 	mov	r1, r9
 8004b28:	e28d2094 	add	r2, sp, #148	; 0x94
 8004b2c:	eb000f02 	bl	800873c <__ssprint_r>
 8004b30:	eafffb0e 	b	8003770 <_svfprintf_r+0x310>
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 8004b34:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004b38:	e59d101c 	ldr	r1, [sp, #28]
 8004b3c:	e28d2094 	add	r2, sp, #148	; 0x94
 8004b40:	eb000efd 	bl	800873c <__ssprint_r>
 8004b44:	e3500000 	cmp	r0, #0
 8004b48:	1afffb07 	bne	800376c <_svfprintf_r+0x30c>
 8004b4c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004b50:	e1a0a00b 	mov	sl, fp
 8004b54:	eafffda8 	b	80041fc <_svfprintf_r+0xd9c>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 8004b58:	e3740001 	cmn	r4, #1
 8004b5c:	e3c79020 	bic	r9, r7, #32
				prec = DEFPREC;
 8004b60:	03a04006 	moveq	r4, #6
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 8004b64:	0a000003 	beq	8004b78 <_svfprintf_r+0x1718>
				prec = DEFPREC;
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 8004b68:	e3590047 	cmp	r9, #71	; 0x47
 8004b6c:	1a000001 	bne	8004b78 <_svfprintf_r+0x1718>
				prec = 1;
 8004b70:	e3540000 	cmp	r4, #0
 8004b74:	03a04001 	moveq	r4, #1
			}

			flags |= FPT;
 8004b78:	e59dc018 	ldr	ip, [sp, #24]
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 8004b7c:	e3560000 	cmp	r6, #0
				prec = DEFPREC;
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
				prec = 1;
			}

			flags |= FPT;
 8004b80:	e38ccc01 	orr	ip, ip, #256	; 0x100
 8004b84:	e58dc044 	str	ip, [sp, #68]	; 0x44
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
		value = -value;
 8004b88:	b2866102 	addlt	r6, r6, #-2147483648	; 0x80000000
		*sign = '-';
 8004b8c:	b3a0c02d 	movlt	ip, #45	; 0x2d
	} else
		*sign = '\000';
 8004b90:	a3a0c000 	movge	ip, #0
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 8004b94:	e2593046 	subs	r3, r9, #70	; 0x46
 8004b98:	e2735000 	rsbs	r5, r3, #0
 8004b9c:	e0b55003 	adcs	r5, r5, r3
 8004ba0:	e3550000 	cmp	r5, #0
	tmp.d = value;
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
		value = -value;
		*sign = '-';
	} else
		*sign = '\000';
 8004ba4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 8004ba8:	0a00005c 	beq	8004d20 <_svfprintf_r+0x18c0>
		mode = 3;		/* ndigits after the decimal point */
 8004bac:	e3a01003 	mov	r1, #3
				prec = 1;
			}

			flags |= FPT;

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 8004bb0:	e28d0078 	add	r0, sp, #120	; 0x78
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 8004bb4:	e58d1000 	str	r1, [sp]
 8004bb8:	e58d0008 	str	r0, [sp, #8]
 8004bbc:	e28d107c 	add	r1, sp, #124	; 0x7c
 8004bc0:	e28d0080 	add	r0, sp, #128	; 0x80
 8004bc4:	e58d0010 	str	r0, [sp, #16]
 8004bc8:	e1a02008 	mov	r2, r8
 8004bcc:	e1a03006 	mov	r3, r6
 8004bd0:	e58d4004 	str	r4, [sp, #4]
 8004bd4:	e58d100c 	str	r1, [sp, #12]
 8004bd8:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004bdc:	eb0001d1 	bl	8005328 <_dtoa_r>

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 8004be0:	e3590047 	cmp	r9, #71	; 0x47
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 8004be4:	e58d0048 	str	r0, [sp, #72]	; 0x48

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 8004be8:	1a000002 	bne	8004bf8 <_svfprintf_r+0x1798>
 8004bec:	e59dc018 	ldr	ip, [sp, #24]
 8004bf0:	e31c0001 	tst	ip, #1
 8004bf4:	0a0000b9 	beq	8004ee0 <_svfprintf_r+0x1a80>
		bp = digits + ndigits;
 8004bf8:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
		if (ch == 'f' || ch == 'F') {
 8004bfc:	e3550000 	cmp	r5, #0
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
		bp = digits + ndigits;
 8004c00:	e08c5004 	add	r5, ip, r4
		if (ch == 'f' || ch == 'F') {
 8004c04:	0a000004 	beq	8004c1c <_svfprintf_r+0x17bc>
			if (*digits == '0' && value)
 8004c08:	e5dc3000 	ldrb	r3, [ip]
 8004c0c:	e3530030 	cmp	r3, #48	; 0x30
 8004c10:	0a000119 	beq	800507c <_svfprintf_r+0x1c1c>
 8004c14:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
				*decpt = -ndigits + 1;
			bp += *decpt;
 8004c18:	e0855003 	add	r5, r5, r3
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 8004c1c:	e1a00008 	mov	r0, r8
 8004c20:	e1a01006 	mov	r1, r6
 8004c24:	e3a02000 	mov	r2, #0
 8004c28:	e3a03000 	mov	r3, #0
 8004c2c:	eb001780 	bl	800aa34 <__aeabi_dcmpeq>
 8004c30:	e3500000 	cmp	r0, #0
 8004c34:	1a000008 	bne	8004c5c <_svfprintf_r+0x17fc>
			rve = bp;
		while (rve < bp)
 8004c38:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
 8004c3c:	e1550003 	cmp	r5, r3
 8004c40:	91a05003 	movls	r5, r3
 8004c44:	9a000004 	bls	8004c5c <_svfprintf_r+0x17fc>
			*rve++ = '0';
 8004c48:	e3a02030 	mov	r2, #48	; 0x30
 8004c4c:	e4c32001 	strb	r2, [r3], #1
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 8004c50:	e1530005 	cmp	r3, r5
			*rve++ = '0';
 8004c54:	e58d3080 	str	r3, [sp, #128]	; 0x80
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 8004c58:	1afffffb 	bne	8004c4c <_svfprintf_r+0x17ec>
			*rve++ = '0';
	}
	*length = rve - digits;
 8004c5c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
			flags |= FPT;

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 8004c60:	e3590047 	cmp	r9, #71	; 0x47
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
 8004c64:	e06c5005 	rsb	r5, ip, r5
 8004c68:	e58d5040 	str	r5, [sp, #64]	; 0x40
			flags |= FPT;

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 8004c6c:	0a00009e 	beq	8004eec <_svfprintf_r+0x1a8c>
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 8004c70:	e3570065 	cmp	r7, #101	; 0x65
 8004c74:	da000130 	ble	800513c <_svfprintf_r+0x1cdc>
					++size;
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 8004c78:	e3570066 	cmp	r7, #102	; 0x66
					if (expt > 0) {
 8004c7c:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
					++size;
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 8004c80:	0a0000d3 	beq	8004fd4 <_svfprintf_r+0x1b74>
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 8004c84:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004c88:	e153000c 	cmp	r3, ip
 8004c8c:	ba0000c6 	blt	8004fac <_svfprintf_r+0x1b4c>
					size = expt;
					if (flags & ALT)
 8004c90:	e59dc018 	ldr	ip, [sp, #24]
 8004c94:	e31c0001 	tst	ip, #1
						++size;
 8004c98:	1283c001 	addne	ip, r3, #1
 8004c9c:	01c3cfc3 	biceq	ip, r3, r3, asr #31
 8004ca0:	158dc034 	strne	ip, [sp, #52]	; 0x34
 8004ca4:	11cccfcc 	bicne	ip, ip, ip, asr #31
 8004ca8:	058dc024 	streq	ip, [sp, #36]	; 0x24
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
 8004cac:	058d3034 	streq	r3, [sp, #52]	; 0x34
 8004cb0:	158dc024 	strne	ip, [sp, #36]	; 0x24
						++size;
 8004cb4:	e3a07067 	mov	r7, #103	; 0x67
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 8004cb8:	e58d3050 	str	r3, [sp, #80]	; 0x50
			}

			if (softsign)
 8004cbc:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
 8004cc0:	e35c0000 	cmp	ip, #0
 8004cc4:	0a000081 	beq	8004ed0 <_svfprintf_r+0x1a70>
				sign = '-';
 8004cc8:	e3a0302d 	mov	r3, #45	; 0x2d
				prec = DEFPREC;
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
				prec = 1;
			}

			flags |= FPT;
 8004ccc:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
# endif
					lead = expt;
			}

			if (softsign)
				sign = '-';
 8004cd0:	e5cd3073 	strb	r3, [sp, #115]	; 0x73
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8004cd4:	e3a03000 	mov	r3, #0
				prec = DEFPREC;
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
				prec = 1;
			}

			flags |= FPT;
 8004cd8:	e58dc018 	str	ip, [sp, #24]
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8004cdc:	e58d303c 	str	r3, [sp, #60]	; 0x3c
 8004ce0:	eafffad1 	b	800382c <_svfprintf_r+0x3cc>
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
 8004ce4:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004ce8:	e3a01040 	mov	r1, #64	; 0x40
 8004cec:	eb000832 	bl	8006dbc <_malloc_r>
		if (!fp->_p)
 8004cf0:	e3500000 	cmp	r0, #0
		{
			data->_errno = ENOMEM;
			return EOF;
		}
		fp->_bf._size = 64;
 8004cf4:	13a03040 	movne	r3, #64	; 0x40
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
 8004cf8:	e5890000 	str	r0, [r9]
 8004cfc:	e5890010 	str	r0, [r9, #16]
		if (!fp->_p)
		{
			data->_errno = ENOMEM;
			return EOF;
		}
		fp->_bf._size = 64;
 8004d00:	15893014 	strne	r3, [r9, #20]
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
		if (!fp->_p)
 8004d04:	1afff9ea 	bne	80034b4 <_svfprintf_r+0x54>
		{
			data->_errno = ENOMEM;
 8004d08:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
 8004d0c:	e3a0300c 	mov	r3, #12
 8004d10:	e58c3000 	str	r3, [ip]
			return EOF;
 8004d14:	e3e0c000 	mvn	ip, #0
 8004d18:	e58dc028 	str	ip, [sp, #40]	; 0x28
 8004d1c:	eafffa98 	b	8003784 <_svfprintf_r+0x324>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 8004d20:	e3590045 	cmp	r9, #69	; 0x45
 8004d24:	1a00009e 	bne	8004fa4 <_svfprintf_r+0x1b44>
			ndigits++;
 8004d28:	e2845001 	add	r5, r4, #1
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 8004d2c:	e3a00002 	mov	r0, #2
				prec = 1;
			}

			flags |= FPT;

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 8004d30:	e28d1078 	add	r1, sp, #120	; 0x78
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 8004d34:	e88d0021 	stm	sp, {r0, r5}
 8004d38:	e58d1008 	str	r1, [sp, #8]
 8004d3c:	e28d007c 	add	r0, sp, #124	; 0x7c
 8004d40:	e28d1080 	add	r1, sp, #128	; 0x80
 8004d44:	e58d000c 	str	r0, [sp, #12]
 8004d48:	e1a02008 	mov	r2, r8
 8004d4c:	e1a03006 	mov	r3, r6
 8004d50:	e58d1010 	str	r1, [sp, #16]
 8004d54:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004d58:	eb000172 	bl	8005328 <_dtoa_r>
 8004d5c:	e58d0048 	str	r0, [sp, #72]	; 0x48

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
		bp = digits + ndigits;
 8004d60:	e0805005 	add	r5, r0, r5
 8004d64:	eaffffac 	b	8004c1c <_svfprintf_r+0x17bc>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
						PAD (ndig - 1, zeroes);
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 8004d68:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004d6c:	e59d101c 	ldr	r1, [sp, #28]
 8004d70:	e28d2094 	add	r2, sp, #148	; 0x94
 8004d74:	eb000e70 	bl	800873c <__ssprint_r>
 8004d78:	e3500000 	cmp	r0, #0
 8004d7c:	1afffa7a 	bne	800376c <_svfprintf_r+0x30c>
 8004d80:	e59d7078 	ldr	r7, [sp, #120]	; 0x78
 8004d84:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004d88:	e1a0a00b 	mov	sl, fp
 8004d8c:	eaffff2c 	b	8004a44 <_svfprintf_r+0x15e4>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
						PAD (-expt, zeroes);
 8004d90:	e2844001 	add	r4, r4, #1
 8004d94:	e3540007 	cmp	r4, #7
 8004d98:	e0855007 	add	r5, r5, r7
 8004d9c:	e88a00c0 	stm	sl, {r6, r7}
 8004da0:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004da4:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004da8:	d28aa008 	addle	sl, sl, #8
 8004dac:	da000008 	ble	8004dd4 <_svfprintf_r+0x1974>
 8004db0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004db4:	e59d101c 	ldr	r1, [sp, #28]
 8004db8:	e28d2094 	add	r2, sp, #148	; 0x94
 8004dbc:	eb000e5e 	bl	800873c <__ssprint_r>
 8004dc0:	e3500000 	cmp	r0, #0
 8004dc4:	1afffa68 	bne	800376c <_svfprintf_r+0x30c>
 8004dc8:	e28d4098 	add	r4, sp, #152	; 0x98
 8004dcc:	e8940030 	ldm	r4, {r4, r5}
 8004dd0:	e1a0a00b 	mov	sl, fp
						PRINT (cp, ndig);
 8004dd4:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004dd8:	e085500c 	add	r5, r5, ip
 8004ddc:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
 8004de0:	e2844001 	add	r4, r4, #1
 8004de4:	e58ac000 	str	ip, [sl]
 8004de8:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004dec:	e3540007 	cmp	r4, #7
 8004df0:	e58ac004 	str	ip, [sl, #4]
 8004df4:	e58d509c 	str	r5, [sp, #156]	; 0x9c
 8004df8:	e58d4098 	str	r4, [sp, #152]	; 0x98
 8004dfc:	dafffc92 	ble	800404c <_svfprintf_r+0xbec>
 8004e00:	eafffd9b 	b	8004474 <_svfprintf_r+0x1014>
						PAD (ndig - 1, zeroes);
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 8004e04:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004e08:	e59d101c 	ldr	r1, [sp, #28]
 8004e0c:	e28d2094 	add	r2, sp, #148	; 0x94
 8004e10:	eb000e49 	bl	800873c <__ssprint_r>
 8004e14:	e3500000 	cmp	r0, #0
 8004e18:	1afffa53 	bne	800376c <_svfprintf_r+0x30c>
 8004e1c:	e28d4098 	add	r4, sp, #152	; 0x98
 8004e20:	e59d7078 	ldr	r7, [sp, #120]	; 0x78
 8004e24:	e8940030 	ldm	r4, {r4, r5}
 8004e28:	e1a0a00b 	mov	sl, fp
 8004e2c:	eaffff19 	b	8004a98 <_svfprintf_r+0x1638>
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8004e30:	e58d603c 	str	r6, [sp, #60]	; 0x3c
					if (size > prec)
						size = prec;
				} else
					size = prec;
			} else
				size = strlen (cp);
 8004e34:	eb000e28 	bl	80086dc <strlen>
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8004e38:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
 8004e3c:	e1c0cfc0 	bic	ip, r0, r0, asr #31
					if (size > prec)
						size = prec;
				} else
					size = prec;
			} else
				size = strlen (cp);
 8004e40:	e58d0034 	str	r0, [sp, #52]	; 0x34
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8004e44:	e58d5030 	str	r5, [sp, #48]	; 0x30
 8004e48:	e58dc024 	str	ip, [sp, #36]	; 0x24
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8004e4c:	e58d6050 	str	r6, [sp, #80]	; 0x50
 8004e50:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8004e54:	eafffa72 	b	8003824 <_svfprintf_r+0x3c4>
						PAD (-expt, zeroes);
						PRINT (cp, ndig);
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 8004e58:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004e5c:	e59d101c 	ldr	r1, [sp, #28]
 8004e60:	e28d2094 	add	r2, sp, #148	; 0x94
 8004e64:	eb000e34 	bl	800873c <__ssprint_r>
 8004e68:	e3500000 	cmp	r0, #0
 8004e6c:	1afffa3e 	bne	800376c <_svfprintf_r+0x30c>
 8004e70:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004e74:	e1a0a00b 	mov	sl, fp
 8004e78:	eafffdae 	b	8004538 <_svfprintf_r+0x10d8>
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
					PRINTANDPAD (cp, convbuf + ndig,
 8004e7c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
 8004e80:	e59d101c 	ldr	r1, [sp, #28]
 8004e84:	e28d2094 	add	r2, sp, #148	; 0x94
 8004e88:	eb000e2b 	bl	800873c <__ssprint_r>
 8004e8c:	e3500000 	cmp	r0, #0
 8004e90:	1afffa35 	bne	800376c <_svfprintf_r+0x30c>
 8004e94:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
 8004e98:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8004e9c:	e59d509c 	ldr	r5, [sp, #156]	; 0x9c
 8004ea0:	e063300c 	rsb	r3, r3, ip
 8004ea4:	e1a0a00b 	mov	sl, fp
 8004ea8:	eafffe5b 	b	800481c <_svfprintf_r+0x13bc>
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
				cp = "(null)";
				size = ((unsigned) prec > 6U) ? 6 : prec;
 8004eac:	e3540006 	cmp	r4, #6
 8004eb0:	23a04006 	movcs	r4, #6
 8004eb4:	e1c4cfc4 	bic	ip, r4, r4, asr #31
 8004eb8:	e58dc024 	str	ip, [sp, #36]	; 0x24
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
				cp = "(null)";
 8004ebc:	e51fc654 	ldr	ip, [pc, #-1620]	; 8004870 <_svfprintf_r+0x1410>
				size = ((unsigned) prec > 6U) ? 6 : prec;
 8004ec0:	e58d4034 	str	r4, [sp, #52]	; 0x34
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8004ec4:	e58d5030 	str	r5, [sp, #48]	; 0x30
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
				cp = "(null)";
 8004ec8:	e58dc048 	str	ip, [sp, #72]	; 0x48
 8004ecc:	eafffaaa 	b	800397c <_svfprintf_r+0x51c>
				prec = DEFPREC;
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
				prec = 1;
			}

			flags |= FPT;
 8004ed0:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
 8004ed4:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8004ed8:	e58dc018 	str	ip, [sp, #24]
 8004edc:	eafffa50 	b	8003824 <_svfprintf_r+0x3c4>
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
			*rve++ = '0';
	}
	*length = rve - digits;
 8004ee0:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
 8004ee4:	e0603003 	rsb	r3, r0, r3
 8004ee8:	e58d3040 	str	r3, [sp, #64]	; 0x40

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
				if (expt <= -4 || expt > prec)
 8004eec:	e59d1078 	ldr	r1, [sp, #120]	; 0x78
 8004ef0:	e3710003 	cmn	r1, #3
 8004ef4:	e1a03001 	mov	r3, r1
 8004ef8:	ba000001 	blt	8004f04 <_svfprintf_r+0x1aa4>
 8004efc:	e1540001 	cmp	r4, r1
 8004f00:	aaffff5f 	bge	8004c84 <_svfprintf_r+0x1824>
					ch -= 2; /* 'e' or 'E' */
 8004f04:	e2477002 	sub	r7, r7, #2
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
 8004f08:	e2411001 	sub	r1, r1, #1
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
	if (exp < 0) {
 8004f0c:	e3510000 	cmp	r1, #0
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
 8004f10:	e58d1078 	str	r1, [sp, #120]	; 0x78
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
	if (exp < 0) {
		exp = -exp;
 8004f14:	b2611000 	rsblt	r1, r1, #0
		*p++ = '-';
 8004f18:	b3a0302d 	movlt	r3, #45	; 0x2d
	}
	else
		*p++ = '+';
 8004f1c:	a3a0302b 	movge	r3, #43	; 0x2b
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
 8004f20:	e3510009 	cmp	r1, #9
# else
#  define isa 0
# endif

	p = p0;
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 8004f24:	e5cd7084 	strb	r7, [sp, #132]	; 0x84
	if (exp < 0) {
		exp = -exp;
		*p++ = '-';
	}
	else
		*p++ = '+';
 8004f28:	e5cd3085 	strb	r3, [sp, #133]	; 0x85
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
 8004f2c:	ca000033 	bgt	8005000 <_svfprintf_r+0x1ba0>
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
	}
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
 8004f30:	e2811030 	add	r1, r1, #48	; 0x30
		*--t = to_char (exp);
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
	}
	else {
		if (!isa)
			*p++ = '0';
 8004f34:	e3a03030 	mov	r3, #48	; 0x30
		*p++ = to_char (exp);
 8004f38:	e5cd1087 	strb	r1, [sp, #135]	; 0x87
		*--t = to_char (exp);
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
	}
	else {
		if (!isa)
			*p++ = '0';
 8004f3c:	e5cd3086 	strb	r3, [sp, #134]	; 0x86
		*p++ = to_char (exp);
 8004f40:	e28d3088 	add	r3, sp, #136	; 0x88
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
				size = expsize + ndig;
				if (ndig > 1 || flags & ALT)
 8004f44:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
 8004f48:	e28d2084 	add	r2, sp, #132	; 0x84
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
 8004f4c:	e0622003 	rsb	r2, r2, r3
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
				size = expsize + ndig;
 8004f50:	e08c3002 	add	r3, ip, r2
				if (ndig > 1 || flags & ALT)
 8004f54:	e35c0001 	cmp	ip, #1
	else {
		if (!isa)
			*p++ = '0';
		*p++ = to_char (exp);
	}
	return (p - p0);
 8004f58:	e58d2064 	str	r2, [sp, #100]	; 0x64
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
				size = expsize + ndig;
 8004f5c:	e58d3034 	str	r3, [sp, #52]	; 0x34
				if (ndig > 1 || flags & ALT)
 8004f60:	da000066 	ble	8005100 <_svfprintf_r+0x1ca0>
					++size;
 8004f64:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 8004f68:	e2833001 	add	r3, r3, #1
 8004f6c:	e1c3cfc3 	bic	ip, r3, r3, asr #31
 8004f70:	e58dc024 	str	ip, [sp, #36]	; 0x24
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8004f74:	e3a0c000 	mov	ip, #0
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
				size = expsize + ndig;
				if (ndig > 1 || flags & ALT)
					++size;
 8004f78:	e58d3034 	str	r3, [sp, #52]	; 0x34
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8004f7c:	e58dc050 	str	ip, [sp, #80]	; 0x50
 8004f80:	eaffff4d 	b	8004cbc <_svfprintf_r+0x185c>
 8004f84:	e1c4cfc4 	bic	ip, r4, r4, asr #31
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8004f88:	e58d003c 	str	r0, [sp, #60]	; 0x3c
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8004f8c:	e58d5030 	str	r5, [sp, #48]	; 0x30
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8004f90:	e58d0050 	str	r0, [sp, #80]	; 0x50
 8004f94:	e58dc024 	str	ip, [sp, #36]	; 0x24
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);

				if (p != NULL) {
 8004f98:	e58d4034 	str	r4, [sp, #52]	; 0x34
 8004f9c:	e5dd3073 	ldrb	r3, [sp, #115]	; 0x73
 8004fa0:	eafffa1f 	b	8003824 <_svfprintf_r+0x3c4>
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
			ndigits++;
		}
		mode = 2;		/* ndigits significant digits */
 8004fa4:	e3a01002 	mov	r1, #2
 8004fa8:	eaffff00 	b	8004bb0 <_svfprintf_r+0x1750>
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
						1 : 2 - expt);
 8004fac:	e3530000 	cmp	r3, #0
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 8004fb0:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
						1 : 2 - expt);
 8004fb4:	d2632002 	rsble	r2, r3, #2
 8004fb8:	c3a02001 	movgt	r2, #1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 8004fbc:	e082200c 	add	r2, r2, ip
 8004fc0:	e1c2cfc2 	bic	ip, r2, r2, asr #31
 8004fc4:	e58d2034 	str	r2, [sp, #52]	; 0x34
 8004fc8:	e58dc024 	str	ip, [sp, #36]	; 0x24
 8004fcc:	e3a07067 	mov	r7, #103	; 0x67
 8004fd0:	eaffff38 	b	8004cb8 <_svfprintf_r+0x1858>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
					if (expt > 0) {
 8004fd4:	e3530000 	cmp	r3, #0
 8004fd8:	da000037 	ble	80050bc <_svfprintf_r+0x1c5c>
						size = expt;
						if (prec || flags & ALT)
 8004fdc:	e3540000 	cmp	r4, #0
 8004fe0:	1a00002f 	bne	80050a4 <_svfprintf_r+0x1c44>
 8004fe4:	e59dc018 	ldr	ip, [sp, #24]
 8004fe8:	e31c0001 	tst	ip, #1
 8004fec:	1a00002c 	bne	80050a4 <_svfprintf_r+0x1c44>
 8004ff0:	e1c3cfc3 	bic	ip, r3, r3, asr #31
 8004ff4:	e58dc024 	str	ip, [sp, #36]	; 0x24
 8004ff8:	e58d3034 	str	r3, [sp, #52]	; 0x34
 8004ffc:	eaffff2d 	b	8004cb8 <_svfprintf_r+0x1858>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8005000:	e28d3092 	add	r3, sp, #146	; 0x92
	else
		*p++ = '+';
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
 8005004:	e51f2798 	ldr	r2, [pc, #-1944]	; 8004874 <_svfprintf_r+0x1414>
 8005008:	e0c0c192 	smull	ip, r0, r2, r1
 800500c:	e1a02fc1 	asr	r2, r1, #31
 8005010:	e0622140 	rsb	r2, r2, r0, asr #2
 8005014:	e0820102 	add	r0, r2, r2, lsl #2
 8005018:	e0410080 	sub	r0, r1, r0, lsl #1
		} while ((exp /= 10) > 9);
 800501c:	e1a01002 	mov	r1, r2
 8005020:	e3510009 	cmp	r1, #9
	else
		*p++ = '+';
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
 8005024:	e1a02003 	mov	r2, r3
 8005028:	e2803030 	add	r3, r0, #48	; 0x30
 800502c:	e5c23000 	strb	r3, [r2]
 8005030:	e2423001 	sub	r3, r2, #1
		} while ((exp /= 10) > 9);
 8005034:	cafffff2 	bgt	8005004 <_svfprintf_r+0x1ba4>
		*--t = to_char (exp);
 8005038:	e2811030 	add	r1, r1, #48	; 0x30
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 800503c:	e28dc093 	add	ip, sp, #147	; 0x93
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
		} while ((exp /= 10) > 9);
		*--t = to_char (exp);
 8005040:	e20110ff 	and	r1, r1, #255	; 0xff
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 8005044:	e15c0003 	cmp	ip, r3
	t = expbuf + MAXEXPLEN;
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
		} while ((exp /= 10) > 9);
		*--t = to_char (exp);
 8005048:	e5421001 	strb	r1, [r2, #-1]
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 800504c:	9a000038 	bls	8005134 <_svfprintf_r+0x1cd4>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8005050:	e28d0085 	add	r0, sp, #133	; 0x85
 8005054:	e1a03002 	mov	r3, r2
 8005058:	ea000000 	b	8005060 <_svfprintf_r+0x1c00>
 800505c:	e4d31001 	ldrb	r1, [r3], #1
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
		} while ((exp /= 10) > 9);
		*--t = to_char (exp);
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 8005060:	e153000c 	cmp	r3, ip
 8005064:	e5e01001 	strb	r1, [r0, #1]!
 8005068:	1afffffb 	bne	800505c <_svfprintf_r+0x1bfc>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 800506c:	e28d0f42 	add	r0, sp, #264	; 0x108
 8005070:	e0623080 	rsb	r3, r2, r0, lsl #1
 8005074:	e24330f6 	sub	r3, r3, #246	; 0xf6
 8005078:	eaffffb1 	b	8004f44 <_svfprintf_r+0x1ae4>
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
		bp = digits + ndigits;
		if (ch == 'f' || ch == 'F') {
			if (*digits == '0' && value)
 800507c:	e3a03000 	mov	r3, #0
 8005080:	e1a00008 	mov	r0, r8
 8005084:	e1a01006 	mov	r1, r6
 8005088:	e3a02000 	mov	r2, #0
 800508c:	eb001668 	bl	800aa34 <__aeabi_dcmpeq>
 8005090:	e3500000 	cmp	r0, #0
				*decpt = -ndigits + 1;
 8005094:	02643001 	rsbeq	r3, r4, #1
 8005098:	058d3078 	streq	r3, [sp, #120]	; 0x78
	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
		bp = digits + ndigits;
		if (ch == 'f' || ch == 'F') {
			if (*digits == '0' && value)
 800509c:	0afffedd 	beq	8004c18 <_svfprintf_r+0x17b8>
 80050a0:	eafffedb 	b	8004c14 <_svfprintf_r+0x17b4>
			} else {
				if (ch == 'f') {		/* f fmt */
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
 80050a4:	e2844001 	add	r4, r4, #1
 80050a8:	e0834004 	add	r4, r3, r4
 80050ac:	e1c4cfc4 	bic	ip, r4, r4, asr #31
 80050b0:	e58d4034 	str	r4, [sp, #52]	; 0x34
 80050b4:	e58dc024 	str	ip, [sp, #36]	; 0x24
 80050b8:	eafffefe 	b	8004cb8 <_svfprintf_r+0x1858>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 80050bc:	e3540000 	cmp	r4, #0
 80050c0:	1a000016 	bne	8005120 <_svfprintf_r+0x1cc0>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 80050c4:	e59dc018 	ldr	ip, [sp, #24]
 80050c8:	e31c0001 	tst	ip, #1
 80050cc:	1a000013 	bne	8005120 <_svfprintf_r+0x1cc0>
 80050d0:	e3a0c001 	mov	ip, #1
 80050d4:	e58dc024 	str	ip, [sp, #36]	; 0x24
							  ? prec + 2
							  : 1;
 80050d8:	e58dc034 	str	ip, [sp, #52]	; 0x34
 80050dc:	eafffef5 	b	8004cb8 <_svfprintf_r+0x1858>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 80050e0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 80050e4:	e59c4000 	ldr	r4, [ip]
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 80050e8:	e3540000 	cmp	r4, #0
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 80050ec:	e28c3004 	add	r3, ip, #4
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 80050f0:	aafffb6e 	bge	8003eb0 <_svfprintf_r+0xa50>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 80050f4:	e58d3030 	str	r3, [sp, #48]	; 0x30
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
					prec = -1;
 80050f8:	e3e04000 	mvn	r4, #0
 80050fc:	eafff922 	b	800358c <_svfprintf_r+0x12c>
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
				--expt;
				expsize = exponent (expstr, expt, ch);
				size = expsize + ndig;
				if (ndig > 1 || flags & ALT)
 8005100:	e59dc018 	ldr	ip, [sp, #24]
 8005104:	e21c3001 	ands	r3, ip, #1
 8005108:	1affff95 	bne	8004f64 <_svfprintf_r+0x1b04>
 800510c:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
 8005110:	e1cccfcc 	bic	ip, ip, ip, asr #31
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
#ifdef FLOATING_POINT
		lead = 0;
 8005114:	e58d3050 	str	r3, [sp, #80]	; 0x50
 8005118:	e58dc024 	str	ip, [sp, #36]	; 0x24
 800511c:	eafffee6 	b	8004cbc <_svfprintf_r+0x185c>
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 8005120:	e2844002 	add	r4, r4, #2
 8005124:	e1c4cfc4 	bic	ip, r4, r4, asr #31
 8005128:	e58d4034 	str	r4, [sp, #52]	; 0x34
 800512c:	e58dc024 	str	ip, [sp, #36]	; 0x24
 8005130:	eafffee0 	b	8004cb8 <_svfprintf_r+0x1858>
	if (exp > 9) {
		do {
			*--t = to_char (exp % 10);
		} while ((exp /= 10) > 9);
		*--t = to_char (exp);
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 8005134:	e28d3086 	add	r3, sp, #134	; 0x86
 8005138:	eaffff81 	b	8004f44 <_svfprintf_r+0x1ae4>
 800513c:	e59d1078 	ldr	r1, [sp, #120]	; 0x78
 8005140:	eaffff70 	b	8004f08 <_svfprintf_r+0x1aa8>
 8005144:	00000000 	andeq	r0, r0, r0

08005148 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 8005148:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 800514c:	e5903010 	ldr	r3, [r0, #16]
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 8005150:	e5916010 	ldr	r6, [r1, #16]
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 8005154:	e1560003 	cmp	r6, r3

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 8005158:	e1a0a000 	mov	sl, r0
 800515c:	e1a05001 	mov	r5, r1
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
    return 0;
 8005160:	c3a00000 	movgt	r0, #0
  n = S->_wds;
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 8005164:	ca00006d 	bgt	8005320 <quorem+0x1d8>
    return 0;
  sx = S->_x;
  sxe = sx + --n;
 8005168:	e2863003 	add	r3, r6, #3
 800516c:	e1a03103 	lsl	r3, r3, #2
 8005170:	e0819003 	add	r9, r1, r3
  bx = b->_x;
  bxe = bx + n;
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 8005174:	e5991004 	ldr	r1, [r9, #4]
 8005178:	e08a3003 	add	r3, sl, r3
 800517c:	e5930004 	ldr	r0, [r3, #4]
 8005180:	e2811001 	add	r1, r1, #1
 8005184:	eb001381 	bl	8009f90 <__aeabi_uidiv>
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 8005188:	e2507000 	subs	r7, r0, #0
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
    return 0;
  sx = S->_x;
  sxe = sx + --n;
 800518c:	e2466001 	sub	r6, r6, #1
 8005190:	e2899004 	add	r9, r9, #4
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
    return 0;
  sx = S->_x;
 8005194:	e2854014 	add	r4, r5, #20
  sxe = sx + --n;
  bx = b->_x;
 8005198:	e28a8014 	add	r8, sl, #20
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 800519c:	0a000030 	beq	8005264 <quorem+0x11c>
 80051a0:	e3a00000 	mov	r0, #0
 80051a4:	e1a0c000 	mov	ip, r0
 80051a8:	e1a02008 	mov	r2, r8
 80051ac:	e1a03004 	mov	r3, r4
      borrow = 0;
      carry = 0;
      do
	{
#ifdef Pack_32
	  si = *sx++;
 80051b0:	e493e004 	ldr	lr, [r3], #4
	  ys = (si & 0xffff) * q + carry;
 80051b4:	e1a0b80e 	lsl	fp, lr, #16
 80051b8:	e1a0b82b 	lsr	fp, fp, #16
	  zs = (si >> 16) * q + (ys >> 16);
 80051bc:	e1a0e82e 	lsr	lr, lr, #16
      carry = 0;
      do
	{
#ifdef Pack_32
	  si = *sx++;
	  ys = (si & 0xffff) * q + carry;
 80051c0:	e02b0b97 	mla	fp, r7, fp, r0
	  zs = (si >> 16) * q + (ys >> 16);
 80051c4:	e0000e97 	mul	r0, r7, lr
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 80051c8:	e592e000 	ldr	lr, [r2]
      do
	{
#ifdef Pack_32
	  si = *sx++;
	  ys = (si & 0xffff) * q + carry;
	  zs = (si >> 16) * q + (ys >> 16);
 80051cc:	e080082b 	add	r0, r0, fp, lsr #16
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 80051d0:	e1a0180e 	lsl	r1, lr, #16
 80051d4:	e1a0b80b 	lsl	fp, fp, #16
 80051d8:	e08c1821 	add	r1, ip, r1, lsr #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 80051dc:	e1a0c800 	lsl	ip, r0, #16
#ifdef Pack_32
	  si = *sx++;
	  ys = (si & 0xffff) * q + carry;
	  zs = (si >> 16) * q + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 80051e0:	e041182b 	sub	r1, r1, fp, lsr #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 80051e4:	e1a0c82c 	lsr	ip, ip, #16
 80051e8:	e06cc82e 	rsb	ip, ip, lr, lsr #16
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 80051ec:	e1a0b801 	lsl	fp, r1, #16
	  zs = (si >> 16) * q + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 80051f0:	e08cc841 	add	ip, ip, r1, asr #16
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 80051f4:	e1a0182b 	lsr	r1, fp, #16
 80051f8:	e181180c 	orr	r1, r1, ip, lsl #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 80051fc:	e1590003 	cmp	r9, r3
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 8005200:	e4821004 	str	r1, [r2], #4
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
 8005204:	e1a0c84c 	asr	ip, ip, #16
	{
#ifdef Pack_32
	  si = *sx++;
	  ys = (si & 0xffff) * q + carry;
	  zs = (si >> 16) * q + (ys >> 16);
	  carry = zs >> 16;
 8005208:	e1a00820 	lsr	r0, r0, #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 800520c:	2affffe7 	bcs	80051b0 <quorem+0x68>
      if (!*bxe)
 8005210:	e2863004 	add	r3, r6, #4
 8005214:	e08a3103 	add	r3, sl, r3, lsl #2
 8005218:	e5932004 	ldr	r2, [r3, #4]
 800521c:	e3520000 	cmp	r2, #0
 8005220:	1a00000f 	bne	8005264 <quorem+0x11c>
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 8005224:	e1580003 	cmp	r8, r3
  if (b->_wds < n)
    return 0;
  sx = S->_x;
  sxe = sx + --n;
  bx = b->_x;
  bxe = bx + n;
 8005228:	e2832004 	add	r2, r3, #4
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 800522c:	2a00000b 	bcs	8005260 <quorem+0x118>
 8005230:	e5122004 	ldr	r2, [r2, #-4]
 8005234:	e3520000 	cmp	r2, #0
 8005238:	1a000008 	bne	8005260 <quorem+0x118>
#include <reent.h>
#include <string.h>
#include "mprec.h"

static int
_DEFUN (quorem,
 800523c:	e2433004 	sub	r3, r3, #4
 8005240:	ea000003 	b	8005254 <quorem+0x10c>
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 8005244:	e5932000 	ldr	r2, [r3]
 8005248:	e3520000 	cmp	r2, #0
 800524c:	e2433004 	sub	r3, r3, #4
 8005250:	1a000002 	bne	8005260 <quorem+0x118>
 8005254:	e1580003 	cmp	r8, r3
	    --n;
 8005258:	e2466001 	sub	r6, r6, #1
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 800525c:	3afffff8 	bcc	8005244 <quorem+0xfc>
	    --n;
	  b->_wds = n;
 8005260:	e58a6010 	str	r6, [sl, #16]
	}
    }
  if (cmp (b, S) >= 0)
 8005264:	e1a01005 	mov	r1, r5
 8005268:	e1a0000a 	mov	r0, sl
 800526c:	eb000af4 	bl	8007e44 <__mcmp>
 8005270:	e3500000 	cmp	r0, #0
 8005274:	ba000028 	blt	800531c <quorem+0x1d4>
    {
      q++;
 8005278:	e2877001 	add	r7, r7, #1
 800527c:	e1a03008 	mov	r3, r8
      borrow = 0;
 8005280:	e3a02000 	mov	r2, #0
      bx = b->_x;
      sx = S->_x;
      do
	{
#ifdef Pack_32
	  si = *sx++;
 8005284:	e4945004 	ldr	r5, [r4], #4
	  ys = (si & 0xffff) + carry;
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 8005288:	e593c000 	ldr	ip, [r3]
 800528c:	e1a01805 	lsl	r1, r5, #16
 8005290:	e1a0080c 	lsl	r0, ip, #16
 8005294:	e1a01821 	lsr	r1, r1, #16
 8005298:	e0611820 	rsb	r1, r1, r0, lsr #16
 800529c:	e0811002 	add	r1, r1, r2
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 80052a0:	e1a05825 	lsr	r5, r5, #16
 80052a4:	e065282c 	rsb	r2, r5, ip, lsr #16
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 80052a8:	e1a00801 	lsl	r0, r1, #16
	  zs = (si >> 16) + (ys >> 16);
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 80052ac:	e0822841 	add	r2, r2, r1, asr #16
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 80052b0:	e1a01820 	lsr	r1, r0, #16
 80052b4:	e1811802 	orr	r1, r1, r2, lsl #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 80052b8:	e1590004 	cmp	r9, r4
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 80052bc:	e4831004 	str	r1, [r3], #4
	  carry = zs >> 16;
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
	  borrow = z >> 16;
 80052c0:	e1a02842 	asr	r2, r2, #16
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 80052c4:	2affffee 	bcs	8005284 <quorem+0x13c>
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
 80052c8:	e2863004 	add	r3, r6, #4
 80052cc:	e08a3103 	add	r3, sl, r3, lsl #2
 80052d0:	e5932004 	ldr	r2, [r3, #4]
 80052d4:	e3520000 	cmp	r2, #0
 80052d8:	1a00000f 	bne	800531c <quorem+0x1d4>
	{
	  while (--bxe > bx && !*bxe)
 80052dc:	e1580003 	cmp	r8, r3
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
 80052e0:	e2832004 	add	r2, r3, #4
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 80052e4:	2a00000b 	bcs	8005318 <quorem+0x1d0>
 80052e8:	e5122004 	ldr	r2, [r2, #-4]
 80052ec:	e3520000 	cmp	r2, #0
 80052f0:	1a000008 	bne	8005318 <quorem+0x1d0>
#include <reent.h>
#include <string.h>
#include "mprec.h"

static int
_DEFUN (quorem,
 80052f4:	e2433004 	sub	r3, r3, #4
 80052f8:	ea000003 	b	800530c <quorem+0x1c4>
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 80052fc:	e5932000 	ldr	r2, [r3]
 8005300:	e3520000 	cmp	r2, #0
 8005304:	e2433004 	sub	r3, r3, #4
 8005308:	1a000002 	bne	8005318 <quorem+0x1d0>
 800530c:	e1580003 	cmp	r8, r3
	    --n;
 8005310:	e2466001 	sub	r6, r6, #1
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 8005314:	3afffff8 	bcc	80052fc <quorem+0x1b4>
	    --n;
	  b->_wds = n;
 8005318:	e58a6010 	str	r6, [sl, #16]
	}
    }
  return q;
 800531c:	e1a00007 	mov	r0, r7
}
 8005320:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	e12fff1e 	bx	lr

08005328 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 8005328:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 800532c:	e5901040 	ldr	r1, [r0, #64]	; 0x40
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 8005330:	e24dd07c 	sub	sp, sp, #124	; 0x7c
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 8005334:	e3510000 	cmp	r1, #0
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 8005338:	e1a06000 	mov	r6, r0
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
  double ds;
  char *s, *s0;

  d.d = _d;
 800533c:	e1a0a002 	mov	sl, r2
 8005340:	e1a0b003 	mov	fp, r3
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 8005344:	e59d40ac 	ldr	r4, [sp, #172]	; 0xac
  char *s, *s0;

  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 8005348:	0a000007 	beq	800536c <_dtoa_r+0x44>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 800534c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 8005350:	e3a02001 	mov	r2, #1
 8005354:	e1a02312 	lsl	r2, r2, r3
  d.d = _d;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 8005358:	e5813004 	str	r3, [r1, #4]
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 800535c:	e5812008 	str	r2, [r1, #8]
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 8005360:	eb000906 	bl	8007780 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 8005364:	e3a03000 	mov	r3, #0
 8005368:	e5863040 	str	r3, [r6, #64]	; 0x40
    }

  if (word0 (d) & Sign_bit)
 800536c:	e35b0000 	cmp	fp, #0
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 8005370:	b3a03001 	movlt	r3, #1
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
 8005374:	a3a03000 	movge	r3, #0
    }

  if (word0 (d) & Sign_bit)
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 8005378:	b5843000 	strlt	r3, [r4]
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
    }
  else
    *sign = 0;
 800537c:	a5843000 	strge	r3, [r4]

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 8005380:	e59f3538 	ldr	r3, [pc, #1336]	; 80058c0 <_dtoa_r+0x598>
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
      Bfree (ptr, _REENT_MP_RESULT(ptr));
      _REENT_MP_RESULT(ptr) = 0;
    }

  if (word0 (d) & Sign_bit)
 8005384:	e1a0900b 	mov	r9, fp
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 8005388:	b3cb9102 	biclt	r9, fp, #-2147483648	; 0x80000000
  else
    *sign = 0;

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 800538c:	e1a02003 	mov	r2, r3
 8005390:	e0093003 	and	r3, r9, r3

  if (word0 (d) & Sign_bit)
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 8005394:	b1a0b009 	movlt	fp, r9
  else
    *sign = 0;

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 8005398:	e1530002 	cmp	r3, r2
 800539c:	0a000016 	beq	80053fc <_dtoa_r+0xd4>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 80053a0:	e1a0000a 	mov	r0, sl
 80053a4:	e1a0100b 	mov	r1, fp
 80053a8:	e3a02000 	mov	r2, #0
 80053ac:	e3a03000 	mov	r3, #0
 80053b0:	eb00159f 	bl	800aa34 <__aeabi_dcmpeq>
 80053b4:	e3500000 	cmp	r0, #0
 80053b8:	e1a0400a 	mov	r4, sl
 80053bc:	e1a0500b 	mov	r5, fp
 80053c0:	0a00001d 	beq	800543c <_dtoa_r+0x114>
    {
      *decpt = 1;
      s = "0";
      if (rve)
 80053c4:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
 80053c8:	e35c0000 	cmp	ip, #0
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
    {
      *decpt = 1;
 80053cc:	e59dc0a8 	ldr	ip, [sp, #168]	; 0xa8
 80053d0:	e3a03001 	mov	r3, #1
 80053d4:	e58c3000 	str	r3, [ip]
      s = "0";
      if (rve)
 80053d8:	0a000099 	beq	8005644 <_dtoa_r+0x31c>
	*rve = s + 1;
 80053dc:	e59fa4e0 	ldr	sl, [pc, #1248]	; 80058c4 <_dtoa_r+0x59c>
 80053e0:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
 80053e4:	e58ca000 	str	sl, [ip]
      return s;
 80053e8:	e24aa001 	sub	sl, sl, #1
  *s = 0;
  *decpt = k + 1;
  if (rve)
    *rve = s;
  return s0;
}
 80053ec:	e1a0000a 	mov	r0, sl
 80053f0:	e28dd07c 	add	sp, sp, #124	; 0x7c
 80053f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	e12fff1e 	bx	lr
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 80053fc:	e59f34c4 	ldr	r3, [pc, #1220]	; 80058c8 <_dtoa_r+0x5a0>
 8005400:	e59dc0a8 	ldr	ip, [sp, #168]	; 0xa8
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 8005404:	e35a0000 	cmp	sl, #0
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 8005408:	e58c3000 	str	r3, [ip]
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 800540c:	0a000079 	beq	80055f8 <_dtoa_r+0x2d0>
 8005410:	e59fa4b4 	ldr	sl, [pc, #1204]	; 80058cc <_dtoa_r+0x5a4>
#endif
	"NaN";
      if (rve)
 8005414:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
 8005418:	e35c0000 	cmp	ip, #0
 800541c:	0afffff2 	beq	80053ec <_dtoa_r+0xc4>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 8005420:	e5da3003 	ldrb	r3, [sl, #3]
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 8005424:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 8005428:	e3530000 	cmp	r3, #0
 800542c:	128a3008 	addne	r3, sl, #8
 8005430:	028a3003 	addeq	r3, sl, #3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 8005434:	e58c3000 	str	r3, [ip]
 8005438:	eaffffeb 	b	80053ec <_dtoa_r+0xc4>
      if (rve)
	*rve = s + 1;
      return s;
    }

  b = d2b (ptr, d.d, &be, &bbits);
 800543c:	e28d2074 	add	r2, sp, #116	; 0x74
 8005440:	e28d3070 	add	r3, sp, #112	; 0x70
 8005444:	e88d000c 	stm	sp, {r2, r3}
 8005448:	e1a00006 	mov	r0, r6
 800544c:	e1a0200a 	mov	r2, sl
 8005450:	e1a0300b 	mov	r3, fp
 8005454:	eb000b32 	bl	8008124 <__d2b>
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 8005458:	e1a07089 	lsl	r7, r9, #1
 800545c:	e1b07aa7 	lsrs	r7, r7, #21
      if (rve)
	*rve = s + 1;
      return s;
    }

  b = d2b (ptr, d.d, &be, &bbits);
 8005460:	e58d002c 	str	r0, [sp, #44]	; 0x2c
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 8005464:	1a00006b 	bne	8005618 <_dtoa_r+0x2f0>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 8005468:	e59d8070 	ldr	r8, [sp, #112]	; 0x70
 800546c:	e59d7074 	ldr	r7, [sp, #116]	; 0x74
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 8005470:	e3e03e41 	mvn	r3, #1040	; 0x410
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 8005474:	e0887007 	add	r7, r8, r7
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 8005478:	e1570003 	cmp	r7, r3
 800547c:	a2870e41 	addge	r0, r7, #1040	; 0x410
 8005480:	a2800002 	addge	r0, r0, #2
 8005484:	a1a0003a 	lsrge	r0, sl, r0
       : (word1 (d) << (32 - i));
 8005488:	b59f0440 	ldrlt	r0, [pc, #1088]	; 80058d0 <_dtoa_r+0x5a8>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 800548c:	a283301f 	addge	r3, r3, #31
 8005490:	a0673003 	rsbge	r3, r7, r3
       : (word1 (d) << (32 - i));
 8005494:	b0670000 	rsblt	r0, r7, r0

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 8005498:	a1800319 	orrge	r0, r0, r9, lsl r3
 800549c:	b1a0001a 	lsllt	r0, sl, r0
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 80054a0:	eb0013c9 	bl	800a3cc <__aeabi_ui2d>
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
      i -= (Bias + (P - 1) - 1) + 1;
      denorm = 1;
 80054a4:	e3a0c001 	mov	ip, #1
 80054a8:	e58dc054 	str	ip, [sp, #84]	; 0x54
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
      i -= (Bias + (P - 1) - 1) + 1;
 80054ac:	e2477001 	sub	r7, r7, #1
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 80054b0:	e241161f 	sub	r1, r1, #32505856	; 0x1f00000
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 80054b4:	e3a02000 	mov	r2, #0
 80054b8:	e59f3414 	ldr	r3, [pc, #1044]	; 80058d4 <_dtoa_r+0x5ac>
 80054bc:	eb0012fd 	bl	800a0b8 <__aeabi_dsub>
 80054c0:	e28f3e3e 	add	r3, pc, #992	; 0x3e0
 80054c4:	e893000c 	ldm	r3, {r2, r3}
 80054c8:	eb0013ff 	bl	800a4cc <__aeabi_dmul>
 80054cc:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
 80054d0:	e893000c 	ldm	r3, {r2, r3}
 80054d4:	eb0012f8 	bl	800a0bc <__adddf3>
 80054d8:	e1a04000 	mov	r4, r0
 80054dc:	e1a00007 	mov	r0, r7
 80054e0:	e1a05001 	mov	r5, r1
 80054e4:	eb0013c1 	bl	800a3f0 <__aeabi_i2d>
 80054e8:	e28f3ff2 	add	r3, pc, #968	; 0x3c8
 80054ec:	e893000c 	ldm	r3, {r2, r3}
 80054f0:	eb0013f5 	bl	800a4cc <__aeabi_dmul>
 80054f4:	e1a02000 	mov	r2, r0
 80054f8:	e1a03001 	mov	r3, r1
 80054fc:	e1a00004 	mov	r0, r4
 8005500:	e1a01005 	mov	r1, r5
 8005504:	eb0012ec 	bl	800a0bc <__adddf3>
 8005508:	e1a04000 	mov	r4, r0
 800550c:	e1a05001 	mov	r5, r1
#endif
  k = (int) ds;
 8005510:	eb001565 	bl	800aaac <__aeabi_d2iz>
  if (ds < 0. && ds != k)
 8005514:	e1a01005 	mov	r1, r5
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
#endif
  k = (int) ds;
 8005518:	e1a09000 	mov	r9, r0
  if (ds < 0. && ds != k)
 800551c:	e3a02000 	mov	r2, #0
 8005520:	e1a00004 	mov	r0, r4
 8005524:	e3a03000 	mov	r3, #0
 8005528:	eb001547 	bl	800aa4c <__aeabi_dcmplt>
 800552c:	e3500000 	cmp	r0, #0
 8005530:	1a00018c 	bne	8005b68 <_dtoa_r+0x840>
    k--;			/* want k = floor(ds) */
  k_check = 1;
  if (k >= 0 && k <= Ten_pmax)
 8005534:	e3590016 	cmp	r9, #22
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
#endif
  k = (int) ds;
  if (ds < 0. && ds != k)
    k--;			/* want k = floor(ds) */
  k_check = 1;
 8005538:	83a0c001 	movhi	ip, #1
 800553c:	858dc050 	strhi	ip, [sp, #80]	; 0x50
  if (k >= 0 && k <= Ten_pmax)
 8005540:	8a00000a 	bhi	8005570 <_dtoa_r+0x248>
    {
      if (d.d < tens[k])
 8005544:	e59f339c 	ldr	r3, [pc, #924]	; 80058e8 <_dtoa_r+0x5c0>
 8005548:	e0833189 	add	r3, r3, r9, lsl #3
 800554c:	e8930003 	ldm	r3, {r0, r1}
 8005550:	e1a0200a 	mov	r2, sl
 8005554:	e1a0300b 	mov	r3, fp
 8005558:	eb00154d 	bl	800aa94 <__aeabi_dcmpgt>
 800555c:	e3500000 	cmp	r0, #0
	k--;
      k_check = 0;
 8005560:	13a0c000 	movne	ip, #0
 8005564:	158dc050 	strne	ip, [sp, #80]	; 0x50
 8005568:	058d0050 	streq	r0, [sp, #80]	; 0x50
    k--;			/* want k = floor(ds) */
  k_check = 1;
  if (k >= 0 && k <= Ten_pmax)
    {
      if (d.d < tens[k])
	k--;
 800556c:	12499001 	subne	r9, r9, #1
      k_check = 0;
    }
  j = bbits - i - 1;
 8005570:	e0677008 	rsb	r7, r7, r8
  if (j >= 0)
 8005574:	e2577001 	subs	r7, r7, #1
      b2 = 0;
      s2 = j;
    }
  else
    {
      b2 = -j;
 8005578:	42677000 	rsbmi	r7, r7, #0
      s2 = 0;
 800557c:	43a0c000 	movmi	ip, #0
      k_check = 0;
    }
  j = bbits - i - 1;
  if (j >= 0)
    {
      b2 = 0;
 8005580:	53a0c000 	movpl	ip, #0
      s2 = j;
    }
  else
    {
      b2 = -j;
 8005584:	458d7024 	strmi	r7, [sp, #36]	; 0x24
      s2 = 0;
 8005588:	458dc018 	strmi	ip, [sp, #24]
      if (d.d < tens[k])
	k--;
      k_check = 0;
    }
  j = bbits - i - 1;
  if (j >= 0)
 800558c:	558d7018 	strpl	r7, [sp, #24]
    {
      b2 = 0;
 8005590:	558dc024 	strpl	ip, [sp, #36]	; 0x24
  else
    {
      b2 = -j;
      s2 = 0;
    }
  if (k >= 0)
 8005594:	e3590000 	cmp	r9, #0
 8005598:	ba00017a 	blt	8005b88 <_dtoa_r+0x860>
    {
      b5 = 0;
      s5 = k;
      s2 += k;
 800559c:	e59dc018 	ldr	ip, [sp, #24]
 80055a0:	e08cc009 	add	ip, ip, r9
 80055a4:	e58dc018 	str	ip, [sp, #24]
      b2 = -j;
      s2 = 0;
    }
  if (k >= 0)
    {
      b5 = 0;
 80055a8:	e3a0c000 	mov	ip, #0
      s5 = k;
      s2 += k;
 80055ac:	e58d9044 	str	r9, [sp, #68]	; 0x44
      b2 = -j;
      s2 = 0;
    }
  if (k >= 0)
    {
      b5 = 0;
 80055b0:	e58dc038 	str	ip, [sp, #56]	; 0x38
    {
      b2 -= k;
      b5 = -k;
      s5 = 0;
    }
  if (mode < 0 || mode > 9)
 80055b4:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 80055b8:	e35c0009 	cmp	ip, #9
 80055bc:	8a000022 	bhi	800564c <_dtoa_r+0x324>
    mode = 0;
  try_quick = 1;
  if (mode > 5)
 80055c0:	e35c0005 	cmp	ip, #5
    {
      mode -= 4;
 80055c4:	c24cc004 	subgt	ip, ip, #4
 80055c8:	c58dc0a0 	strgt	ip, [sp, #160]	; 0xa0
      try_quick = 0;
    }
  leftright = 1;
  ilim = ilim1 = -1;
  switch (mode)
 80055cc:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 80055d0:	e24c3002 	sub	r3, ip, #2
  if (mode < 0 || mode > 9)
    mode = 0;
  try_quick = 1;
  if (mode > 5)
    {
      mode -= 4;
 80055d4:	c3a04000 	movgt	r4, #0
      s5 = 0;
    }
  if (mode < 0 || mode > 9)
    mode = 0;
  try_quick = 1;
  if (mode > 5)
 80055d8:	d3a04001 	movle	r4, #1
      mode -= 4;
      try_quick = 0;
    }
  leftright = 1;
  ilim = ilim1 = -1;
  switch (mode)
 80055dc:	e3530003 	cmp	r3, #3
 80055e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 80055e4:	ea00001a 	b	8005654 <_dtoa_r+0x32c>
 80055e8:	08005c2c 	.word	0x08005c2c
 80055ec:	08005fc0 	.word	0x08005fc0
 80055f0:	08005fb4 	.word	0x08005fb4
 80055f4:	08005f80 	.word	0x08005f80
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 80055f8:	e3c9a4ff 	bic	sl, r9, #-16777216	; 0xff000000
 80055fc:	e3caa60f 	bic	sl, sl, #15728640	; 0xf00000
 8005600:	e59f22d0 	ldr	r2, [pc, #720]	; 80058d8 <_dtoa_r+0x5b0>
 8005604:	e59f32c0 	ldr	r3, [pc, #704]	; 80058cc <_dtoa_r+0x5a4>
 8005608:	e35a0000 	cmp	sl, #0
 800560c:	01a0a002 	moveq	sl, r2
 8005610:	11a0a003 	movne	sl, r3
 8005614:	eaffff7e 	b	8005414 <_dtoa_r+0xec>
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
    {
#endif
      d2.d = d.d;
      word0 (d2) &= Frac_mask1;
 8005618:	e3cb34ff 	bic	r3, fp, #-16777216	; 0xff000000
 800561c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 8005620:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
    {
#endif
      d2.d = d.d;
      word0 (d2) &= Frac_mask1;
      word0 (d2) |= Exp_11;
 8005624:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 8005628:	e3a0c000 	mov	ip, #0
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
    {
#endif
      d2.d = d.d;
 800562c:	e1a0000a 	mov	r0, sl
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 8005630:	e2477003 	sub	r7, r7, #3
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
    {
#endif
      d2.d = d.d;
      word0 (d2) &= Frac_mask1;
      word0 (d2) |= Exp_11;
 8005634:	e3831603 	orr	r1, r3, #3145728	; 0x300000
 8005638:	e59d8070 	ldr	r8, [sp, #112]	; 0x70
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 800563c:	e58dc054 	str	ip, [sp, #84]	; 0x54
 8005640:	eaffff9b 	b	80054b4 <_dtoa_r+0x18c>
    {
      *decpt = 1;
      s = "0";
      if (rve)
	*rve = s + 1;
      return s;
 8005644:	e59fa290 	ldr	sl, [pc, #656]	; 80058dc <_dtoa_r+0x5b4>
 8005648:	eaffff67 	b	80053ec <_dtoa_r+0xc4>
      b2 -= k;
      b5 = -k;
      s5 = 0;
    }
  if (mode < 0 || mode > 9)
    mode = 0;
 800564c:	e3a0c000 	mov	ip, #0
 8005650:	e58dc0a0 	str	ip, [sp, #160]	; 0xa0
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 8005654:	e3a04000 	mov	r4, #0
 8005658:	e5864044 	str	r4, [r6, #68]	; 0x44
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 800565c:	e1a01004 	mov	r1, r4
 8005660:	e1a00006 	mov	r0, r6
 8005664:	eb000822 	bl	80076f4 <_Balloc>
 8005668:	e3e0c000 	mvn	ip, #0
 800566c:	e58dc040 	str	ip, [sp, #64]	; 0x40
 8005670:	e58dc028 	str	ip, [sp, #40]	; 0x28
 8005674:	e3a0c001 	mov	ip, #1
 8005678:	e58d0020 	str	r0, [sp, #32]
 800567c:	e58d40a4 	str	r4, [sp, #164]	; 0xa4
 8005680:	e5860040 	str	r0, [r6, #64]	; 0x40
 8005684:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
      ilim = ilim0;
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 8005688:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
 800568c:	e3530000 	cmp	r3, #0
 8005690:	ba000099 	blt	80058fc <_dtoa_r+0x5d4>
 8005694:	e359000e 	cmp	r9, #14
 8005698:	ca000097 	bgt	80058fc <_dtoa_r+0x5d4>
    {
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
 800569c:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
    {
      /* Yes. */
      ds = tens[k];
 80056a0:	e59f3240 	ldr	r3, [pc, #576]	; 80058e8 <_dtoa_r+0x5c0>
      if (ndigits < 0 && ilim <= 0)
 80056a4:	e1a02fac 	lsr	r2, ip, #31
 80056a8:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
    {
      /* Yes. */
      ds = tens[k];
 80056ac:	e0833189 	add	r3, r3, r9, lsl #3
      if (ndigits < 0 && ilim <= 0)
 80056b0:	e35c0000 	cmp	ip, #0
 80056b4:	c3a02000 	movgt	r2, #0
 80056b8:	d2022001 	andle	r2, r2, #1
 80056bc:	e3520000 	cmp	r2, #0
  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
    {
      /* Yes. */
      ds = tens[k];
 80056c0:	e8930006 	ldm	r3, {r1, r2}
 80056c4:	e58d1018 	str	r1, [sp, #24]
 80056c8:	e58d201c 	str	r2, [sp, #28]
      if (ndigits < 0 && ilim <= 0)
 80056cc:	1a000334 	bne	80063a4 <_dtoa_r+0x107c>
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
	{
	  L = d.d / ds;
 80056d0:	e28d3018 	add	r3, sp, #24
 80056d4:	e893000c 	ldm	r3, {r2, r3}
 80056d8:	e1a0100b 	mov	r1, fp
 80056dc:	e1a0000a 	mov	r0, sl
 80056e0:	eb00141d 	bl	800a75c <__aeabi_ddiv>
 80056e4:	eb0014f0 	bl	800aaac <__aeabi_d2iz>
 80056e8:	e1a07000 	mov	r7, r0
	  d.d -= L * ds;
 80056ec:	eb00133f 	bl	800a3f0 <__aeabi_i2d>
 80056f0:	e28d3018 	add	r3, sp, #24
 80056f4:	e893000c 	ldm	r3, {r2, r3}
 80056f8:	eb001373 	bl	800a4cc <__aeabi_dmul>
 80056fc:	e1a03001 	mov	r3, r1
 8005700:	e1a02000 	mov	r2, r0
 8005704:	e1a0100b 	mov	r1, fp
 8005708:	e1a0000a 	mov	r0, sl
 800570c:	eb001269 	bl	800a0b8 <__aeabi_dsub>
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8005710:	e59dc020 	ldr	ip, [sp, #32]
 8005714:	e2873030 	add	r3, r7, #48	; 0x30
 8005718:	e4cc3001 	strb	r3, [ip], #1
 800571c:	e58dc030 	str	ip, [sp, #48]	; 0x30
	  if (i == ilim)
 8005720:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8005724:	e35c0001 	cmp	ip, #1
	  goto one_digit;
	}
      for (i = 1;; i++)
	{
	  L = d.d / ds;
	  d.d -= L * ds;
 8005728:	e1a04000 	mov	r4, r0
 800572c:	e1a05001 	mov	r5, r1
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8005730:	e59db030 	ldr	fp, [sp, #48]	; 0x30
	  if (i == ilim)
 8005734:	0a000036 	beq	8005814 <_dtoa_r+0x4ec>
		      }
		  ++*s++;
		}
	      break;
	    }
	  if (!(d.d *= 10.))
 8005738:	e3a02000 	mov	r2, #0
 800573c:	e59f31ac 	ldr	r3, [pc, #428]	; 80058f0 <_dtoa_r+0x5c8>
 8005740:	eb001361 	bl	800a4cc <__aeabi_dmul>
 8005744:	e3a02000 	mov	r2, #0
 8005748:	e3a03000 	mov	r3, #0
 800574c:	e1a04000 	mov	r4, r0
 8005750:	e1a05001 	mov	r5, r1
 8005754:	eb0014b6 	bl	800aa34 <__aeabi_dcmpeq>
 8005758:	e3500000 	cmp	r0, #0
 800575c:	1a00047b 	bne	8006950 <_dtoa_r+0x1628>
int _EXFUN(posix_memalign,(void **, size_t, size_t));
#endif

#endif /* ! __STRICT_ANSI__ */

char *	_EXFUN(_dtoa_r,(struct _reent *, double, int, int, int *, int*, char**));
 8005760:	e59dc020 	ldr	ip, [sp, #32]
 8005764:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 8005768:	e08c8001 	add	r8, ip, r1
 800576c:	e58d9014 	str	r9, [sp, #20]
 8005770:	e58d8010 	str	r8, [sp, #16]
 8005774:	e28ca002 	add	sl, ip, #2
 8005778:	e28d9018 	add	r9, sp, #24
 800577c:	e8990300 	ldm	r9, {r8, r9}
 8005780:	ea000008 	b	80057a8 <_dtoa_r+0x480>
 8005784:	eb001350 	bl	800a4cc <__aeabi_dmul>
 8005788:	e3a02000 	mov	r2, #0
 800578c:	e3a03000 	mov	r3, #0
 8005790:	e1a04000 	mov	r4, r0
 8005794:	e1a05001 	mov	r5, r1
 8005798:	eb0014a5 	bl	800aa34 <__aeabi_dcmpeq>
 800579c:	e3500000 	cmp	r0, #0
 80057a0:	e28aa001 	add	sl, sl, #1
 80057a4:	1a0003f1 	bne	8006770 <_dtoa_r+0x1448>
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
	{
	  L = d.d / ds;
 80057a8:	e1a02008 	mov	r2, r8
 80057ac:	e1a03009 	mov	r3, r9
 80057b0:	e1a00004 	mov	r0, r4
 80057b4:	e1a01005 	mov	r1, r5
 80057b8:	eb0013e7 	bl	800a75c <__aeabi_ddiv>
 80057bc:	eb0014ba 	bl	800aaac <__aeabi_d2iz>
 80057c0:	e1a07000 	mov	r7, r0
	  d.d -= L * ds;
 80057c4:	eb001309 	bl	800a3f0 <__aeabi_i2d>
 80057c8:	e1a02008 	mov	r2, r8
 80057cc:	e1a03009 	mov	r3, r9
 80057d0:	eb00133d 	bl	800a4cc <__aeabi_dmul>
 80057d4:	e1a02000 	mov	r2, r0
 80057d8:	e1a03001 	mov	r3, r1
 80057dc:	e1a00004 	mov	r0, r4
 80057e0:	e1a01005 	mov	r1, r5
 80057e4:	eb001233 	bl	800a0b8 <__aeabi_dsub>
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
	  if (i == ilim)
 80057e8:	e59dc010 	ldr	ip, [sp, #16]
 80057ec:	e15a000c 	cmp	sl, ip
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 80057f0:	e287c030 	add	ip, r7, #48	; 0x30
	  goto one_digit;
	}
      for (i = 1;; i++)
	{
	  L = d.d / ds;
	  d.d -= L * ds;
 80057f4:	e1a04000 	mov	r4, r0
 80057f8:	e1a05001 	mov	r5, r1
		      }
		  ++*s++;
		}
	      break;
	    }
	  if (!(d.d *= 10.))
 80057fc:	e3a02000 	mov	r2, #0
 8005800:	e59f30e8 	ldr	r3, [pc, #232]	; 80058f0 <_dtoa_r+0x5c8>
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8005804:	e54ac001 	strb	ip, [sl, #-1]
 8005808:	e1a0b00a 	mov	fp, sl
	  if (i == ilim)
 800580c:	1affffdc 	bne	8005784 <_dtoa_r+0x45c>
 8005810:	e59d9014 	ldr	r9, [sp, #20]
	    {
	      d.d += d.d;
 8005814:	e1a02004 	mov	r2, r4
 8005818:	e1a03005 	mov	r3, r5
 800581c:	e1a00004 	mov	r0, r4
 8005820:	e1a01005 	mov	r1, r5
 8005824:	eb001224 	bl	800a0bc <__adddf3>
 8005828:	e1a04000 	mov	r4, r0
 800582c:	e1a05001 	mov	r5, r1
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 8005830:	e1a02004 	mov	r2, r4
 8005834:	e28d1018 	add	r1, sp, #24
 8005838:	e8910003 	ldm	r1, {r0, r1}
 800583c:	e1a03005 	mov	r3, r5
 8005840:	eb001481 	bl	800aa4c <__aeabi_dcmplt>
 8005844:	e3500000 	cmp	r0, #0
 8005848:	0a00040b 	beq	800687c <_dtoa_r+0x1554>
 800584c:	e58d9068 	str	r9, [sp, #104]	; 0x68
 8005850:	e59da020 	ldr	sl, [sp, #32]
 8005854:	e55b8001 	ldrb	r8, [fp, #-1]
 8005858:	e1a0900b 	mov	r9, fp
 800585c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
 8005860:	ea000001 	b	800586c <_dtoa_r+0x544>
 8005864:	e5598002 	ldrb	r8, [r9, #-2]
 8005868:	e1a09003 	mov	r9, r3
		{
		bump_up:
		  while (*--s == '9')
 800586c:	e3580039 	cmp	r8, #57	; 0x39
 8005870:	e1a02009 	mov	r2, r9
 8005874:	e2493001 	sub	r3, r9, #1
 8005878:	1a0003dc 	bne	80067f0 <_dtoa_r+0x14c8>
		    if (s == s0)
 800587c:	e1590001 	cmp	r9, r1
 8005880:	1afffff7 	bne	8005864 <_dtoa_r+0x53c>
		      {
			k++;
 8005884:	e59dc068 	ldr	ip, [sp, #104]	; 0x68
 8005888:	e58d2020 	str	r2, [sp, #32]
			*s = '0';
 800588c:	e3a02030 	mov	r2, #48	; 0x30
 8005890:	e5c32000 	strb	r2, [r3]
		{
		bump_up:
		  while (*--s == '9')
		    if (s == s0)
		      {
			k++;
 8005894:	e28c9001 	add	r9, ip, #1
			*s = '0';
			break;
 8005898:	e3a02031 	mov	r2, #49	; 0x31
		      }
		  ++*s++;
 800589c:	e5c32000 	strb	r2, [r3]
 80058a0:	ea0000a1 	b	8005b2c <_dtoa_r+0x804>
 80058a4:	e1a00000 	nop			; (mov r0, r0)
 80058a8:	636f4361 	.word	0x636f4361
 80058ac:	3fd287a7 	.word	0x3fd287a7
 80058b0:	8b60c8b3 	.word	0x8b60c8b3
 80058b4:	3fc68a28 	.word	0x3fc68a28
 80058b8:	509f79fb 	.word	0x509f79fb
 80058bc:	3fd34413 	.word	0x3fd34413
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	0800b0b1 	.word	0x0800b0b1
 80058c8:	0000270f 	.word	0x0000270f
 80058cc:	0800b0c0 	.word	0x0800b0c0
 80058d0:	fffffbee 	.word	0xfffffbee
 80058d4:	3ff80000 	.word	0x3ff80000
 80058d8:	0800b0b4 	.word	0x0800b0b4
 80058dc:	0800b0b0 	.word	0x0800b0b0
 80058e0:	3ff00000 	.word	0x3ff00000
 80058e4:	0800af18 	.word	0x0800af18
 80058e8:	0800ae28 	.word	0x0800ae28
 80058ec:	40140000 	.word	0x40140000
 80058f0:	40240000 	.word	0x40240000
 80058f4:	401c0000 	.word	0x401c0000
 80058f8:	3fe00000 	.word	0x3fe00000
    }

  m2 = b2;
  m5 = b5;
  mhi = mlo = 0;
  if (leftright)
 80058fc:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
 8005900:	e35c0000 	cmp	ip, #0
 8005904:	1a0000a7 	bne	8005ba8 <_dtoa_r+0x880>
 8005908:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
	    break;
	}
      goto ret1;
    }

  m2 = b2;
 800590c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
  m5 = b5;
  mhi = mlo = 0;
 8005910:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
	}
      b2 += i;
      s2 += i;
      mhi = i2b (ptr, 1);
    }
  if (m2 > 0 && s2 > 0)
 8005914:	e59dc018 	ldr	ip, [sp, #24]
 8005918:	e35c0000 	cmp	ip, #0
 800591c:	c3550000 	cmpgt	r5, #0
 8005920:	da000009 	ble	800594c <_dtoa_r+0x624>
    {
      i = m2 < s2 ? m2 : s2;
 8005924:	e1a0300c 	mov	r3, ip
      b2 -= i;
 8005928:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
      s2 += i;
      mhi = i2b (ptr, 1);
    }
  if (m2 > 0 && s2 > 0)
    {
      i = m2 < s2 ? m2 : s2;
 800592c:	e1530005 	cmp	r3, r5
 8005930:	a1a03005 	movge	r3, r5
      b2 -= i;
 8005934:	e063c00c 	rsb	ip, r3, ip
 8005938:	e58dc024 	str	ip, [sp, #36]	; 0x24
      m2 -= i;
      s2 -= i;
 800593c:	e59dc018 	ldr	ip, [sp, #24]
 8005940:	e063c00c 	rsb	ip, r3, ip
 8005944:	e58dc018 	str	ip, [sp, #24]
    }
  if (m2 > 0 && s2 > 0)
    {
      i = m2 < s2 ? m2 : s2;
      b2 -= i;
      m2 -= i;
 8005948:	e0635005 	rsb	r5, r3, r5
      s2 -= i;
    }
  if (b5 > 0)
 800594c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
 8005950:	e35c0000 	cmp	ip, #0
 8005954:	da000015 	ble	80059b0 <_dtoa_r+0x688>
    {
      if (leftright)
 8005958:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
 800595c:	e35c0000 	cmp	ip, #0
 8005960:	0a000338 	beq	8006648 <_dtoa_r+0x1320>
	{
	  if (m5 > 0)
 8005964:	e3570000 	cmp	r7, #0
 8005968:	da00000d 	ble	80059a4 <_dtoa_r+0x67c>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 800596c:	e1a01004 	mov	r1, r4
 8005970:	e1a02007 	mov	r2, r7
 8005974:	e1a00006 	mov	r0, r6
 8005978:	eb0008b3 	bl	8007c4c <__pow5mult>
 800597c:	e1a04000 	mov	r4, r0
	      b1 = mult (ptr, mhi, b);
 8005980:	e1a01004 	mov	r1, r4
 8005984:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
 8005988:	e1a00006 	mov	r0, r6
 800598c:	eb000835 	bl	8007a68 <__multiply>
	      Bfree (ptr, b);
 8005990:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
      if (leftright)
	{
	  if (m5 > 0)
	    {
	      mhi = pow5mult (ptr, mhi, m5);
	      b1 = mult (ptr, mhi, b);
 8005994:	e1a08000 	mov	r8, r0
	      Bfree (ptr, b);
 8005998:	e1a00006 	mov	r0, r6
 800599c:	eb000777 	bl	8007780 <_Bfree>
	      b = b1;
 80059a0:	e58d802c 	str	r8, [sp, #44]	; 0x2c
	    }
         if ((j = b5 - m5) != 0)
 80059a4:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
 80059a8:	e05c2007 	subs	r2, ip, r7
 80059ac:	1a000360 	bne	8006734 <_dtoa_r+0x140c>
	    b = pow5mult (ptr, b, j);
	}
      else
	b = pow5mult (ptr, b, b5);
    }
  S = i2b (ptr, 1);
 80059b0:	e1a00006 	mov	r0, r6
 80059b4:	e3a01001 	mov	r1, #1
 80059b8:	eb000821 	bl	8007a44 <__i2b>
  if (s5 > 0)
 80059bc:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
 80059c0:	e35c0000 	cmp	ip, #0
	    b = pow5mult (ptr, b, j);
	}
      else
	b = pow5mult (ptr, b, b5);
    }
  S = i2b (ptr, 1);
 80059c4:	e1a07000 	mov	r7, r0
  if (s5 > 0)
 80059c8:	da000004 	ble	80059e0 <_dtoa_r+0x6b8>
    S = pow5mult (ptr, S, s5);
 80059cc:	e1a01000 	mov	r1, r0
 80059d0:	e1a0200c 	mov	r2, ip
 80059d4:	e1a00006 	mov	r0, r6
 80059d8:	eb00089b 	bl	8007c4c <__pow5mult>
 80059dc:	e1a07000 	mov	r7, r0

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
  if (mode < 2)
 80059e0:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 80059e4:	e35c0001 	cmp	ip, #1
 80059e8:	da00027d 	ble	80063e4 <_dtoa_r+0x10bc>
  if (s5 > 0)
    S = pow5mult (ptr, S, s5);

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 80059ec:	e3a08000 	mov	r8, #0
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 80059f0:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
 80059f4:	e35c0000 	cmp	ip, #0
 80059f8:	03a00001 	moveq	r0, #1
 80059fc:	1a000246 	bne	800631c <_dtoa_r+0xff4>
 8005a00:	e59dc018 	ldr	ip, [sp, #24]
 8005a04:	e080300c 	add	r3, r0, ip
 8005a08:	e213301f 	ands	r3, r3, #31
 8005a0c:	0a0001cc 	beq	8006144 <_dtoa_r+0xe1c>
    i = 32 - i;
 8005a10:	e2632020 	rsb	r2, r3, #32
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 8005a14:	e3520004 	cmp	r2, #4
 8005a18:	da0003d7 	ble	800697c <_dtoa_r+0x1654>
    {
      i -= 4;
 8005a1c:	e263301c 	rsb	r3, r3, #28
      s2 += i;
    }
  else if (i < 4)
    {
      i += 28;
      b2 += i;
 8005a20:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8005a24:	e08cc003 	add	ip, ip, r3
 8005a28:	e58dc024 	str	ip, [sp, #36]	; 0x24
      m2 += i;
      s2 += i;
 8005a2c:	e59dc018 	ldr	ip, [sp, #24]
 8005a30:	e08cc003 	add	ip, ip, r3
 8005a34:	e58dc018 	str	ip, [sp, #24]
    }
  else if (i < 4)
    {
      i += 28;
      b2 += i;
      m2 += i;
 8005a38:	e0855003 	add	r5, r5, r3
      s2 += i;
    }
  if (b2 > 0)
 8005a3c:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8005a40:	e35c0000 	cmp	ip, #0
 8005a44:	da000004 	ble	8005a5c <_dtoa_r+0x734>
    b = lshift (ptr, b, b2);
 8005a48:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 8005a4c:	e1a0200c 	mov	r2, ip
 8005a50:	e1a00006 	mov	r0, r6
 8005a54:	eb0008b9 	bl	8007d40 <__lshift>
 8005a58:	e58d002c 	str	r0, [sp, #44]	; 0x2c
  if (s2 > 0)
 8005a5c:	e59dc018 	ldr	ip, [sp, #24]
 8005a60:	e35c0000 	cmp	ip, #0
 8005a64:	da000004 	ble	8005a7c <_dtoa_r+0x754>
    S = lshift (ptr, S, s2);
 8005a68:	e1a01007 	mov	r1, r7
 8005a6c:	e1a0200c 	mov	r2, ip
 8005a70:	e1a00006 	mov	r0, r6
 8005a74:	eb0008b1 	bl	8007d40 <__lshift>
 8005a78:	e1a07000 	mov	r7, r0
  if (k_check)
 8005a7c:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
 8005a80:	e35c0000 	cmp	ip, #0
 8005a84:	1a00022a 	bne	8006334 <_dtoa_r+0x100c>
	  if (leftright)
	    mhi = multadd (ptr, mhi, 10, 0);
	  ilim = ilim1;
	}
    }
  if (ilim <= 0 && mode > 2)
 8005a88:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 8005a8c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 8005a90:	e35c0002 	cmp	ip, #2
 8005a94:	d3a03000 	movle	r3, #0
 8005a98:	c3a03001 	movgt	r3, #1
 8005a9c:	e3510000 	cmp	r1, #0
 8005aa0:	c3a03000 	movgt	r3, #0
 8005aa4:	e3530000 	cmp	r3, #0
 8005aa8:	0a00016a 	beq	8006058 <_dtoa_r+0xd30>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 8005aac:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8005ab0:	e35c0000 	cmp	ip, #0
 8005ab4:	1a000162 	bne	8006044 <_dtoa_r+0xd1c>
 8005ab8:	e1a01007 	mov	r1, r7
 8005abc:	e1a0300c 	mov	r3, ip
 8005ac0:	e3a02005 	mov	r2, #5
 8005ac4:	e1a00006 	mov	r0, r6
 8005ac8:	eb000733 	bl	800779c <__multadd>
 8005acc:	e1a07000 	mov	r7, r0
 8005ad0:	e1a01007 	mov	r1, r7
 8005ad4:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
 8005ad8:	eb0008d9 	bl	8007e44 <__mcmp>
 8005adc:	e3500000 	cmp	r0, #0
 8005ae0:	da000157 	ble	8006044 <_dtoa_r+0xd1c>
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 8005ae4:	e59d3020 	ldr	r3, [sp, #32]
 8005ae8:	e3a02031 	mov	r2, #49	; 0x31
 8005aec:	e4c32001 	strb	r2, [r3], #1
      k++;
      goto ret;
 8005af0:	e59da020 	ldr	sl, [sp, #32]
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 8005af4:	e58d3020 	str	r3, [sp, #32]
      k++;
 8005af8:	e2899001 	add	r9, r9, #1
      goto ret;
 8005afc:	e3a05000 	mov	r5, #0
    {
      while (*--s == '0');
      s++;
    }
ret:
  Bfree (ptr, S);
 8005b00:	e1a01007 	mov	r1, r7
 8005b04:	e1a00006 	mov	r0, r6
 8005b08:	eb00071c 	bl	8007780 <_Bfree>
  if (mhi)
 8005b0c:	e3540000 	cmp	r4, #0
 8005b10:	0a000005 	beq	8005b2c <_dtoa_r+0x804>
    {
      if (mlo && mlo != mhi)
 8005b14:	e1550004 	cmp	r5, r4
 8005b18:	13550000 	cmpne	r5, #0
 8005b1c:	1a000190 	bne	8006164 <_dtoa_r+0xe3c>
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
 8005b20:	e1a01004 	mov	r1, r4
 8005b24:	e1a00006 	mov	r0, r6
 8005b28:	eb000714 	bl	8007780 <_Bfree>
    }
ret1:
  Bfree (ptr, b);
 8005b2c:	e1a00006 	mov	r0, r6
 8005b30:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 8005b34:	eb000711 	bl	8007780 <_Bfree>
  *s = 0;
  *decpt = k + 1;
  if (rve)
 8005b38:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
 8005b3c:	e35c0000 	cmp	ip, #0
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
  *s = 0;
 8005b40:	e59dc020 	ldr	ip, [sp, #32]
 8005b44:	e3a02000 	mov	r2, #0
 8005b48:	e5cc2000 	strb	r2, [ip]
  *decpt = k + 1;
 8005b4c:	e59dc0a8 	ldr	ip, [sp, #168]	; 0xa8
 8005b50:	e2893001 	add	r3, r9, #1
 8005b54:	e58c3000 	str	r3, [ip]
  if (rve)
    *rve = s;
 8005b58:	159dc020 	ldrne	ip, [sp, #32]
 8005b5c:	159d10b0 	ldrne	r1, [sp, #176]	; 0xb0
 8005b60:	1581c000 	strne	ip, [r1]
 8005b64:	eafffe20 	b	80053ec <_dtoa_r+0xc4>
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
#endif
  k = (int) ds;
  if (ds < 0. && ds != k)
 8005b68:	e1a00009 	mov	r0, r9
 8005b6c:	eb00121f 	bl	800a3f0 <__aeabi_i2d>
 8005b70:	e1a02004 	mov	r2, r4
 8005b74:	e1a03005 	mov	r3, r5
 8005b78:	eb0013ad 	bl	800aa34 <__aeabi_dcmpeq>
 8005b7c:	e3500000 	cmp	r0, #0
    k--;			/* want k = floor(ds) */
 8005b80:	02499001 	subeq	r9, r9, #1
 8005b84:	eafffe6a 	b	8005534 <_dtoa_r+0x20c>
      s5 = k;
      s2 += k;
    }
  else
    {
      b2 -= k;
 8005b88:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8005b8c:	e069c00c 	rsb	ip, r9, ip
 8005b90:	e58dc024 	str	ip, [sp, #36]	; 0x24
      b5 = -k;
 8005b94:	e269c000 	rsb	ip, r9, #0
 8005b98:	e58dc038 	str	ip, [sp, #56]	; 0x38
      s5 = 0;
 8005b9c:	e3a0c000 	mov	ip, #0
 8005ba0:	e58dc044 	str	ip, [sp, #68]	; 0x44
 8005ba4:	eafffe82 	b	80055b4 <_dtoa_r+0x28c>
  m2 = b2;
  m5 = b5;
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
 8005ba8:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 8005bac:	e35c0001 	cmp	ip, #1
 8005bb0:	da0002e4 	ble	8006748 <_dtoa_r+0x1420>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 8005bb4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8005bb8:	e24c7001 	sub	r7, ip, #1
	  if (m5 >= j)
 8005bbc:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
 8005bc0:	e15c0007 	cmp	ip, r7
	    m5 -= j;
	  else
	    {
	      s5 += j -= m5;
 8005bc4:	b59dc038 	ldrlt	ip, [sp, #56]	; 0x38
 8005bc8:	b06c3007 	rsblt	r3, ip, r7
 8005bcc:	b59dc044 	ldrlt	ip, [sp, #68]	; 0x44
 8005bd0:	b08cc003 	addlt	ip, ip, r3
	}
      else
	{
	  j = ilim - 1;
	  if (m5 >= j)
	    m5 -= j;
 8005bd4:	a067700c 	rsbge	r7, r7, ip
	  else
	    {
	      s5 += j -= m5;
 8005bd8:	b58dc044 	strlt	ip, [sp, #68]	; 0x44
	      b5 += j;
	      m5 = 0;
	    }
	  if ((i = ilim) < 0)
 8005bdc:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
	  j = ilim - 1;
	  if (m5 >= j)
	    m5 -= j;
	  else
	    {
	      s5 += j -= m5;
 8005be0:	b58d7038 	strlt	r7, [sp, #56]	; 0x38
	      b5 += j;
	      m5 = 0;
 8005be4:	b3a07000 	movlt	r7, #0
	    }
	  if ((i = ilim) < 0)
 8005be8:	e35c0000 	cmp	ip, #0
	    {
	      m2 -= i;
 8005bec:	b59d1024 	ldrlt	r1, [sp, #36]	; 0x24
	    break;
	}
      goto ret1;
    }

  m2 = b2;
 8005bf0:	a59d5024 	ldrge	r5, [sp, #36]	; 0x24
	    {
	      s5 += j -= m5;
	      b5 += j;
	      m5 = 0;
	    }
	  if ((i = ilim) < 0)
 8005bf4:	a59d3028 	ldrge	r3, [sp, #40]	; 0x28
	    {
	      m2 -= i;
 8005bf8:	b06c5001 	rsblt	r5, ip, r1
	      i = 0;
 8005bfc:	b3a03000 	movlt	r3, #0
	    }
	}
      b2 += i;
 8005c00:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8005c04:	e08cc003 	add	ip, ip, r3
 8005c08:	e58dc024 	str	ip, [sp, #36]	; 0x24
      s2 += i;
 8005c0c:	e59dc018 	ldr	ip, [sp, #24]
      mhi = i2b (ptr, 1);
 8005c10:	e1a00006 	mov	r0, r6
	      m2 -= i;
	      i = 0;
	    }
	}
      b2 += i;
      s2 += i;
 8005c14:	e08cc003 	add	ip, ip, r3
      mhi = i2b (ptr, 1);
 8005c18:	e3a01001 	mov	r1, #1
	      m2 -= i;
	      i = 0;
	    }
	}
      b2 += i;
      s2 += i;
 8005c1c:	e58dc018 	str	ip, [sp, #24]
      mhi = i2b (ptr, 1);
 8005c20:	eb000787 	bl	8007a44 <__i2b>
 8005c24:	e1a04000 	mov	r4, r0
 8005c28:	eaffff39 	b	8005914 <_dtoa_r+0x5ec>
    case 1:
      i = 18;
      ndigits = 0;
      break;
    case 2:
      leftright = 0;
 8005c2c:	e3a0c000 	mov	ip, #0
 8005c30:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
      /* no break */
    case 4:
      if (ndigits <= 0)
 8005c34:	e59d10a4 	ldr	r1, [sp, #164]	; 0xa4
 8005c38:	e3510000 	cmp	r1, #0
 8005c3c:	da00027c 	ble	8006634 <_dtoa_r+0x130c>
 8005c40:	e58d1040 	str	r1, [sp, #64]	; 0x40
 8005c44:	e58d1028 	str	r1, [sp, #40]	; 0x28
 8005c48:	e351000e 	cmp	r1, #14
 8005c4c:	83a04000 	movhi	r4, #0
 8005c50:	92044001 	andls	r4, r4, #1
 8005c54:	e1a08001 	mov	r8, r1
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 8005c58:	e3a01000 	mov	r1, #0
 8005c5c:	e3580017 	cmp	r8, #23
 8005c60:	e5861044 	str	r1, [r6, #68]	; 0x44
 8005c64:	9a000008 	bls	8005c8c <_dtoa_r+0x964>
 8005c68:	e3a02001 	mov	r2, #1
 8005c6c:	e3a03004 	mov	r3, #4
       j <<= 1)
 8005c70:	e1a03083 	lsl	r3, r3, #1
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 8005c74:	e2830014 	add	r0, r3, #20
 8005c78:	e1500008 	cmp	r0, r8
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 8005c7c:	e1a01002 	mov	r1, r2
 8005c80:	e2822001 	add	r2, r2, #1
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 8005c84:	9afffff9 	bls	8005c70 <_dtoa_r+0x948>
 8005c88:	e5861044 	str	r1, [r6, #68]	; 0x44
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8005c8c:	e1a00006 	mov	r0, r6
 8005c90:	eb000697 	bl	80076f4 <_Balloc>
  s = s0 = (char *) _REENT_MP_RESULT(ptr);

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 8005c94:	e3540000 	cmp	r4, #0
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8005c98:	e58d0020 	str	r0, [sp, #32]
 8005c9c:	e5860040 	str	r0, [r6, #64]	; 0x40
  s = s0 = (char *) _REENT_MP_RESULT(ptr);

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 8005ca0:	0afffe78 	beq	8005688 <_dtoa_r+0x360>
      i = 0;
      d2.d = d.d;
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
      if (k > 0)
 8005ca4:	e3590000 	cmp	r9, #0
  if (ilim >= 0 && ilim <= Quick_max && try_quick)
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
      d2.d = d.d;
 8005ca8:	e58da048 	str	sl, [sp, #72]	; 0x48
 8005cac:	e58db04c 	str	fp, [sp, #76]	; 0x4c
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
      if (k > 0)
 8005cb0:	da000134 	ble	8006188 <_dtoa_r+0xe60>
	{
	  ds = tens[k & 0xf];
 8005cb4:	e51f33d4 	ldr	r3, [pc, #-980]	; 80058e8 <_dtoa_r+0x5c0>
 8005cb8:	e209200f 	and	r2, r9, #15
	  j = k >> 4;
 8005cbc:	e1a07249 	asr	r7, r9, #4
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
      if (k > 0)
	{
	  ds = tens[k & 0xf];
 8005cc0:	e0833182 	add	r3, r3, r2, lsl #3
	  j = k >> 4;
	  if (j & Bletch)
 8005cc4:	e3170010 	tst	r7, #16
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
      if (k > 0)
	{
	  ds = tens[k & 0xf];
 8005cc8:	e8930030 	ldm	r3, {r4, r5}
	  j = k >> 4;
	  if (j & Bletch)
 8005ccc:	0a00011e 	beq	800614c <_dtoa_r+0xe24>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
 8005cd0:	e51f33f4 	ldr	r3, [pc, #-1012]	; 80058e4 <_dtoa_r+0x5bc>
 8005cd4:	e1a0000a 	mov	r0, sl
 8005cd8:	e1a0100b 	mov	r1, fp
 8005cdc:	e2833020 	add	r3, r3, #32
 8005ce0:	e893000c 	ldm	r3, {r2, r3}
 8005ce4:	eb00129c 	bl	800a75c <__aeabi_ddiv>
 8005ce8:	e58d0030 	str	r0, [sp, #48]	; 0x30
 8005cec:	e58d1034 	str	r1, [sp, #52]	; 0x34
	  ds = tens[k & 0xf];
	  j = k >> 4;
	  if (j & Bletch)
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 8005cf0:	e207700f 	and	r7, r7, #15
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
 8005cf4:	e3a08003 	mov	r8, #3
	    }
	  for (; j; j >>= 1, i++)
 8005cf8:	e3570000 	cmp	r7, #0
 8005cfc:	0a00000b 	beq	8005d30 <_dtoa_r+0xa08>
 8005d00:	e51fa424 	ldr	sl, [pc, #-1060]	; 80058e4 <_dtoa_r+0x5bc>
 8005d04:	e1a00004 	mov	r0, r4
 8005d08:	e1a01005 	mov	r1, r5
	    if (j & 1)
 8005d0c:	e3170001 	tst	r7, #1
	      {
		ieps++;
		ds *= bigtens[i];
 8005d10:	189a000c 	ldmne	sl, {r2, r3}
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
	    if (j & 1)
	      {
		ieps++;
 8005d14:	12888001 	addne	r8, r8, #1
		ds *= bigtens[i];
 8005d18:	1b0011eb 	blne	800a4cc <__aeabi_dmul>
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 8005d1c:	e1b070c7 	asrs	r7, r7, #1
 8005d20:	e28aa008 	add	sl, sl, #8
 8005d24:	1afffff8 	bne	8005d0c <_dtoa_r+0x9e4>
 8005d28:	e1a04000 	mov	r4, r0
 8005d2c:	e1a05001 	mov	r5, r1
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 8005d30:	e28d1030 	add	r1, sp, #48	; 0x30
 8005d34:	e8910003 	ldm	r1, {r0, r1}
 8005d38:	e1a02004 	mov	r2, r4
 8005d3c:	e1a03005 	mov	r3, r5
 8005d40:	eb001285 	bl	800a75c <__aeabi_ddiv>
 8005d44:	e1a0a000 	mov	sl, r0
 8005d48:	e1a0b001 	mov	fp, r1
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 8005d4c:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
 8005d50:	e35c0000 	cmp	ip, #0
 8005d54:	0a000006 	beq	8005d74 <_dtoa_r+0xa4c>
 8005d58:	e1a0000a 	mov	r0, sl
 8005d5c:	e1a0100b 	mov	r1, fp
 8005d60:	e3a02000 	mov	r2, #0
 8005d64:	e51f348c 	ldr	r3, [pc, #-1164]	; 80058e0 <_dtoa_r+0x5b8>
 8005d68:	eb001337 	bl	800aa4c <__aeabi_dcmplt>
 8005d6c:	e3500000 	cmp	r0, #0
 8005d70:	1a00023a 	bne	8006660 <_dtoa_r+0x1338>
	  ilim = ilim1;
	  k--;
	  d.d *= 10.;
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 8005d74:	e1a00008 	mov	r0, r8
 8005d78:	eb00119c 	bl	800a3f0 <__aeabi_i2d>
 8005d7c:	e1a0200a 	mov	r2, sl
 8005d80:	e1a0300b 	mov	r3, fp
 8005d84:	eb0011d0 	bl	800a4cc <__aeabi_dmul>
 8005d88:	e3a02000 	mov	r2, #0
 8005d8c:	e51f34a0 	ldr	r3, [pc, #-1184]	; 80058f4 <_dtoa_r+0x5cc>
 8005d90:	eb0010c9 	bl	800a0bc <__adddf3>
      word0 (eps) -= (P - 1) * Exp_msk1;
      if (ilim == 0)
 8005d94:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8005d98:	e35c0000 	cmp	ip, #0
	  ilim = ilim1;
	  k--;
	  d.d *= 10.;
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 8005d9c:	e1a04000 	mov	r4, r0
      word0 (eps) -= (P - 1) * Exp_msk1;
 8005da0:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
      if (ilim == 0)
 8005da4:	0a000092 	beq	8005ff4 <_dtoa_r+0xccc>
 8005da8:	e58d9068 	str	r9, [sp, #104]	; 0x68
 8005dac:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
	  if (d.d < -eps.d)
	    goto no_digits;
	  goto fast_failed;
	}
#ifndef No_leftright
      if (leftright)
 8005db0:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
 8005db4:	e3510000 	cmp	r1, #0
 8005db8:	0a00010c 	beq	80061f0 <_dtoa_r+0xec8>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 8005dbc:	e51f34dc 	ldr	r3, [pc, #-1244]	; 80058e8 <_dtoa_r+0x5c0>
 8005dc0:	e083318c 	add	r3, r3, ip, lsl #3
 8005dc4:	e913000c 	ldmdb	r3, {r2, r3}
 8005dc8:	e3a00000 	mov	r0, #0
 8005dcc:	e51f14dc 	ldr	r1, [pc, #-1244]	; 80058f8 <_dtoa_r+0x5d0>
 8005dd0:	e58dc00c 	str	ip, [sp, #12]
 8005dd4:	eb001260 	bl	800a75c <__aeabi_ddiv>
 8005dd8:	e1a02004 	mov	r2, r4
 8005ddc:	e1a03005 	mov	r3, r5
 8005de0:	eb0010b4 	bl	800a0b8 <__aeabi_dsub>
 8005de4:	e58d0058 	str	r0, [sp, #88]	; 0x58
 8005de8:	e58d105c 	str	r1, [sp, #92]	; 0x5c
	  for (i = 0;;)
	    {
	      L = d.d;
 8005dec:	e1a0100b 	mov	r1, fp
 8005df0:	e1a0000a 	mov	r0, sl
 8005df4:	eb00132c 	bl	800aaac <__aeabi_d2iz>
 8005df8:	e1a07000 	mov	r7, r0
	      d.d -= L;
 8005dfc:	eb00117b 	bl	800a3f0 <__aeabi_i2d>
 8005e00:	e1a02000 	mov	r2, r0
 8005e04:	e1a03001 	mov	r3, r1
 8005e08:	e1a0000a 	mov	r0, sl
 8005e0c:	e1a0100b 	mov	r1, fp
 8005e10:	eb0010a8 	bl	800a0b8 <__aeabi_dsub>
	      *s++ = '0' + (int) L;
 8005e14:	e2877030 	add	r7, r7, #48	; 0x30
 8005e18:	e59d2020 	ldr	r2, [sp, #32]
 8005e1c:	e20780ff 	and	r8, r7, #255	; 0xff
 8005e20:	e4c28001 	strb	r8, [r2], #1
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
 8005e24:	e1a04000 	mov	r4, r0
 8005e28:	e1a05001 	mov	r5, r1
	      *s++ = '0' + (int) L;
 8005e2c:	e58d2030 	str	r2, [sp, #48]	; 0x30
	      if (d.d < eps.d)
 8005e30:	e28d1058 	add	r1, sp, #88	; 0x58
 8005e34:	e8910003 	ldm	r1, {r0, r1}
 8005e38:	e1a02004 	mov	r2, r4
 8005e3c:	e1a03005 	mov	r3, r5
 8005e40:	eb001313 	bl	800aa94 <__aeabi_dcmpgt>
 8005e44:	e3500000 	cmp	r0, #0
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
 8005e48:	e59db030 	ldr	fp, [sp, #48]	; 0x30
	      if (d.d < eps.d)
 8005e4c:	1a0002c5 	bne	8006968 <_dtoa_r+0x1640>
		goto ret1;
	      if (1. - d.d < eps.d)
 8005e50:	e1a02004 	mov	r2, r4
 8005e54:	e1a03005 	mov	r3, r5
 8005e58:	e3a00000 	mov	r0, #0
 8005e5c:	e51f1584 	ldr	r1, [pc, #-1412]	; 80058e0 <_dtoa_r+0x5b8>
 8005e60:	eb001094 	bl	800a0b8 <__aeabi_dsub>
 8005e64:	e1a02000 	mov	r2, r0
 8005e68:	e1a03001 	mov	r3, r1
 8005e6c:	e28d1058 	add	r1, sp, #88	; 0x58
 8005e70:	e8910003 	ldm	r1, {r0, r1}
 8005e74:	eb001306 	bl	800aa94 <__aeabi_dcmpgt>
 8005e78:	e3500000 	cmp	r0, #0
 8005e7c:	e59dc00c 	ldr	ip, [sp, #12]
 8005e80:	1a00023f 	bne	8006784 <_dtoa_r+0x145c>
		goto bump_up;
	      if (++i >= ilim)
 8005e84:	e35c0001 	cmp	ip, #1
 8005e88:	da0000bb 	ble	800617c <_dtoa_r+0xe54>
 8005e8c:	e59d3020 	ldr	r3, [sp, #32]
 8005e90:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
 8005e94:	e083a00c 	add	sl, r3, ip
 8005e98:	e58d906c 	str	r9, [sp, #108]	; 0x6c
 8005e9c:	e58d6060 	str	r6, [sp, #96]	; 0x60
 8005ea0:	e1a0900a 	mov	r9, sl
 8005ea4:	e1a0a007 	mov	sl, r7
 8005ea8:	e28d7058 	add	r7, sp, #88	; 0x58
 8005eac:	e89700c0 	ldm	r7, {r6, r7}
 8005eb0:	ea000007 	b	8005ed4 <_dtoa_r+0xbac>
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
 8005eb4:	eb00107f 	bl	800a0b8 <__aeabi_dsub>
 8005eb8:	e1a02006 	mov	r2, r6
 8005ebc:	e1a03007 	mov	r3, r7
 8005ec0:	eb0012e1 	bl	800aa4c <__aeabi_dcmplt>
 8005ec4:	e3500000 	cmp	r0, #0
 8005ec8:	1a00022c 	bne	8006780 <_dtoa_r+0x1458>
		goto bump_up;
	      if (++i >= ilim)
 8005ecc:	e15a0009 	cmp	sl, r9
 8005ed0:	0a0000a7 	beq	8006174 <_dtoa_r+0xe4c>
		break;
	      eps.d *= 10.;
 8005ed4:	e1a00006 	mov	r0, r6
 8005ed8:	e1a01007 	mov	r1, r7
 8005edc:	e3a02000 	mov	r2, #0
 8005ee0:	e51f35f8 	ldr	r3, [pc, #-1528]	; 80058f0 <_dtoa_r+0x5c8>
 8005ee4:	eb001178 	bl	800a4cc <__aeabi_dmul>
	      d.d *= 10.;
 8005ee8:	e3a02000 	mov	r2, #0
 8005eec:	e51f3604 	ldr	r3, [pc, #-1540]	; 80058f0 <_dtoa_r+0x5c8>
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
	      eps.d *= 10.;
 8005ef0:	e1a06000 	mov	r6, r0
 8005ef4:	e1a07001 	mov	r7, r1
	      d.d *= 10.;
 8005ef8:	e1a00004 	mov	r0, r4
 8005efc:	e1a01005 	mov	r1, r5
 8005f00:	eb001171 	bl	800a4cc <__aeabi_dmul>
 8005f04:	e1a05001 	mov	r5, r1
 8005f08:	e1a04000 	mov	r4, r0
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
 8005f0c:	eb0012e6 	bl	800aaac <__aeabi_d2iz>
 8005f10:	e1a08000 	mov	r8, r0
	      d.d -= L;
 8005f14:	eb001135 	bl	800a3f0 <__aeabi_i2d>
 8005f18:	e1a02000 	mov	r2, r0
 8005f1c:	e1a03001 	mov	r3, r1
 8005f20:	e1a00004 	mov	r0, r4
 8005f24:	e1a01005 	mov	r1, r5
 8005f28:	eb001062 	bl	800a0b8 <__aeabi_dsub>
	      *s++ = '0' + (int) L;
 8005f2c:	e2888030 	add	r8, r8, #48	; 0x30
 8005f30:	e20880ff 	and	r8, r8, #255	; 0xff
 8005f34:	e4ca8001 	strb	r8, [sl], #1
	      if (d.d < eps.d)
 8005f38:	e1a02006 	mov	r2, r6
 8005f3c:	e1a03007 	mov	r3, r7
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
 8005f40:	e1a05001 	mov	r5, r1
 8005f44:	e1a04000 	mov	r4, r0
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
 8005f48:	eb0012bf 	bl	800aa4c <__aeabi_dcmplt>
 8005f4c:	e3500000 	cmp	r0, #0
		goto ret1;
	      if (1. - d.d < eps.d)
 8005f50:	e1a02004 	mov	r2, r4
 8005f54:	e1a03005 	mov	r3, r5
 8005f58:	e3a00000 	mov	r0, #0
 8005f5c:	e51f1684 	ldr	r1, [pc, #-1668]	; 80058e0 <_dtoa_r+0x5b8>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
 8005f60:	e1a0b00a 	mov	fp, sl
	      if (d.d < eps.d)
 8005f64:	0affffd2 	beq	8005eb4 <_dtoa_r+0xb8c>
 8005f68:	e1a0700a 	mov	r7, sl
 8005f6c:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8005f70:	e59da020 	ldr	sl, [sp, #32]
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
 8005f74:	e59d9068 	ldr	r9, [sp, #104]	; 0x68
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
 8005f78:	e58db020 	str	fp, [sp, #32]
 8005f7c:	eafffeea 	b	8005b2c <_dtoa_r+0x804>
  if (mode > 5)
    {
      mode -= 4;
      try_quick = 0;
    }
  leftright = 1;
 8005f80:	e3a0c001 	mov	ip, #1
 8005f84:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
      break;
    case 3:
      leftright = 0;
      /* no break */
    case 5:
      i = ndigits + k + 1;
 8005f88:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
 8005f8c:	e08cc009 	add	ip, ip, r9
 8005f90:	e28c8001 	add	r8, ip, #1
      ilim = i;
      ilim1 = i - 1;
      if (i <= 0)
 8005f94:	e3580000 	cmp	r8, #0
      break;
    case 3:
      leftright = 0;
      /* no break */
    case 5:
      i = ndigits + k + 1;
 8005f98:	e58dc040 	str	ip, [sp, #64]	; 0x40
      ilim = i;
      ilim1 = i - 1;
      if (i <= 0)
 8005f9c:	da00019c 	ble	8006614 <_dtoa_r+0x12ec>
 8005fa0:	e358000e 	cmp	r8, #14
 8005fa4:	83a04000 	movhi	r4, #0
 8005fa8:	92044001 	andls	r4, r4, #1
 8005fac:	e58d8028 	str	r8, [sp, #40]	; 0x28
 8005fb0:	eaffff28 	b	8005c58 <_dtoa_r+0x930>
  if (mode > 5)
    {
      mode -= 4;
      try_quick = 0;
    }
  leftright = 1;
 8005fb4:	e3a0c001 	mov	ip, #1
 8005fb8:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
 8005fbc:	eaffff1c 	b	8005c34 <_dtoa_r+0x90c>
      if (ndigits <= 0)
	ndigits = 1;
      ilim = ilim1 = i = ndigits;
      break;
    case 3:
      leftright = 0;
 8005fc0:	e3a0c000 	mov	ip, #0
 8005fc4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
 8005fc8:	eaffffee 	b	8005f88 <_dtoa_r+0xc60>
	  ilim = ilim1;
	  k--;
	  d.d *= 10.;
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 8005fcc:	e1a00008 	mov	r0, r8
 8005fd0:	eb001106 	bl	800a3f0 <__aeabi_i2d>
 8005fd4:	e1a0200a 	mov	r2, sl
 8005fd8:	e1a0300b 	mov	r3, fp
 8005fdc:	eb00113a 	bl	800a4cc <__aeabi_dmul>
 8005fe0:	e3a02000 	mov	r2, #0
 8005fe4:	e51f36f8 	ldr	r3, [pc, #-1784]	; 80058f4 <_dtoa_r+0x5cc>
 8005fe8:	eb001033 	bl	800a0bc <__adddf3>
 8005fec:	e1a04000 	mov	r4, r0
      word0 (eps) -= (P - 1) * Exp_msk1;
 8005ff0:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
 8005ff4:	e1a0000a 	mov	r0, sl
 8005ff8:	e1a0100b 	mov	r1, fp
 8005ffc:	e3a02000 	mov	r2, #0
 8006000:	e51f371c 	ldr	r3, [pc, #-1820]	; 80058ec <_dtoa_r+0x5c4>
 8006004:	eb00102b 	bl	800a0b8 <__aeabi_dsub>
	  if (d.d > eps.d)
 8006008:	e1a02004 	mov	r2, r4
 800600c:	e1a03005 	mov	r3, r5
      eps.d = ieps * d.d + 7.;
      word0 (eps) -= (P - 1) * Exp_msk1;
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
 8006010:	e1a0a000 	mov	sl, r0
 8006014:	e1a0b001 	mov	fp, r1
	  if (d.d > eps.d)
 8006018:	eb00129d 	bl	800aa94 <__aeabi_dcmpgt>
 800601c:	e2507000 	subs	r7, r0, #0
 8006020:	1a0000ba 	bne	8006310 <_dtoa_r+0xfe8>
	    goto one_digit;
	  if (d.d < -eps.d)
 8006024:	e1a02004 	mov	r2, r4
 8006028:	e2853102 	add	r3, r5, #-2147483648	; 0x80000000
 800602c:	e1a0000a 	mov	r0, sl
 8006030:	e1a0100b 	mov	r1, fp
 8006034:	eb001284 	bl	800aa4c <__aeabi_dcmplt>
 8006038:	e3500000 	cmp	r0, #0
 800603c:	0a00004e 	beq	800617c <_dtoa_r+0xe54>
    {
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
	{
	  S = mhi = 0;
 8006040:	e1a04007 	mov	r4, r7
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 8006044:	e59d10a4 	ldr	r1, [sp, #164]	; 0xa4
	  goto ret;
 8006048:	e59da020 	ldr	sl, [sp, #32]
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 800604c:	e1e09001 	mvn	r9, r1
	  goto ret;
 8006050:	e3a05000 	mov	r5, #0
 8006054:	eafffea9 	b	8005b00 <_dtoa_r+0x7d8>
    one_digit:
      *s++ = '1';
      k++;
      goto ret;
    }
  if (leftright)
 8006058:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
 800605c:	e35c0000 	cmp	ip, #0
 8006060:	1a000103 	bne	8006474 <_dtoa_r+0x114c>
	  *s++ = dig;
	  if (i == ilim)
	    break;
	  b = multadd (ptr, b, 10, 0);
	  if (mlo == mhi)
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 8006064:	e3a05000 	mov	r5, #0
 8006068:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
 800606c:	e59da020 	ldr	sl, [sp, #32]
 8006070:	e59db028 	ldr	fp, [sp, #40]	; 0x28
 8006074:	ea000005 	b	8006090 <_dtoa_r+0xd68>
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
 8006078:	e1a01008 	mov	r1, r8
 800607c:	e1a00006 	mov	r0, r6
 8006080:	e3a0200a 	mov	r2, #10
 8006084:	e3a03000 	mov	r3, #0
 8006088:	eb0005c3 	bl	800779c <__multadd>
 800608c:	e1a08000 	mov	r8, r0
	}
    }
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
 8006090:	e1a00008 	mov	r0, r8
 8006094:	e1a01007 	mov	r1, r7
 8006098:	ebfffc2a 	bl	8005148 <quorem>
 800609c:	e2800030 	add	r0, r0, #48	; 0x30
 80060a0:	e7ca0005 	strb	r0, [sl, r5]
 80060a4:	e2855001 	add	r5, r5, #1
	if (i >= ilim)
 80060a8:	e155000b 	cmp	r5, fp
 80060ac:	bafffff1 	blt	8006078 <_dtoa_r+0xd50>
 80060b0:	e59da020 	ldr	sl, [sp, #32]
 80060b4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 80060b8:	e58d802c 	str	r8, [sp, #44]	; 0x2c
 80060bc:	e1a0b000 	mov	fp, r0
 80060c0:	e35c0001 	cmp	ip, #1
 80060c4:	a08aa00c 	addge	sl, sl, ip
 80060c8:	b28aa001 	addlt	sl, sl, #1
      goto ret1;
    }

  m2 = b2;
  m5 = b5;
  mhi = mlo = 0;
 80060cc:	e3a05000 	mov	r5, #0
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 80060d0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 80060d4:	e3a02001 	mov	r2, #1
 80060d8:	e1a00006 	mov	r0, r6
 80060dc:	eb000717 	bl	8007d40 <__lshift>
  j = cmp (b, S);
 80060e0:	e1a01007 	mov	r1, r7
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 80060e4:	e58d002c 	str	r0, [sp, #44]	; 0x2c
  j = cmp (b, S);
 80060e8:	eb000755 	bl	8007e44 <__mcmp>
  if ((j > 0) || ((j == 0) && (dig & 1)))
 80060ec:	e3500000 	cmp	r0, #0
 80060f0:	da0001c3 	ble	8006804 <_dtoa_r+0x14dc>
 80060f4:	e59dc020 	ldr	ip, [sp, #32]
 80060f8:	e28cc001 	add	ip, ip, #1
 80060fc:	e55a3001 	ldrb	r3, [sl, #-1]
 8006100:	e58dc030 	str	ip, [sp, #48]	; 0x30
 8006104:	e1a0b00a 	mov	fp, sl
 8006108:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
 800610c:	ea000001 	b	8006118 <_dtoa_r+0xdf0>
 8006110:	e55b3002 	ldrb	r3, [fp, #-2]
 8006114:	e1a0b002 	mov	fp, r2
    {
    roundoff:
      while (*--s == '9')
 8006118:	e3530039 	cmp	r3, #57	; 0x39
 800611c:	e24b2001 	sub	r2, fp, #1
 8006120:	1a0001e2 	bne	80068b0 <_dtoa_r+0x1588>
	if (s == s0)
 8006124:	e15b0001 	cmp	fp, r1
 8006128:	1afffff8 	bne	8006110 <_dtoa_r+0xde8>
	  {
	    k++;
	    *s++ = '1';
 800612c:	e3a03031 	mov	r3, #49	; 0x31
	    goto ret;
 8006130:	e59da020 	ldr	sl, [sp, #32]
    {
    roundoff:
      while (*--s == '9')
	if (s == s0)
	  {
	    k++;
 8006134:	e2899001 	add	r9, r9, #1
	    *s++ = '1';
	    goto ret;
 8006138:	e58db020 	str	fp, [sp, #32]
    roundoff:
      while (*--s == '9')
	if (s == s0)
	  {
	    k++;
	    *s++ = '1';
 800613c:	e5c23000 	strb	r3, [r2]
	    goto ret;
 8006140:	eafffe6e 	b	8005b00 <_dtoa_r+0x7d8>
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 8006144:	e3a0301c 	mov	r3, #28
 8006148:	eafffe34 	b	8005a20 <_dtoa_r+0x6f8>
      ieps = 2;			/* conservative */
      if (k > 0)
	{
	  ds = tens[k & 0xf];
	  j = k >> 4;
	  if (j & Bletch)
 800614c:	e28d2048 	add	r2, sp, #72	; 0x48
 8006150:	e8920006 	ldm	r2, {r1, r2}

      i = 0;
      d2.d = d.d;
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
 8006154:	e3a08002 	mov	r8, #2
      if (k > 0)
	{
	  ds = tens[k & 0xf];
	  j = k >> 4;
	  if (j & Bletch)
 8006158:	e58d1030 	str	r1, [sp, #48]	; 0x30
 800615c:	e58d2034 	str	r2, [sp, #52]	; 0x34
 8006160:	eafffee4 	b	8005cf8 <_dtoa_r+0x9d0>
ret:
  Bfree (ptr, S);
  if (mhi)
    {
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
 8006164:	e1a01005 	mov	r1, r5
 8006168:	e1a00006 	mov	r0, r6
 800616c:	eb000583 	bl	8007780 <_Bfree>
 8006170:	eafffe6a 	b	8005b20 <_dtoa_r+0x7f8>
 8006174:	e59d906c 	ldr	r9, [sp, #108]	; 0x6c
 8006178:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
      d.d = d2.d;
 800617c:	e28db048 	add	fp, sp, #72	; 0x48
 8006180:	e89b0c00 	ldm	fp, {sl, fp}
 8006184:	eafffd3f 	b	8005688 <_dtoa_r+0x360>
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
 8006188:	e2694000 	rsb	r4, r9, #0
 800618c:	e3540000 	cmp	r4, #0
 8006190:	0a00014f 	beq	80066d4 <_dtoa_r+0x13ac>
	{
	  d.d *= tens[j1 & 0xf];
 8006194:	e51f38b4 	ldr	r3, [pc, #-2228]	; 80058e8 <_dtoa_r+0x5c0>
 8006198:	e204200f 	and	r2, r4, #15
 800619c:	e0833182 	add	r3, r3, r2, lsl #3
 80061a0:	e893000c 	ldm	r3, {r2, r3}
 80061a4:	e28d1048 	add	r1, sp, #72	; 0x48
 80061a8:	e8910003 	ldm	r1, {r0, r1}
 80061ac:	eb0010c6 	bl	800a4cc <__aeabi_dmul>
	  for (j = j1 >> 4; j; j >>= 1, i++)
 80061b0:	e1b04244 	asrs	r4, r4, #4
	      }
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
 80061b4:	e1a0a000 	mov	sl, r0
 80061b8:	e1a0b001 	mov	fp, r1
	  for (j = j1 >> 4; j; j >>= 1, i++)
 80061bc:	0a0001e7 	beq	8006960 <_dtoa_r+0x1638>
 80061c0:	e51f58e4 	ldr	r5, [pc, #-2276]	; 80058e4 <_dtoa_r+0x5bc>
 80061c4:	e3a08002 	mov	r8, #2
	    if (j & 1)
 80061c8:	e3140001 	tst	r4, #1
	      {
		ieps++;
		d.d *= bigtens[i];
 80061cc:	1895000c 	ldmne	r5, {r2, r3}
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
	    if (j & 1)
	      {
		ieps++;
 80061d0:	12888001 	addne	r8, r8, #1
		d.d *= bigtens[i];
 80061d4:	1b0010bc 	blne	800a4cc <__aeabi_dmul>
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 80061d8:	e1b040c4 	asrs	r4, r4, #1
 80061dc:	e2855008 	add	r5, r5, #8
 80061e0:	1afffff8 	bne	80061c8 <_dtoa_r+0xea0>
 80061e4:	e1a0a000 	mov	sl, r0
 80061e8:	e1a0b001 	mov	fp, r1
 80061ec:	eafffed6 	b	8005d4c <_dtoa_r+0xa24>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 80061f0:	e51f1910 	ldr	r1, [pc, #-2320]	; 80058e8 <_dtoa_r+0x5c0>
 80061f4:	e24c2001 	sub	r2, ip, #1
 80061f8:	e0811182 	add	r1, r1, r2, lsl #3
 80061fc:	e1a03005 	mov	r3, r5
 8006200:	e58d2058 	str	r2, [sp, #88]	; 0x58
 8006204:	e8910003 	ldm	r1, {r0, r1}
 8006208:	e1a02004 	mov	r2, r4
 800620c:	e58dc00c 	str	ip, [sp, #12]
 8006210:	eb0010ad 	bl	800a4cc <__aeabi_dmul>
 8006214:	e58d0060 	str	r0, [sp, #96]	; 0x60
 8006218:	e58d1064 	str	r1, [sp, #100]	; 0x64
	  for (i = 1;; i++, d.d *= 10.)
	    {
	      L = d.d;
 800621c:	e1a0100b 	mov	r1, fp
 8006220:	e1a0000a 	mov	r0, sl
 8006224:	eb001220 	bl	800aaac <__aeabi_d2iz>
 8006228:	e1a07000 	mov	r7, r0
	      d.d -= L;
 800622c:	eb00106f 	bl	800a3f0 <__aeabi_i2d>
 8006230:	e1a03001 	mov	r3, r1
 8006234:	e1a02000 	mov	r2, r0
 8006238:	e1a0100b 	mov	r1, fp
 800623c:	e1a0000a 	mov	r0, sl
 8006240:	eb000f9c 	bl	800a0b8 <__aeabi_dsub>
	      *s++ = '0' + (int) L;
 8006244:	e59d3020 	ldr	r3, [sp, #32]
 8006248:	e2877030 	add	r7, r7, #48	; 0x30
 800624c:	e4c37001 	strb	r7, [r3], #1
	      if (i == ilim)
 8006250:	e59dc00c 	ldr	ip, [sp, #12]
 8006254:	e35c0001 	cmp	ip, #1
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
	    {
	      L = d.d;
	      d.d -= L;
 8006258:	e1a04000 	mov	r4, r0
 800625c:	e1a05001 	mov	r5, r1
	      *s++ = '0' + (int) L;
 8006260:	e58d3030 	str	r3, [sp, #48]	; 0x30
 8006264:	e1a0b003 	mov	fp, r3
	      if (i == ilim)
 8006268:	0a00001b 	beq	80062dc <_dtoa_r+0xfb4>
 800626c:	e59d1020 	ldr	r1, [sp, #32]
 8006270:	e2413001 	sub	r3, r1, #1
 8006274:	e1a07001 	mov	r7, r1
 8006278:	e083a00c 	add	sl, r3, ip
 800627c:	e1a00004 	mov	r0, r4
 8006280:	e1a01005 	mov	r1, r5
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 8006284:	e3a02000 	mov	r2, #0
 8006288:	e51f39a0 	ldr	r3, [pc, #-2464]	; 80058f0 <_dtoa_r+0x5c8>
 800628c:	eb00108e 	bl	800a4cc <__aeabi_dmul>
 8006290:	e1a05001 	mov	r5, r1
 8006294:	e1a04000 	mov	r4, r0
	    {
	      L = d.d;
 8006298:	eb001203 	bl	800aaac <__aeabi_d2iz>
 800629c:	e1a08000 	mov	r8, r0
	      d.d -= L;
 80062a0:	eb001052 	bl	800a3f0 <__aeabi_i2d>
	      *s++ = '0' + (int) L;
 80062a4:	e2888030 	add	r8, r8, #48	; 0x30
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
	    {
	      L = d.d;
	      d.d -= L;
 80062a8:	e1a02000 	mov	r2, r0
 80062ac:	e1a03001 	mov	r3, r1
 80062b0:	e1a00004 	mov	r0, r4
 80062b4:	e1a01005 	mov	r1, r5
 80062b8:	eb000f7e 	bl	800a0b8 <__aeabi_dsub>
	      *s++ = '0' + (int) L;
 80062bc:	e5e78001 	strb	r8, [r7, #1]!
	      if (i == ilim)
 80062c0:	e157000a 	cmp	r7, sl
 80062c4:	1affffee 	bne	8006284 <_dtoa_r+0xf5c>
 80062c8:	e1a05001 	mov	r5, r1
 80062cc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
 80062d0:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
 80062d4:	e1a04000 	mov	r4, r0
 80062d8:	e08cb001 	add	fp, ip, r1
		{
		  if (d.d > 0.5 + eps.d)
 80062dc:	e3a02000 	mov	r2, #0
 80062e0:	e51f39f0 	ldr	r3, [pc, #-2544]	; 80058f8 <_dtoa_r+0x5d0>
 80062e4:	e28d1060 	add	r1, sp, #96	; 0x60
 80062e8:	e8910003 	ldm	r1, {r0, r1}
 80062ec:	eb000f72 	bl	800a0bc <__adddf3>
 80062f0:	e1a02004 	mov	r2, r4
 80062f4:	e1a03005 	mov	r3, r5
 80062f8:	eb0011d3 	bl	800aa4c <__aeabi_dcmplt>
 80062fc:	e3500000 	cmp	r0, #0
 8006300:	0a0000f7 	beq	80066e4 <_dtoa_r+0x13bc>
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8006304:	e59da020 	ldr	sl, [sp, #32]
 8006308:	e55b8001 	ldrb	r8, [fp, #-1]
 800630c:	eafffd51 	b	8005858 <_dtoa_r+0x530>
	}
      eps.d = ieps * d.d + 7.;
      word0 (eps) -= (P - 1) * Exp_msk1;
      if (ilim == 0)
	{
	  S = mhi = 0;
 8006310:	e3a07000 	mov	r7, #0
 8006314:	e1a04007 	mov	r4, r7
 8006318:	eafffdf1 	b	8005ae4 <_dtoa_r+0x7bc>
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 800631c:	e5973010 	ldr	r3, [r7, #16]
 8006320:	e0873103 	add	r3, r7, r3, lsl #2
 8006324:	e5930010 	ldr	r0, [r3, #16]
 8006328:	eb00058c 	bl	8007960 <__hi0bits>
 800632c:	e2600020 	rsb	r0, r0, #32
 8006330:	eafffdb2 	b	8005a00 <_dtoa_r+0x6d8>
    b = lshift (ptr, b, b2);
  if (s2 > 0)
    S = lshift (ptr, S, s2);
  if (k_check)
    {
      if (cmp (b, S) < 0)
 8006334:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
 8006338:	e1a01007 	mov	r1, r7
 800633c:	eb0006c0 	bl	8007e44 <__mcmp>
 8006340:	e3500000 	cmp	r0, #0
 8006344:	aafffdcf 	bge	8005a88 <_dtoa_r+0x760>
	{
	  k--;
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 8006348:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 800634c:	e1a00006 	mov	r0, r6
 8006350:	e3a0200a 	mov	r2, #10
 8006354:	e3a03000 	mov	r3, #0
 8006358:	eb00050f 	bl	800779c <__multadd>
	  if (leftright)
 800635c:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
 8006360:	e35c0000 	cmp	ip, #0
  if (k_check)
    {
      if (cmp (b, S) < 0)
	{
	  k--;
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 8006364:	e58d002c 	str	r0, [sp, #44]	; 0x2c
    S = lshift (ptr, S, s2);
  if (k_check)
    {
      if (cmp (b, S) < 0)
	{
	  k--;
 8006368:	e2499001 	sub	r9, r9, #1
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
	  if (leftright)
 800636c:	1a000030 	bne	8006434 <_dtoa_r+0x110c>
	    mhi = multadd (ptr, mhi, 10, 0);
	  ilim = ilim1;
	}
    }
  if (ilim <= 0 && mode > 2)
 8006370:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8006374:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
 8006378:	e35c0000 	cmp	ip, #0
 800637c:	c3a03000 	movgt	r3, #0
 8006380:	d3a03001 	movle	r3, #1
 8006384:	e3510002 	cmp	r1, #2
 8006388:	d3a03000 	movle	r3, #0
 800638c:	e3530000 	cmp	r3, #0
 8006390:	058dc028 	streq	ip, [sp, #40]	; 0x28
 8006394:	0affff32 	beq	8006064 <_dtoa_r+0xd3c>
 8006398:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 800639c:	e58dc028 	str	ip, [sp, #40]	; 0x28
 80063a0:	eafffdc1 	b	8005aac <_dtoa_r+0x784>
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
	{
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
 80063a4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 80063a8:	e35c0000 	cmp	ip, #0
 80063ac:	1a000120 	bne	8006834 <_dtoa_r+0x150c>
 80063b0:	e3a02000 	mov	r2, #0
 80063b4:	e51f3ad0 	ldr	r3, [pc, #-2768]	; 80058ec <_dtoa_r+0x5c4>
 80063b8:	e28d1018 	add	r1, sp, #24
 80063bc:	e8910003 	ldm	r1, {r0, r1}
 80063c0:	eb001041 	bl	800a4cc <__aeabi_dmul>
 80063c4:	e1a0200a 	mov	r2, sl
 80063c8:	e1a0300b 	mov	r3, fp
 80063cc:	eb0011aa 	bl	800aa7c <__aeabi_dcmpge>
    {
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
	{
	  S = mhi = 0;
 80063d0:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	  if (ilim < 0 || d.d <= 5 * ds)
 80063d4:	e3500000 	cmp	r0, #0
    {
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
	{
	  S = mhi = 0;
 80063d8:	e1a04007 	mov	r4, r7
	  if (ilim < 0 || d.d <= 5 * ds)
 80063dc:	1affff18 	bne	8006044 <_dtoa_r+0xd1c>
 80063e0:	eafffdbf 	b	8005ae4 <_dtoa_r+0x7bc>
  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
  if (mode < 2)
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 80063e4:	e35a0000 	cmp	sl, #0
 80063e8:	1afffd7f 	bne	80059ec <_dtoa_r+0x6c4>
 80063ec:	e3cb34ff 	bic	r3, fp, #-16777216	; 0xff000000
 80063f0:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 80063f4:	e3530000 	cmp	r3, #0
  if (s5 > 0)
    S = pow5mult (ptr, S, s5);

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 80063f8:	11a0800a 	movne	r8, sl
  if (mode < 2)
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 80063fc:	1afffd7b 	bne	80059f0 <_dtoa_r+0x6c8>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 8006400:	e3cb8102 	bic	r8, fp, #-2147483648	; 0x80000000
 8006404:	e1a08a28 	lsr	r8, r8, #20
 8006408:	e1a08a08 	lsl	r8, r8, #20
 800640c:	e3580000 	cmp	r8, #0
 8006410:	0afffd76 	beq	80059f0 <_dtoa_r+0x6c8>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 8006414:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
 8006418:	e28cc001 	add	ip, ip, #1
 800641c:	e58dc024 	str	ip, [sp, #36]	; 0x24
	  s2 += Log2P;
 8006420:	e59dc018 	ldr	ip, [sp, #24]
 8006424:	e28cc001 	add	ip, ip, #1
 8006428:	e58dc018 	str	ip, [sp, #24]
	  spec_case = 1;
 800642c:	e3a08001 	mov	r8, #1
 8006430:	eafffd6e 	b	80059f0 <_dtoa_r+0x6c8>
      if (cmp (b, S) < 0)
	{
	  k--;
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
	  if (leftright)
	    mhi = multadd (ptr, mhi, 10, 0);
 8006434:	e3a03000 	mov	r3, #0
 8006438:	e1a01004 	mov	r1, r4
 800643c:	e1a00006 	mov	r0, r6
 8006440:	e3a0200a 	mov	r2, #10
 8006444:	eb0004d4 	bl	800779c <__multadd>
	  ilim = ilim1;
	}
    }
  if (ilim <= 0 && mode > 2)
 8006448:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 800644c:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
 8006450:	e35c0000 	cmp	ip, #0
 8006454:	c3a03000 	movgt	r3, #0
 8006458:	d3a03001 	movle	r3, #1
 800645c:	e3510002 	cmp	r1, #2
 8006460:	d3a03000 	movle	r3, #0
 8006464:	e3530000 	cmp	r3, #0
      if (cmp (b, S) < 0)
	{
	  k--;
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
	  if (leftright)
	    mhi = multadd (ptr, mhi, 10, 0);
 8006468:	e1a04000 	mov	r4, r0
	  ilim = ilim1;
	}
    }
  if (ilim <= 0 && mode > 2)
 800646c:	058dc028 	streq	ip, [sp, #40]	; 0x28
 8006470:	1affffc8 	bne	8006398 <_dtoa_r+0x1070>
      k++;
      goto ret;
    }
  if (leftright)
    {
      if (m2 > 0)
 8006474:	e3550000 	cmp	r5, #0
 8006478:	da000004 	ble	8006490 <_dtoa_r+0x1168>
	mhi = lshift (ptr, mhi, m2);
 800647c:	e1a01004 	mov	r1, r4
 8006480:	e1a02005 	mov	r2, r5
 8006484:	e1a00006 	mov	r0, r6
 8006488:	eb00062c 	bl	8007d40 <__lshift>
 800648c:	e1a04000 	mov	r4, r0
      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
      if (spec_case)
 8006490:	e3580000 	cmp	r8, #0
 8006494:	01a08004 	moveq	r8, r4
 8006498:	1a0000e7 	bne	800683c <_dtoa_r+0x1514>
 800649c:	e59dc020 	ldr	ip, [sp, #32]
 80064a0:	e28cc001 	add	ip, ip, #1
 80064a4:	e58dc030 	str	ip, [sp, #48]	; 0x30
 80064a8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 80064ac:	e59dc020 	ldr	ip, [sp, #32]
 80064b0:	e08cc001 	add	ip, ip, r1
 80064b4:	e58dc028 	str	ip, [sp, #40]	; 0x28
	  j = cmp (b, mlo);
	  delta = diff (ptr, S, mhi);
	  j1 = delta->_sign ? 1 : cmp (b, delta);
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 80064b8:	e20ac001 	and	ip, sl, #1
 80064bc:	e1a05004 	mov	r5, r4
 80064c0:	e58d9038 	str	r9, [sp, #56]	; 0x38
 80064c4:	e58dc018 	str	ip, [sp, #24]
 80064c8:	e1a09007 	mov	r9, r7
 80064cc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
 80064d0:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
 80064d4:	ea00002e 	b	8006594 <_dtoa_r+0x126c>
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
	  delta = diff (ptr, S, mhi);
	  j1 = delta->_sign ? 1 : cmp (b, delta);
	  Bfree (ptr, delta);
 80064d8:	e1a01003 	mov	r1, r3
 80064dc:	e1a00006 	mov	r0, r6
 80064e0:	e58d200c 	str	r2, [sp, #12]
 80064e4:	eb0004a5 	bl	8007780 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 80064e8:	e59d200c 	ldr	r2, [sp, #12]
 80064ec:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 80064f0:	e192c00c 	orrs	ip, r2, ip
 80064f4:	1a000002 	bne	8006504 <_dtoa_r+0x11dc>
 80064f8:	e59dc018 	ldr	ip, [sp, #24]
 80064fc:	e35c0000 	cmp	ip, #0
 8006500:	0a000105 	beq	800691c <_dtoa_r+0x15f4>
		dig++;
	      *s++ = dig;
	      goto ret;
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 8006504:	e35a0000 	cmp	sl, #0
 8006508:	ba00009f 	blt	800678c <_dtoa_r+0x1464>
 800650c:	e59dc0a0 	ldr	ip, [sp, #160]	; 0xa0
 8006510:	e19ac00c 	orrs	ip, sl, ip
 8006514:	1a000002 	bne	8006524 <_dtoa_r+0x11fc>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 8006518:	e59dc018 	ldr	ip, [sp, #24]
 800651c:	e35c0000 	cmp	ip, #0
 8006520:	0a000099 	beq	800678c <_dtoa_r+0x1464>
		    goto round_9_up;
		}
	      *s++ = dig;
	      goto ret;
	    }
	  if (j1 > 0)
 8006524:	e3520000 	cmp	r2, #0
 8006528:	ca0000e5 	bgt	80068c4 <_dtoa_r+0x159c>
		}
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
 800652c:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8006530:	e154000c 	cmp	r4, ip
		  goto roundoff;
		}
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
 8006534:	e544b001 	strb	fp, [r4, #-1]
 8006538:	e1a0a004 	mov	sl, r4
	  if (i == ilim)
 800653c:	0a0000ec 	beq	80068f4 <_dtoa_r+0x15cc>
	    break;
	  b = multadd (ptr, b, 10, 0);
 8006540:	e1a01007 	mov	r1, r7
 8006544:	e3a0200a 	mov	r2, #10
 8006548:	e3a03000 	mov	r3, #0
 800654c:	e1a00006 	mov	r0, r6
 8006550:	eb000491 	bl	800779c <__multadd>
	  if (mlo == mhi)
 8006554:	e1550008 	cmp	r5, r8
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
	  b = multadd (ptr, b, 10, 0);
 8006558:	e1a07000 	mov	r7, r0
	  if (mlo == mhi)
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 800655c:	e1a01005 	mov	r1, r5
 8006560:	e1a00006 	mov	r0, r6
 8006564:	e3a0200a 	mov	r2, #10
 8006568:	e3a03000 	mov	r3, #0
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
	  b = multadd (ptr, b, 10, 0);
	  if (mlo == mhi)
 800656c:	0a000024 	beq	8006604 <_dtoa_r+0x12dc>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 8006570:	eb000489 	bl	800779c <__multadd>
	      mhi = multadd (ptr, mhi, 10, 0);
 8006574:	e1a01008 	mov	r1, r8
	  b = multadd (ptr, b, 10, 0);
	  if (mlo == mhi)
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 8006578:	e1a05000 	mov	r5, r0
	      mhi = multadd (ptr, mhi, 10, 0);
 800657c:	e3a0200a 	mov	r2, #10
 8006580:	e1a00006 	mov	r0, r6
 8006584:	e3a03000 	mov	r3, #0
 8006588:	eb000483 	bl	800779c <__multadd>
 800658c:	e1a08000 	mov	r8, r0
 8006590:	e2844001 	add	r4, r4, #1
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
	{
	  dig = quorem (b, S) + '0';
 8006594:	e1a01009 	mov	r1, r9
 8006598:	e1a00007 	mov	r0, r7
 800659c:	ebfffae9 	bl	8005148 <quorem>
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 80065a0:	e1a01005 	mov	r1, r5
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
	{
	  dig = quorem (b, S) + '0';
 80065a4:	e58d0014 	str	r0, [sp, #20]
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 80065a8:	e1a00007 	mov	r0, r7
 80065ac:	eb000624 	bl	8007e44 <__mcmp>
	  delta = diff (ptr, S, mhi);
 80065b0:	e1a02008 	mov	r2, r8
	{
	  dig = quorem (b, S) + '0';
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 80065b4:	e1a0a000 	mov	sl, r0
	  delta = diff (ptr, S, mhi);
 80065b8:	e1a01009 	mov	r1, r9
 80065bc:	e1a00006 	mov	r0, r6
 80065c0:	eb000638 	bl	8007ea8 <__mdiff>
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
	{
	  dig = quorem (b, S) + '0';
 80065c4:	e59dc014 	ldr	ip, [sp, #20]
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
	  delta = diff (ptr, S, mhi);
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 80065c8:	e590200c 	ldr	r2, [r0, #12]
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
	{
	  dig = quorem (b, S) + '0';
 80065cc:	e28cb030 	add	fp, ip, #48	; 0x30
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
	  delta = diff (ptr, S, mhi);
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 80065d0:	e3520000 	cmp	r2, #0
 80065d4:	e244c001 	sub	ip, r4, #1
	  dig = quorem (b, S) + '0';
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
	  delta = diff (ptr, S, mhi);
 80065d8:	e1a03000 	mov	r3, r0
 80065dc:	e58dc024 	str	ip, [sp, #36]	; 0x24
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 80065e0:	13a02001 	movne	r2, #1
 80065e4:	1affffbb 	bne	80064d8 <_dtoa_r+0x11b0>
 80065e8:	e1a01003 	mov	r1, r3
 80065ec:	e1a00007 	mov	r0, r7
 80065f0:	e58d300c 	str	r3, [sp, #12]
 80065f4:	eb000612 	bl	8007e44 <__mcmp>
 80065f8:	e59d300c 	ldr	r3, [sp, #12]
 80065fc:	e1a02000 	mov	r2, r0
 8006600:	eaffffb4 	b	80064d8 <_dtoa_r+0x11b0>
	  *s++ = dig;
	  if (i == ilim)
	    break;
	  b = multadd (ptr, b, 10, 0);
	  if (mlo == mhi)
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 8006604:	eb000464 	bl	800779c <__multadd>
 8006608:	e1a05000 	mov	r5, r0
 800660c:	e1a08000 	mov	r8, r0
 8006610:	eaffffde 	b	8006590 <_dtoa_r+0x1268>
 8006614:	e358000e 	cmp	r8, #14
      /* no break */
    case 5:
      i = ndigits + k + 1;
      ilim = i;
      ilim1 = i - 1;
      if (i <= 0)
 8006618:	e58d8028 	str	r8, [sp, #40]	; 0x28
 800661c:	83a03000 	movhi	r3, #0
 8006620:	93a03001 	movls	r3, #1
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 8006624:	e3a01000 	mov	r1, #0
 8006628:	e0034004 	and	r4, r3, r4
 800662c:	e5861044 	str	r1, [r6, #68]	; 0x44
 8006630:	eafffd95 	b	8005c8c <_dtoa_r+0x964>
      break;
    case 2:
      leftright = 0;
      /* no break */
    case 4:
      if (ndigits <= 0)
 8006634:	e3a03001 	mov	r3, #1
	ndigits = 1;
 8006638:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
 800663c:	e58d3040 	str	r3, [sp, #64]	; 0x40
 8006640:	e58d3028 	str	r3, [sp, #40]	; 0x28
 8006644:	eafffff6 	b	8006624 <_dtoa_r+0x12fc>
	    }
         if ((j = b5 - m5) != 0)
	    b = pow5mult (ptr, b, j);
	}
      else
	b = pow5mult (ptr, b, b5);
 8006648:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 800664c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
 8006650:	e1a00006 	mov	r0, r6
 8006654:	eb00057c 	bl	8007c4c <__pow5mult>
 8006658:	e58d002c 	str	r0, [sp, #44]	; 0x2c
 800665c:	eafffcd3 	b	80059b0 <_dtoa_r+0x688>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 8006660:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
 8006664:	e35c0000 	cmp	ip, #0
 8006668:	0afffe57 	beq	8005fcc <_dtoa_r+0xca4>
	{
	  if (ilim1 <= 0)
 800666c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 8006670:	e35c0000 	cmp	ip, #0
 8006674:	dafffec0 	ble	800617c <_dtoa_r+0xe54>
	    goto fast_failed;
	  ilim = ilim1;
	  k--;
	  d.d *= 10.;
 8006678:	e3a02000 	mov	r2, #0
 800667c:	e51f3d94 	ldr	r3, [pc, #-3476]	; 80058f0 <_dtoa_r+0x5c8>
 8006680:	e1a0000a 	mov	r0, sl
 8006684:	e1a0100b 	mov	r1, fp
 8006688:	eb000f8f 	bl	800a4cc <__aeabi_dmul>
 800668c:	e1a0a000 	mov	sl, r0
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 8006690:	e2880001 	add	r0, r8, #1
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
	  ilim = ilim1;
	  k--;
	  d.d *= 10.;
 8006694:	e1a0b001 	mov	fp, r1
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 8006698:	eb000f54 	bl	800a3f0 <__aeabi_i2d>
 800669c:	e1a02000 	mov	r2, r0
 80066a0:	e1a03001 	mov	r3, r1
 80066a4:	e1a0000a 	mov	r0, sl
 80066a8:	e1a0100b 	mov	r1, fp
 80066ac:	eb000f86 	bl	800a4cc <__aeabi_dmul>
 80066b0:	e3a02000 	mov	r2, #0
 80066b4:	e51f3dc8 	ldr	r3, [pc, #-3528]	; 80058f4 <_dtoa_r+0x5cc>
 80066b8:	eb000e7f 	bl	800a0bc <__adddf3>
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
	  ilim = ilim1;
	  k--;
 80066bc:	e249c001 	sub	ip, r9, #1
 80066c0:	e58dc068 	str	ip, [sp, #104]	; 0x68
	  d.d *= 10.;
	  ieps++;
	}
      eps.d = ieps * d.d + 7.;
 80066c4:	e1a04000 	mov	r4, r0
      word0 (eps) -= (P - 1) * Exp_msk1;
 80066c8:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
 80066cc:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
 80066d0:	eafffdb6 	b	8005db0 <_dtoa_r+0xa88>
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
 80066d4:	e28db048 	add	fp, sp, #72	; 0x48
 80066d8:	e89b0c00 	ldm	fp, {sl, fp}

      i = 0;
      d2.d = d.d;
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
 80066dc:	e3a08002 	mov	r8, #2
 80066e0:	eafffd99 	b	8005d4c <_dtoa_r+0xa24>
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 80066e4:	e28d3060 	add	r3, sp, #96	; 0x60
 80066e8:	e893000c 	ldm	r3, {r2, r3}
 80066ec:	e3a00000 	mov	r0, #0
 80066f0:	e51f1e00 	ldr	r1, [pc, #-3584]	; 80058f8 <_dtoa_r+0x5d0>
 80066f4:	eb000e6f 	bl	800a0b8 <__aeabi_dsub>
 80066f8:	e1a02004 	mov	r2, r4
 80066fc:	e1a03005 	mov	r3, r5
 8006700:	eb0010e3 	bl	800aa94 <__aeabi_dcmpgt>
 8006704:	e3500000 	cmp	r0, #0
 8006708:	0afffe9b 	beq	800617c <_dtoa_r+0xe54>
 800670c:	e1a0900b 	mov	r9, fp
		    {
		      while (*--s == '0');
 8006710:	e5592001 	ldrb	r2, [r9, #-1]
 8006714:	e3520030 	cmp	r2, #48	; 0x30
 8006718:	e1a03009 	mov	r3, r9
 800671c:	e2499001 	sub	r9, r9, #1
 8006720:	0afffffa 	beq	8006710 <_dtoa_r+0x13e8>
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8006724:	e59da020 	ldr	sl, [sp, #32]
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 8006728:	e59d9068 	ldr	r9, [sp, #104]	; 0x68
		      s++;
 800672c:	e58d3020 	str	r3, [sp, #32]
 8006730:	eafffcfd 	b	8005b2c <_dtoa_r+0x804>
	      b1 = mult (ptr, mhi, b);
	      Bfree (ptr, b);
	      b = b1;
	    }
         if ((j = b5 - m5) != 0)
	    b = pow5mult (ptr, b, j);
 8006734:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 8006738:	e1a00006 	mov	r0, r6
 800673c:	eb000542 	bl	8007c4c <__pow5mult>
 8006740:	e58d002c 	str	r0, [sp, #44]	; 0x2c
 8006744:	eafffc99 	b	80059b0 <_dtoa_r+0x688>
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 8006748:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
 800674c:	e35c0000 	cmp	ip, #0
 8006750:	059d3070 	ldreq	r3, [sp, #112]	; 0x70
 8006754:	12833e43 	addne	r3, r3, #1072	; 0x430
 8006758:	12833003 	addne	r3, r3, #3
 800675c:	159d7038 	ldrne	r7, [sp, #56]	; 0x38
 8006760:	059d7038 	ldreq	r7, [sp, #56]	; 0x38
 8006764:	02633036 	rsbeq	r3, r3, #54	; 0x36
	    break;
	}
      goto ret1;
    }

  m2 = b2;
 8006768:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
 800676c:	eafffd23 	b	8005c00 <_dtoa_r+0x8d8>
 8006770:	e59d9014 	ldr	r9, [sp, #20]
		      }
		  ++*s++;
		}
	      break;
	    }
	  if (!(d.d *= 10.))
 8006774:	e59da020 	ldr	sl, [sp, #32]
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8006778:	e58db020 	str	fp, [sp, #32]
 800677c:	eafffcea 	b	8005b2c <_dtoa_r+0x804>
 8006780:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 8006784:	e59da020 	ldr	sl, [sp, #32]
 8006788:	eafffc32 	b	8005858 <_dtoa_r+0x530>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
#endif
           ))
	    {
	      if (j1 > 0)
 800678c:	e3520000 	cmp	r2, #0
 8006790:	e58d702c 	str	r7, [sp, #44]	; 0x2c
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
	{
	  dig = quorem (b, S) + '0';
 8006794:	e1a0400b 	mov	r4, fp
 8006798:	e1a07009 	mov	r7, r9
 800679c:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
#endif
           ))
	    {
	      if (j1 > 0)
 80067a0:	da00000c 	ble	80067d8 <_dtoa_r+0x14b0>
		{
		  b = lshift (ptr, b, 1);
 80067a4:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 80067a8:	e3a02001 	mov	r2, #1
 80067ac:	e1a00006 	mov	r0, r6
 80067b0:	eb000562 	bl	8007d40 <__lshift>
		  j1 = cmp (b, S);
 80067b4:	e1a01007 	mov	r1, r7
#endif
           ))
	    {
	      if (j1 > 0)
		{
		  b = lshift (ptr, b, 1);
 80067b8:	e58d002c 	str	r0, [sp, #44]	; 0x2c
		  j1 = cmp (b, S);
 80067bc:	eb0005a0 	bl	8007e44 <__mcmp>
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 80067c0:	e3500000 	cmp	r0, #0
 80067c4:	da00005d 	ble	8006940 <_dtoa_r+0x1618>
		      && dig++ == '9')
 80067c8:	e59d3014 	ldr	r3, [sp, #20]
 80067cc:	e3540039 	cmp	r4, #57	; 0x39
 80067d0:	e283b031 	add	fp, r3, #49	; 0x31
 80067d4:	0a00004b 	beq	8006908 <_dtoa_r+0x15e0>
		    goto round_9_up;
		}
	      *s++ = dig;
 80067d8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 80067dc:	e4c3b001 	strb	fp, [r3], #1
	      goto ret;
 80067e0:	e59da020 	ldr	sl, [sp, #32]
 80067e4:	e1a04008 	mov	r4, r8
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
		}
	      *s++ = dig;
 80067e8:	e58d3020 	str	r3, [sp, #32]
	      goto ret;
 80067ec:	eafffcc3 	b	8005b00 <_dtoa_r+0x7d8>
 80067f0:	e2882001 	add	r2, r8, #1
 80067f4:	e58d9020 	str	r9, [sp, #32]
 80067f8:	e20220ff 	and	r2, r2, #255	; 0xff
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 80067fc:	e59d9068 	ldr	r9, [sp, #104]	; 0x68
 8006800:	eafffc25 	b	800589c <_dtoa_r+0x574>

  /* Round off last digit */

  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
 8006804:	1a000001 	bne	8006810 <_dtoa_r+0x14e8>
 8006808:	e31b0001 	tst	fp, #1
 800680c:	1afffe38 	bne	80060f4 <_dtoa_r+0xdcc>
 8006810:	e1a0b00a 	mov	fp, sl
	  }
      ++*s++;
    }
  else
    {
      while (*--s == '0');
 8006814:	e55b2001 	ldrb	r2, [fp, #-1]
 8006818:	e3520030 	cmp	r2, #48	; 0x30
 800681c:	e1a0300b 	mov	r3, fp
 8006820:	e24bb001 	sub	fp, fp, #1
 8006824:	0afffffa 	beq	8006814 <_dtoa_r+0x14ec>
 8006828:	e59da020 	ldr	sl, [sp, #32]
      s++;
 800682c:	e58d3020 	str	r3, [sp, #32]
 8006830:	eafffcb2 	b	8005b00 <_dtoa_r+0x7d8>
    {
      /* Yes. */
      ds = tens[k];
      if (ndigits < 0 && ilim <= 0)
	{
	  S = mhi = 0;
 8006834:	e3a07000 	mov	r7, #0
 8006838:	eafffe00 	b	8006040 <_dtoa_r+0xd18>
       */

      mlo = mhi;
      if (spec_case)
	{
	  mhi = Balloc (ptr, mhi->_k);
 800683c:	e5941004 	ldr	r1, [r4, #4]
 8006840:	e1a00006 	mov	r0, r6
 8006844:	eb0003aa 	bl	80076f4 <_Balloc>
	  Bcopy (mhi, mlo);
 8006848:	e5942010 	ldr	r2, [r4, #16]
 800684c:	e2822002 	add	r2, r2, #2
       */

      mlo = mhi;
      if (spec_case)
	{
	  mhi = Balloc (ptr, mhi->_k);
 8006850:	e1a05000 	mov	r5, r0
	  Bcopy (mhi, mlo);
 8006854:	e1a02102 	lsl	r2, r2, #2
 8006858:	e284100c 	add	r1, r4, #12
 800685c:	e280000c 	add	r0, r0, #12
 8006860:	eb000364 	bl	80075f8 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 8006864:	e1a00006 	mov	r0, r6
 8006868:	e1a01005 	mov	r1, r5
 800686c:	e3a02001 	mov	r2, #1
 8006870:	eb000532 	bl	8007d40 <__lshift>
 8006874:	e1a08000 	mov	r8, r0
 8006878:	eaffff07 	b	800649c <_dtoa_r+0x1174>
#endif
	  *s++ = '0' + (int) L;
	  if (i == ilim)
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 800687c:	e28d1018 	add	r1, sp, #24
 8006880:	e8910003 	ldm	r1, {r0, r1}
 8006884:	e1a02004 	mov	r2, r4
 8006888:	e1a03005 	mov	r3, r5
 800688c:	eb001068 	bl	800aa34 <__aeabi_dcmpeq>
 8006890:	e3500000 	cmp	r0, #0
 8006894:	0affffb6 	beq	8006774 <_dtoa_r+0x144c>
 8006898:	e3170001 	tst	r7, #1
 800689c:	e59da020 	ldr	sl, [sp, #32]
 80068a0:	0affffb4 	beq	8006778 <_dtoa_r+0x1450>
 80068a4:	e58d9068 	str	r9, [sp, #104]	; 0x68
 80068a8:	e55b8001 	ldrb	r8, [fp, #-1]
 80068ac:	eafffbe9 	b	8005858 <_dtoa_r+0x530>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 80068b0:	e2833001 	add	r3, r3, #1
 80068b4:	e59da020 	ldr	sl, [sp, #32]
 80068b8:	e5c23000 	strb	r3, [r2]
 80068bc:	e58db020 	str	fp, [sp, #32]
 80068c0:	eafffc8e 	b	8005b00 <_dtoa_r+0x7d8>
	      *s++ = dig;
	      goto ret;
	    }
	  if (j1 > 0)
	    {
	      if (dig == '9')
 80068c4:	e35b0039 	cmp	fp, #57	; 0x39
 80068c8:	e58d702c 	str	r7, [sp, #44]	; 0x2c
 80068cc:	e1a07009 	mov	r7, r9
 80068d0:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
 80068d4:	0a00000b 	beq	8006908 <_dtoa_r+0x15e0>
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
		  goto roundoff;
		}
	      *s++ = dig + 1;
 80068d8:	e28b3001 	add	r3, fp, #1
 80068dc:	e59db024 	ldr	fp, [sp, #36]	; 0x24
 80068e0:	e4cb3001 	strb	r3, [fp], #1
	      goto ret;
 80068e4:	e59da020 	ldr	sl, [sp, #32]
 80068e8:	e1a04008 	mov	r4, r8
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
		  goto roundoff;
		}
	      *s++ = dig + 1;
 80068ec:	e58db020 	str	fp, [sp, #32]
	      goto ret;
 80068f0:	eafffc82 	b	8005b00 <_dtoa_r+0x7d8>
 80068f4:	e58d702c 	str	r7, [sp, #44]	; 0x2c
	    }
	  *s++ = dig;
	  if (i == ilim)
 80068f8:	e1a04008 	mov	r4, r8
 80068fc:	e1a07009 	mov	r7, r9
 8006900:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
 8006904:	eafffdf1 	b	80060d0 <_dtoa_r+0xda8>
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 8006908:	e59da024 	ldr	sl, [sp, #36]	; 0x24
 800690c:	e3a03039 	mov	r3, #57	; 0x39
		  goto roundoff;
 8006910:	e1a04008 	mov	r4, r8
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 8006914:	e4ca3001 	strb	r3, [sl], #1
		  goto roundoff;
 8006918:	eafffdf9 	b	8006104 <_dtoa_r+0xddc>
	  j1 = delta->_sign ? 1 : cmp (b, delta);
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
 800691c:	e35b0039 	cmp	fp, #57	; 0x39
 8006920:	e58d702c 	str	r7, [sp, #44]	; 0x2c
 8006924:	e1a07009 	mov	r7, r9
 8006928:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
 800692c:	0afffff5 	beq	8006908 <_dtoa_r+0x15e0>
		goto round_9_up;
	      if (j > 0)
 8006930:	e35a0000 	cmp	sl, #0
		dig++;
 8006934:	c59d3014 	ldrgt	r3, [sp, #20]
 8006938:	c283b031 	addgt	fp, r3, #49	; 0x31
 800693c:	eaffffa5 	b	80067d8 <_dtoa_r+0x14b0>
	    {
	      if (j1 > 0)
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 8006940:	1affffa4 	bne	80067d8 <_dtoa_r+0x14b0>
 8006944:	e31b0001 	tst	fp, #1
 8006948:	0affffa2 	beq	80067d8 <_dtoa_r+0x14b0>
 800694c:	eaffff9d 	b	80067c8 <_dtoa_r+0x14a0>
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8006950:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
		      }
		  ++*s++;
		}
	      break;
	    }
	  if (!(d.d *= 10.))
 8006954:	e59da020 	ldr	sl, [sp, #32]
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 8006958:	e58dc020 	str	ip, [sp, #32]
 800695c:	eafffc72 	b	8005b2c <_dtoa_r+0x804>

      i = 0;
      d2.d = d.d;
      k0 = k;
      ilim0 = ilim;
      ieps = 2;			/* conservative */
 8006960:	e3a08002 	mov	r8, #2
 8006964:	eafffcf8 	b	8005d4c <_dtoa_r+0xa24>
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
 8006968:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 800696c:	e59da020 	ldr	sl, [sp, #32]
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
 8006970:	e59d9068 	ldr	r9, [sp, #104]	; 0x68
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
	  for (i = 0;;)
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
 8006974:	e58dc020 	str	ip, [sp, #32]
 8006978:	eafffc6b 	b	8005b2c <_dtoa_r+0x804>
 800697c:	1263303c 	rsbne	r3, r3, #60	; 0x3c
      i -= 4;
      b2 += i;
      m2 += i;
      s2 += i;
    }
  else if (i < 4)
 8006980:	0afffc2d 	beq	8005a3c <_dtoa_r+0x714>
 8006984:	eafffc25 	b	8005a20 <_dtoa_r+0x6f8>

08006988 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 8006988:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;

  top_size = chunksize(top);
 800698c:	e59f50e4 	ldr	r5, [pc, #228]	; 8006a78 <_malloc_trim_r+0xf0>
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 8006990:	e1a07001 	mov	r7, r1
 8006994:	e1a04000 	mov	r4, r0
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;
 8006998:	eb000353 	bl	80076ec <__malloc_lock>

  top_size = chunksize(top);
 800699c:	e5953008 	ldr	r3, [r5, #8]
 80069a0:	e5936004 	ldr	r6, [r3, #4]
 80069a4:	e3c66003 	bic	r6, r6, #3
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 80069a8:	e2863efe 	add	r3, r6, #4064	; 0xfe0
 80069ac:	e283300f 	add	r3, r3, #15
 80069b0:	e0677003 	rsb	r7, r7, r3
 80069b4:	e1a07627 	lsr	r7, r7, #12
 80069b8:	e2477001 	sub	r7, r7, #1
 80069bc:	e1a07607 	lsl	r7, r7, #12

  if (extra < (long)pagesz)  /* Not enough memory to release */
 80069c0:	e3570a01 	cmp	r7, #4096	; 0x1000
 80069c4:	ba000006 	blt	80069e4 <_malloc_trim_r+0x5c>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 80069c8:	e1a00004 	mov	r0, r4
 80069cc:	e3a01000 	mov	r1, #0
 80069d0:	eb0006a5 	bl	800846c <_sbrk_r>
    if (current_brk != (char*)(top) + top_size)
 80069d4:	e5953008 	ldr	r3, [r5, #8]
 80069d8:	e0833006 	add	r3, r3, r6
 80069dc:	e1500003 	cmp	r0, r3
 80069e0:	0a000004 	beq	80069f8 <_malloc_trim_r+0x70>
  top_size = chunksize(top);
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;

  if (extra < (long)pagesz)  /* Not enough memory to release */
  {
    MALLOC_UNLOCK;
 80069e4:	e1a00004 	mov	r0, r4
 80069e8:	eb000340 	bl	80076f0 <__malloc_unlock>
    return 0;
 80069ec:	e3a00000 	mov	r0, #0
	MALLOC_UNLOCK;
        return 1;
      }
    }
  }
}
 80069f0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 80069f4:	e12fff1e 	bx	lr
      return 0;     /* Apparently we don't own memory; must fail */
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 80069f8:	e1a00004 	mov	r0, r4
 80069fc:	e2671000 	rsb	r1, r7, #0
 8006a00:	eb000699 	bl	800846c <_sbrk_r>
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 8006a04:	e3700001 	cmn	r0, #1
 8006a08:	0a00000b 	beq	8006a3c <_malloc_trim_r+0xb4>

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
 8006a0c:	e59f3068 	ldr	r3, [pc, #104]	; 8006a7c <_malloc_trim_r+0xf4>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 8006a10:	e0676006 	rsb	r6, r7, r6
        sbrked_mem -= extra;
 8006a14:	e5932000 	ldr	r2, [r3]
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 8006a18:	e5951008 	ldr	r1, [r5, #8]
 8006a1c:	e3866001 	orr	r6, r6, #1
        sbrked_mem -= extra;
        check_chunk(top);
	MALLOC_UNLOCK;
 8006a20:	e1a00004 	mov	r0, r4

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
 8006a24:	e0677002 	rsb	r7, r7, r2
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 8006a28:	e5816004 	str	r6, [r1, #4]
        sbrked_mem -= extra;
 8006a2c:	e5837000 	str	r7, [r3]
        check_chunk(top);
	MALLOC_UNLOCK;
 8006a30:	eb00032e 	bl	80076f0 <__malloc_unlock>
        return 1;
 8006a34:	e3a00001 	mov	r0, #1
 8006a38:	eaffffec 	b	80069f0 <_malloc_trim_r+0x68>
      new_brk = (char*)(MORECORE (-extra));
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 8006a3c:	e1a00004 	mov	r0, r4
 8006a40:	e3a01000 	mov	r1, #0
 8006a44:	eb000688 	bl	800846c <_sbrk_r>
        top_size = current_brk - (char*)top;
 8006a48:	e5953008 	ldr	r3, [r5, #8]
 8006a4c:	e0632000 	rsb	r2, r3, r0
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 8006a50:	e352000f 	cmp	r2, #15
 8006a54:	daffffe2 	ble	80069e4 <_malloc_trim_r+0x5c>
        {
          sbrked_mem = current_brk - sbrk_base;
 8006a58:	e59f1020 	ldr	r1, [pc, #32]	; 8006a80 <_malloc_trim_r+0xf8>
 8006a5c:	e591c000 	ldr	ip, [r1]
 8006a60:	e59f1014 	ldr	r1, [pc, #20]	; 8006a7c <_malloc_trim_r+0xf4>
          set_head(top, top_size | PREV_INUSE);
 8006a64:	e3822001 	orr	r2, r2, #1
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
 8006a68:	e06c0000 	rsb	r0, ip, r0
          set_head(top, top_size | PREV_INUSE);
 8006a6c:	e5832004 	str	r2, [r3, #4]
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
 8006a70:	e5810000 	str	r0, [r1]
 8006a74:	eaffffda 	b	80069e4 <_malloc_trim_r+0x5c>
 8006a78:	2000054c 	.word	0x2000054c
 8006a7c:	20000974 	.word	0x20000974
 8006a80:	20000954 	.word	0x20000954

08006a84 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 8006a84:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 8006a88:	e2514000 	subs	r4, r1, #0
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 8006a8c:	e1a06000 	mov	r6, r0
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 8006a90:	0a000046 	beq	8006bb0 <_free_r+0x12c>
    return;

  MALLOC_LOCK;
 8006a94:	eb000314 	bl	80076ec <__malloc_lock>

  p = mem2chunk(mem);
  hd = p->size;
 8006a98:	e514e004 	ldr	lr, [r4, #-4]
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
 8006a9c:	e59f1238 	ldr	r1, [pc, #568]	; 8006cdc <_free_r+0x258>
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 8006aa0:	e3ce3001 	bic	r3, lr, #1
  if (mem == 0)                              /* free(0) has no effect */
    return;

  MALLOC_LOCK;

  p = mem2chunk(mem);
 8006aa4:	e244c008 	sub	ip, r4, #8
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
 8006aa8:	e08c2003 	add	r2, ip, r3
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
 8006aac:	e5910008 	ldr	r0, [r1, #8]
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
 8006ab0:	e5925004 	ldr	r5, [r2, #4]
  
  if (next == top)                            /* merge with top */
 8006ab4:	e1500002 	cmp	r0, r2
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
 8006ab8:	e3c55003 	bic	r5, r5, #3
  
  if (next == top)                            /* merge with top */
 8006abc:	0a00004a 	beq	8006bec <_free_r+0x168>

  set_head(next, nextsz);                    /* clear inuse bit */

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 8006ac0:	e21ee001 	ands	lr, lr, #1
      malloc_trim(RCALL top_pad); 
    MALLOC_UNLOCK;
    return;
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 8006ac4:	e5825004 	str	r5, [r2, #4]

  islr = 0;
 8006ac8:	13a0e000 	movne	lr, #0

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 8006acc:	1a000009 	bne	8006af8 <_free_r+0x74>
  {
    prevsz = p->prev_size;
 8006ad0:	e5144008 	ldr	r4, [r4, #-8]
    p = chunk_at_offset(p, -prevsz);
 8006ad4:	e064c00c 	rsb	ip, r4, ip
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 8006ad8:	e59c0008 	ldr	r0, [ip, #8]
 8006adc:	e2817008 	add	r7, r1, #8
 8006ae0:	e1500007 	cmp	r0, r7

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
 8006ae4:	e0833004 	add	r3, r3, r4
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
      islr = 1;
    else
      unlink(p, bck, fwd);
 8006ae8:	159c400c 	ldrne	r4, [ip, #12]
 8006aec:	1580400c 	strne	r4, [r0, #12]
 8006af0:	15840008 	strne	r0, [r4, #8]
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
      islr = 1;
 8006af4:	03a0e001 	moveq	lr, #1
    else
      unlink(p, bck, fwd);
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 8006af8:	e0820005 	add	r0, r2, r5
 8006afc:	e5900004 	ldr	r0, [r0, #4]
 8006b00:	e3100001 	tst	r0, #1
 8006b04:	1a000009 	bne	8006b30 <_free_r+0xac>
  {
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 8006b08:	e35e0000 	cmp	lr, #0
 8006b0c:	e5920008 	ldr	r0, [r2, #8]
      unlink(p, bck, fwd);
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
 8006b10:	e0833005 	add	r3, r3, r5
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 8006b14:	1a000002 	bne	8006b24 <_free_r+0xa0>
 8006b18:	e59f41c0 	ldr	r4, [pc, #448]	; 8006ce0 <_free_r+0x25c>
 8006b1c:	e1500004 	cmp	r0, r4
 8006b20:	0a000047 	beq	8006c44 <_free_r+0x1c0>
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
 8006b24:	e592200c 	ldr	r2, [r2, #12]
 8006b28:	e580200c 	str	r2, [r0, #12]
 8006b2c:	e5820008 	str	r0, [r2, #8]
  }


  set_head(p, sz | PREV_INUSE);
 8006b30:	e3832001 	orr	r2, r3, #1
  set_foot(p, sz);
  if (!islr)
 8006b34:	e35e0000 	cmp	lr, #0
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
 8006b38:	e78c3003 	str	r3, [ip, r3]
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
 8006b3c:	e58c2004 	str	r2, [ip, #4]
  set_foot(p, sz);
  if (!islr)
 8006b40:	1a000018 	bne	8006ba8 <_free_r+0x124>
    frontlink(p, sz, idx, bck, fwd);  
 8006b44:	e3530c02 	cmp	r3, #512	; 0x200
 8006b48:	3a00001a 	bcc	8006bb8 <_free_r+0x134>
 8006b4c:	e1a024a3 	lsr	r2, r3, #9
 8006b50:	e3520004 	cmp	r2, #4
 8006b54:	8a000042 	bhi	8006c64 <_free_r+0x1e0>
 8006b58:	e1a0e323 	lsr	lr, r3, #6
 8006b5c:	e28ee038 	add	lr, lr, #56	; 0x38
 8006b60:	e1a0008e 	lsl	r0, lr, #1
 8006b64:	e0810100 	add	r0, r1, r0, lsl #2
 8006b68:	e5902008 	ldr	r2, [r0, #8]
 8006b6c:	e1520000 	cmp	r2, r0
 8006b70:	e59f1164 	ldr	r1, [pc, #356]	; 8006cdc <_free_r+0x258>
 8006b74:	0a000044 	beq	8006c8c <_free_r+0x208>
 8006b78:	e5921004 	ldr	r1, [r2, #4]
 8006b7c:	e3c11003 	bic	r1, r1, #3
 8006b80:	e1530001 	cmp	r3, r1
 8006b84:	2a000002 	bcs	8006b94 <_free_r+0x110>
 8006b88:	e5922008 	ldr	r2, [r2, #8]
 8006b8c:	e1500002 	cmp	r0, r2
 8006b90:	1afffff8 	bne	8006b78 <_free_r+0xf4>
 8006b94:	e592300c 	ldr	r3, [r2, #12]
 8006b98:	e58c300c 	str	r3, [ip, #12]
 8006b9c:	e58c2008 	str	r2, [ip, #8]
 8006ba0:	e582c00c 	str	ip, [r2, #12]
 8006ba4:	e583c008 	str	ip, [r3, #8]

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
      malloc_trim(RCALL top_pad); 
    MALLOC_UNLOCK;
 8006ba8:	e1a00006 	mov	r0, r6
 8006bac:	eb0002cf 	bl	80076f0 <__malloc_unlock>
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 8006bb0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 8006bb4:	e12fff1e 	bx	lr


  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
 8006bb8:	e5912004 	ldr	r2, [r1, #4]
 8006bbc:	e1a031a3 	lsr	r3, r3, #3
 8006bc0:	e1a00143 	asr	r0, r3, #2
 8006bc4:	e3a0e001 	mov	lr, #1
 8006bc8:	e182001e 	orr	r0, r2, lr, lsl r0
 8006bcc:	e0813183 	add	r3, r1, r3, lsl #3
 8006bd0:	e5932008 	ldr	r2, [r3, #8]
 8006bd4:	e58c300c 	str	r3, [ip, #12]
 8006bd8:	e5810004 	str	r0, [r1, #4]
 8006bdc:	e58c2008 	str	r2, [ip, #8]
 8006be0:	e582c00c 	str	ip, [r2, #12]
 8006be4:	e583c008 	str	ip, [r3, #8]
 8006be8:	eaffffee 	b	8006ba8 <_free_r+0x124>
  
  if (next == top)                            /* merge with top */
  {
    sz += nextsz;

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 8006bec:	e31e0001 	tst	lr, #1
  next = chunk_at_offset(p, sz);
  nextsz = chunksize(next);
  
  if (next == top)                            /* merge with top */
  {
    sz += nextsz;
 8006bf0:	e0853003 	add	r3, r5, r3

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 8006bf4:	1a000006 	bne	8006c14 <_free_r+0x190>
    {
      prevsz = p->prev_size;
 8006bf8:	e5142008 	ldr	r2, [r4, #-8]
      p = chunk_at_offset(p, -prevsz);
 8006bfc:	e062c00c 	rsb	ip, r2, ip
      sz += prevsz;
      unlink(p, bck, fwd);
 8006c00:	e59c000c 	ldr	r0, [ip, #12]
 8006c04:	e59ce008 	ldr	lr, [ip, #8]
 8006c08:	e58e000c 	str	r0, [lr, #12]
 8006c0c:	e580e008 	str	lr, [r0, #8]

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
    {
      prevsz = p->prev_size;
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
 8006c10:	e0833002 	add	r3, r3, r2
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 8006c14:	e59f20c8 	ldr	r2, [pc, #200]	; 8006ce4 <_free_r+0x260>
 8006c18:	e5920000 	ldr	r0, [r2]
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
 8006c1c:	e3832001 	orr	r2, r3, #1
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 8006c20:	e1530000 	cmp	r3, r0
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
    top = p;
 8006c24:	e581c008 	str	ip, [r1, #8]
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
 8006c28:	e58c2004 	str	r2, [ip, #4]
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 8006c2c:	3affffdd 	bcc	8006ba8 <_free_r+0x124>
      malloc_trim(RCALL top_pad); 
 8006c30:	e59f30b0 	ldr	r3, [pc, #176]	; 8006ce8 <_free_r+0x264>
 8006c34:	e1a00006 	mov	r0, r6
 8006c38:	e5931000 	ldr	r1, [r3]
 8006c3c:	ebffff51 	bl	8006988 <_malloc_trim_r>
 8006c40:	eaffffd8 	b	8006ba8 <_free_r+0x124>
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
 8006c44:	e3832001 	orr	r2, r3, #1
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
    {
      islr = 1;
      link_last_remainder(p);   
 8006c48:	e581c014 	str	ip, [r1, #20]
 8006c4c:	e581c010 	str	ip, [r1, #16]
 8006c50:	e58c000c 	str	r0, [ip, #12]
 8006c54:	e58c0008 	str	r0, [ip, #8]
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
  set_foot(p, sz);
 8006c58:	e78c3003 	str	r3, [ip, r3]
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
 8006c5c:	e58c2004 	str	r2, [ip, #4]
 8006c60:	eaffffd0 	b	8006ba8 <_free_r+0x124>
  set_foot(p, sz);
  if (!islr)
    frontlink(p, sz, idx, bck, fwd);  
 8006c64:	e3520014 	cmp	r2, #20
 8006c68:	9282e05b 	addls	lr, r2, #91	; 0x5b
 8006c6c:	91a0008e 	lslls	r0, lr, #1
 8006c70:	9affffbb 	bls	8006b64 <_free_r+0xe0>
 8006c74:	e3520054 	cmp	r2, #84	; 0x54
 8006c78:	8a00000a 	bhi	8006ca8 <_free_r+0x224>
 8006c7c:	e1a0e623 	lsr	lr, r3, #12
 8006c80:	e28ee06e 	add	lr, lr, #110	; 0x6e
 8006c84:	e1a0008e 	lsl	r0, lr, #1
 8006c88:	eaffffb5 	b	8006b64 <_free_r+0xe0>
 8006c8c:	e5913004 	ldr	r3, [r1, #4]
 8006c90:	e1a0e14e 	asr	lr, lr, #2
 8006c94:	e3a00001 	mov	r0, #1
 8006c98:	e1830e10 	orr	r0, r3, r0, lsl lr
 8006c9c:	e1a03002 	mov	r3, r2
 8006ca0:	e5810004 	str	r0, [r1, #4]
 8006ca4:	eaffffbb 	b	8006b98 <_free_r+0x114>
 8006ca8:	e3520f55 	cmp	r2, #340	; 0x154
 8006cac:	91a0e7a3 	lsrls	lr, r3, #15
 8006cb0:	928ee077 	addls	lr, lr, #119	; 0x77
 8006cb4:	91a0008e 	lslls	r0, lr, #1
 8006cb8:	9affffa9 	bls	8006b64 <_free_r+0xe0>
 8006cbc:	e59f0028 	ldr	r0, [pc, #40]	; 8006cec <_free_r+0x268>
 8006cc0:	e1520000 	cmp	r2, r0
 8006cc4:	91a0e923 	lsrls	lr, r3, #18
 8006cc8:	928ee07c 	addls	lr, lr, #124	; 0x7c
 8006ccc:	91a0008e 	lslls	r0, lr, #1
 8006cd0:	83a000fc 	movhi	r0, #252	; 0xfc
 8006cd4:	83a0e07e 	movhi	lr, #126	; 0x7e
 8006cd8:	eaffffa1 	b	8006b64 <_free_r+0xe0>
 8006cdc:	2000054c 	.word	0x2000054c
 8006ce0:	20000554 	.word	0x20000554
 8006ce4:	20000958 	.word	0x20000958
 8006ce8:	20000970 	.word	0x20000970
 8006cec:	00000554 	.word	0x00000554

08006cf0 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 8006cf0:	e92d4010 	push	{r4, lr}
#ifndef _MB_CAPABLE
  if (locale)
 8006cf4:	e2524000 	subs	r4, r2, #0
 8006cf8:	0a000004 	beq	8006d10 <_setlocale_r+0x20>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 8006cfc:	e1a00004 	mov	r0, r4
 8006d00:	e59f1048 	ldr	r1, [pc, #72]	; 8006d50 <_setlocale_r+0x60>
 8006d04:	eb0005e8 	bl	80084ac <strcmp>
 8006d08:	e3500000 	cmp	r0, #0
 8006d0c:	1a000002 	bne	8006d1c <_setlocale_r+0x2c>
	  && strcmp (locale, ""))
        return NULL;
    }
  return "C";
 8006d10:	e59f003c 	ldr	r0, [pc, #60]	; 8006d54 <_setlocale_r+0x64>
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 8006d14:	e8bd4010 	pop	{r4, lr}
 8006d18:	e12fff1e 	bx	lr
       _CONST char *locale)
{
#ifndef _MB_CAPABLE
  if (locale)
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 8006d1c:	e1a00004 	mov	r0, r4
 8006d20:	e59f102c 	ldr	r1, [pc, #44]	; 8006d54 <_setlocale_r+0x64>
 8006d24:	eb0005e0 	bl	80084ac <strcmp>
 8006d28:	e3500000 	cmp	r0, #0
 8006d2c:	0afffff7 	beq	8006d10 <_setlocale_r+0x20>
	  && strcmp (locale, ""))
 8006d30:	e1a00004 	mov	r0, r4
 8006d34:	e59f101c 	ldr	r1, [pc, #28]	; 8006d58 <_setlocale_r+0x68>
 8006d38:	eb0005db 	bl	80084ac <strcmp>
        return NULL;
 8006d3c:	e59f3010 	ldr	r3, [pc, #16]	; 8006d54 <_setlocale_r+0x64>
 8006d40:	e3500000 	cmp	r0, #0
 8006d44:	01a00003 	moveq	r0, r3
 8006d48:	13a00000 	movne	r0, #0
 8006d4c:	eafffff0 	b	8006d14 <_setlocale_r+0x24>
 8006d50:	0800b0c8 	.word	0x0800b0c8
 8006d54:	0800b0c4 	.word	0x0800b0c4
 8006d58:	0800b090 	.word	0x0800b090

08006d5c <__locale_charset>:
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
#endif
}
 8006d5c:	e59f0000 	ldr	r0, [pc, #0]	; 8006d64 <__locale_charset+0x8>
 8006d60:	e12fff1e 	bx	lr
 8006d64:	200004d0 	.word	0x200004d0

08006d68 <__locale_mb_cur_max>:
_DEFUN_VOID(__locale_mb_cur_max)
{
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 8006d68:	e59f3004 	ldr	r3, [pc, #4]	; 8006d74 <__locale_mb_cur_max+0xc>
#endif
}
 8006d6c:	e5930020 	ldr	r0, [r3, #32]
 8006d70:	e12fff1e 	bx	lr
 8006d74:	200004d0 	.word	0x200004d0

08006d78 <__locale_msgcharset>:
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
#endif
}
 8006d78:	e59f0000 	ldr	r0, [pc, #0]	; 8006d80 <__locale_msgcharset+0x8>
 8006d7c:	e12fff1e 	bx	lr
 8006d80:	200004f4 	.word	0x200004f4

08006d84 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
  return lc_ctype_cjk_lang;
}
 8006d84:	e3a00000 	mov	r0, #0
 8006d88:	e12fff1e 	bx	lr

08006d8c <_localeconv_r>:
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
}
 8006d8c:	e59f0000 	ldr	r0, [pc, #0]	; 8006d94 <_localeconv_r+0x8>
 8006d90:	e12fff1e 	bx	lr
 8006d94:	20000514 	.word	0x20000514

08006d98 <setlocale>:
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
  return _setlocale_r (_REENT, category, locale);
 8006d98:	e59f300c 	ldr	r3, [pc, #12]	; 8006dac <setlocale+0x14>
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 8006d9c:	e1a02001 	mov	r2, r1
  return _setlocale_r (_REENT, category, locale);
 8006da0:	e1a01000 	mov	r1, r0
 8006da4:	e5930000 	ldr	r0, [r3]
 8006da8:	eaffffd0 	b	8006cf0 <_setlocale_r>
 8006dac:	200000a0 	.word	0x200000a0

08006db0 <localeconv>:

struct lconv *
_DEFUN_VOID(localeconv)
{
  return _localeconv_r (_REENT);
}
 8006db0:	e59f0000 	ldr	r0, [pc, #0]	; 8006db8 <localeconv+0x8>
 8006db4:	e12fff1e 	bx	lr
 8006db8:	20000514 	.word	0x20000514

08006dbc <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 8006dbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 8006dc0:	e281500b 	add	r5, r1, #11
 8006dc4:	e3550016 	cmp	r5, #22
 8006dc8:	83c55007 	bichi	r5, r5, #7
 8006dcc:	81a03fa5 	lsrhi	r3, r5, #31
 8006dd0:	93a03000 	movls	r3, #0
 8006dd4:	93a05010 	movls	r5, #16

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 8006dd8:	e1550001 	cmp	r5, r1
 8006ddc:	21a01003 	movcs	r1, r3
 8006de0:	33831001 	orrcc	r1, r3, #1
 8006de4:	e3510000 	cmp	r1, #0
  {
    RERRNO = ENOMEM;
 8006de8:	13a0300c 	movne	r3, #12
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 8006dec:	e24dd00c 	sub	sp, sp, #12
 8006df0:	e1a06000 	mov	r6, r0
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
  {
    RERRNO = ENOMEM;
 8006df4:	15803000 	strne	r3, [r0]
    return 0;
 8006df8:	13a04000 	movne	r4, #0
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 8006dfc:	1a000015 	bne	8006e58 <_malloc_r+0x9c>
  {
    RERRNO = ENOMEM;
    return 0;
  }

  MALLOC_LOCK;
 8006e00:	eb000239 	bl	80076ec <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 8006e04:	e3550f7e 	cmp	r5, #504	; 0x1f8
 8006e08:	2a000016 	bcs	8006e68 <_malloc_r+0xac>
  {
    idx = smallbin_index(nb); 

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 8006e0c:	e59f76bc 	ldr	r7, [pc, #1724]	; 80074d0 <_malloc_r+0x714>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
  {
    idx = smallbin_index(nb); 
 8006e10:	e1a081a5 	lsr	r8, r5, #3

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 8006e14:	e0873188 	add	r3, r7, r8, lsl #3
    victim = last(q);
 8006e18:	e593400c 	ldr	r4, [r3, #12]

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 8006e1c:	e1540003 	cmp	r4, r3
 8006e20:	0a00014d 	beq	800735c <_malloc_r+0x5a0>
      victim = last(q);
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
 8006e24:	e5941004 	ldr	r1, [r4, #4]
 8006e28:	e3c11003 	bic	r1, r1, #3
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
 8006e2c:	e0841001 	add	r1, r4, r1
 8006e30:	e591c004 	ldr	ip, [r1, #4]
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
 8006e34:	e2842008 	add	r2, r4, #8
 8006e38:	e892000c 	ldm	r2, {r2, r3}
      set_inuse_bit_at_offset(victim, victim_size);
 8006e3c:	e38cc001 	orr	ip, ip, #1
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 8006e40:	e1a00006 	mov	r0, r6
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
 8006e44:	e581c004 	str	ip, [r1, #4]
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
 8006e48:	e582300c 	str	r3, [r2, #12]
 8006e4c:	e5832008 	str	r2, [r3, #8]
      set_inuse_bit_at_offset(victim, victim_size);
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 8006e50:	eb000226 	bl	80076f0 <__malloc_unlock>
      return chunk2mem(victim);
 8006e54:	e2844008 	add	r4, r4, #8
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
  return chunk2mem(victim);

#endif /* MALLOC_PROVIDED */
}
 8006e58:	e1a00004 	mov	r0, r4
 8006e5c:	e28dd00c 	add	sp, sp, #12
 8006e60:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	e12fff1e 	bx	lr
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
 8006e68:	e1b084a5 	lsrs	r8, r5, #9
 8006e6c:	01a081a5 	lsreq	r8, r5, #3
 8006e70:	01a01088 	lsleq	r1, r8, #1
 8006e74:	1a000061 	bne	8007000 <_malloc_r+0x244>
    bin = bin_at(idx);
 8006e78:	e59f7650 	ldr	r7, [pc, #1616]	; 80074d0 <_malloc_r+0x714>
 8006e7c:	e0871101 	add	r1, r7, r1, lsl #2

    for (victim = last(bin); victim != bin; victim = victim->bk)
 8006e80:	e591400c 	ldr	r4, [r1, #12]
 8006e84:	e1510004 	cmp	r1, r4
 8006e88:	1a000005 	bne	8006ea4 <_malloc_r+0xe8>
 8006e8c:	ea00000a 	b	8006ebc <_malloc_r+0x100>
      {
        --idx; /* adjust to rescan below after checking last remainder */
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
 8006e90:	e3530000 	cmp	r3, #0
 8006e94:	aa0000d8 	bge	80071fc <_malloc_r+0x440>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 8006e98:	e594400c 	ldr	r4, [r4, #12]
 8006e9c:	e1510004 	cmp	r1, r4
 8006ea0:	0a000005 	beq	8006ebc <_malloc_r+0x100>
    {
      victim_size = chunksize(victim);
 8006ea4:	e5942004 	ldr	r2, [r4, #4]
 8006ea8:	e3c22003 	bic	r2, r2, #3
      remainder_size = long_sub_size_t(victim_size, nb);
 8006eac:	e0653002 	rsb	r3, r5, r2
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 8006eb0:	e353000f 	cmp	r3, #15
 8006eb4:	dafffff5 	ble	8006e90 <_malloc_r+0xd4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 8006eb8:	e2488001 	sub	r8, r8, #1
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 8006ebc:	e2888001 	add	r8, r8, #1

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 8006ec0:	e59f3608 	ldr	r3, [pc, #1544]	; 80074d0 <_malloc_r+0x714>
 8006ec4:	e5974010 	ldr	r4, [r7, #16]
 8006ec8:	e283e008 	add	lr, r3, #8
 8006ecc:	e154000e 	cmp	r4, lr
 8006ed0:	05931004 	ldreq	r1, [r3, #4]
 8006ed4:	0a000016 	beq	8006f34 <_malloc_r+0x178>
  {
    victim_size = chunksize(victim);
 8006ed8:	e5942004 	ldr	r2, [r4, #4]
 8006edc:	e3c22003 	bic	r2, r2, #3
    remainder_size = long_sub_size_t(victim_size, nb);
 8006ee0:	e0651002 	rsb	r1, r5, r2

    if (remainder_size >= (long)MINSIZE) /* re-split */
 8006ee4:	e351000f 	cmp	r1, #15
 8006ee8:	ca0000f8 	bgt	80072d0 <_malloc_r+0x514>
      return chunk2mem(victim);
    }

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
 8006eec:	e3510000 	cmp	r1, #0
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    clear_last_remainder;
 8006ef0:	e583e014 	str	lr, [r3, #20]
 8006ef4:	e583e010 	str	lr, [r3, #16]

    if (remainder_size >= 0)  /* exhaust */
 8006ef8:	aa000046 	bge	8007018 <_malloc_r+0x25c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 8006efc:	e3520c02 	cmp	r2, #512	; 0x200
 8006f00:	2a0000d3 	bcs	8007254 <_malloc_r+0x498>
 8006f04:	e5930004 	ldr	r0, [r3, #4]
 8006f08:	e1a021a2 	lsr	r2, r2, #3
 8006f0c:	e1a01142 	asr	r1, r2, #2
 8006f10:	e3a0c001 	mov	ip, #1
 8006f14:	e180111c 	orr	r1, r0, ip, lsl r1
 8006f18:	e0832182 	add	r2, r3, r2, lsl #3
 8006f1c:	e5920008 	ldr	r0, [r2, #8]
 8006f20:	e584200c 	str	r2, [r4, #12]
 8006f24:	e5831004 	str	r1, [r3, #4]
 8006f28:	e5840008 	str	r0, [r4, #8]
 8006f2c:	e580400c 	str	r4, [r0, #12]
 8006f30:	e5824008 	str	r4, [r2, #8]
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 8006f34:	e1a03148 	asr	r3, r8, #2
 8006f38:	e3a00001 	mov	r0, #1
 8006f3c:	e1a00310 	lsl	r0, r0, r3
 8006f40:	e1500001 	cmp	r0, r1
 8006f44:	8a00003b 	bhi	8007038 <_malloc_r+0x27c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 8006f48:	e1110000 	tst	r1, r0
 8006f4c:	1a000008 	bne	8006f74 <_malloc_r+0x1b8>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
 8006f50:	e1a00080 	lsl	r0, r0, #1
    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 8006f54:	e3c88003 	bic	r8, r8, #3
      block <<= 1;
      while ((block & binblocks) == 0)
 8006f58:	e1110000 	tst	r1, r0
    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 8006f5c:	e2888004 	add	r8, r8, #4
      block <<= 1;
      while ((block & binblocks) == 0)
 8006f60:	1a000003 	bne	8006f74 <_malloc_r+0x1b8>
      {
        idx += BINBLOCKWIDTH;
        block <<= 1;
 8006f64:	e1a00080 	lsl	r0, r0, #1
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 8006f68:	e1110000 	tst	r1, r0
      {
        idx += BINBLOCKWIDTH;
 8006f6c:	e2888004 	add	r8, r8, #4
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 8006f70:	0afffffb 	beq	8006f64 <_malloc_r+0x1a8>
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
 8006f74:	e087a188 	add	sl, r7, r8, lsl #3
 8006f78:	e1a0c00a 	mov	ip, sl
 8006f7c:	e1a04008 	mov	r4, r8
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 8006f80:	e59c300c 	ldr	r3, [ip, #12]
 8006f84:	e15c0003 	cmp	ip, r3
 8006f88:	1a000005 	bne	8006fa4 <_malloc_r+0x1e8>
 8006f8c:	ea0000dd 	b	8007308 <_malloc_r+0x54c>
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
 8006f90:	e3520000 	cmp	r2, #0
 8006f94:	aa0000f6 	bge	8007374 <_malloc_r+0x5b8>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 8006f98:	e593300c 	ldr	r3, [r3, #12]
 8006f9c:	e15c0003 	cmp	ip, r3
 8006fa0:	0a0000d8 	beq	8007308 <_malloc_r+0x54c>
        {
          victim_size = chunksize(victim);
 8006fa4:	e5931004 	ldr	r1, [r3, #4]
 8006fa8:	e3c11003 	bic	r1, r1, #3
          remainder_size = long_sub_size_t(victim_size, nb);
 8006fac:	e0652001 	rsb	r2, r5, r1

          if (remainder_size >= (long)MINSIZE) /* split */
 8006fb0:	e352000f 	cmp	r2, #15
 8006fb4:	dafffff5 	ble	8006f90 <_malloc_r+0x1d4>
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
 8006fb8:	e1a04003 	mov	r4, r3
 8006fbc:	e5b48008 	ldr	r8, [r4, #8]!
 8006fc0:	e593c00c 	ldr	ip, [r3, #12]
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
 8006fc4:	e0831005 	add	r1, r3, r5
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
 8006fc8:	e382a001 	orr	sl, r2, #1
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
 8006fcc:	e3855001 	orr	r5, r5, #1
            unlink(victim, bck, fwd);
 8006fd0:	e588c00c 	str	ip, [r8, #12]
 8006fd4:	e58c8008 	str	r8, [ip, #8]
            link_last_remainder(remainder);
 8006fd8:	e5871014 	str	r1, [r7, #20]
 8006fdc:	e5871010 	str	r1, [r7, #16]
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
 8006fe0:	e5835004 	str	r5, [r3, #4]
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 8006fe4:	e1a00006 	mov	r0, r6
          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
 8006fe8:	e581e00c 	str	lr, [r1, #12]
 8006fec:	e581e008 	str	lr, [r1, #8]
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
 8006ff0:	e7812002 	str	r2, [r1, r2]
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
 8006ff4:	e581a004 	str	sl, [r1, #4]
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 8006ff8:	eb0001bc 	bl	80076f0 <__malloc_unlock>
            return chunk2mem(victim);
 8006ffc:	eaffff95 	b	8006e58 <_malloc_r+0x9c>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
 8007000:	e3580004 	cmp	r8, #4
 8007004:	8a000088 	bhi	800722c <_malloc_r+0x470>
 8007008:	e1a08325 	lsr	r8, r5, #6
 800700c:	e2888038 	add	r8, r8, #56	; 0x38
 8007010:	e1a01088 	lsl	r1, r8, #1
 8007014:	eaffff97 	b	8006e78 <_malloc_r+0xbc>

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
 8007018:	e0842002 	add	r2, r4, r2
 800701c:	e5923004 	ldr	r3, [r2, #4]
 8007020:	e3833001 	orr	r3, r3, #1
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 8007024:	e1a00006 	mov	r0, r6

    clear_last_remainder;

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
 8007028:	e5823004 	str	r3, [r2, #4]
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
 800702c:	e2844008 	add	r4, r4, #8

    if (remainder_size >= 0)  /* exhaust */
    {
      set_inuse_bit_at_offset(victim, victim_size);
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 8007030:	eb0001ae 	bl	80076f0 <__malloc_unlock>
      return chunk2mem(victim);
 8007034:	eaffff87 	b	8006e58 <_malloc_r+0x9c>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 8007038:	e5974008 	ldr	r4, [r7, #8]
 800703c:	e594a004 	ldr	sl, [r4, #4]
 8007040:	e3caa003 	bic	sl, sl, #3
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 8007044:	e155000a 	cmp	r5, sl
 8007048:	8a000002 	bhi	8007058 <_malloc_r+0x29c>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 800704c:	e065300a 	rsb	r3, r5, sl
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 8007050:	e353000f 	cmp	r3, #15
 8007054:	ca00005e 	bgt	80071d4 <_malloc_r+0x418>
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 8007058:	e59f9474 	ldr	r9, [pc, #1140]	; 80074d4 <_malloc_r+0x718>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 800705c:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 8007060:	e599b000 	ldr	fp, [r9]

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 8007064:	e3730001 	cmn	r3, #1
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 8007068:	e085b00b 	add	fp, r5, fp
  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 800706c:	128bba01 	addne	fp, fp, #4096	; 0x1000
 8007070:	128bb00f 	addne	fp, fp, #15
 8007074:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 8007078:	028bb010 	addeq	fp, fp, #16
  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 800707c:	13cbb00f 	bicne	fp, fp, #15
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 8007080:	e084200a 	add	r2, r4, sl
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));
 8007084:	e1a00006 	mov	r0, r6
 8007088:	e1a0100b 	mov	r1, fp
 800708c:	e58d2004 	str	r2, [sp, #4]
 8007090:	eb0004f5 	bl	800846c <_sbrk_r>

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 8007094:	e3700001 	cmn	r0, #1
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));
 8007098:	e1a08000 	mov	r8, r0

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 800709c:	e59d2004 	ldr	r2, [sp, #4]
 80070a0:	0a0000e4 	beq	8007438 <_malloc_r+0x67c>
 80070a4:	e1520000 	cmp	r2, r0
 80070a8:	8a0000c1 	bhi	80073b4 <_malloc_r+0x5f8>
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
 80070ac:	e5993004 	ldr	r3, [r9, #4]

  if (brk == old_end /* can just add bytes to current top, unless
 80070b0:	e1520008 	cmp	r2, r8
  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
 80070b4:	e08b3003 	add	r3, fp, r3
 80070b8:	e5893004 	str	r3, [r9, #4]

  if (brk == old_end /* can just add bytes to current top, unless
 80070bc:	0a0000e1 	beq	8007448 <_malloc_r+0x68c>
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 80070c0:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
 80070c4:	e3710001 	cmn	r1, #1
      sbrk_base = brk;
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 80070c8:	10622008 	rsbne	r2, r2, r8
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 80070cc:	e59f13fc 	ldr	r1, [pc, #1020]	; 80074d0 <_malloc_r+0x714>
      sbrk_base = brk;
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 80070d0:	10833002 	addne	r3, r3, r2
    set_head(top, top_size | PREV_INUSE);
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
      sbrk_base = brk;
 80070d4:	05818408 	streq	r8, [r1, #1032]	; 0x408
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 80070d8:	15893004 	strne	r3, [r9, #4]

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
    if (front_misalign > 0) 
 80070dc:	e2183007 	ands	r3, r8, #7
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 80070e0:	12632008 	rsbne	r2, r3, #8
      brk += correction;
 80070e4:	10888002 	addne	r8, r8, r2
 80070e8:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
 80070ec:	12832008 	addne	r2, r3, #8
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 80070f0:	e088300b 	add	r3, r8, fp
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
    if (front_misalign > 0) 
 80070f4:	03a02a01 	moveq	r2, #4096	; 0x1000
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 80070f8:	e1a03a03 	lsl	r3, r3, #20
 80070fc:	e042ba23 	sub	fp, r2, r3, lsr #20

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 8007100:	e1a0100b 	mov	r1, fp
 8007104:	e1a00006 	mov	r0, r6
 8007108:	eb0004d7 	bl	800846c <_sbrk_r>
    if (new_brk == (char*)(MORECORE_FAILURE))
 800710c:	e3700001 	cmn	r0, #1
 8007110:	10682000 	rsbne	r2, r8, r0
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
 8007114:	e5993004 	ldr	r3, [r9, #4]
 8007118:	108b2002 	addne	r2, fp, r2

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE))
      {
	correction = 0;
 800711c:	03a0b000 	moveq	fp, #0
 8007120:	13822001 	orrne	r2, r2, #1
    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
    if (new_brk == (char*)(MORECORE_FAILURE))
 8007124:	03a02001 	moveq	r2, #1
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
 8007128:	e08b3003 	add	r3, fp, r3

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
 800712c:	e1540007 	cmp	r4, r7
	new_brk = brk;
      }

    sbrked_mem += correction;

    top = (mchunkptr)brk;
 8007130:	e5878008 	str	r8, [r7, #8]
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
 8007134:	e5882004 	str	r2, [r8, #4]
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
 8007138:	e5893004 	str	r3, [r9, #4]
 800713c:	e59fb390 	ldr	fp, [pc, #912]	; 80074d4 <_malloc_r+0x718>

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
 8007140:	0a00000d 	beq	800717c <_malloc_r+0x3c0>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 8007144:	e35a000f 	cmp	sl, #15
 8007148:	9a0000ad 	bls	8007404 <_malloc_r+0x648>
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
 800714c:	e5940004 	ldr	r0, [r4, #4]
        set_head(top, PREV_INUSE); /* will force null return from malloc */
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 8007150:	e24a200c 	sub	r2, sl, #12
 8007154:	e3c22007 	bic	r2, r2, #7
      set_head_size(old_top, old_top_size);
 8007158:	e2000001 	and	r0, r0, #1
 800715c:	e1820000 	orr	r0, r2, r0
      chunk_at_offset(old_top, old_top_size          )->size =
 8007160:	e3a01005 	mov	r1, #5
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 8007164:	e352000f 	cmp	r2, #15
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
      chunk_at_offset(old_top, old_top_size          )->size =
 8007168:	e0842002 	add	r2, r4, r2
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      set_head_size(old_top, old_top_size);
 800716c:	e5840004 	str	r0, [r4, #4]
      chunk_at_offset(old_top, old_top_size          )->size =
 8007170:	e5821004 	str	r1, [r2, #4]
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 8007174:	e5821008 	str	r1, [r2, #8]
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 8007178:	8a0000b9 	bhi	8007464 <_malloc_r+0x6a8>
        fREe(RCALL chunk2mem(old_top));
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 800717c:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
 8007180:	e1530002 	cmp	r3, r2
 8007184:	e59f2348 	ldr	r2, [pc, #840]	; 80074d4 <_malloc_r+0x718>
    max_sbrked_mem = sbrked_mem;
 8007188:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 800718c:	e5992030 	ldr	r2, [r9, #48]	; 0x30
 8007190:	e5974008 	ldr	r4, [r7, #8]
 8007194:	e1530002 	cmp	r3, r2
 8007198:	95943004 	ldrls	r3, [r4, #4]
 800719c:	e59f2330 	ldr	r2, [pc, #816]	; 80074d4 <_malloc_r+0x718>
 80071a0:	85941004 	ldrhi	r1, [r4, #4]
    max_total_mem = sbrked_mem;
 80071a4:	85823030 	strhi	r3, [r2, #48]	; 0x30
 80071a8:	93c33003 	bicls	r3, r3, #3
 80071ac:	83c13003 	bichi	r3, r1, #3
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 80071b0:	e1550003 	cmp	r5, r3
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
 80071b4:	e0653003 	rsb	r3, r5, r3
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 80071b8:	8a000001 	bhi	80071c4 <_malloc_r+0x408>
 80071bc:	e353000f 	cmp	r3, #15
 80071c0:	ca000003 	bgt	80071d4 <_malloc_r+0x418>
    {
      MALLOC_UNLOCK;
 80071c4:	e1a00006 	mov	r0, r6
 80071c8:	eb000148 	bl	80076f0 <__malloc_unlock>
      return 0; /* propagate failure */
 80071cc:	e3a04000 	mov	r4, #0
 80071d0:	eaffff20 	b	8006e58 <_malloc_r+0x9c>
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
 80071d4:	e3852001 	orr	r2, r5, #1
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
 80071d8:	e3833001 	orr	r3, r3, #1
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
 80071dc:	e0845005 	add	r5, r4, r5
      return 0; /* propagate failure */
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
 80071e0:	e5842004 	str	r2, [r4, #4]
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 80071e4:	e1a00006 	mov	r0, r6
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
 80071e8:	e5853004 	str	r3, [r5, #4]
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
 80071ec:	e5875008 	str	r5, [r7, #8]
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
  return chunk2mem(victim);
 80071f0:	e2844008 	add	r4, r4, #8
  victim = top;
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 80071f4:	eb00013d 	bl	80076f0 <__malloc_unlock>
  return chunk2mem(victim);
 80071f8:	eaffff16 	b	8006e58 <_malloc_r+0x9c>
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
        set_inuse_bit_at_offset(victim, victim_size);
 80071fc:	e0842002 	add	r2, r4, r2
 8007200:	e592c004 	ldr	ip, [r2, #4]
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
 8007204:	e2841008 	add	r1, r4, #8
 8007208:	e891000a 	ldm	r1, {r1, r3}
        set_inuse_bit_at_offset(victim, victim_size);
 800720c:	e38cc001 	orr	ip, ip, #1
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 8007210:	e1a00006 	mov	r0, r6
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
        set_inuse_bit_at_offset(victim, victim_size);
 8007214:	e582c004 	str	ip, [r2, #4]
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
 8007218:	e581300c 	str	r3, [r1, #12]
 800721c:	e5831008 	str	r1, [r3, #8]
        set_inuse_bit_at_offset(victim, victim_size);
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 8007220:	eb000132 	bl	80076f0 <__malloc_unlock>
        return chunk2mem(victim);
 8007224:	e2844008 	add	r4, r4, #8
 8007228:	eaffff0a 	b	8006e58 <_malloc_r+0x9c>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
 800722c:	e3580014 	cmp	r8, #20
 8007230:	9288805b 	addls	r8, r8, #91	; 0x5b
 8007234:	91a01088 	lslls	r1, r8, #1
 8007238:	9affff0e 	bls	8006e78 <_malloc_r+0xbc>
 800723c:	e3580054 	cmp	r8, #84	; 0x54
 8007240:	8a000062 	bhi	80073d0 <_malloc_r+0x614>
 8007244:	e1a08625 	lsr	r8, r5, #12
 8007248:	e288806e 	add	r8, r8, #110	; 0x6e
 800724c:	e1a01088 	lsl	r1, r8, #1
 8007250:	eaffff08 	b	8006e78 <_malloc_r+0xbc>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 8007254:	e1a034a2 	lsr	r3, r2, #9
 8007258:	e3530004 	cmp	r3, #4
 800725c:	9a000050 	bls	80073a4 <_malloc_r+0x5e8>
 8007260:	e3530014 	cmp	r3, #20
 8007264:	9283a05b 	addls	sl, r3, #91	; 0x5b
 8007268:	91a0008a 	lslls	r0, sl, #1
 800726c:	9a000004 	bls	8007284 <_malloc_r+0x4c8>
 8007270:	e3530054 	cmp	r3, #84	; 0x54
 8007274:	8a00007f 	bhi	8007478 <_malloc_r+0x6bc>
 8007278:	e1a0a622 	lsr	sl, r2, #12
 800727c:	e28aa06e 	add	sl, sl, #110	; 0x6e
 8007280:	e1a0008a 	lsl	r0, sl, #1
 8007284:	e0870100 	add	r0, r7, r0, lsl #2
 8007288:	e5903008 	ldr	r3, [r0, #8]
 800728c:	e1530000 	cmp	r3, r0
 8007290:	e59fc238 	ldr	ip, [pc, #568]	; 80074d0 <_malloc_r+0x714>
 8007294:	0a000053 	beq	80073e8 <_malloc_r+0x62c>
 8007298:	e5931004 	ldr	r1, [r3, #4]
 800729c:	e3c11003 	bic	r1, r1, #3
 80072a0:	e1520001 	cmp	r2, r1
 80072a4:	2a000002 	bcs	80072b4 <_malloc_r+0x4f8>
 80072a8:	e5933008 	ldr	r3, [r3, #8]
 80072ac:	e1500003 	cmp	r0, r3
 80072b0:	1afffff8 	bne	8007298 <_malloc_r+0x4dc>
 80072b4:	e593200c 	ldr	r2, [r3, #12]
 80072b8:	e5971004 	ldr	r1, [r7, #4]
 80072bc:	e584200c 	str	r2, [r4, #12]
 80072c0:	e5843008 	str	r3, [r4, #8]
 80072c4:	e583400c 	str	r4, [r3, #12]
 80072c8:	e5824008 	str	r4, [r2, #8]
 80072cc:	eaffff18 	b	8006f34 <_malloc_r+0x178>
    victim_size = chunksize(victim);
    remainder_size = long_sub_size_t(victim_size, nb);

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
 80072d0:	e0842005 	add	r2, r4, r5
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
 80072d4:	e381c001 	orr	ip, r1, #1
    remainder_size = long_sub_size_t(victim_size, nb);

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
 80072d8:	e3855001 	orr	r5, r5, #1
 80072dc:	e5845004 	str	r5, [r4, #4]
      link_last_remainder(remainder);
 80072e0:	e5832014 	str	r2, [r3, #20]
 80072e4:	e5832010 	str	r2, [r3, #16]
      set_head(remainder, remainder_size | PREV_INUSE);
      set_foot(remainder, remainder_size);
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 80072e8:	e1a00006 	mov	r0, r6

    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
 80072ec:	e582e00c 	str	lr, [r2, #12]
 80072f0:	e582e008 	str	lr, [r2, #8]
      set_head(remainder, remainder_size | PREV_INUSE);
      set_foot(remainder, remainder_size);
 80072f4:	e7821001 	str	r1, [r2, r1]
    if (remainder_size >= (long)MINSIZE) /* re-split */
    {
      remainder = chunk_at_offset(victim, nb);
      set_head(victim, nb | PREV_INUSE);
      link_last_remainder(remainder);
      set_head(remainder, remainder_size | PREV_INUSE);
 80072f8:	e582c004 	str	ip, [r2, #4]
      set_foot(remainder, remainder_size);
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 80072fc:	eb0000fb 	bl	80076f0 <__malloc_unlock>
      return chunk2mem(victim);
 8007300:	e2844008 	add	r4, r4, #8
 8007304:	eafffed3 	b	8006e58 <_malloc_r+0x9c>
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 8007308:	e2844001 	add	r4, r4, #1
 800730c:	e3140003 	tst	r4, #3
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 8007310:	e28cc008 	add	ip, ip, #8
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 8007314:	1affff19 	bne	8006f80 <_malloc_r+0x1c4>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 8007318:	e3180003 	tst	r8, #3
        {
          binblocks &= ~block;
          break;
        }
        --startidx;
       q = prev_bin(q);
 800731c:	e24a3008 	sub	r3, sl, #8

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 8007320:	0a000061 	beq	80074ac <_malloc_r+0x6f0>
          binblocks &= ~block;
          break;
        }
        --startidx;
       q = prev_bin(q);
      } while (first(q) == q);
 8007324:	e59aa000 	ldr	sl, [sl]
 8007328:	e15a0003 	cmp	sl, r3
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
        {
          binblocks &= ~block;
          break;
        }
        --startidx;
 800732c:	e2488001 	sub	r8, r8, #1
       q = prev_bin(q);
      } while (first(q) == q);
 8007330:	0afffff8 	beq	8007318 <_malloc_r+0x55c>
 8007334:	e5973004 	ldr	r3, [r7, #4]

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 8007338:	e1a00080 	lsl	r0, r0, #1
 800733c:	e1500003 	cmp	r0, r3
 8007340:	8affff3c 	bhi	8007038 <_malloc_r+0x27c>
 8007344:	e3500000 	cmp	r0, #0
 8007348:	0affff3a 	beq	8007038 <_malloc_r+0x27c>
      {
        while ((block & binblocks) == 0)
 800734c:	e1130000 	tst	r3, r0
 8007350:	0a000059 	beq	80074bc <_malloc_r+0x700>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 8007354:	e1a08004 	mov	r8, r4
 8007358:	eaffff05 	b	8006f74 <_malloc_r+0x1b8>

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
    {
      q = next_bin(q);
 800735c:	e2843008 	add	r3, r4, #8
      victim = last(q);
 8007360:	e5944014 	ldr	r4, [r4, #20]
    }
#endif
    if (victim != q)
 8007364:	e1530004 	cmp	r3, r4
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 8007368:	02888002 	addeq	r8, r8, #2
    {
      q = next_bin(q);
      victim = last(q);
    }
#endif
    if (victim != q)
 800736c:	0afffed3 	beq	8006ec0 <_malloc_r+0x104>
 8007370:	eafffeab 	b	8006e24 <_malloc_r+0x68>
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
 8007374:	e0831001 	add	r1, r3, r1
 8007378:	e591c004 	ldr	ip, [r1, #4]
            unlink(victim, bck, fwd);
 800737c:	e1a04003 	mov	r4, r3
 8007380:	e5b42008 	ldr	r2, [r4, #8]!
 8007384:	e593300c 	ldr	r3, [r3, #12]
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
 8007388:	e38cc001 	orr	ip, ip, #1
            unlink(victim, bck, fwd);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 800738c:	e1a00006 	mov	r0, r6
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
 8007390:	e581c004 	str	ip, [r1, #4]
            unlink(victim, bck, fwd);
 8007394:	e582300c 	str	r3, [r2, #12]
 8007398:	e5832008 	str	r2, [r3, #8]
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 800739c:	eb0000d3 	bl	80076f0 <__malloc_unlock>
            return chunk2mem(victim);
 80073a0:	eafffeac 	b	8006e58 <_malloc_r+0x9c>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 80073a4:	e1a0a322 	lsr	sl, r2, #6
 80073a8:	e28aa038 	add	sl, sl, #56	; 0x38
 80073ac:	e1a0008a 	lsl	r0, sl, #1
 80073b0:	eaffffb3 	b	8007284 <_malloc_r+0x4c8>

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
 80073b4:	e1540007 	cmp	r4, r7
 80073b8:	e59f3110 	ldr	r3, [pc, #272]	; 80074d0 <_malloc_r+0x714>
 80073bc:	0affff3a 	beq	80070ac <_malloc_r+0x2f0>
 80073c0:	e5934008 	ldr	r4, [r3, #8]
 80073c4:	e5943004 	ldr	r3, [r4, #4]
 80073c8:	e3c33003 	bic	r3, r3, #3
 80073cc:	eaffff77 	b	80071b0 <_malloc_r+0x3f4>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
 80073d0:	e3580f55 	cmp	r8, #340	; 0x154
 80073d4:	8a00000f 	bhi	8007418 <_malloc_r+0x65c>
 80073d8:	e1a087a5 	lsr	r8, r5, #15
 80073dc:	e2888077 	add	r8, r8, #119	; 0x77
 80073e0:	e1a01088 	lsl	r1, r8, #1
 80073e4:	eafffea3 	b	8006e78 <_malloc_r+0xbc>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 80073e8:	e59c2004 	ldr	r2, [ip, #4]
 80073ec:	e1a0a14a 	asr	sl, sl, #2
 80073f0:	e3a01001 	mov	r1, #1
 80073f4:	e1821a11 	orr	r1, r2, r1, lsl sl
 80073f8:	e1a02003 	mov	r2, r3
 80073fc:	e58c1004 	str	r1, [ip, #4]
 8007400:	eaffffad 	b	80072bc <_malloc_r+0x500>
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 8007404:	e3a03001 	mov	r3, #1
 8007408:	e5883004 	str	r3, [r8, #4]
 800740c:	e1a04008 	mov	r4, r8
 8007410:	e3a03000 	mov	r3, #0
 8007414:	eaffff65 	b	80071b0 <_malloc_r+0x3f4>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */

  }
  else
  {
    idx = bin_index(nb);
 8007418:	e59f30b8 	ldr	r3, [pc, #184]	; 80074d8 <_malloc_r+0x71c>
 800741c:	e1580003 	cmp	r8, r3
 8007420:	91a08925 	lsrls	r8, r5, #18
 8007424:	9288807c 	addls	r8, r8, #124	; 0x7c
 8007428:	91a01088 	lslls	r1, r8, #1
 800742c:	83a010fc 	movhi	r1, #252	; 0xfc
 8007430:	83a0807e 	movhi	r8, #126	; 0x7e
 8007434:	eafffe8f 	b	8006e78 <_malloc_r+0xbc>
 8007438:	e5974008 	ldr	r4, [r7, #8]
 800743c:	e5943004 	ldr	r3, [r4, #4]
 8007440:	e3c33003 	bic	r3, r3, #3
 8007444:	eaffff59 	b	80071b0 <_malloc_r+0x3f4>

  sbrked_mem += sbrk_size;

  if (brk == old_end /* can just add bytes to current top, unless
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 8007448:	e1b01a02 	lsls	r1, r2, #20
 800744c:	1affff1b 	bne	80070c0 <_malloc_r+0x304>
  {
    top_size = sbrk_size + old_top_size;
 8007450:	e08b100a 	add	r1, fp, sl
    set_head(top, top_size | PREV_INUSE);
 8007454:	e5972008 	ldr	r2, [r7, #8]
 8007458:	e3811001 	orr	r1, r1, #1
 800745c:	e5821004 	str	r1, [r2, #4]
 8007460:	eaffff45 	b	800717c <_malloc_r+0x3c0>
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
        fREe(RCALL chunk2mem(old_top));
 8007464:	e2841008 	add	r1, r4, #8
 8007468:	e1a00006 	mov	r0, r6
 800746c:	ebfffd84 	bl	8006a84 <_free_r>
 8007470:	e59b3004 	ldr	r3, [fp, #4]
 8007474:	eaffff40 	b	800717c <_malloc_r+0x3c0>
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 8007478:	e3530f55 	cmp	r3, #340	; 0x154
 800747c:	91a0a7a2 	lsrls	sl, r2, #15
 8007480:	928aa077 	addls	sl, sl, #119	; 0x77
 8007484:	91a0008a 	lslls	r0, sl, #1
 8007488:	9affff7d 	bls	8007284 <_malloc_r+0x4c8>
 800748c:	e59f1044 	ldr	r1, [pc, #68]	; 80074d8 <_malloc_r+0x71c>
 8007490:	e1530001 	cmp	r3, r1
 8007494:	91a0a922 	lsrls	sl, r2, #18
 8007498:	928aa07c 	addls	sl, sl, #124	; 0x7c
 800749c:	91a0008a 	lslls	r0, sl, #1
 80074a0:	83a000fc 	movhi	r0, #252	; 0xfc
 80074a4:	83a0a07e 	movhi	sl, #126	; 0x7e
 80074a8:	eaffff75 	b	8007284 <_malloc_r+0x4c8>

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
        {
          binblocks &= ~block;
 80074ac:	e5973004 	ldr	r3, [r7, #4]
 80074b0:	e1c33000 	bic	r3, r3, r0
 80074b4:	e5873004 	str	r3, [r7, #4]
          break;
 80074b8:	eaffff9e 	b	8007338 <_malloc_r+0x57c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
        {
          idx += BINBLOCKWIDTH;
          block <<= 1;
 80074bc:	e1a00080 	lsl	r0, r0, #1

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 80074c0:	e1130000 	tst	r3, r0
        {
          idx += BINBLOCKWIDTH;
 80074c4:	e2844004 	add	r4, r4, #4

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 80074c8:	1affffa1 	bne	8007354 <_malloc_r+0x598>
 80074cc:	eafffffa 	b	80074bc <_malloc_r+0x700>
 80074d0:	2000054c 	.word	0x2000054c
 80074d4:	20000970 	.word	0x20000970
 80074d8:	00000554 	.word	0x00000554

080074dc <memchr>:
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
 80074dc:	e3100003 	tst	r0, #3
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 80074e0:	e92d0070 	push	{r4, r5, r6}
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
  unsigned char d = c;
 80074e4:	e20110ff 	and	r1, r1, #255	; 0xff
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
 80074e8:	0a00003c 	beq	80075e0 <memchr+0x104>
    {
      if (!length--)
 80074ec:	e3520000 	cmp	r2, #0
 80074f0:	e242c001 	sub	ip, r2, #1
 80074f4:	0a00003b 	beq	80075e8 <memchr+0x10c>
        return NULL;
      if (*src == d)
 80074f8:	e5d03000 	ldrb	r3, [r0]
 80074fc:	e1530001 	cmp	r3, r1
 8007500:	0a00001f 	beq	8007584 <memchr+0xa8>
#define NULL 0
#endif

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
 8007504:	e2803001 	add	r3, r0, #1
 8007508:	ea000006 	b	8007528 <memchr+0x4c>
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
    {
      if (!length--)
 800750c:	e35c0000 	cmp	ip, #0
 8007510:	0a00001d 	beq	800758c <memchr+0xb0>
        return NULL;
      if (*src == d)
 8007514:	e5d02000 	ldrb	r2, [r0]
 8007518:	e1520001 	cmp	r2, r1
 800751c:	e2833001 	add	r3, r3, #1
 8007520:	e24cc001 	sub	ip, ip, #1
 8007524:	0a000016 	beq	8007584 <memchr+0xa8>
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
 8007528:	e3130003 	tst	r3, #3
    {
      if (!length--)
        return NULL;
      if (*src == d)
        return (void *) src;
      src++;
 800752c:	e1a00003 	mov	r0, r3
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
 8007530:	1afffff5 	bne	800750c <memchr+0x30>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 8007534:	e35c0003 	cmp	ip, #3
 8007538:	8a000015 	bhi	8007594 <memchr+0xb8>
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 800753c:	e35c0000 	cmp	ip, #0
 8007540:	e24c4001 	sub	r4, ip, #1
 8007544:	0a000010 	beq	800758c <memchr+0xb0>
    {
      if (*src == d)
 8007548:	e5d03000 	ldrb	r3, [r0]
 800754c:	e1530001 	cmp	r3, r1
 8007550:	0a00000b 	beq	8007584 <memchr+0xa8>
 8007554:	e2802001 	add	r2, r0, #1
 8007558:	e3a03000 	mov	r3, #0
 800755c:	ea000004 	b	8007574 <memchr+0x98>
 8007560:	e5d0c000 	ldrb	ip, [r0]
 8007564:	e15c0001 	cmp	ip, r1
 8007568:	e2822001 	add	r2, r2, #1
 800756c:	e2833001 	add	r3, r3, #1
 8007570:	0a000003 	beq	8007584 <memchr+0xa8>
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 8007574:	e1540003 	cmp	r4, r3
    {
      if (*src == d)
        return (void *) src;
      src++;
 8007578:	e1a00002 	mov	r0, r2
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 800757c:	1afffff7 	bne	8007560 <memchr+0x84>
  int i;

  while (UNALIGNED (src))
    {
      if (!length--)
        return NULL;
 8007580:	e3a00000 	mov	r0, #0
        return (void *) src;
      src++;
    }

  return NULL;
}
 8007584:	e8bd0070 	pop	{r4, r5, r6}
 8007588:	e12fff1e 	bx	lr
  int i;

  while (UNALIGNED (src))
    {
      if (!length--)
        return NULL;
 800758c:	e1a0000c 	mov	r0, ip
 8007590:	eafffffb 	b	8007584 <memchr+0xa8>
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
 8007594:	e1816401 	orr	r6, r1, r1, lsl #8
      mask = mask << 16 | mask;
 8007598:	e1866806 	orr	r6, r6, r6, lsl #16
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
        {
          if (DETECTCHAR (*asrc, mask))
 800759c:	e5903000 	ldr	r3, [r0]
 80075a0:	e59f4048 	ldr	r4, [pc, #72]	; 80075f0 <memchr+0x114>
 80075a4:	e0263003 	eor	r3, r6, r3
 80075a8:	e0834004 	add	r4, r3, r4
 80075ac:	e59f2040 	ldr	r2, [pc, #64]	; 80075f4 <memchr+0x118>
 80075b0:	e1c44003 	bic	r4, r4, r3
 80075b4:	e0042002 	and	r2, r4, r2
 80075b8:	e3520000 	cmp	r2, #0
 80075bc:	e1a05000 	mov	r5, r0
 80075c0:	e2800004 	add	r0, r0, #4
 80075c4:	1a000003 	bne	80075d8 <memchr+0xfc>
            break;
          length -= LBLOCKSIZE;
 80075c8:	e24cc004 	sub	ip, ip, #4
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 80075cc:	e35c0003 	cmp	ip, #3
 80075d0:	8afffff1 	bhi	800759c <memchr+0xc0>
 80075d4:	eaffffd8 	b	800753c <memchr+0x60>
        {
          if (DETECTCHAR (*asrc, mask))
 80075d8:	e1a00005 	mov	r0, r5
 80075dc:	eaffffd6 	b	800753c <memchr+0x60>
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  int i;

  while (UNALIGNED (src))
 80075e0:	e1a0c002 	mov	ip, r2
 80075e4:	eaffffd2 	b	8007534 <memchr+0x58>
    {
      if (!length--)
        return NULL;
 80075e8:	e1a00002 	mov	r0, r2
 80075ec:	eaffffe4 	b	8007584 <memchr+0xa8>
 80075f0:	fefefeff 	.word	0xfefefeff
 80075f4:	80808080 	.word	0x80808080

080075f8 <memcpy>:
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 80075f8:	e352000f 	cmp	r2, #15
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR dst0 _AND
	_CONST _PTR src0 _AND
	size_t len0)
{
 80075fc:	e92d00f0 	push	{r4, r5, r6, r7}
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 8007600:	9a00002a 	bls	80076b0 <memcpy+0xb8>
 8007604:	e1813000 	orr	r3, r1, r0
 8007608:	e3130003 	tst	r3, #3
 800760c:	1a000032 	bne	80076dc <memcpy+0xe4>
 8007610:	e1a0c001 	mov	ip, r1
 8007614:	e1a03000 	mov	r3, r0
 8007618:	e1a04002 	mov	r4, r2
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
 800761c:	e59c5000 	ldr	r5, [ip]
 8007620:	e5835000 	str	r5, [r3]
          *aligned_dst++ = *aligned_src++;
 8007624:	e59c5004 	ldr	r5, [ip, #4]
 8007628:	e5835004 	str	r5, [r3, #4]
          *aligned_dst++ = *aligned_src++;
 800762c:	e59c5008 	ldr	r5, [ip, #8]
 8007630:	e5835008 	str	r5, [r3, #8]
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
 8007634:	e2444010 	sub	r4, r4, #16
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
 8007638:	e59c500c 	ldr	r5, [ip, #12]
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 800763c:	e354000f 	cmp	r4, #15
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
 8007640:	e583500c 	str	r5, [r3, #12]
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
 8007644:	e28cc010 	add	ip, ip, #16
 8007648:	e2833010 	add	r3, r3, #16
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 800764c:	8afffff2 	bhi	800761c <memcpy+0x24>
 8007650:	e2423010 	sub	r3, r2, #16
 8007654:	e3c3300f 	bic	r3, r3, #15
 8007658:	e202c00f 	and	ip, r2, #15
 800765c:	e2833010 	add	r3, r3, #16
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 8007660:	e35c0003 	cmp	ip, #3
 8007664:	e0811003 	add	r1, r1, r3
 8007668:	e0803003 	add	r3, r0, r3
 800766c:	9a00001c 	bls	80076e4 <memcpy+0xec>
 8007670:	e24cc004 	sub	ip, ip, #4
 8007674:	e1a0712c 	lsr	r7, ip, #2
 8007678:	e0816107 	add	r6, r1, r7, lsl #2
 800767c:	e2866004 	add	r6, r6, #4
 8007680:	e1a0c001 	mov	ip, r1
      while (len0 >= BIGBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
          *aligned_dst++ = *aligned_src++;
 8007684:	e1a04003 	mov	r4, r3
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
        {
          *aligned_dst++ = *aligned_src++;
 8007688:	e49c5004 	ldr	r5, [ip], #4
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 800768c:	e15c0006 	cmp	ip, r6
        {
          *aligned_dst++ = *aligned_src++;
 8007690:	e4845004 	str	r5, [r4], #4
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 8007694:	1afffffb 	bne	8007688 <memcpy+0x90>
 8007698:	e287c001 	add	ip, r7, #1
 800769c:	e1a0c10c 	lsl	ip, ip, #2
        {
          *aligned_dst++ = *aligned_src++;
 80076a0:	e081100c 	add	r1, r1, ip
 80076a4:	e083300c 	add	r3, r3, ip
 80076a8:	e2022003 	and	r2, r2, #3
 80076ac:	ea000000 	b	80076b4 <memcpy+0xbc>
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 80076b0:	e1a03000 	mov	r3, r0
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 80076b4:	e3520000 	cmp	r2, #0
 80076b8:	0a000005 	beq	80076d4 <memcpy+0xdc>
 80076bc:	e2411001 	sub	r1, r1, #1
 80076c0:	e0832002 	add	r2, r3, r2
    *dst++ = *src++;
 80076c4:	e5f1c001 	ldrb	ip, [r1, #1]!
 80076c8:	e4c3c001 	strb	ip, [r3], #1
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 80076cc:	e1530002 	cmp	r3, r2
 80076d0:	1afffffb 	bne	80076c4 <memcpy+0xcc>
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80076d4:	e8bd00f0 	pop	{r4, r5, r6, r7}
 80076d8:	e12fff1e 	bx	lr
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 80076dc:	e1a03000 	mov	r3, r0
 80076e0:	eafffff5 	b	80076bc <memcpy+0xc4>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 80076e4:	e1a0200c 	mov	r2, ip
 80076e8:	eafffff1 	b	80076b4 <memcpy+0xbc>

080076ec <__malloc_lock>:
#endif

void
__malloc_lock (ptr)
     struct _reent *ptr;
{
 80076ec:	e12fff1e 	bx	lr

080076f0 <__malloc_unlock>:
}

void
__malloc_unlock (ptr)
     struct _reent *ptr;
{
 80076f0:	e12fff1e 	bx	lr

080076f4 <_Balloc>:
{
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 80076f4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
 80076f8:	e3530000 	cmp	r3, #0
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 80076fc:	e92d4070 	push	{r4, r5, r6, lr}
 8007700:	e1a05000 	mov	r5, r0
 8007704:	e1a04001 	mov	r4, r1
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 8007708:	0a000009 	beq	8007734 <_Balloc+0x40>
	{
	  return NULL;
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 800770c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
 8007710:	e3500000 	cmp	r0, #0
 8007714:	0a00000f 	beq	8007758 <_Balloc+0x64>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 8007718:	e5902000 	ldr	r2, [r0]
 800771c:	e7832104 	str	r2, [r3, r4, lsl #2]
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
      rv->_k = k;
      rv->_maxwds = x;
    }
  rv->_sign = rv->_wds = 0;
 8007720:	e3a03000 	mov	r3, #0
 8007724:	e5803010 	str	r3, [r0, #16]
 8007728:	e580300c 	str	r3, [r0, #12]
  return rv;
}
 800772c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8007730:	e12fff1e 	bx	lr

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 8007734:	e3a01004 	mov	r1, #4
 8007738:	e3a02021 	mov	r2, #33	; 0x21
 800773c:	eb00080d 	bl	8009778 <_calloc_r>
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 8007740:	e3500000 	cmp	r0, #0

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 8007744:	e1a03000 	mov	r3, r0
 8007748:	e585004c 	str	r0, [r5, #76]	; 0x4c
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 800774c:	1affffee 	bne	800770c <_Balloc+0x18>
	{
	  return NULL;
 8007750:	e3a00000 	mov	r0, #0
 8007754:	eafffff4 	b	800772c <_Balloc+0x38>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
    }
  else
    {
      x = 1 << k;
 8007758:	e3a01001 	mov	r1, #1
 800775c:	e1a06411 	lsl	r6, r1, r4
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 8007760:	e2862005 	add	r2, r6, #5
 8007764:	e1a00005 	mov	r0, r5
 8007768:	e1a02102 	lsl	r2, r2, #2
 800776c:	eb000801 	bl	8009778 <_calloc_r>
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 8007770:	e3500000 	cmp	r0, #0
 8007774:	0afffff5 	beq	8007750 <_Balloc+0x5c>
      rv->_k = k;
      rv->_maxwds = x;
 8007778:	e9800050 	stmib	r0, {r4, r6}
 800777c:	eaffffe7 	b	8007720 <_Balloc+0x2c>

08007780 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
 8007780:	e3510000 	cmp	r1, #0
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007784:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
 8007788:	15912004 	ldrne	r2, [r1, #4]
 800778c:	17930102 	ldrne	r0, [r3, r2, lsl #2]
 8007790:	15810000 	strne	r0, [r1]
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 8007794:	17831102 	strne	r1, [r3, r2, lsl #2]
 8007798:	e12fff1e 	bx	lr

0800779c <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 800779c:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 80077a0:	e5917010 	ldr	r7, [r1, #16]
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 80077a4:	e24dd00c 	sub	sp, sp, #12
 80077a8:	e1a08001 	mov	r8, r1
 80077ac:	e1a0a000 	mov	sl, r0
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
  x = b->_x;
 80077b0:	e2814014 	add	r4, r1, #20
  i = 0;
 80077b4:	e3a0c000 	mov	ip, #0
  do
    {
#ifdef Pack_32
      xi = *x;
 80077b8:	e5946000 	ldr	r6, [r4]
      y = (xi & 0xffff) * m + a;
 80077bc:	e1a05806 	lsl	r5, r6, #16
 80077c0:	e1a05825 	lsr	r5, r5, #16
 80077c4:	e0253592 	mla	r5, r2, r5, r3
      z = (xi >> 16) * m + (y >> 16);
 80077c8:	e1a03826 	lsr	r3, r6, #16
 80077cc:	e0030392 	mul	r3, r2, r3
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
 80077d0:	e1a01805 	lsl	r1, r5, #16
  do
    {
#ifdef Pack_32
      xi = *x;
      y = (xi & 0xffff) * m + a;
      z = (xi >> 16) * m + (y >> 16);
 80077d4:	e0833825 	add	r3, r3, r5, lsr #16
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 80077d8:	e28cc001 	add	ip, ip, #1
#ifdef Pack_32
      xi = *x;
      y = (xi & 0xffff) * m + a;
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
 80077dc:	e1a01821 	lsr	r1, r1, #16
 80077e0:	e0811803 	add	r1, r1, r3, lsl #16
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 80077e4:	e157000c 	cmp	r7, ip
#ifdef Pack_32
      xi = *x;
      y = (xi & 0xffff) * m + a;
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
      *x++ = (z << 16) + (y & 0xffff);
 80077e8:	e4841004 	str	r1, [r4], #4
    {
#ifdef Pack_32
      xi = *x;
      y = (xi & 0xffff) * m + a;
      z = (xi >> 16) * m + (y >> 16);
      a = (int) (z >> 16);
 80077ec:	e1a03823 	lsr	r3, r3, #16
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 80077f0:	cafffff0 	bgt	80077b8 <__multadd+0x1c>
  if (a)
 80077f4:	e3530000 	cmp	r3, #0
 80077f8:	0a000006 	beq	8007818 <__multadd+0x7c>
    {
      if (wds >= b->_maxwds)
 80077fc:	e5982008 	ldr	r2, [r8, #8]
 8007800:	e1570002 	cmp	r7, r2
 8007804:	aa000007 	bge	8007828 <__multadd+0x8c>
	  b1 = Balloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
	}
      b->_x[wds++] = a;
 8007808:	e0882107 	add	r2, r8, r7, lsl #2
 800780c:	e2877001 	add	r7, r7, #1
 8007810:	e5823014 	str	r3, [r2, #20]
      b->_wds = wds;
 8007814:	e5887010 	str	r7, [r8, #16]
    }
  return b;
}
 8007818:	e1a00008 	mov	r0, r8
 800781c:	e28dd00c 	add	sp, sp, #12
 8007820:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
 8007824:	e12fff1e 	bx	lr
  while (++i < wds);
  if (a)
    {
      if (wds >= b->_maxwds)
	{
	  b1 = Balloc (ptr, b->_k + 1);
 8007828:	e5981004 	ldr	r1, [r8, #4]
 800782c:	e1a0000a 	mov	r0, sl
 8007830:	e2811001 	add	r1, r1, #1
 8007834:	e58d3004 	str	r3, [sp, #4]
 8007838:	ebffffad 	bl	80076f4 <_Balloc>
	  Bcopy (b1, b);
 800783c:	e5982010 	ldr	r2, [r8, #16]
 8007840:	e2822002 	add	r2, r2, #2
 8007844:	e288100c 	add	r1, r8, #12
  while (++i < wds);
  if (a)
    {
      if (wds >= b->_maxwds)
	{
	  b1 = Balloc (ptr, b->_k + 1);
 8007848:	e1a04000 	mov	r4, r0
	  Bcopy (b1, b);
 800784c:	e1a02102 	lsl	r2, r2, #2
 8007850:	e280000c 	add	r0, r0, #12
 8007854:	ebffff67 	bl	80075f8 <memcpy>
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007858:	e59a204c 	ldr	r2, [sl, #76]	; 0x4c
 800785c:	e5981004 	ldr	r1, [r8, #4]
 8007860:	e7920101 	ldr	r0, [r2, r1, lsl #2]
      if (wds >= b->_maxwds)
	{
	  b1 = Balloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
 8007864:	e59d3004 	ldr	r3, [sp, #4]
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007868:	e5880000 	str	r0, [r8]
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 800786c:	e7828101 	str	r8, [r2, r1, lsl #2]
      if (wds >= b->_maxwds)
	{
	  b1 = Balloc (ptr, b->_k + 1);
	  Bcopy (b1, b);
	  Bfree (ptr, b);
	  b = b1;
 8007870:	e1a08004 	mov	r8, r4
 8007874:	eaffffe3 	b	8007808 <__multadd+0x6c>

08007878 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 8007878:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
 800787c:	e1a07003 	mov	r7, r3
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 8007880:	e59f30d4 	ldr	r3, [pc, #212]	; 800795c <__s2b+0xe4>
 8007884:	e287c008 	add	ip, r7, #8
 8007888:	e0c3e39c 	smull	lr, r3, ip, r3
 800788c:	e1a0cfcc 	asr	ip, ip, #31
 8007890:	e06c30c3 	rsb	r3, ip, r3, asr #1
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 8007894:	e3530001 	cmp	r3, #1
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 8007898:	e1a05000 	mov	r5, r0
 800789c:	e1a04001 	mov	r4, r1
 80078a0:	e1a08002 	mov	r8, r2
 80078a4:	e59d6020 	ldr	r6, [sp, #32]
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 80078a8:	da000029 	ble	8007954 <__s2b+0xdc>
 80078ac:	e3a0c001 	mov	ip, #1
 80078b0:	e3a01000 	mov	r1, #0
 80078b4:	e1a0c08c 	lsl	ip, ip, #1
 80078b8:	e153000c 	cmp	r3, ip
 80078bc:	e2811001 	add	r1, r1, #1
 80078c0:	cafffffb 	bgt	80078b4 <__s2b+0x3c>
#ifdef Pack_32
  b = Balloc (ptr, k);
 80078c4:	e1a00005 	mov	r0, r5
 80078c8:	ebffff89 	bl	80076f4 <_Balloc>
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
  if (9 < nd0)
 80078cc:	e3580009 	cmp	r8, #9
  x = (nd + 8) / 9;
  for (k = 0, y = 1; x > y; y <<= 1, k++);
#ifdef Pack_32
  b = Balloc (ptr, k);
  b->_x[0] = y9;
  b->_wds = 1;
 80078d0:	e3a03001 	mov	r3, #1

  x = (nd + 8) / 9;
  for (k = 0, y = 1; x > y; y <<= 1, k++);
#ifdef Pack_32
  b = Balloc (ptr, k);
  b->_x[0] = y9;
 80078d4:	e5806014 	str	r6, [r0, #20]
  b->_wds = 1;
 80078d8:	e5803010 	str	r3, [r0, #16]
	b = multadd (ptr, b, 10, *s++ - '0');
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
 80078dc:	d284400a 	addle	r4, r4, #10
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 80078e0:	d3a08009 	movle	r8, #9
  if (9 < nd0)
 80078e4:	da00000c 	ble	800791c <__s2b+0xa4>
    {
      s += 9;
 80078e8:	e284a009 	add	sl, r4, #9
 80078ec:	e1a0600a 	mov	r6, sl
    }
  return b;
}

_Bigint *
_DEFUN (s2b, (ptr, s, nd0, nd, y9),
 80078f0:	e0844008 	add	r4, r4, r8
  i = 9;
  if (9 < nd0)
    {
      s += 9;
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 80078f4:	e4d63001 	ldrb	r3, [r6], #1
 80078f8:	e1a01000 	mov	r1, r0
 80078fc:	e2433030 	sub	r3, r3, #48	; 0x30
 8007900:	e1a00005 	mov	r0, r5
 8007904:	e3a0200a 	mov	r2, #10
 8007908:	ebffffa3 	bl	800779c <__multadd>
      while (++i < nd0);
 800790c:	e1560004 	cmp	r6, r4
 8007910:	1afffff7 	bne	80078f4 <__s2b+0x7c>
 8007914:	e08a4008 	add	r4, sl, r8
      s++;
 8007918:	e2444008 	sub	r4, r4, #8
    }
  else
    s += 10;
  for (; i < nd; i++)
 800791c:	e1570008 	cmp	r7, r8
 8007920:	da000009 	ble	800794c <__s2b+0xd4>
    }
  return b;
}

_Bigint *
_DEFUN (s2b, (ptr, s, nd0, nd, y9),
 8007924:	e0687007 	rsb	r7, r8, r7
 8007928:	e0847007 	add	r7, r4, r7
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
    b = multadd (ptr, b, 10, *s++ - '0');
 800792c:	e4d43001 	ldrb	r3, [r4], #1
 8007930:	e1a01000 	mov	r1, r0
 8007934:	e2433030 	sub	r3, r3, #48	; 0x30
 8007938:	e1a00005 	mov	r0, r5
 800793c:	e3a0200a 	mov	r2, #10
 8007940:	ebffff95 	bl	800779c <__multadd>
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 8007944:	e1540007 	cmp	r4, r7
 8007948:	1afffff7 	bne	800792c <__s2b+0xb4>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
}
 800794c:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
 8007950:	e12fff1e 	bx	lr
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 8007954:	e3a01000 	mov	r1, #0
 8007958:	eaffffd9 	b	80078c4 <__s2b+0x4c>
 800795c:	38e38e39 	.word	0x38e38e39

08007960 <__hi0bits>:
_DEFUN (hi0bits,
	(x), register __ULong x)
{
  register int k = 0;

  if (!(x & 0xffff0000))
 8007960:	e1b02820 	lsrs	r2, r0, #16
}

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 8007964:	e1a03000 	mov	r3, r0
  register int k = 0;

  if (!(x & 0xffff0000))
    {
      k = 16;
      x <<= 16;
 8007968:	01a03800 	lsleq	r3, r0, #16

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
  register int k = 0;
 800796c:	13a00000 	movne	r0, #0

  if (!(x & 0xffff0000))
    {
      k = 16;
 8007970:	03a00010 	moveq	r0, #16
      x <<= 16;
    }
  if (!(x & 0xff000000))
 8007974:	e31304ff 	tst	r3, #-16777216	; 0xff000000
    {
      k += 8;
      x <<= 8;
 8007978:	01a03403 	lsleq	r3, r3, #8
      k = 16;
      x <<= 16;
    }
  if (!(x & 0xff000000))
    {
      k += 8;
 800797c:	02800008 	addeq	r0, r0, #8
      x <<= 8;
    }
  if (!(x & 0xf0000000))
 8007980:	e313020f 	tst	r3, #-268435456	; 0xf0000000
    {
      k += 4;
      x <<= 4;
 8007984:	01a03203 	lsleq	r3, r3, #4
      k += 8;
      x <<= 8;
    }
  if (!(x & 0xf0000000))
    {
      k += 4;
 8007988:	02800004 	addeq	r0, r0, #4
      x <<= 4;
    }
  if (!(x & 0xc0000000))
 800798c:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
    {
      k += 2;
      x <<= 2;
 8007990:	01a03103 	lsleq	r3, r3, #2
      k += 4;
      x <<= 4;
    }
  if (!(x & 0xc0000000))
    {
      k += 2;
 8007994:	02800002 	addeq	r0, r0, #2
      x <<= 2;
    }
  if (!(x & 0x80000000))
 8007998:	e3530000 	cmp	r3, #0
 800799c:	b12fff1e 	bxlt	lr
    {
      k++;
      if (!(x & 0x40000000))
 80079a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
      k += 2;
      x <<= 2;
    }
  if (!(x & 0x80000000))
    {
      k++;
 80079a4:	12800001 	addne	r0, r0, #1
      if (!(x & 0x40000000))
	return 32;
 80079a8:	03a00020 	moveq	r0, #32
    }
  return k;
}
 80079ac:	e12fff1e 	bx	lr

080079b0 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
  register int k;
  register __ULong x = *y;
 80079b0:	e5903000 	ldr	r3, [r0]
  return k;
}

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 80079b4:	e1a02000 	mov	r2, r0
  register int k;
  register __ULong x = *y;

  if (x & 7)
 80079b8:	e2130007 	ands	r0, r3, #7
 80079bc:	0a000009 	beq	80079e8 <__lo0bits+0x38>
    {
      if (x & 1)
 80079c0:	e3130001 	tst	r3, #1
 80079c4:	1a00001c 	bne	8007a3c <__lo0bits+0x8c>
	return 0;
      if (x & 2)
 80079c8:	e3130002 	tst	r3, #2
	{
	  *y = x >> 1;
 80079cc:	11a030a3 	lsrne	r3, r3, #1
	  return 1;
	}
      *y = x >> 2;
 80079d0:	01a03123 	lsreq	r3, r3, #2
      if (x & 1)
	return 0;
      if (x & 2)
	{
	  *y = x >> 1;
	  return 1;
 80079d4:	13a00001 	movne	r0, #1
    {
      if (x & 1)
	return 0;
      if (x & 2)
	{
	  *y = x >> 1;
 80079d8:	15823000 	strne	r3, [r2]
	  return 1;
	}
      *y = x >> 2;
 80079dc:	05823000 	streq	r3, [r2]
      return 2;
 80079e0:	03a00002 	moveq	r0, #2
 80079e4:	e12fff1e 	bx	lr
    }
  k = 0;
  if (!(x & 0xffff))
 80079e8:	e1b01803 	lsls	r1, r3, #16
    {
      k = 16;
      x >>= 16;
 80079ec:	01a03823 	lsreq	r3, r3, #16
      return 2;
    }
  k = 0;
  if (!(x & 0xffff))
    {
      k = 16;
 80079f0:	03a00010 	moveq	r0, #16
      x >>= 16;
    }
  if (!(x & 0xff))
 80079f4:	e31300ff 	tst	r3, #255	; 0xff
    {
      k += 8;
      x >>= 8;
 80079f8:	01a03423 	lsreq	r3, r3, #8
      k = 16;
      x >>= 16;
    }
  if (!(x & 0xff))
    {
      k += 8;
 80079fc:	02800008 	addeq	r0, r0, #8
      x >>= 8;
    }
  if (!(x & 0xf))
 8007a00:	e313000f 	tst	r3, #15
    {
      k += 4;
      x >>= 4;
 8007a04:	01a03223 	lsreq	r3, r3, #4
      k += 8;
      x >>= 8;
    }
  if (!(x & 0xf))
    {
      k += 4;
 8007a08:	02800004 	addeq	r0, r0, #4
      x >>= 4;
    }
  if (!(x & 0x3))
 8007a0c:	e3130003 	tst	r3, #3
    {
      k += 2;
      x >>= 2;
 8007a10:	01a03123 	lsreq	r3, r3, #2
      k += 4;
      x >>= 4;
    }
  if (!(x & 0x3))
    {
      k += 2;
 8007a14:	02800002 	addeq	r0, r0, #2
      x >>= 2;
    }
  if (!(x & 1))
 8007a18:	e3130001 	tst	r3, #1
 8007a1c:	1a000004 	bne	8007a34 <__lo0bits+0x84>
    {
      k++;
      x >>= 1;
      if (!x & 1)
 8007a20:	e1b030a3 	lsrs	r3, r3, #1
 8007a24:	1a000001 	bne	8007a30 <__lo0bits+0x80>
	return 32;
 8007a28:	e3a00020 	mov	r0, #32
    }
  *y = x;
  return k;
}
 8007a2c:	e12fff1e 	bx	lr
      k += 2;
      x >>= 2;
    }
  if (!(x & 1))
    {
      k++;
 8007a30:	e2800001 	add	r0, r0, #1
      x >>= 1;
      if (!x & 1)
	return 32;
    }
  *y = x;
 8007a34:	e5823000 	str	r3, [r2]
  return k;
 8007a38:	e12fff1e 	bx	lr
  register __ULong x = *y;

  if (x & 7)
    {
      if (x & 1)
	return 0;
 8007a3c:	e3a00000 	mov	r0, #0
 8007a40:	e12fff1e 	bx	lr

08007a44 <__i2b>:
  return k;
}

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 8007a44:	e92d4010 	push	{r4, lr}
 8007a48:	e1a04001 	mov	r4, r1
  _Bigint *b;

  b = Balloc (ptr, 1);
 8007a4c:	e3a01001 	mov	r1, #1
 8007a50:	ebffff27 	bl	80076f4 <_Balloc>
  b->_x[0] = i;
  b->_wds = 1;
 8007a54:	e3a02001 	mov	r2, #1
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
  _Bigint *b;

  b = Balloc (ptr, 1);
  b->_x[0] = i;
 8007a58:	e5804014 	str	r4, [r0, #20]
  b->_wds = 1;
 8007a5c:	e5802010 	str	r2, [r0, #16]
  return b;
}
 8007a60:	e8bd4010 	pop	{r4, lr}
 8007a64:	e12fff1e 	bx	lr

08007a68 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 8007a68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 8007a6c:	e5918010 	ldr	r8, [r1, #16]
 8007a70:	e592a010 	ldr	sl, [r2, #16]
 8007a74:	e158000a 	cmp	r8, sl
  return b;
}

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 8007a78:	e24dd014 	sub	sp, sp, #20
 8007a7c:	e1a04001 	mov	r4, r1
 8007a80:	e1a06002 	mov	r6, r2
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 8007a84:	aa000004 	bge	8007a9c <__multiply+0x34>
 8007a88:	e1a02008 	mov	r2, r8
 8007a8c:	e1a04006 	mov	r4, r6
 8007a90:	e1a0800a 	mov	r8, sl
 8007a94:	e1a06001 	mov	r6, r1
 8007a98:	e1a0a002 	mov	sl, r2
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
 8007a9c:	e5943008 	ldr	r3, [r4, #8]
      b = c;
    }
  k = a->_k;
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
 8007aa0:	e088500a 	add	r5, r8, sl
    {
      c = a;
      a = b;
      b = c;
    }
  k = a->_k;
 8007aa4:	e5941004 	ldr	r1, [r4, #4]
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
 8007aa8:	e1550003 	cmp	r5, r3
    k++;
 8007aac:	c2811001 	addgt	r1, r1, #1
  c = Balloc (ptr, k);
 8007ab0:	ebffff0f 	bl	80076f4 <_Balloc>
  for (x = c->_x, xa = x + wc; x < xa; x++)
 8007ab4:	e0807105 	add	r7, r0, r5, lsl #2
 8007ab8:	e2803014 	add	r3, r0, #20
 8007abc:	e2877014 	add	r7, r7, #20
 8007ac0:	e1530007 	cmp	r3, r7
  wa = a->_wds;
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
 8007ac4:	e58d0004 	str	r0, [sp, #4]
  for (x = c->_x, xa = x + wc; x < xa; x++)
    *x = 0;
 8007ac8:	33a00000 	movcc	r0, #0
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 8007acc:	2a000002 	bcs	8007adc <__multiply+0x74>
    *x = 0;
 8007ad0:	e4830004 	str	r0, [r3], #4
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 8007ad4:	e1570003 	cmp	r7, r3
 8007ad8:	8afffffc 	bhi	8007ad0 <__multiply+0x68>
    *x = 0;
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
 8007adc:	e086a10a 	add	sl, r6, sl, lsl #2
 8007ae0:	e28aa014 	add	sl, sl, #20
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
    *x = 0;
  xa = a->_x;
  xae = xa + wa;
  xb = b->_x;
 8007ae4:	e2866014 	add	r6, r6, #20
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
    *x = 0;
  xa = a->_x;
  xae = xa + wa;
 8007ae8:	e084c108 	add	ip, r4, r8, lsl #2
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 8007aec:	e156000a 	cmp	r6, sl
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
    *x = 0;
  xa = a->_x;
  xae = xa + wa;
 8007af0:	e28cc014 	add	ip, ip, #20
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
    *x = 0;
  xa = a->_x;
 8007af4:	e2843014 	add	r3, r4, #20
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 8007af8:	2a000041 	bcs	8007c04 <__multiply+0x19c>
  b->_wds = 1;
  return b;
}

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
 8007afc:	e59d2004 	ldr	r2, [sp, #4]
 8007b00:	e58d7008 	str	r7, [sp, #8]
 8007b04:	e58d500c 	str	r5, [sp, #12]
 8007b08:	e2824018 	add	r4, r2, #24
 8007b0c:	e1a0700a 	mov	r7, sl
 8007b10:	e1a05003 	mov	r5, r3
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
    {
      if ((y = *xb & 0xffff) != 0)
 8007b14:	e4968004 	ldr	r8, [r6], #4
 8007b18:	e1a0a808 	lsl	sl, r8, #16
 8007b1c:	e1b0a82a 	lsrs	sl, sl, #16
 8007b20:	0a000017 	beq	8007b84 <__multiply+0x11c>
 8007b24:	e1a02005 	mov	r2, r5
  b->_wds = 1;
  return b;
}

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
 8007b28:	e2443004 	sub	r3, r4, #4
 8007b2c:	e3a08000 	mov	r8, #0
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 8007b30:	e4920004 	ldr	r0, [r2], #4
 8007b34:	e5931000 	ldr	r1, [r3]
 8007b38:	e1a0b800 	lsl	fp, r0, #16
 8007b3c:	e1a09801 	lsl	r9, r1, #16
 8007b40:	e1a0b82b 	lsr	fp, fp, #16
 8007b44:	e1a09829 	lsr	r9, r9, #16
 8007b48:	e0299b9a 	mla	r9, sl, fp, r9
	      carry = z >> 16;
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 8007b4c:	e1a01821 	lsr	r1, r1, #16
 8007b50:	e1a00820 	lsr	r0, r0, #16
 8007b54:	e020109a 	mla	r0, sl, r0, r1
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 8007b58:	e0898008 	add	r8, r9, r8
	      carry = z >> 16;
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
	      carry = z2 >> 16;
	      Storeinc (xc, z2, z);
 8007b5c:	e1a01808 	lsl	r1, r8, #16
 8007b60:	e1a01821 	lsr	r1, r1, #16
	  carry = 0;
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
	      carry = z >> 16;
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 8007b64:	e0808828 	add	r8, r0, r8, lsr #16
	      carry = z2 >> 16;
	      Storeinc (xc, z2, z);
 8007b68:	e1811808 	orr	r1, r1, r8, lsl #16
	    }
	  while (x < xae);
 8007b6c:	e15c0002 	cmp	ip, r2
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
	      carry = z >> 16;
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
	      carry = z2 >> 16;
	      Storeinc (xc, z2, z);
 8007b70:	e4831004 	str	r1, [r3], #4
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
	      carry = z >> 16;
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
	      carry = z2 >> 16;
 8007b74:	e1a08828 	lsr	r8, r8, #16
	      Storeinc (xc, z2, z);
	    }
	  while (x < xae);
 8007b78:	8affffec 	bhi	8007b30 <__multiply+0xc8>
	  *xc = carry;
 8007b7c:	e5838000 	str	r8, [r3]
 8007b80:	e5168004 	ldr	r8, [r6, #-4]
	}
      if ((y = *xb >> 16) != 0)
 8007b84:	e1b08828 	lsrs	r8, r8, #16
 8007b88:	0a000018 	beq	8007bf0 <__multiply+0x188>
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
 8007b8c:	e514a004 	ldr	sl, [r4, #-4]
 8007b90:	e1a02005 	mov	r2, r5
 8007b94:	e1a0100a 	mov	r1, sl
 8007b98:	e1a03004 	mov	r3, r4
	}
      if ((y = *xb >> 16) != 0)
	{
	  x = xa;
	  xc = xc0;
	  carry = 0;
 8007b9c:	e3a09000 	mov	r9, #0
	  z2 = *xc;
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 8007ba0:	e1d200b0 	ldrh	r0, [r2]
 8007ba4:	e1a01821 	lsr	r1, r1, #16
 8007ba8:	e0211098 	mla	r1, r8, r0, r1
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
 8007bac:	e1a0a80a 	lsl	sl, sl, #16
	  xc = xc0;
	  carry = 0;
	  z2 = *xc;
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 8007bb0:	e0819009 	add	r9, r1, r9
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
 8007bb4:	e1a0a82a 	lsr	sl, sl, #16
 8007bb8:	e18aa809 	orr	sl, sl, r9, lsl #16
 8007bbc:	e503a004 	str	sl, [r3, #-4]
  b->_wds = 1;
  return b;
}

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
 8007bc0:	e1a0b003 	mov	fp, r3
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 8007bc4:	e4931004 	ldr	r1, [r3], #4
 8007bc8:	e492a004 	ldr	sl, [r2], #4
 8007bcc:	e1a00801 	lsl	r0, r1, #16
 8007bd0:	e1a0a82a 	lsr	sl, sl, #16
 8007bd4:	e1a00820 	lsr	r0, r0, #16
 8007bd8:	e02a0a98 	mla	sl, r8, sl, r0
	      carry = z2 >> 16;
	    }
	  while (x < xae);
 8007bdc:	e15c0002 	cmp	ip, r2
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
	      carry = z >> 16;
	      Storeinc (xc, z, z2);
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 8007be0:	e08aa829 	add	sl, sl, r9, lsr #16
	      carry = z2 >> 16;
 8007be4:	e1a0982a 	lsr	r9, sl, #16
	    }
	  while (x < xae);
 8007be8:	8affffec 	bhi	8007ba0 <__multiply+0x138>
	  *xc = z2;
 8007bec:	e58ba000 	str	sl, [fp]
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 8007bf0:	e1570006 	cmp	r7, r6
 8007bf4:	e2844004 	add	r4, r4, #4
 8007bf8:	8affffc5 	bhi	8007b14 <__multiply+0xac>
 8007bfc:	e59d7008 	ldr	r7, [sp, #8]
 8007c00:	e59d500c 	ldr	r5, [sp, #12]
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 8007c04:	e3550000 	cmp	r5, #0
 8007c08:	da000009 	ble	8007c34 <__multiply+0x1cc>
 8007c0c:	e5173004 	ldr	r3, [r7, #-4]
 8007c10:	e3530000 	cmp	r3, #0
 8007c14:	e2477004 	sub	r7, r7, #4
 8007c18:	0a000003 	beq	8007c2c <__multiply+0x1c4>
 8007c1c:	ea000004 	b	8007c34 <__multiply+0x1cc>
 8007c20:	e5373004 	ldr	r3, [r7, #-4]!
 8007c24:	e3530000 	cmp	r3, #0
 8007c28:	1a000001 	bne	8007c34 <__multiply+0x1cc>
 8007c2c:	e2555001 	subs	r5, r5, #1
 8007c30:	1afffffa 	bne	8007c20 <__multiply+0x1b8>
  c->_wds = wc;
 8007c34:	e59d3004 	ldr	r3, [sp, #4]
 8007c38:	e5835010 	str	r5, [r3, #16]
  return c;
}
 8007c3c:	e1a00003 	mov	r0, r3
 8007c40:	e28dd014 	add	sp, sp, #20
 8007c44:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	e12fff1e 	bx	lr

08007c4c <__pow5mult>:
{
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 8007c4c:	e2123003 	ands	r3, r2, #3
}

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 8007c50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8007c54:	e1a04002 	mov	r4, r2
 8007c58:	e1a08000 	mov	r8, r0
 8007c5c:	e1a07001 	mov	r7, r1
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 8007c60:	1a000025 	bne	8007cfc <__pow5mult+0xb0>
    b = multadd (ptr, b, p05[i - 1], 0);

  if (!(k >>= 2))
 8007c64:	e1b04144 	asrs	r4, r4, #2
 8007c68:	0a000018 	beq	8007cd0 <__pow5mult+0x84>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 8007c6c:	e5986048 	ldr	r6, [r8, #72]	; 0x48
 8007c70:	e3560000 	cmp	r6, #0
 8007c74:	1a000006 	bne	8007c94 <__pow5mult+0x48>
 8007c78:	ea000026 	b	8007d18 <__pow5mult+0xcc>
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
 8007c7c:	e1b040c4 	asrs	r4, r4, #1
 8007c80:	0a000012 	beq	8007cd0 <__pow5mult+0x84>
	break;
      if (!(p51 = p5->_next))
 8007c84:	e5965000 	ldr	r5, [r6]
 8007c88:	e3550000 	cmp	r5, #0
 8007c8c:	11a06005 	movne	r6, r5
 8007c90:	0a000011 	beq	8007cdc <__pow5mult+0x90>
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
      p5->_next = 0;
    }
  for (;;)
    {
      if (k & 1)
 8007c94:	e3140001 	tst	r4, #1
 8007c98:	0afffff7 	beq	8007c7c <__pow5mult+0x30>
	{
	  b1 = mult (ptr, b, p5);
 8007c9c:	e1a01007 	mov	r1, r7
 8007ca0:	e1a02006 	mov	r2, r6
 8007ca4:	e1a00008 	mov	r0, r8
 8007ca8:	ebffff6e 	bl	8007a68 <__multiply>

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
 8007cac:	e3570000 	cmp	r7, #0
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007cb0:	15972004 	ldrne	r2, [r7, #4]
 8007cb4:	1598304c 	ldrne	r3, [r8, #76]	; 0x4c
 8007cb8:	17931102 	ldrne	r1, [r3, r2, lsl #2]
 8007cbc:	15871000 	strne	r1, [r7]
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 8007cc0:	17837102 	strne	r7, [r3, r2, lsl #2]
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
 8007cc4:	e1b040c4 	asrs	r4, r4, #1
    {
      if (k & 1)
	{
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
 8007cc8:	e1a07000 	mov	r7, r0
	}
      if (!(k >>= 1))
 8007ccc:	1affffec 	bne	8007c84 <__pow5mult+0x38>
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
}
 8007cd0:	e1a00007 	mov	r0, r7
 8007cd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8007cd8:	e12fff1e 	bx	lr
	}
      if (!(k >>= 1))
	break;
      if (!(p51 = p5->_next))
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 8007cdc:	e1a01006 	mov	r1, r6
 8007ce0:	e1a02006 	mov	r2, r6
 8007ce4:	e1a00008 	mov	r0, r8
 8007ce8:	ebffff5e 	bl	8007a68 <__multiply>
 8007cec:	e5860000 	str	r0, [r6]
	  p51->_next = 0;
 8007cf0:	e5805000 	str	r5, [r0]
 8007cf4:	e1a06000 	mov	r6, r0
 8007cf8:	eaffffe5 	b	8007c94 <__pow5mult+0x48>
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
    b = multadd (ptr, b, p05[i - 1], 0);
 8007cfc:	e59f2034 	ldr	r2, [pc, #52]	; 8007d38 <__pow5mult+0xec>
 8007d00:	e2433001 	sub	r3, r3, #1
 8007d04:	e7922103 	ldr	r2, [r2, r3, lsl #2]
 8007d08:	e3a03000 	mov	r3, #0
 8007d0c:	ebfffea2 	bl	800779c <__multadd>
 8007d10:	e1a07000 	mov	r7, r0
 8007d14:	eaffffd2 	b	8007c64 <__pow5mult+0x18>
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 8007d18:	e1a00008 	mov	r0, r8
 8007d1c:	e59f1018 	ldr	r1, [pc, #24]	; 8007d3c <__pow5mult+0xf0>
 8007d20:	ebffff47 	bl	8007a44 <__i2b>
      p5->_next = 0;
 8007d24:	e3a03000 	mov	r3, #0
    return b;
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 8007d28:	e5880048 	str	r0, [r8, #72]	; 0x48
 8007d2c:	e1a06000 	mov	r6, r0
      p5->_next = 0;
 8007d30:	e5803000 	str	r3, [r0]
 8007d34:	eaffffd6 	b	8007c94 <__pow5mult+0x48>
 8007d38:	0800ae18 	.word	0x0800ae18
 8007d3c:	00000271 	.word	0x00000271

08007d40 <__lshift>:
  return b;
}

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 8007d40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  n = k >> 5;
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
 8007d44:	e591a010 	ldr	sl, [r1, #16]
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 8007d48:	e1a042c2 	asr	r4, r2, #5
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 8007d4c:	e5913008 	ldr	r3, [r1, #8]
  n = k >> 5;
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
 8007d50:	e084a00a 	add	sl, r4, sl
 8007d54:	e28a5001 	add	r5, sl, #1
  for (i = b->_maxwds; n1 > i; i <<= 1)
 8007d58:	e1550003 	cmp	r5, r3
  return b;
}

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 8007d5c:	e1a07001 	mov	r7, r1
 8007d60:	e1a09002 	mov	r9, r2
 8007d64:	e1a08000 	mov	r8, r0
#ifdef Pack_32
  n = k >> 5;
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 8007d68:	e5911004 	ldr	r1, [r1, #4]
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 8007d6c:	da000003 	ble	8007d80 <__lshift+0x40>
 8007d70:	e1a03083 	lsl	r3, r3, #1
 8007d74:	e1550003 	cmp	r5, r3
    k1++;
 8007d78:	e2811001 	add	r1, r1, #1
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 8007d7c:	cafffffb 	bgt	8007d70 <__lshift+0x30>
    k1++;
  b1 = Balloc (ptr, k1);
 8007d80:	e1a00008 	mov	r0, r8
 8007d84:	ebfffe5a 	bl	80076f4 <_Balloc>
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 8007d88:	e3540000 	cmp	r4, #0
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
 8007d8c:	e280c014 	add	ip, r0, #20
  for (i = 0; i < n; i++)
 8007d90:	da000007 	ble	8007db4 <__lshift+0x74>
 8007d94:	e3a03000 	mov	r3, #0
    *x1++ = 0;
 8007d98:	e1a06003 	mov	r6, r3
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 8007d9c:	e2833001 	add	r3, r3, #1
 8007da0:	e1530004 	cmp	r3, r4
    *x1++ = 0;
 8007da4:	e48c6004 	str	r6, [ip], #4
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 8007da8:	1afffffb 	bne	8007d9c <__lshift+0x5c>
 8007dac:	e0803103 	add	r3, r0, r3, lsl #2
 8007db0:	e283c014 	add	ip, r3, #20
    *x1++ = 0;
  x = b->_x;
  xe = x + b->_wds;
 8007db4:	e5972010 	ldr	r2, [r7, #16]
#ifdef Pack_32
  if (k &= 0x1f)
 8007db8:	e219901f 	ands	r9, r9, #31
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
    *x1++ = 0;
  x = b->_x;
  xe = x + b->_wds;
 8007dbc:	e0872102 	add	r2, r7, r2, lsl #2
 8007dc0:	e2822014 	add	r2, r2, #20
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
    *x1++ = 0;
  x = b->_x;
 8007dc4:	e2874014 	add	r4, r7, #20
  xe = x + b->_wds;
#ifdef Pack_32
  if (k &= 0x1f)
 8007dc8:	0a000014 	beq	8007e20 <__lshift+0xe0>
    {
      k1 = 32 - k;
 8007dcc:	e2693020 	rsb	r3, r9, #32
      z = 0;
 8007dd0:	e3a01000 	mov	r1, #0
      do
	{
	  *x1++ = *x << k | z;
 8007dd4:	e5946000 	ldr	r6, [r4]
 8007dd8:	e1811916 	orr	r1, r1, r6, lsl r9
 8007ddc:	e48c1004 	str	r1, [ip], #4
	  z = *x++ >> k1;
 8007de0:	e4941004 	ldr	r1, [r4], #4
	}
      while (x < xe);
 8007de4:	e1520004 	cmp	r2, r4
      k1 = 32 - k;
      z = 0;
      do
	{
	  *x1++ = *x << k | z;
	  z = *x++ >> k1;
 8007de8:	e1a01331 	lsr	r1, r1, r3
	}
      while (x < xe);
 8007dec:	8afffff8 	bhi	8007dd4 <__lshift+0x94>
      if ((*x1 = z) != 0)
 8007df0:	e3510000 	cmp	r1, #0
 8007df4:	e58c1000 	str	r1, [ip]
	++n1;
 8007df8:	128a5002 	addne	r5, sl, #2
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007dfc:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
 8007e00:	e5972004 	ldr	r2, [r7, #4]
 8007e04:	e7931102 	ldr	r1, [r3, r2, lsl #2]
#endif
  else
    do
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
 8007e08:	e2455001 	sub	r5, r5, #1
 8007e0c:	e5805010 	str	r5, [r0, #16]
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
  _REENT_CHECK_MP(ptr);
  if (v)
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 8007e10:	e5871000 	str	r1, [r7]
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 8007e14:	e7837102 	str	r7, [r3, r2, lsl #2]
      *x1++ = *x++;
    while (x < xe);
  b1->_wds = n1 - 1;
  Bfree (ptr, b);
  return b1;
}
 8007e18:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	e12fff1e 	bx	lr
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 8007e20:	e4943004 	ldr	r3, [r4], #4
    while (x < xe);
 8007e24:	e1520004 	cmp	r2, r4
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 8007e28:	e48c3004 	str	r3, [ip], #4
    while (x < xe);
 8007e2c:	9afffff2 	bls	8007dfc <__lshift+0xbc>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 8007e30:	e4943004 	ldr	r3, [r4], #4
    while (x < xe);
 8007e34:	e1520004 	cmp	r2, r4
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 8007e38:	e48c3004 	str	r3, [ip], #4
    while (x < xe);
 8007e3c:	8afffff7 	bhi	8007e20 <__lshift+0xe0>
 8007e40:	eaffffed 	b	8007dfc <__lshift+0xbc>

08007e44 <__mcmp>:
  return b1;
}

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 8007e44:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
  j = b->_wds;
 8007e48:	e5913010 	ldr	r3, [r1, #16]
  return b1;
}

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 8007e4c:	e1a04000 	mov	r4, r0
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 8007e50:	e5900010 	ldr	r0, [r0, #16]
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 8007e54:	e0500003 	subs	r0, r0, r3
 8007e58:	1a00000c 	bne	8007e90 <__mcmp+0x4c>
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
 8007e5c:	e2833004 	add	r3, r3, #4
 8007e60:	e1a03103 	lsl	r3, r3, #2
  xb0 = b->_x;
  xb = xb0 + j;
 8007e64:	e0811003 	add	r1, r1, r3
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
 8007e68:	e0843003 	add	r3, r4, r3
  xb0 = b->_x;
  xb = xb0 + j;
 8007e6c:	e2811004 	add	r1, r1, #4
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
    return i;
  xa0 = a->_x;
  xa = xa0 + j;
 8007e70:	e2833004 	add	r3, r3, #4
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
    return i;
  xa0 = a->_x;
 8007e74:	e2844014 	add	r4, r4, #20
  xa = xa0 + j;
  xb0 = b->_x;
  xb = xb0 + j;
  for (;;)
    {
      if (*--xa != *--xb)
 8007e78:	e5332004 	ldr	r2, [r3, #-4]!
 8007e7c:	e531c004 	ldr	ip, [r1, #-4]!
 8007e80:	e152000c 	cmp	r2, ip
 8007e84:	1a000003 	bne	8007e98 <__mcmp+0x54>
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
 8007e88:	e1540003 	cmp	r4, r3
 8007e8c:	3afffff9 	bcc	8007e78 <__mcmp+0x34>
	break;
    }
  return 0;
}
 8007e90:	e8bd0010 	pop	{r4}
 8007e94:	e12fff1e 	bx	lr
  xb0 = b->_x;
  xb = xb0 + j;
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
 8007e98:	e15c0002 	cmp	ip, r2
 8007e9c:	93a00001 	movls	r0, #1
 8007ea0:	83e00000 	mvnhi	r0, #0
 8007ea4:	eafffff9 	b	8007e90 <__mcmp+0x4c>

08007ea8 <__mdiff>:
}

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 8007ea8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	e1a06001 	mov	r6, r1
 8007eb0:	e1a05000 	mov	r5, r0
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 8007eb4:	e1a01002 	mov	r1, r2
 8007eb8:	e1a00006 	mov	r0, r6
}

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 8007ebc:	e1a04002 	mov	r4, r2
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 8007ec0:	ebffffdf 	bl	8007e44 <__mcmp>
  if (!i)
 8007ec4:	e2507000 	subs	r7, r0, #0
 8007ec8:	0a000042 	beq	8007fd8 <__mdiff+0x130>
      c = Balloc (ptr, 0);
      c->_wds = 1;
      c->_x[0] = 0;
      return c;
    }
  if (i < 0)
 8007ecc:	b1a03006 	movlt	r3, r6
    {
      c = a;
      a = b;
 8007ed0:	b1a06004 	movlt	r6, r4
      b = c;
      i = 1;
    }
  else
    i = 0;
  c = Balloc (ptr, a->_k);
 8007ed4:	e5961004 	ldr	r1, [r6, #4]
 8007ed8:	e1a00005 	mov	r0, r5
    }
  if (i < 0)
    {
      c = a;
      a = b;
      b = c;
 8007edc:	b1a04003 	movlt	r4, r3
      i = 1;
    }
  else
    i = 0;
 8007ee0:	a3a08000 	movge	r8, #0
  if (i < 0)
    {
      c = a;
      a = b;
      b = c;
      i = 1;
 8007ee4:	b3a08001 	movlt	r8, #1
    }
  else
    i = 0;
  c = Balloc (ptr, a->_k);
 8007ee8:	ebfffe01 	bl	80076f4 <_Balloc>
  c->_sign = i;
  wa = a->_wds;
 8007eec:	e5967010 	ldr	r7, [r6, #16]
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
 8007ef0:	e594a010 	ldr	sl, [r4, #16]
      i = 1;
    }
  else
    i = 0;
  c = Balloc (ptr, a->_k);
  c->_sign = i;
 8007ef4:	e580800c 	str	r8, [r0, #12]
  wa = a->_wds;
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
 8007ef8:	e084a10a 	add	sl, r4, sl, lsl #2
    i = 0;
  c = Balloc (ptr, a->_k);
  c->_sign = i;
  wa = a->_wds;
  xa = a->_x;
  xae = xa + wa;
 8007efc:	e0868107 	add	r8, r6, r7, lsl #2
 8007f00:	e2888014 	add	r8, r8, #20
  else
    i = 0;
  c = Balloc (ptr, a->_k);
  c->_sign = i;
  wa = a->_wds;
  xa = a->_x;
 8007f04:	e2866014 	add	r6, r6, #20
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
  xbe = xb + wb;
 8007f08:	e28aa014 	add	sl, sl, #20
  c->_sign = i;
  wa = a->_wds;
  xa = a->_x;
  xae = xa + wa;
  wb = b->_wds;
  xb = b->_x;
 8007f0c:	e2842014 	add	r2, r4, #20
  xbe = xb + wb;
  xc = c->_x;
 8007f10:	e2801014 	add	r1, r0, #20
  borrow = 0;
 8007f14:	e3a05000 	mov	r5, #0
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 8007f18:	e496c004 	ldr	ip, [r6], #4
 8007f1c:	e4924004 	ldr	r4, [r2], #4
 8007f20:	e1a0380c 	lsl	r3, ip, #16
 8007f24:	e0855823 	add	r5, r5, r3, lsr #16
 8007f28:	e1a09804 	lsl	r9, r4, #16
 8007f2c:	e0453829 	sub	r3, r5, r9, lsr #16
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 8007f30:	e1a05824 	lsr	r5, r4, #16
 8007f34:	e065582c 	rsb	r5, r5, ip, lsr #16
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f38:	e1a04803 	lsl	r4, r3, #16
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 8007f3c:	e0855843 	add	r5, r5, r3, asr #16
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f40:	e1a04824 	lsr	r4, r4, #16
 8007f44:	e1a03001 	mov	r3, r1
 8007f48:	e1844805 	orr	r4, r4, r5, lsl #16
 8007f4c:	e4834004 	str	r4, [r3], #4
    }
  while (xb < xbe);
 8007f50:	e15a0002 	cmp	sl, r2
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
      borrow = z >> 16;
 8007f54:	e1a05845 	asr	r5, r5, #16
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f58:	e1a01003 	mov	r1, r3
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 8007f5c:	e1a0c006 	mov	ip, r6
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
 8007f60:	8affffec 	bhi	8007f18 <__mdiff+0x70>
  while (xa < xae)
 8007f64:	e1580006 	cmp	r8, r6
 8007f68:	9a000010 	bls	8007fb0 <__mdiff+0x108>
    {
      y = (*xa & 0xffff) + borrow;
 8007f6c:	e49c2004 	ldr	r2, [ip], #4
 8007f70:	e1a04802 	lsl	r4, r2, #16
 8007f74:	e0855824 	add	r5, r5, r4, lsr #16
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f78:	e1a04805 	lsl	r4, r5, #16
  while (xa < xae)
    {
      y = (*xa & 0xffff) + borrow;
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 8007f7c:	e1a02822 	lsr	r2, r2, #16
 8007f80:	e0825845 	add	r5, r2, r5, asr #16
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f84:	e1a04824 	lsr	r4, r4, #16
 8007f88:	e1844805 	orr	r4, r4, r5, lsl #16
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 8007f8c:	e158000c 	cmp	r8, ip
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 8007f90:	e4834004 	str	r4, [r3], #4
    {
      y = (*xa & 0xffff) + borrow;
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
      borrow = z >> 16;
 8007f94:	e1a05845 	asr	r5, r5, #16
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 8007f98:	8afffff3 	bhi	8007f6c <__mdiff+0xc4>
    }
  return 0;
}

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
 8007f9c:	e1e03006 	mvn	r3, r6
 8007fa0:	e0833008 	add	r3, r3, r8
 8007fa4:	e3c33003 	bic	r3, r3, #3
 8007fa8:	e2833004 	add	r3, r3, #4
 8007fac:	e0813003 	add	r3, r1, r3
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 8007fb0:	e3540000 	cmp	r4, #0
 8007fb4:	e2433004 	sub	r3, r3, #4
 8007fb8:	1a000003 	bne	8007fcc <__mdiff+0x124>
 8007fbc:	e5332004 	ldr	r2, [r3, #-4]!
 8007fc0:	e3520000 	cmp	r2, #0
    wa--;
 8007fc4:	e2477001 	sub	r7, r7, #1
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 8007fc8:	0afffffb 	beq	8007fbc <__mdiff+0x114>
    wa--;
  c->_wds = wa;
 8007fcc:	e5807010 	str	r7, [r0, #16]
  return c;
}
 8007fd0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	e12fff1e 	bx	lr
#endif

  i = cmp (a, b);
  if (!i)
    {
      c = Balloc (ptr, 0);
 8007fd8:	e1a00005 	mov	r0, r5
 8007fdc:	e1a01007 	mov	r1, r7
 8007fe0:	ebfffdc3 	bl	80076f4 <_Balloc>
      c->_wds = 1;
 8007fe4:	e3a03001 	mov	r3, #1
      c->_x[0] = 0;
 8007fe8:	e5807014 	str	r7, [r0, #20]

  i = cmp (a, b);
  if (!i)
    {
      c = Balloc (ptr, 0);
      c->_wds = 1;
 8007fec:	e5803010 	str	r3, [r0, #16]
      c->_x[0] = 0;
      return c;
 8007ff0:	eafffff6 	b	8007fd0 <__mdiff+0x128>

08007ff4 <__ulp>:
  union double_union x, a;
  register __Long L;

  x.d = _x;

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 8007ff4:	e59f3058 	ldr	r3, [pc, #88]	; 8008054 <__ulp+0x60>
 8007ff8:	e0013003 	and	r3, r1, r3
 8007ffc:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
#ifndef Sudden_Underflow
  if (L > 0)
 8008000:	e3530000 	cmp	r3, #0
 8008004:	da000002 	ble	8008014 <__ulp+0x20>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 8008008:	e1a01003 	mov	r1, r3
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 800800c:	e3a00000 	mov	r0, #0
 8008010:	e12fff1e 	bx	lr

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 8008014:	e2633000 	rsb	r3, r3, #0
 8008018:	e1a03a43 	asr	r3, r3, #20
      if (L < Exp_shift)
 800801c:	e3530013 	cmp	r3, #19
 8008020:	da000007 	ble	8008044 <__ulp+0x50>
      else
	{
	  word0 (a) = 0;
	  L -= Exp_shift;
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 8008024:	e3530032 	cmp	r3, #50	; 0x32
 8008028:	d2633033 	rsble	r3, r3, #51	; 0x33
 800802c:	d3a02001 	movle	r2, #1
 8008030:	d1a03312 	lslle	r3, r2, r3
 8008034:	c3a03001 	movgt	r3, #1
	  word1 (a) = 0;
#endif
	}
      else
	{
	  word0 (a) = 0;
 8008038:	e3a01000 	mov	r1, #0
	  L -= Exp_shift;
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 800803c:	e1a00003 	mov	r0, r3
#endif
	}
    }
#endif
  return a.d;
}
 8008040:	e12fff1e 	bx	lr
  else
    {
      L = -L >> Exp_shift;
      if (L < Exp_shift)
	{
	  word0 (a) = 0x80000 >> L;
 8008044:	e3a02702 	mov	r2, #524288	; 0x80000
 8008048:	e1a01352 	asr	r1, r2, r3
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 800804c:	e3a00000 	mov	r0, #0
 8008050:	e12fff1e 	bx	lr
 8008054:	7ff00000 	.word	0x7ff00000

08008058 <__b2d>:
}

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 8008058:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
 800805c:	e5906010 	ldr	r6, [r0, #16]
 8008060:	e2866004 	add	r6, r6, #4
 8008064:	e0806106 	add	r6, r0, r6, lsl #2
 8008068:	e1a04006 	mov	r4, r6
  y = *--xa;
 800806c:	e4945004 	ldr	r5, [r4], #4
}

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 8008070:	e1a03000 	mov	r3, r0
  y = *--xa;
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 8008074:	e1a00005 	mov	r0, r5
}

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 8008078:	e1a08001 	mov	r8, r1
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 800807c:	e2837014 	add	r7, r3, #20
  y = *--xa;
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 8008080:	ebfffe36 	bl	8007960 <__hi0bits>
  *e = 32 - k;
 8008084:	e2603020 	rsb	r3, r0, #32
#ifdef Pack_32
  if (k < Ebits)
 8008088:	e350000a 	cmp	r0, #10
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  *e = 32 - k;
 800808c:	e5883000 	str	r3, [r8]
#define d1 word1(d)
#endif

  xa0 = a->_x;
  xa = xa0 + a->_wds;
  y = *--xa;
 8008090:	e1a01006 	mov	r1, r6
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
  *e = 32 - k;
#ifdef Pack_32
  if (k < Ebits)
 8008094:	ca00000d 	bgt	80080d0 <__b2d+0x78>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 8008098:	e260100b 	rsb	r1, r0, #11
 800809c:	e1a0c135 	lsr	ip, r5, r1
      w = xa > xa0 ? *--xa : 0;
 80080a0:	e1570006 	cmp	r7, r6
  k = hi0bits (y);
  *e = 32 - k;
#ifdef Pack_32
  if (k < Ebits)
    {
      d0 = Exp_1 | y >> (Ebits - k);
 80080a4:	e38cc5ff 	orr	ip, ip, #1069547520	; 0x3fc00000
 80080a8:	e38c3603 	orr	r3, ip, #3145728	; 0x300000
 80080ac:	3514c008 	ldrcc	ip, [r4, #-8]
 80080b0:	31a0113c 	lsrcc	r1, ip, r1
      w = xa > xa0 ? *--xa : 0;
 80080b4:	23a01000 	movcs	r1, #0
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 80080b8:	e2800015 	add	r0, r0, #21
 80080bc:	e1812015 	orr	r2, r1, r5, lsl r0
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 80080c0:	e1a00002 	mov	r0, r2
 80080c4:	e1a01003 	mov	r1, r3
}
 80080c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 80080cc:	e12fff1e 	bx	lr
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
#endif
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
 80080d0:	e1570006 	cmp	r7, r6
 80080d4:	32461004 	subcc	r1, r6, #4
 80080d8:	3514c008 	ldrcc	ip, [r4, #-8]
 80080dc:	23a0c000 	movcs	ip, #0
  if (k -= Ebits)
 80080e0:	e250400b 	subs	r4, r0, #11
 80080e4:	0a00000a 	beq	8008114 <__b2d+0xbc>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 80080e8:	e1a05415 	lsl	r5, r5, r4
      y = xa > xa0 ? *--xa : 0;
 80080ec:	e1510007 	cmp	r1, r7
      goto ret_d;
    }
  z = xa > xa0 ? *--xa : 0;
  if (k -= Ebits)
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 80080f0:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
 80080f4:	85111004 	ldrhi	r1, [r1, #-4]
 80080f8:	e260002b 	rsb	r0, r0, #43	; 0x2b
 80080fc:	e3855603 	orr	r5, r5, #3145728	; 0x300000
 8008100:	e185303c 	orr	r3, r5, ip, lsr r0
 8008104:	81a00031 	lsrhi	r0, r1, r0
      y = xa > xa0 ? *--xa : 0;
 8008108:	93a00000 	movls	r0, #0
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 800810c:	e180241c 	orr	r2, r0, ip, lsl r4
 8008110:	eaffffea 	b	80080c0 <__b2d+0x68>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 8008114:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
 8008118:	e3853603 	orr	r3, r5, #3145728	; 0x300000
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 800811c:	e1a0200c 	mov	r2, ip
 8008120:	eaffffe6 	b	80080c0 <__b2d+0x68>

08008124 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 8008124:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 8008128:	e3a01001 	mov	r1, #1
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 800812c:	e24dd00c 	sub	sp, sp, #12
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 8008130:	e1a05003 	mov	r5, r3
 8008134:	e1a04002 	mov	r4, r2
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 8008138:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
 800813c:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 8008140:	ebfffd6b 	bl	80076f4 <_Balloc>
  b = Balloc (ptr, 2);
#endif
  x = b->_x;

  z = d0 & Frac_mask;
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 8008144:	e3c53102 	bic	r3, r5, #-2147483648	; 0x80000000
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 8008148:	e1b0aa23 	lsrs	sl, r3, #20
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;

  z = d0 & Frac_mask;
 800814c:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
 8008150:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
    z |= Exp_msk1;
 8008154:	13833601 	orrne	r3, r3, #1048576	; 0x100000
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 8008158:	e3540000 	cmp	r4, #0
#define d1 word1(d)
  d.d = _d;
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 800815c:	e1a06000 	mov	r6, r0
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
    z |= Exp_msk1;
 8008160:	e58d3004 	str	r3, [sp, #4]
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 8008164:	0a00001e 	beq	80081e4 <__d2b+0xc0>
    {
      y = d1;
 8008168:	e28d0008 	add	r0, sp, #8
 800816c:	e5204008 	str	r4, [r0, #-8]!
      k = lo0bits (&y);
 8008170:	e1a0000d 	mov	r0, sp
 8008174:	ebfffe0d 	bl	80079b0 <__lo0bits>
      if (k)
	{
         x[0] = y | z << (32 - k);
 8008178:	e89d000c 	ldm	sp, {r2, r3}
#ifndef _DOUBLE_IS_32BITS
  if (d1)
    {
      y = d1;
      k = lo0bits (&y);
      if (k)
 800817c:	e3500000 	cmp	r0, #0
	{
         x[0] = y | z << (32 - k);
 8008180:	12601020 	rsbne	r1, r0, #32
 8008184:	11822113 	orrne	r2, r2, r3, lsl r1
	  z >>= k;
 8008188:	11a03033 	lsrne	r3, r3, r0
    {
      y = d1;
      k = lo0bits (&y);
      if (k)
	{
         x[0] = y | z << (32 - k);
 800818c:	15862014 	strne	r2, [r6, #20]
	  z >>= k;
 8008190:	158d3004 	strne	r3, [sp, #4]
	}
      else
	x[0] = y;
 8008194:	05862014 	streq	r2, [r6, #20]
      i = b->_wds = (x[1] = z) ? 2 : 1;
 8008198:	e3530000 	cmp	r3, #0
 800819c:	03a04001 	moveq	r4, #1
 80081a0:	13a04002 	movne	r4, #2
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 80081a4:	e35a0000 	cmp	sl, #0
         x[0] = y | z << (32 - k);
	  z >>= k;
	}
      else
	x[0] = y;
      i = b->_wds = (x[1] = z) ? 2 : 1;
 80081a8:	e5863018 	str	r3, [r6, #24]
 80081ac:	e5864010 	str	r4, [r6, #16]
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 80081b0:	1a000014 	bne	8008208 <__d2b+0xe4>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 80081b4:	e2400e43 	sub	r0, r0, #1072	; 0x430
 80081b8:	e2400002 	sub	r0, r0, #2
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 80081bc:	e0863104 	add	r3, r6, r4, lsl #2
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 80081c0:	e5880000 	str	r0, [r8]
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 80081c4:	e5930010 	ldr	r0, [r3, #16]
 80081c8:	ebfffde4 	bl	8007960 <__hi0bits>
 80081cc:	e0600284 	rsb	r0, r0, r4, lsl #5
 80081d0:	e5870000 	str	r0, [r7]
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
}
 80081d4:	e1a00006 	mov	r0, r6
 80081d8:	e28dd00c 	add	sp, sp, #12
 80081dc:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
 80081e0:	e12fff1e 	bx	lr
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 80081e4:	e28d0004 	add	r0, sp, #4
 80081e8:	ebfffdf0 	bl	80079b0 <__lo0bits>
      x[0] = z;
 80081ec:	e59d3004 	ldr	r3, [sp, #4]
      i = b->_wds = 1;
 80081f0:	e3a04001 	mov	r4, #1
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 80081f4:	e35a0000 	cmp	sl, #0
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
      x[0] = z;
 80081f8:	e5863014 	str	r3, [r6, #20]
      i = b->_wds = 1;
 80081fc:	e5864010 	str	r4, [r6, #16]
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 8008200:	e2800020 	add	r0, r0, #32
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 8008204:	0affffea 	beq	80081b4 <__d2b+0x90>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 8008208:	e24aae43 	sub	sl, sl, #1072	; 0x430
 800820c:	e24aa003 	sub	sl, sl, #3
 8008210:	e08aa000 	add	sl, sl, r0
      *bits = P - k;
 8008214:	e2600035 	rsb	r0, r0, #53	; 0x35
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 8008218:	e588a000 	str	sl, [r8]
      *bits = P - k;
 800821c:	e5870000 	str	r0, [r7]
 8008220:	eaffffeb 	b	80081d4 <__d2b+0xb0>

08008224 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 8008224:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 8008228:	e24dd00c 	sub	sp, sp, #12
 800822c:	e1a06001 	mov	r6, r1
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 8008230:	e1a0100d 	mov	r1, sp
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 8008234:	e1a07000 	mov	r7, r0
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 8008238:	ebffff86 	bl	8008058 <__b2d>
 800823c:	e1a05001 	mov	r5, r1
 8008240:	e1a04000 	mov	r4, r0
  db.d = b2d (b, &kb);
 8008244:	e28d1004 	add	r1, sp, #4
 8008248:	e1a00006 	mov	r0, r6
 800824c:	ebffff81 	bl	8008058 <__b2d>
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 8008250:	e597e010 	ldr	lr, [r7, #16]
{
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  db.d = b2d (b, &kb);
 8008254:	e1a03001 	mov	r3, r1
 8008258:	e1a02000 	mov	r2, r0
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 800825c:	e596c010 	ldr	ip, [r6, #16]
 8008260:	e89d0003 	ldm	sp, {r0, r1}
 8008264:	e06cc00e 	rsb	ip, ip, lr
 8008268:	e0611000 	rsb	r1, r1, r0
 800826c:	e081c28c 	add	ip, r1, ip, lsl #5
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 8008270:	e35c0000 	cmp	ip, #0

{
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 8008274:	e1a01005 	mov	r1, r5
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
    word0 (da) += k * Exp_msk1;
 8008278:	c0851a0c 	addgt	r1, r5, ip, lsl #20
{
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  db.d = b2d (b, &kb);
 800827c:	e1a07003 	mov	r7, r3
 8008280:	c1a04004 	movgt	r4, r4
 8008284:	c1a05001 	movgt	r5, r1
  if (k > 0)
    word0 (da) += k * Exp_msk1;
  else
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
 8008288:	d0437a0c 	suble	r7, r3, ip, lsl #20
{
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
  db.d = b2d (b, &kb);
 800828c:	e1a06002 	mov	r6, r2
 8008290:	d1a03007 	movle	r3, r7
 8008294:	d1a02002 	movle	r2, r2
    {
      k = -k;
      word0 (db) += k * Exp_msk1;
    }
#endif
  return da.d / db.d;
 8008298:	e1a00004 	mov	r0, r4
 800829c:	e1a01005 	mov	r1, r5
 80082a0:	eb00092d 	bl	800a75c <__aeabi_ddiv>
}
 80082a4:	e28dd00c 	add	sp, sp, #12
 80082a8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 80082ac:	e12fff1e 	bx	lr

080082b0 <_mprec_log10>:
double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
  double v = 1.0;
  if (dig < 24)
 80082b0:	e3500017 	cmp	r0, #23


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 80082b4:	e92d4010 	push	{r4, lr}
 80082b8:	e1a04000 	mov	r4, r0
  double v = 1.0;
  if (dig < 24)
 80082bc:	da000008 	ble	80082e4 <_mprec_log10+0x34>
 80082c0:	e59f1030 	ldr	r1, [pc, #48]	; 80082f8 <_mprec_log10+0x48>
 80082c4:	e3a00000 	mov	r0, #0
    return tens[dig];
  while (dig > 0)
    {
      v *= 10;
 80082c8:	e3a02000 	mov	r2, #0
 80082cc:	e59f3028 	ldr	r3, [pc, #40]	; 80082fc <_mprec_log10+0x4c>
 80082d0:	eb00087d 	bl	800a4cc <__aeabi_dmul>
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 80082d4:	e2544001 	subs	r4, r4, #1
 80082d8:	1afffffa 	bne	80082c8 <_mprec_log10+0x18>
    {
      v *= 10;
      dig--;
    }
  return v;
}
 80082dc:	e8bd4010 	pop	{r4, lr}
 80082e0:	e12fff1e 	bx	lr
_DEFUN (_mprec_log10, (dig),
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
 80082e4:	e59f3014 	ldr	r3, [pc, #20]	; 8008300 <_mprec_log10+0x50>
 80082e8:	e0834180 	add	r4, r3, r0, lsl #3
 80082ec:	e2841010 	add	r1, r4, #16
 80082f0:	e8910003 	ldm	r1, {r0, r1}
 80082f4:	eafffff8 	b	80082dc <_mprec_log10+0x2c>
 80082f8:	3ff00000 	.word	0x3ff00000
 80082fc:	40240000 	.word	0x40240000
 8008300:	0800ae18 	.word	0x0800ae18

08008304 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 8008304:	e92d0030 	push	{r4, r5}
#endif

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
 8008308:	e5924010 	ldr	r4, [r2, #16]
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 800830c:	e2411001 	sub	r1, r1, #1
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
 8008310:	e0824104 	add	r4, r2, r4, lsl #2
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 8008314:	e1a052c1 	asr	r5, r1, #5
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
 8008318:	e2844014 	add	r4, r4, #20
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
 800831c:	e2823014 	add	r3, r2, #20
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 8008320:	e2855001 	add	r5, r5, #1
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 8008324:	e1530004 	cmp	r3, r4
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 8008328:	e0805105 	add	r5, r0, r5, lsl #2
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 800832c:	2a000009 	bcs	8008358 <__copybits+0x54>
 8008330:	e1a01000 	mov	r1, r0
		*c++ = *x++;
 8008334:	e493c004 	ldr	ip, [r3], #4

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 8008338:	e1540003 	cmp	r4, r3
		*c++ = *x++;
 800833c:	e481c004 	str	ip, [r1], #4

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 8008340:	8afffffb 	bhi	8008334 <__copybits+0x30>
    }
  return v;
}

void
_DEFUN (copybits, (c, n, b),
 8008344:	e0623004 	rsb	r3, r2, r4
 8008348:	e2433015 	sub	r3, r3, #21
 800834c:	e3c33003 	bic	r3, r3, #3
 8008350:	e2833004 	add	r3, r3, #4
 8008354:	e0800003 	add	r0, r0, r3
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 8008358:	e1550000 	cmp	r5, r0
 800835c:	9a000003 	bls	8008370 <__copybits+0x6c>
		*c++ = 0;
 8008360:	e3a03000 	mov	r3, #0
 8008364:	e4803004 	str	r3, [r0], #4
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 8008368:	e1550000 	cmp	r5, r0
 800836c:	8afffffc 	bhi	8008364 <__copybits+0x60>
		*c++ = 0;
}
 8008370:	e8bd0030 	pop	{r4, r5}
 8008374:	e12fff1e 	bx	lr

08008378 <__any_on>:
{
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
	nwds = b->_wds;
 8008378:	e590c010 	ldr	ip, [r0, #16]
	n = k >> kshift;
 800837c:	e1a032c1 	asr	r3, r1, #5
	if (n > nwds)
 8008380:	e15c0003 	cmp	ip, r3

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 8008384:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 8008388:	e2802014 	add	r2, r0, #20
 800838c:	b1a0300c 	movlt	r3, ip
	nwds = b->_wds;
	n = k >> kshift;
	if (n > nwds)
 8008390:	ba000000 	blt	8008398 <__any_on+0x20>
		n = nwds;
	else if (n < nwds && (k &= kmask)) {
 8008394:	ca00000f 	bgt	80083d8 <__any_on+0x60>
		x1 <<= k;
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
 8008398:	e2833004 	add	r3, r3, #4
 800839c:	e0800103 	add	r0, r0, r3, lsl #2
 80083a0:	e2803004 	add	r3, r0, #4
	while(x > x0)
 80083a4:	e1520003 	cmp	r2, r3
 80083a8:	2a000012 	bcs	80083f8 <__any_on+0x80>
		if (*--x)
 80083ac:	e5133004 	ldr	r3, [r3, #-4]
 80083b0:	e3530000 	cmp	r3, #0
 80083b4:	1a000004 	bne	80083cc <__any_on+0x54>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 80083b8:	e1520000 	cmp	r2, r0
 80083bc:	2a00000d 	bcs	80083f8 <__any_on+0x80>
		if (*--x)
 80083c0:	e5303004 	ldr	r3, [r0, #-4]!
 80083c4:	e3530000 	cmp	r3, #0
 80083c8:	0afffffa 	beq	80083b8 <__any_on+0x40>
	else if (n < nwds && (k &= kmask)) {
		x1 = x2 = x[n];
		x1 >>= k;
		x1 <<= k;
		if (x1 != x2)
			return 1;
 80083cc:	e3a00001 	mov	r0, #1
	x += n;
	while(x > x0)
		if (*--x)
			return 1;
	return 0;
}
 80083d0:	e8bd0010 	pop	{r4}
 80083d4:	e12fff1e 	bx	lr
	x = b->_x;
	nwds = b->_wds;
	n = k >> kshift;
	if (n > nwds)
		n = nwds;
	else if (n < nwds && (k &= kmask)) {
 80083d8:	e211101f 	ands	r1, r1, #31
 80083dc:	0affffed 	beq	8008398 <__any_on+0x20>
		x1 = x2 = x[n];
 80083e0:	e080c103 	add	ip, r0, r3, lsl #2
 80083e4:	e59cc014 	ldr	ip, [ip, #20]
		x1 >>= k;
 80083e8:	e1a0413c 	lsr	r4, ip, r1
		x1 <<= k;
		if (x1 != x2)
 80083ec:	e15c0114 	cmp	ip, r4, lsl r1
 80083f0:	1afffff5 	bne	80083cc <__any_on+0x54>
 80083f4:	eaffffe7 	b	8008398 <__any_on+0x20>
	x0 = x;
	x += n;
	while(x > x0)
		if (*--x)
			return 1;
	return 0;
 80083f8:	e3a00000 	mov	r0, #0
 80083fc:	eafffff3 	b	80083d0 <__any_on+0x58>

08008400 <__fpclassifyd>:
{
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 8008400:	e1903001 	orrs	r3, r0, r1
 8008404:	1a000001 	bne	8008410 <__fpclassifyd+0x10>
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
 8008408:	e3a00002 	mov	r0, #2
 800840c:	e12fff1e 	bx	lr
{
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 8008410:	e2703001 	rsbs	r3, r0, #1
 8008414:	33a03000 	movcc	r3, #0
 8008418:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 800841c:	03500000 	cmpeq	r0, #0
 8008420:	0afffff8 	beq	8008408 <__fpclassifyd+0x8>
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 8008424:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
 8008428:	e59f1034 	ldr	r1, [pc, #52]	; 8008464 <__fpclassifyd+0x64>
 800842c:	e2420601 	sub	r0, r2, #1048576	; 0x100000
 8008430:	e1500001 	cmp	r0, r1
 8008434:	8a000001 	bhi	8008440 <__fpclassifyd+0x40>
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
 8008438:	e3a00004 	mov	r0, #4
 800843c:	e12fff1e 	bx	lr
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 8008440:	e3520601 	cmp	r2, #1048576	; 0x100000
 8008444:	2a000001 	bcs	8008450 <__fpclassifyd+0x50>
           (msw >= 0x80000000 && msw <= 0x800fffff))
    /* zero is already handled above */
    return FP_SUBNORMAL;
 8008448:	e3a00003 	mov	r0, #3
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
           (msw == 0xfff00000 && lsw == 0x00000000))
    return FP_INFINITE;
  else
    return FP_NAN;
}
 800844c:	e12fff1e 	bx	lr
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
           (msw >= 0x80000000 && msw <= 0x800fffff))
    /* zero is already handled above */
    return FP_SUBNORMAL;
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 8008450:	e59f0010 	ldr	r0, [pc, #16]	; 8008468 <__fpclassifyd+0x68>

  EXTRACT_WORDS(msw,lsw,x);

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
 8008454:	e1520000 	cmp	r2, r0
 8008458:	13a00000 	movne	r0, #0
 800845c:	02030001 	andeq	r0, r3, #1
 8008460:	e12fff1e 	bx	lr
 8008464:	7fdfffff 	.word	0x7fdfffff
 8008468:	7ff00000 	.word	0x7ff00000

0800846c <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 800846c:	e92d4038 	push	{r3, r4, r5, lr}
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 8008470:	e59f4030 	ldr	r4, [pc, #48]	; 80084a8 <_sbrk_r+0x3c>
 8008474:	e3a03000 	mov	r3, #0

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 8008478:	e1a05000 	mov	r5, r0
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 800847c:	e1a00001 	mov	r0, r1
     ptrdiff_t incr)
{
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 8008480:	e5843000 	str	r3, [r4]
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 8008484:	faffeadf 	blx	8003008 <_sbrk>
 8008488:	e3700001 	cmn	r0, #1
 800848c:	0a000001 	beq	8008498 <_sbrk_r+0x2c>
    ptr->_errno = errno;
  return ret;
}
 8008490:	e8bd4038 	pop	{r3, r4, r5, lr}
 8008494:	e12fff1e 	bx	lr
{
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 8008498:	e5943000 	ldr	r3, [r4]
 800849c:	e3530000 	cmp	r3, #0
    ptr->_errno = errno;
 80084a0:	15853000 	strne	r3, [r5]
 80084a4:	eafffff9 	b	8008490 <_sbrk_r+0x24>
 80084a8:	2000168c 	.word	0x2000168c

080084ac <strcmp>:
#endif

int 
__attribute__((naked)) strcmp (const char* s1, const char* s2)
{
  asm(
 80084ac:	e0202001 	eor	r2, r0, r1
 80084b0:	e3120003 	tst	r2, #3
 80084b4:	1a000021 	bne	8008540 <strcmp_unaligned>
 80084b8:	e2102003 	ands	r2, r0, #3
 80084bc:	e3c00003 	bic	r0, r0, #3
 80084c0:	e3c11003 	bic	r1, r1, #3
 80084c4:	e490c004 	ldr	ip, [r0], #4
 80084c8:	04913004 	ldreq	r3, [r1], #4
 80084cc:	0a000006 	beq	80084ec <strcmp+0x40>
 80084d0:	e2222003 	eor	r2, r2, #3
 80084d4:	e1a02182 	lsl	r2, r2, #3
 80084d8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 80084dc:	e1a02233 	lsr	r2, r3, r2
 80084e0:	e4913004 	ldr	r3, [r1], #4
 80084e4:	e18cc002 	orr	ip, ip, r2
 80084e8:	e1833002 	orr	r3, r3, r2
 80084ec:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 80084f0:	e3a04001 	mov	r4, #1
 80084f4:	e1844404 	orr	r4, r4, r4, lsl #8
 80084f8:	e1844804 	orr	r4, r4, r4, lsl #16
 80084fc:	e04c2004 	sub	r2, ip, r4
 8008500:	e15c0003 	cmp	ip, r3
 8008504:	01c2200c 	biceq	r2, r2, ip
 8008508:	01120384 	tsteq	r2, r4, lsl #7
 800850c:	0490c004 	ldreq	ip, [r0], #4
 8008510:	04913004 	ldreq	r3, [r1], #4
 8008514:	0afffff8 	beq	80084fc <strcmp+0x50>
 8008518:	e1a00c0c 	lsl	r0, ip, #24
 800851c:	e1a0c42c 	lsr	ip, ip, #8
 8008520:	e3500001 	cmp	r0, #1
 8008524:	21500c03 	cmpcs	r0, r3, lsl #24
 8008528:	01a03423 	lsreq	r3, r3, #8
 800852c:	0afffff9 	beq	8008518 <strcmp+0x6c>
 8008530:	e20330ff 	and	r3, r3, #255	; 0xff
 8008534:	e0630c20 	rsb	r0, r3, r0, lsr #24
 8008538:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
 800853c:	e12fff1e 	bx	lr

08008540 <strcmp_unaligned>:
      w2 RSHIFT= 8;
    } while (c1 != 0 && c1 == c2);
  return c1 - c2;
#endif

  asm("wp1 .req r0\n\t"
 8008540:	e3100003 	tst	r0, #3
 8008544:	0a000006 	beq	8008564 <strcmp_unaligned+0x24>
 8008548:	e4d02001 	ldrb	r2, [r0], #1
 800854c:	e4d13001 	ldrb	r3, [r1], #1
 8008550:	e3520001 	cmp	r2, #1
 8008554:	21520003 	cmpcs	r2, r3
 8008558:	0afffff8 	beq	8008540 <strcmp_unaligned>
 800855c:	e0420003 	sub	r0, r2, r3
 8008560:	e12fff1e 	bx	lr
 8008564:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
 8008568:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 800856c:	e3a02001 	mov	r2, #1
 8008570:	e1822402 	orr	r2, r2, r2, lsl #8
 8008574:	e1822802 	orr	r2, r2, r2, lsl #16
 8008578:	e201c003 	and	ip, r1, #3
 800857c:	e3c11003 	bic	r1, r1, #3
 8008580:	e4904004 	ldr	r4, [r0], #4
 8008584:	e4915004 	ldr	r5, [r1], #4
 8008588:	e35c0002 	cmp	ip, #2
 800858c:	0a000017 	beq	80085f0 <strcmp_unaligned+0xb0>
 8008590:	8a00002d 	bhi	800864c <strcmp_unaligned+0x10c>
 8008594:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
 8008598:	e15c0425 	cmp	ip, r5, lsr #8
 800859c:	e0443002 	sub	r3, r4, r2
 80085a0:	e1c33004 	bic	r3, r3, r4
 80085a4:	1a000007 	bne	80085c8 <strcmp_unaligned+0x88>
 80085a8:	e0133382 	ands	r3, r3, r2, lsl #7
 80085ac:	04915004 	ldreq	r5, [r1], #4
 80085b0:	1a000006 	bne	80085d0 <strcmp_unaligned+0x90>
 80085b4:	e02cc004 	eor	ip, ip, r4
 80085b8:	e15c0c05 	cmp	ip, r5, lsl #24
 80085bc:	1a000008 	bne	80085e4 <strcmp_unaligned+0xa4>
 80085c0:	e4904004 	ldr	r4, [r0], #4
 80085c4:	eafffff2 	b	8008594 <strcmp_unaligned+0x54>
 80085c8:	e1a05425 	lsr	r5, r5, #8
 80085cc:	ea000037 	b	80086b0 <strcmp_unaligned+0x170>
 80085d0:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
 80085d4:	1a000031 	bne	80086a0 <strcmp_unaligned+0x160>
 80085d8:	e5d15000 	ldrb	r5, [r1]
 80085dc:	e1a0cc24 	lsr	ip, r4, #24
 80085e0:	ea000032 	b	80086b0 <strcmp_unaligned+0x170>
 80085e4:	e1a0cc24 	lsr	ip, r4, #24
 80085e8:	e20550ff 	and	r5, r5, #255	; 0xff
 80085ec:	ea00002f 	b	80086b0 <strcmp_unaligned+0x170>
 80085f0:	e1a0c804 	lsl	ip, r4, #16
 80085f4:	e0443002 	sub	r3, r4, r2
 80085f8:	e1a0c82c 	lsr	ip, ip, #16
 80085fc:	e1c33004 	bic	r3, r3, r4
 8008600:	e15c0825 	cmp	ip, r5, lsr #16
 8008604:	1a00000e 	bne	8008644 <strcmp_unaligned+0x104>
 8008608:	e0133382 	ands	r3, r3, r2, lsl #7
 800860c:	04915004 	ldreq	r5, [r1], #4
 8008610:	1a000004 	bne	8008628 <strcmp_unaligned+0xe8>
 8008614:	e02cc004 	eor	ip, ip, r4
 8008618:	e15c0805 	cmp	ip, r5, lsl #16
 800861c:	1a000006 	bne	800863c <strcmp_unaligned+0xfc>
 8008620:	e4904004 	ldr	r4, [r0], #4
 8008624:	eafffff1 	b	80085f0 <strcmp_unaligned+0xb0>
 8008628:	e1b03803 	lsls	r3, r3, #16
 800862c:	1a00001b 	bne	80086a0 <strcmp_unaligned+0x160>
 8008630:	e1d150b0 	ldrh	r5, [r1]
 8008634:	e1a0c824 	lsr	ip, r4, #16
 8008638:	ea00001c 	b	80086b0 <strcmp_unaligned+0x170>
 800863c:	e1a05805 	lsl	r5, r5, #16
 8008640:	e1a0c824 	lsr	ip, r4, #16
 8008644:	e1a05825 	lsr	r5, r5, #16
 8008648:	ea000018 	b	80086b0 <strcmp_unaligned+0x170>
 800864c:	e204c0ff 	and	ip, r4, #255	; 0xff
 8008650:	e15c0c25 	cmp	ip, r5, lsr #24
 8008654:	e0443002 	sub	r3, r4, r2
 8008658:	e1c33004 	bic	r3, r3, r4
 800865c:	1a000007 	bne	8008680 <strcmp_unaligned+0x140>
 8008660:	e0133382 	ands	r3, r3, r2, lsl #7
 8008664:	04915004 	ldreq	r5, [r1], #4
 8008668:	1a000006 	bne	8008688 <strcmp_unaligned+0x148>
 800866c:	e02cc004 	eor	ip, ip, r4
 8008670:	e15c0405 	cmp	ip, r5, lsl #8
 8008674:	1a000006 	bne	8008694 <strcmp_unaligned+0x154>
 8008678:	e4904004 	ldr	r4, [r0], #4
 800867c:	eafffff2 	b	800864c <strcmp_unaligned+0x10c>
 8008680:	e1a05c25 	lsr	r5, r5, #24
 8008684:	ea000009 	b	80086b0 <strcmp_unaligned+0x170>
 8008688:	e31400ff 	tst	r4, #255	; 0xff
 800868c:	0a000003 	beq	80086a0 <strcmp_unaligned+0x160>
 8008690:	e4915004 	ldr	r5, [r1], #4
 8008694:	e1a0c424 	lsr	ip, r4, #8
 8008698:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
 800869c:	ea000003 	b	80086b0 <strcmp_unaligned+0x170>
 80086a0:	e3a00000 	mov	r0, #0
 80086a4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
 80086a8:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
 80086ac:	e12fff1e 	bx	lr
 80086b0:	e20c20ff 	and	r2, ip, #255	; 0xff
 80086b4:	e20500ff 	and	r0, r5, #255	; 0xff
 80086b8:	e3500001 	cmp	r0, #1
 80086bc:	21500002 	cmpcs	r0, r2
 80086c0:	01a0c42c 	lsreq	ip, ip, #8
 80086c4:	01a05425 	lsreq	r5, r5, #8
 80086c8:	0afffff8 	beq	80086b0 <strcmp_unaligned+0x170>
 80086cc:	e0420000 	sub	r0, r2, r0
 80086d0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
 80086d4:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
 80086d8:	e12fff1e 	bx	lr

080086dc <strlen>:
#else

size_t __attribute__((naked))
strlen (const char* str)
{
  asm ("len .req r0\n\t"
 80086dc:	e3c01003 	bic	r1, r0, #3
 80086e0:	e2100003 	ands	r0, r0, #3
 80086e4:	e2600000 	rsb	r0, r0, #0
 80086e8:	e4913004 	ldr	r3, [r1], #4
 80086ec:	e280c004 	add	ip, r0, #4
 80086f0:	e1a0c18c 	lsl	ip, ip, #3
 80086f4:	e3e02000 	mvn	r2, #0
 80086f8:	11833c32 	orrne	r3, r3, r2, lsr ip
 80086fc:	e3a0c001 	mov	ip, #1
 8008700:	e18cc40c 	orr	ip, ip, ip, lsl #8
 8008704:	e18cc80c 	orr	ip, ip, ip, lsl #16
 8008708:	e043200c 	sub	r2, r3, ip
 800870c:	e1c22003 	bic	r2, r2, r3
 8008710:	e012238c 	ands	r2, r2, ip, lsl #7
 8008714:	04913004 	ldreq	r3, [r1], #4
 8008718:	02800004 	addeq	r0, r0, #4
 800871c:	0afffff9 	beq	8008708 <strlen+0x2c>
 8008720:	e31300ff 	tst	r3, #255	; 0xff
 8008724:	12800001 	addne	r0, r0, #1
 8008728:	13130cff 	tstne	r3, #65280	; 0xff00
 800872c:	12800001 	addne	r0, r0, #1
 8008730:	131308ff 	tstne	r3, #16711680	; 0xff0000
 8008734:	12800001 	addne	r0, r0, #1
 8008738:	e12fff1e 	bx	lr

0800873c <__ssprint_r>:
int
_DEFUN(__ssprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 800873c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	register _CONST char *p = NULL;

	iov = uio->uio_iov;
	len = 0;

	if (uio->uio_resid == 0) {
 8008740:	e5924008 	ldr	r4, [r2, #8]
 8008744:	e3540000 	cmp	r4, #0
int
_DEFUN(__ssprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 8008748:	e24dd00c 	sub	sp, sp, #12
 800874c:	e1a09002 	mov	r9, r2
 8008750:	e1a0a000 	mov	sl, r0
 8008754:	e1a05001 	mov	r5, r1
	register size_t len;
	register int w;
	register struct __siov *iov;
	register _CONST char *p = NULL;

	iov = uio->uio_iov;
 8008758:	e5927000 	ldr	r7, [r2]
	len = 0;

	if (uio->uio_resid == 0) {
 800875c:	0a00005b 	beq	80088d0 <__ssprint_r+0x194>
 8008760:	e3a0b000 	mov	fp, #0
 8008764:	e1a0400b 	mov	r4, fp
		uio->uio_iovcnt = 0;
		return (0);
	}

        do {
		while (len == 0) {
 8008768:	e3540000 	cmp	r4, #0
 800876c:	e5910000 	ldr	r0, [r1]
 8008770:	e5913008 	ldr	r3, [r1, #8]
 8008774:	0a000038 	beq	800885c <__ssprint_r+0x120>
			p = iov->iov_base;
			len = iov->iov_len;
			iov++;
		}
		w = fp->_w;
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
 8008778:	e1540003 	cmp	r4, r3
		while (len == 0) {
			p = iov->iov_base;
			len = iov->iov_len;
			iov++;
		}
		w = fp->_w;
 800877c:	e1a06003 	mov	r6, r3
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
 8008780:	e1a08003 	mov	r8, r3
 8008784:	3a00003d 	bcc	8008880 <__ssprint_r+0x144>
 8008788:	e1d530bc 	ldrh	r3, [r5, #12]
 800878c:	e3130d12 	tst	r3, #1152	; 0x480
 8008790:	0a000023 	beq	8008824 <__ssprint_r+0xe8>
			/* must be asprintf family */
			unsigned char *str;
			int curpos = (fp->_p - fp->_bf._base);
 8008794:	e2851010 	add	r1, r5, #16
 8008798:	e8910042 	ldm	r1, {r1, r6}
			 * than (1+sqrt(5))/2 to accomodate malloc
		 	 * overhead. asprintf EXPECTS us to overallocate, so
		 	 * that it can add a trailing \0 without
		 	 * reallocating.  The new allocation should thus be
		 	 * max(prev_size*1.5, curpos+len+1). */
			int newsize = fp->_bf._size * 3 / 2;
 800879c:	e0866086 	add	r6, r6, r6, lsl #1
		}
		w = fp->_w;
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
			/* must be asprintf family */
			unsigned char *str;
			int curpos = (fp->_p - fp->_bf._base);
 80087a0:	e0618000 	rsb	r8, r1, r0
			 * than (1+sqrt(5))/2 to accomodate malloc
		 	 * overhead. asprintf EXPECTS us to overallocate, so
		 	 * that it can add a trailing \0 without
		 	 * reallocating.  The new allocation should thus be
		 	 * max(prev_size*1.5, curpos+len+1). */
			int newsize = fp->_bf._size * 3 / 2;
 80087a4:	e0866fa6 	add	r6, r6, r6, lsr #31
			if (newsize < curpos + len + 1)
 80087a8:	e2840001 	add	r0, r4, #1
			 * than (1+sqrt(5))/2 to accomodate malloc
		 	 * overhead. asprintf EXPECTS us to overallocate, so
		 	 * that it can add a trailing \0 without
		 	 * reallocating.  The new allocation should thus be
		 	 * max(prev_size*1.5, curpos+len+1). */
			int newsize = fp->_bf._size * 3 / 2;
 80087ac:	e1a060c6 	asr	r6, r6, #1
			if (newsize < curpos + len + 1)
 80087b0:	e0800008 	add	r0, r0, r8
 80087b4:	e1560000 	cmp	r6, r0
 80087b8:	e1a02006 	mov	r2, r6
				newsize = curpos + len + 1;
 80087bc:	31a06000 	movcc	r6, r0
 80087c0:	31a02006 	movcc	r2, r6
			if (fp->_flags & __SOPT)
 80087c4:	e3130b01 	tst	r3, #1024	; 0x400
 80087c8:	0a00002f 	beq	800888c <__ssprint_r+0x150>
			{
				/* asnprintf leaves original buffer alone.  */
				str = (unsigned char *)_malloc_r (ptr, newsize);
 80087cc:	e1a01002 	mov	r1, r2
 80087d0:	e1a0000a 	mov	r0, sl
 80087d4:	ebfff978 	bl	8006dbc <_malloc_r>
				if (!str)
 80087d8:	e2503000 	subs	r3, r0, #0
 80087dc:	0a000031 	beq	80088a8 <__ssprint_r+0x16c>
				{
					ptr->_errno = ENOMEM;
					goto err;
				}
				memcpy (str, fp->_bf._base, curpos);
 80087e0:	e5951010 	ldr	r1, [r5, #16]
 80087e4:	e1a02008 	mov	r2, r8
 80087e8:	e58d3004 	str	r3, [sp, #4]
 80087ec:	ebfffb81 	bl	80075f8 <memcpy>
				fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 80087f0:	e1d520bc 	ldrh	r2, [r5, #12]
 80087f4:	e3c22d12 	bic	r2, r2, #1152	; 0x480
 80087f8:	e3822080 	orr	r2, r2, #128	; 0x80
 80087fc:	e1c520bc 	strh	r2, [r5, #12]
 8008800:	e59d3004 	ldr	r3, [sp, #4]
					ptr->_errno = ENOMEM;
					goto err;
				}
			}
			fp->_bf._base = str;
			fp->_p = str + curpos;
 8008804:	e0830008 	add	r0, r3, r8
					 * changed it.  */
					ptr->_errno = ENOMEM;
					goto err;
				}
			}
			fp->_bf._base = str;
 8008808:	e5853010 	str	r3, [r5, #16]
			fp->_p = str + curpos;
			fp->_bf._size = newsize;
			w = len;
			fp->_w = newsize - curpos;
 800880c:	e0688006 	rsb	r8, r8, r6
					ptr->_errno = ENOMEM;
					goto err;
				}
			}
			fp->_bf._base = str;
			fp->_p = str + curpos;
 8008810:	e5850000 	str	r0, [r5]
			fp->_bf._size = newsize;
			w = len;
			fp->_w = newsize - curpos;
 8008814:	e5858008 	str	r8, [r5, #8]
					goto err;
				}
			}
			fp->_bf._base = str;
			fp->_p = str + curpos;
			fp->_bf._size = newsize;
 8008818:	e5856014 	str	r6, [r5, #20]
			w = len;
			fp->_w = newsize - curpos;
 800881c:	e1a08004 	mov	r8, r4
				}
			}
			fp->_bf._base = str;
			fp->_p = str + curpos;
			fp->_bf._size = newsize;
			w = len;
 8008820:	e1a06004 	mov	r6, r4
			fp->_w = newsize - curpos;
		}
		if (len < w)
			w = len;
		(void)memmove ((_PTR) fp->_p, (_PTR) p, (size_t) (w));
 8008824:	e1a02008 	mov	r2, r8
 8008828:	e1a0100b 	mov	r1, fp
 800882c:	eb0003f6 	bl	800980c <memmove>
		fp->_w -= w;
		fp->_p += w;
		w = len;          /* pretend we copied all */
		p += w;
		len -= w;
        } while ((uio->uio_resid -= w) != 0);
 8008830:	e5992008 	ldr	r2, [r9, #8]
			fp->_w = newsize - curpos;
		}
		if (len < w)
			w = len;
		(void)memmove ((_PTR) fp->_p, (_PTR) p, (size_t) (w));
		fp->_w -= w;
 8008834:	e5953008 	ldr	r3, [r5, #8]
		fp->_p += w;
 8008838:	e5950000 	ldr	r0, [r5]
		w = len;          /* pretend we copied all */
		p += w;
		len -= w;
        } while ((uio->uio_resid -= w) != 0);
 800883c:	e0644002 	rsb	r4, r4, r2
			fp->_w = newsize - curpos;
		}
		if (len < w)
			w = len;
		(void)memmove ((_PTR) fp->_p, (_PTR) p, (size_t) (w));
		fp->_w -= w;
 8008840:	e0663003 	rsb	r3, r6, r3
		fp->_p += w;
 8008844:	e0800008 	add	r0, r0, r8
		w = len;          /* pretend we copied all */
		p += w;
		len -= w;
        } while ((uio->uio_resid -= w) != 0);
 8008848:	e3540000 	cmp	r4, #0
			fp->_w = newsize - curpos;
		}
		if (len < w)
			w = len;
		(void)memmove ((_PTR) fp->_p, (_PTR) p, (size_t) (w));
		fp->_w -= w;
 800884c:	e5853008 	str	r3, [r5, #8]
		fp->_p += w;
 8008850:	e5850000 	str	r0, [r5]
		w = len;          /* pretend we copied all */
		p += w;
		len -= w;
        } while ((uio->uio_resid -= w) != 0);
 8008854:	e5894008 	str	r4, [r9, #8]
 8008858:	0a00001c 	beq	80088d0 <__ssprint_r+0x194>
	}

        do {
		while (len == 0) {
			p = iov->iov_base;
			len = iov->iov_len;
 800885c:	e5974004 	ldr	r4, [r7, #4]
		uio->uio_iovcnt = 0;
		return (0);
	}

        do {
		while (len == 0) {
 8008860:	e3540000 	cmp	r4, #0
			p = iov->iov_base;
 8008864:	e597b000 	ldr	fp, [r7]
			len = iov->iov_len;
			iov++;
 8008868:	e2877008 	add	r7, r7, #8
		uio->uio_iovcnt = 0;
		return (0);
	}

        do {
		while (len == 0) {
 800886c:	0afffffa 	beq	800885c <__ssprint_r+0x120>
			p = iov->iov_base;
			len = iov->iov_len;
			iov++;
		}
		w = fp->_w;
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
 8008870:	e1540003 	cmp	r4, r3
		while (len == 0) {
			p = iov->iov_base;
			len = iov->iov_len;
			iov++;
		}
		w = fp->_w;
 8008874:	e1a06003 	mov	r6, r3
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
 8008878:	e1a08003 	mov	r8, r3
 800887c:	2affffc1 	bcs	8008788 <__ssprint_r+0x4c>
			fp->_bf._size = newsize;
			w = len;
			fp->_w = newsize - curpos;
		}
		if (len < w)
			w = len;
 8008880:	e1a06004 	mov	r6, r4
 8008884:	e1a08004 	mov	r8, r4
 8008888:	eaffffe5 	b	8008824 <__ssprint_r+0xe8>
				memcpy (str, fp->_bf._base, curpos);
				fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
			}
			else
			{
				str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 800888c:	e1a0000a 	mov	r0, sl
 8008890:	eb000468 	bl	8009a38 <_realloc_r>
						newsize);
				if (!str) {
 8008894:	e2503000 	subs	r3, r0, #0
 8008898:	1affffd9 	bne	8008804 <__ssprint_r+0xc8>
					/* Free unneeded buffer.  */
					_free_r (ptr, fp->_bf._base);
 800889c:	e1a0000a 	mov	r0, sl
 80088a0:	e5951010 	ldr	r1, [r5, #16]
 80088a4:	ebfff876 	bl	8006a84 <_free_r>
	uio->uio_resid = 0;
	uio->uio_iovcnt = 0;
	return 0;

err:
  fp->_flags |= __SERR;
 80088a8:	e1d520bc 	ldrh	r2, [r5, #12]
				if (!str) {
					/* Free unneeded buffer.  */
					_free_r (ptr, fp->_bf._base);
					/* Ensure correct errno, even if free
					 * changed it.  */
					ptr->_errno = ENOMEM;
 80088ac:	e3a0300c 	mov	r3, #12
 80088b0:	e58a3000 	str	r3, [sl]
	uio->uio_resid = 0;
	uio->uio_iovcnt = 0;
	return 0;

err:
  fp->_flags |= __SERR;
 80088b4:	e3822040 	orr	r2, r2, #64	; 0x40
  uio->uio_resid = 0;
 80088b8:	e3a03000 	mov	r3, #0
	uio->uio_resid = 0;
	uio->uio_iovcnt = 0;
	return 0;

err:
  fp->_flags |= __SERR;
 80088bc:	e1c520bc 	strh	r2, [r5, #12]
  uio->uio_resid = 0;
  uio->uio_iovcnt = 0;
  return EOF;
 80088c0:	e3e00000 	mvn	r0, #0
	uio->uio_iovcnt = 0;
	return 0;

err:
  fp->_flags |= __SERR;
  uio->uio_resid = 0;
 80088c4:	e5893008 	str	r3, [r9, #8]
  uio->uio_iovcnt = 0;
 80088c8:	e5893004 	str	r3, [r9, #4]
  return EOF;
 80088cc:	ea000001 	b	80088d8 <__ssprint_r+0x19c>
		p += w;
		len -= w;
        } while ((uio->uio_resid -= w) != 0);

	uio->uio_resid = 0;
	uio->uio_iovcnt = 0;
 80088d0:	e5894004 	str	r4, [r9, #4]
	return 0;
 80088d4:	e1a00004 	mov	r0, r4
err:
  fp->_flags |= __SERR;
  uio->uio_resid = 0;
  uio->uio_iovcnt = 0;
  return EOF;
}
 80088d8:	e28dd00c 	add	sp, sp, #12
 80088dc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	e12fff1e 	bx	lr

080088e4 <_svfiprintf_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 80088e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	e1a08001 	mov	r8, r1
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 80088ec:	e1d110bc 	ldrh	r1, [r1, #12]
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 80088f0:	e24dd0bc 	sub	sp, sp, #188	; 0xbc
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 80088f4:	e3110080 	tst	r1, #128	; 0x80
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 80088f8:	e58d301c 	str	r3, [sp, #28]
 80088fc:	e1a07000 	mov	r7, r0
		_funlockfile (fp);
		return (__sbprintf (data, fp, fmt0, ap));
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
 8008900:	0a000002 	beq	8008910 <_svfiprintf_r+0x2c>
 8008904:	e5983010 	ldr	r3, [r8, #16]
 8008908:	e3530000 	cmp	r3, #0
 800890c:	0a00036f 	beq	80096d0 <_svfiprintf_r+0xdec>
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
 8008910:	e28da078 	add	sl, sp, #120	; 0x78
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';
 8008914:	e28d5077 	add	r5, sp, #119	; 0x77
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
	uio.uio_resid = 0;
 8008918:	e3a03000 	mov	r3, #0
 800891c:	e065900a 	rsb	r9, r5, sl
 8008920:	e58d304c 	str	r3, [sp, #76]	; 0x4c
	uio.uio_iovcnt = 0;
 8008924:	e58d3048 	str	r3, [sp, #72]	; 0x48
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 8008928:	e58d3030 	str	r3, [sp, #48]	; 0x30
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
 800892c:	e58da044 	str	sl, [sp, #68]	; 0x44
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';
 8008930:	e58d5008 	str	r5, [sp, #8]

	fmt = (char *)fmt0;
	uio.uio_iov = iovp = iov;
	uio.uio_resid = 0;
	uio.uio_iovcnt = 0;
	ret = 0;
 8008934:	e58d3014 	str	r3, [sp, #20]
 8008938:	e58d9034 	str	r9, [sp, #52]	; 0x34
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 800893c:	e1a06002 	mov	r6, r2
	uio.uio_iov = iovp = iov;
 8008940:	e1a0c00a 	mov	ip, sl
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 8008944:	e5d63000 	ldrb	r3, [r6]
 8008948:	e3530000 	cmp	r3, #0
 800894c:	13530025 	cmpne	r3, #37	; 0x25
 8008950:	0a000285 	beq	800936c <_svfiprintf_r+0xa88>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8008954:	e2863001 	add	r3, r6, #1
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
 8008958:	e1a04003 	mov	r4, r3
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 800895c:	e5d33000 	ldrb	r3, [r3]
 8008960:	e3530025 	cmp	r3, #37	; 0x25
 8008964:	13530000 	cmpne	r3, #0
 8008968:	e2843001 	add	r3, r4, #1
 800896c:	1afffff9 	bne	8008958 <_svfiprintf_r+0x74>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 8008970:	e0545006 	subs	r5, r4, r6
 8008974:	0a00000d 	beq	80089b0 <_svfiprintf_r+0xcc>
			PRINT (cp, m);
 8008978:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 800897c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8008980:	e2822001 	add	r2, r2, #1
 8008984:	e3520007 	cmp	r2, #7
 8008988:	e0811005 	add	r1, r1, r5
 800898c:	e58c6000 	str	r6, [ip]
 8008990:	e58c5004 	str	r5, [ip, #4]
 8008994:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8008998:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 800899c:	d28cc008 	addle	ip, ip, #8
 80089a0:	ca0002d4 	bgt	80094f8 <_svfiprintf_r+0xc14>
			ret += m;
 80089a4:	e59d3014 	ldr	r3, [sp, #20]
 80089a8:	e0833005 	add	r3, r3, r5
 80089ac:	e58d3014 	str	r3, [sp, #20]
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 80089b0:	e5d43000 	ldrb	r3, [r4]
 80089b4:	e3530000 	cmp	r3, #0
 80089b8:	0a00027b 	beq	80093ac <_svfiprintf_r+0xac8>

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
 80089bc:	e3a03000 	mov	r3, #0
 80089c0:	e5cd303f 	strb	r3, [sp, #63]	; 0x3f
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
		width = 0;
 80089c4:	e58d3020 	str	r3, [sp, #32]
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
 80089c8:	e58d300c 	str	r3, [sp, #12]
#else
                if (*fmt == '\0')
                    goto done;
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */
 80089cc:	e2846001 	add	r6, r4, #1

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
		sign = '\0';
 80089d0:	e1a02003 	mov	r2, r3
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
		width = 0;
		prec = -1;
 80089d4:	e3e04000 	mvn	r4, #0
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 80089d8:	e4d63001 	ldrb	r3, [r6], #1
reswitch:	switch (ch) {
 80089dc:	e2431020 	sub	r1, r3, #32
 80089e0:	e3510058 	cmp	r1, #88	; 0x58
 80089e4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
 80089e8:	ea00016a 	b	8008f98 <_svfiprintf_r+0x6b4>
 80089ec:	08008f8c 	.word	0x08008f8c
 80089f0:	08008f98 	.word	0x08008f98
 80089f4:	08008f98 	.word	0x08008f98
 80089f8:	08008f7c 	.word	0x08008f7c
 80089fc:	08008f98 	.word	0x08008f98
 8008a00:	08008f98 	.word	0x08008f98
 8008a04:	08008f98 	.word	0x08008f98
 8008a08:	08008f98 	.word	0x08008f98
 8008a0c:	08008f98 	.word	0x08008f98
 8008a10:	08008f98 	.word	0x08008f98
 8008a14:	08008c60 	.word	0x08008c60
 8008a18:	08009090 	.word	0x08009090
 8008a1c:	08008f98 	.word	0x08008f98
 8008a20:	08008c8c 	.word	0x08008c8c
 8008a24:	08009098 	.word	0x08009098
 8008a28:	08008f98 	.word	0x08008f98
 8008a2c:	08009080 	.word	0x08009080
 8008a30:	08009050 	.word	0x08009050
 8008a34:	08009050 	.word	0x08009050
 8008a38:	08009050 	.word	0x08009050
 8008a3c:	08009050 	.word	0x08009050
 8008a40:	08009050 	.word	0x08009050
 8008a44:	08009050 	.word	0x08009050
 8008a48:	08009050 	.word	0x08009050
 8008a4c:	08009050 	.word	0x08009050
 8008a50:	08009050 	.word	0x08009050
 8008a54:	08008f98 	.word	0x08008f98
 8008a58:	08008f98 	.word	0x08008f98
 8008a5c:	08008f98 	.word	0x08008f98
 8008a60:	08008f98 	.word	0x08008f98
 8008a64:	08008f98 	.word	0x08008f98
 8008a68:	08008f98 	.word	0x08008f98
 8008a6c:	08008f98 	.word	0x08008f98
 8008a70:	08008f98 	.word	0x08008f98
 8008a74:	08008f98 	.word	0x08008f98
 8008a78:	08008f98 	.word	0x08008f98
 8008a7c:	0800903c 	.word	0x0800903c
 8008a80:	08008f98 	.word	0x08008f98
 8008a84:	08008f98 	.word	0x08008f98
 8008a88:	08008f98 	.word	0x08008f98
 8008a8c:	08008f98 	.word	0x08008f98
 8008a90:	08008f98 	.word	0x08008f98
 8008a94:	08008f98 	.word	0x08008f98
 8008a98:	08008f98 	.word	0x08008f98
 8008a9c:	08008f98 	.word	0x08008f98
 8008aa0:	08008f98 	.word	0x08008f98
 8008aa4:	08008f98 	.word	0x08008f98
 8008aa8:	08008b94 	.word	0x08008b94
 8008aac:	08008f98 	.word	0x08008f98
 8008ab0:	08008f98 	.word	0x08008f98
 8008ab4:	08008f98 	.word	0x08008f98
 8008ab8:	08008f98 	.word	0x08008f98
 8008abc:	08008f98 	.word	0x08008f98
 8008ac0:	08008b50 	.word	0x08008b50
 8008ac4:	08008f98 	.word	0x08008f98
 8008ac8:	08008f98 	.word	0x08008f98
 8008acc:	08008ee0 	.word	0x08008ee0
 8008ad0:	08008f98 	.word	0x08008f98
 8008ad4:	08008f98 	.word	0x08008f98
 8008ad8:	08008f98 	.word	0x08008f98
 8008adc:	08008f98 	.word	0x08008f98
 8008ae0:	08008f98 	.word	0x08008f98
 8008ae4:	08008f98 	.word	0x08008f98
 8008ae8:	08008f98 	.word	0x08008f98
 8008aec:	08008f98 	.word	0x08008f98
 8008af0:	08008f98 	.word	0x08008f98
 8008af4:	08008f98 	.word	0x08008f98
 8008af8:	08008da4 	.word	0x08008da4
 8008afc:	08008d5c 	.word	0x08008d5c
 8008b00:	08008f98 	.word	0x08008f98
 8008b04:	08008f98 	.word	0x08008f98
 8008b08:	08008f98 	.word	0x08008f98
 8008b0c:	08008f34 	.word	0x08008f34
 8008b10:	08008d5c 	.word	0x08008d5c
 8008b14:	08008f98 	.word	0x08008f98
 8008b18:	08008f98 	.word	0x08008f98
 8008b1c:	08008f24 	.word	0x08008f24
 8008b20:	08008f98 	.word	0x08008f98
 8008b24:	08008f44 	.word	0x08008f44
 8008b28:	08008ba0 	.word	0x08008ba0
 8008b2c:	08008d14 	.word	0x08008d14
 8008b30:	08008d04 	.word	0x08008d04
 8008b34:	08008f98 	.word	0x08008f98
 8008b38:	08008c9c 	.word	0x08008c9c
 8008b3c:	08008f98 	.word	0x08008f98
 8008b40:	08008b5c 	.word	0x08008b5c
 8008b44:	08008f98 	.word	0x08008f98
 8008b48:	08008f98 	.word	0x08008f98
 8008b4c:	08008fc4 	.word	0x08008fc4
			} else
				size = strlen (cp);

			break;
		case 'U': /* extension */
			flags |= LONGINT;
 8008b50:	e59d900c 	ldr	r9, [sp, #12]
 8008b54:	e3899010 	orr	r9, r9, #16
 8008b58:	e58d900c 	str	r9, [sp, #12]
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 8008b5c:	e59d300c 	ldr	r3, [sp, #12]
 8008b60:	e3130010 	tst	r3, #16
 8008b64:	1a00015d 	bne	80090e0 <_svfiprintf_r+0x7fc>
 8008b68:	e59d900c 	ldr	r9, [sp, #12]
 8008b6c:	e3190040 	tst	r9, #64	; 0x40
 8008b70:	0a00015a 	beq	80090e0 <_svfiprintf_r+0x7fc>
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
	/* NOTREACHED */
}
 8008b74:	e59d301c 	ldr	r3, [sp, #28]
 8008b78:	e1d310b0 	ldrh	r1, [r3]
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 8008b7c:	e2833004 	add	r3, r3, #4
 8008b80:	e2912000 	adds	r2, r1, #0
			base = DEC;
 8008b84:	e3a00001 	mov	r0, #1
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 8008b88:	e58d301c 	str	r3, [sp, #28]
 8008b8c:	13a02001 	movne	r2, #1
 8008b90:	ea00000c 	b	8008bc8 <_svfiprintf_r+0x2e4>
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
 8008b94:	e59d300c 	ldr	r3, [sp, #12]
 8008b98:	e3833010 	orr	r3, r3, #16
 8008b9c:	e58d300c 	str	r3, [sp, #12]
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8008ba0:	e59d500c 	ldr	r5, [sp, #12]
 8008ba4:	e2153010 	ands	r3, r5, #16
 8008ba8:	0a000286 	beq	80095c8 <_svfiprintf_r+0xce4>
 8008bac:	e59d901c 	ldr	r9, [sp, #28]
 8008bb0:	e5991000 	ldr	r1, [r9]
			base = OCT;
 8008bb4:	e3a00000 	mov	r0, #0
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 8008bb8:	e2899004 	add	r9, r9, #4
 8008bbc:	e0512000 	subs	r2, r1, r0
 8008bc0:	e58d901c 	str	r9, [sp, #28]
 8008bc4:	13a02001 	movne	r2, #1

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 8008bc8:	e3a03000 	mov	r3, #0
 8008bcc:	e5cd303f 	strb	r3, [sp, #63]	; 0x3f
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 8008bd0:	e3540000 	cmp	r4, #0
				flags &= ~ZEROPAD;
 8008bd4:	a59d500c 	ldrge	r5, [sp, #12]
 8008bd8:	a3c55080 	bicge	r5, r5, #128	; 0x80
 8008bdc:	a58d500c 	strge	r5, [sp, #12]
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
			if (_uquad != 0 || prec != 0) {
 8008be0:	e3540000 	cmp	r4, #0
 8008be4:	13822001 	orrne	r2, r2, #1
 8008be8:	e21220ff 	ands	r2, r2, #255	; 0xff
 8008bec:	0a0001e0 	beq	8009374 <_svfiprintf_r+0xa90>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 8008bf0:	e3500001 	cmp	r0, #1
 8008bf4:	0a000264 	beq	800958c <_svfiprintf_r+0xca8>
 8008bf8:	e3500002 	cmp	r0, #2
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8008bfc:	e28d2077 	add	r2, sp, #119	; 0x77
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 8008c00:	0a000258 	beq	8009568 <_svfiprintf_r+0xc84>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 8008c04:	e2010007 	and	r0, r1, #7
 8008c08:	e2800030 	add	r0, r0, #48	; 0x30
						_uquad >>= 3;
					} while (_uquad);
 8008c0c:	e1b011a1 	lsrs	r1, r1, #3
				 * a variable; hence this switch.
				 */
				switch (base) {
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 8008c10:	e1a05002 	mov	r5, r2
 8008c14:	e5c20000 	strb	r0, [r2]
 8008c18:	e2422001 	sub	r2, r2, #1
						_uquad >>= 3;
					} while (_uquad);
 8008c1c:	1afffff8 	bne	8008c04 <_svfiprintf_r+0x320>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 8008c20:	e59d900c 	ldr	r9, [sp, #12]
 8008c24:	e3190001 	tst	r9, #1
				 * a variable; hence this switch.
				 */
				switch (base) {
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 8008c28:	e1a01005 	mov	r1, r5
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 8008c2c:	1a00027d 	bne	8009628 <_svfiprintf_r+0xd44>
 8008c30:	e065900a 	rsb	r9, r5, sl
 8008c34:	e58d9018 	str	r9, [sp, #24]
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8008c38:	e58d4024 	str	r4, [sp, #36]	; 0x24
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 8008c3c:	e59d9018 	ldr	r9, [sp, #24]
 8008c40:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
 8008c44:	e1590000 	cmp	r9, r0
 8008c48:	b1a09000 	movlt	r9, r0
		if (sign)
 8008c4c:	e3530000 	cmp	r3, #0
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 8008c50:	e58d9010 	str	r9, [sp, #16]
		if (sign)
			realsz++;
 8008c54:	12899001 	addne	r9, r9, #1
 8008c58:	158d9010 	strne	r9, [sp, #16]
 8008c5c:	ea00005e 	b	8008ddc <_svfiprintf_r+0x4f8>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8008c60:	e59d301c 	ldr	r3, [sp, #28]
 8008c64:	e5933000 	ldr	r3, [r3]
 8008c68:	e59d501c 	ldr	r5, [sp, #28]
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 8008c6c:	e3530000 	cmp	r3, #0
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8008c70:	e58d3020 	str	r3, [sp, #32]
 8008c74:	e2853004 	add	r3, r5, #4
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 8008c78:	aa000260 	bge	8009600 <_svfiprintf_r+0xd1c>
				goto rflag;
			width = -width;
 8008c7c:	e59d9020 	ldr	r9, [sp, #32]
 8008c80:	e2699000 	rsb	r9, r9, #0
 8008c84:	e58d9020 	str	r9, [sp, #32]
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 8008c88:	e58d301c 	str	r3, [sp, #28]
			if (width >= 0)
				goto rflag;
			width = -width;
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 8008c8c:	e59d300c 	ldr	r3, [sp, #12]
 8008c90:	e3833004 	orr	r3, r3, #4
 8008c94:	e58d300c 	str	r3, [sp, #12]
			goto rflag;
 8008c98:	eaffff4e 	b	80089d8 <_svfiprintf_r+0xf4>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8008c9c:	e59d901c 	ldr	r9, [sp, #28]
 8008ca0:	e5995000 	ldr	r5, [r9]
 8008ca4:	e59d301c 	ldr	r3, [sp, #28]
			goto nosign;
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
 8008ca8:	e3a09000 	mov	r9, #0
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 8008cac:	e1550009 	cmp	r5, r9
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8008cb0:	e283b004 	add	fp, r3, #4
			goto nosign;
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
 8008cb4:	e5cd903f 	strb	r9, [sp, #63]	; 0x3f
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 8008cb8:	0a000293 	beq	800970c <_svfiprintf_r+0xe28>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 8008cbc:	e3540000 	cmp	r4, #0
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 8008cc0:	e1a00005 	mov	r0, r5
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 8008cc4:	ba000279 	blt	80096b0 <_svfiprintf_r+0xdcc>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 8008cc8:	e1a01009 	mov	r1, r9
 8008ccc:	e1a02004 	mov	r2, r4
 8008cd0:	e58dc004 	str	ip, [sp, #4]
 8008cd4:	ebfffa00 	bl	80074dc <memchr>

				if (p != NULL) {
 8008cd8:	e3500000 	cmp	r0, #0
 8008cdc:	e59dc004 	ldr	ip, [sp, #4]
 8008ce0:	0a000291 	beq	800972c <_svfiprintf_r+0xe48>
					size = p - cp;
 8008ce4:	e0650000 	rsb	r0, r5, r0
					if (size > prec)
 8008ce8:	e1500004 	cmp	r0, r4
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);

				if (p != NULL) {
					size = p - cp;
 8008cec:	e58d0018 	str	r0, [sp, #24]
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8008cf0:	e58db01c 	str	fp, [sp, #28]
				 */
				char *p = memchr (cp, 0, prec);

				if (p != NULL) {
					size = p - cp;
					if (size > prec)
 8008cf4:	c58d4018 	strgt	r4, [sp, #24]
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8008cf8:	e58d9024 	str	r9, [sp, #36]	; 0x24
 8008cfc:	e5dd303f 	ldrb	r3, [sp, #63]	; 0x3f
 8008d00:	eaffffcd 	b	8008c3c <_svfiprintf_r+0x358>
			} else
#endif
				flags |= LONGINT;
			goto rflag;
		case 'q': /* extension */
			flags |= QUADINT;
 8008d04:	e59d900c 	ldr	r9, [sp, #12]
 8008d08:	e3899010 	orr	r9, r9, #16
 8008d0c:	e58d900c 	str	r9, [sp, #12]
			goto rflag;
 8008d10:	eaffff30 	b	80089d8 <_svfiprintf_r+0xf4>
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8008d14:	e59d301c 	ldr	r3, [sp, #28]
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
 8008d18:	e59d500c 	ldr	r5, [sp, #12]
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 8008d1c:	e5931000 	ldr	r1, [r3]
 8008d20:	e59d901c 	ldr	r9, [sp, #28]
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
			ox[0] = '0';
			ox[1] = ch = 'x';
 8008d24:	e3a03078 	mov	r3, #120	; 0x78
 8008d28:	e5cd3041 	strb	r3, [sp, #65]	; 0x41
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
 8008d2c:	e59f3a2c 	ldr	r3, [pc, #2604]	; 8009760 <_svfiprintf_r+0xe7c>
			flags |= HEXPREFIX;
			ox[0] = '0';
 8008d30:	e3a00030 	mov	r0, #48	; 0x30
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
 8008d34:	e3855002 	orr	r5, r5, #2
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 8008d38:	e2899004 	add	r9, r9, #4
 8008d3c:	e2912000 	adds	r2, r1, #0
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
			ox[0] = '0';
 8008d40:	e5cd0040 	strb	r0, [sp, #64]	; 0x40
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
 8008d44:	e58d500c 	str	r5, [sp, #12]
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 8008d48:	e58d901c 	str	r9, [sp, #28]
 8008d4c:	13a02001 	movne	r2, #1
			base = HEX;
			xdigs = "0123456789abcdef";
 8008d50:	e58d3030 	str	r3, [sp, #48]	; 0x30
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
			base = HEX;
 8008d54:	e3a00002 	mov	r0, #2
			xdigs = "0123456789abcdef";
			flags |= HEXPREFIX;
			ox[0] = '0';
			ox[1] = ch = 'x';
			goto nosign;
 8008d58:	eaffff9a 	b	8008bc8 <_svfiprintf_r+0x2e4>
 8008d5c:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8008d60:	e59d500c 	ldr	r5, [sp, #12]
 8008d64:	e3150010 	tst	r5, #16
 8008d68:	1a000002 	bne	8008d78 <_svfiprintf_r+0x494>
 8008d6c:	e59d300c 	ldr	r3, [sp, #12]
 8008d70:	e3130040 	tst	r3, #64	; 0x40
 8008d74:	1a000240 	bne	800967c <_svfiprintf_r+0xd98>
 8008d78:	e59d901c 	ldr	r9, [sp, #28]
 8008d7c:	e5991000 	ldr	r1, [r9]
 8008d80:	e2899004 	add	r9, r9, #4
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8008d84:	e3510000 	cmp	r1, #0
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 8008d88:	e58d901c 	str	r9, [sp, #28]
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8008d8c:	ba000240 	blt	8009694 <_svfiprintf_r+0xdb0>
 8008d90:	e5dd303f 	ldrb	r3, [sp, #63]	; 0x3f
 8008d94:	03a02000 	moveq	r2, #0
 8008d98:	13a02001 	movne	r2, #1
			{

				_uquad = -_uquad;
				sign = '-';
			}
			base = DEC;
 8008d9c:	e3a00001 	mov	r0, #1
 8008da0:	eaffff8a 	b	8008bd0 <_svfiprintf_r+0x2ec>
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8008da4:	e59d301c 	ldr	r3, [sp, #28]
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 8008da8:	e59d901c 	ldr	r9, [sp, #28]
 8008dac:	e5932000 	ldr	r2, [r3]
 8008db0:	e2899004 	add	r9, r9, #4
				size = 1;
			}
			sign = '\0';
 8008db4:	e3a03000 	mov	r3, #0
			break;
 8008db8:	e3a05001 	mov	r5, #1
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 8008dbc:	e5cd2050 	strb	r2, [sp, #80]	; 0x50
 8008dc0:	e58d901c 	str	r9, [sp, #28]
				size = 1;
			}
			sign = '\0';
 8008dc4:	e5cd303f 	strb	r3, [sp, #63]	; 0x3f
			break;
 8008dc8:	e58d5010 	str	r5, [sp, #16]
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
				size = 1;
 8008dcc:	e58d5018 	str	r5, [sp, #24]
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 8008dd0:	e28d5050 	add	r5, sp, #80	; 0x50
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8008dd4:	e3a09000 	mov	r9, #0
 8008dd8:	e58d9024 	str	r9, [sp, #36]	; 0x24
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
 8008ddc:	e59d300c 	ldr	r3, [sp, #12]
 8008de0:	e2133002 	ands	r3, r3, #2
			realsz+= 2;
 8008de4:	159d9010 	ldrne	r9, [sp, #16]
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
 8008de8:	e58d3028 	str	r3, [sp, #40]	; 0x28
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 8008dec:	e59d300c 	ldr	r3, [sp, #12]
		 */
		realsz = dprec > size ? dprec : size;
		if (sign)
			realsz++;
		if (flags & HEXPREFIX)
			realsz+= 2;
 8008df0:	12899002 	addne	r9, r9, #2
 8008df4:	158d9010 	strne	r9, [sp, #16]

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 8008df8:	e2133084 	ands	r3, r3, #132	; 0x84
 8008dfc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
 8008e00:	1a0000be 	bne	8009100 <_svfiprintf_r+0x81c>
			PAD (width - realsz, blanks);
 8008e04:	e59d9020 	ldr	r9, [sp, #32]
 8008e08:	e59d3010 	ldr	r3, [sp, #16]
 8008e0c:	e0634009 	rsb	r4, r3, r9
 8008e10:	e3540000 	cmp	r4, #0
 8008e14:	da0000b9 	ble	8009100 <_svfiprintf_r+0x81c>
 8008e18:	e3540010 	cmp	r4, #16
 8008e1c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8008e20:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8008e24:	e59fb938 	ldr	fp, [pc, #2360]	; 8009764 <_svfiprintf_r+0xe80>
 8008e28:	c3a09010 	movgt	r9, #16
 8008e2c:	ca000003 	bgt	8008e40 <_svfiprintf_r+0x55c>
 8008e30:	ea000017 	b	8008e94 <_svfiprintf_r+0x5b0>
 8008e34:	e2444010 	sub	r4, r4, #16
 8008e38:	e3540010 	cmp	r4, #16
 8008e3c:	da000014 	ble	8008e94 <_svfiprintf_r+0x5b0>
 8008e40:	e2822001 	add	r2, r2, #1
 8008e44:	e3520007 	cmp	r2, #7
 8008e48:	e2811010 	add	r1, r1, #16
 8008e4c:	e58cb000 	str	fp, [ip]
 8008e50:	e58c9004 	str	r9, [ip, #4]
 8008e54:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8008e58:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8008e5c:	d28cc008 	addle	ip, ip, #8
 8008e60:	dafffff3 	ble	8008e34 <_svfiprintf_r+0x550>
 8008e64:	e1a00007 	mov	r0, r7
 8008e68:	e1a01008 	mov	r1, r8
 8008e6c:	e28d2044 	add	r2, sp, #68	; 0x44
 8008e70:	ebfffe31 	bl	800873c <__ssprint_r>
 8008e74:	e3500000 	cmp	r0, #0
 8008e78:	1a000151 	bne	80093c4 <_svfiprintf_r+0xae0>
 8008e7c:	e2444010 	sub	r4, r4, #16
 8008e80:	e3540010 	cmp	r4, #16
 8008e84:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8008e88:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8008e8c:	e1a0c00a 	mov	ip, sl
 8008e90:	caffffea 	bgt	8008e40 <_svfiprintf_r+0x55c>
 8008e94:	e2822001 	add	r2, r2, #1
 8008e98:	e3520007 	cmp	r2, #7
 8008e9c:	e0811004 	add	r1, r1, r4
 8008ea0:	e58cb000 	str	fp, [ip]
 8008ea4:	e58c4004 	str	r4, [ip, #4]
 8008ea8:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8008eac:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8008eb0:	d28cc008 	addle	ip, ip, #8
 8008eb4:	da000093 	ble	8009108 <_svfiprintf_r+0x824>
 8008eb8:	e1a00007 	mov	r0, r7
 8008ebc:	e1a01008 	mov	r1, r8
 8008ec0:	e28d2044 	add	r2, sp, #68	; 0x44
 8008ec4:	ebfffe1c 	bl	800873c <__ssprint_r>
 8008ec8:	e3500000 	cmp	r0, #0
 8008ecc:	1a00013c 	bne	80093c4 <_svfiprintf_r+0xae0>
 8008ed0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8008ed4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8008ed8:	e1a0c00a 	mov	ip, sl
 8008edc:	ea000089 	b	8009108 <_svfiprintf_r+0x824>
		case 'u':
			_uquad = UARG ();
			base = DEC;
			goto nosign;
		case 'X':
			xdigs = "0123456789ABCDEF";
 8008ee0:	e59f5880 	ldr	r5, [pc, #2176]	; 8009768 <_svfiprintf_r+0xe84>
 8008ee4:	e58d5030 	str	r5, [sp, #48]	; 0x30
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8008ee8:	e59d500c 	ldr	r5, [sp, #12]
 8008eec:	e3150010 	tst	r5, #16
 8008ef0:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
 8008ef4:	0a000038 	beq	8008fdc <_svfiprintf_r+0x6f8>
 8008ef8:	e59d901c 	ldr	r9, [sp, #28]
 8008efc:	e5991000 	ldr	r1, [r9]
 8008f00:	e2899004 	add	r9, r9, #4
 8008f04:	e58d901c 	str	r9, [sp, #28]
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8008f08:	e59d900c 	ldr	r9, [sp, #12]
 8008f0c:	e3190001 	tst	r9, #1
 8008f10:	1a00003e 	bne	8009010 <_svfiprintf_r+0x72c>
 8008f14:	e2912000 	adds	r2, r1, #0
 8008f18:	13a02001 	movne	r2, #1
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
 8008f1c:	e3a00002 	mov	r0, #2
 8008f20:	eaffff28 	b	8008bc8 <_svfiprintf_r+0x2e4>
			if (*fmt == 'l') {
				fmt++;
				flags |= QUADINT;
			} else
#endif
				flags |= LONGINT;
 8008f24:	e59d500c 	ldr	r5, [sp, #12]
 8008f28:	e3855010 	orr	r5, r5, #16
 8008f2c:	e58d500c 	str	r5, [sp, #12]
			goto rflag;
 8008f30:	eafffea8 	b	80089d8 <_svfiprintf_r+0xf4>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 8008f34:	e59d300c 	ldr	r3, [sp, #12]
 8008f38:	e3833040 	orr	r3, r3, #64	; 0x40
 8008f3c:	e58d300c 	str	r3, [sp, #12]
			goto rflag;
 8008f40:	eafffea4 	b	80089d8 <_svfiprintf_r+0xf4>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 8008f44:	e59d300c 	ldr	r3, [sp, #12]
 8008f48:	e3130010 	tst	r3, #16
 8008f4c:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
 8008f50:	1a0001c2 	bne	8009660 <_svfiprintf_r+0xd7c>
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 8008f54:	e59d300c 	ldr	r3, [sp, #12]
 8008f58:	e3130040 	tst	r3, #64	; 0x40
 8008f5c:	0a0001bf 	beq	8009660 <_svfiprintf_r+0xd7c>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 8008f60:	e59d501c 	ldr	r5, [sp, #28]
 8008f64:	e59d9014 	ldr	r9, [sp, #20]
 8008f68:	e5953000 	ldr	r3, [r5]
 8008f6c:	e2855004 	add	r5, r5, #4
 8008f70:	e58d501c 	str	r5, [sp, #28]
 8008f74:	e1c390b0 	strh	r9, [r3]
 8008f78:	eafffe71 	b	8008944 <_svfiprintf_r+0x60>
			 */
			if (!sign)
				sign = ' ';
			goto rflag;
		case '#':
			flags |= ALT;
 8008f7c:	e59d900c 	ldr	r9, [sp, #12]
 8008f80:	e3899001 	orr	r9, r9, #1
 8008f84:	e58d900c 	str	r9, [sp, #12]
			goto rflag;
 8008f88:	eafffe92 	b	80089d8 <_svfiprintf_r+0xf4>
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
				sign = ' ';
 8008f8c:	e3520000 	cmp	r2, #0
 8008f90:	03a02020 	moveq	r2, #32
 8008f94:	eafffe8f 	b	80089d8 <_svfiprintf_r+0xf4>

			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 8008f98:	e3530000 	cmp	r3, #0
 8008f9c:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
 8008fa0:	0a000101 	beq	80093ac <_svfiprintf_r+0xac8>
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
			sign = '\0';
			break;
 8008fa4:	e3a05001 	mov	r5, #1
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
			sign = '\0';
 8008fa8:	e3a02000 	mov	r2, #0
			break;
 8008fac:	e58d5010 	str	r5, [sp, #16]
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
			size = 1;
 8008fb0:	e58d5018 	str	r5, [sp, #24]
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
			*cp = ch;
 8008fb4:	e5cd3050 	strb	r3, [sp, #80]	; 0x50
			size = 1;
			sign = '\0';
 8008fb8:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 8008fbc:	e28d5050 	add	r5, sp, #80	; 0x50
			*cp = ch;
			size = 1;
			sign = '\0';
			break;
 8008fc0:	eaffff83 	b	8008dd4 <_svfiprintf_r+0x4f0>
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8008fc4:	e59d500c 	ldr	r5, [sp, #12]
			goto nosign;
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
 8008fc8:	e59f9790 	ldr	r9, [pc, #1936]	; 8009760 <_svfiprintf_r+0xe7c>
hex:			_uquad = UARG ();
 8008fcc:	e3150010 	tst	r5, #16
 8008fd0:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
			goto nosign;
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
 8008fd4:	e58d9030 	str	r9, [sp, #48]	; 0x30
hex:			_uquad = UARG ();
 8008fd8:	1affffc6 	bne	8008ef8 <_svfiprintf_r+0x614>
 8008fdc:	e59d500c 	ldr	r5, [sp, #12]
 8008fe0:	e3150040 	tst	r5, #64	; 0x40
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
	/* NOTREACHED */
}
 8008fe4:	159d901c 	ldrne	r9, [sp, #28]
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8008fe8:	059d501c 	ldreq	r5, [sp, #28]
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
	/* NOTREACHED */
}
 8008fec:	11d910b0 	ldrhne	r1, [r9]
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8008ff0:	12899004 	addne	r9, r9, #4
 8008ff4:	158d901c 	strne	r9, [sp, #28]
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8008ff8:	e59d900c 	ldr	r9, [sp, #12]
		case 'X':
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
 8008ffc:	05951000 	ldreq	r1, [r5]
 8009000:	02855004 	addeq	r5, r5, #4
 8009004:	058d501c 	streq	r5, [sp, #28]
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8009008:	e3190001 	tst	r9, #1
 800900c:	0affffc0 	beq	8008f14 <_svfiprintf_r+0x630>
 8009010:	e3510000 	cmp	r1, #0
				ox[0] = '0';
				ox[1] = ch;
 8009014:	15cd3041 	strbne	r3, [sp, #65]	; 0x41
				flags |= HEXPREFIX;
 8009018:	159d300c 	ldrne	r3, [sp, #12]
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
				ox[0] = '0';
 800901c:	13a02030 	movne	r2, #48	; 0x30
				ox[1] = ch;
				flags |= HEXPREFIX;
 8009020:	13833002 	orrne	r3, r3, #2
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
				ox[0] = '0';
 8009024:	15cd2040 	strbne	r2, [sp, #64]	; 0x40
				ox[1] = ch;
				flags |= HEXPREFIX;
 8009028:	158d300c 	strne	r3, [sp, #12]
 800902c:	13a02001 	movne	r2, #1
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 8009030:	01a02001 	moveq	r2, r1
			xdigs = "0123456789ABCDEF";
			goto hex;
		case 'x':
			xdigs = "0123456789abcdef";
hex:			_uquad = UARG ();
			base = HEX;
 8009034:	e3a00002 	mov	r0, #2
 8009038:	eafffee2 	b	8008bc8 <_svfiprintf_r+0x2e4>
				size = 1;
			}
			sign = '\0';
			break;
		case 'D':  /* extension */
			flags |= LONGINT;
 800903c:	e59d300c 	ldr	r3, [sp, #12]
 8009040:	e3833010 	orr	r3, r3, #16
 8009044:	e5cd203f 	strb	r2, [sp, #63]	; 0x3f
 8009048:	e58d300c 	str	r3, [sp, #12]
 800904c:	eaffff43 	b	8008d60 <_svfiprintf_r+0x47c>
 8009050:	e1a00006 	mov	r0, r6
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
reswitch:	switch (ch) {
 8009054:	e3a01000 	mov	r1, #0
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8009058:	e2435030 	sub	r5, r3, #48	; 0x30
				ch = *fmt++;
 800905c:	e4d03001 	ldrb	r3, [r0], #1
			} while (is_digit (ch));
 8009060:	e2436030 	sub	r6, r3, #48	; 0x30
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8009064:	e0811101 	add	r1, r1, r1, lsl #2
				ch = *fmt++;
			} while (is_digit (ch));
 8009068:	e3560009 	cmp	r6, #9
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 800906c:	e0851081 	add	r1, r5, r1, lsl #1
				ch = *fmt++;
 8009070:	e1a06000 	mov	r6, r0
			} while (is_digit (ch));
 8009074:	9afffff7 	bls	8009058 <_svfiprintf_r+0x774>
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + to_digit (ch);
 8009078:	e58d1020 	str	r1, [sp, #32]
 800907c:	eafffe56 	b	80089dc <_svfiprintf_r+0xf8>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 8009080:	e59d900c 	ldr	r9, [sp, #12]
 8009084:	e3899080 	orr	r9, r9, #128	; 0x80
 8009088:	e58d900c 	str	r9, [sp, #12]
			goto rflag;
 800908c:	eafffe51 	b	80089d8 <_svfiprintf_r+0xf4>
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
			goto rflag;
		case '+':
			sign = '+';
 8009090:	e3a0202b 	mov	r2, #43	; 0x2b
 8009094:	eafffe4f 	b	80089d8 <_svfiprintf_r+0xf4>
			goto rflag;
		case '.':
			if ((ch = *fmt++) == '*') {
 8009098:	e4d63001 	ldrb	r3, [r6], #1
 800909c:	e353002a 	cmp	r3, #42	; 0x2a
 80090a0:	0a0001a6 	beq	8009740 <_svfiprintf_r+0xe5c>
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80090a4:	e2431030 	sub	r1, r3, #48	; 0x30
 80090a8:	e3510009 	cmp	r1, #9
 80090ac:	83a04000 	movhi	r4, #0
 80090b0:	8afffe49 	bhi	80089dc <_svfiprintf_r+0xf8>
 80090b4:	e1a00006 	mov	r0, r6
 80090b8:	e3a04000 	mov	r4, #0
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
 80090bc:	e4d03001 	ldrb	r3, [r0], #1
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
				n = 10 * n + to_digit (ch);
 80090c0:	e0844104 	add	r4, r4, r4, lsl #2
 80090c4:	e0814084 	add	r4, r1, r4, lsl #1
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80090c8:	e2431030 	sub	r1, r3, #48	; 0x30
 80090cc:	e3510009 	cmp	r1, #9
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
 80090d0:	e1a06000 	mov	r6, r0
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 80090d4:	9afffff8 	bls	80090bc <_svfiprintf_r+0x7d8>
 80090d8:	e1844fc4 	orr	r4, r4, r4, asr #31
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
			goto reswitch;
 80090dc:	eafffe3e 	b	80089dc <_svfiprintf_r+0xf8>
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 80090e0:	e59d501c 	ldr	r5, [sp, #28]
 80090e4:	e5951000 	ldr	r1, [r5]
 80090e8:	e2855004 	add	r5, r5, #4
 80090ec:	e2912000 	adds	r2, r1, #0
			base = DEC;
 80090f0:	e3a00001 	mov	r0, #1
			break;
		case 'U': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 80090f4:	e58d501c 	str	r5, [sp, #28]
 80090f8:	13a02001 	movne	r2, #1
 80090fc:	eafffeb1 	b	8008bc8 <_svfiprintf_r+0x2e4>
 8009100:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8009104:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
 8009108:	e5dd303f 	ldrb	r3, [sp, #63]	; 0x3f
 800910c:	e3530000 	cmp	r3, #0
 8009110:	0a000009 	beq	800913c <_svfiprintf_r+0x858>
			PRINT (&sign, 1);
 8009114:	e2822001 	add	r2, r2, #1
 8009118:	e3520007 	cmp	r2, #7
 800911c:	e2811001 	add	r1, r1, #1
 8009120:	e28d003f 	add	r0, sp, #63	; 0x3f
 8009124:	e3a03001 	mov	r3, #1
 8009128:	e88c0009 	stm	ip, {r0, r3}
 800912c:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009130:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009134:	d28cc008 	addle	ip, ip, #8
 8009138:	ca000100 	bgt	8009540 <_svfiprintf_r+0xc5c>
		if (flags & HEXPREFIX)
 800913c:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
 8009140:	e3590000 	cmp	r9, #0
 8009144:	0a000009 	beq	8009170 <_svfiprintf_r+0x88c>
			PRINT (ox, 2);
 8009148:	e2822001 	add	r2, r2, #1
 800914c:	e3520007 	cmp	r2, #7
 8009150:	e2811002 	add	r1, r1, #2
 8009154:	e28d0040 	add	r0, sp, #64	; 0x40
 8009158:	e3a03002 	mov	r3, #2
 800915c:	e88c0009 	stm	ip, {r0, r3}
 8009160:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009164:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009168:	d28cc008 	addle	ip, ip, #8
 800916c:	ca0000e9 	bgt	8009518 <_svfiprintf_r+0xc34>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 8009170:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
 8009174:	e3530080 	cmp	r3, #128	; 0x80
 8009178:	0a00009a 	beq	80093e8 <_svfiprintf_r+0xb04>
			PAD (width - realsz, zeroes);

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 800917c:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
 8009180:	e59d3018 	ldr	r3, [sp, #24]
 8009184:	e0634009 	rsb	r4, r3, r9
 8009188:	e3540000 	cmp	r4, #0
 800918c:	da00002d 	ble	8009248 <_svfiprintf_r+0x964>
 8009190:	e3540010 	cmp	r4, #16
 8009194:	e59f95d0 	ldr	r9, [pc, #1488]	; 800976c <_svfiprintf_r+0xe88>
 8009198:	c3a0b010 	movgt	fp, #16
 800919c:	ca000003 	bgt	80091b0 <_svfiprintf_r+0x8cc>
 80091a0:	ea000016 	b	8009200 <_svfiprintf_r+0x91c>
 80091a4:	e2444010 	sub	r4, r4, #16
 80091a8:	e3540010 	cmp	r4, #16
 80091ac:	da000013 	ble	8009200 <_svfiprintf_r+0x91c>
 80091b0:	e2822001 	add	r2, r2, #1
 80091b4:	e3520007 	cmp	r2, #7
 80091b8:	e2811010 	add	r1, r1, #16
 80091bc:	e88c0a00 	stm	ip, {r9, fp}
 80091c0:	e58d2048 	str	r2, [sp, #72]	; 0x48
 80091c4:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 80091c8:	d28cc008 	addle	ip, ip, #8
 80091cc:	dafffff4 	ble	80091a4 <_svfiprintf_r+0x8c0>
 80091d0:	e1a00007 	mov	r0, r7
 80091d4:	e1a01008 	mov	r1, r8
 80091d8:	e28d2044 	add	r2, sp, #68	; 0x44
 80091dc:	ebfffd56 	bl	800873c <__ssprint_r>
 80091e0:	e3500000 	cmp	r0, #0
 80091e4:	1a000076 	bne	80093c4 <_svfiprintf_r+0xae0>
 80091e8:	e2444010 	sub	r4, r4, #16
 80091ec:	e3540010 	cmp	r4, #16
 80091f0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 80091f4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 80091f8:	e1a0c00a 	mov	ip, sl
 80091fc:	caffffeb 	bgt	80091b0 <_svfiprintf_r+0x8cc>
 8009200:	e2822001 	add	r2, r2, #1
 8009204:	e3520007 	cmp	r2, #7
 8009208:	e0811004 	add	r1, r1, r4
 800920c:	e58c9000 	str	r9, [ip]
 8009210:	e58c4004 	str	r4, [ip, #4]
 8009214:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009218:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 800921c:	d28cc008 	addle	ip, ip, #8
 8009220:	da000008 	ble	8009248 <_svfiprintf_r+0x964>
 8009224:	e1a00007 	mov	r0, r7
 8009228:	e1a01008 	mov	r1, r8
 800922c:	e28d2044 	add	r2, sp, #68	; 0x44
 8009230:	ebfffd41 	bl	800873c <__ssprint_r>
 8009234:	e3500000 	cmp	r0, #0
 8009238:	1a000061 	bne	80093c4 <_svfiprintf_r+0xae0>
 800923c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8009240:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8009244:	e1a0c00a 	mov	ip, sl
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 8009248:	e59d9018 	ldr	r9, [sp, #24]
 800924c:	e2822001 	add	r2, r2, #1
 8009250:	e3520007 	cmp	r2, #7
 8009254:	e0811009 	add	r1, r1, r9
 8009258:	e88c0220 	stm	ip, {r5, r9}
 800925c:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009260:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009264:	d28cc008 	addle	ip, ip, #8
 8009268:	ca000092 	bgt	80094b8 <_svfiprintf_r+0xbd4>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 800926c:	e59d300c 	ldr	r3, [sp, #12]
 8009270:	e3130004 	tst	r3, #4
 8009274:	0a00002c 	beq	800932c <_svfiprintf_r+0xa48>
			PAD (width - realsz, blanks);
 8009278:	e59d5020 	ldr	r5, [sp, #32]
 800927c:	e59d9010 	ldr	r9, [sp, #16]
 8009280:	e0694005 	rsb	r4, r9, r5
 8009284:	e3540000 	cmp	r4, #0
 8009288:	da000027 	ble	800932c <_svfiprintf_r+0xa48>
 800928c:	e3540010 	cmp	r4, #16
 8009290:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8009294:	e59fb4c8 	ldr	fp, [pc, #1224]	; 8009764 <_svfiprintf_r+0xe80>
 8009298:	c3a05010 	movgt	r5, #16
 800929c:	c1a03001 	movgt	r3, r1
 80092a0:	ca000003 	bgt	80092b4 <_svfiprintf_r+0x9d0>
 80092a4:	ea000018 	b	800930c <_svfiprintf_r+0xa28>
 80092a8:	e2444010 	sub	r4, r4, #16
 80092ac:	e3540010 	cmp	r4, #16
 80092b0:	da000014 	ble	8009308 <_svfiprintf_r+0xa24>
 80092b4:	e2822001 	add	r2, r2, #1
 80092b8:	e3520007 	cmp	r2, #7
 80092bc:	e2833010 	add	r3, r3, #16
 80092c0:	e58cb000 	str	fp, [ip]
 80092c4:	e58c5004 	str	r5, [ip, #4]
 80092c8:	e58d2048 	str	r2, [sp, #72]	; 0x48
 80092cc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
 80092d0:	d28cc008 	addle	ip, ip, #8
 80092d4:	dafffff3 	ble	80092a8 <_svfiprintf_r+0x9c4>
 80092d8:	e1a00007 	mov	r0, r7
 80092dc:	e1a01008 	mov	r1, r8
 80092e0:	e28d2044 	add	r2, sp, #68	; 0x44
 80092e4:	ebfffd14 	bl	800873c <__ssprint_r>
 80092e8:	e3500000 	cmp	r0, #0
 80092ec:	1a000034 	bne	80093c4 <_svfiprintf_r+0xae0>
 80092f0:	e2444010 	sub	r4, r4, #16
 80092f4:	e28d2048 	add	r2, sp, #72	; 0x48
 80092f8:	e3540010 	cmp	r4, #16
 80092fc:	e892000c 	ldm	r2, {r2, r3}
 8009300:	e1a0c00a 	mov	ip, sl
 8009304:	caffffea 	bgt	80092b4 <_svfiprintf_r+0x9d0>
 8009308:	e1a01003 	mov	r1, r3
 800930c:	e2822001 	add	r2, r2, #1
 8009310:	e0841001 	add	r1, r4, r1
 8009314:	e3520007 	cmp	r2, #7
 8009318:	e58d2048 	str	r2, [sp, #72]	; 0x48
 800931c:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009320:	e58cb000 	str	fp, [ip]
 8009324:	e58c4004 	str	r4, [ip, #4]
 8009328:	ca0000b6 	bgt	8009608 <_svfiprintf_r+0xd24>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 800932c:	e59d3014 	ldr	r3, [sp, #20]
 8009330:	e59d5010 	ldr	r5, [sp, #16]
 8009334:	e59d9020 	ldr	r9, [sp, #32]
 8009338:	e1550009 	cmp	r5, r9
 800933c:	a0833005 	addge	r3, r3, r5
 8009340:	b0833009 	addlt	r3, r3, r9

		FLUSH ();	/* copy out the I/O vectors */
 8009344:	e3510000 	cmp	r1, #0
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 8009348:	e58d3014 	str	r3, [sp, #20]

		FLUSH ();	/* copy out the I/O vectors */
 800934c:	1a000062 	bne	80094dc <_svfiprintf_r+0xbf8>
 8009350:	e3a03000 	mov	r3, #0
 8009354:	e58d3048 	str	r3, [sp, #72]	; 0x48
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 8009358:	e5d63000 	ldrb	r3, [r6]
 800935c:	e3530000 	cmp	r3, #0
 8009360:	13530025 	cmpne	r3, #37	; 0x25
			PAD (width - realsz, blanks);

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 8009364:	e1a0c00a 	mov	ip, sl
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 8009368:	1afffd79 	bne	8008954 <_svfiprintf_r+0x70>
 800936c:	e1a04006 	mov	r4, r6
 8009370:	eafffd8e 	b	80089b0 <_svfiprintf_r+0xcc>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 8009374:	e3500000 	cmp	r0, #0
 8009378:	158d2018 	strne	r2, [sp, #24]
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 800937c:	11a0500a 	movne	r5, sl
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 8009380:	1afffe2c 	bne	8008c38 <_svfiprintf_r+0x354>
 8009384:	e59d500c 	ldr	r5, [sp, #12]
 8009388:	e3150001 	tst	r5, #1
 800938c:	159d9034 	ldrne	r9, [sp, #52]	; 0x34
                         *--cp = '0';
 8009390:	13a02030 	movne	r2, #48	; 0x30
 8009394:	15cd2077 	strbne	r2, [sp, #119]	; 0x77
 8009398:	158d9018 	strne	r9, [sp, #24]
 800939c:	128d5077 	addne	r5, sp, #119	; 0x77
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 80093a0:	058d0018 	streq	r0, [sp, #24]
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 80093a4:	01a0500a 	moveq	r5, sl
 80093a8:	eafffe22 	b	8008c38 <_svfiprintf_r+0x354>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 80093ac:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
 80093b0:	e3530000 	cmp	r3, #0
 80093b4:	11a00007 	movne	r0, r7
 80093b8:	11a01008 	movne	r1, r8
 80093bc:	128d2044 	addne	r2, sp, #68	; 0x44
 80093c0:	1bfffcdd 	blne	800873c <__ssprint_r>
	if (malloc_buf != NULL)
		_free_r (data, malloc_buf);
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 80093c4:	e1d830bc 	ldrh	r3, [r8, #12]
 80093c8:	e3130040 	tst	r3, #64	; 0x40
 80093cc:	e59d3014 	ldr	r3, [sp, #20]
 80093d0:	13e03000 	mvnne	r3, #0
 80093d4:	e58d3014 	str	r3, [sp, #20]
	/* NOTREACHED */
}
 80093d8:	e59d0014 	ldr	r0, [sp, #20]
 80093dc:	e28dd0bc 	add	sp, sp, #188	; 0xbc
 80093e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	e12fff1e 	bx	lr
		if (flags & HEXPREFIX)
			PRINT (ox, 2);

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 80093e8:	e59d9020 	ldr	r9, [sp, #32]
 80093ec:	e59d3010 	ldr	r3, [sp, #16]
 80093f0:	e0634009 	rsb	r4, r3, r9
 80093f4:	e3540000 	cmp	r4, #0
 80093f8:	daffff5f 	ble	800917c <_svfiprintf_r+0x898>
 80093fc:	e3540010 	cmp	r4, #16
 8009400:	e59f9364 	ldr	r9, [pc, #868]	; 800976c <_svfiprintf_r+0xe88>
 8009404:	c3a0b010 	movgt	fp, #16
 8009408:	ca000003 	bgt	800941c <_svfiprintf_r+0xb38>
 800940c:	ea000016 	b	800946c <_svfiprintf_r+0xb88>
 8009410:	e2444010 	sub	r4, r4, #16
 8009414:	e3540010 	cmp	r4, #16
 8009418:	da000013 	ble	800946c <_svfiprintf_r+0xb88>
 800941c:	e2822001 	add	r2, r2, #1
 8009420:	e3520007 	cmp	r2, #7
 8009424:	e2811010 	add	r1, r1, #16
 8009428:	e88c0a00 	stm	ip, {r9, fp}
 800942c:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009430:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009434:	d28cc008 	addle	ip, ip, #8
 8009438:	dafffff4 	ble	8009410 <_svfiprintf_r+0xb2c>
 800943c:	e1a00007 	mov	r0, r7
 8009440:	e1a01008 	mov	r1, r8
 8009444:	e28d2044 	add	r2, sp, #68	; 0x44
 8009448:	ebfffcbb 	bl	800873c <__ssprint_r>
 800944c:	e3500000 	cmp	r0, #0
 8009450:	1affffdb 	bne	80093c4 <_svfiprintf_r+0xae0>
 8009454:	e2444010 	sub	r4, r4, #16
 8009458:	e3540010 	cmp	r4, #16
 800945c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8009460:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8009464:	e1a0c00a 	mov	ip, sl
 8009468:	caffffeb 	bgt	800941c <_svfiprintf_r+0xb38>
 800946c:	e2822001 	add	r2, r2, #1
 8009470:	e3520007 	cmp	r2, #7
 8009474:	e0811004 	add	r1, r1, r4
 8009478:	e58c9000 	str	r9, [ip]
 800947c:	e58c4004 	str	r4, [ip, #4]
 8009480:	e58d2048 	str	r2, [sp, #72]	; 0x48
 8009484:	e58d104c 	str	r1, [sp, #76]	; 0x4c
 8009488:	d28cc008 	addle	ip, ip, #8
 800948c:	daffff3a 	ble	800917c <_svfiprintf_r+0x898>
 8009490:	e1a00007 	mov	r0, r7
 8009494:	e1a01008 	mov	r1, r8
 8009498:	e28d2044 	add	r2, sp, #68	; 0x44
 800949c:	ebfffca6 	bl	800873c <__ssprint_r>
 80094a0:	e3500000 	cmp	r0, #0
 80094a4:	1affffc6 	bne	80093c4 <_svfiprintf_r+0xae0>
 80094a8:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 80094ac:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 80094b0:	e1a0c00a 	mov	ip, sl
 80094b4:	eaffff30 	b	800917c <_svfiprintf_r+0x898>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 80094b8:	e1a00007 	mov	r0, r7
 80094bc:	e1a01008 	mov	r1, r8
 80094c0:	e28d2044 	add	r2, sp, #68	; 0x44
 80094c4:	ebfffc9c 	bl	800873c <__ssprint_r>
 80094c8:	e3500000 	cmp	r0, #0
 80094cc:	1affffbc 	bne	80093c4 <_svfiprintf_r+0xae0>
 80094d0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 80094d4:	e1a0c00a 	mov	ip, sl
 80094d8:	eaffff63 	b	800926c <_svfiprintf_r+0x988>
			PAD (width - realsz, blanks);

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 80094dc:	e1a00007 	mov	r0, r7
 80094e0:	e1a01008 	mov	r1, r8
 80094e4:	e28d2044 	add	r2, sp, #68	; 0x44
 80094e8:	ebfffc93 	bl	800873c <__ssprint_r>
 80094ec:	e3500000 	cmp	r0, #0
 80094f0:	0affff96 	beq	8009350 <_svfiprintf_r+0xa6c>
 80094f4:	eaffffb2 	b	80093c4 <_svfiprintf_r+0xae0>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 80094f8:	e1a00007 	mov	r0, r7
 80094fc:	e1a01008 	mov	r1, r8
 8009500:	e28d2044 	add	r2, sp, #68	; 0x44
 8009504:	ebfffc8c 	bl	800873c <__ssprint_r>
 8009508:	e3500000 	cmp	r0, #0
 800950c:	1affffac 	bne	80093c4 <_svfiprintf_r+0xae0>
 8009510:	e1a0c00a 	mov	ip, sl
 8009514:	eafffd22 	b	80089a4 <_svfiprintf_r+0xc0>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 8009518:	e1a00007 	mov	r0, r7
 800951c:	e1a01008 	mov	r1, r8
 8009520:	e28d2044 	add	r2, sp, #68	; 0x44
 8009524:	ebfffc84 	bl	800873c <__ssprint_r>
 8009528:	e3500000 	cmp	r0, #0
 800952c:	1affffa4 	bne	80093c4 <_svfiprintf_r+0xae0>
 8009530:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8009534:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8009538:	e1a0c00a 	mov	ip, sl
 800953c:	eaffff0b 	b	8009170 <_svfiprintf_r+0x88c>
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 8009540:	e1a00007 	mov	r0, r7
 8009544:	e1a01008 	mov	r1, r8
 8009548:	e28d2044 	add	r2, sp, #68	; 0x44
 800954c:	ebfffc7a 	bl	800873c <__ssprint_r>
 8009550:	e3500000 	cmp	r0, #0
 8009554:	1affff9a 	bne	80093c4 <_svfiprintf_r+0xae0>
 8009558:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 800955c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
 8009560:	e1a0c00a 	mov	ip, sl
 8009564:	eafffef4 	b	800913c <_svfiprintf_r+0x858>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8009568:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
					} while (_uquad != 0);
					break;

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 800956c:	e201000f 	and	r0, r1, #15
 8009570:	e7d90000 	ldrb	r0, [r9, r0]
						_uquad >>= 4;
					} while (_uquad);
 8009574:	e1b01221 	lsrs	r1, r1, #4
					} while (_uquad != 0);
					break;

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 8009578:	e1a05002 	mov	r5, r2
 800957c:	e5c20000 	strb	r0, [r2]
 8009580:	e2422001 	sub	r2, r2, #1
						_uquad >>= 4;
					} while (_uquad);
 8009584:	1afffff8 	bne	800956c <_svfiprintf_r+0xc88>
 8009588:	eafffda8 	b	8008c30 <_svfiprintf_r+0x34c>
						*--cp = '0';
					break;

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 800958c:	e3510009 	cmp	r1, #9
 8009590:	9a00002c 	bls	8009648 <_svfiprintf_r+0xd64>
  return result;
}
#endif /* STRING_ONLY */

int
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
 8009594:	e28d0077 	add	r0, sp, #119	; 0x77
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 8009598:	e59f91d0 	ldr	r9, [pc, #464]	; 8009770 <_svfiprintf_r+0xe8c>
 800959c:	e0825199 	umull	r5, r2, r9, r1
 80095a0:	e1a021a2 	lsr	r2, r2, #3
 80095a4:	e0825102 	add	r5, r2, r2, lsl #2
 80095a8:	e0411085 	sub	r1, r1, r5, lsl #1
 80095ac:	e1a05000 	mov	r5, r0
 80095b0:	e2810030 	add	r0, r1, #48	; 0x30
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
					} while (_uquad != 0);
 80095b4:	e2521000 	subs	r1, r2, #0
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 80095b8:	e5c50000 	strb	r0, [r5]
 80095bc:	e2450001 	sub	r0, r5, #1
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
					} while (_uquad != 0);
 80095c0:	1afffff4 	bne	8009598 <_svfiprintf_r+0xcb4>
 80095c4:	eafffd99 	b	8008c30 <_svfiprintf_r+0x34c>
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 80095c8:	e59d500c 	ldr	r5, [sp, #12]
 80095cc:	e2150040 	ands	r0, r5, #64	; 0x40
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
	/* NOTREACHED */
}
 80095d0:	159d901c 	ldrne	r9, [sp, #28]
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 80095d4:	059d301c 	ldreq	r3, [sp, #28]
#ifndef STRING_ONLY
	_funlockfile (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
	/* NOTREACHED */
}
 80095d8:	11d910b0 	ldrhne	r1, [r9]
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 80095dc:	05931000 	ldreq	r1, [r3]
 80095e0:	12899004 	addne	r9, r9, #4
 80095e4:	02833004 	addeq	r3, r3, #4
			base = OCT;
 80095e8:	11a00003 	movne	r0, r3
			continue;	/* no output */
		case 'O': /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 80095ec:	158d901c 	strne	r9, [sp, #28]
 80095f0:	058d301c 	streq	r3, [sp, #28]
 80095f4:	e2912000 	adds	r2, r1, #0
 80095f8:	13a02001 	movne	r2, #1
 80095fc:	eafffd71 	b	8008bc8 <_svfiprintf_r+0x2e4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 8009600:	e58d301c 	str	r3, [sp, #28]
 8009604:	eafffcf3 	b	80089d8 <_svfiprintf_r+0xf4>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 8009608:	e1a00007 	mov	r0, r7
 800960c:	e1a01008 	mov	r1, r8
 8009610:	e28d2044 	add	r2, sp, #68	; 0x44
 8009614:	ebfffc48 	bl	800873c <__ssprint_r>
 8009618:	e3500000 	cmp	r0, #0
 800961c:	1affff68 	bne	80093c4 <_svfiprintf_r+0xae0>
 8009620:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
 8009624:	eaffff40 	b	800932c <_svfiprintf_r+0xa48>
					do {
						*--cp = to_char (_uquad & 7);
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 8009628:	e3500030 	cmp	r0, #48	; 0x30
 800962c:	0afffd7f 	beq	8008c30 <_svfiprintf_r+0x34c>
						*--cp = '0';
 8009630:	e1a05002 	mov	r5, r2
 8009634:	e065900a 	rsb	r9, r5, sl
 8009638:	e3a02030 	mov	r2, #48	; 0x30
 800963c:	e58d9018 	str	r9, [sp, #24]
 8009640:	e5412001 	strb	r2, [r1, #-1]
 8009644:	eafffd7b 	b	8008c38 <_svfiprintf_r+0x354>
 8009648:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
					break;

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
						*--cp = to_char(_uquad);
 800964c:	e2811030 	add	r1, r1, #48	; 0x30
 8009650:	e58d5018 	str	r5, [sp, #24]
 8009654:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
 8009658:	e28d5077 	add	r5, sp, #119	; 0x77
						break;
 800965c:	eafffd75 	b	8008c38 <_svfiprintf_r+0x354>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 8009660:	e59d501c 	ldr	r5, [sp, #28]
 8009664:	e59d9014 	ldr	r9, [sp, #20]
 8009668:	e5953000 	ldr	r3, [r5]
 800966c:	e2855004 	add	r5, r5, #4
 8009670:	e58d501c 	str	r5, [sp, #28]
 8009674:	e5839000 	str	r9, [r3]
 8009678:	eafffcb1 	b	8008944 <_svfiprintf_r+0x60>
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 800967c:	e59d501c 	ldr	r5, [sp, #28]
 8009680:	e1d510f0 	ldrsh	r1, [r5]
 8009684:	e2855004 	add	r5, r5, #4
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8009688:	e3510000 	cmp	r1, #0
		case 'D':  /* extension */
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 800968c:	e58d501c 	str	r5, [sp, #28]
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
#else
			if ((long) _uquad < 0)
 8009690:	aafffdbe 	bge	8008d90 <_svfiprintf_r+0x4ac>
#endif
			{

				_uquad = -_uquad;
 8009694:	e2611000 	rsb	r1, r1, #0
				sign = '-';
 8009698:	e3a0302d 	mov	r3, #45	; 0x2d
 800969c:	e2912000 	adds	r2, r1, #0
 80096a0:	13a02001 	movne	r2, #1
 80096a4:	e5cd303f 	strb	r3, [sp, #63]	; 0x3f
			}
			base = DEC;
 80096a8:	e3a00001 	mov	r0, #1
 80096ac:	eafffd47 	b	8008bd0 <_svfiprintf_r+0x2ec>
					if (size > prec)
						size = prec;
				} else
					size = prec;
			} else
				size = strlen (cp);
 80096b0:	e58dc004 	str	ip, [sp, #4]
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 80096b4:	e58db01c 	str	fp, [sp, #28]
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 80096b8:	e58d9024 	str	r9, [sp, #36]	; 0x24
					if (size > prec)
						size = prec;
				} else
					size = prec;
			} else
				size = strlen (cp);
 80096bc:	ebfffc06 	bl	80086dc <strlen>
 80096c0:	e5dd303f 	ldrb	r3, [sp, #63]	; 0x3f
 80096c4:	e58d0018 	str	r0, [sp, #24]
 80096c8:	e59dc004 	ldr	ip, [sp, #4]
 80096cc:	eafffd5a 	b	8008c3c <_svfiprintf_r+0x358>
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
 80096d0:	e3a01040 	mov	r1, #64	; 0x40
 80096d4:	e58d2004 	str	r2, [sp, #4]
 80096d8:	ebfff5b7 	bl	8006dbc <_malloc_r>
		if (!fp->_p)
 80096dc:	e3500000 	cmp	r0, #0
		{
			data->_errno = ENOMEM;
 80096e0:	03a0300c 	moveq	r3, #12
	}
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
 80096e4:	e5880000 	str	r0, [r8]
 80096e8:	e5880010 	str	r0, [r8, #16]
		if (!fp->_p)
 80096ec:	e59d2004 	ldr	r2, [sp, #4]
		{
			data->_errno = ENOMEM;
 80096f0:	05873000 	streq	r3, [r7]
			return EOF;
 80096f4:	03e03000 	mvneq	r3, #0
 80096f8:	058d3014 	streq	r3, [sp, #20]
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
		if (!fp->_p)
 80096fc:	0affff35 	beq	80093d8 <_svfiprintf_r+0xaf4>
		{
			data->_errno = ENOMEM;
			return EOF;
		}
		fp->_bf._size = 64;
 8009700:	e3a03040 	mov	r3, #64	; 0x40
 8009704:	e5883014 	str	r3, [r8, #20]
 8009708:	eafffc80 	b	8008910 <_svfiprintf_r+0x2c>
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
				cp = "(null)";
				size = ((unsigned) prec > 6U) ? 6 : prec;
 800970c:	e3540006 	cmp	r4, #6
 8009710:	23a04006 	movcs	r4, #6
 8009714:	e1c45fc4 	bic	r5, r4, r4, asr #31
 8009718:	e58d5010 	str	r5, [sp, #16]
 800971c:	e58d4018 	str	r4, [sp, #24]
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8009720:	e58db01c 	str	fp, [sp, #28]
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
				cp = "(null)";
 8009724:	e59f5048 	ldr	r5, [pc, #72]	; 8009774 <_svfiprintf_r+0xe90>
 8009728:	eafffda9 	b	8008dd4 <_svfiprintf_r+0x4f0>
 800972c:	e5dd303f 	ldrb	r3, [sp, #63]	; 0x3f
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			sign = '\0';
			cp = GET_ARG (N, ap, char_ptr_t);
 8009730:	e58db01c 	str	fp, [sp, #28]
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);

				if (p != NULL) {
 8009734:	e58d4018 	str	r4, [sp, #24]
#endif
		fmt_anchor = fmt;
		fmt++;		/* skip over '%' */

		flags = 0;
		dprec = 0;
 8009738:	e58d0024 	str	r0, [sp, #36]	; 0x24
 800973c:	eafffd3e 	b	8008c3c <_svfiprintf_r+0x358>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 8009740:	e59d501c 	ldr	r5, [sp, #28]
 8009744:	e5954000 	ldr	r4, [r5]
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 8009748:	e3540000 	cmp	r4, #0
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 800974c:	e2853004 	add	r3, r5, #4
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 8009750:	aaffffaa 	bge	8009600 <_svfiprintf_r+0xd1c>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 8009754:	e58d301c 	str	r3, [sp, #28]
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
					prec = -1;
 8009758:	e3e04000 	mvn	r4, #0
 800975c:	eafffc9d 	b	80089d8 <_svfiprintf_r+0xf4>
 8009760:	0800b094 	.word	0x0800b094
 8009764:	0800af40 	.word	0x0800af40
 8009768:	0800b080 	.word	0x0800b080
 800976c:	0800af50 	.word	0x0800af50
 8009770:	cccccccd 	.word	0xcccccccd
 8009774:	0800b0a8 	.word	0x0800b0a8

08009778 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 8009778:	e92d4010 	push	{r4, lr}
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 800977c:	e0010192 	mul	r1, r2, r1
 8009780:	ebfff58d 	bl	8006dbc <_malloc_r>

  if (mem == 0) 
 8009784:	e2504000 	subs	r4, r0, #0
 8009788:	0a00000b 	beq	80097bc <_calloc_r+0x44>
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 800978c:	e5142004 	ldr	r2, [r4, #-4]
 8009790:	e3c22003 	bic	r2, r2, #3
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 8009794:	e2422004 	sub	r2, r2, #4
 8009798:	e3520024 	cmp	r2, #36	; 0x24
 800979c:	8a000017 	bhi	8009800 <_calloc_r+0x88>
 80097a0:	e3520013 	cmp	r2, #19
 80097a4:	91a03004 	movls	r3, r4
 80097a8:	8a000006 	bhi	80097c8 <_calloc_r+0x50>
 80097ac:	e3a02000 	mov	r2, #0
 80097b0:	e5832000 	str	r2, [r3]
 80097b4:	e5832004 	str	r2, [r3, #4]
 80097b8:	e5832008 	str	r2, [r3, #8]
    return mem;
  }
}
 80097bc:	e1a00004 	mov	r0, r4
 80097c0:	e8bd4010 	pop	{r4, lr}
 80097c4:	e12fff1e 	bx	lr
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 80097c8:	e3a03000 	mov	r3, #0
 80097cc:	e352001b 	cmp	r2, #27
 80097d0:	e5843000 	str	r3, [r4]
 80097d4:	e5843004 	str	r3, [r4, #4]
 80097d8:	92843008 	addls	r3, r4, #8
 80097dc:	9afffff2 	bls	80097ac <_calloc_r+0x34>
 80097e0:	e3520024 	cmp	r2, #36	; 0x24
 80097e4:	e5843008 	str	r3, [r4, #8]
 80097e8:	e584300c 	str	r3, [r4, #12]
 80097ec:	05843010 	streq	r3, [r4, #16]
 80097f0:	05843014 	streq	r3, [r4, #20]
 80097f4:	12843010 	addne	r3, r4, #16
 80097f8:	02843018 	addeq	r3, r4, #24
 80097fc:	eaffffea 	b	80097ac <_calloc_r+0x34>
 8009800:	e3a01000 	mov	r1, #0
 8009804:	eb00004d 	bl	8009940 <memset>
 8009808:	eaffffeb 	b	80097bc <_calloc_r+0x44>

0800980c <memmove>:
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 800980c:	e1500001 	cmp	r0, r1
_PTR
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 8009810:	e92d00f0 	push	{r4, r5, r6, r7}
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 8009814:	9a00000e 	bls	8009854 <memmove+0x48>
 8009818:	e081c002 	add	ip, r1, r2
 800981c:	e150000c 	cmp	r0, ip
 8009820:	2a00000b 	bcs	8009854 <memmove+0x48>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 8009824:	e3520000 	cmp	r2, #0

  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
 8009828:	e0803002 	add	r3, r0, r2
      while (length--)
 800982c:	e2422001 	sub	r2, r2, #1
 8009830:	0a000005 	beq	800984c <memmove+0x40>
 8009834:	e1a0100c 	mov	r1, ip
 8009838:	e2422001 	sub	r2, r2, #1
	{
	  *--dst = *--src;
 800983c:	e571c001 	ldrb	ip, [r1, #-1]!
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 8009840:	e3720001 	cmn	r2, #1
	{
	  *--dst = *--src;
 8009844:	e563c001 	strb	ip, [r3, #-1]!
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 8009848:	1afffffa 	bne	8009838 <memmove+0x2c>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800984c:	e8bd00f0 	pop	{r4, r5, r6, r7}
 8009850:	e12fff1e 	bx	lr
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 8009854:	e352000f 	cmp	r2, #15
 8009858:	8a000009 	bhi	8009884 <memmove+0x78>
 800985c:	e1a03000 	mov	r3, r0
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 8009860:	e3520000 	cmp	r2, #0
 8009864:	0afffff8 	beq	800984c <memmove+0x40>
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
 8009868:	e2411001 	sub	r1, r1, #1
 800986c:	e0832002 	add	r2, r3, r2
        {
          *dst++ = *src++;
 8009870:	e5f1c001 	ldrb	ip, [r1, #1]!
 8009874:	e4c3c001 	strb	ip, [r3], #1
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 8009878:	e1530002 	cmp	r3, r2
 800987c:	1afffffb 	bne	8009870 <memmove+0x64>
 8009880:	eafffff1 	b	800984c <memmove+0x40>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 8009884:	e1813000 	orr	r3, r1, r0
 8009888:	e3130003 	tst	r3, #3
 800988c:	1a000027 	bne	8009930 <memmove+0x124>
 8009890:	e1a0c001 	mov	ip, r1
 8009894:	e1a03000 	mov	r3, r0
 8009898:	e1a04002 	mov	r4, r2
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
 800989c:	e59c5000 	ldr	r5, [ip]
 80098a0:	e5835000 	str	r5, [r3]
              *aligned_dst++ = *aligned_src++;
 80098a4:	e59c5004 	ldr	r5, [ip, #4]
 80098a8:	e5835004 	str	r5, [r3, #4]
              *aligned_dst++ = *aligned_src++;
 80098ac:	e59c5008 	ldr	r5, [ip, #8]
 80098b0:	e5835008 	str	r5, [r3, #8]
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
 80098b4:	e2444010 	sub	r4, r4, #16
          while (length >= BIGBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
 80098b8:	e59c500c 	ldr	r5, [ip, #12]
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 80098bc:	e354000f 	cmp	r4, #15
            {
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
 80098c0:	e583500c 	str	r5, [r3, #12]
 80098c4:	e28cc010 	add	ip, ip, #16
 80098c8:	e2833010 	add	r3, r3, #16
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 80098cc:	8afffff2 	bhi	800989c <memmove+0x90>
 80098d0:	e2423010 	sub	r3, r2, #16
 80098d4:	e3c3300f 	bic	r3, r3, #15
 80098d8:	e202c00f 	and	ip, r2, #15
 80098dc:	e2833010 	add	r3, r3, #16
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 80098e0:	e35c0003 	cmp	ip, #3
 80098e4:	e0811003 	add	r1, r1, r3
 80098e8:	e0803003 	add	r3, r0, r3
 80098ec:	9a000011 	bls	8009938 <memmove+0x12c>
 80098f0:	e24cc004 	sub	ip, ip, #4
 80098f4:	e1a0712c 	lsr	r7, ip, #2
 80098f8:	e0816107 	add	r6, r1, r7, lsl #2
 80098fc:	e2866004 	add	r6, r6, #4
 8009900:	e1a0c001 	mov	ip, r1
          while (length >= BIGBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
              *aligned_dst++ = *aligned_src++;
 8009904:	e1a04003 	mov	r4, r3
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
            {
              *aligned_dst++ = *aligned_src++;
 8009908:	e49c5004 	ldr	r5, [ip], #4
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 800990c:	e15c0006 	cmp	ip, r6
            {
              *aligned_dst++ = *aligned_src++;
 8009910:	e4845004 	str	r5, [r4], #4
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 8009914:	1afffffb 	bne	8009908 <memmove+0xfc>
 8009918:	e287c001 	add	ip, r7, #1
 800991c:	e1a0c10c 	lsl	ip, ip, #2
            {
              *aligned_dst++ = *aligned_src++;
 8009920:	e081100c 	add	r1, r1, ip
 8009924:	e083300c 	add	r3, r3, ip
 8009928:	e2022003 	and	r2, r2, #3
 800992c:	eaffffcb 	b	8009860 <memmove+0x54>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 8009930:	e1a03000 	mov	r3, r0
 8009934:	eaffffcb 	b	8009868 <memmove+0x5c>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 8009938:	e1a0200c 	mov	r2, ip
 800993c:	eaffffc7 	b	8009860 <memmove+0x54>

08009940 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 8009940:	e3100003 	tst	r0, #3
_PTR
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 8009944:	e92d0030 	push	{r4, r5}
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 8009948:	e1a03000 	mov	r3, r0
 800994c:	0a000037 	beq	8009a30 <memset+0xf0>
    {
      if (n--)
 8009950:	e3520000 	cmp	r2, #0
 8009954:	e2422001 	sub	r2, r2, #1
 8009958:	0a000032 	beq	8009a28 <memset+0xe8>
 800995c:	e20140ff 	and	r4, r1, #255	; 0xff
 8009960:	ea000002 	b	8009970 <memset+0x30>
 8009964:	e3520000 	cmp	r2, #0
 8009968:	e2422001 	sub	r2, r2, #1
 800996c:	0a00002d 	beq	8009a28 <memset+0xe8>
        *s++ = (char) c;
 8009970:	e4c34001 	strb	r4, [r3], #1
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 8009974:	e3130003 	tst	r3, #3
    {
      if (n--)
        *s++ = (char) c;
 8009978:	e1a0c003 	mov	ip, r3
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 800997c:	1afffff8 	bne	8009964 <memset+0x24>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 8009980:	e3520003 	cmp	r2, #3
 8009984:	9a000020 	bls	8009a0c <memset+0xcc>

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 8009988:	e20140ff 	and	r4, r1, #255	; 0xff
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 800998c:	e352000f 	cmp	r2, #15
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 8009990:	e1844404 	orr	r4, r4, r4, lsl #8
      buffer |= (buffer << 16);
 8009994:	e1844804 	orr	r4, r4, r4, lsl #16
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 8009998:	81a0300c 	movhi	r3, ip
 800999c:	81a05002 	movhi	r5, r2
 80099a0:	9a00000e 	bls	80099e0 <memset+0xa0>
        {
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
 80099a4:	e2455010 	sub	r5, r5, #16
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 80099a8:	e355000f 	cmp	r5, #15
        {
          *aligned_addr++ = buffer;
 80099ac:	e5834000 	str	r4, [r3]
          *aligned_addr++ = buffer;
 80099b0:	e5834004 	str	r4, [r3, #4]
          *aligned_addr++ = buffer;
 80099b4:	e5834008 	str	r4, [r3, #8]
          *aligned_addr++ = buffer;
 80099b8:	e583400c 	str	r4, [r3, #12]
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
 80099bc:	e2833010 	add	r3, r3, #16
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 80099c0:	8afffff7 	bhi	80099a4 <memset+0x64>
 80099c4:	e2423010 	sub	r3, r2, #16
 80099c8:	e3c3300f 	bic	r3, r3, #15
 80099cc:	e202200f 	and	r2, r2, #15
 80099d0:	e2833010 	add	r3, r3, #16
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 80099d4:	e3520003 	cmp	r2, #3
 80099d8:	e08cc003 	add	ip, ip, r3
 80099dc:	9a00000a 	bls	8009a0c <memset+0xcc>
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 80099e0:	e1a0500c 	mov	r5, ip
 80099e4:	e1a03002 	mov	r3, r2
        }

      while (n >= LBLOCKSIZE)
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
 80099e8:	e2433004 	sub	r3, r3, #4
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 80099ec:	e3530003 	cmp	r3, #3
        {
          *aligned_addr++ = buffer;
 80099f0:	e4854004 	str	r4, [r5], #4
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 80099f4:	8afffffb 	bhi	80099e8 <memset+0xa8>
 80099f8:	e2423004 	sub	r3, r2, #4
 80099fc:	e3c33003 	bic	r3, r3, #3
 8009a00:	e2833004 	add	r3, r3, #4
        {
          *aligned_addr++ = buffer;
 8009a04:	e08cc003 	add	ip, ip, r3
 8009a08:	e2022003 	and	r2, r2, #3
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8009a0c:	e3520000 	cmp	r2, #0
 8009a10:	120110ff 	andne	r1, r1, #255	; 0xff
 8009a14:	108c2002 	addne	r2, ip, r2
 8009a18:	0a000002 	beq	8009a28 <memset+0xe8>
    *s++ = (char) c;
 8009a1c:	e4cc1001 	strb	r1, [ip], #1
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8009a20:	e15c0002 	cmp	ip, r2
 8009a24:	1afffffc 	bne	8009a1c <memset+0xdc>
    *s++ = (char) c;

  return m;
}
 8009a28:	e8bd0030 	pop	{r4, r5}
 8009a2c:	e12fff1e 	bx	lr
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 8009a30:	e1a0c000 	mov	ip, r0
 8009a34:	eaffffd1 	b	8009980 <memset+0x40>

08009a38 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 8009a38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 8009a3c:	e2514000 	subs	r4, r1, #0
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 8009a40:	e24dd00c 	sub	sp, sp, #12
 8009a44:	e1a06002 	mov	r6, r2
 8009a48:	e1a0a000 	mov	sl, r0
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 8009a4c:	0a0000d1 	beq	8009d98 <_realloc_r+0x360>

  MALLOC_LOCK;
 8009a50:	ebfff725 	bl	80076ec <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);


  nb = request2size(bytes);
 8009a54:	e286500b 	add	r5, r6, #11
 8009a58:	e3550016 	cmp	r5, #22
 8009a5c:	83c55007 	bichi	r5, r5, #7
 8009a60:	93a01010 	movls	r1, #16
 8009a64:	81a0cfa5 	lsrhi	ip, r5, #31
 8009a68:	91a05001 	movls	r5, r1
 8009a6c:	93a0c000 	movls	ip, #0
  if (oldmem == 0) return mALLOc(RCALL bytes);

  MALLOC_LOCK;

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
 8009a70:	e5143004 	ldr	r3, [r4, #-4]
 8009a74:	81a01005 	movhi	r1, r5


  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 8009a78:	e1550006 	cmp	r5, r6
 8009a7c:	338cc001 	orrcc	ip, ip, #1
 8009a80:	e35c0000 	cmp	ip, #0
  if (oldmem == 0) return mALLOc(RCALL bytes);

  MALLOC_LOCK;

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
 8009a84:	e3c37003 	bic	r7, r3, #3
  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
  {
    RERRNO = ENOMEM;
 8009a88:	13a0300c 	movne	r3, #12
  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);

  MALLOC_LOCK;

  newp    = oldp    = mem2chunk(oldmem);
 8009a8c:	e2442008 	sub	r2, r4, #8
  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
  {
    RERRNO = ENOMEM;
 8009a90:	158a3000 	strne	r3, [sl]
    return 0;
 8009a94:	13a06000 	movne	r6, #0


  nb = request2size(bytes);

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 8009a98:	1a00000f 	bne	8009adc <_realloc_r+0xa4>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 8009a9c:	e1570001 	cmp	r7, r1
 8009aa0:	ba000011 	blt	8009aec <_realloc_r+0xb4>
  if (oldmem == 0) return mALLOc(RCALL bytes);

  MALLOC_LOCK;

  newp    = oldp    = mem2chunk(oldmem);
  newsize = oldsize = chunksize(oldp);
 8009aa4:	e1a08007 	mov	r8, r7
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 8009aa8:	e0650008 	rsb	r0, r5, r8

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 8009aac:	e350000f 	cmp	r0, #15
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
 8009ab0:	e2033001 	and	r3, r3, #1

 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 8009ab4:	8a00008a 	bhi	8009ce4 <_realloc_r+0x2ac>
    set_inuse_bit_at_offset(remainder, remainder_size);
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
  }
  else
  {
    set_head_size(newp, newsize);
 8009ab8:	e1833008 	orr	r3, r3, r8
 8009abc:	e5823004 	str	r3, [r2, #4]
    set_inuse_bit_at_offset(newp, newsize);
 8009ac0:	e0822008 	add	r2, r2, r8
 8009ac4:	e5923004 	ldr	r3, [r2, #4]
 8009ac8:	e3833001 	orr	r3, r3, #1
 8009acc:	e5823004 	str	r3, [r2, #4]
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 8009ad0:	e1a0000a 	mov	r0, sl
 8009ad4:	ebfff705 	bl	80076f0 <__malloc_unlock>
  return chunk2mem(newp);
 8009ad8:	e1a06004 	mov	r6, r4

#endif /* MALLOC_PROVIDED */
}
 8009adc:	e1a00006 	mov	r0, r6
 8009ae0:	e28dd00c 	add	sp, sp, #12
 8009ae4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	e12fff1e 	bx	lr
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next)) 
 8009aec:	e59fb498 	ldr	fp, [pc, #1176]	; 8009f8c <_realloc_r+0x554>
 8009af0:	e59be008 	ldr	lr, [fp, #8]
  if ((long)(oldsize) < (long)(nb))  
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 8009af4:	e0820007 	add	r0, r2, r7
    if (next == top || !inuse(next)) 
 8009af8:	e15e0000 	cmp	lr, r0
 8009afc:	0a0000a9 	beq	8009da8 <_realloc_r+0x370>
 8009b00:	e5908004 	ldr	r8, [r0, #4]
 8009b04:	e3c89001 	bic	r9, r8, #1
 8009b08:	e0809009 	add	r9, r0, r9
 8009b0c:	e5999004 	ldr	r9, [r9, #4]
 8009b10:	e3190001 	tst	r9, #1
        goto split;
      }
    }
    else
    {
      next = 0;
 8009b14:	11a0000c 	movne	r0, ip
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next)) 
 8009b18:	0a00003b 	beq	8009c0c <_realloc_r+0x1d4>
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 8009b1c:	e3130001 	tst	r3, #1
 8009b20:	1a00007c 	bne	8009d18 <_realloc_r+0x2e0>
    {
      prev = prev_chunk(oldp);
 8009b24:	e5149008 	ldr	r9, [r4, #-8]
 8009b28:	e0699002 	rsb	r9, r9, r2
      prevsize = chunksize(prev);
 8009b2c:	e5993004 	ldr	r3, [r9, #4]

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 8009b30:	e3500000 	cmp	r0, #0
    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
    {
      prev = prev_chunk(oldp);
      prevsize = chunksize(prev);
 8009b34:	e3c33003 	bic	r3, r3, #3
      if (next != 0)
      {
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 8009b38:	e0833007 	add	r3, r3, r7
      prev = prev_chunk(oldp);
      prevsize = chunksize(prev);

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 8009b3c:	0a00003b 	beq	8009c30 <_realloc_r+0x1f8>
      {
        /* into top */
        if (next == top)
 8009b40:	e150000e 	cmp	r0, lr
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 8009b44:	e08c8003 	add	r8, ip, r3
      /* try forward + backward first to save a later consolidation */

      if (next != 0)
      {
        /* into top */
        if (next == top)
 8009b48:	0a0000cb 	beq	8009e7c <_realloc_r+0x444>
            return newmem;
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 8009b4c:	e1580001 	cmp	r8, r1
 8009b50:	ba000036 	blt	8009c30 <_realloc_r+0x1f8>
        {
          unlink(next, bck, fwd);
 8009b54:	e2802008 	add	r2, r0, #8
 8009b58:	e892000c 	ldm	r2, {r2, r3}
 8009b5c:	e5832008 	str	r2, [r3, #8]
 8009b60:	e582300c 	str	r3, [r2, #12]
          unlink(prev, bck, fwd);
 8009b64:	e1a06009 	mov	r6, r9
 8009b68:	e599300c 	ldr	r3, [r9, #12]
 8009b6c:	e5b61008 	ldr	r1, [r6, #8]!
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009b70:	e2472004 	sub	r2, r7, #4
 8009b74:	e3520024 	cmp	r2, #36	; 0x24

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
        {
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
 8009b78:	e581300c 	str	r3, [r1, #12]
 8009b7c:	e5831008 	str	r1, [r3, #8]
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009b80:	8a0000f6 	bhi	8009f60 <_realloc_r+0x528>
 8009b84:	e3520013 	cmp	r2, #19
 8009b88:	91a03006 	movls	r3, r6
 8009b8c:	9a000014 	bls	8009be4 <_realloc_r+0x1ac>
 8009b90:	e5943000 	ldr	r3, [r4]
 8009b94:	e5893008 	str	r3, [r9, #8]
 8009b98:	e5943004 	ldr	r3, [r4, #4]
 8009b9c:	e352001b 	cmp	r2, #27
 8009ba0:	e589300c 	str	r3, [r9, #12]
 8009ba4:	92844008 	addls	r4, r4, #8
 8009ba8:	92893010 	addls	r3, r9, #16
 8009bac:	9a00000c 	bls	8009be4 <_realloc_r+0x1ac>
 8009bb0:	e5943008 	ldr	r3, [r4, #8]
 8009bb4:	e5893010 	str	r3, [r9, #16]
 8009bb8:	e594300c 	ldr	r3, [r4, #12]
 8009bbc:	e5893014 	str	r3, [r9, #20]
 8009bc0:	e3520024 	cmp	r2, #36	; 0x24
 8009bc4:	05943010 	ldreq	r3, [r4, #16]
 8009bc8:	05893018 	streq	r3, [r9, #24]
 8009bcc:	05943014 	ldreq	r3, [r4, #20]
 8009bd0:	12844010 	addne	r4, r4, #16
 8009bd4:	0589301c 	streq	r3, [r9, #28]
 8009bd8:	12893018 	addne	r3, r9, #24
 8009bdc:	02844018 	addeq	r4, r4, #24
 8009be0:	02893020 	addeq	r3, r9, #32
 8009be4:	e5942000 	ldr	r2, [r4]
 8009be8:	e5832000 	str	r2, [r3]
 8009bec:	e5942004 	ldr	r2, [r4, #4]
 8009bf0:	e5832004 	str	r2, [r3, #4]
 8009bf4:	e5942008 	ldr	r2, [r4, #8]
 8009bf8:	e5832008 	str	r2, [r3, #8]
 8009bfc:	e1a04006 	mov	r4, r6
 8009c00:	e5993004 	ldr	r3, [r9, #4]
 8009c04:	e1a02009 	mov	r2, r9
 8009c08:	eaffffa6 	b	8009aa8 <_realloc_r+0x70>
    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);
 8009c0c:	e3c8c003 	bic	ip, r8, #3
          return chunk2mem(oldp);
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 8009c10:	e08c8007 	add	r8, ip, r7
 8009c14:	e1580001 	cmp	r8, r1
 8009c18:	baffffbf 	blt	8009b1c <_realloc_r+0xe4>
      { 
        unlink(next, bck, fwd);
 8009c1c:	e2800008 	add	r0, r0, #8
 8009c20:	e8900003 	ldm	r0, {r0, r1}
 8009c24:	e580100c 	str	r1, [r0, #12]
 8009c28:	e5810008 	str	r0, [r1, #8]
        newsize  += nextsize;
        goto split;
 8009c2c:	eaffff9d 	b	8009aa8 <_realloc_r+0x70>
          goto split;
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 8009c30:	e1530001 	cmp	r3, r1
 8009c34:	ba000037 	blt	8009d18 <_realloc_r+0x2e0>
      {
        unlink(prev, bck, fwd);
 8009c38:	e1a06009 	mov	r6, r9
 8009c3c:	e5b60008 	ldr	r0, [r6, #8]!
 8009c40:	e599100c 	ldr	r1, [r9, #12]
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009c44:	e2472004 	sub	r2, r7, #4
 8009c48:	e3520024 	cmp	r2, #36	; 0x24
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
 8009c4c:	e580100c 	str	r1, [r0, #12]
 8009c50:	e5810008 	str	r0, [r1, #8]
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009c54:	8a00007d 	bhi	8009e50 <_realloc_r+0x418>
 8009c58:	e3520013 	cmp	r2, #19
 8009c5c:	91a02006 	movls	r2, r6
 8009c60:	9a000014 	bls	8009cb8 <_realloc_r+0x280>
 8009c64:	e5941000 	ldr	r1, [r4]
 8009c68:	e5891008 	str	r1, [r9, #8]
 8009c6c:	e5941004 	ldr	r1, [r4, #4]
 8009c70:	e352001b 	cmp	r2, #27
 8009c74:	e589100c 	str	r1, [r9, #12]
 8009c78:	92844008 	addls	r4, r4, #8
 8009c7c:	92892010 	addls	r2, r9, #16
 8009c80:	9a00000c 	bls	8009cb8 <_realloc_r+0x280>
 8009c84:	e5941008 	ldr	r1, [r4, #8]
 8009c88:	e5891010 	str	r1, [r9, #16]
 8009c8c:	e594100c 	ldr	r1, [r4, #12]
 8009c90:	e5891014 	str	r1, [r9, #20]
 8009c94:	e3520024 	cmp	r2, #36	; 0x24
 8009c98:	05942010 	ldreq	r2, [r4, #16]
 8009c9c:	05892018 	streq	r2, [r9, #24]
 8009ca0:	05942014 	ldreq	r2, [r4, #20]
 8009ca4:	12844010 	addne	r4, r4, #16
 8009ca8:	0589201c 	streq	r2, [r9, #28]
 8009cac:	12892018 	addne	r2, r9, #24
 8009cb0:	02844018 	addeq	r4, r4, #24
 8009cb4:	02892020 	addeq	r2, r9, #32
 8009cb8:	e5941000 	ldr	r1, [r4]
 8009cbc:	e5821000 	str	r1, [r2]
 8009cc0:	e5941004 	ldr	r1, [r4, #4]
 8009cc4:	e5821004 	str	r1, [r2, #4]
 8009cc8:	e5941008 	ldr	r1, [r4, #8]
 8009ccc:	e5821008 	str	r1, [r2, #8]
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
 8009cd0:	e1a08003 	mov	r8, r3
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009cd4:	e1a04006 	mov	r4, r6
 8009cd8:	e5993004 	ldr	r3, [r9, #4]
 8009cdc:	e1a02009 	mov	r2, r9
 8009ce0:	eaffff70 	b	8009aa8 <_realloc_r+0x70>

  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
 8009ce4:	e0821005 	add	r1, r2, r5
    set_head_size(newp, nb);
 8009ce8:	e1833005 	orr	r3, r3, r5
    set_head(remainder, remainder_size | PREV_INUSE);
 8009cec:	e380c001 	orr	ip, r0, #1
  remainder_size = long_sub_size_t(newsize, nb);

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
  {
    remainder = chunk_at_offset(newp, nb);
    set_head_size(newp, nb);
 8009cf0:	e5823004 	str	r3, [r2, #4]
    set_head(remainder, remainder_size | PREV_INUSE);
 8009cf4:	e581c004 	str	ip, [r1, #4]
    set_inuse_bit_at_offset(remainder, remainder_size);
 8009cf8:	e0810000 	add	r0, r1, r0
 8009cfc:	e5903004 	ldr	r3, [r0, #4]
 8009d00:	e3833001 	orr	r3, r3, #1
 8009d04:	e5803004 	str	r3, [r0, #4]
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 8009d08:	e2811008 	add	r1, r1, #8
 8009d0c:	e1a0000a 	mov	r0, sl
 8009d10:	ebfff35b 	bl	8006a84 <_free_r>
 8009d14:	eaffff6d 	b	8009ad0 <_realloc_r+0x98>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 8009d18:	e1a01006 	mov	r1, r6
 8009d1c:	e1a0000a 	mov	r0, sl
 8009d20:	e58d2004 	str	r2, [sp, #4]
 8009d24:	ebfff424 	bl	8006dbc <_malloc_r>

    if (newmem == 0)  /* propagate failure */
 8009d28:	e2506000 	subs	r6, r0, #0
 8009d2c:	e59d2004 	ldr	r2, [sp, #4]
 8009d30:	0a000015 	beq	8009d8c <_realloc_r+0x354>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 8009d34:	e5143004 	ldr	r3, [r4, #-4]
 8009d38:	e3c31001 	bic	r1, r3, #1
 8009d3c:	e0821001 	add	r1, r2, r1
 8009d40:	e246c008 	sub	ip, r6, #8
 8009d44:	e15c0001 	cmp	ip, r1
 8009d48:	0a000080 	beq	8009f50 <_realloc_r+0x518>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009d4c:	e2472004 	sub	r2, r7, #4
 8009d50:	e3520024 	cmp	r2, #36	; 0x24
 8009d54:	8a000045 	bhi	8009e70 <_realloc_r+0x438>
 8009d58:	e3520013 	cmp	r2, #19
 8009d5c:	91a03006 	movls	r3, r6
 8009d60:	91a02004 	movls	r2, r4
 8009d64:	8a000023 	bhi	8009df8 <_realloc_r+0x3c0>
 8009d68:	e5921000 	ldr	r1, [r2]
 8009d6c:	e5831000 	str	r1, [r3]
 8009d70:	e5921004 	ldr	r1, [r2, #4]
 8009d74:	e5831004 	str	r1, [r3, #4]
 8009d78:	e5922008 	ldr	r2, [r2, #8]
 8009d7c:	e5832008 	str	r2, [r3, #8]
    fREe(RCALL oldmem);
 8009d80:	e1a01004 	mov	r1, r4
 8009d84:	e1a0000a 	mov	r0, sl
 8009d88:	ebfff33d 	bl	8006a84 <_free_r>
    MALLOC_UNLOCK;
 8009d8c:	e1a0000a 	mov	r0, sl
 8009d90:	ebfff656 	bl	80076f0 <__malloc_unlock>
    return newmem;
 8009d94:	eaffff50 	b	8009adc <_realloc_r+0xa4>
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 8009d98:	e1a01002 	mov	r1, r2
 8009d9c:	ebfff406 	bl	8006dbc <_malloc_r>
 8009da0:	e1a06000 	mov	r6, r0
 8009da4:	eaffff4c 	b	8009adc <_realloc_r+0xa4>
    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);
 8009da8:	e59ec004 	ldr	ip, [lr, #4]
 8009dac:	e3ccc003 	bic	ip, ip, #3

      /* Forward into top only if a remainder */
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 8009db0:	e08c0007 	add	r0, ip, r7
 8009db4:	e2858010 	add	r8, r5, #16
 8009db8:	e1500008 	cmp	r0, r8
 8009dbc:	b1a0000e 	movlt	r0, lr
 8009dc0:	baffff55 	blt	8009b1c <_realloc_r+0xe4>
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
          set_head(top, (newsize - nb) | PREV_INUSE);
 8009dc4:	e0653000 	rsb	r3, r5, r0
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
 8009dc8:	e0822005 	add	r2, r2, r5
          set_head(top, (newsize - nb) | PREV_INUSE);
 8009dcc:	e3833001 	orr	r3, r3, #1
 8009dd0:	e5823004 	str	r3, [r2, #4]
          set_head_size(oldp, nb);
 8009dd4:	e5143004 	ldr	r3, [r4, #-4]
 8009dd8:	e2033001 	and	r3, r3, #1
 8009ddc:	e1855003 	orr	r5, r5, r3
	  MALLOC_UNLOCK;
 8009de0:	e1a0000a 	mov	r0, sl
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
          set_head(top, (newsize - nb) | PREV_INUSE);
          set_head_size(oldp, nb);
 8009de4:	e5045004 	str	r5, [r4, #-4]
      if (next == top)
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
 8009de8:	e58b2008 	str	r2, [fp, #8]
          set_head(top, (newsize - nb) | PREV_INUSE);
          set_head_size(oldp, nb);
	  MALLOC_UNLOCK;
          return chunk2mem(oldp);
 8009dec:	e1a06004 	mov	r6, r4
        {
          newsize += nextsize;
          top = chunk_at_offset(oldp, nb);
          set_head(top, (newsize - nb) | PREV_INUSE);
          set_head_size(oldp, nb);
	  MALLOC_UNLOCK;
 8009df0:	ebfff63e 	bl	80076f0 <__malloc_unlock>
          return chunk2mem(oldp);
 8009df4:	eaffff38 	b	8009adc <_realloc_r+0xa4>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009df8:	e5943000 	ldr	r3, [r4]
 8009dfc:	e5863000 	str	r3, [r6]
 8009e00:	e5943004 	ldr	r3, [r4, #4]
 8009e04:	e352001b 	cmp	r2, #27
 8009e08:	e5863004 	str	r3, [r6, #4]
 8009e0c:	92842008 	addls	r2, r4, #8
 8009e10:	92863008 	addls	r3, r6, #8
 8009e14:	9affffd3 	bls	8009d68 <_realloc_r+0x330>
 8009e18:	e5943008 	ldr	r3, [r4, #8]
 8009e1c:	e5863008 	str	r3, [r6, #8]
 8009e20:	e594300c 	ldr	r3, [r4, #12]
 8009e24:	e586300c 	str	r3, [r6, #12]
 8009e28:	e3520024 	cmp	r2, #36	; 0x24
 8009e2c:	05943010 	ldreq	r3, [r4, #16]
 8009e30:	05863010 	streq	r3, [r6, #16]
 8009e34:	05942014 	ldreq	r2, [r4, #20]
 8009e38:	12863010 	addne	r3, r6, #16
 8009e3c:	05862014 	streq	r2, [r6, #20]
 8009e40:	12842010 	addne	r2, r4, #16
 8009e44:	02863018 	addeq	r3, r6, #24
 8009e48:	02842018 	addeq	r2, r4, #24
 8009e4c:	eaffffc5 	b	8009d68 <_realloc_r+0x330>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009e50:	e1a01004 	mov	r1, r4
 8009e54:	e1a00006 	mov	r0, r6
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
 8009e58:	e1a08003 	mov	r8, r3
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009e5c:	e1a04006 	mov	r4, r6
 8009e60:	ebfffe69 	bl	800980c <memmove>
 8009e64:	e5993004 	ldr	r3, [r9, #4]
 8009e68:	e1a02009 	mov	r2, r9
 8009e6c:	eaffff0d 	b	8009aa8 <_realloc_r+0x70>
      newp = oldp;
      goto split;
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009e70:	e1a01004 	mov	r1, r4
 8009e74:	ebfffe64 	bl	800980c <memmove>
 8009e78:	eaffffc0 	b	8009d80 <_realloc_r+0x348>
      if (next != 0)
      {
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 8009e7c:	e2850010 	add	r0, r5, #16
 8009e80:	e1580000 	cmp	r8, r0
 8009e84:	baffff69 	blt	8009c30 <_realloc_r+0x1f8>
          {
            unlink(prev, bck, fwd);
 8009e88:	e1a06009 	mov	r6, r9
 8009e8c:	e5b61008 	ldr	r1, [r6, #8]!
 8009e90:	e599300c 	ldr	r3, [r9, #12]
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009e94:	e2472004 	sub	r2, r7, #4
 8009e98:	e3520024 	cmp	r2, #36	; 0x24
        /* into top */
        if (next == top)
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
          {
            unlink(prev, bck, fwd);
 8009e9c:	e581300c 	str	r3, [r1, #12]
 8009ea0:	e5831008 	str	r1, [r3, #8]
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009ea4:	8a000034 	bhi	8009f7c <_realloc_r+0x544>
 8009ea8:	e3520013 	cmp	r2, #19
 8009eac:	91a03006 	movls	r3, r6
 8009eb0:	9a000014 	bls	8009f08 <_realloc_r+0x4d0>
 8009eb4:	e5943000 	ldr	r3, [r4]
 8009eb8:	e5893008 	str	r3, [r9, #8]
 8009ebc:	e5943004 	ldr	r3, [r4, #4]
 8009ec0:	e352001b 	cmp	r2, #27
 8009ec4:	e589300c 	str	r3, [r9, #12]
 8009ec8:	92844008 	addls	r4, r4, #8
 8009ecc:	92893010 	addls	r3, r9, #16
 8009ed0:	9a00000c 	bls	8009f08 <_realloc_r+0x4d0>
 8009ed4:	e5943008 	ldr	r3, [r4, #8]
 8009ed8:	e5893010 	str	r3, [r9, #16]
 8009edc:	e594300c 	ldr	r3, [r4, #12]
 8009ee0:	e5893014 	str	r3, [r9, #20]
 8009ee4:	e3520024 	cmp	r2, #36	; 0x24
 8009ee8:	05943010 	ldreq	r3, [r4, #16]
 8009eec:	05893018 	streq	r3, [r9, #24]
 8009ef0:	05943014 	ldreq	r3, [r4, #20]
 8009ef4:	12844010 	addne	r4, r4, #16
 8009ef8:	0589301c 	streq	r3, [r9, #28]
 8009efc:	12893018 	addne	r3, r9, #24
 8009f00:	02844018 	addeq	r4, r4, #24
 8009f04:	02893020 	addeq	r3, r9, #32
 8009f08:	e5942000 	ldr	r2, [r4]
 8009f0c:	e5832000 	str	r2, [r3]
 8009f10:	e5942004 	ldr	r2, [r4, #4]
 8009f14:	e5832004 	str	r2, [r3, #4]
 8009f18:	e5942008 	ldr	r2, [r4, #8]
 8009f1c:	e5832008 	str	r2, [r3, #8]
            top = chunk_at_offset(newp, nb);
            set_head(top, (newsize - nb) | PREV_INUSE);
 8009f20:	e0652008 	rsb	r2, r5, r8
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
 8009f24:	e0893005 	add	r3, r9, r5
            set_head(top, (newsize - nb) | PREV_INUSE);
 8009f28:	e3822001 	orr	r2, r2, #1
 8009f2c:	e5832004 	str	r2, [r3, #4]
            set_head_size(newp, nb);
 8009f30:	e5992004 	ldr	r2, [r9, #4]
 8009f34:	e2022001 	and	r2, r2, #1
 8009f38:	e1855002 	orr	r5, r5, r2
	    MALLOC_UNLOCK;
 8009f3c:	e1a0000a 	mov	r0, sl
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
            set_head(top, (newsize - nb) | PREV_INUSE);
            set_head_size(newp, nb);
 8009f40:	e5895004 	str	r5, [r9, #4]
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
            top = chunk_at_offset(newp, nb);
 8009f44:	e58b3008 	str	r3, [fp, #8]
            set_head(top, (newsize - nb) | PREV_INUSE);
            set_head_size(newp, nb);
	    MALLOC_UNLOCK;
 8009f48:	ebfff5e8 	bl	80076f0 <__malloc_unlock>
            return newmem;
 8009f4c:	eafffee2 	b	8009adc <_realloc_r+0xa4>
    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
    {
      newsize += chunksize(newp);
 8009f50:	e5168004 	ldr	r8, [r6, #-4]
 8009f54:	e3c88003 	bic	r8, r8, #3
 8009f58:	e0888007 	add	r8, r8, r7
      newp = oldp;
      goto split;
 8009f5c:	eafffed1 	b	8009aa8 <_realloc_r+0x70>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009f60:	e1a01004 	mov	r1, r4
 8009f64:	e1a00006 	mov	r0, r6
 8009f68:	ebfffe27 	bl	800980c <memmove>
 8009f6c:	e1a04006 	mov	r4, r6
 8009f70:	e5993004 	ldr	r3, [r9, #4]
 8009f74:	e1a02009 	mov	r2, r9
 8009f78:	eafffeca 	b	8009aa8 <_realloc_r+0x70>
          {
            unlink(prev, bck, fwd);
            newp = prev;
            newsize += prevsize + nextsize;
            newmem = chunk2mem(newp);
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 8009f7c:	e1a01004 	mov	r1, r4
 8009f80:	e1a00006 	mov	r0, r6
 8009f84:	ebfffe20 	bl	800980c <memmove>
 8009f88:	eaffffe4 	b	8009f20 <_realloc_r+0x4e8>
 8009f8c:	2000054c 	.word	0x2000054c

08009f90 <__aeabi_uidiv>:
 8009f90:	e2512001 	subs	r2, r1, #1
 8009f94:	012fff1e 	bxeq	lr
 8009f98:	3a000036 	bcc	800a078 <__aeabi_uidiv+0xe8>
 8009f9c:	e1500001 	cmp	r0, r1
 8009fa0:	9a000022 	bls	800a030 <__aeabi_uidiv+0xa0>
 8009fa4:	e1110002 	tst	r1, r2
 8009fa8:	0a000023 	beq	800a03c <__aeabi_uidiv+0xac>
 8009fac:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8009fb0:	01a01181 	lsleq	r1, r1, #3
 8009fb4:	03a03008 	moveq	r3, #8
 8009fb8:	13a03001 	movne	r3, #1
 8009fbc:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8009fc0:	31510000 	cmpcc	r1, r0
 8009fc4:	31a01201 	lslcc	r1, r1, #4
 8009fc8:	31a03203 	lslcc	r3, r3, #4
 8009fcc:	3afffffa 	bcc	8009fbc <__aeabi_uidiv+0x2c>
 8009fd0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8009fd4:	31510000 	cmpcc	r1, r0
 8009fd8:	31a01081 	lslcc	r1, r1, #1
 8009fdc:	31a03083 	lslcc	r3, r3, #1
 8009fe0:	3afffffa 	bcc	8009fd0 <__aeabi_uidiv+0x40>
 8009fe4:	e3a02000 	mov	r2, #0
 8009fe8:	e1500001 	cmp	r0, r1
 8009fec:	20400001 	subcs	r0, r0, r1
 8009ff0:	21822003 	orrcs	r2, r2, r3
 8009ff4:	e15000a1 	cmp	r0, r1, lsr #1
 8009ff8:	204000a1 	subcs	r0, r0, r1, lsr #1
 8009ffc:	218220a3 	orrcs	r2, r2, r3, lsr #1
 800a000:	e1500121 	cmp	r0, r1, lsr #2
 800a004:	20400121 	subcs	r0, r0, r1, lsr #2
 800a008:	21822123 	orrcs	r2, r2, r3, lsr #2
 800a00c:	e15001a1 	cmp	r0, r1, lsr #3
 800a010:	204001a1 	subcs	r0, r0, r1, lsr #3
 800a014:	218221a3 	orrcs	r2, r2, r3, lsr #3
 800a018:	e3500000 	cmp	r0, #0
 800a01c:	11b03223 	lsrsne	r3, r3, #4
 800a020:	11a01221 	lsrne	r1, r1, #4
 800a024:	1affffef 	bne	8009fe8 <__aeabi_uidiv+0x58>
 800a028:	e1a00002 	mov	r0, r2
 800a02c:	e12fff1e 	bx	lr
 800a030:	03a00001 	moveq	r0, #1
 800a034:	13a00000 	movne	r0, #0
 800a038:	e12fff1e 	bx	lr
 800a03c:	e3510801 	cmp	r1, #65536	; 0x10000
 800a040:	21a01821 	lsrcs	r1, r1, #16
 800a044:	23a02010 	movcs	r2, #16
 800a048:	33a02000 	movcc	r2, #0
 800a04c:	e3510c01 	cmp	r1, #256	; 0x100
 800a050:	21a01421 	lsrcs	r1, r1, #8
 800a054:	22822008 	addcs	r2, r2, #8
 800a058:	e3510010 	cmp	r1, #16
 800a05c:	21a01221 	lsrcs	r1, r1, #4
 800a060:	22822004 	addcs	r2, r2, #4
 800a064:	e3510004 	cmp	r1, #4
 800a068:	82822003 	addhi	r2, r2, #3
 800a06c:	908220a1 	addls	r2, r2, r1, lsr #1
 800a070:	e1a00230 	lsr	r0, r0, r2
 800a074:	e12fff1e 	bx	lr
 800a078:	e12fff1f 	bx	pc
 800a07c:	e1a00000 	nop			; (mov r0, r0)
 800a080:	e3500000 	cmp	r0, #0
 800a084:	13e00000 	mvnne	r0, #0
 800a088:	ea000352 	b	800add8 <____aeabi_idiv0_from_arm>

0800a08c <__aeabi_uidivmod>:
 800a08c:	e3510000 	cmp	r1, #0
 800a090:	0afffff8 	beq	800a078 <__aeabi_uidiv+0xe8>
 800a094:	e92d4003 	push	{r0, r1, lr}
 800a098:	ebffffbc 	bl	8009f90 <__aeabi_uidiv>
 800a09c:	e8bd4006 	pop	{r1, r2, lr}
 800a0a0:	e0030092 	mul	r3, r2, r0
 800a0a4:	e0411003 	sub	r1, r1, r3
 800a0a8:	e12fff1e 	bx	lr

0800a0ac <__aeabi_idiv0>:
 800a0ac:	4770      	bx	lr
 800a0ae:	46c0      	nop			; (mov r8, r8)

0800a0b0 <__aeabi_drsub>:
 800a0b0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 800a0b4:	ea000000 	b	800a0bc <__adddf3>

0800a0b8 <__aeabi_dsub>:
 800a0b8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0800a0bc <__adddf3>:
 800a0bc:	e92d4030 	push	{r4, r5, lr}
 800a0c0:	e1a04081 	lsl	r4, r1, #1
 800a0c4:	e1a05083 	lsl	r5, r3, #1
 800a0c8:	e1340005 	teq	r4, r5
 800a0cc:	01300002 	teqeq	r0, r2
 800a0d0:	1194c000 	orrsne	ip, r4, r0
 800a0d4:	1195c002 	orrsne	ip, r5, r2
 800a0d8:	11f0cac4 	mvnsne	ip, r4, asr #21
 800a0dc:	11f0cac5 	mvnsne	ip, r5, asr #21
 800a0e0:	0a00008c 	beq	800a318 <__adddf3+0x25c>
 800a0e4:	e1a04aa4 	lsr	r4, r4, #21
 800a0e8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 800a0ec:	b2655000 	rsblt	r5, r5, #0
 800a0f0:	da000006 	ble	800a110 <__adddf3+0x54>
 800a0f4:	e0844005 	add	r4, r4, r5
 800a0f8:	e0202002 	eor	r2, r0, r2
 800a0fc:	e0213003 	eor	r3, r1, r3
 800a100:	e0220000 	eor	r0, r2, r0
 800a104:	e0231001 	eor	r1, r3, r1
 800a108:	e0202002 	eor	r2, r0, r2
 800a10c:	e0213003 	eor	r3, r1, r3
 800a110:	e3550036 	cmp	r5, #54	; 0x36
 800a114:	88bd4030 	pophi	{r4, r5, lr}
 800a118:	812fff1e 	bxhi	lr
 800a11c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 800a120:	e1a01601 	lsl	r1, r1, #12
 800a124:	e3a0c601 	mov	ip, #1048576	; 0x100000
 800a128:	e18c1621 	orr	r1, ip, r1, lsr #12
 800a12c:	0a000001 	beq	800a138 <__adddf3+0x7c>
 800a130:	e2700000 	rsbs	r0, r0, #0
 800a134:	e2e11000 	rsc	r1, r1, #0
 800a138:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 800a13c:	e1a03603 	lsl	r3, r3, #12
 800a140:	e18c3623 	orr	r3, ip, r3, lsr #12
 800a144:	0a000001 	beq	800a150 <__adddf3+0x94>
 800a148:	e2722000 	rsbs	r2, r2, #0
 800a14c:	e2e33000 	rsc	r3, r3, #0
 800a150:	e1340005 	teq	r4, r5
 800a154:	0a000069 	beq	800a300 <__adddf3+0x244>
 800a158:	e2444001 	sub	r4, r4, #1
 800a15c:	e275e020 	rsbs	lr, r5, #32
 800a160:	ba000005 	blt	800a17c <__adddf3+0xc0>
 800a164:	e1a0ce12 	lsl	ip, r2, lr
 800a168:	e0900532 	adds	r0, r0, r2, lsr r5
 800a16c:	e2a11000 	adc	r1, r1, #0
 800a170:	e0900e13 	adds	r0, r0, r3, lsl lr
 800a174:	e0b11553 	adcs	r1, r1, r3, asr r5
 800a178:	ea000006 	b	800a198 <__adddf3+0xdc>
 800a17c:	e2455020 	sub	r5, r5, #32
 800a180:	e28ee020 	add	lr, lr, #32
 800a184:	e3520001 	cmp	r2, #1
 800a188:	e1a0ce13 	lsl	ip, r3, lr
 800a18c:	238cc002 	orrcs	ip, ip, #2
 800a190:	e0900553 	adds	r0, r0, r3, asr r5
 800a194:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 800a198:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 800a19c:	5a000002 	bpl	800a1ac <__adddf3+0xf0>
 800a1a0:	e27cc000 	rsbs	ip, ip, #0
 800a1a4:	e2f00000 	rscs	r0, r0, #0
 800a1a8:	e2e11000 	rsc	r1, r1, #0
 800a1ac:	e3510601 	cmp	r1, #1048576	; 0x100000
 800a1b0:	3a00000f 	bcc	800a1f4 <__adddf3+0x138>
 800a1b4:	e3510602 	cmp	r1, #2097152	; 0x200000
 800a1b8:	3a000006 	bcc	800a1d8 <__adddf3+0x11c>
 800a1bc:	e1b010a1 	lsrs	r1, r1, #1
 800a1c0:	e1b00060 	rrxs	r0, r0
 800a1c4:	e1a0c06c 	rrx	ip, ip
 800a1c8:	e2844001 	add	r4, r4, #1
 800a1cc:	e1a02a84 	lsl	r2, r4, #21
 800a1d0:	e3720501 	cmn	r2, #4194304	; 0x400000
 800a1d4:	2a00006b 	bcs	800a388 <__adddf3+0x2cc>
 800a1d8:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 800a1dc:	01b0c0a0 	lsrseq	ip, r0, #1
 800a1e0:	e2b00000 	adcs	r0, r0, #0
 800a1e4:	e0a11a04 	adc	r1, r1, r4, lsl #20
 800a1e8:	e1811005 	orr	r1, r1, r5
 800a1ec:	e8bd4030 	pop	{r4, r5, lr}
 800a1f0:	e12fff1e 	bx	lr
 800a1f4:	e1b0c08c 	lsls	ip, ip, #1
 800a1f8:	e0b00000 	adcs	r0, r0, r0
 800a1fc:	e0a11001 	adc	r1, r1, r1
 800a200:	e3110601 	tst	r1, #1048576	; 0x100000
 800a204:	e2444001 	sub	r4, r4, #1
 800a208:	1afffff2 	bne	800a1d8 <__adddf3+0x11c>
 800a20c:	e3310000 	teq	r1, #0
 800a210:	13a03014 	movne	r3, #20
 800a214:	03a03034 	moveq	r3, #52	; 0x34
 800a218:	01a01000 	moveq	r1, r0
 800a21c:	03a00000 	moveq	r0, #0
 800a220:	e1a02001 	mov	r2, r1
 800a224:	e3520801 	cmp	r2, #65536	; 0x10000
 800a228:	21a02822 	lsrcs	r2, r2, #16
 800a22c:	22433010 	subcs	r3, r3, #16
 800a230:	e3520c01 	cmp	r2, #256	; 0x100
 800a234:	21a02422 	lsrcs	r2, r2, #8
 800a238:	22433008 	subcs	r3, r3, #8
 800a23c:	e3520010 	cmp	r2, #16
 800a240:	21a02222 	lsrcs	r2, r2, #4
 800a244:	22433004 	subcs	r3, r3, #4
 800a248:	e3520004 	cmp	r2, #4
 800a24c:	22433002 	subcs	r3, r3, #2
 800a250:	304330a2 	subcc	r3, r3, r2, lsr #1
 800a254:	e04331a2 	sub	r3, r3, r2, lsr #3
 800a258:	e2532020 	subs	r2, r3, #32
 800a25c:	aa000007 	bge	800a280 <__adddf3+0x1c4>
 800a260:	e292200c 	adds	r2, r2, #12
 800a264:	da000004 	ble	800a27c <__adddf3+0x1c0>
 800a268:	e282c014 	add	ip, r2, #20
 800a26c:	e262200c 	rsb	r2, r2, #12
 800a270:	e1a00c11 	lsl	r0, r1, ip
 800a274:	e1a01231 	lsr	r1, r1, r2
 800a278:	ea000004 	b	800a290 <__adddf3+0x1d4>
 800a27c:	e2822014 	add	r2, r2, #20
 800a280:	d262c020 	rsble	ip, r2, #32
 800a284:	e1a01211 	lsl	r1, r1, r2
 800a288:	d1811c30 	orrle	r1, r1, r0, lsr ip
 800a28c:	d1a00210 	lslle	r0, r0, r2
 800a290:	e0544003 	subs	r4, r4, r3
 800a294:	a0811a04 	addge	r1, r1, r4, lsl #20
 800a298:	a1811005 	orrge	r1, r1, r5
 800a29c:	a8bd4030 	popge	{r4, r5, lr}
 800a2a0:	a12fff1e 	bxge	lr
 800a2a4:	e1e04004 	mvn	r4, r4
 800a2a8:	e254401f 	subs	r4, r4, #31
 800a2ac:	aa00000f 	bge	800a2f0 <__adddf3+0x234>
 800a2b0:	e294400c 	adds	r4, r4, #12
 800a2b4:	ca000006 	bgt	800a2d4 <__adddf3+0x218>
 800a2b8:	e2844014 	add	r4, r4, #20
 800a2bc:	e2642020 	rsb	r2, r4, #32
 800a2c0:	e1a00430 	lsr	r0, r0, r4
 800a2c4:	e1800211 	orr	r0, r0, r1, lsl r2
 800a2c8:	e1851431 	orr	r1, r5, r1, lsr r4
 800a2cc:	e8bd4030 	pop	{r4, r5, lr}
 800a2d0:	e12fff1e 	bx	lr
 800a2d4:	e264400c 	rsb	r4, r4, #12
 800a2d8:	e2642020 	rsb	r2, r4, #32
 800a2dc:	e1a00230 	lsr	r0, r0, r2
 800a2e0:	e1800411 	orr	r0, r0, r1, lsl r4
 800a2e4:	e1a01005 	mov	r1, r5
 800a2e8:	e8bd4030 	pop	{r4, r5, lr}
 800a2ec:	e12fff1e 	bx	lr
 800a2f0:	e1a00431 	lsr	r0, r1, r4
 800a2f4:	e1a01005 	mov	r1, r5
 800a2f8:	e8bd4030 	pop	{r4, r5, lr}
 800a2fc:	e12fff1e 	bx	lr
 800a300:	e3340000 	teq	r4, #0
 800a304:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 800a308:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 800a30c:	02844001 	addeq	r4, r4, #1
 800a310:	12455001 	subne	r5, r5, #1
 800a314:	eaffff8f 	b	800a158 <__adddf3+0x9c>
 800a318:	e1f0cac4 	mvns	ip, r4, asr #21
 800a31c:	11f0cac5 	mvnsne	ip, r5, asr #21
 800a320:	0a00001d 	beq	800a39c <__adddf3+0x2e0>
 800a324:	e1340005 	teq	r4, r5
 800a328:	01300002 	teqeq	r0, r2
 800a32c:	0a000004 	beq	800a344 <__adddf3+0x288>
 800a330:	e194c000 	orrs	ip, r4, r0
 800a334:	01a01003 	moveq	r1, r3
 800a338:	01a00002 	moveq	r0, r2
 800a33c:	e8bd4030 	pop	{r4, r5, lr}
 800a340:	e12fff1e 	bx	lr
 800a344:	e1310003 	teq	r1, r3
 800a348:	13a01000 	movne	r1, #0
 800a34c:	13a00000 	movne	r0, #0
 800a350:	18bd4030 	popne	{r4, r5, lr}
 800a354:	112fff1e 	bxne	lr
 800a358:	e1b0caa4 	lsrs	ip, r4, #21
 800a35c:	1a000004 	bne	800a374 <__adddf3+0x2b8>
 800a360:	e1b00080 	lsls	r0, r0, #1
 800a364:	e0b11001 	adcs	r1, r1, r1
 800a368:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 800a36c:	e8bd4030 	pop	{r4, r5, lr}
 800a370:	e12fff1e 	bx	lr
 800a374:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 800a378:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 800a37c:	38bd4030 	popcc	{r4, r5, lr}
 800a380:	312fff1e 	bxcc	lr
 800a384:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 800a388:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 800a38c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 800a390:	e3a00000 	mov	r0, #0
 800a394:	e8bd4030 	pop	{r4, r5, lr}
 800a398:	e12fff1e 	bx	lr
 800a39c:	e1f0cac4 	mvns	ip, r4, asr #21
 800a3a0:	11a01003 	movne	r1, r3
 800a3a4:	11a00002 	movne	r0, r2
 800a3a8:	01f0cac5 	mvnseq	ip, r5, asr #21
 800a3ac:	11a03001 	movne	r3, r1
 800a3b0:	11a02000 	movne	r2, r0
 800a3b4:	e1904601 	orrs	r4, r0, r1, lsl #12
 800a3b8:	01925603 	orrseq	r5, r2, r3, lsl #12
 800a3bc:	01310003 	teqeq	r1, r3
 800a3c0:	13811702 	orrne	r1, r1, #524288	; 0x80000
 800a3c4:	e8bd4030 	pop	{r4, r5, lr}
 800a3c8:	e12fff1e 	bx	lr

0800a3cc <__aeabi_ui2d>:
 800a3cc:	e3300000 	teq	r0, #0
 800a3d0:	03a01000 	moveq	r1, #0
 800a3d4:	012fff1e 	bxeq	lr
 800a3d8:	e92d4030 	push	{r4, r5, lr}
 800a3dc:	e3a04b01 	mov	r4, #1024	; 0x400
 800a3e0:	e2844032 	add	r4, r4, #50	; 0x32
 800a3e4:	e3a05000 	mov	r5, #0
 800a3e8:	e3a01000 	mov	r1, #0
 800a3ec:	eaffff86 	b	800a20c <__adddf3+0x150>

0800a3f0 <__aeabi_i2d>:
 800a3f0:	e3300000 	teq	r0, #0
 800a3f4:	03a01000 	moveq	r1, #0
 800a3f8:	012fff1e 	bxeq	lr
 800a3fc:	e92d4030 	push	{r4, r5, lr}
 800a400:	e3a04b01 	mov	r4, #1024	; 0x400
 800a404:	e2844032 	add	r4, r4, #50	; 0x32
 800a408:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 800a40c:	42600000 	rsbmi	r0, r0, #0
 800a410:	e3a01000 	mov	r1, #0
 800a414:	eaffff7c 	b	800a20c <__adddf3+0x150>

0800a418 <__aeabi_f2d>:
 800a418:	e1b02080 	lsls	r2, r0, #1
 800a41c:	e1a011c2 	asr	r1, r2, #3
 800a420:	e1a01061 	rrx	r1, r1
 800a424:	e1a00e02 	lsl	r0, r2, #28
 800a428:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 800a42c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800a430:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 800a434:	112fff1e 	bxne	lr
 800a438:	e3320000 	teq	r2, #0
 800a43c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800a440:	012fff1e 	bxeq	lr
 800a444:	e92d4030 	push	{r4, r5, lr}
 800a448:	e3a04d0e 	mov	r4, #896	; 0x380
 800a44c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 800a450:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 800a454:	eaffff6c 	b	800a20c <__adddf3+0x150>

0800a458 <__aeabi_ul2d>:
 800a458:	e1902001 	orrs	r2, r0, r1
 800a45c:	012fff1e 	bxeq	lr
 800a460:	e92d4030 	push	{r4, r5, lr}
 800a464:	e3a05000 	mov	r5, #0
 800a468:	ea000006 	b	800a488 <__aeabi_l2d+0x1c>

0800a46c <__aeabi_l2d>:
 800a46c:	e1902001 	orrs	r2, r0, r1
 800a470:	012fff1e 	bxeq	lr
 800a474:	e92d4030 	push	{r4, r5, lr}
 800a478:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 800a47c:	5a000001 	bpl	800a488 <__aeabi_l2d+0x1c>
 800a480:	e2700000 	rsbs	r0, r0, #0
 800a484:	e2e11000 	rsc	r1, r1, #0
 800a488:	e3a04b01 	mov	r4, #1024	; 0x400
 800a48c:	e2844032 	add	r4, r4, #50	; 0x32
 800a490:	e1b0cb21 	lsrs	ip, r1, #22
 800a494:	0affff44 	beq	800a1ac <__adddf3+0xf0>
 800a498:	e3a02003 	mov	r2, #3
 800a49c:	e1b0c1ac 	lsrs	ip, ip, #3
 800a4a0:	12822003 	addne	r2, r2, #3
 800a4a4:	e1b0c1ac 	lsrs	ip, ip, #3
 800a4a8:	12822003 	addne	r2, r2, #3
 800a4ac:	e08221ac 	add	r2, r2, ip, lsr #3
 800a4b0:	e2623020 	rsb	r3, r2, #32
 800a4b4:	e1a0c310 	lsl	ip, r0, r3
 800a4b8:	e1a00230 	lsr	r0, r0, r2
 800a4bc:	e1800311 	orr	r0, r0, r1, lsl r3
 800a4c0:	e1a01231 	lsr	r1, r1, r2
 800a4c4:	e0844002 	add	r4, r4, r2
 800a4c8:	eaffff37 	b	800a1ac <__adddf3+0xf0>

0800a4cc <__aeabi_dmul>:
 800a4cc:	e92d4070 	push	{r4, r5, r6, lr}
 800a4d0:	e3a0c0ff 	mov	ip, #255	; 0xff
 800a4d4:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 800a4d8:	e01c4a21 	ands	r4, ip, r1, lsr #20
 800a4dc:	101c5a23 	andsne	r5, ip, r3, lsr #20
 800a4e0:	1134000c 	teqne	r4, ip
 800a4e4:	1135000c 	teqne	r5, ip
 800a4e8:	0b000075 	bleq	800a6c4 <__aeabi_dmul+0x1f8>
 800a4ec:	e0844005 	add	r4, r4, r5
 800a4f0:	e0216003 	eor	r6, r1, r3
 800a4f4:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 800a4f8:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 800a4fc:	e1905601 	orrs	r5, r0, r1, lsl #12
 800a500:	11925603 	orrsne	r5, r2, r3, lsl #12
 800a504:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800a508:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 800a50c:	0a00001d 	beq	800a588 <__aeabi_dmul+0xbc>
 800a510:	e08ec290 	umull	ip, lr, r0, r2
 800a514:	e3a05000 	mov	r5, #0
 800a518:	e0a5e291 	umlal	lr, r5, r1, r2
 800a51c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 800a520:	e0a5e390 	umlal	lr, r5, r0, r3
 800a524:	e3a06000 	mov	r6, #0
 800a528:	e0a65391 	umlal	r5, r6, r1, r3
 800a52c:	e33c0000 	teq	ip, #0
 800a530:	138ee001 	orrne	lr, lr, #1
 800a534:	e24440ff 	sub	r4, r4, #255	; 0xff
 800a538:	e3560c02 	cmp	r6, #512	; 0x200
 800a53c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 800a540:	2a000002 	bcs	800a550 <__aeabi_dmul+0x84>
 800a544:	e1b0e08e 	lsls	lr, lr, #1
 800a548:	e0b55005 	adcs	r5, r5, r5
 800a54c:	e0a66006 	adc	r6, r6, r6
 800a550:	e1821586 	orr	r1, r2, r6, lsl #11
 800a554:	e1811aa5 	orr	r1, r1, r5, lsr #21
 800a558:	e1a00585 	lsl	r0, r5, #11
 800a55c:	e1800aae 	orr	r0, r0, lr, lsr #21
 800a560:	e1a0e58e 	lsl	lr, lr, #11
 800a564:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 800a568:	835c0c07 	cmphi	ip, #1792	; 0x700
 800a56c:	8a000011 	bhi	800a5b8 <__aeabi_dmul+0xec>
 800a570:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 800a574:	01b0e0a0 	lsrseq	lr, r0, #1
 800a578:	e2b00000 	adcs	r0, r0, #0
 800a57c:	e0a11a04 	adc	r1, r1, r4, lsl #20
 800a580:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a584:	e12fff1e 	bx	lr
 800a588:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 800a58c:	e1861001 	orr	r1, r6, r1
 800a590:	e1800002 	orr	r0, r0, r2
 800a594:	e0211003 	eor	r1, r1, r3
 800a598:	e05440ac 	subs	r4, r4, ip, lsr #1
 800a59c:	c074500c 	rsbsgt	r5, r4, ip
 800a5a0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 800a5a4:	c8bd4070 	popgt	{r4, r5, r6, lr}
 800a5a8:	c12fff1e 	bxgt	lr
 800a5ac:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800a5b0:	e3a0e000 	mov	lr, #0
 800a5b4:	e2544001 	subs	r4, r4, #1
 800a5b8:	ca00005d 	bgt	800a734 <__aeabi_dmul+0x268>
 800a5bc:	e3740036 	cmn	r4, #54	; 0x36
 800a5c0:	d3a00000 	movle	r0, #0
 800a5c4:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 800a5c8:	d8bd4070 	pople	{r4, r5, r6, lr}
 800a5cc:	d12fff1e 	bxle	lr
 800a5d0:	e2644000 	rsb	r4, r4, #0
 800a5d4:	e2544020 	subs	r4, r4, #32
 800a5d8:	aa00001a 	bge	800a648 <__aeabi_dmul+0x17c>
 800a5dc:	e294400c 	adds	r4, r4, #12
 800a5e0:	ca00000c 	bgt	800a618 <__aeabi_dmul+0x14c>
 800a5e4:	e2844014 	add	r4, r4, #20
 800a5e8:	e2645020 	rsb	r5, r4, #32
 800a5ec:	e1a03510 	lsl	r3, r0, r5
 800a5f0:	e1a00430 	lsr	r0, r0, r4
 800a5f4:	e1800511 	orr	r0, r0, r1, lsl r5
 800a5f8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 800a5fc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 800a600:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800a604:	e0a21431 	adc	r1, r2, r1, lsr r4
 800a608:	e19ee083 	orrs	lr, lr, r3, lsl #1
 800a60c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800a610:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a614:	e12fff1e 	bx	lr
 800a618:	e264400c 	rsb	r4, r4, #12
 800a61c:	e2645020 	rsb	r5, r4, #32
 800a620:	e1a03410 	lsl	r3, r0, r4
 800a624:	e1a00530 	lsr	r0, r0, r5
 800a628:	e1800411 	orr	r0, r0, r1, lsl r4
 800a62c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800a630:	e0900fa3 	adds	r0, r0, r3, lsr #31
 800a634:	e2a11000 	adc	r1, r1, #0
 800a638:	e19ee083 	orrs	lr, lr, r3, lsl #1
 800a63c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800a640:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a644:	e12fff1e 	bx	lr
 800a648:	e2645020 	rsb	r5, r4, #32
 800a64c:	e18ee510 	orr	lr, lr, r0, lsl r5
 800a650:	e1a03430 	lsr	r3, r0, r4
 800a654:	e1833511 	orr	r3, r3, r1, lsl r5
 800a658:	e1a00431 	lsr	r0, r1, r4
 800a65c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800a660:	e1c00431 	bic	r0, r0, r1, lsr r4
 800a664:	e0800fa3 	add	r0, r0, r3, lsr #31
 800a668:	e19ee083 	orrs	lr, lr, r3, lsl #1
 800a66c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800a670:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a674:	e12fff1e 	bx	lr
 800a678:	e3340000 	teq	r4, #0
 800a67c:	1a000008 	bne	800a6a4 <__aeabi_dmul+0x1d8>
 800a680:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 800a684:	e1b00080 	lsls	r0, r0, #1
 800a688:	e0a11001 	adc	r1, r1, r1
 800a68c:	e3110601 	tst	r1, #1048576	; 0x100000
 800a690:	02444001 	subeq	r4, r4, #1
 800a694:	0afffffa 	beq	800a684 <__aeabi_dmul+0x1b8>
 800a698:	e1811006 	orr	r1, r1, r6
 800a69c:	e3350000 	teq	r5, #0
 800a6a0:	112fff1e 	bxne	lr
 800a6a4:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 800a6a8:	e1b02082 	lsls	r2, r2, #1
 800a6ac:	e0a33003 	adc	r3, r3, r3
 800a6b0:	e3130601 	tst	r3, #1048576	; 0x100000
 800a6b4:	02455001 	subeq	r5, r5, #1
 800a6b8:	0afffffa 	beq	800a6a8 <__aeabi_dmul+0x1dc>
 800a6bc:	e1833006 	orr	r3, r3, r6
 800a6c0:	e12fff1e 	bx	lr
 800a6c4:	e134000c 	teq	r4, ip
 800a6c8:	e00c5a23 	and	r5, ip, r3, lsr #20
 800a6cc:	1135000c 	teqne	r5, ip
 800a6d0:	0a000007 	beq	800a6f4 <__aeabi_dmul+0x228>
 800a6d4:	e1906081 	orrs	r6, r0, r1, lsl #1
 800a6d8:	11926083 	orrsne	r6, r2, r3, lsl #1
 800a6dc:	1affffe5 	bne	800a678 <__aeabi_dmul+0x1ac>
 800a6e0:	e0211003 	eor	r1, r1, r3
 800a6e4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800a6e8:	e3a00000 	mov	r0, #0
 800a6ec:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a6f0:	e12fff1e 	bx	lr
 800a6f4:	e1906081 	orrs	r6, r0, r1, lsl #1
 800a6f8:	01a00002 	moveq	r0, r2
 800a6fc:	01a01003 	moveq	r1, r3
 800a700:	11926083 	orrsne	r6, r2, r3, lsl #1
 800a704:	0a000010 	beq	800a74c <__aeabi_dmul+0x280>
 800a708:	e134000c 	teq	r4, ip
 800a70c:	1a000001 	bne	800a718 <__aeabi_dmul+0x24c>
 800a710:	e1906601 	orrs	r6, r0, r1, lsl #12
 800a714:	1a00000c 	bne	800a74c <__aeabi_dmul+0x280>
 800a718:	e135000c 	teq	r5, ip
 800a71c:	1a000003 	bne	800a730 <__aeabi_dmul+0x264>
 800a720:	e1926603 	orrs	r6, r2, r3, lsl #12
 800a724:	11a00002 	movne	r0, r2
 800a728:	11a01003 	movne	r1, r3
 800a72c:	1a000006 	bne	800a74c <__aeabi_dmul+0x280>
 800a730:	e0211003 	eor	r1, r1, r3
 800a734:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800a738:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 800a73c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 800a740:	e3a00000 	mov	r0, #0
 800a744:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a748:	e12fff1e 	bx	lr
 800a74c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 800a750:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 800a754:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a758:	e12fff1e 	bx	lr

0800a75c <__aeabi_ddiv>:
 800a75c:	e92d4070 	push	{r4, r5, r6, lr}
 800a760:	e3a0c0ff 	mov	ip, #255	; 0xff
 800a764:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 800a768:	e01c4a21 	ands	r4, ip, r1, lsr #20
 800a76c:	101c5a23 	andsne	r5, ip, r3, lsr #20
 800a770:	1134000c 	teqne	r4, ip
 800a774:	1135000c 	teqne	r5, ip
 800a778:	0b00005e 	bleq	800a8f8 <__aeabi_ddiv+0x19c>
 800a77c:	e0444005 	sub	r4, r4, r5
 800a780:	e021e003 	eor	lr, r1, r3
 800a784:	e1925603 	orrs	r5, r2, r3, lsl #12
 800a788:	e1a01601 	lsl	r1, r1, #12
 800a78c:	0a00004c 	beq	800a8c4 <__aeabi_ddiv+0x168>
 800a790:	e1a03603 	lsl	r3, r3, #12
 800a794:	e3a05201 	mov	r5, #268435456	; 0x10000000
 800a798:	e1853223 	orr	r3, r5, r3, lsr #4
 800a79c:	e1833c22 	orr	r3, r3, r2, lsr #24
 800a7a0:	e1a02402 	lsl	r2, r2, #8
 800a7a4:	e1855221 	orr	r5, r5, r1, lsr #4
 800a7a8:	e1855c20 	orr	r5, r5, r0, lsr #24
 800a7ac:	e1a06400 	lsl	r6, r0, #8
 800a7b0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 800a7b4:	e1550003 	cmp	r5, r3
 800a7b8:	01560002 	cmpeq	r6, r2
 800a7bc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 800a7c0:	e2844c03 	add	r4, r4, #768	; 0x300
 800a7c4:	2a000001 	bcs	800a7d0 <__aeabi_ddiv+0x74>
 800a7c8:	e1b030a3 	lsrs	r3, r3, #1
 800a7cc:	e1a02062 	rrx	r2, r2
 800a7d0:	e0566002 	subs	r6, r6, r2
 800a7d4:	e0c55003 	sbc	r5, r5, r3
 800a7d8:	e1b030a3 	lsrs	r3, r3, #1
 800a7dc:	e1a02062 	rrx	r2, r2
 800a7e0:	e3a00601 	mov	r0, #1048576	; 0x100000
 800a7e4:	e3a0c702 	mov	ip, #524288	; 0x80000
 800a7e8:	e056e002 	subs	lr, r6, r2
 800a7ec:	e0d5e003 	sbcs	lr, r5, r3
 800a7f0:	20466002 	subcs	r6, r6, r2
 800a7f4:	21a0500e 	movcs	r5, lr
 800a7f8:	2180000c 	orrcs	r0, r0, ip
 800a7fc:	e1b030a3 	lsrs	r3, r3, #1
 800a800:	e1a02062 	rrx	r2, r2
 800a804:	e056e002 	subs	lr, r6, r2
 800a808:	e0d5e003 	sbcs	lr, r5, r3
 800a80c:	20466002 	subcs	r6, r6, r2
 800a810:	21a0500e 	movcs	r5, lr
 800a814:	218000ac 	orrcs	r0, r0, ip, lsr #1
 800a818:	e1b030a3 	lsrs	r3, r3, #1
 800a81c:	e1a02062 	rrx	r2, r2
 800a820:	e056e002 	subs	lr, r6, r2
 800a824:	e0d5e003 	sbcs	lr, r5, r3
 800a828:	20466002 	subcs	r6, r6, r2
 800a82c:	21a0500e 	movcs	r5, lr
 800a830:	2180012c 	orrcs	r0, r0, ip, lsr #2
 800a834:	e1b030a3 	lsrs	r3, r3, #1
 800a838:	e1a02062 	rrx	r2, r2
 800a83c:	e056e002 	subs	lr, r6, r2
 800a840:	e0d5e003 	sbcs	lr, r5, r3
 800a844:	20466002 	subcs	r6, r6, r2
 800a848:	21a0500e 	movcs	r5, lr
 800a84c:	218001ac 	orrcs	r0, r0, ip, lsr #3
 800a850:	e195e006 	orrs	lr, r5, r6
 800a854:	0a00000d 	beq	800a890 <__aeabi_ddiv+0x134>
 800a858:	e1a05205 	lsl	r5, r5, #4
 800a85c:	e1855e26 	orr	r5, r5, r6, lsr #28
 800a860:	e1a06206 	lsl	r6, r6, #4
 800a864:	e1a03183 	lsl	r3, r3, #3
 800a868:	e1833ea2 	orr	r3, r3, r2, lsr #29
 800a86c:	e1a02182 	lsl	r2, r2, #3
 800a870:	e1b0c22c 	lsrs	ip, ip, #4
 800a874:	1affffdb 	bne	800a7e8 <__aeabi_ddiv+0x8c>
 800a878:	e3110601 	tst	r1, #1048576	; 0x100000
 800a87c:	1a000006 	bne	800a89c <__aeabi_ddiv+0x140>
 800a880:	e1811000 	orr	r1, r1, r0
 800a884:	e3a00000 	mov	r0, #0
 800a888:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 800a88c:	eaffffd5 	b	800a7e8 <__aeabi_ddiv+0x8c>
 800a890:	e3110601 	tst	r1, #1048576	; 0x100000
 800a894:	01811000 	orreq	r1, r1, r0
 800a898:	03a00000 	moveq	r0, #0
 800a89c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 800a8a0:	835c0c07 	cmphi	ip, #1792	; 0x700
 800a8a4:	8affff43 	bhi	800a5b8 <__aeabi_dmul+0xec>
 800a8a8:	e055c003 	subs	ip, r5, r3
 800a8ac:	0056c002 	subseq	ip, r6, r2
 800a8b0:	01b0c0a0 	lsrseq	ip, r0, #1
 800a8b4:	e2b00000 	adcs	r0, r0, #0
 800a8b8:	e0a11a04 	adc	r1, r1, r4, lsl #20
 800a8bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 800a8c0:	e12fff1e 	bx	lr
 800a8c4:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 800a8c8:	e18e1621 	orr	r1, lr, r1, lsr #12
 800a8cc:	e09440ac 	adds	r4, r4, ip, lsr #1
 800a8d0:	c074500c 	rsbsgt	r5, r4, ip
 800a8d4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 800a8d8:	c8bd4070 	popgt	{r4, r5, r6, lr}
 800a8dc:	c12fff1e 	bxgt	lr
 800a8e0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 800a8e4:	e3a0e000 	mov	lr, #0
 800a8e8:	e2544001 	subs	r4, r4, #1
 800a8ec:	eaffff31 	b	800a5b8 <__aeabi_dmul+0xec>
 800a8f0:	e185e006 	orr	lr, r5, r6
 800a8f4:	eaffff2f 	b	800a5b8 <__aeabi_dmul+0xec>
 800a8f8:	e00c5a23 	and	r5, ip, r3, lsr #20
 800a8fc:	e134000c 	teq	r4, ip
 800a900:	0135000c 	teqeq	r5, ip
 800a904:	0affff90 	beq	800a74c <__aeabi_dmul+0x280>
 800a908:	e134000c 	teq	r4, ip
 800a90c:	1a000006 	bne	800a92c <__aeabi_ddiv+0x1d0>
 800a910:	e1904601 	orrs	r4, r0, r1, lsl #12
 800a914:	1affff8c 	bne	800a74c <__aeabi_dmul+0x280>
 800a918:	e135000c 	teq	r5, ip
 800a91c:	1affff83 	bne	800a730 <__aeabi_dmul+0x264>
 800a920:	e1a00002 	mov	r0, r2
 800a924:	e1a01003 	mov	r1, r3
 800a928:	eaffff87 	b	800a74c <__aeabi_dmul+0x280>
 800a92c:	e135000c 	teq	r5, ip
 800a930:	1a000004 	bne	800a948 <__aeabi_ddiv+0x1ec>
 800a934:	e1925603 	orrs	r5, r2, r3, lsl #12
 800a938:	0affff68 	beq	800a6e0 <__aeabi_dmul+0x214>
 800a93c:	e1a00002 	mov	r0, r2
 800a940:	e1a01003 	mov	r1, r3
 800a944:	eaffff80 	b	800a74c <__aeabi_dmul+0x280>
 800a948:	e1906081 	orrs	r6, r0, r1, lsl #1
 800a94c:	11926083 	orrsne	r6, r2, r3, lsl #1
 800a950:	1affff48 	bne	800a678 <__aeabi_dmul+0x1ac>
 800a954:	e1904081 	orrs	r4, r0, r1, lsl #1
 800a958:	1affff74 	bne	800a730 <__aeabi_dmul+0x264>
 800a95c:	e1925083 	orrs	r5, r2, r3, lsl #1
 800a960:	1affff5e 	bne	800a6e0 <__aeabi_dmul+0x214>
 800a964:	eaffff78 	b	800a74c <__aeabi_dmul+0x280>

0800a968 <__gedf2>:
 800a968:	e3e0c000 	mvn	ip, #0
 800a96c:	ea000002 	b	800a97c <__cmpdf2+0x4>

0800a970 <__ledf2>:
 800a970:	e3a0c001 	mov	ip, #1
 800a974:	ea000000 	b	800a97c <__cmpdf2+0x4>

0800a978 <__cmpdf2>:
 800a978:	e3a0c001 	mov	ip, #1
 800a97c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 800a980:	e1a0c081 	lsl	ip, r1, #1
 800a984:	e1f0cacc 	mvns	ip, ip, asr #21
 800a988:	e1a0c083 	lsl	ip, r3, #1
 800a98c:	11f0cacc 	mvnsne	ip, ip, asr #21
 800a990:	0a00000e 	beq	800a9d0 <__cmpdf2+0x58>
 800a994:	e28dd004 	add	sp, sp, #4
 800a998:	e190c081 	orrs	ip, r0, r1, lsl #1
 800a99c:	0192c083 	orrseq	ip, r2, r3, lsl #1
 800a9a0:	11310003 	teqne	r1, r3
 800a9a4:	01300002 	teqeq	r0, r2
 800a9a8:	03a00000 	moveq	r0, #0
 800a9ac:	012fff1e 	bxeq	lr
 800a9b0:	e3700000 	cmn	r0, #0
 800a9b4:	e1310003 	teq	r1, r3
 800a9b8:	51510003 	cmppl	r1, r3
 800a9bc:	01500002 	cmpeq	r0, r2
 800a9c0:	21a00fc3 	asrcs	r0, r3, #31
 800a9c4:	31e00fc3 	mvncc	r0, r3, asr #31
 800a9c8:	e3800001 	orr	r0, r0, #1
 800a9cc:	e12fff1e 	bx	lr
 800a9d0:	e1a0c081 	lsl	ip, r1, #1
 800a9d4:	e1f0cacc 	mvns	ip, ip, asr #21
 800a9d8:	1a000001 	bne	800a9e4 <__cmpdf2+0x6c>
 800a9dc:	e190c601 	orrs	ip, r0, r1, lsl #12
 800a9e0:	1a000004 	bne	800a9f8 <__cmpdf2+0x80>
 800a9e4:	e1a0c083 	lsl	ip, r3, #1
 800a9e8:	e1f0cacc 	mvns	ip, ip, asr #21
 800a9ec:	1affffe8 	bne	800a994 <__cmpdf2+0x1c>
 800a9f0:	e192c603 	orrs	ip, r2, r3, lsl #12
 800a9f4:	0affffe6 	beq	800a994 <__cmpdf2+0x1c>
 800a9f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 800a9fc:	e12fff1e 	bx	lr

0800aa00 <__aeabi_cdrcmple>:
 800aa00:	e1a0c000 	mov	ip, r0
 800aa04:	e1a00002 	mov	r0, r2
 800aa08:	e1a0200c 	mov	r2, ip
 800aa0c:	e1a0c001 	mov	ip, r1
 800aa10:	e1a01003 	mov	r1, r3
 800aa14:	e1a0300c 	mov	r3, ip
 800aa18:	eaffffff 	b	800aa1c <__aeabi_cdcmpeq>

0800aa1c <__aeabi_cdcmpeq>:
 800aa1c:	e92d4001 	push	{r0, lr}
 800aa20:	ebffffd4 	bl	800a978 <__cmpdf2>
 800aa24:	e3500000 	cmp	r0, #0
 800aa28:	43700000 	cmnmi	r0, #0
 800aa2c:	e8bd4001 	pop	{r0, lr}
 800aa30:	e12fff1e 	bx	lr

0800aa34 <__aeabi_dcmpeq>:
 800aa34:	e52de008 	str	lr, [sp, #-8]!
 800aa38:	ebfffff7 	bl	800aa1c <__aeabi_cdcmpeq>
 800aa3c:	03a00001 	moveq	r0, #1
 800aa40:	13a00000 	movne	r0, #0
 800aa44:	e49de008 	ldr	lr, [sp], #8
 800aa48:	e12fff1e 	bx	lr

0800aa4c <__aeabi_dcmplt>:
 800aa4c:	e52de008 	str	lr, [sp, #-8]!
 800aa50:	ebfffff1 	bl	800aa1c <__aeabi_cdcmpeq>
 800aa54:	33a00001 	movcc	r0, #1
 800aa58:	23a00000 	movcs	r0, #0
 800aa5c:	e49de008 	ldr	lr, [sp], #8
 800aa60:	e12fff1e 	bx	lr

0800aa64 <__aeabi_dcmple>:
 800aa64:	e52de008 	str	lr, [sp, #-8]!
 800aa68:	ebffffeb 	bl	800aa1c <__aeabi_cdcmpeq>
 800aa6c:	93a00001 	movls	r0, #1
 800aa70:	83a00000 	movhi	r0, #0
 800aa74:	e49de008 	ldr	lr, [sp], #8
 800aa78:	e12fff1e 	bx	lr

0800aa7c <__aeabi_dcmpge>:
 800aa7c:	e52de008 	str	lr, [sp, #-8]!
 800aa80:	ebffffde 	bl	800aa00 <__aeabi_cdrcmple>
 800aa84:	93a00001 	movls	r0, #1
 800aa88:	83a00000 	movhi	r0, #0
 800aa8c:	e49de008 	ldr	lr, [sp], #8
 800aa90:	e12fff1e 	bx	lr

0800aa94 <__aeabi_dcmpgt>:
 800aa94:	e52de008 	str	lr, [sp, #-8]!
 800aa98:	ebffffd8 	bl	800aa00 <__aeabi_cdrcmple>
 800aa9c:	33a00001 	movcc	r0, #1
 800aaa0:	23a00000 	movcs	r0, #0
 800aaa4:	e49de008 	ldr	lr, [sp], #8
 800aaa8:	e12fff1e 	bx	lr

0800aaac <__aeabi_d2iz>:
 800aaac:	e1a02081 	lsl	r2, r1, #1
 800aab0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 800aab4:	2a00000c 	bcs	800aaec <__aeabi_d2iz+0x40>
 800aab8:	5a000009 	bpl	800aae4 <__aeabi_d2iz+0x38>
 800aabc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 800aac0:	e0532ac2 	subs	r2, r3, r2, asr #21
 800aac4:	9a00000a 	bls	800aaf4 <__aeabi_d2iz+0x48>
 800aac8:	e1a03581 	lsl	r3, r1, #11
 800aacc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 800aad0:	e1833aa0 	orr	r3, r3, r0, lsr #21
 800aad4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 800aad8:	e1a00233 	lsr	r0, r3, r2
 800aadc:	12600000 	rsbne	r0, r0, #0
 800aae0:	e12fff1e 	bx	lr
 800aae4:	e3a00000 	mov	r0, #0
 800aae8:	e12fff1e 	bx	lr
 800aaec:	e1900601 	orrs	r0, r0, r1, lsl #12
 800aaf0:	1a000002 	bne	800ab00 <__aeabi_d2iz+0x54>
 800aaf4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 800aaf8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 800aafc:	e12fff1e 	bx	lr
 800ab00:	e3a00000 	mov	r0, #0
 800ab04:	e12fff1e 	bx	lr

0800ab08 <main>:
#include "ST7032i.h"


ST7032i lcd;

int main(void) {
 800ab08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	b09f      	sub	sp, #124	; 0x7c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 800ab0e:	f7f5 fc95 	bl	800043c <TIM2_timer_start>

	usart_begin(&Serial3, PB11, PB10, 19200);
 800ab12:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800ab16:	f240 220a 	movw	r2, #522	; 0x20a
 800ab1a:	488f      	ldr	r0, [pc, #572]	; (800ad58 <main+0x250>)
 800ab1c:	f240 210b 	movw	r1, #523	; 0x20b
 800ab20:	f7f6 f905 	bl	8000d2e <usart_begin>
	usart_print(&Serial3,
 800ab24:	488c      	ldr	r0, [pc, #560]	; (800ad58 <main+0x250>)
 800ab26:	498d      	ldr	r1, [pc, #564]	; (800ad5c <main+0x254>)
 800ab28:	f7f6 fa46 	bl	8000fb8 <usart_print>
			"Happy are those who know they are spiritually poor; \n");
	usart_print(&Serial3, "The kingdom of heaven belongs to them!\n");
 800ab2c:	488a      	ldr	r0, [pc, #552]	; (800ad58 <main+0x250>)
 800ab2e:	498c      	ldr	r1, [pc, #560]	; (800ad60 <main+0x258>)
 800ab30:	f7f6 fa42 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "How many eyes does Mississipi river have?\n");
 800ab34:	4888      	ldr	r0, [pc, #544]	; (800ad58 <main+0x250>)
 800ab36:	498b      	ldr	r1, [pc, #556]	; (800ad64 <main+0x25c>)
 800ab38:	f7f6 fa3e 	bl	8000fb8 <usart_print>
	usart_print(&Serial3, "Quick brown fox jumped over the lazy dog!\n");
 800ab3c:	498a      	ldr	r1, [pc, #552]	; (800ad68 <main+0x260>)
 800ab3e:	4886      	ldr	r0, [pc, #536]	; (800ad58 <main+0x250>)
 800ab40:	f7f6 fa3a 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800ab44:	4884      	ldr	r0, [pc, #528]	; (800ad58 <main+0x250>)
 800ab46:	f7f6 fa4f 	bl	8000fe8 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800ab4a:	a803      	add	r0, sp, #12
 800ab4c:	f7f6 ff4c 	bl	80019e8 <RCC_GetClocksFreq>

	usart_print(&Serial3, "RCC_Clocks called.\n");
 800ab50:	4986      	ldr	r1, [pc, #536]	; (800ad6c <main+0x264>)
 800ab52:	4881      	ldr	r0, [pc, #516]	; (800ad58 <main+0x250>)
 800ab54:	f7f6 fa30 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800ab58:	487f      	ldr	r0, [pc, #508]	; (800ad58 <main+0x250>)
 800ab5a:	f7f6 fa45 	bl	8000fe8 <usart_flush>

	usart_print(&Serial3, "sprintf ");
 800ab5e:	4984      	ldr	r1, [pc, #528]	; (800ad70 <main+0x268>)
 800ab60:	487d      	ldr	r0, [pc, #500]	; (800ad58 <main+0x250>)
 800ab62:	f7f6 fa29 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800ab66:	487c      	ldr	r0, [pc, #496]	; (800ad58 <main+0x250>)
 800ab68:	f7f6 fa3e 	bl	8000fe8 <usart_flush>
	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 800ab6c:	9a03      	ldr	r2, [sp, #12]
 800ab6e:	4981      	ldr	r1, [pc, #516]	; (800ad74 <main+0x26c>)
 800ab70:	a807      	add	r0, sp, #28
 800ab72:	f7f8 ec3c 	blx	80033ec <sprintf>
	usart_print(&Serial3, " passed.\n");
 800ab76:	4980      	ldr	r1, [pc, #512]	; (800ad78 <main+0x270>)
 800ab78:	4877      	ldr	r0, [pc, #476]	; (800ad58 <main+0x250>)
 800ab7a:	f7f6 fa1d 	bl	8000fb8 <usart_print>
	usart_flush(&Serial3);
 800ab7e:	4876      	ldr	r0, [pc, #472]	; (800ad58 <main+0x250>)
 800ab80:	f7f6 fa32 	bl	8000fe8 <usart_flush>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/
	GPIOMode(PinPort(PD12),
 800ab84:	f240 400c 	movw	r0, #1036	; 0x40c
 800ab88:	f7f5 fcee 	bl	8000568 <PinPort>
 800ab8c:	4604      	mov	r4, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800ab8e:	f240 400c 	movw	r0, #1036	; 0x40c
 800ab92:	f7f5 fcf1 	bl	8000578 <PinBit>
 800ab96:	4605      	mov	r5, r0
 800ab98:	f240 400d 	movw	r0, #1037	; 0x40d
 800ab9c:	f7f5 fcec 	bl	8000578 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/
	GPIOMode(PinPort(PD12),
 800aba0:	4328      	orrs	r0, r5
 800aba2:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800aba4:	f240 400e 	movw	r0, #1038	; 0x40e
 800aba8:	f7f5 fce6 	bl	8000578 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/
	GPIOMode(PinPort(PD12),
 800abac:	4328      	orrs	r0, r5
 800abae:	b285      	uxth	r5, r0
			(PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)), OUTPUT,
 800abb0:	f240 400f 	movw	r0, #1039	; 0x40f
 800abb4:	f7f5 fce0 	bl	8000578 <PinBit>
	usart_print(&Serial3, tmp);
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
	usart_print(&Serial3, tmp);
	usart_flush(&Serial3);
*/
	GPIOMode(PinPort(PD12),
 800abb8:	2300      	movs	r3, #0
 800abba:	ea45 0100 	orr.w	r1, r5, r0
 800abbe:	2201      	movs	r2, #1
 800abc0:	b289      	uxth	r1, r1
 800abc2:	4620      	mov	r0, r4
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	2302      	movs	r3, #2
 800abca:	f7f5 fd3d 	bl	8000648 <GPIOMode>
	usart_print(&Serial3, "st7032i has started.\n");
	usart_flush(&Serial3);
	ST7032i_setContrast(&lcd, 40);
	ST7032i_print(&lcd, "Hi there!");       // Classic Hello World!
*/
	bits = GPIO_ReadOutputData(GPIOD );
 800abce:	486b      	ldr	r0, [pc, #428]	; (800ad7c <main+0x274>)
 800abd0:	f7f6 fc3e 	bl	8001450 <GPIO_ReadOutputData>
 800abd4:	4604      	mov	r4, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 800abd6:	f240 400d 	movw	r0, #1037	; 0x40d
 800abda:	f7f5 fccd 	bl	8000578 <PinBit>
 800abde:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800abe2:	ea40 0104 	orr.w	r1, r0, r4
 800abe6:	b289      	uxth	r1, r1
 800abe8:	4864      	ldr	r0, [pc, #400]	; (800ad7c <main+0x274>)
 800abea:	f7f5 fd87 	bl	80006fc <GPIOWrite>
	delay_ms(intval);
 800abee:	2028      	movs	r0, #40	; 0x28
 800abf0:	f7f5 fc7e 	bl	80004f0 <delay_ms>
	tnow = millis() / 1000;
 800abf4:	f7f5 fc76 	bl	80004e4 <millis>
 800abf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abfc:	fbb0 f4f3 	udiv	r4, r0, r3
	while (tnow == millis() / 1000)
 800ac00:	461d      	mov	r5, r3
 800ac02:	f7f5 fc6f 	bl	80004e4 <millis>
 800ac06:	fbb0 f0f5 	udiv	r0, r0, r5
 800ac0a:	4284      	cmp	r4, r0
 800ac0c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800ac10:	d0f7      	beq.n	800ac02 <main+0xfa>
		;
	tnow = millis() / 1000;
 800ac12:	f7f5 fc67 	bl	80004e4 <millis>
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
 800ac16:	46b9      	mov	r9, r7
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis() / 1000;
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;
 800ac18:	fbb0 f5f7 	udiv	r5, r0, r7
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
			usart_print(&Serial3, "> ");
			usart_print(&Serial3, tmp);
 800ac1c:	ae07      	add	r6, sp, #28
	while (tnow == millis() / 1000)
		;
	tnow = millis() / 1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD );
 800ac1e:	4857      	ldr	r0, [pc, #348]	; (800ad7c <main+0x274>)
 800ac20:	f7f6 fc16 	bl	8001450 <GPIO_ReadOutputData>
 800ac24:	4604      	mov	r4, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 800ac26:	f240 400d 	movw	r0, #1037	; 0x40d
 800ac2a:	f7f5 fca5 	bl	8000578 <PinBit>
 800ac2e:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800ac32:	b2a4      	uxth	r4, r4
 800ac34:	ea44 0100 	orr.w	r1, r4, r0
 800ac38:	b289      	uxth	r1, r1
 800ac3a:	4850      	ldr	r0, [pc, #320]	; (800ad7c <main+0x274>)
 800ac3c:	f7f5 fd5e 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800ac40:	2028      	movs	r0, #40	; 0x28
 800ac42:	f7f5 fc55 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 800ac46:	f240 400e 	movw	r0, #1038	; 0x40e
 800ac4a:	f7f5 fc95 	bl	8000578 <PinBit>
 800ac4e:	ea44 0100 	orr.w	r1, r4, r0
 800ac52:	b289      	uxth	r1, r1
 800ac54:	4849      	ldr	r0, [pc, #292]	; (800ad7c <main+0x274>)
 800ac56:	f7f5 fd51 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800ac5a:	2028      	movs	r0, #40	; 0x28
 800ac5c:	f7f5 fc48 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 800ac60:	f240 400f 	movw	r0, #1039	; 0x40f
 800ac64:	f7f5 fc88 	bl	8000578 <PinBit>
 800ac68:	ea44 0100 	orr.w	r1, r4, r0
 800ac6c:	b289      	uxth	r1, r1
 800ac6e:	4843      	ldr	r0, [pc, #268]	; (800ad7c <main+0x274>)
 800ac70:	f7f5 fd44 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800ac74:	2028      	movs	r0, #40	; 0x28
 800ac76:	f7f5 fc3b 	bl	80004f0 <delay_ms>
		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 800ac7a:	f240 400c 	movw	r0, #1036	; 0x40c
 800ac7e:	f7f5 fc7b 	bl	8000578 <PinBit>
 800ac82:	ea44 0100 	orr.w	r1, r4, r0
 800ac86:	b289      	uxth	r1, r1
 800ac88:	483c      	ldr	r0, [pc, #240]	; (800ad7c <main+0x274>)
 800ac8a:	f7f5 fd37 	bl	80006fc <GPIOWrite>
		delay_ms(intval);
 800ac8e:	2028      	movs	r0, #40	; 0x28
 800ac90:	f7f5 fc2e 	bl	80004f0 <delay_ms>
		//
		bits &= 0x0fff;
		switch ((tnow % 60) / 15) {
 800ac94:	233c      	movs	r3, #60	; 0x3c
 800ac96:	fbb5 f2f3 	udiv	r2, r5, r3
 800ac9a:	fb03 5312 	mls	r3, r3, r2, r5
 800ac9e:	220f      	movs	r2, #15
 800aca0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d00a      	beq.n	800acbe <main+0x1b6>
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d002      	beq.n	800acb2 <main+0x1aa>
 800acac:	2b01      	cmp	r3, #1
 800acae:	d112      	bne.n	800acd6 <main+0x1ce>
 800acb0:	e00b      	b.n	800acca <main+0x1c2>
		case 3:
			bits |= PinBit(PD12);
 800acb2:	f240 400c 	movw	r0, #1036	; 0x40c
 800acb6:	f7f5 fc5f 	bl	8000578 <PinBit>
 800acba:	4320      	orrs	r0, r4
 800acbc:	b284      	uxth	r4, r0
		case 2:
			bits |= PinBit(PD15);
 800acbe:	f240 400f 	movw	r0, #1039	; 0x40f
 800acc2:	f7f5 fc59 	bl	8000578 <PinBit>
 800acc6:	4320      	orrs	r0, r4
 800acc8:	b284      	uxth	r4, r0
		case 1:
			bits |= PinBit(PD14);
 800acca:	f240 400e 	movw	r0, #1038	; 0x40e
 800acce:	f7f5 fc53 	bl	8000578 <PinBit>
 800acd2:	4320      	orrs	r0, r4
 800acd4:	b284      	uxth	r4, r0
		case 0:
		default:
			bits |= PinBit(PD13);
 800acd6:	f240 400d 	movw	r0, #1037	; 0x40d
 800acda:	f7f5 fc4d 	bl	8000578 <PinBit>
 800acde:	ea40 0104 	orr.w	r1, r0, r4
			break;
		}
		GPIOWrite(GPIOD, bits);
 800ace2:	b289      	uxth	r1, r1
 800ace4:	4825      	ldr	r0, [pc, #148]	; (800ad7c <main+0x274>)
 800ace6:	f7f5 fd09 	bl	80006fc <GPIOWrite>

		while (tnow == millis() / 1000);
 800acea:	f7f5 fbfb 	bl	80004e4 <millis>
 800acee:	fbb0 f0f7 	udiv	r0, r0, r7
 800acf2:	4285      	cmp	r5, r0
 800acf4:	d0f9      	beq.n	800acea <main+0x1e2>
		tnow = millis() / 1000;
 800acf6:	f7f5 fbf5 	bl	80004e4 <millis>
/*
		sprintf(tmp, "%04ld", millis());
		usart_print(&Serial3, tmp);
		usart_print(&Serial3, "\n");
*/
		usart_print(&Serial3, ".");
 800acfa:	4921      	ldr	r1, [pc, #132]	; (800ad80 <main+0x278>)
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis() / 1000);
		tnow = millis() / 1000;
 800acfc:	fbb0 f5f9 	udiv	r5, r0, r9
/*
		sprintf(tmp, "%04ld", millis());
		usart_print(&Serial3, tmp);
		usart_print(&Serial3, "\n");
*/
		usart_print(&Serial3, ".");
 800ad00:	4815      	ldr	r0, [pc, #84]	; (800ad58 <main+0x250>)
 800ad02:	f7f6 f959 	bl	8000fb8 <usart_print>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 800ad06:	4814      	ldr	r0, [pc, #80]	; (800ad58 <main+0x250>)
 800ad08:	f7f6 f98a 	bl	8001020 <usart_available>
 800ad0c:	b930      	cbnz	r0, 800ad1c <main+0x214>
 800ad0e:	e786      	b.n	800ac1e <main+0x116>
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
 800ad10:	4811      	ldr	r0, [pc, #68]	; (800ad58 <main+0x250>)
 800ad12:	f7f6 f95f 	bl	8000fd4 <usart_read>
 800ad16:	5530      	strb	r0, [r6, r4]
 800ad18:	3401      	adds	r4, #1
 800ad1a:	e000      	b.n	800ad1e <main+0x216>
		/*
		 dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		 usart3.println(dval);
		 */
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
 800ad1c:	2400      	movs	r4, #0
			while (usart_available(&Serial3) > 0 && i < 92) {
 800ad1e:	480e      	ldr	r0, [pc, #56]	; (800ad58 <main+0x250>)
 800ad20:	fa1f f884 	uxth.w	r8, r4
 800ad24:	f7f6 f97c 	bl	8001020 <usart_available>
 800ad28:	b110      	cbz	r0, 800ad30 <main+0x228>
 800ad2a:	2c5c      	cmp	r4, #92	; 0x5c
 800ad2c:	d1f0      	bne.n	800ad10 <main+0x208>
 800ad2e:	46a0      	mov	r8, r4
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 800ad30:	aa1e      	add	r2, sp, #120	; 0x78
 800ad32:	eb02 0308 	add.w	r3, r2, r8
			usart_print(&Serial3, "> ");
 800ad36:	4808      	ldr	r0, [pc, #32]	; (800ad58 <main+0x250>)
 800ad38:	4912      	ldr	r1, [pc, #72]	; (800ad84 <main+0x27c>)
		uint16_t i = 0;
		if (usart_available(&Serial3) > 0) {
			while (usart_available(&Serial3) > 0 && i < 92) {
				tmp[i++] = (char) usart_read(&Serial3);
			}
			tmp[i] = 0;
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f803 2c5c 	strb.w	r2, [r3, #-92]
			usart_print(&Serial3, "> ");
 800ad40:	f7f6 f93a 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, tmp);
 800ad44:	4631      	mov	r1, r6
 800ad46:	4804      	ldr	r0, [pc, #16]	; (800ad58 <main+0x250>)
 800ad48:	f7f6 f936 	bl	8000fb8 <usart_print>
			usart_print(&Serial3, "\n");
 800ad4c:	4802      	ldr	r0, [pc, #8]	; (800ad58 <main+0x250>)
 800ad4e:	490e      	ldr	r1, [pc, #56]	; (800ad88 <main+0x280>)
 800ad50:	f7f6 f932 	bl	8000fb8 <usart_print>
 800ad54:	e763      	b.n	800ac1e <main+0x116>
 800ad56:	bf00      	nop
 800ad58:	20001018 	.word	0x20001018
 800ad5c:	0800af60 	.word	0x0800af60
 800ad60:	0800af96 	.word	0x0800af96
 800ad64:	0800afbe 	.word	0x0800afbe
 800ad68:	0800afe9 	.word	0x0800afe9
 800ad6c:	0800b014 	.word	0x0800b014
 800ad70:	0800b028 	.word	0x0800b028
 800ad74:	0800b031 	.word	0x0800b031
 800ad78:	0800b040 	.word	0x0800b040
 800ad7c:	40020c00 	.word	0x40020c00
 800ad80:	0800b04a 	.word	0x0800b04a
 800ad84:	0800b04c 	.word	0x0800b04c
 800ad88:	0800af94 	.word	0x0800af94

0800ad8c <Reset_Handler>:
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	e003      	b.n	800ad98 <LoopCopyDataInit>

0800ad90 <CopyDataInit>:
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <LoopFillZerobss+0x10>)
 800ad92:	585b      	ldr	r3, [r3, r1]
 800ad94:	5043      	str	r3, [r0, r1]
 800ad96:	3104      	adds	r1, #4

0800ad98 <LoopCopyDataInit>:
 800ad98:	4809      	ldr	r0, [pc, #36]	; (800adc0 <LoopFillZerobss+0x14>)
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <LoopFillZerobss+0x18>)
 800ad9c:	1842      	adds	r2, r0, r1
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d3f6      	bcc.n	800ad90 <CopyDataInit>
 800ada2:	4a09      	ldr	r2, [pc, #36]	; (800adc8 <LoopFillZerobss+0x1c>)
 800ada4:	e002      	b.n	800adac <LoopFillZerobss>

0800ada6 <FillZerobss>:
 800ada6:	2300      	movs	r3, #0
 800ada8:	f842 3b04 	str.w	r3, [r2], #4

0800adac <LoopFillZerobss>:
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <LoopFillZerobss+0x20>)
 800adae:	429a      	cmp	r2, r3
 800adb0:	d3f9      	bcc.n	800ada6 <FillZerobss>
 800adb2:	f7f8 f969 	bl	8003088 <SystemInit>
 800adb6:	f7ff fea7 	bl	800ab08 <main>
 800adba:	4770      	bx	lr
 800adbc:	0800b0d4 	.word	0x0800b0d4
 800adc0:	20000000 	.word	0x20000000
 800adc4:	2000095c 	.word	0x2000095c
 800adc8:	2000095c 	.word	0x2000095c
 800adcc:	20001690 	.word	0x20001690

0800add0 <ADC_IRQHandler>:
 800add0:	e7fe      	b.n	800add0 <ADC_IRQHandler>
 800add2:	0000      	movs	r0, r0
 800add4:	0000      	movs	r0, r0
	...

0800add8 <____aeabi_idiv0_from_arm>:
 800add8:	e51ff004 	ldr	pc, [pc, #-4]	; 800addc <____aeabi_idiv0_from_arm+0x4>
 800addc:	0800a0ad 	.word	0x0800a0ad
 800ade0:	00000000 	.word	0x00000000
 800ade4:	00000040 	.word	0x00000040
 800ade8:	00000014 	.word	0x00000014
 800adec:	00000054 	.word	0x00000054

0800adf0 <blanks.6718>:
 800adf0:	20202020 20202020 20202020 20202020                     

0800ae00 <zeroes.6719>:
 800ae00:	30303030 30303030 30303030 30303030     0000000000000000

0800ae10 <_global_impure_ptr>:
 800ae10:	200000a8 00000000                       ... ....

0800ae18 <p05.5240>:
 800ae18:	00000005 00000019 0000007d 00000000     ........}.......

0800ae28 <__mprec_tens>:
 800ae28:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ae38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ae48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ae58:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ae68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ae78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ae88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ae98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800aea8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800aeb8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800aec8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800aed8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800aee8:	79d99db4 44ea7843                       ...yCx.D

0800aef0 <__mprec_tinytens>:
 800aef0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800af00:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800af10:	64ac6f43 0ac80628                       Co.d(...

0800af18 <__mprec_bigtens>:
 800af18:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800af28:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800af38:	7f73bf3c 75154fdd                       <.s..O.u

0800af40 <blanks.6662>:
 800af40:	20202020 20202020 20202020 20202020                     

0800af50 <zeroes.6663>:
 800af50:	30303030 30303030 30303030 30303030     0000000000000000
 800af60:	70706148 72612079 68742065 2065736f     Happy are those 
 800af70:	206f6877 776f6e6b 65687420 72612079     who know they ar
 800af80:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 800af90:	203b726f 6854000a 696b2065 6f64676e     or; ..The kingdo
 800afa0:	666f206d 61656820 206e6576 6f6c6562     m of heaven belo
 800afb0:	2073676e 74206f74 216d6568 6f48000a     ngs to them!..Ho
 800afc0:	616d2077 6520796e 20736579 73656f64     w many eyes does
 800afd0:	73694d20 73736973 20697069 65766972      Mississipi rive
 800afe0:	61682072 0a3f6576 69755100 62206b63     r have?..Quick b
 800aff0:	6e776f72 786f6620 6d756a20 20646570     rown fox jumped 
 800b000:	7265766f 65687420 7a616c20 6f642079     over the lazy do
 800b010:	000a2167 5f434352 636f6c43 6320736b     g!..RCC_Clocks c
 800b020:	656c6c61 000a2e64 69727073 2066746e     alled...sprintf 
 800b030:	53595300 204b4c43 6c25203d 00202c64     .SYSCLK = %ld, .
 800b040:	73617020 2e646573 002e000a 4800203e      passed.....> .H
 800b050:	20706165 20646e61 63617473 6f63206b     eap and stack co
 800b060:	73696c6c 0a6e6f69 69786500 00000074     llision..exit...
 800b070:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800b080:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800b090:	00000000 33323130 37363534 62613938     ....0123456789ab
 800b0a0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800b0b0:	00000030 69666e49 7974696e 00000000     0...Infinity....
 800b0c0:	004e614e 00000043 49534f50 00000058     NaN.C...POSIX...
 800b0d0:	0000002e                                ....
