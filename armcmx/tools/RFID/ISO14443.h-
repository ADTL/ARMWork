/*
 * NFCCard.h
 *
 *  Created on: 2012/07/24
 *      Author: sin
 */

#ifndef ISO14443_H_
#define ISO14443_H_

#include <string.h>
#include "armcmx.h"
#include "Print.h"

//#include "PN532_I2C.h"
static const byte TypeA = 0x00;
static const byte TypeF = 0x01;
static const byte TypeF_212kb = 0x01;
static const byte TypeF_424kb = 0x02;
static const byte TypeB = 0x03;
static const byte TypeJewel = 0x03;
static const byte Mifare = 0x10;
static const byte FeliCa212kb = 0x11;
static const byte FeliCa424kb = 0x12;
static const byte Type_Empty = 0xff;

static const word FELICA_SYSCODE_COMMON = 0x00FE;
static const word FELICA_SYSCODE_SUICA = 0x0003;
static const word FELICA_SERVICE_SUICA = 0x090F;
static const word FELICA_SERVICE_EDY = 0x170F;
static const word FELICA_SERVICE_FCF = 0x1a8b;

/*
Theses values comes from http://www.libnfc.org/documentation/hardware/tags/iso14443

Manufacturer	Product			ATQA	SAK	ATS (called ATR for contact smartcards) 

NXP		MIFARE Mini		00 04 	09 	
		MIFARE Classic 1K 	00 04 	08 	
		MIFARE Classic 4K 	00 02 	18 	
		MIFARE Ultralight 	00 44 	00 	
		MIFARE DESFire		03 44 	20 	06 75 77 81 02 80
		MIFARE DESFire EV1 	03 44 	20 	06 75 77 81 02 80
		JCOP31			03 04 	28 	38 77 b1 4a 43 4f 50 33 31
		JCOP31 v2.4.1		00 48 	20 	78 77 b1 02 4a 43 4f 50 76 32 34 31
		JCOP41 v2.2		00 48 	20 	38 33 b1 4a 43 4f 50 34 31 56 32 32
		JCOP41 v2.3.1		00 04 	28 	38 33 b1 4a 43 4f 50 34 31 56 32 33 31
Infineon 	MIFARE Classic 1K 	00 04 	88 	
Gemplus 	MPCOS 			00 02 	98
Innovision R&T 	Jewel 			0C 00
*/

static const word ATQA_MIFARE_CLASSIC1K = 0x0004;
static const word ATQA_MIFARE_CLASSIC4K = 0x0002;
static const word ATQA_MIFARE_ULTRALIGHT = 0x0044;
static const word ATQA_MIFARE_DESFIRE = 0x0344;
static const word ATQA_MIFARE_DESFIRE_EV1 = 0x0344;


struct ISO14443 {
	static const byte NFCID_MAXSIZE = 8;
	//
	byte type;
  word SENS_RES;
  byte SEL_RES;
	byte IDLength;
	byte ID[NFCID_MAXSIZE];

  
	ISO14443() {
		clear();
	}

	ISO14443(const byte * raw) {
		set(raw);
	}

	ISO14443(const byte & card) {
		set(card);
	}

	void set(const ISO14443 & card) {
		type = card.type;
		IDLength = card.IDLength;
		switch (type) {
		case FeliCa212kb: // Felica
			memcpy(ID, card.ID, IDLength);
			break;
		default: // Mifare
			memcpy(ID, card.ID, IDLength);
			break;
		}
	}

	ISO14443 & operator=(const ISO14443 & c) {
		set(c);
		return *this;
	}

	void set(const byte tp, const byte *data, const byte len) {
		type = tp;
		IDLength = len;
		memcpy(ID, data, len);
    SENS_RES = 0;
    SEL_RES = 0;
	}

	void set(const byte tp, const byte * raw) {
		//PN532::printHexString(raw, 16);
		type = tp;
//		byte len = 0;
		switch (type) {
		case FeliCa212kb:
		case FeliCa424kb:
			IDLength = 8;
//			len = raw[1];
			memcpy(ID, raw + 3, 8);
//			memcpy(PMm, raw + 11, 8);
//			if (len == 20)
//				memcpy(SysCode, raw + 19, 2);
			break;
		case Mifare:
		default: // Mifare 106k TypeA
			IDLength = raw[4];
			memcpy(ID, raw + 5, IDLength);
			break;
		}
    SENS_RES = 0;
    SEL_RES = 0;
	}

  void setInList(const byte * pssvres) {
    // pssvres[1] == 1 (target no.)
    const byte * cardres = pssvres+1;
    type = Mifare;
    SENS_RES = cardres[1] | cardres[2]<<8;
    SEL_RES = cardres[3];
    IDLength = cardres[4];
    memcpy(ID, cardres+5, IDLength);
  }
  
	size_t printOn(Print & pr) {
		int cnt = 0;
		switch(type) {
		case Mifare:
			cnt += pr.print("Mifare");
      if (SENS_RES != 0) {
        switch(SENS_RES) {
          case ATQA_MIFARE_CLASSIC1K:
          case ATQA_MIFARE_CLASSIC4K:
            cnt += pr.print(" Classic 1/4K");
            break;
          case ATQA_MIFARE_ULTRALIGHT:
            cnt += pr.print(" Ultralight");
            break;
          case ATQA_MIFARE_DESFIRE:
            cnt+= pr.print(" DESFIRE");
            break;
          default:
            cnt+= pr.print(" Unknown");
            break;
        }
      }
			break;
		case FeliCa212kb:
			cnt += pr.print("FeliCa212kb");
			break;
		case FeliCa424kb:
			cnt += pr.print("FeliCa424kb");
			break;
		case Type_Empty:
			cnt += pr.print("Empty");
			break;
		default:
			cnt += pr.print("Unknown");
			break;
		}
		for(int i = 0; i < IDLength; i++) {
			pr.print(' ');
			pr.print(ID[i]>>4, HEX);
			pr.print(ID[i]&0x0f, HEX);
			cnt += 3;
		}
		return cnt;
	}

	void clear() {
		type = Type_Empty;
		IDLength = 0;
		memset(ID, 0, 8);
	}

	boolean isEmpty(void) {
		return type == Type_Empty || IDLength == 0;
	}
	
	boolean operator==(const ISO14443 & c) const {
		if (type == c.type && IDLength == c.IDLength) {
			return memcmp(ID, c.ID, IDLength) == 0;
		}
		return false;
	}

	inline boolean operator!=(const ISO14443 & c) const {
		return !(operator==(c));
	}
};


union IDData {
  struct {
    uint8 division[2];
    uint8 pid[12];
    uint8 issue;
    uint8 gender;
    uint8 namekana[16];
    uint8 orgid[8];
    uint8 dofissue[8];
    uint8 goodthru[8];
    uint8 issuerdata[8];
  } fcf;
  struct {
    uint8 division[2];
    uint8 pid[8];
    uint8 issue;
    uint8 reserved1[5];
    uint8 namesjis[16];
    uint8 dofbirth[7];
    uint8 gender;
    uint8 dofissue[7];
    uint8 reserved2;
  } iizuka;
  uint8 raw[64];
};

#endif /* NFCCARD_H_ */

